{"root":"0:0:1736","crate_version":"3.2.22","includes_private":false,"index":{"0:3448:2589":{"id":"0:3448:2589","crate_id":0,"name":"HidePossibleValues","span":{"filename":"src/builder/app_settings.rs","begin":[640,4],"end":[640,22]},"visibility":"default","docs":"Deprecated, replaced with [`Command::hide_possible_values`] and\n[`Arg::is_hide_possible_values_set`]\n\nDerive: replace `#[clap(setting = HidePossibleValues)]` with `#[clap(hide_possible_values = true)]`\n\nBuilder: replace `cmd.setting(HidePossibleValues)` with `cmd.hide_possible_values(true)`","links":{"`Command::hide_possible_values`":"0:831:3796","`Arg::is_hide_possible_values_set`":"0:511:4249"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"2:14547:26906":{"id":"2:14547:26906","crate_id":2,"name":"deallocate","span":null,"visibility":"default","docs":"Deallocates the memory referenced by `ptr`.\n\n# Safety\n\n* `ptr` must denote a block of memory [*currently allocated*] via this allocator, and\n* `layout` must [*fit*] that block of memory.\n\n[*currently allocated*]: #currently-allocated-memory\n[*fit*]: #memory-fitting","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["ptr",{"kind":"resolved_path","inner":{"name":"NonNull","id":"2:2391:9139","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}],["layout",{"kind":"resolved_path","inner":{"name":"Layout","id":"2:50749:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"2:23073:21814":{"id":"2:23073:21814","crate_id":2,"name":"simd_max","span":null,"visibility":"default","docs":"Returns the maximum of each lane.\n\nIf one of the values is `NAN`, then the other value is returned.","links":{},"attrs":["#[must_use =\n\"method returns a new vector and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:13721:311":{"id":"2:13721:311","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13722:64084","`u8`":"1:15893:8656"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:451:4031":{"id":"0:451:4031","crate_id":0,"name":"requires_ifs","span":{"filename":"src/builder/arg.rs","begin":[4055,4],"end":[4061,5]},"visibility":"public","docs":"Allows multiple conditional requirements.\n\nThe requirement will only become valid if this arg's value equals `val`.\n\n# Examples\n\n```rust\n# use clap::Arg;\nArg::new(\"config\")\n    .requires_ifs(&[\n        (\"val\", \"arg\"),\n        (\"other_val\", \"arg2\"),\n    ])\n# ;\n```\n\nSetting `Arg::requires_ifs(&[\"val\", \"arg\"])` requires that the `arg` be used at runtime if the\ndefining argument's value is equal to `val`. If the defining argument's value is anything other\nthan `val`, `arg` isn't required.\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .takes_value(true)\n        .requires_ifs(&[\n            (\"special.conf\", \"opt\"),\n            (\"other.conf\", \"other\"),\n        ])\n        .long(\"config\"))\n    .arg(Arg::new(\"opt\")\n        .long(\"option\")\n        .takes_value(true))\n    .arg(Arg::new(\"other\"))\n    .try_get_matches_from(vec![\n        \"prog\", \"--config\", \"special.conf\"\n    ]);\n\nassert!(res.is_err()); // We  used --config=special.conf so --option <val> is required\nassert_eq!(res.unwrap_err().kind(), ErrorKind::MissingRequiredArgument);\n```\n[`Arg::requires(name)`]: Arg::requires()\n[Conflicting]: Arg::conflicts_with()\n[override]: Arg::overrides_with()","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["ifs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"generic","inner":"T"}]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Key","id":"0:3239:2795","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1723":{"id":"0:1723","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[33,0],"end":[33,38]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"possible_value::PossibleValue","name":"PossibleValue","id":"0:4294:1679","glob":false}},"0:514:4259":{"id":"0:514:4259","crate_id":0,"name":"is_use_value_delimiter_set","span":{"filename":"src/builder/arg.rs","begin":[4768,4],"end":[4770,5]},"visibility":"public","docs":"Report whether [`Arg::use_value_delimiter`] is set","links":{"`Arg::use_value_delimiter`":"0:387:3457"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2173:7612":{"id":"0:2173:7612","crate_id":0,"name":"args_present","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[403,4],"end":[405,5]},"visibility":"public","docs":"Check if any args were present on the command line\n\n# Examples\n\n```rust\n# use clap::{Command, Arg};\nlet mut cmd = Command::new(\"myapp\")\n    .arg(Arg::new(\"output\")\n        .takes_value(true));\n\nlet m = cmd\n    .try_get_matches_from_mut(vec![\"myapp\", \"something\"])\n    .unwrap();\nassert!(m.args_present());\n\nlet m = cmd\n    .try_get_matches_from_mut(vec![\"myapp\"])\n    .unwrap();\nassert!(! m.args_present());","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:794:2118":{"id":"0:794:2118","crate_id":0,"name":"get_matches_from","span":{"filename":"src/builder/command.rs","begin":[595,4],"end":[604,5]},"visibility":"public","docs":"Parse the specified arguments, exiting on failure.\n\n**NOTE:** The first argument will be parsed as the binary name unless\n[`Command::no_binary_name`] is used.\n\n# Panics\n\nIf contradictory arguments or settings exist.\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg};\nlet arg_vec = vec![\"my_prog\", \"some\", \"args\", \"to\", \"parse\"];\n\nlet matches = Command::new(\"myprog\")\n    // Args and options go here...\n    .get_matches_from(arg_vec);\n```\n[`App::get_matches`]: Command::get_matches()\n[`clap::Result`]: Result\n[`Vec`]: std::vec::Vec","links":{"`Command::no_binary_name`":"0:816:5053"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["itr",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4713:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsString","id":"1:2651:183","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3439:8775":{"id":"2:3439:8775","crate_id":2,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3441:184","2:3442:271"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:2868-0:4768:7385":{"id":"b:2:2868-0:4768:7385","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2862:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawValues","id":"0:4768:7385","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2870:27181"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3218-0:4392:2263":{"id":"b:2:3218-0:4392:2263","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StringValueParser","id":"0:4392:2263","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3221:128","2:3222:1435"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:622:4045":{"id":"0:622:4045","crate_id":0,"name":"requires_all","span":{"filename":"src/builder/arg_group.rs","begin":[364,4],"end":[369,5]},"visibility":"public","docs":"Specify arguments or groups that must be present when this group is.\n\nThis is not to be confused with a [required group]. Requirement rules function just like\n[argument requirement rules], you can name other arguments or groups that must be present\nwhen one of the arguments from this group is used.\n\n**NOTE:** The names provided may be an argument or group name\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ArgGroup, ErrorKind};\nlet result = Command::new(\"myprog\")\n    .arg(Arg::new(\"flag\")\n        .short('f'))\n    .arg(Arg::new(\"color\")\n        .short('c'))\n    .arg(Arg::new(\"debug\")\n        .short('d'))\n    .arg(Arg::new(\"verb\")\n        .short('v'))\n    .group(ArgGroup::new(\"req_flags\")\n        .args(&[\"flag\", \"color\"])\n        .requires_all(&[\"debug\", \"verb\"]))\n    .try_get_matches_from(vec![\"myprog\", \"-c\", \"-d\"]);\n// because we used an arg from the group, and the group requires \"-d\" and \"-v\" to be used,\n// yet we only used \"-d\" it's an error\nassert!(result.is_err());\nlet err = result.unwrap_err();\nassert_eq!(err.kind(), ErrorKind::MissingRequiredArgument);\n```\n[required group]: ArgGroup::required()\n[argument requirement rules]: crate::Arg::requires_all()","links":{"ArgGroup::required()":"0:619:1948","crate::Arg::requires_all()":"0:454:4045"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["ns",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:510:4247":{"id":"0:510:4247","crate_id":0,"name":"is_hide_default_value_set","span":{"filename":"src/builder/arg.rs","begin":[4736,4],"end":[4738,5]},"visibility":"public","docs":"Report whether [`Arg::hide_default_value`] is set","links":{"`Arg::hide_default_value`":"0:416:3805"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10514:10265":{"id":"2:10514:10265","crate_id":2,"name":"write_char","span":null,"visibility":"default","docs":"Writes a [`char`] into this writer, returning whether the write succeeded.\n\nA single [`char`] may be encoded as more than one byte.\nThis method can only succeed if the entire byte sequence was successfully\nwritten, and this method will not return until all data has been\nwritten or an error occurs.\n\n# Errors\n\nThis function will return an instance of [`Error`] on error.\n\n# Examples\n\n```\nuse std::fmt::{Error, Write};\n\nfn writer<W: Write>(f: &mut W, c: char) -> Result<(), Error> {\n    f.write_char(c)\n}\n\nlet mut buf = String::new();\nwriter(&mut buf, 'a').unwrap();\nwriter(&mut buf, 'b').unwrap();\nassert_eq!(&buf, \"ab\");\n```","links":{"`Error`":"2:48872:128","`char`":"1:15876:8642"},"attrs":["#[stable(feature = \"fmt_write_char\", since = \"1.1.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["c",{"kind":"primitive","inner":"char"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"2:48872:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2865-0:3351:1659":{"id":"b:2:2865-0:3351:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgAction","id":"0:3351:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2867:2792"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:2867:2792":{"id":"2:2867:2792","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5536:28830":{"id":"1:5536:28830","crate_id":1,"name":"ctime_nsec","span":null,"visibility":"default","docs":"Returns the last status change time of the file, in nanoseconds since [`ctime`].\n\n[`ctime`]: MetadataExt::ctime\n\n# Examples\n\n```no_run\nuse std::fs;\nuse std::os::unix::fs::MetadataExt;\nuse std::io;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    let nano_last_status_change_time = meta.ctime_nsec();\n    Ok(())\n}\n```","links":{"MetadataExt::ctime":"1:5535:28829"},"attrs":["#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:2:3213-0:4457:2273":{"id":"b:2:3213-0:4457:2273","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3183:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FalseyValueParser","id":"0:4457:2273","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3216:128","2:3217:1436"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:929:5843":{"id":"0:929:5843","crate_id":0,"name":"get_long_flag","span":{"filename":"src/builder/command.rs","begin":[3352,4],"end":[3354,5]},"visibility":"public","docs":"Get the long flag of the subcommand.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3412:2483":{"id":"0:3412:2483","crate_id":0,"name":"SubcommandRequiredElseHelp","span":{"filename":"src/builder/app_settings.rs","begin":[288,4],"end":[288,30]},"visibility":"default","docs":"Deprecated, replaced with [`Command::subcommand_required`] combined with\n[`Command::arg_required_else_help`].\n\nDerive: replace `#[clap(setting = SubcommandRequiredElseHelp)]` with `#[clap(subcommand_required = true, arg_required_else_help = true)]`\n\nBuilder: replace `cmd.setting(SubcommandRequiredElseHelp)` with `cmd.subcommand_required(true).arg_required_else_help(true)`","links":{"`Command::arg_required_else_help`":"0:878:5415","`Command::subcommand_required`":"0:906:5633"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"a:2:3370:216-0:1294:2265":{"id":"a:2:3370:216-0:1294:2265","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1294:2265","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:5430:9512":{"id":"1:5430:9512","crate_id":1,"name":"into_vec","span":null,"visibility":"default","docs":"Yields the underlying byte vector of this [`OsString`].\n\nSee the module documentation for an example.","links":{"`OsString`":"1:2651:183"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7898:240","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8224:3098","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:6468:15079":{"id":"1:6468:15079","crate_id":1,"name":"st_rdev","span":null,"visibility":"default","docs":"Returns the device ID that this file represents. Only relevant for special file.\n\n# Examples\n\n```no_run\nuse std::fs;\nuse std::io;\nuse std::os::linux::fs::MetadataExt;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    println!(\"{}\", meta.st_rdev());\n    Ok(())\n}\n```","links":{},"attrs":["#[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:2:3218-0:4569:7000":{"id":"b:2:3218-0:4569:7000","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextValue","id":"0:4569:7000","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3221:128","2:3222:1435"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3392:2427":{"id":"0:3392:2427","crate_id":0,"name":"WaitOnError","span":{"filename":"src/builder/app_settings.rs","begin":[92,4],"end":[92,15]},"visibility":"default","docs":"Deprecated, replace\n```rust,no_run\nlet cmd = clap::Command::new(\"cmd\")\n    .global_setting(clap::AppSettings::WaitOnError)\n    .arg(clap::arg!(--flag));\nlet m = cmd.get_matches();\n```\nwith\n```rust\nlet cmd = clap::Command::new(\"cmd\")\n    .arg(clap::arg!(--flag));\nlet m = match cmd.try_get_matches() {\n    Ok(m) => m,\n    Err(err) => {\n        if err.use_stderr() {\n            let _ = err.print();\n\n            eprintln!(\"\\nPress [ENTER] / [RETURN] to continue...\");\n            use std::io::BufRead;\n            let mut s = String::new();\n            let i = std::io::stdin();\n            i.lock().read_line(&mut s).unwrap();\n\n            std::process::exit(2);\n        } else {\n            let _ = err.print();\n            std::process::exit(0);\n        }\n    }\n};\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"0:3389:1676":{"id":"0:3389:1676","crate_id":0,"name":"AppSettings","span":{"filename":"src/builder/app_settings.rs","begin":[34,0],"end":[967,1]},"visibility":"public","docs":"Application level settings, which affect how [`Command`] operates\n\n**NOTE:** When these settings are used, they apply only to current command, and are *not*\npropagated down or up through child or parent subcommands\n\n[`Command`]: crate::Command","links":{"crate::Command":"0:755:1660"},"attrs":["#[non_exhaustive]"],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":true,"variants":["0:3390:2404","0:3392:2427","0:3394:2433","0:3396:2439","0:3398:2444","0:3400:2450","0:3402:2455","0:3404:2461","0:3406:2466","0:3408:2471","0:3410:2477","0:3412:2483","0:3414:2489","0:3416:2494","0:3418:2499","0:3420:2504","0:3422:2510","0:3424:2516","0:3426:2522","0:3428:2528","0:3430:2539","0:3432:2545","0:3434:2550","0:3436:2556","0:3438:2561","0:3440:2567","0:3442:2573","0:3444:2578","0:3446:2583","0:3448:2589","0:3450:2594","0:3452:2599","0:3454:2604","0:3456:2608"],"impls":["a:2:9533:7458-0:3389:1676","a:2:9532:7459-0:3389:1676","a:2:3382:225-0:3389:1676","a:2:3370:216-0:3389:1676","a:2:3411:6205-0:3389:1676","b:2:4104-0:3389:1676","b:2:2865-0:3389:1676","b:2:3203-0:3389:1676","b:2:3207-0:3389:1676","b:2:3218-0:3389:1676","b:2:2868-0:3389:1676","b:2:3213-0:3389:1676","b:5:848-0:3389:1676","0:3486","0:3488","0:3489","0:3491","0:3492","0:3815"]}},"0:460:4136":{"id":"0:460:4136","crate_id":0,"name":"overrides_with","span":{"filename":"src/builder/arg.rs","begin":[4335,4],"end":[4338,5]},"visibility":"public","docs":"Sets an overridable argument.\n\ni.e. this argument and the following argument\nwill override each other in POSIX style (whichever argument was specified at runtime\n**last** \"wins\")\n\n**NOTE:** When an argument is overridden it is essentially as if it never was used, any\nconflicts, requirements, etc. are evaluated **after** all \"overrides\" have been removed\n\n**NOTE:** Overriding an argument implies they [conflict][Arg::conflicts_with`].\n\n**WARNING:** Positional arguments and options which accept\n[`Arg::multiple_occurrences`] cannot override themselves (or we\nwould never be able to advance to the next positional). If a positional\nargument or option with one of the [`Arg::multiple_occurrences`]\nsettings lists itself as an override, it is simply ignored.\n\n# Examples\n\n```rust\n# use clap::{Command, arg};\nlet m = Command::new(\"prog\")\n    .arg(arg!(-f --flag \"some flag\")\n        .conflicts_with(\"debug\"))\n    .arg(arg!(-d --debug \"other flag\"))\n    .arg(arg!(-c --color \"third flag\")\n        .overrides_with(\"flag\"))\n    .get_matches_from(vec![\n        \"prog\", \"-f\", \"-d\", \"-c\"]);\n            //    ^~~~~~~~~~~~^~~~~ flag is overridden by color\n\nassert!(m.is_present(\"color\"));\nassert!(m.is_present(\"debug\")); // even though flag conflicts with debug, it's as if flag\n                                // was never used because it was overridden with color\nassert!(!m.is_present(\"flag\"));\n```\nCare must be taken when using this setting, and having an arg override with itself. This\nis common practice when supporting things like shell aliases, config files, etc.\nHowever, when combined with multiple values, it can get dicy.\nHere is how clap handles such situations:\n\nWhen a flag overrides itself, it's as if the flag was only ever used once (essentially\npreventing a \"Unexpected multiple usage\" error):\n\n```rust\n# use clap::{Command, arg};\nlet m = Command::new(\"posix\")\n            .arg(arg!(--flag  \"some flag\").overrides_with(\"flag\"))\n            .get_matches_from(vec![\"posix\", \"--flag\", \"--flag\"]);\nassert!(m.is_present(\"flag\"));\n```\n\nMaking an arg [`Arg::multiple_occurrences`] and override itself\nis essentially meaningless. Therefore clap ignores an override of self\nif it's a flag and it already accepts multiple occurrences.\n\n```\n# use clap::{Command, arg};\nlet m = Command::new(\"posix\")\n            .arg(arg!(--flag ...  \"some flag\").overrides_with(\"flag\"))\n            .get_matches_from(vec![\"\", \"--flag\", \"--flag\", \"--flag\", \"--flag\"]);\nassert!(m.is_present(\"flag\"));\n```\n\nNow notice with options (which *do not* set\n[`Arg::multiple_occurrences`]), it's as if only the last\noccurrence happened.\n\n```\n# use clap::{Command, arg};\nlet m = Command::new(\"posix\")\n            .arg(arg!(--opt <val> \"some option\").overrides_with(\"opt\"))\n            .get_matches_from(vec![\"\", \"--opt=some\", \"--opt=other\"]);\nassert!(m.is_present(\"opt\"));\nassert_eq!(m.value_of(\"opt\"), Some(\"other\"));\n```\n\nThis will also work when [`Arg::multiple_values`] is enabled:\n\n```\n# use clap::{Command, Arg};\nlet m = Command::new(\"posix\")\n            .arg(\n                Arg::new(\"opt\")\n                    .long(\"opt\")\n                    .takes_value(true)\n                    .multiple_values(true)\n                    .overrides_with(\"opt\")\n            )\n            .get_matches_from(vec![\"\", \"--opt\", \"1\", \"2\", \"--opt\", \"3\", \"4\", \"5\"]);\nassert!(m.is_present(\"opt\"));\nassert_eq!(m.values_of(\"opt\").unwrap().collect::<Vec<_>>(), &[\"3\", \"4\", \"5\"]);\n```\n\nJust like flags, options with [`Arg::multiple_occurrences`] set\nwill ignore the \"override self\" setting.\n\n```\n# use clap::{Command, arg};\nlet m = Command::new(\"posix\")\n            .arg(arg!(--opt <val> ... \"some option\")\n                .multiple_values(true)\n                .overrides_with(\"opt\"))\n            .get_matches_from(vec![\"\", \"--opt\", \"first\", \"over\", \"--opt\", \"other\", \"val\"]);\nassert!(m.is_present(\"opt\"));\nassert_eq!(m.values_of(\"opt\").unwrap().collect::<Vec<_>>(), &[\"first\", \"over\", \"other\", \"val\"]);\n```","links":{"`Arg::multiple_values`":"0:355:3240","Arg::conflicts_with`":"0:457:4060","`Arg::multiple_occurrences`":"0:342:1954"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["arg_id",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Key","id":"0:3239:2795","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6567:15269":{"id":"1:6567:15269","crate_id":1,"name":"pidfd","span":null,"visibility":"default","docs":"Obtains a reference to the [`PidFd`] created for this [`Child`], if available.\n\nA pidfd will only be available if its creation was requested with\n[`create_pidfd`] when the corresponding [`Command`] was created.\n\nEven if requested, a pidfd may not be available due to an older\nversion of Linux being in use, or if some other error occurred.\n\n[`Command`]: process::Command\n[`create_pidfd`]: CommandExt::create_pidfd\n[`Child`]: process::Child","links":{"process::Command":"1:7477:1660","CommandExt::create_pidfd":"1:6570:14224","`PidFd`":"1:11281:11010","process::Child":"1:7415:8590"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"PidFd","id":"1:11281:11010","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"1:3803:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:4575:221":{"id":"0:4575:221","crate_id":0,"name":"String","span":{"filename":"src/error/context.rs","begin":[50,4],"end":[50,18]},"visibility":"default","docs":"A single value","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":["0:4577:1564"]}},"1:6461:28902":{"id":"1:6461:28902","crate_id":1,"name":"as_raw_stat","span":null,"visibility":"default","docs":"Gain a reference to the underlying `stat` structure which contains\nthe raw information returned by the OS.\n\nThe contents of the returned [`stat`] are **not** consistent across\nUnix platforms. The `os::unix::fs::MetadataExt` trait contains the\ncross-Unix abstractions contained within the raw stat.\n\n[`stat`]: struct@crate::os::linux::raw::stat\n\n# Examples\n\n```no_run\nuse std::fs;\nuse std::io;\nuse std::os::linux::fs::MetadataExt;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    let stat = meta.as_raw_stat();\n    Ok(())\n}\n```","links":{"struct@crate::os::linux::raw::stat":"1:11285:15071"},"attrs":["#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]","#[deprecated(since = \"1.8.0\", note =\n\"other methods of this trait are now preferred\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.8.0","note":"other methods of this trait are now preferred"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"stat","id":"1:11285:15071","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:4470":{"id":"0:4470","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1780,9],"end":[1780,13]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3380:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"NonEmptyStringValueParser","id":"0:4469:2274","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:927:5839":{"id":"0:927:5839","crate_id":0,"name":"get_author","span":{"filename":"src/builder/command.rs","begin":[3340,4],"end":[3342,5]},"visibility":"public","docs":"Get the authors of the cmd.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:9075:8813":{"id":"2:9075:8813","crate_id":2,"name":"min_by","span":null,"visibility":"default","docs":"Returns the element that gives the minimum value with respect to the\nspecified comparison function.\n\nIf several elements are equally minimum, the first element is\nreturned. If the iterator is empty, [`None`] is returned.\n\n# Examples\n\n```\nlet a = [-3_i32, 0, 1, 5, -10];\nassert_eq!(*a.iter().min_by(|x, y| x.cmp(y)).unwrap(), -10);\n```","links":{"`None`":"2:47811:177"},"attrs":["#[stable(feature = \"iter_min_by\", since = \"1.15.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["compare",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3624:132","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"output":{"kind":"resolved_path","inner":{"name":"Ordering","id":"2:37932:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10824:10574":{"id":"2:10824:10574","crate_id":2,"name":"write_isize","span":null,"visibility":"default","docs":"Writes a single `isize` into this hasher.","links":{},"attrs":["#[stable(feature = \"hasher_write\", since = \"1.3.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"primitive","inner":"isize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1771":{"id":"0:1771","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[49,0],"end":[49,48]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"value_parser::NonEmptyStringValueParser","name":"NonEmptyStringValueParser","id":"0:4469:2274","glob":false}},"a:2:9532:7459-0:4427:2261":{"id":"a:2:9532:7459-0:4427:2261","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:9532:7459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:9532:7459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:4427:2261","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:6739:28851":{"id":"1:6739:28851","crate_id":1,"name":"as_fd","span":null,"visibility":"default","docs":"Borrows the file descriptor.\n\n# Example\n\n```rust,no_run\nuse std::fs::File;\n# use std::io;\n# #[cfg(target_os = \"wasi\")]\n# use std::os::wasi::io::{AsFd, BorrowedFd};\n# #[cfg(unix)]\n# use std::os::unix::io::{AsFd, BorrowedFd};\n\nlet mut f = File::open(\"foo.txt\")?;\n# #[cfg(any(unix, target_os = \"wasi\"))]\nlet borrowed_fd: BorrowedFd<'_> = f.as_fd();\n# Ok::<(), io::Error>(())\n```","links":{},"attrs":["#[stable(feature = \"io_safety\", since = \"1.63.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"BorrowedFd","id":"1:11307:11000","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:23061:21802":{"id":"2:23061:21802","crate_id":2,"name":"to_degrees","span":null,"visibility":"default","docs":"Converts each lane from radians to degrees.","links":{},"attrs":["#[must_use =\n\"method returns a new vector and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:2076":{"id":"0:2076","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/any_value.rs","begin":[58,0],"end":[62,1]},"visibility":{"restricted":{"parent":"0:2060:7460","path":"::parser::matches::any_value"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2920:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"AnyValueId","id":"0:4707:2393","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AnyValueId","id":"0:4707:2393","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2077:611"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:408:2818":{"id":"0:408:2818","crate_id":0,"name":"long_help","span":{"filename":"src/builder/arg.rs","begin":[2729,4],"end":[2732,5]},"visibility":"public","docs":"Sets the description of the argument for long help (`--help`).\n\nTypically this a more detailed (multi-line) message\nthat describes the arg.\n\nIf [`Arg::help`] is not specified, this message will be displayed for `-h`.\n\n**NOTE:** Only [`Arg::help`] is used in completion script generation in order to be concise\n\n# Examples\n\nAny valid UTF-8 is allowed in the help text. The one exception is when one wishes to\ninclude a newline in the help text and have the following text be properly aligned with all\nthe other help text.\n\nSetting `help` displays a short message to the side of the argument when the user passes\n`-h` or `--help` (by default).\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .long(\"config\")\n        .long_help(\n\"The config file used by the myprog must be in JSON format\nwith only valid keys and may not contain other nonsense\nthat cannot be read by this program. Obviously I'm going on\nand on, so I'll stop now.\"))\n    .get_matches_from(vec![\n        \"prog\", \"--help\"\n    ]);\n```\n\nThe above example displays\n\n```text\nprog\n\nUSAGE:\n    prog [OPTIONS]\n\nOPTIONS:\n        --config\n            The config file used by the myprog must be in JSON format\n            with only valid keys and may not contain other nonsense\n            that cannot be read by this program. Obviously I'm going on\n            and on, so I'll stop now.\n\n    -h, --help\n            Print help information\n\n    -V, --version\n            Print version information\n```\n[`Arg::help`]: Arg::help()","links":{"Arg::help()":"0:406:1955"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["h",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl Into<Option<&'help str>>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:4104-0:4463:2271":{"id":"b:2:4104-0:4463:2271","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:4102:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BoolishValueParser","id":"0:4463:2271","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:4106:1449"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:3411:6205-0:4463:2271":{"id":"a:2:3411:6205-0:4463:2271","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:3411:6205","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BoolishValueParser","id":"0:4463:2271","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:23:25-0:3818:1661":{"id":"b:23:25-0:3818:1661","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.1/src/equivalent.rs","begin":[18,0],"end":[18,46]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2925:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Equivalent","id":"23:22:9122","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3818:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":["23:28:9116"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"Q"}}},"a:2:3411:6205-0:4828:1684":{"id":"a:2:3411:6205-0:4828:1684","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:3411:6205","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4828:1684","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4393":{"id":"0:4393","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[718,9],"end":[718,13]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3380:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StringValueParser","id":"0:4392:2263","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:2457":{"id":"0:2457","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/mod.rs","begin":[10,0],"end":[10,34]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"value_source::ValueSource","name":"ValueSource","id":"0:4828:1684","glob":false}},"2:24076:11337":{"id":"2:24076:11337","crate_id":2,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:24077:11341"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:24072:10989","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Copy","id":"2:3380:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:9116:9979":{"id":"2:9116:9979","crate_id":2,"name":"eq_by","span":null,"visibility":"default","docs":"Determines if the elements of this [`Iterator`] are equal to those of\nanother with respect to the specified equality function.\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(iter_order_by)]\n\nlet xs = [1, 2, 3, 4];\nlet ys = [1, 4, 9, 16];\n\nassert!(xs.iter().eq_by(&ys, |&x, &y| x * x == y));\n```","links":{"`Iterator`":"2:8873:159"},"attrs":["#[unstable(feature = \"iter_order_by\", issue = \"64295\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"I"}],["eq",{"kind":"generic","inner":"F"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3624:132","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"IntoIterator","id":"2:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4786":{"id":"0:4786","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1654,16],"end":[1654,21]},"visibility":{"restricted":{"parent":"0:2092:7461","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:4778:1685","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:4788:667"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:4104-0:4404:2276":{"id":"b:2:4104-0:4404:2276","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:4102:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PathBufValueParser","id":"0:4404:2276","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:4106:1449"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:3382:225-0:4463:2271":{"id":"a:2:3382:225-0:4463:2271","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BoolishValueParser","id":"0:4463:2271","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4603:6497":{"id":"0:4603:6497","crate_id":0,"name":"EmptyValue","span":{"filename":"src/error/kind.rs","begin":[102,4],"end":[102,14]},"visibility":"default","docs":"Occurs when the user provides an empty value for an option that does not allow empty\nvalues.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"color\")\n         .takes_value(true)\n         .forbid_empty_values(true)\n         .long(\"color\"))\n    .try_get_matches_from(vec![\"prog\", \"--color=\"]);\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind(), ErrorKind::EmptyValue);\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"0:1396:59":{"id":"0:1396:59","crate_id":0,"name":"default","span":{"filename":"src/builder/value_parser.rs","begin":[800,4],"end":[802,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4697:7110":{"id":"0:4697:7110","crate_id":0,"name":"UnknownArgument","span":{"filename":"src/parser/error.rs","begin":[18,4],"end":[20,5]},"visibility":"default","docs":"Argument not defined in [`Command`][crate::Command]","links":{"crate::Command":"0:755:1660"},"attrs":["#[non_exhaustive]"],"deprecation":null,"kind":"variant","inner":{"variant_kind":"struct","variant_inner":{"fields":[],"fields_stripped":false}}},"0:4459":{"id":"0:4459","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1594,15],"end":[1594,20]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FalseyValueParser","id":"0:4457:2273","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4460:415"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:329:2940":{"id":"0:329:2940","crate_id":0,"name":"visible_alias","span":{"filename":"src/builder/arg.rs","begin":[362,4],"end":[365,5]},"visibility":"public","docs":"Add an alias, which functions as a visible long flag.\n\nLike [`Arg::alias`], except that they are visible inside the help message.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n            .arg(Arg::new(\"test\")\n                .visible_alias(\"something-awesome\")\n                .long(\"test\")\n                .takes_value(true))\n       .get_matches_from(vec![\n            \"prog\", \"--something-awesome\", \"coffee\"\n        ]);\nassert!(m.contains_id(\"test\"));\nassert_eq!(m.value_of(\"test\"), Some(\"coffee\"));\n```\n[`Command::alias`]: Arg::alias()","links":{"`Arg::alias`":"0:323:278"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["name",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13276:127":{"id":"2:13276:127","crate_id":2,"name":"Err","span":null,"visibility":"default","docs":"The associated error which can be returned from parsing.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"2:3463:1114":{"id":"2:3463:1114","crate_id":2,"name":"rem","span":null,"visibility":"default","docs":"Performs the `%` operation.\n\n# Example\n\n```\nassert_eq!(12 % 10, 2);\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"generic","inner":"Rhs"}]],"output":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Rem","id":"2:3460:8779","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:501:4229":{"id":"0:501:4229","crate_id":0,"name":"is_allow_invalid_utf8_set","span":{"filename":"src/builder/arg.rs","begin":[4683,4],"end":[4685,5]},"visibility":"public","docs":"Deprecated, replaced with [`Arg::get_value_parser()`","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:9153:8903":{"id":"2:9153:8903","crate_id":2,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:4542:7094":{"id":"0:4542:7094","crate_id":0,"name":"MaxOccurrences","span":{"filename":"src/error/context.rs","begin":[24,4],"end":[24,18]},"visibility":"default","docs":"Maximum number of allowed occurrences","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"0:3969:3050":{"id":"0:3969:3050","crate_id":0,"name":"Required","span":{"filename":"src/builder/arg_settings.rs","begin":[52,4],"end":[52,12]},"visibility":"default","docs":"Deprecated, replaced with [`Arg::required`] and [`Arg::is_required_set`]\n\nDerive: replace `#[clap(setting = Required)]` with `#[clap(required = true)]`\n\nBuilder: replace `arg.setting(Required)` with `arg.required(true)`","links":{"`Arg::required`":"0:337:1948","`Arg::is_required_set`":"0:495:4217"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"0:4778:1685":{"id":"0:4778:1685","crate_id":0,"name":"Values","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1655,0],"end":[1659,1]},"visibility":"public","docs":"Deprecated, replaced with [`ArgMatches::get_many()`]","links":{"`ArgMatches::get_many()`":"0:2165:7548"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:2:9533:7458-0:4778:1685","a:2:9532:7459-0:4778:1685","a:2:3382:225-0:4778:1685","a:2:3370:216-0:4778:1685","a:2:3411:6205-0:4778:1685","b:2:8676-0:4778:1685","b:2:4104-0:4778:1685","b:2:2865-0:4778:1685","b:2:3203-0:4778:1685","b:2:3207-0:4778:1685","b:2:3218-0:4778:1685","b:2:2868-0:4778:1685","b:2:3213-0:4778:1685","b:5:848-0:4778:1685","0:4783","0:4786","0:2302","0:2307","0:2310","0:2312"]}},"a:2:9533:7458-0:4398:2275":{"id":"a:2:9533:7458-0:4398:2275","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:9533:7458","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsStringValueParser","id":"0:4398:2275","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4577:1564":{"id":"0:4577:1564","crate_id":0,"name":"0","span":{"filename":"src/error/context.rs","begin":[50,11],"end":[50,17]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"String","id":"5:8479:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"0:1586:1671":{"id":"0:1586:1671","crate_id":0,"name":"Parser","span":{"filename":"src/builder/value_parser.rs","begin":[1978,4],"end":[1978,44]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:4427:2261","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u32"}}],"bindings":[]}}}}}},"0:4392:2263":{"id":"0:4392:2263","crate_id":0,"name":"StringValueParser","span":{"filename":"src/builder/value_parser.rs","begin":[720,0],"end":[720,31]},"visibility":"public","docs":"Implementation for [`ValueParser::string`]\n\nUseful for composing new [`TypedValueParser`]s","links":{"`ValueParser::string`":"0:1313:1925","`TypedValueParser`":"0:1362:2264"},"attrs":["#[non_exhaustive]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":false}},"generics":{"params":[],"where_predicates":[]},"impls":["0:1380","a:2:9533:7458-0:4392:2263","a:2:9532:7459-0:4392:2263","a:2:3382:225-0:4392:2263","a:2:3370:216-0:4392:2263","a:2:3411:6205-0:4392:2263","b:2:4104-0:4392:2263","b:2:2865-0:4392:2263","b:2:3203-0:4392:2263","b:2:3207-0:4392:2263","b:2:3218-0:4392:2263","b:2:2868-0:4392:2263","b:2:3213-0:4392:2263","b:5:848-0:4392:2263","0:4393","0:4394","0:4396","0:1382","0:1387"]}},"2:2861:2792":{"id":"2:2861:2792","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":"Immutably borrows from an owned value.\n\n# Examples\n\n```\nuse std::borrow::Borrow;\n\nfn check<T: Borrow<str>>(s: T) {\n    assert_eq!(\"Hello\", s.borrow());\n}\n\nlet s = \"Hello\".to_string();\n\ncheck(s);\n\nlet s = \"Hello\";\n\ncheck(s);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Borrowed"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:32222:69479":{"id":"2:32222:69479","crate_id":2,"name":"rem_euclid","span":null,"visibility":"public","docs":"Calculates the least remainder of `self (mod rhs)`.\n\nSince, for the positive integers, all common\ndefinitions of division are equal, this\nis exactly equal to `self % rhs`.\n\n# Panics\n\nThis function will panic if `rhs` is 0.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(7u64.rem_euclid(4), 3); // or any other integer type\n```","links":{},"attrs":["#[stable(feature = \"euclidean_division\", since = \"1.38.0\")]","#[rustc_const_stable(feature = \"const_euclidean_int_methods\", since =\n\"1.52.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4494:10373":{"id":"1:4494:10373","crate_id":1,"name":"consume","span":null,"visibility":"default","docs":"Tells this buffer that `amt` bytes have been consumed from the buffer,\nso they should no longer be returned in calls to `read`.\n\nThis function is a lower-level call. It needs to be paired with the\n[`fill_buf`] method to function properly. This function does\nnot perform any I/O, it simply informs this object that some amount of\nits buffer, returned from [`fill_buf`], has been consumed and should\nno longer be returned. As such, this function may do odd things if\n[`fill_buf`] isn't called before calling it.\n\nThe `amt` must be `<=` the number of bytes in the buffer returned by\n[`fill_buf`].\n\n# Examples\n\nSince `consume()` is meant to be used with [`fill_buf`],\nthat method's example includes an example of `consume()`.\n\n[`fill_buf`]: BufRead::fill_buf","links":{"BufRead::fill_buf":"1:4493:10372"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["amt",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:4395:415":{"id":"0:4395:415","crate_id":0,"name":"clone","span":{"filename":"src/builder/value_parser.rs","begin":[718,15],"end":[718,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"StringValueParser","id":"0:4392:2263","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4401:415":{"id":"0:4401:415","crate_id":0,"name":"clone","span":{"filename":"src/builder/value_parser.rs","begin":[766,15],"end":[766,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"OsStringValueParser","id":"0:4398:2275","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8967:9968":{"id":"2:8967:9968","crate_id":2,"name":"try_fold","span":null,"visibility":"default","docs":"An iterator method that applies a function as long as it returns\nsuccessfully, producing a single, final value.\n\n`try_fold()` takes two arguments: an initial value, and a closure with\ntwo arguments: an 'accumulator', and an element. The closure either\nreturns successfully, with the value that the accumulator should have\nfor the next iteration, or it returns failure, with an error value that\nis propagated back to the caller immediately (short-circuiting).\n\nThe initial value is the value the accumulator will have on the first\ncall. If applying the closure succeeded against every element of the\niterator, `try_fold()` returns the final accumulator as success.\n\nFolding is useful whenever you have a collection of something, and want\nto produce a single value from it.\n\n# Note to Implementors\n\nSeveral of the other (forward) methods have default implementations in\nterms of this one, so try to implement this explicitly if it can\ndo something better than the default `for` loop implementation.\n\nIn particular, try to have this call `try_fold()` on the internal parts\nfrom which this iterator is composed. If multiple calls are needed,\nthe `?` operator may be convenient for chaining the accumulator value\nalong, but beware any invariants that need to be upheld before those\nearly returns. This is a `&mut self` method, so iteration needs to be\nresumable after hitting an error here.\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\n\n// the checked sum of all of the elements of the array\nlet sum = a.iter().try_fold(0i8, |acc, &x| acc.checked_add(x));\n\nassert_eq!(sum, Some(6));\n```\n\nShort-circuiting:\n\n```\nlet a = [10, 20, 30, 100, 40, 50];\nlet mut it = a.iter();\n\n// This sum overflows when adding the 100 element\nlet sum = it.try_fold(0i8, |acc, &x| acc.checked_add(x));\nassert_eq!(sum, None);\n\n// Because it short-circuited, the remaining elements are still\n// available through the iterator.\nassert_eq!(it.len(), 2);\nassert_eq!(it.next(), Some(&40));\n```\n\nWhile you cannot `break` from a closure, the [`ControlFlow`] type allows\na similar idea:\n\n```\nuse std::ops::ControlFlow;\n\nlet triangular = (1..30).try_fold(0_i8, |prev, x| {\n    if let Some(next) = prev.checked_add(x) {\n        ControlFlow::Continue(next)\n    } else {\n        ControlFlow::Break(prev)\n    }\n});\nassert_eq!(triangular, ControlFlow::Break(120));\n\nlet triangular = (1..30).try_fold(0_u64, |prev, x| {\n    if let Some(next) = prev.checked_add(x) {\n        ControlFlow::Continue(next)\n    } else {\n        ControlFlow::Break(prev)\n    }\n});\nassert_eq!(triangular, ControlFlow::Continue(435));\n```","links":{"`ControlFlow`":"2:46098:8807"},"attrs":["#[stable(feature = \"iterator_try_fold\", since = \"1.27.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["init",{"kind":"generic","inner":"B"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"generic","inner":"R"},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3624:132","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"B"},{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"output":{"kind":"generic","inner":"R"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Try","id":"2:3831:230","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"B"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3860":{"id":"0:3860","crate_id":0,"name":null,"span":{"filename":"src/builder/arg.rs","begin":[60,18],"end":[60,23]},"visibility":{"restricted":{"parent":"0:242:1932","path":"::builder::arg"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(missing_debug_implementations)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3818:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":["0:3862:415"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1588":{"id":"0:1588","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1985,0],"end":[1992,1]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ValueParserFactory","id":"0:1558:2266","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"i32"},"items":["0:1589:1671","0:1590:2257"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1347:415":{"id":"0:1347:415","crate_id":0,"name":"clone","span":{"filename":"src/builder/value_parser.rs","begin":[527,4],"end":[535,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:1033:11658":{"id":"1:1033:11658","crate_id":1,"name":"is_ascii","span":null,"visibility":"default","docs":"Checks if the value is within the ASCII range.\n\n# Note\n\nThis method is deprecated in favor of the identically-named\ninherent methods on `u8`, `char`, `[u8]` and `str`.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":{"since":"1.26.0","note":"use inherent methods instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:2:3207-0:4457:2273":{"id":"b:2:3207-0:4457:2273","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FalseyValueParser","id":"0:4457:2273","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3209:688"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"26:29:8559":{"id":"26:29:8559","crate_id":26,"name":"WriteColor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["26:30:10549","26:31:7052","26:32:8571","26:33:10550"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Write","id":"1:4467:2035","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"a:2:9533:7458-0:4457:2273":{"id":"a:2:9533:7458-0:4457:2273","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:9533:7458","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FalseyValueParser","id":"0:4457:2273","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1394:2102":{"id":"0:1394:2102","crate_id":0,"name":"parse","span":{"filename":"src/builder/value_parser.rs","begin":[789,4],"end":[796,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["_cmd",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Command","id":"0:755:1660","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["_arg",{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Arg","id":"0:3818:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}],"bindings":[]}}}}],["value",{"kind":"resolved_path","inner":{"name":"std::ffi::OsString","id":"1:2651:183","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Value","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:1362:2264","args":null}}}},{"type":{"kind":"resolved_path","inner":{"name":"crate::Error","id":"0:4647:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3218-0:4451:2270":{"id":"b:2:3218-0:4451:2270","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BoolValueParser","id":"0:4451:2270","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3221:128","2:3222:1435"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1001:5937":{"id":"0:1001:5937","crate_id":0,"name":"is_disable_colored_help_set","span":{"filename":"src/builder/command.rs","begin":[3706,4],"end":[3708,5]},"visibility":"public","docs":"Report whether [`Command::disable_colored_help`] is set","links":{"`Command::disable_colored_help`":"0:828:5127"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:888:278":{"id":"0:888:278","crate_id":0,"name":"alias","span":{"filename":"src/builder/command.rs","begin":[2387,4],"end":[2390,5]},"visibility":"public","docs":"Sets a hidden alias to this subcommand.\n\nThis allows the subcommand to be accessed via *either* the original name, or this given\nalias. This is more efficient and easier than creating multiple hidden subcommands as one\nonly needs to check for the existence of this command, and not all aliased variants.\n\n**NOTE:** Aliases defined with this method are *hidden* from the help\nmessage. If you're looking for aliases that will be displayed in the help\nmessage, see [`Command::visible_alias`].\n\n**NOTE:** When using aliases and checking for the existence of a\nparticular subcommand within an [`ArgMatches`] struct, one only needs to\nsearch for the original name and not all aliases.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, };\nlet m = Command::new(\"myprog\")\n    .subcommand(Command::new(\"test\")\n        .alias(\"do-stuff\"))\n    .get_matches_from(vec![\"myprog\", \"do-stuff\"]);\nassert_eq!(m.subcommand_name(), Some(\"test\"));\n```\n[`App::visible_alias`]: Command::visible_alias()","links":{"`ArgMatches`":"0:4713:1665","`Command::visible_alias`":"0:896:2940"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["name",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"23:46:2795":{"id":"23:46:2795","crate_id":23,"name":"Key","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.1/src/mutable_keys.rs","begin":[20,4],"end":[20,12]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"1:6566:11011":{"id":"1:6566:11011","crate_id":1,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6567:15269","1:6568:28909"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10409:10989","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:4652:667":{"id":"0:4652:667","crate_id":0,"name":"fmt","span":{"filename":"src/error/mod.rs","begin":[39,9],"end":[39,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10511:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:14061:139":{"id":"2:14061:139","crate_id":2,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:14062:184","2:14063:1024"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3218-0:4594:1681":{"id":"b:2:3218-0:4594:1681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4594:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3221:128","2:3222:1435"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4523:6999":{"id":"0:4523:6999","crate_id":0,"name":"ContextKind","span":{"filename":"src/error/context.rs","begin":[4,0],"end":[39,1]},"visibility":"public","docs":"Semantics for a piece of error information","links":{},"attrs":["#[non_exhaustive]"],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:4524:7081","0:4526:7069","0:4528:7070","0:4530:7072","0:4532:7077","0:4534:7096","0:4536:7106","0:4538:7102","0:4540:7150","0:4542:7094","0:4544:7083","0:4546:7082","0:4548:7111","0:4550:7078","0:4552:7113","0:4554:4751","0:4556:7214"],"impls":["a:2:9533:7458-0:4523:6999","a:2:9532:7459-0:4523:6999","a:2:3382:225-0:4523:6999","a:2:3370:216-0:4523:6999","a:2:3411:6205-0:4523:6999","b:2:4104-0:4523:6999","b:2:2865-0:4523:6999","b:2:3203-0:4523:6999","b:2:3207-0:4523:6999","b:2:3218-0:4523:6999","b:2:2868-0:4523:6999","b:2:3213-0:4523:6999","b:5:848-0:4523:6999","b:23:25-0:4523:6999","0:4558","0:4559","0:4561","0:4563","0:4564","0:4566","0:4567"]}},"0:6":{"id":"0:6","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[99,0],"end":[99,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::builder::Command","name":"Command","id":"0:755:1660","glob":false}},"1:9142:21761":{"id":"1:9142:21761","crate_id":1,"name":"trunc","span":null,"visibility":"default","docs":"Returns the floating point's integer value, with its fractional part removed.","links":{},"attrs":["#[must_use =\n\"method returns a new vector and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1449:6651":{"id":"0:1449:6651","crate_id":0,"name":"range","span":{"filename":"src/builder/value_parser.rs","begin":[1147,4],"end":[1195,5]},"visibility":"public","docs":"Narrow the supported range","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["range",{"kind":"generic","inner":"B"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"2:3750:6566","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:905:3786":{"id":"0:905:3786","crate_id":0,"name":"hide","span":{"filename":"src/builder/command.rs","begin":[2760,4],"end":[2766,5]},"visibility":"public","docs":"Specifies that this [`subcommand`] should be hidden from help messages\n\n# Examples\n\n```rust\n# use clap::{Command, Arg};\nCommand::new(\"myprog\")\n    .subcommand(\n        Command::new(\"test\").hide(true)\n    )\n# ;\n```\n\n[`subcommand`]: crate::Command::subcommand()","links":{"crate::Command::subcommand()":"0:782:2012"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8686:9950":{"id":"2:8686:9950","crate_id":2,"name":"extend_reserve","span":null,"visibility":"default","docs":"Reserves capacity in a collection for the given number of additional elements.\n\nThe default implementation does nothing.","links":{},"attrs":["#[unstable(feature = \"extend_one\", issue = \"72631\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["additional",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3203-0:4398:2275":{"id":"b:2:3203-0:4398:2275","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsStringValueParser","id":"0:4398:2275","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3206:2391"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:32207:69465":{"id":"2:32207:69465","crate_id":2,"name":"overflowing_add_signed","span":null,"visibility":"public","docs":"Calculates `self` + `rhs` with a signed `rhs`\n\nReturns a tuple of the addition along with a boolean indicating\nwhether an arithmetic overflow would occur. If an overflow would\nhave occurred then the wrapped value is returned.\n\n# Examples\n\nBasic usage:\n\n```\n# #![feature(mixed_integer_ops)]\nassert_eq!(1u64.overflowing_add_signed(2), (3, false));\nassert_eq!(1u64.overflowing_add_signed(-2), (u64::MAX, true));\nassert_eq!((u64::MAX - 2).overflowing_add_signed(4), (1, true));\n```","links":{},"attrs":["#[unstable(feature = \"mixed_integer_ops\", issue = \"87840\")]","#[rustc_const_unstable(feature = \"mixed_integer_ops\", issue = \"87840\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"i64"}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"u64"},{"kind":"primitive","inner":"bool"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3207-0:4693:7387":{"id":"b:2:3207-0:4693:7387","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4693:7387","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3209:688"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:8875:932":{"id":"2:8875:932","crate_id":2,"name":"next","span":null,"visibility":"default","docs":"Advances the iterator and returns the next value.\n\nReturns [`None`] when iteration is finished. Individual iterator\nimplementations may choose to resume iteration, and so calling `next()`\nagain may or may not eventually start returning [`Some(Item)`] again at some\npoint.\n\n[`Some(Item)`]: Some\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\n\nlet mut iter = a.iter();\n\n// A call to next() returns the next value...\nassert_eq!(Some(&1), iter.next());\nassert_eq!(Some(&2), iter.next());\nassert_eq!(Some(&3), iter.next());\n\n// ... and then None once it's over.\nassert_eq!(None, iter.next());\n\n// More calls may or may not return `None`. Here, they always will.\nassert_eq!(None, iter.next());\nassert_eq!(None, iter.next());\n```","links":{"`None`":"2:47811:177","Some":"2:47813:220"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:23058:9346":{"id":"2:23058:9346","crate_id":2,"name":"from_bits","span":null,"visibility":"default","docs":"Raw transmutation from an unsigned integer vector type with the\nsame size and number of lanes.","links":{},"attrs":["#[must_use =\n\"method returns a new vector and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["bits",{"kind":"qualified_path","inner":{"name":"Bits","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdFloat","id":"2:23053:11401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:468:4155":{"id":"0:468:4155","crate_id":0,"name":"get_help","span":{"filename":"src/builder/arg.rs","begin":[4396,4],"end":[4398,5]},"visibility":"public","docs":"Get the help specified for this argument, if any","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3394:2433":{"id":"0:3394:2433","crate_id":0,"name":"AllowHyphenValues","span":{"filename":"src/builder/app_settings.rs","begin":[112,4],"end":[112,21]},"visibility":"default","docs":"Deprecated, replaced with [`Command::allow_hyphen_values`] and\n[`Arg::is_allow_hyphen_values_set`]\n\nDerive: replace `#[clap(setting = AllowHyphenValues)]` with `#[clap(allow_hyphen_values = true)]`\n\nBuilder: replace `cmd.setting(AllowHyphenValues)` with `cmd.allow_hyphen_values(true)`","links":{"`Command::allow_hyphen_values`":"0:879:3410","`Arg::is_allow_hyphen_values_set`":"0:499:4224"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"0:4699:415":{"id":"0:4699:415","crate_id":0,"name":"clone","span":{"filename":"src/parser/error.rs","begin":[4,9],"end":[4,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4693:7387","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9533:7458-0:4523:6999":{"id":"a:2:9533:7458-0:4523:6999","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:9533:7458","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:4523:6999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4308:415":{"id":"0:4308:415","crate_id":0,"name":"clone","span":{"filename":"src/builder/possible_value.rs","begin":[29,25],"end":[29,30]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:4294:1679","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1218:3786":{"id":"0:1218:3786","crate_id":0,"name":"hide","span":{"filename":"src/builder/possible_value.rs","begin":[98,4],"end":[101,5]},"visibility":"public","docs":"Hides this value from help and shell completions.\n\nThis is an alternative to hiding through [`Arg::hide_possible_values(true)`], if you only\nwant to hide some values.\n\n# Examples\n\n```rust\n# use clap::PossibleValue;\nPossibleValue::new(\"secret\")\n    .hide(true)\n# ;\n```\n[`Arg::hide_possible_values(true)`]: crate::Arg::hide_possible_values()","links":{"crate::Arg::hide_possible_values()":"0:415:3796"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:14551:9962":{"id":"2:14551:9962","crate_id":2,"name":"by_ref","span":null,"visibility":"default","docs":"Creates a \"by reference\" adapter for this instance of `Allocator`.\n\nThe returned adapter also implements `Allocator` and will simply borrow this.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1427:59":{"id":"0:1427:59","crate_id":0,"name":"default","span":{"filename":"src/builder/value_parser.rs","begin":[985,4],"end":[987,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:51":{"id":"0:51","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[113,35],"end":[113,46]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::builder::AppSettings","name":"AppSettings","id":"0:3389:1676","glob":false}},"0:2079":{"id":"0:2079","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/any_value.rs","begin":[66,0],"end":[70,1]},"visibility":{"restricted":{"parent":"0:2060:7460","path":"::parser::matches::any_value"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["gt","ge","lt","le"],"trait":{"name":"PartialOrd","id":"2:2969:187","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"AnyValueId","id":"0:4707:2393","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AnyValueId","id":"0:4707:2393","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2080:1008"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:16":{"id":"0:16","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[101,0],"end":[101,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::error::Error","name":"Error","id":"0:4647:128","glob":false}},"0:1575:2257":{"id":"0:1575:2257","crate_id":0,"name":"value_parser","span":{"filename":"src/builder/value_parser.rs","begin":[1947,4],"end":[1951,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"qualified_path","inner":{"name":"Parser","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:1558:2266","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:32151:69424":{"id":"2:32151:69424","crate_id":2,"name":"count_zeros","span":null,"visibility":"public","docs":"Returns the number of zeros in the binary representation of `self`.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(u64::MAX.count_zeros(), 0);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12777:2117":{"id":"2:12777:2117","crate_id":2,"name":"Item","span":null,"visibility":"default","docs":"The element type of the slice being matched on.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"2:32181:69448":{"id":"2:32181:69448","crate_id":2,"name":"checked_neg","span":null,"visibility":"public","docs":"Checked negation. Computes `-self`, returning `None` unless `self ==\n0`.\n\nNote that negating any positive integer will overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(0u64.checked_neg(), Some(0));\nassert_eq!(1u64.checked_neg(), None);\n```","links":{},"attrs":["#[stable(feature = \"wrapping\", since = \"1.7.0\")]","#[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.47.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3511:363":{"id":"2:3511:363","crate_id":2,"name":"bitxor","span":null,"visibility":"default","docs":"Performs the `^` operation.\n\n# Examples\n\n```\nassert_eq!(true ^ false, true);\nassert_eq!(true ^ true, false);\nassert_eq!(5u8 ^ 1u8, 4);\nassert_eq!(5u8 ^ 2u8, 7);\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"generic","inner":"Rhs"}]],"output":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"BitXor","id":"2:3508:8787","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:4313:611":{"id":"0:4313:611","crate_id":0,"name":"eq","span":{"filename":"src/builder/possible_value.rs","begin":[29,32],"end":[29,41]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:4294:1679","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2816":{"id":"0:2816","crate_id":0,"name":null,"span":{"filename":"src/parser/mod.rs","begin":[21,0],"end":[21,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::matches::RawValues","name":"RawValues","id":"0:4768:7385","glob":false}},"0:1621:2257":{"id":"0:1621:2257","crate_id":0,"name":"value_parser","span":{"filename":"src/builder/value_parser.rs","begin":[2140,0],"end":[2146,1]},"visibility":"public","docs":"Select a [`ValueParser`] implementation from the intended type\n\nTo register a custom type with this macro, implement [`ValueParserFactory`].\n\n# Example\n\nUsage:\n```rust\n# use std::path::PathBuf;\n# use std::path::Path;\nlet mut cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"output\")\n            .value_parser(clap::value_parser!(PathBuf))\n            .required(true)\n    );\n\nlet m = cmd.try_get_matches_from_mut([\"cmd\", \"file.txt\"]).unwrap();\nlet port: &PathBuf = m.get_one(\"output\")\n    .expect(\"required\");\nassert_eq!(port, Path::new(\"file.txt\"));\n```\n\nSupported types:\n```rust\n// Built-in types\nlet parser = clap::value_parser!(String);\nassert_eq!(format!(\"{:?}\", parser), \"ValueParser::string\");\nlet parser = clap::value_parser!(std::ffi::OsString);\nassert_eq!(format!(\"{:?}\", parser), \"ValueParser::os_string\");\nlet parser = clap::value_parser!(std::path::PathBuf);\nassert_eq!(format!(\"{:?}\", parser), \"ValueParser::path_buf\");\nlet parser = clap::value_parser!(u16).range(3000..);\nassert_eq!(format!(\"{:?}\", parser), \"RangedI64ValueParser { bounds: (Included(3000), Included(65535)), target: PhantomData }\");\nlet parser = clap::value_parser!(u64).range(3000..);\nassert_eq!(format!(\"{:?}\", parser), \"RangedU64ValueParser { bounds: (Included(3000), Unbounded), target: PhantomData }\");\n\n// FromStr types\nlet parser = clap::value_parser!(usize);\nassert_eq!(format!(\"{:?}\", parser), \"_AnonymousValueParser(ValueParser::other(usize))\");\n\n// ValueEnum types\n#[derive(Copy, Clone, Debug, PartialEq, Eq)]\nenum ColorChoice {\n    Always,\n    Auto,\n    Never,\n}\nimpl clap::ValueEnum for ColorChoice {\n    // ...\n#     fn value_variants<'a>() -> &'a [Self] {\n#         &[Self::Always, Self::Auto, Self::Never]\n#     }\n#     fn to_possible_value<'a>(&self) -> Option<clap::PossibleValue<'a>> {\n#         match self {\n#             Self::Always => Some(clap::PossibleValue::new(\"always\")),\n#             Self::Auto => Some(clap::PossibleValue::new(\"auto\")),\n#             Self::Never => Some(clap::PossibleValue::new(\"never\")),\n#         }\n#     }\n}\nlet parser = clap::value_parser!(ColorChoice);\nassert_eq!(format!(\"{:?}\", parser), \"EnumValueParser(PhantomData)\");\n```","links":{"`ValueParserFactory`":"0:1558:2266","`ValueParser`":"0:1294:2265"},"attrs":["#[macro_export]"],"deprecation":null,"kind":"macro","inner":"macro_rules! value_parser {\n    ($name:ty) => { ... };\n}"},"b:5:6507-0:4594:1681":{"id":"b:5:6507-0:4594:1681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10569:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:6505:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4594:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:6509:1415"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:9137:21756":{"id":"1:9137:21756","crate_id":1,"name":"mul_add","span":null,"visibility":"default","docs":"Fused multiply-add.  Computes `(self * a) + b` with only one rounding error,\nyielding a more accurate result than an unfused multiply-add.\n\nUsing `mul_add` *may* be more performant than an unfused multiply-add if the target\narchitecture has a dedicated `fma` CPU instruction.  However, this is not always\ntrue, and will be heavily dependent on designing algorithms with specific target\nhardware in mind.","links":{},"attrs":["#[must_use =\n\"method returns a new vector and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["a",{"kind":"generic","inner":"Self"}],["b",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6221:28878":{"id":"1:6221:28878","crate_id":1,"name":"arg0","span":null,"visibility":"default","docs":"Set executable argument\n\nSet the first process argument, `argv[0]`, to something other than the\ndefault executable path.","links":{},"attrs":["#[stable(feature = \"process_set_argv0\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["arg",{"kind":"generic","inner":"S"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Command","id":"1:7477:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3171:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"1:2654:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:6465:15074":{"id":"1:6465:15074","crate_id":1,"name":"st_nlink","span":null,"visibility":"default","docs":"Returns the number of hard links to file.\n\n# Examples\n\n```no_run\nuse std::fs;\nuse std::io;\nuse std::os::linux::fs::MetadataExt;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    println!(\"{}\", meta.st_nlink());\n    Ok(())\n}\n```","links":{},"attrs":["#[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:2341:7848":{"id":"0:2341:7848","crate_id":0,"name":"next_back","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1760,4],"end":[1762,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"1:2654:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8914:6299":{"id":"2:8914:6299","crate_id":2,"name":"take_while","span":null,"visibility":"default","docs":"Creates an iterator that yields elements based on a predicate.\n\n`take_while()` takes a closure as an argument. It will call this\nclosure on each element of the iterator, and yield elements\nwhile it returns `true`.\n\nAfter `false` is returned, `take_while()`'s job is over, and the\nrest of the elements are ignored.\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [-1i32, 0, 1];\n\nlet mut iter = a.iter().take_while(|x| x.is_negative());\n\nassert_eq!(iter.next(), Some(&-1));\nassert_eq!(iter.next(), None);\n```\n\nBecause the closure passed to `take_while()` takes a reference, and many\niterators iterate over references, this leads to a possibly confusing\nsituation, where the type of the closure is a double reference:\n\n```\nlet a = [-1, 0, 1];\n\nlet mut iter = a.iter().take_while(|x| **x < 0); // need two *s!\n\nassert_eq!(iter.next(), Some(&-1));\nassert_eq!(iter.next(), None);\n```\n\nStopping after an initial `false`:\n\n```\nlet a = [-1, 0, 1, -2];\n\nlet mut iter = a.iter().take_while(|x| **x < 0);\n\nassert_eq!(iter.next(), Some(&-1));\n\n// We have more elements that are less than zero, but since we already\n// got a false, take_while() isn't used any more\nassert_eq!(iter.next(), None);\n```\n\nBecause `take_while()` needs to look at the value in order to see if it\nshould be included or not, consuming iterators will see that it is\nremoved:\n\n```\nlet a = [1, 2, 3, 4];\nlet mut iter = a.iter();\n\nlet result: Vec<i32> = iter.by_ref()\n                           .take_while(|n| **n != 3)\n                           .cloned()\n                           .collect();\n\nassert_eq!(result, &[1, 2]);\n\nlet result: Vec<i32> = iter.cloned().collect();\n\nassert_eq!(result, &[4]);\n```\n\nThe `3` is no longer there, because it was consumed in order to see if\nthe iteration should stop, but wasn't placed back into the iterator.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["predicate",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"TakeWhile","id":"2:47106:9065","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3624:132","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1539":{"id":"0:1539","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1791,0],"end":[1816,1]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["map","parse","possible_values"],"trait":{"name":"TypedValueParser","id":"0:1362:2264","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"NonEmptyStringValueParser","id":"0:4469:2274","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1540:6597","0:1541:6637"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13713:67820":{"id":"2:13713:67820","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1431":{"id":"0:1431","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1035,0],"end":[1086,1]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["map","parse","possible_values"],"trait":{"name":"TypedValueParser","id":"0:1362:2264","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValuesParser","id":"0:4420:2260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1432:6597","0:1433:6637","0:1434:2102","0:1440:3370"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:23072:21813":{"id":"2:23072:21813","crate_id":2,"name":"simd_min","span":null,"visibility":"default","docs":"Returns the minimum of each lane.\n\nIf one of the values is `NAN`, then the other value is returned.","links":{},"attrs":["#[must_use =\n\"method returns a new vector and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:5:6507-0:4647:128":{"id":"b:5:6507-0:4647:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10569:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:6505:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4647:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:6509:1415"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:630:688":{"id":"0:630:688","crate_id":0,"name":"from","span":{"filename":"src/builder/arg_group.rs","begin":[472,4],"end":[482,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["g",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3904:1662","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10572:667":{"id":"2:10572:667","crate_id":2,"name":"fmt","span":null,"visibility":"default","docs":"Formats the value using the given formatter.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Formatter","id":"2:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"2:48872:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:5516:10975":{"id":"1:5516:10975","crate_id":1,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5517:6429","1:5518:14229"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:335:761":{"id":"0:335:761","crate_id":0,"name":"index","span":{"filename":"src/builder/arg.rs","begin":[498,4],"end":[501,5]},"visibility":"public","docs":"Specifies the index of a positional argument **starting at** 1.\n\n**NOTE:** The index refers to position according to **other positional argument**. It does\nnot define position in the argument list as a whole.\n\n**NOTE:** You can optionally leave off the `index` method, and the index will be\nassigned in order of evaluation. Utilizing the `index` method allows for setting\nindexes out of order\n\n**NOTE:** This is only meant to be used for positional arguments and shouldn't to be used\nwith [`Arg::short`] or [`Arg::long`].\n\n**NOTE:** When utilized with [`Arg::multiple_values(true)`], only the **last** positional argument\nmay be defined as multiple (i.e. with the highest index)\n\n# Panics\n\n[`Command`] will [`panic!`] if indexes are skipped (such as defining `index(1)` and `index(3)`\nbut not `index(2)`, or a positional argument is defined as multiple and is not the highest\nindex\n\n# Examples\n\n```rust\n# use clap::{Command, Arg};\nArg::new(\"config\")\n    .index(1)\n# ;\n```\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"mode\")\n        .index(1))\n    .arg(Arg::new(\"debug\")\n        .long(\"debug\"))\n    .get_matches_from(vec![\n        \"prog\", \"--debug\", \"fast\"\n    ]);\n\nassert!(m.contains_id(\"mode\"));\nassert_eq!(m.value_of(\"mode\"), Some(\"fast\")); // notice index(1) means \"first positional\"\n                                              // *not* first argument\n```\n[`Arg::short`]: Arg::short()\n[`Arg::long`]: Arg::long()\n[`Arg::multiple_values(true)`]: Arg::multiple_values()\n[`panic!`]: https://doc.rust-lang.org/std/macro.panic!.html\n[`Command`]: crate::Command","links":{"Arg::multiple_values()":"0:355:3240","Arg::long()":"0:321:1933","crate::Command":"0:755:1660","Arg::short()":"0:320:1942"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["idx",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:469:4159":{"id":"0:469:4159","crate_id":0,"name":"get_long_help","span":{"filename":"src/builder/arg.rs","begin":[4411,4],"end":[4413,5]},"visibility":"public","docs":"Get the long help specified for this argument, if any\n\n# Examples\n\n```rust\n# use clap::Arg;\nlet arg = Arg::new(\"foo\").long_help(\"long help\");\nassert_eq!(Some(\"long help\"), arg.get_long_help());\n```\n","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2867":{"id":"0:2867","crate_id":0,"name":null,"span":{"filename":"src/mkeymap.rs","begin":[38,0],"end":[45,1]},"visibility":{"restricted":{"parent":"0:2842:1714","path":"::mkeymap"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2920:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"KeyType","id":"0:4973:6885","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2868:611"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4788:667":{"id":"0:4788:667","crate_id":0,"name":"fmt","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1654,16],"end":[1654,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10511:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1566:2257":{"id":"0:1566:2257","crate_id":0,"name":"value_parser","span":{"filename":"src/builder/value_parser.rs","begin":[1929,4],"end":[1931,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"qualified_path","inner":{"name":"Parser","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:1558:2266","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13710":{"id":"2:13710","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:12789:1358","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:13711:802","2:13712:1916","2:13713:67820","2:13714:67821","2:13716:67822","2:13719:6285","2:13720:67823","2:13721:311","2:13722:64084","2:13723:4345","2:13725:7401","2:13727:27266","2:13729:27267","2:13731:11078","2:13732:67824","2:13733:64103","2:13734:64104","2:13735:1931","2:13736:11309","2:13737:6298","2:13738:43188","2:13739:43178","2:13740:6010","2:13741:67825","2:13742:43173","2:13743:2031","2:13746:6895","2:13749:63785","2:13752:2237","2:13756:9948","2:13760:6983","2:13763:43137","2:13766:64113","2:13769:67826","2:13772:67827","2:13775:64115","2:13778:64117","2:13781:67828","2:13784:67829","2:13787:2103","2:13790:67830","2:13793:67831","2:13796:67832","2:13799:6011","2:13801:67833","2:13803:67834","2:13805:67835","2:13806:67836","2:13807:67837","2:13810:2894","2:13813:8069","2:13816:64119","2:13819:67838","2:13822:67839","2:13825:67840","2:13828:2102","2:13830:11658","2:13831:1865","2:13832:21134","2:13833:21135","2:13834:67841","2:13836:11015","2:13837:67842"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3207-0:3904:1662":{"id":"b:2:3207-0:3904:1662","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3904:1662","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":["2:3209:688"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:5:848-0:4768:7385":{"id":"b:5:848-0:4768:7385","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:844:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawValues","id":"0:4768:7385","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["5:850:4342","5:851:4983","5:852:9984"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:4104-0:1294:2265":{"id":"b:2:4104-0:1294:2265","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:4102:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1294:2265","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:4106:1449"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:812:5036":{"id":"0:812:5036","crate_id":0,"name":"render_long_version","span":{"filename":"src/builder/command.rs","begin":[872,4],"end":[874,5]},"visibility":"public","docs":"Version message rendered as if the user ran `--version`.\n\nSee also [`Command::render_version`].\n\n### Coloring\n\nThis function does not try to color the message nor it inserts any [ANSI escape codes].\n\n### Examples\n\n```rust\n# use clap::Command;\nuse std::io;\nlet cmd = Command::new(\"myprog\");\nprintln!(\"{}\", cmd.render_long_version());\n```\n[`io::Write`]: std::io::Write\n[`-V` (short)]: Command::version()\n[`--version` (long)]: Command::long_version()\n[ANSI escape codes]: https://en.wikipedia.org/wiki/ANSI_escape_code","links":{"`Command::render_version`":"0:811:5031"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8479:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:32199:69458":{"id":"2:32199:69458","crate_id":2,"name":"wrapping_rem","span":null,"visibility":"public","docs":"Wrapping (modular) remainder. Computes `self % rhs`.\nWrapped remainder calculation on unsigned types is\njust the regular remainder calculation.\nThere's no way wrapping could ever happen.\nThis function exists, so that all operations\nare accounted for in the wrapping operations.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(100u64.wrapping_rem(10), 0);\n```","links":{},"attrs":["#[stable(feature = \"num_wrapping\", since = \"1.2.0\")]","#[rustc_const_stable(feature = \"const_wrapping_int_methods\", since =\n\"1.52.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:32202:69460":{"id":"2:32202:69460","crate_id":2,"name":"wrapping_shl","span":null,"visibility":"public","docs":"Panic-free bitwise shift-left; yields `self << mask(rhs)`,\nwhere `mask` removes any high-order bits of `rhs` that\nwould cause the shift to exceed the bitwidth of the type.\n\nNote that this is *not* the same as a rotate-left; the\nRHS of a wrapping shift-left is restricted to the range\nof the type, rather than the bits shifted out of the LHS\nbeing returned to the other end. The primitive integer\ntypes all implement a [`rotate_left`](Self::rotate_left) function,\nwhich may be what you want instead.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(1u64.wrapping_shl(7), 128);\nassert_eq!(1u64.wrapping_shl(128), 1);\n```","links":{"Self::rotate_left":"2:32156:1132"},"attrs":["#[stable(feature = \"num_wrapping\", since = \"1.2.0\")]","#[rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:32175:69442":{"id":"2:32175:69442","crate_id":2,"name":"ilog","span":null,"visibility":"public","docs":"Returns the logarithm of the number with respect to an arbitrary base,\nrounded down.\n\nThis method might not be optimized owing to implementation details;\n`ilog2` can produce results more efficiently for base 2, and `ilog10`\ncan produce results more efficiently for base 10.\n\n# Panics\n\nWhen the number is zero, or if the base is not at least 2;\nit panics in debug mode and the return value is 0 in release mode.\n\n# Examples\n\n```\n#![feature(int_log)]\nassert_eq!(5u64.ilog(5), 1);\n```","links":{},"attrs":["#[unstable(feature = \"int_log\", issue = \"70887\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]","#[track_caller]","#[allow(arithmetic_overflow)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["base",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"primitive","inner":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9532:7459-0:4594:1681":{"id":"a:2:9532:7459-0:4594:1681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:9532:7459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4594:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3446:2583":{"id":"0:3446:2583","crate_id":0,"name":"Hidden","span":{"filename":"src/builder/app_settings.rs","begin":[620,4],"end":[620,10]},"visibility":"default","docs":"Deprecated, replaced with [`Command::hide`] and [`Command::is_hide_set`]\n\nDerive: replace `#[clap(setting = Hidden)]` with `#[clap(hide = true)]`\n\nBuilder: replace `cmd.setting(Hidden)` with `cmd.hide(true)`","links":{"`Command::hide`":"0:905:3786","`Command::is_hide_set`":"0:1011:4245"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"0:4443":{"id":"0:4443","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1332,9],"end":[1332,13]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::marker::Copy","id":"2:3380:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"std::convert::TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3380:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangedU64ValueParser","id":"0:4439:2262","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"1:4411:11149":{"id":"1:4411:11149","crate_id":1,"name":"read","span":null,"visibility":"default","docs":"Pull some bytes from this source into the specified buffer, returning\nhow many bytes were read.\n\nThis function does not provide any guarantees about whether it blocks\nwaiting for data, but if an object needs to block for a read and cannot,\nit will typically signal this via an [`Err`] return value.\n\nIf the return value of this method is [`Ok(n)`], then implementations must\nguarantee that `0 <= n <= buf.len()`. A nonzero `n` value indicates\nthat the buffer `buf` has been filled in with `n` bytes of data from this\nsource. If `n` is `0`, then it can indicate one of two scenarios:\n\n1. This reader has reached its \"end of file\" and will likely no longer\n   be able to produce bytes. Note that this does not mean that the\n   reader will *always* no longer be able to produce bytes. As an example,\n   on Linux, this method will call the `recv` syscall for a [`TcpStream`],\n   where returning zero indicates the connection was shut down correctly. While\n   for [`File`], it is possible to reach the end of file and get zero as result,\n   but if more data is appended to the file, future calls to `read` will return\n   more data.\n2. The buffer specified was 0 bytes in length.\n\nIt is not an error if the returned value `n` is smaller than the buffer size,\neven when the reader is not at the end of the stream yet.\nThis may happen for example because fewer bytes are actually available right now\n(e. g. being close to end-of-file) or because read() was interrupted by a signal.\n\nAs this trait is safe to implement, callers cannot rely on `n <= buf.len()` for safety.\nExtra care needs to be taken when `unsafe` functions are used to access the read bytes.\nCallers have to ensure that no unchecked out-of-bounds accesses are possible even if\n`n > buf.len()`.\n\nNo guarantees are provided about the contents of `buf` when this\nfunction is called, implementations cannot rely on any property of the\ncontents of `buf` being true. It is recommended that *implementations*\nonly write data to `buf` instead of reading its contents.\n\nCorrespondingly, however, *callers* of this method must not assume any guarantees\nabout how the implementation uses `buf`. The trait is safe to implement,\nso it is possible that the code that's supposed to write to the buffer might also read\nfrom it. It is your responsibility to make sure that `buf` is initialized\nbefore calling `read`. Calling `read` with an uninitialized `buf` (of the kind one\nobtains via [`MaybeUninit<T>`]) is not safe, and can lead to undefined behavior.\n\n[`MaybeUninit<T>`]: crate::mem::MaybeUninit\n\n# Errors\n\nIf this function encounters any form of I/O or other error, an error\nvariant will be returned. If an error is returned then it must be\nguaranteed that no bytes were read.\n\nAn error of the [`ErrorKind::Interrupted`] kind is non-fatal and the read\noperation should be retried if there is nothing else to do.\n\n# Examples\n\n[`File`]s implement `Read`:\n\n[`Ok(n)`]: Ok\n[`File`]: crate::fs::File\n[`TcpStream`]: crate::net::TcpStream\n\n```no_run\nuse std::io;\nuse std::io::prelude::*;\nuse std::fs::File;\n\nfn main() -> io::Result<()> {\n    let mut f = File::open(\"foo.txt\")?;\n    let mut buffer = [0; 10];\n\n    // read up to 10 bytes\n    let n = f.read(&mut buffer[..])?;\n\n    println!(\"The bytes: {:?}\", &buffer[..n]);\n    Ok(())\n}\n```","links":{"Ok":"2:47937:178","`Err`":"2:47940:127","crate::mem::MaybeUninit":"2:32630:10172","crate::fs::File":"1:2909:129","crate::net::TcpStream":"1:5154:11189","`ErrorKind::Interrupted`":"1:10863:14188"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"1:3803:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:13738:43188":{"id":"2:13738:43188","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"2:13739:43178"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:50064:8927","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3218-0:4241:1674":{"id":"b:2:3218-0:4241:1674","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:4241:1674","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":["2:3221:128","2:3222:1435"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3190:1435":{"id":"2:3190:1435","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":"Performs the conversion.","links":{},"attrs":["#[stable(feature = \"try_from\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:8672:152":{"id":"2:8672:152","crate_id":2,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8673:2117","2:8674:7847","2:8675:777"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:4724:59":{"id":"0:4724:59","crate_id":0,"name":"default","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[67,23],"end":[67,30]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4713:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4534:7096":{"id":"0:4534:7096","crate_id":0,"name":"ActualNumValues","span":{"filename":"src/error/context.rs","begin":[16,4],"end":[16,19]},"visibility":"default","docs":"Number of values present","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"0:3352:2336":{"id":"0:3352:2336","crate_id":0,"name":"Set","span":{"filename":"src/builder/action.rs","begin":[49,4],"end":[49,7]},"visibility":"default","docs":"When encountered, store the associated value(s) in [`ArgMatches`][crate::ArgMatches]\n\n# Examples\n\n```rust\n# use clap::Command;\n# use clap::Arg;\nlet cmd = Command::new(\"mycmd\")\n    .arg(\n        Arg::new(\"flag\")\n            .long(\"flag\")\n            .action(clap::ArgAction::Set)\n    );\n\nlet matches = cmd.try_get_matches_from([\"mycmd\", \"--flag\", \"value\"]).unwrap();\nassert!(matches.contains_id(\"flag\"));\nassert_eq!(matches.occurrences_of(\"flag\"), 0);\nassert_eq!(\n    matches.get_many::<String>(\"flag\").unwrap_or_default().map(|v| v.as_str()).collect::<Vec<_>>(),\n    vec![\"value\"]\n);\n```","links":{"crate::ArgMatches":"0:4713:1665"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"a:2:3411:6205-0:4404:2276":{"id":"a:2:3411:6205-0:4404:2276","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:3411:6205","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PathBufValueParser","id":"0:4404:2276","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:3488:1115":{"id":"2:3488:1115","crate_id":2,"name":"rem_assign","span":null,"visibility":"default","docs":"Performs the `%=` operation.\n\n# Example\n\n```\nlet mut x: u32 = 12;\nx %= 10;\nassert_eq!(x, 2);\n```","links":{},"attrs":["#[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["rhs",{"kind":"generic","inner":"Rhs"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:32152:46879":{"id":"2:32152:46879","crate_id":2,"name":"leading_zeros","span":null,"visibility":"public","docs":"Returns the number of leading zeros in the binary representation of `self`.\n\n# Examples\n\nBasic usage:\n\n```\nlet n = u64::MAX >> 2;\n\nassert_eq!(n.leading_zeros(), 2);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4447:415":{"id":"0:4447:415","crate_id":0,"name":"clone","span":{"filename":"src/builder/value_parser.rs","begin":[1332,15],"end":[1332,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"RangedU64ValueParser","id":"0:4439:2262","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:318:909":{"id":"0:318:909","crate_id":0,"name":"name","span":{"filename":"src/builder/arg.rs","begin":[150,4],"end":[152,5]},"visibility":"public","docs":"Deprecated, replaced with [`Arg::id`] to avoid confusion with [`Arg::value_name`]\n\nBuilder: replaced `arg.name(...)` with `arg.id(...)`","links":{"`Arg::value_name`":"0:359:1945","`Arg::id`":"0:316:1941"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["n",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8940:9965":{"id":"2:8940:9965","crate_id":2,"name":"partition","span":null,"visibility":"default","docs":"Consumes an iterator, creating two collections from it.\n\nThe predicate passed to `partition()` can return `true`, or `false`.\n`partition()` returns a pair, all of the elements for which it returned\n`true`, and all of the elements for which it returned `false`.\n\nSee also [`is_partitioned()`] and [`partition_in_place()`].\n\n[`is_partitioned()`]: Iterator::is_partitioned\n[`partition_in_place()`]: Iterator::partition_in_place\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\n\nlet (even, odd): (Vec<_>, Vec<_>) = a\n    .into_iter()\n    .partition(|n| n % 2 == 0);\n\nassert_eq!(even, vec![2]);\nassert_eq!(odd, vec![1, 3]);\n```","links":{"Iterator::is_partitioned":"2:8965:9967","Iterator::partition_in_place":"2:8950:9966"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"tuple","inner":[{"kind":"generic","inner":"B"},{"kind":"generic","inner":"B"}]},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"B"},"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"2:3254:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Extend","id":"2:8681:8737","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3624:132","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:782:2012":{"id":"0:782:2012","crate_id":0,"name":"subcommand","span":{"filename":"src/builder/command.rs","begin":[415,4],"end":[418,5]},"visibility":"public","docs":"Adds a subcommand to the list of valid possibilities.\n\nSubcommands are effectively sub-[`Command`]s, because they can contain their own arguments,\nsubcommands, version, usage, etc. They also function just like [`Command`]s, in that they get\ntheir own auto generated help, version, and usage.\n\nA subcommand's [`Command::name`] will be used for:\n- The argument the user passes in\n- Programmatically looking up the subcommand\n\n# Examples\n\n```no_run\n# use clap::{Command, arg};\nCommand::new(\"myprog\")\n    .subcommand(Command::new(\"config\")\n        .about(\"Controls configuration features\")\n        .arg(arg!(\"<config> 'Required configuration file to use'\")))\n# ;\n```","links":{"`Command::name`":"0:836:909","`Command`":"0:755:1660"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["subcmd",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"App","id":"0:4241:1674","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:170:1672":{"id":"0:170:1672","crate_id":0,"name":"Subcommand","span":{"filename":"src/derive.rs","begin":[435,0],"end":[448,1]},"visibility":"public","docs":"Parse a sub-command into a user-defined enum.\n\nImplementing this trait lets a parent container delegate subcommand behavior to `Self`.\nwith:\n- `#[clap(subcommand)] field: SubCmd`: Attribute can be used with either struct fields or enum\n  variants that impl `Subcommand`.\n- `#[clap(flatten)] Variant(SubCmd)`: Attribute can only be used with enum variants that impl\n  `Subcommand`.\n\nSee the [derive reference](crate::_derive) for attributes and best practices.\n\n**NOTE:** Deriving requires the [`derive` feature flag][crate::_features]\n\n# Example\n\n ```ignore\n#[derive(clap::Parser)]\nstruct Args {\n    #[clap(subcommand)]\n    action: Action,\n}\n\n#[derive(clap::Subcommand)]\nenum Action {\n    Add,\n    Remove,\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:171:2214","0:172:2215","0:173:2217"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FromArgMatches","id":"0:162:1670","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:208"]}},"2:23391:18217":{"id":"2:23391:18217","crate_id":2,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23392:15207","2:23393:21791","2:23394:21792"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:23384:10989","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:4448":{"id":"0:4448","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1332,22],"end":[1332,27]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"2:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"std::convert::TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangedU64ValueParser","id":"0:4439:2262","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:4450:667"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4813":{"id":"0:4813","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1800,16],"end":[1800,21]},"visibility":{"restricted":{"parent":"0:2092:7461","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:4806:1682","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:4815:667"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:504:4186":{"id":"0:504:4186","crate_id":0,"name":"get_value_parser","span":{"filename":"src/builder/arg.rs","begin":[4708,4],"end":[4718,5]},"visibility":"public","docs":"Configured parser for argument values\n\n# Example\n\n```rust\nlet cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"port\")\n            .value_parser(clap::value_parser!(usize))\n    );\nlet value_parser = cmd.get_arguments()\n    .find(|a| a.get_id() == \"port\").unwrap()\n    .get_value_parser();\nprintln!(\"{:?}\", value_parser);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"super::ValueParser","id":"0:1294:2265","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2211:7748":{"id":"0:2211:7748","crate_id":0,"name":"indices_of","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[968,4],"end":[975,5]},"visibility":"public","docs":"All indices an argument appeared at when parsing.\n\nIndices are similar to argv indices, but are not exactly 1:1.\n\nFor flags (i.e. those arguments which don't have an associated value), indices refer\nto occurrence of the switch, such as `-f`, or `--flag`. However, for options the indices\nrefer to the *values* `-o val` would therefore not represent two distinct indices, only the\nindex for `val` would be recorded. This is by design.\n\n*NOTE:* For more information about how clap indices compared to argv indices, see\n[`ArgMatches::index_of`]\n\n# Panics\n\nIf `id` is is not a valid argument or group id.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"myapp\")\n    .arg(Arg::new(\"option\")\n        .short('o')\n        .use_value_delimiter(true)\n        .multiple_values(true))\n    .get_matches_from(vec![\"myapp\", \"-o=val1,val2,val3\"]);\n           // ARGV indices: ^0       ^1\n           // clap indices:             ^2   ^3   ^4\n           //\n           // clap sees the above as 'myapp -o val1 val2 val3'\n           //                         ^0    ^1 ^2   ^3   ^4\nassert_eq!(m.indices_of(\"option\").unwrap().collect::<Vec<_>>(), &[2, 3, 4]);\n```\n\nAnother quick example is when flags and options are used together\n\n```rust\n# use clap::{Command, Arg, ArgAction};\nlet m = Command::new(\"myapp\")\n    .arg(Arg::new(\"option\")\n        .short('o')\n        .takes_value(true)\n        .action(ArgAction::Append))\n    .arg(Arg::new(\"flag\")\n        .short('f')\n        .action(ArgAction::Count))\n    .get_matches_from(vec![\"myapp\", \"-o\", \"val1\", \"-f\", \"-o\", \"val2\", \"-f\"]);\n           // ARGV indices: ^0       ^1    ^2      ^3    ^4    ^5      ^6\n           // clap indices:                ^2      ^3          ^5      ^6\n\nassert_eq!(m.indices_of(\"option\").unwrap().collect::<Vec<_>>(), &[2, 5]);\nassert_eq!(m.indices_of(\"flag\").unwrap().collect::<Vec<_>>(), &[6]);\n```\n\nOne final example, which is an odd case; if we *don't* use  value delimiter as we did with\nthe first example above instead of `val1`, `val2` and `val3` all being distinc values, they\nwould all be a single value of `val1,val2,val3`, in which case they'd only receive a single\nindex.\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"myapp\")\n    .arg(Arg::new(\"option\")\n        .short('o')\n        .takes_value(true)\n        .multiple_values(true))\n    .get_matches_from(vec![\"myapp\", \"-o=val1,val2,val3\"]);\n           // ARGV indices: ^0       ^1\n           // clap indices:             ^2\n           //\n           // clap sees the above as 'myapp -o \"val1,val2,val3\"'\n           //                         ^0    ^1  ^2\nassert_eq!(m.indices_of(\"option\").unwrap().collect::<Vec<_>>(), &[2]);\n```\n[`ArgMatches::index_of`]: ArgMatches::index_of()\n[delimiter]: Arg::value_delimiter()","links":{"ArgMatches::index_of()":"0:2209:7725"},"attrs":["#[track_caller]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:4806:1682","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Key","id":"0:3239:2795","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2342":{"id":"0:2342","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1766,0],"end":[1766,46]},"visibility":{"restricted":{"parent":"0:2092:7461","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"2:8741:7849","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsValues","id":"0:4796:1683","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"5:845:4342":{"id":"5:845:4342","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":"The resulting type after obtaining ownership.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null}},"0:4544:7083":{"id":"0:4544:7083","crate_id":0,"name":"SuggestedCommand","span":{"filename":"src/error/context.rs","begin":[26,4],"end":[26,20]},"visibility":"default","docs":"Potential fix for the user","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"2:32229:69486":{"id":"2:32229:69486","crate_id":2,"name":"next_power_of_two","span":null,"visibility":"public","docs":"Returns the smallest power of two greater than or equal to `self`.\n\nWhen return value overflows (i.e., `self > (1 << (N-1))` for type\n`uN`), it panics in debug mode and the return value is wrapped to 0 in\nrelease mode (the only situation in which method can return 0).\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(2u64.next_power_of_two(), 2);\nassert_eq!(3u64.next_power_of_two(), 4);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_int_pow\", since = \"1.50.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10576:667":{"id":"2:10576:667","crate_id":2,"name":"fmt","span":null,"visibility":"default","docs":"Formats the value using the given formatter.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Formatter","id":"2:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"2:48872:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:833:5174":{"id":"0:833:5174","crate_id":0,"name":"infer_subcommands","span":{"filename":"src/builder/command.rs","begin":[1378,4],"end":[1384,5]},"visibility":"public","docs":"Allow partial matches of [subcommand] names and their [aliases].\n\nFor example, to match a subcommand named `test`, one could use `t`, `te`, `tes`, and\n`test`.\n\n**NOTE:** The match *must not* be ambiguous at all in order to succeed. i.e. to match `te`\nto `test` there could not also be a subcommand or alias `temp` because both start with `te`\n\n**CAUTION:** This setting can interfere with [positional/free arguments], take care when\ndesigning CLIs which allow inferred subcommands and have potential positional/free\narguments whose values could start with the same characters as subcommands. If this is the\ncase, it's recommended to use settings such as [`Command::args_conflicts_with_subcommands`] in\nconjunction with this setting.\n\n**NOTE:** This choice is propagated to all child subcommands.\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n    .infer_subcommands(true)\n    .subcommand(Command::new(\"test\"))\n    .get_matches_from(vec![\n        \"prog\", \"te\"\n    ]);\nassert_eq!(m.subcommand_name(), Some(\"test\"));\n```\n\n[subcommand]: crate::Command::subcommand()\n[positional/free arguments]: crate::Arg::index()\n[aliases]: crate::Command::aliases()","links":{"`Command::args_conflicts_with_subcommands`":"0:909:5678","crate::Command::aliases()":"0:892:2827","crate::Command::subcommand()":"0:782:2012","crate::Arg::index()":"0:335:761"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3492:184":{"id":"2:3492:184","crate_id":2,"name":"Output","span":null,"visibility":"default","docs":"The resulting type after applying the `!` operator.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"a:2:9532:7459-0:4707:2393":{"id":"a:2:9532:7459-0:4707:2393","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:9532:7459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AnyValueId","id":"0:4707:2393","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:3176:4828":{"id":"2:3176:4828","crate_id":2,"name":"as_mut","span":null,"visibility":"default","docs":"Converts this type into a mutable reference of the (usually inferred) input type.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:23063:21804":{"id":"2:23063:21804","crate_id":2,"name":"is_sign_positive","span":null,"visibility":"default","docs":"Returns true for each lane if it has a positive sign, including\n`+0.0`, `NaN`s with positive sign bit and positive infinity.","links":{},"attrs":["#[must_use =\n\"method returns a new mask and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Mask","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdFloat","id":"2:23053:11401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:1037:21134":{"id":"1:1037:21134","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"default","docs":"Converts this type to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase`].\n\n# Note\n\nThis method is deprecated in favor of the identically-named\ninherent methods on `u8`, `char`, `[u8]` and `str`.\n\n[`to_ascii_uppercase`]: AsciiExt::to_ascii_uppercase","links":{"AsciiExt::to_ascii_uppercase":"1:1034:21133"},"attrs":["#[stable(feature = \"ascii\", since = \"1.9.0\")]"],"deprecation":{"since":"1.26.0","note":"use inherent methods instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:4500:6983":{"id":"1:4500:6983","crate_id":1,"name":"split","span":null,"visibility":"default","docs":"Returns an iterator over the contents of this reader split on the byte\n`byte`.\n\nThe iterator returned from this function will return instances of\n<code>[io::Result]<[Vec]\\<u8>></code>. Each vector returned will *not* have\nthe delimiter byte at the end.\n\nThis function will yield errors whenever [`read_until`] would have\nalso yielded an error.\n\n[io::Result]: self::Result \"io::Result\"\n[`read_until`]: BufRead::read_until\n\n# Examples\n\n[`std::io::Cursor`][`Cursor`] is a type that implements `BufRead`. In\nthis example, we use [`Cursor`] to iterate over all hyphen delimited\nsegments in a byte slice\n\n```\nuse std::io::{self, BufRead};\n\nlet cursor = io::Cursor::new(b\"lorem-ipsum-dolor\");\n\nlet mut split_iter = cursor.split(b'-').map(|l| l.unwrap());\nassert_eq!(split_iter.next(), Some(b\"lorem\".to_vec()));\nassert_eq!(split_iter.next(), Some(b\"ipsum\".to_vec()));\nassert_eq!(split_iter.next(), Some(b\"dolor\".to_vec()));\nassert_eq!(split_iter.next(), None);\n```","links":{"`Cursor`":"1:10712:9001","Vec":"5:7898:240","BufRead::read_until":"1:4497:8989","self::Result":"1:3801:208"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["byte",{"kind":"primitive","inner":"u8"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"1:10979:8947","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:218":{"id":"0:218","crate_id":0,"name":null,"span":{"filename":"src/builder/action.rs","begin":[272,0],"end":[343,1]},"visibility":{"restricted":{"parent":"0:217:2249","path":"::builder::action"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"ArgAction","id":"0:3351:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:219:2388"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:44":{"id":"0:44","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[112,0],"end":[112,28]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::builder::App","name":"App","id":"0:4241:1674","glob":false}},"2:13793:67831":{"id":"2:13793:67831","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"prim@char":"1:15876:8642","`DoubleEndedIterator`":"2:8716:121","self::pattern":"2:13336:8923","str::rmatch_indices":"2:13796:67832"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:49940:8942","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13346:8917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1321":{"id":"0:1321","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[284,0],"end":[292,1]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":"Convert a [`TypedValueParser`] to [`ValueParser`]\n\n# Example\n\n```rust\nlet mut cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"hostname\")\n            .long(\"hostname\")\n            .value_parser(clap::builder::NonEmptyStringValueParser::new())\n            .takes_value(true)\n            .required(true)\n    );\n\nlet m = cmd.try_get_matches_from_mut(\n    [\"cmd\", \"--hostname\", \"rust-lang.org\"]\n).unwrap();\n\nlet hostname: &String = m.get_one(\"hostname\")\n    .expect(\"required\");\nassert_eq!(hostname, \"rust-lang.org\");\n```","links":{"`TypedValueParser`":"0:1362:2264","`ValueParser`":"0:1294:2265"},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"TypedValueParser","id":"0:1362:2264","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Value","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"","id":"0:1362:2264","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1294:2265","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1323:688"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:4104-0:4806:1682":{"id":"b:2:4104-0:4806:1682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:4102:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:4806:1682","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:4106:1449"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4763:415":{"id":"0:4763:415","crate_id":0,"name":"clone","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1546,9],"end":[1546,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"ValuesRef","id":"0:4755:7386","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8919:1326":{"id":"2:8919:1326","crate_id":2,"name":"skip","span":null,"visibility":"default","docs":"Creates an iterator that skips the first `n` elements.\n\n`skip(n)` skips elements until `n` elements are skipped or the end of the\niterator is reached (whichever happens first). After that, all the remaining\nelements are yielded. In particular, if the original iterator is too short,\nthen the returned iterator is empty.\n\nRather than overriding this method directly, instead override the `nth` method.\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\n\nlet mut iter = a.iter().skip(2);\n\nassert_eq!(iter.next(), Some(&3));\nassert_eq!(iter.next(), None);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Skip","id":"2:47065:9063","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1564":{"id":"0:1564","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1927,0],"end":[1932,1]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ValueParserFactory","id":"0:1558:2266","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"std::ffi::OsString","id":"1:2651:183","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1565:1671","0:1566:2257"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3491:8788":{"id":"2:3491:8788","crate_id":2,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3492:184","2:3493:962"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:3370:216-0:4463:2271":{"id":"a:2:3370:216-0:4463:2271","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BoolishValueParser","id":"0:4463:2271","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:2870:27181":{"id":"2:2870:27181","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2454":{"id":"0:2454","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/mod.rs","begin":[9,34],"end":[9,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"arg_matches::Indices","name":"Indices","id":"0:4806:1682","glob":false}},"0:2357":{"id":"0:2357","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1823,0],"end":[1823,45]},"visibility":{"restricted":{"parent":"0:2092:7461","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"2:8741:7849","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:4806:1682","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:32214:69472":{"id":"2:32214:69472","crate_id":2,"name":"overflowing_rem","span":null,"visibility":"public","docs":"Calculates the remainder when `self` is divided by `rhs`.\n\nReturns a tuple of the remainder after dividing along with a boolean\nindicating whether an arithmetic overflow would occur. Note that for\nunsigned integers overflow never occurs, so the second value is\nalways `false`.\n\n# Panics\n\nThis function will panic if `rhs` is 0.\n\n# Examples\n\nBasic usage\n\n```\nassert_eq!(5u64.overflowing_rem(2), (1, false));\n```","links":{},"attrs":["#[stable(feature = \"wrapping\", since = \"1.7.0\")]","#[rustc_const_stable(feature = \"const_overflowing_int_methods\", since =\n\"1.52.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"u64"},{"kind":"primitive","inner":"bool"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1516:6597":{"id":"0:1516:6597","crate_id":0,"name":"Value","span":{"filename":"src/builder/value_parser.rs","begin":[1614,4],"end":[1614,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"primitive","inner":"bool"}}},"5:6170":{"id":"5:6170","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5983:1358","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:6171:68477","5:6172:1897","5:6175:68478","5:6178:8607","5:6190:68479","5:6191:6698","5:6192:8309","5:6193:21133","5:6194:2740"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:10823:10573":{"id":"2:10823:10573","crate_id":2,"name":"write_i128","span":null,"visibility":"default","docs":"Writes a single `i128` into this hasher.","links":{},"attrs":["#[stable(feature = \"i128\", since = \"1.26.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"primitive","inner":"i128"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4288:611":{"id":"0:4288:611","crate_id":0,"name":"eq","span":{"filename":"src/builder/command.rs","begin":[77,23],"end":[77,32]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"App","id":"0:4241:1674","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3987:2550":{"id":"0:3987:2550","crate_id":0,"name":"NextLineHelp","span":{"filename":"src/builder/arg_settings.rs","begin":[211,4],"end":[211,16]},"visibility":"default","docs":"Deprecated, replaced with [`Arg::next_line_help`] and [`Arg::is_next_line_help_set`]\n\nDerive: replace `#[clap(setting = NextLineHelp)]` with `#[clap(next_line_help = true)]`\n\nBuilder: replace `arg.setting(NextLineHelp)` with `arg.next_line_help(true)`","links":{"`Arg::is_next_line_help_set`":"0:508:4243","`Arg::next_line_help`":"0:413:3781"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"2:8928:7851":{"id":"2:8928:7851","crate_id":2,"name":"flatten","span":null,"visibility":"default","docs":"Creates an iterator that flattens nested structure.\n\nThis is useful when you have an iterator of iterators or an iterator of\nthings that can be turned into iterators and you want to remove one\nlevel of indirection.\n\n# Examples\n\nBasic usage:\n\n```\nlet data = vec![vec![1, 2, 3, 4], vec![5, 6]];\nlet flattened = data.into_iter().flatten().collect::<Vec<u8>>();\nassert_eq!(flattened, &[1, 2, 3, 4, 5, 6]);\n```\n\nMapping and then flattening:\n\n```\nlet words = [\"alpha\", \"beta\", \"gamma\"];\n\n// chars() returns an iterator\nlet merged: String = words.iter()\n                          .map(|s| s.chars())\n                          .flatten()\n                          .collect();\nassert_eq!(merged, \"alphabetagamma\");\n```\n\nYou can also rewrite this in terms of [`flat_map()`], which is preferable\nin this case since it conveys intent more clearly:\n\n```\nlet words = [\"alpha\", \"beta\", \"gamma\"];\n\n// chars() returns an iterator\nlet merged: String = words.iter()\n                          .flat_map(|s| s.chars())\n                          .collect();\nassert_eq!(merged, \"alphabetagamma\");\n```\n\nFlattening only removes one level of nesting at a time:\n\n```\nlet d3 = [[[1, 2], [3, 4]], [[5, 6], [7, 8]]];\n\nlet d2 = d3.iter().flatten().collect::<Vec<_>>();\nassert_eq!(d2, [&[1, 2], &[3, 4], &[5, 6], &[7, 8]]);\n\nlet d1 = d3.iter().flatten().flatten().collect::<Vec<_>>();\nassert_eq!(d1, [&1, &2, &3, &4, &5, &6, &7, &8]);\n```\n\nHere we see that `flatten()` does not perform a \"deep\" flatten.\nInstead, only one level of nesting is removed. That is, if you\n`flatten()` a three-dimensional array, the result will be\ntwo-dimensional and not one-dimensional. To get a one-dimensional\nstructure, you have to `flatten()` again.\n\n[`flat_map()`]: Iterator::flat_map","links":{"Iterator::flat_map":"2:8925:5917"},"attrs":["#[stable(feature = \"iterator_flatten\", since = \"1.29.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Flatten","id":"2:6716:7473","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:4153:9022":{"id":"2:4153:9022","crate_id":2,"name":"Provider","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4154:10132"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:328:2828":{"id":"0:328:2828","crate_id":0,"name":"short_aliases","span":{"filename":"src/builder/arg.rs","begin":[333,4],"end":[339,5]},"visibility":"public","docs":"Add aliases, which functions as a hidden short flag.\n\nThis is more efficient, and easier than creating multiple hidden subcommands as one only\nneeds to check for the existence of this command, and not all variants.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ArgAction};\nlet m = Command::new(\"prog\")\n            .arg(Arg::new(\"test\")\n                    .short('t')\n                    .short_aliases(&['e', 's'])\n                    .action(ArgAction::SetTrue)\n                    .help(\"the file to add\")\n                    .required(false))\n            .get_matches_from(vec![\n                \"prog\", \"-s\"\n            ]);\nassert_eq!(*m.get_one::<bool>(\"test\").expect(\"defaulted by clap\"), true);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["names",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"char"}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8874:2117":{"id":"2:8874:2117","crate_id":2,"name":"Item","span":null,"visibility":"default","docs":"The type of the elements being iterated over.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"2:13803:67834":{"id":"2:13803:67834","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1382":{"id":"0:1382","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[729,0],"end":[755,1]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["map","parse","possible_values"],"trait":{"name":"TypedValueParser","id":"0:1362:2264","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StringValueParser","id":"0:4392:2263","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1383:6597","0:1384:6637","0:1385:2102"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:23242:11040":{"id":"2:23242:11040","crate_id":2,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:23232:10989","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:393:61":{"id":"0:393:61","crate_id":0,"name":"raw","span":{"filename":"src/builder/arg.rs","begin":[2225,4],"end":[2230,5]},"visibility":"public","docs":"Consume all following arguments.\n\nDo not be parse them individually, but rather pass them in entirety.\n\nIt is worth noting that setting this requires all values to come after a `--` to indicate\nthey should all be captured. For example:\n\n```text\n--foo something -- -v -v -v -b -b -b --baz -q -u -x\n```\n\nWill result in everything after `--` to be considered one raw argument. This behavior\nmay not be exactly what you are expecting and using [`crate::Command::trailing_var_arg`]\nmay be more appropriate.\n\n**NOTE:** Implicitly sets [`Arg::takes_value(true)`] [`Arg::multiple_values(true)`],\n[`Arg::allow_hyphen_values(true)`], and [`Arg::last(true)`] when set to `true`.\n\n[`Arg::takes_value(true)`]: Arg::takes_value()\n[`Arg::multiple_values(true)`]: Arg::multiple_values()\n[`Arg::allow_hyphen_values(true)`]: Arg::allow_hyphen_values()\n[`Arg::last(true)`]: Arg::last()","links":{"Arg::last()":"0:336:3029","Arg::takes_value()":"0:351:1949","Arg::allow_hyphen_values()":"0:383:3410","`crate::Command::trailing_var_arg`":"0:881:5447","Arg::multiple_values()":"0:355:3240"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9533:7458-0:3904:1662":{"id":"a:2:9533:7458-0:3904:1662","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:9533:7458","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3904:1662","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4456:667":{"id":"0:4456:667","crate_id":0,"name":"fmt","span":{"filename":"src/builder/value_parser.rs","begin":[1495,22],"end":[1495,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10511:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4840":{"id":"0:4840","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/value_source.rs","begin":[2,29],"end":[2,38]},"visibility":{"restricted":{"parent":"0:2440:7462","path":"::parser::matches::value_source"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:3378:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4828:1684","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13736:11309":{"id":"2:13736:11309","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:15876:8642"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49766:8931","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:14462:525":{"id":"2:14462:525","crate_id":2,"name":"dealloc","span":null,"visibility":"default","docs":"Deallocate the block of memory at the given `ptr` pointer with the given `layout`.\n\n# Safety\n\nThis function is unsafe because undefined behavior can result\nif the caller does not ensure all of the following:\n\n* `ptr` must denote a block of memory currently allocated via\n  this allocator,\n\n* `layout` must be the same layout that was used\n  to allocate that block of memory.","links":{},"attrs":["#[stable(feature = \"global_alloc\", since = \"1.28.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["ptr",{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}}],["layout",{"kind":"resolved_path","inner":{"name":"Layout","id":"2:50749:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"b:23:25-0:4351:1680":{"id":"b:23:25-0:4351:1680","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.1/src/equivalent.rs","begin":[18,0],"end":[18,46]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2925:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Equivalent","id":"23:22:9122","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:4351:1680","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["23:28:9116"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"Q"}}},"b:2:2868-0:4294:1679":{"id":"b:2:2868-0:4294:1679","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2862:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:4294:1679","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":["2:2870:27181"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:417:3833":{"id":"0:417:3833","crate_id":0,"name":"hide_short_help","span":{"filename":"src/builder/arg.rs","begin":[3096,4],"end":[3102,5]},"visibility":"public","docs":"Hides an argument from short help (`-h`).\n\n**NOTE:** This does **not** hide the argument from usage strings on error\n\n**NOTE:** Setting this option will cause next-line-help output style to be used\nwhen long help (`--help`) is called.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg};\nArg::new(\"debug\")\n    .hide_short_help(true);\n```\n\nSetting `hide_short_help(true)` will hide the argument when displaying short help text\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .long(\"config\")\n        .hide_short_help(true)\n        .help(\"Some help text describing the --config arg\"))\n    .get_matches_from(vec![\n        \"prog\", \"-h\"\n    ]);\n```\n\nThe above example displays\n\n```text\nhelptest\n\nUSAGE:\n   helptest [OPTIONS]\n\nOPTIONS:\n-h, --help       Print help information\n-V, --version    Print version information\n```\n\nHowever, when --help is called\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .long(\"config\")\n        .hide_short_help(true)\n        .help(\"Some help text describing the --config arg\"))\n    .get_matches_from(vec![\n        \"prog\", \"--help\"\n    ]);\n```\n\nThen the following would be displayed\n\n```text\nhelptest\n\nUSAGE:\n   helptest [OPTIONS]\n\nOPTIONS:\n    --config     Some help text describing the --config arg\n-h, --help       Print help information\n-V, --version    Print version information\n```","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4721":{"id":"0:4721","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[67,16],"end":[67,21]},"visibility":{"restricted":{"parent":"0:2092:7461","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4713:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4722:415"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3454:2604":{"id":"0:3454:2604","crate_id":0,"name":"NoAutoHelp","span":{"filename":"src/builder/app_settings.rs","begin":[697,4],"end":[697,14]},"visibility":"default","docs":"Deprecated, replaced with [`Arg::action`][super::Arg::action]\n\nDerive: replace `#[clap(setting = NoAutoHelp)]` with setting an explicit action on your help argument\n\nBuilder: replace `cmd.setting(NoAutoHelp)` with setting an explicit action on your help argument","links":{"super::Arg::action":"0:352:2249"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"0:3356:2347":{"id":"0:3356:2347","crate_id":0,"name":"StoreValue","span":{"filename":"src/builder/action.rs","begin":[94,4],"end":[94,14]},"visibility":"default","docs":"Deprecated, replaced with [`ArgAction::Set`] or [`ArgAction::Append`]\n\nBuilder: Instead of `arg.action(ArgAction::StoreValue)`,\n- Use `arg.action(ArgAction::Set)` for single-occurrence arguments\n- Use `arg.action(ArgAction::Append)` for multiple-occurrence arguments\n\nDerive: opt-in to the new behavior with `#[clap(action)]`","links":{"`ArgAction::Set`":"0:3352:2336","`ArgAction::Append`":"0:3354:2340"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"0:1375:6637":{"id":"0:1375:6637","crate_id":0,"name":"parse_ref","span":{"filename":"src/builder/value_parser.rs","begin":[693,4],"end":[712,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["cmd",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Command","id":"0:755:1660","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["arg",{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Arg","id":"0:3818:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}],"bindings":[]}}}}],["value",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"std::ffi::OsStr","id":"1:2654:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Value","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:1362:2264","args":null}}}},{"type":{"kind":"resolved_path","inner":{"name":"crate::Error","id":"0:4647:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13357:11302":{"id":"2:13357:11302","crate_id":2,"name":"haystack","span":null,"visibility":"default","docs":"Getter for the underlying string to be searched in\n\nWill always return the same [`&str`][str].","links":{"str":"1:15882:8647"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:177:1862":{"id":"0:177:1862","crate_id":0,"name":"from_str","span":{"filename":"src/derive.rs","begin":[484,4],"end":[494,5]},"visibility":"default","docs":"Parse an argument into `Self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["input",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["ignore_case",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:8479:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1233:2103":{"id":"0:1233:2103","crate_id":0,"name":"matches","span":{"filename":"src/builder/possible_value.rs","begin":[239,4],"end":[246,5]},"visibility":"public","docs":"Tests if the value is valid for this argument value\n\nThe value is valid if it is either the name or one of the aliases.\n\n# Examples\n\n```rust\n# use clap::PossibleValue;\nlet arg_value = PossibleValue::new(\"fast\").alias(\"not-slow\");\n\nassert!(arg_value.matches(\"fast\", false));\nassert!(arg_value.matches(\"not-slow\", false));\n\nassert!(arg_value.matches(\"FAST\", true));\nassert!(!arg_value.matches(\"FAST\", false));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["value",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["ignore_case",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:962:5879":{"id":"0:962:5879","crate_id":0,"name":"get_subcommand_help_heading","span":{"filename":"src/builder/command.rs","begin":[3485,4],"end":[3487,5]},"visibility":"public","docs":"Returns the help heading for listing subcommands.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4767:667":{"id":"0:4767:667","crate_id":0,"name":"fmt","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1546,16],"end":[1546,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10511:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6332:11006":{"id":"1:6332:11006","crate_id":1,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6333:28895","1:6334:28896"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:949:5861":{"id":"0:949:5861","crate_id":0,"name":"get_all_short_flag_aliases","span":{"filename":"src/builder/command.rs","begin":[3422,4],"end":[3424,5]},"visibility":"public","docs":"Iterate through the set of *all* the short aliases for this subcommand, both visible and hidden.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"primitive","inner":"char"}}}}]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'_"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3278:128":{"id":"2:3278:128","crate_id":2,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3279:7013","2:3281:7047","2:3282:10131","2:3283:10132"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"2:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Display","id":"2:10569:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10822:10572":{"id":"2:10822:10572","crate_id":2,"name":"write_i64","span":null,"visibility":"default","docs":"Writes a single `i64` into this hasher.","links":{},"attrs":["#[stable(feature = \"hasher_write\", since = \"1.3.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"primitive","inner":"i64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3819:8798":{"id":"2:3819:8798","crate_id":2,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"2:3750:6566","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:5:6507-0:3818:1661":{"id":"b:5:6507-0:3818:1661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10569:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:6505:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3818:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":["5:6509:1415"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1570":{"id":"0:1570","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1939,0],"end":[1944,1]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ValueParserFactory","id":"0:1558:2266","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"bool"},"items":["0:1571:1671","0:1572:2257"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:3370:216-0:4755:7386":{"id":"a:2:3370:216-0:4755:7386","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValuesRef","id":"0:4755:7386","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3913":{"id":"0:3913","crate_id":0,"name":null,"span":{"filename":"src/builder/arg_group.rs","begin":[80,9],"end":[80,16]},"visibility":{"restricted":{"parent":"0:597:2251","path":"::builder::arg_group"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:3254:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3904:1662","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":["0:3915:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:2869":{"id":"0:2869","crate_id":0,"name":null,"span":{"filename":"src/mkeymap.rs","begin":[47,0],"end":[54,1]},"visibility":{"restricted":{"parent":"0:2842:1714","path":"::mkeymap"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2920:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"KeyType","id":"0:4973:6885","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2870:611"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:10820:10570":{"id":"2:10820:10570","crate_id":2,"name":"write_i16","span":null,"visibility":"default","docs":"Writes a single `i16` into this hasher.","links":{},"attrs":["#[stable(feature = \"hasher_write\", since = \"1.3.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"primitive","inner":"i16"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4376:6553":{"id":"0:4376:6553","crate_id":0,"name":"EmailAddress","span":{"filename":"src/builder/value_hint.rs","begin":[66,4],"end":[66,16]},"visibility":"default","docs":"Email address.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"2:3529:8792":{"id":"2:3529:8792","crate_id":2,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3531:361"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:2865-0:4410:2272":{"id":"b:2:2865-0:4410:2272","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EnumValueParser","id":"0:4410:2272","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"items":["2:2867:2792"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:482:4178":{"id":"0:482:4178","crate_id":0,"name":"get_long_and_visible_aliases","span":{"filename":"src/builder/arg.rs","begin":[4500,4],"end":[4509,5]},"visibility":"public","docs":"Get the long option name and its visible aliases, if any","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7898:240","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3213-0:4523:6999":{"id":"b:2:3213-0:4523:6999","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3183:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:4523:6999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3216:128","2:3217:1436"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:5077":{"id":"0:5077","crate_id":0,"name":null,"span":{"filename":"src/util/color.rs","begin":[2,9],"end":[2,14]},"visibility":{"restricted":{"parent":"0:3336:1575","path":"::util::color"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:5070:1667","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5078:667"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:9095:9975":{"id":"2:9095:9975","crate_id":2,"name":"array_chunks","span":null,"visibility":"default","docs":"Returns an iterator over `N` elements of the iterator at a time.\n\nThe chunks do not overlap. If `N` does not divide the length of the\niterator, then the last up to `N-1` elements will be omitted and can be\nretrieved from the [`.into_remainder()`][ArrayChunks::into_remainder]\nfunction of the iterator.\n\n# Panics\n\nPanics if `N` is 0.\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(iter_array_chunks)]\n\nlet mut iter = \"lorem\".chars().array_chunks();\nassert_eq!(iter.next(), Some(['l', 'o']));\nassert_eq!(iter.next(), Some(['r', 'e']));\nassert_eq!(iter.next(), None);\nassert_eq!(iter.into_remainder().unwrap().as_slice(), &['m']);\n```\n\n```\n#![feature(iter_array_chunks)]\n\nlet data = [1, 1, 2, -2, 6, 0, 3, 1];\n//          ^-----^  ^------^\nfor [x, y, z] in data.iter().array_chunks() {\n    assert_eq!(x + y + z, 4);\n}\n```","links":{"ArrayChunks::into_remainder":"2:5995:76703"},"attrs":["#[track_caller]","#[unstable(feature = \"iter_array_chunks\", reason = \"recently added\", issue =\n\"100450\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"ArrayChunks","id":"2:46879:9045","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"const":{"type":{"kind":"primitive","inner":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"N","kind":{"const":{"type":{"kind":"primitive","inner":"usize"},"default":null}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8895:851":{"id":"2:8895:851","crate_id":2,"name":"map","span":null,"visibility":"default","docs":"Takes a closure and creates an iterator which calls that closure on each\nelement.\n\n`map()` transforms one iterator into another, by means of its argument:\nsomething that implements [`FnMut`]. It produces a new iterator which\ncalls this closure on each element of the original iterator.\n\nIf you are good at thinking in types, you can think of `map()` like this:\nIf you have an iterator that gives you elements of some type `A`, and\nyou want an iterator of some other type `B`, you can use `map()`,\npassing a closure that takes an `A` and returns a `B`.\n\n`map()` is conceptually similar to a [`for`] loop. However, as `map()` is\nlazy, it is best used when you're already working with other iterators.\nIf you're doing some sort of looping for a side effect, it's considered\nmore idiomatic to use [`for`] than `map()`.\n\n[`for`]: ../../book/ch03-05-control-flow.html#looping-through-a-collection-with-for\n[`FnMut`]: crate::ops::FnMut\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\n\nlet mut iter = a.iter().map(|x| 2 * x);\n\nassert_eq!(iter.next(), Some(2));\nassert_eq!(iter.next(), Some(4));\nassert_eq!(iter.next(), Some(6));\nassert_eq!(iter.next(), None);\n```\n\nIf you're doing some sort of side effect, prefer [`for`] to `map()`:\n\n```\n# #![allow(unused_must_use)]\n// don't do this:\n(0..5).map(|x| println!(\"{x}\"));\n\n// it won't even execute, as it is lazy. Rust will warn you about this.\n\n// Instead, use for:\nfor x in 0..5 {\n    println!(\"{x}\");\n}\n```","links":{"crate::ops::FnMut":"2:3624:132"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Map","id":"2:47016:7474","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3624:132","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"output":{"kind":"generic","inner":"B"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2885:415":{"id":"2:2885:415","crate_id":2,"name":"clone","span":null,"visibility":"default","docs":"Returns a copy of the value.\n\n# Examples\n\n```\n# #![allow(noop_method_call)]\nlet hello = \"Hello\"; // &str implements Clone\n\nassert_eq!(\"Hello\", hello.clone());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[must_use =\n\"cloning is often expensive and is not expected to have side effects\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1444:688":{"id":"0:1444:688","crate_id":0,"name":"from","span":{"filename":"src/builder/value_parser.rs","begin":[1093,4],"end":[1095,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["values",{"kind":"generic","inner":"I"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1323:688":{"id":"0:1323:688","crate_id":0,"name":"from","span":{"filename":"src/builder/value_parser.rs","begin":[289,4],"end":[291,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["p",{"kind":"generic","inner":"P"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3460:8779":{"id":"2:3460:8779","crate_id":2,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3462:184","2:3463:1114"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:4640:667":{"id":"0:4640:667","crate_id":0,"name":"fmt","span":{"filename":"src/error/kind.rs","begin":[2,9],"end":[2,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10511:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4414:21313":{"id":"1:4414:21313","crate_id":1,"name":"is_read_vectored","span":null,"visibility":"default","docs":"Determines if this `Read`er has an efficient `read_vectored`\nimplementation.\n\nIf a `Read`er does not override the default `read_vectored`\nimplementation, code using it may want to avoid the method all together\nand coalesce writes into a single buffer for higher performance.\n\nThe default implementation returns `false`.","links":{},"attrs":["#[unstable(feature = \"can_vector\", issue = \"69941\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4360:6529":{"id":"0:4360:6529","crate_id":0,"name":"DirPath","span":{"filename":"src/builder/value_hint.rs","begin":[40,4],"end":[40,11]},"visibility":"default","docs":"Path to a directory.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"b:2:3207-0:4647:128":{"id":"b:2:3207-0:4647:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4647:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3209:688"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:3382:225-0:4707:2393":{"id":"a:2:3382:225-0:4707:2393","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AnyValueId","id":"0:4707:2393","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1008:5950":{"id":"0:1008:5950","crate_id":0,"name":"is_allow_negative_numbers_set","span":{"filename":"src/builder/command.rs","begin":[3742,4],"end":[3744,5]},"visibility":"public","docs":"Report whether [`Command::allow_negative_numbers`] is set","links":{"`Command::allow_negative_numbers`":"0:880:5437"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:32245:69496":{"id":"2:32245:69496","crate_id":2,"name":"max_value","span":null,"visibility":"public","docs":"New code should prefer to use\n[`u64::MAX`] instead.\n\nReturns the largest value that can be represented by this integer type.","links":{"`u64::MAX`":"2:32147:6773"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_promotable]","#[rustc_const_stable(feature = \"const_max_value\", since = \"1.32.0\")]","#[deprecated(since = \"TBD\", note =\n\"replaced by the `MAX` associated constant on this type\")]"],"deprecation":{"since":"TBD","note":"replaced by the `MAX` associated constant on this type"},"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1930:688":{"id":"0:1930:688","crate_id":0,"name":"from","span":{"filename":"src/error/mod.rs","begin":[989,4],"end":[991,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["e",{"kind":"resolved_path","inner":{"name":"io::Error","id":"1:3803:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"23:24:9116":{"id":"23:24:9116","crate_id":23,"name":"equivalent","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.1/src/equivalent.rs","begin":[15,4],"end":[15,42]},"visibility":"default","docs":"Compare self to `key` and return `true` if they are equal.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["key",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"K"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1425":{"id":"0:1425","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[984,0],"end":[988,1]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"crate::ValueEnum","id":"0:174:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:3254:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EnumValueParser","id":"0:4410:2272","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"items":["0:1427:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:8932:9962":{"id":"2:8932:9962","crate_id":2,"name":"by_ref","span":null,"visibility":"default","docs":"Borrows an iterator, rather than consuming it.\n\nThis is useful to allow applying iterator adapters while still\nretaining ownership of the original iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut words = [\"hello\", \"world\", \"of\", \"Rust\"].into_iter();\n\n// Take the first two words.\nlet hello_world: Vec<_> = words.by_ref().take(2).collect();\nassert_eq!(hello_world, vec![\"hello\", \"world\"]);\n\n// Collect the rest of the words.\n// We can only do this because we used `by_ref` earlier.\nlet of_rust: Vec<_> = words.collect();\nassert_eq!(of_rust, vec![\"of\", \"Rust\"]);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23774:21813":{"id":"2:23774:21813","crate_id":2,"name":"simd_min","span":null,"visibility":"default","docs":"Returns the lane-wise minimum with `other`.","links":{},"attrs":["#[must_use =\n\"method returns a new vector and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:23145:1244":{"id":"2:23145:1244","crate_id":2,"name":"saturating_sub","span":null,"visibility":"default","docs":"Lanewise saturating subtract.\n\n# Examples\n```\n# #![feature(portable_simd)]\n# #[cfg(feature = \"as_crate\")] use core_simd::simd;\n# #[cfg(not(feature = \"as_crate\"))] use core::simd;\n# use simd::{Simd, SimdUint};\nuse core::u32::MAX;\nlet x = Simd::from_array([2, 1, 0, MAX]);\nlet max = Simd::splat(MAX);\nlet unsat = x - max;\nlet sat = x.saturating_sub(max);\nassert_eq!(unsat, Simd::from_array([3, 2, 1, 0]));\nassert_eq!(sat, Simd::splat(0));","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["second",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:3489":{"id":"0:3489","crate_id":0,"name":null,"span":{"filename":"src/builder/app_settings.rs","begin":[32,16],"end":[32,25]},"visibility":{"restricted":{"parent":"0:227:2250","path":"::builder::app_settings"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2920:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:3389:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:3389:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3490:611"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:344:2030":{"id":"0:344:2030","crate_id":0,"name":"is_set","span":{"filename":"src/builder/arg.rs","begin":[849,4],"end":[851,5]},"visibility":"public","docs":"Check if the [`ArgSettings`] variant is currently set on the argument.\n\n[`ArgSettings`]: crate::ArgSettings","links":{"crate::ArgSettings":"0:3968:1678"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["s",{"kind":"resolved_path","inner":{"name":"ArgSettings","id":"0:3968:1678","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10578:667":{"id":"2:10578:667","crate_id":2,"name":"fmt","span":null,"visibility":"default","docs":"Formats the value using the given formatter.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Formatter","id":"2:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"2:48872:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:8907:4166":{"id":"2:8907:4166","crate_id":2,"name":"filter_map","span":null,"visibility":"default","docs":"Creates an iterator that both filters and maps.\n\nThe returned iterator yields only the `value`s for which the supplied\nclosure returns `Some(value)`.\n\n`filter_map` can be used to make chains of [`filter`] and [`map`] more\nconcise. The example below shows how a `map().filter().map()` can be\nshortened to a single call to `filter_map`.\n\n[`filter`]: Iterator::filter\n[`map`]: Iterator::map\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [\"1\", \"two\", \"NaN\", \"four\", \"5\"];\n\nlet mut iter = a.iter().filter_map(|s| s.parse().ok());\n\nassert_eq!(iter.next(), Some(1));\nassert_eq!(iter.next(), Some(5));\nassert_eq!(iter.next(), None);\n```\n\nHere's the same example, but with [`filter`] and [`map`]:\n\n```\nlet a = [\"1\", \"two\", \"NaN\", \"four\", \"5\"];\nlet mut iter = a.iter().map(|s| s.parse()).filter(|s| s.is_ok()).map(|s| s.unwrap());\nassert_eq!(iter.next(), Some(1));\nassert_eq!(iter.next(), Some(5));\nassert_eq!(iter.next(), None);\n```","links":{"Iterator::map":"2:8895:851","Iterator::filter":"2:8905:5854"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"FilterMap","id":"2:46964:9056","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3624:132","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4621:7089":{"id":"0:4621:7089","crate_id":0,"name":"MissingSubcommand","span":{"filename":"src/error/kind.rs","begin":[271,4],"end":[271,21]},"visibility":"default","docs":"Occurs when a subcommand is required (as defined by [`Command::subcommand_required`]),\nbut the user does not provide one.\n\n# Examples\n\n```rust\n# use clap::{Command, ErrorKind};\nlet err = Command::new(\"prog\")\n    .subcommand_required(true)\n    .subcommand(Command::new(\"test\"))\n    .try_get_matches_from(vec![\n        \"myprog\",\n    ]);\nassert!(err.is_err());\nassert_eq!(err.unwrap_err().kind(), ErrorKind::MissingSubcommand);\n# ;\n```\n\n[`Command::subcommand_required`]: crate::Command::subcommand_required","links":{"crate::Command::subcommand_required":"0:906:5633"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"0:404":{"id":"0:404","crate_id":0,"name":null,"span":{"filename":"src/builder/arg.rs","begin":[2622,0],"end":[3176,1]},"visibility":{"restricted":{"parent":"0:242:1932","path":"::builder::arg"}},"docs":"# Help","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3818:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":["0:406:1955","0:408:2818","0:410:3756","0:411:2845","0:413:3781","0:414:3786","0:415:3796","0:416:3805","0:417:3833","0:418:3839"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:834":{"id":"0:834","crate_id":0,"name":null,"span":{"filename":"src/builder/command.rs","begin":[1390,0],"end":[2281,1]},"visibility":{"restricted":{"parent":"0:649:1913","path":"::builder::command"}},"docs":"# Command-specific Settings\n\nThese apply only to the current command and are not inherited by subcommands.","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:4241:1674","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":["0:836:909","0:838:4783","0:840:4782","0:842:1915","0:844:1917","0:846:4785","0:848:4788","0:850:4789","0:852:4786","0:854:4787","0:856:1526","0:858:4784","0:860:5263","0:862:5282","0:864:5314","0:866:2010","0:868:3032","0:870:5054","0:871:5055","0:872:2845","0:874:5334","0:876:5344","0:878:5415","0:879:3410","0:880:5437","0:881:5447","0:882:5492"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:3370:216-0:4707:2393":{"id":"a:2:3370:216-0:4707:2393","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AnyValueId","id":"0:4707:2393","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:13828:2102":{"id":"2:13828:2102","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:13276:127","`FromStr`":"2:13275:1861"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:13275:1861","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:13275:1861","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2865-0:4420:2260":{"id":"b:2:2865-0:4420:2260","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValuesParser","id":"0:4420:2260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2867:2792"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:2077:611":{"id":"0:2077:611","crate_id":0,"name":"eq","span":{"filename":"src/parser/matches/any_value.rs","begin":[59,4],"end":[61,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3411:6205-0:4457:2273":{"id":"a:2:3411:6205-0:4457:2273","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:3411:6205","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FalseyValueParser","id":"0:4457:2273","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:6506:1415":{"id":"5:6506:1415","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":"Converts the given value to a `String`.\n\n# Examples\n\nBasic usage:\n\n```\nlet i = 5;\nlet five = String::from(\"5\");\n\nassert_eq!(five, i.to_string());\n```","links":{},"attrs":["#[rustc_conversion_suggestion]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8479:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:2241:7603":{"id":"0:2241:7603","crate_id":0,"name":"try_contains_id","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1315,4],"end":[1322,5]},"visibility":"public","docs":"Non-panicking version of [`ArgMatches::contains_id`]","links":{"`ArgMatches::contains_id`":"0:2172:7602"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"bool"}},{"type":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4693:7387","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4415:21314":{"id":"1:4415:21314","crate_id":1,"name":"read_to_end","span":null,"visibility":"default","docs":"Read all bytes until EOF in this source, placing them into `buf`.\n\nAll bytes read from this source will be appended to the specified buffer\n`buf`. This function will continuously call [`read()`] to append more data to\n`buf` until [`read()`] returns either [`Ok(0)`] or an error of\nnon-[`ErrorKind::Interrupted`] kind.\n\nIf successful, this function will return the total number of bytes read.\n\n# Errors\n\nIf this function encounters an error of the kind\n[`ErrorKind::Interrupted`] then the error is ignored and the operation\nwill continue.\n\nIf any other read error is encountered then this function immediately\nreturns. Any bytes which have already been read will be appended to\n`buf`.\n\n# Examples\n\n[`File`]s implement `Read`:\n\n[`read()`]: Read::read\n[`Ok(0)`]: Ok\n[`File`]: crate::fs::File\n\n```no_run\nuse std::io;\nuse std::io::prelude::*;\nuse std::fs::File;\n\nfn main() -> io::Result<()> {\n    let mut f = File::open(\"foo.txt\")?;\n    let mut buffer = Vec::new();\n\n    // read the whole file\n    f.read_to_end(&mut buffer)?;\n    Ok(())\n}\n```\n\n(See also the [`std::fs::read`] convenience function for reading from a\nfile.)\n\n[`std::fs::read`]: crate::fs::read","links":{"Ok":"2:47937:178","crate::fs::File":"1:2909:129","Read::read":"1:4411:11149","`ErrorKind::Interrupted`":"1:10863:14188","crate::fs::read":"1:2914:11149"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7898:240","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8224:3098","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"1:3803:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13830:11658":{"id":"2:13830:11658","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8199:27619":{"id":"2:8199:27619","crate_id":2,"name":"forward","span":null,"visibility":"default","docs":"Returns the value that would be obtained by taking the *successor*\nof `self` `count` times.\n\nIf this would overflow the range of values supported by `Self`,\nthis function is allowed to panic, wrap, or saturate.\nThe suggested behavior is to panic when debug assertions are enabled,\nand to wrap or saturate otherwise.\n\nUnsafe code should not rely on the correctness of behavior after overflow.\n\n# Invariants\n\nFor any `a`, `n`, and `m`, where no overflow occurs:\n\n* `Step::forward(Step::forward(a, n), m) == Step::forward(a, n + m)`\n\nFor any `a` and `n`, where no overflow occurs:\n\n* `Step::forward_checked(a, n) == Some(Step::forward(a, n))`\n* `Step::forward(a, n) == (0..n).fold(a, |x, _| Step::forward(x, 1))`\n  * Corollary: `Step::forward(a, 0) == a`\n* `Step::forward(a, n) >= a`\n* `Step::backward(Step::forward(a, n), n) == a`","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["start",{"kind":"generic","inner":"Self"}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4810":{"id":"0:4810","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1800,9],"end":[1800,14]},"visibility":{"restricted":{"parent":"0:2092:7461","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:4806:1682","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:4812:415"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:32166:69435":{"id":"2:32166:69435","crate_id":2,"name":"checked_add_signed","span":null,"visibility":"public","docs":"Checked addition with a signed integer. Computes `self + rhs`,\nreturning `None` if overflow occurred.\n\n# Examples\n\nBasic usage:\n\n```\n# #![feature(mixed_integer_ops)]\nassert_eq!(1u64.checked_add_signed(2), Some(3));\nassert_eq!(1u64.checked_add_signed(-2), None);\nassert_eq!((u64::MAX - 2).checked_add_signed(3), None);\n```","links":{},"attrs":["#[unstable(feature = \"mixed_integer_ops\", issue = \"87840\")]","#[rustc_const_unstable(feature = \"mixed_integer_ops\", issue = \"87840\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"i64"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4611:7101":{"id":"0:4611:7101","crate_id":0,"name":"TooFewValues","span":{"filename":"src/error/kind.rs","begin":[176,4],"end":[176,16]},"visibility":"default","docs":"Occurs when the user provides fewer values for an argument than were defined by setting\n[`Arg::min_values`].\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet result = Command::new(\"prog\")\n    .arg(Arg::new(\"some_opt\")\n        .long(\"opt\")\n        .min_values(3))\n    .try_get_matches_from(vec![\"prog\", \"--opt\", \"too\", \"few\"]);\nassert!(result.is_err());\nassert_eq!(result.unwrap_err().kind(), ErrorKind::TooFewValues);\n```\n[`Arg::min_values`]: crate::Arg::min_values()","links":{"crate::Arg::min_values()":"0:358:1952"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"b:2:3213-0:4410:2272":{"id":"b:2:3213-0:4410:2272","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3183:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EnumValueParser","id":"0:4410:2272","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"items":["2:3216:128","2:3217:1436"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:2202:7662":{"id":"0:2202:7662","crate_id":0,"name":"is_present","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[678,4],"end":[685,5]},"visibility":"public","docs":"Deprecated, replaced with [`ArgAction::SetTrue`][crate::ArgAction] or\n[`ArgMatches::contains_id`].\n\nWith `ArgAction::SetTrue` becoming the new flag default in clap v4, flags will always be present.\nTo make the migration easier, we've renamed this function so people can identify when they actually\ncare about an arg being present or if they need to update to the new way to check a flag's\npresence.\n\nFor flags, call `arg.action(ArgAction::SetTrue)` and lookup the value with `matches.get_flag(...)`\n\nFor presence, replace `matches.is_present(...)` with `matches.contains_id(...)`","links":{"`ArgMatches::contains_id`":"0:2172:7602","crate::ArgAction":"0:3351:1659"},"attrs":["#[track_caller]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"generic","inner":"T"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Key","id":"0:3239:2795","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:906:5633":{"id":"0:906:5633","crate_id":0,"name":"subcommand_required","span":{"filename":"src/builder/command.rs","begin":[2786,4],"end":[2792,5]},"visibility":"public","docs":"If no [`subcommand`] is present at runtime, error and exit gracefully.\n\n# Examples\n\n```rust\n# use clap::{Command, ErrorKind};\nlet err = Command::new(\"myprog\")\n    .subcommand_required(true)\n    .subcommand(Command::new(\"test\"))\n    .try_get_matches_from(vec![\n        \"myprog\",\n    ]);\nassert!(err.is_err());\nassert_eq!(err.unwrap_err().kind(), ErrorKind::MissingSubcommand);\n# ;\n```\n\n[`subcommand`]: crate::Command::subcommand()","links":{"crate::Command::subcommand()":"0:782:2012"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3370:216-0:4523:6999":{"id":"a:2:3370:216-0:4523:6999","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:4523:6999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:500:4227":{"id":"0:500:4227","crate_id":0,"name":"is_forbid_empty_values_set","span":{"filename":"src/builder/arg.rs","begin":[4674,4],"end":[4676,5]},"visibility":"public","docs":"Deprecated, replaced with [`Arg::get_value_parser()`]","links":{"`Arg::get_value_parser()`":"0:504:4186"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8741:7849":{"id":"2:8741:7849","crate_id":2,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8742:802","2:8743:1916"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:23119:21818":{"id":"2:23119:21818","crate_id":2,"name":"reduce_max","span":null,"visibility":"default","docs":"Returns the maximum lane in the vector.\n\n# Examples\n\n```\n# #![feature(portable_simd)]\n# #[cfg(feature = \"as_crate\")] use core_simd::simd;\n# #[cfg(not(feature = \"as_crate\"))] use core::simd;\n# use simd::{i32x4, SimdInt};\nlet v = i32x4::from_array([1, 2, 3, 4]);\nassert_eq!(v.reduce_max(), 4);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Scalar","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdInt","id":"2:23106:11397","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:5086":{"id":"0:5086","crate_id":0,"name":null,"span":{"filename":"src/util/color.rs","begin":[2,33],"end":[2,42]},"visibility":{"restricted":{"parent":"0:3336:1575","path":"::util::color"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2920:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:5070:1667","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:5070:1667","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5087:611"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4694:7450":{"id":"0:4694:7450","crate_id":0,"name":"Downcast","span":{"filename":"src/parser/error.rs","begin":[10,4],"end":[15,5]},"visibility":"default","docs":"Failed to downcast `AnyValue` to the specified type","links":{},"attrs":["#[non_exhaustive]"],"deprecation":null,"kind":"variant","inner":{"variant_kind":"struct","variant_inner":{"fields":["0:4695:7452","0:4696:623"],"fields_stripped":false}}},"2:32172:69439":{"id":"2:32172:69439","crate_id":2,"name":"checked_div_euclid","span":null,"visibility":"public","docs":"Checked Euclidean division. Computes `self.div_euclid(rhs)`, returning `None`\nif `rhs == 0`.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(128u64.checked_div_euclid(2), Some(64));\nassert_eq!(1u64.checked_div_euclid(0), None);\n```","links":{},"attrs":["#[stable(feature = \"euclidean_division\", since = \"1.38.0\")]","#[rustc_const_stable(feature = \"const_euclidean_int_methods\", since =\n\"1.52.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1239":{"id":"0:1239","crate_id":0,"name":null,"span":{"filename":"src/builder/possible_value.rs","begin":[255,0],"end":[259,1]},"visibility":{"restricted":{"parent":"0:1203:2254","path":"::builder::possible_value"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:4294:1679","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":["0:1241:688"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1596:2257":{"id":"0:1596:2257","crate_id":0,"name":"value_parser","span":{"filename":"src/builder/value_parser.rs","begin":[2001,4],"end":[2003,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"qualified_path","inner":{"name":"Parser","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:1558:2266","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23767:11343":{"id":"2:23767:11343","crate_id":2,"name":"SimdPartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23768:1288","2:23769:1287","2:23770:1285","2:23771:1284"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdPartialEq","id":"2:23179:11402","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6220:28877":{"id":"1:6220:28877","crate_id":1,"name":"exec","span":null,"visibility":"default","docs":"Performs all the required setup by this `Command`, followed by calling\nthe `execvp` syscall.\n\nOn success this function will not return, and otherwise it will return\nan error indicating why the exec (or another part of the setup of the\n`Command`) failed.\n\n`exec` not returning has the same implications as calling\n[`process::exit`] – no destructors on the current stack or any other\nthread’s stack will be run. Therefore, it is recommended to only call\n`exec` at a point where it is fine to not run any destructors. Note,\nthat the `execvp` syscall independently guarantees that all memory is\nfreed and all file descriptors with the `CLOEXEC` option (set by default\non all file descriptors opened by the standard library) are closed.\n\nThis function, unlike `spawn`, will **not** `fork` the process to create\na new child. Like spawn, however, the default behavior for the stdio\ndescriptors will be to inherited from the current process.\n\n# Notes\n\nThe process may be in a \"broken state\" if this function returns in\nerror. For example the working directory, environment variables, signal\nhandling settings, various user/group information, or aspects of stdio\nfile descriptors may have changed. If a \"transactional spawn\" is\nrequired to gracefully handle errors it is recommended to use the\ncross-platform `spawn` instead.","links":{"`process::exit`":"1:7592:2109"},"attrs":["#[stable(feature = \"process_exec2\", since = \"1.9.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Error","id":"1:3803:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1013:5959":{"id":"0:1013:5959","crate_id":0,"name":"is_allow_external_subcommands_set","span":{"filename":"src/builder/command.rs","begin":[3767,4],"end":[3769,5]},"visibility":"public","docs":"Report whether [`Command::allow_external_subcommands`] is set","links":{"`Command::allow_external_subcommands`":"0:907:5655"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9533:7458-0:3818:1661":{"id":"a:2:9533:7458-0:3818:1661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:9533:7458","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3818:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"0:1877:488":{"id":"0:1877:488","crate_id":0,"name":"context","span":{"filename":"src/error/mod.rs","begin":[98,4],"end":[100,5]},"visibility":"public","docs":"Additional information to further qualify the error","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"tuple","inner":[{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:4523:6999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ContextValue","id":"0:4569:7000","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]}}}}]}}},"generic_params":[],"modifier":"none"}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3468:923":{"id":"2:3468:923","crate_id":2,"name":"neg","span":null,"visibility":"default","docs":"Performs the unary `-` operation.\n\n# Example\n\n```\nlet x: i32 = 12;\nassert_eq!(-x, -12);\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Neg","id":"2:3466:8778","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:4599:7081":{"id":"0:4599:7081","crate_id":0,"name":"InvalidSubcommand","span":{"filename":"src/error/kind.rs","begin":[57,4],"end":[57,21]},"visibility":"default","docs":"Occurs when the user provides an unrecognized [`Subcommand`] which meets the threshold for\nbeing similar enough to an existing subcommand.\nIf it doesn't meet the threshold, or the 'suggestions' feature is disabled,\nthe more general [`UnknownArgument`] error is returned.\n\n# Examples\n\n ```\n# use clap::{Command, Arg, ErrorKind, };\nlet result = Command::new(\"prog\")\n    .subcommand(Command::new(\"config\")\n        .about(\"Used for configuration\")\n        .arg(Arg::new(\"config_file\")\n            .help(\"The configuration file to use\")))\n    .try_get_matches_from(vec![\"prog\", \"confi\"]);\nassert!(result.is_err());\nassert_eq!(result.unwrap_err().kind(), ErrorKind::InvalidSubcommand);\n```\n\n[`Subcommand`]: crate::Subcommand\n[`UnknownArgument`]: ErrorKind::UnknownArgument","links":{"ErrorKind::UnknownArgument":"0:4597:7110","crate::Subcommand":"0:170:1672"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"b:2:3203-0:3389:1676":{"id":"b:2:3203-0:3389:1676","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:3389:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3206:2391"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4729":{"id":"0:4729","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[67,43],"end":[67,45]},"visibility":{"restricted":{"parent":"0:2092:7461","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2925:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4713:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1277:59":{"id":"0:1277:59","crate_id":0,"name":"default","span":{"filename":"src/builder/value_hint.rs","begin":[70,4],"end":[72,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:9141:21760":{"id":"1:9141:21760","crate_id":1,"name":"round","span":null,"visibility":"default","docs":"Rounds to the nearest integer value. Ties round toward zero.","links":{},"attrs":["#[must_use =\n\"method returns a new vector and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:383:3410":{"id":"0:383:3410","crate_id":0,"name":"allow_hyphen_values","span":{"filename":"src/builder/arg.rs","begin":[1801,4],"end":[1807,5]},"visibility":"public","docs":"Allows values which start with a leading hyphen (`-`)\n\n**NOTE:** Setting this requires [`Arg::takes_value`]\n\n**WARNING**: Take caution when using this setting combined with\n[`Arg::multiple_values`], as this becomes ambiguous `$ prog --arg -- -- val`. All\nthree `--, --, val` will be values when the user may have thought the second `--` would\nconstitute the normal, \"Only positional args follow\" idiom. To fix this, consider using\n[`Arg::multiple_occurrences`] which only allows a single value at a time.\n\n**WARNING**: When building your CLIs, consider the effects of allowing leading hyphens and\nthe user passing in a value that matches a valid short. For example, `prog -opt -F` where\n`-F` is supposed to be a value, yet `-F` is *also* a valid short for another arg.\nCare should be taken when designing these args. This is compounded by the ability to \"stack\"\nshort args. I.e. if `-val` is supposed to be a value, but `-v`, `-a`, and `-l` are all valid\nshorts.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"pat\")\n        .takes_value(true)\n        .allow_hyphen_values(true)\n        .long(\"pattern\"))\n    .get_matches_from(vec![\n        \"prog\", \"--pattern\", \"-file\"\n    ]);\n\nassert_eq!(m.value_of(\"pat\"), Some(\"-file\"));\n```\n\nNot setting `Arg::allow_hyphen_values(true)` and supplying a value which starts with a\nhyphen is an error.\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"pat\")\n        .takes_value(true)\n        .long(\"pattern\"))\n    .try_get_matches_from(vec![\n        \"prog\", \"--pattern\", \"-file\"\n    ]);\n\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind(), ErrorKind::UnknownArgument);\n```\n[`Arg::number_of_values(1)`]: Arg::number_of_values()","links":{"`Arg::multiple_occurrences`":"0:342:1954","`Arg::takes_value`":"0:351:1949","`Arg::multiple_values`":"0:355:3240"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3207-0:4755:7386":{"id":"b:2:3207-0:4755:7386","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValuesRef","id":"0:4755:7386","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:3209:688"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:9143:21762":{"id":"1:9143:21762","crate_id":1,"name":"fract","span":null,"visibility":"default","docs":"Returns the floating point's fractional value, with its integer part removed.","links":{},"attrs":["#[must_use =\n\"method returns a new vector and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:4400":{"id":"0:4400","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[766,15],"end":[766,20]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsStringValueParser","id":"0:4398:2275","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4401:415"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3926":{"id":"0:3926","crate_id":0,"name":null,"span":{"filename":"src/builder/arg_group.rs","begin":[80,36],"end":[80,38]},"visibility":{"restricted":{"parent":"0:597:2251","path":"::builder::arg_group"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2925:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3904:1662","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:8995:301":{"id":"2:8995:301","crate_id":2,"name":"any","span":null,"visibility":"default","docs":"Tests if any element of the iterator matches a predicate.\n\n`any()` takes a closure that returns `true` or `false`. It applies\nthis closure to each element of the iterator, and if any of them return\n`true`, then so does `any()`. If they all return `false`, it\nreturns `false`.\n\n`any()` is short-circuiting; in other words, it will stop processing\nas soon as it finds a `true`, given that no matter what else happens,\nthe result will also be `true`.\n\nAn empty iterator returns `false`.\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\n\nassert!(a.iter().any(|&x| x > 0));\n\nassert!(!a.iter().any(|&x| x > 5));\n```\n\nStopping at the first `true`:\n\n```\nlet a = [1, 2, 3];\n\nlet mut iter = a.iter();\n\nassert!(iter.any(|&x| x != 2));\n\n// we can still use `iter`, as there are more elements.\nassert_eq!(iter.next(), Some(&2));\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3624:132","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3203-0:4693:7387":{"id":"b:2:3203-0:4693:7387","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4693:7387","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3206:2391"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11216:761":{"id":"2:11216:761","crate_id":2,"name":"index","span":null,"visibility":"default","docs":"Returns a shared reference to the output at this location, panicking\nif out of bounds.","links":{},"attrs":["#[unstable(feature = \"slice_index_methods\", issue = \"none\")]","#[track_caller]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["slice",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SliceIndex","id":"2:11209:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:6466:15076":{"id":"1:6466:15076","crate_id":1,"name":"st_uid","span":null,"visibility":"default","docs":"Returns the user ID of the file owner.\n\n# Examples\n\n```no_run\nuse std::fs;\nuse std::io;\nuse std::os::linux::fs::MetadataExt;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    println!(\"{}\", meta.st_uid());\n    Ok(())\n}\n```","links":{},"attrs":["#[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1527":{"id":"0:1527","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1710,0],"end":[1740,1]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["map","parse","possible_values"],"trait":{"name":"TypedValueParser","id":"0:1362:2264","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BoolishValueParser","id":"0:4463:2271","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1528:6597","0:1529:6637","0:1534:3370"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4467":{"id":"0:4467","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1691,22],"end":[1691,27]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BoolishValueParser","id":"0:4463:2271","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4468:667"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1523:930":{"id":"0:1523:930","crate_id":0,"name":"new","span":{"filename":"src/builder/value_parser.rs","begin":[1697,4],"end":[1699,5]},"visibility":"public","docs":"Parse bool-like string values, everything else is `true`","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2168:7585":{"id":"0:2168:7585","crate_id":0,"name":"remove_one","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[309,4],"end":[312,5]},"visibility":"public","docs":"Returns the value of a specific option or positional argument.\n\ni.e. an argument that [takes an additional value][crate::Arg::takes_value] at runtime.\n\nReturns an error if the wrong type was used.  No item will have been removed.\n\nReturns `None` if the option wasn't present.\n\n*NOTE:* This will always return `Some(value)` if [`default_value`] has been set.\n[`ArgMatches::value_source`] can be used to check if a value is present at runtime.\n\n# Panic\n\nIf the argument definition and access mismatch.  To handle this case programmatically, see\n[`ArgMatches::try_remove_one`].\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, value_parser};\nlet mut m = Command::new(\"myprog\")\n    .arg(Arg::new(\"file\")\n        .required(true)\n        .takes_value(true))\n    .get_matches_from(vec![\n        \"myprog\", \"file.txt\",\n    ]);\nlet vals: String = m.remove_one(\"file\")\n    .expect(\"`file`is required\");\nassert_eq!(vals, \"file.txt\");\n```\n[option]: crate::Arg::takes_value()\n[positional]: crate::Arg::index()\n[`default_value`]: crate::Arg::default_value()","links":{"`ArgMatches::try_remove_one`":"0:2235:7586","crate::Arg::takes_value":"0:351:1949","crate::Arg::default_value()":"0:394:2389","`ArgMatches::value_source`":"0:2204:7462"},"attrs":["#[track_caller]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Any","id":"2:4102:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5524:28822":{"id":"1:5524:28822","crate_id":1,"name":"ino","span":null,"visibility":"default","docs":"Returns the inode number.\n\n# Examples\n\n```no_run\nuse std::fs;\nuse std::os::unix::fs::MetadataExt;\nuse std::io;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    let inode = meta.ino();\n    Ok(())\n}\n```","links":{},"attrs":["#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:2314:59":{"id":"0:2314:59","crate_id":0,"name":"default","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1686,4],"end":[1692,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3985:3459":{"id":"0:3985:3459","crate_id":0,"name":"UseValueDelimiter","span":{"filename":"src/builder/arg_settings.rs","begin":[193,4],"end":[193,21]},"visibility":"default","docs":"Deprecated, replaced with [`Arg::use_value_delimiter`] and\n[`Arg::is_use_value_delimiter_set`]\n\nDerive: replace `#[clap(setting = UseValueDelimiter)]` with `#[clap(use_value_delimiter = true)]`\n\nBuilder: replace `arg.setting(UseValueDelimiter)` with `arg.use_value_delimiter(true)`","links":{"`Arg::use_value_delimiter`":"0:387:3457","`Arg::is_use_value_delimiter_set`":"0:514:4259"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"a:2:3382:225-0:4457:2273":{"id":"a:2:3382:225-0:4457:2273","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FalseyValueParser","id":"0:4457:2273","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:14078:151":{"id":"2:14078:151","crate_id":2,"name":"IntoFuture","span":null,"visibility":"default","docs":"Which kind of future are we turning this into?","links":{},"attrs":["#[stable(feature = \"into_future\", since = \"1.64.0\")]"],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[{"eq_predicate":{"lhs":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"qualified_path","inner":{"name":"IntoFuture","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"IntoFuture","id":"2:14076:151","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"trait":{"name":"Future","id":"2:14061:139","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"rhs":{"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"IntoFuture","id":"2:14076:151","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}]},"bounds":[{"trait_bound":{"trait":{"name":"Future","id":"2:14061:139","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null}},"0:805:4994":{"id":"0:805:4994","crate_id":0,"name":"print_help","span":{"filename":"src/builder/command.rs","begin":[745,4],"end":[753,5]},"visibility":"public","docs":"Prints the short help message (`-h`) to [`io::stdout()`].\n\nSee also [`Command::print_long_help`].\n\n# Examples\n\n```rust\n# use clap::Command;\nlet mut cmd = Command::new(\"myprog\");\ncmd.print_help();\n```\n[`io::stdout()`]: std::io::stdout()","links":{"std::io::stdout()":"1:4223:8561","`Command::print_long_help`":"0:806:5007"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3801:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3185:128":{"id":"2:3185:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":"The type returned in the event of a conversion error.","links":{},"attrs":["#[stable(feature = \"try_from\", since = \"1.34.0\")]"],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"2:32212:69470":{"id":"2:32212:69470","crate_id":2,"name":"overflowing_div","span":null,"visibility":"public","docs":"Calculates the divisor when `self` is divided by `rhs`.\n\nReturns a tuple of the divisor along with a boolean indicating\nwhether an arithmetic overflow would occur. Note that for unsigned\nintegers overflow never occurs, so the second value is always\n`false`.\n\n# Panics\n\nThis function will panic if `rhs` is 0.\n\n# Examples\n\nBasic usage\n\n```\nassert_eq!(5u64.overflowing_div(2), (2, false));\n```","links":{},"attrs":["#[stable(feature = \"wrapping\", since = \"1.7.0\")]","#[rustc_const_stable(feature = \"const_overflowing_int_methods\", since =\n\"1.52.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"u64"},{"kind":"primitive","inner":"bool"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:4104-0:4755:7386":{"id":"b:2:4104-0:4755:7386","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:4102:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValuesRef","id":"0:4755:7386","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:4106:1449"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11217:762":{"id":"2:11217:762","crate_id":2,"name":"index_mut","span":null,"visibility":"default","docs":"Returns a mutable reference to the output at this location, panicking\nif out of bounds.","links":{},"attrs":["#[unstable(feature = \"slice_index_methods\", issue = \"none\")]","#[track_caller]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["slice",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SliceIndex","id":"2:11209:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:4498:7036":{"id":"1:4498:7036","crate_id":1,"name":"read_line","span":null,"visibility":"default","docs":"Read all bytes until a newline (the `0xA` byte) is reached, and append\nthem to the provided buffer. You do not need to clear the buffer before\nappending.\n\nThis function will read bytes from the underlying stream until the\nnewline delimiter (the `0xA` byte) or EOF is found. Once found, all bytes\nup to, and including, the delimiter (if found) will be appended to\n`buf`.\n\nIf successful, this function will return the total number of bytes read.\n\nIf this function returns [`Ok(0)`], the stream has reached EOF.\n\nThis function is blocking and should be used carefully: it is possible for\nan attacker to continuously send bytes without ever sending a newline\nor EOF.\n\n[`Ok(0)`]: Ok\n\n# Errors\n\nThis function has the same error semantics as [`read_until`] and will\nalso return an error if the read bytes are not valid UTF-8. If an I/O\nerror is encountered then `buf` may contain some bytes already read in\nthe event that all data read so far was valid UTF-8.\n\n[`read_until`]: BufRead::read_until\n\n# Examples\n\n[`std::io::Cursor`][`Cursor`] is a type that implements `BufRead`. In\nthis example, we use [`Cursor`] to read all the lines in a byte slice:\n\n```\nuse std::io::{self, BufRead};\n\nlet mut cursor = io::Cursor::new(b\"foo\\nbar\");\nlet mut buf = String::new();\n\n// cursor is at 'f'\nlet num_bytes = cursor.read_line(&mut buf)\n    .expect(\"reading from cursor won't fail\");\nassert_eq!(num_bytes, 4);\nassert_eq!(buf, \"foo\\n\");\nbuf.clear();\n\n// cursor is at 'b'\nlet num_bytes = cursor.read_line(&mut buf)\n    .expect(\"reading from cursor won't fail\");\nassert_eq!(num_bytes, 3);\nassert_eq!(buf, \"bar\");\nbuf.clear();\n\n// cursor is at EOF\nlet num_bytes = cursor.read_line(&mut buf)\n    .expect(\"reading from cursor won't fail\");\nassert_eq!(num_bytes, 0);\nassert_eq!(buf, \"\");\n```","links":{"BufRead::read_until":"1:4497:8989","Ok":"2:47937:178","`Cursor`":"1:10712:9001"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:8479:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"1:3803:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3664:209":{"id":"2:3664:209","crate_id":2,"name":"Return","span":null,"visibility":"default","docs":"The type of value this generator returns.\n\nThis corresponds to the type returned from a generator either with a\n`return` statement or implicitly as the last expression of a generator\nliteral. For example futures would use this as `Result<T, E>` as it\nrepresents a completed future.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"0:1936":{"id":"0:1936","crate_id":0,"name":null,"span":{"filename":"src/error/mod.rs","begin":[1007,0],"end":[1018,1]},"visibility":{"restricted":{"parent":"0:1792:1663","path":"::error"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10569:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4647:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1937:667"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:8742:802":{"id":"2:8742:802","crate_id":2,"name":"len","span":null,"visibility":"default","docs":"Returns the exact remaining length of the iterator.\n\nThe implementation ensures that the iterator will return exactly `len()`\nmore times a [`Some(T)`] value, before returning [`None`].\nThis method has a default implementation, so you usually should not\nimplement it directly. However, if you can provide a more efficient\nimplementation, you can do so. See the [trait-level] docs for an\nexample.\n\nThis function has the same safety guarantees as the\n[`Iterator::size_hint`] function.\n\n[trait-level]: ExactSizeIterator\n[`Some(T)`]: Some\n\n# Examples\n\nBasic usage:\n\n```\n// a finite range knows exactly how many times it will iterate\nlet mut range = 0..5;\n\nassert_eq!(5, range.len());\nlet _ = range.next();\nassert_eq!(4, range.len());\n```","links":{"Some":"2:47813:220","ExactSizeIterator":"2:8741:7849","`Iterator::size_hint`":"2:8879:4836","`None`":"2:47811:177"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9533:7458-0:4469:2274":{"id":"a:2:9533:7458-0:4469:2274","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:9533:7458","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"NonEmptyStringValueParser","id":"0:4469:2274","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2865-0:3389:1676":{"id":"b:2:2865-0:3389:1676","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:3389:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2867:2792"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3213-0:4420:2260":{"id":"b:2:3213-0:4420:2260","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3183:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValuesParser","id":"0:4420:2260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3216:128","2:3217:1436"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1595:1671":{"id":"0:1595:1671","crate_id":0,"name":"Parser","span":{"filename":"src/builder/value_parser.rs","begin":[2000,4],"end":[2000,44]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"RangedU64ValueParser","id":"0:4439:2262","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}}}}}},"0:1229:6256":{"id":"0:1229:6256","crate_id":0,"name":"get_visible_name","span":{"filename":"src/builder/possible_value.rs","begin":[194,4],"end":[200,5]},"visibility":"public","docs":"Get the name if argument value is not hidden, `None` otherwise","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3411:6205-0:3351:1659":{"id":"a:2:3411:6205-0:3351:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:3411:6205","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgAction","id":"0:3351:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1383:6597":{"id":"0:1383:6597","crate_id":0,"name":"Value","span":{"filename":"src/builder/value_parser.rs","begin":[730,4],"end":[730,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"String","id":"5:8479:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"2:10577:8832":{"id":"2:10577:8832","crate_id":2,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10578:667"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13365:28681":{"id":"2:13365:28681","crate_id":2,"name":"next_reject_back","span":null,"visibility":"default","docs":"Finds the next [`Reject`][SearchStep::Reject] result.\nSee [`next_back()`][ReverseSearcher::next_back].","links":{"SearchStep::Reject":"2:50175:14081","ReverseSearcher::next_back":"2:13363:7848"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"primitive","inner":"usize"}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:828:5127":{"id":"0:828:5127","crate_id":0,"name":"disable_colored_help","span":{"filename":"src/builder/command.rs","begin":[1235,4],"end":[1241,5]},"visibility":"public","docs":"Disables colorized help messages.\n\n**NOTE:** This choice is propagated to all child subcommands.\n\n# Examples\n\n```no_run\n# use clap::Command;\nCommand::new(\"myprog\")\n    .disable_colored_help(true)\n    .get_matches();\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1363:6597":{"id":"0:1363:6597","crate_id":0,"name":"Value","span":{"filename":"src/builder/value_parser.rs","begin":[607,4],"end":[607,15]},"visibility":"default","docs":"Argument's value type","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"23:52:28447":{"id":"23:52:28447","crate_id":23,"name":"__private_marker","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.1/src/mutable_keys.rs","begin":[45,4],"end":[45,48]},"visibility":"default","docs":"This method is not useful in itself – it is there to “seal” the trait\nfor external implementation, so that we can add methods without\ncausing breaking changes.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"PrivateMarker","id":"23:44:12454","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:4420:21317":{"id":"1:4420:21317","crate_id":1,"name":"read_buf_exact","span":null,"visibility":"default","docs":"Read the exact number of bytes required to fill `cursor`.\n\nThis is equivalent to the [`read_exact`](Read::read_exact) method, except that it is passed a [`BorrowedCursor`] rather than `[u8]` to\nallow use with uninitialized buffers.","links":{"Read::read_exact":"1:4417:21315","`BorrowedCursor`":"1:10895:9011"},"attrs":["#[unstable(feature = \"read_buf\", issue = \"78485\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cursor",{"kind":"resolved_path","inner":{"name":"BorrowedCursor","id":"1:10895:9011","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"1:3803:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:517:4265":{"id":"0:517:4265","crate_id":0,"name":"is_exclusive_set","span":{"filename":"src/builder/arg.rs","begin":[4783,4],"end":[4785,5]},"visibility":"public","docs":"Reports whether [`Arg::exclusive`] is set","links":{"`Arg::exclusive`":"0:340:3077"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2868-0:3351:1659":{"id":"b:2:2868-0:3351:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2862:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgAction","id":"0:3351:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2870:27181"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:2302":{"id":"0:2302","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1662,0],"end":[1671,1]},"visibility":{"restricted":{"parent":"0:2092:7461","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["collect","find","partial_cmp_by","rposition","partition_in_place","flatten","fuse","max_by","intersperse","copied","max","find_map","gt","lt","position","eq_by","unzip","is_partitioned","max_by_key","inspect","cmp","take","intersperse_with","eq","ge","is_sorted","count","cycle","try_fold","any","by_ref","try_for_each","min","size_hint","for_each","chain","filter","take_while","fold","all","partial_cmp","ne","filter_map","le","cloned","is_sorted_by","array_chunks","min_by_key","reduce","skip","try_collect","skip_while","next_chunk","sum","map","advance_by","is_sorted_by_key","product","try_reduce","collect_into","map_while","nth","flat_map","zip","__iterator_get_unchecked","enumerate","cmp_by","try_find","rev","min_by","partition","scan","step_by","last","peekable"],"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:4778:1685","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:2304:2117","0:2305:932","0:2306:4836"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:168:2198":{"id":"0:168:2198","crate_id":0,"name":"augment_args","span":{"filename":"src/derive.rs","begin":[397,4],"end":[397,53]},"visibility":"default","docs":"Append to [`Command`] so it can instantiate `Self`.\n\nSee also [`CommandFactory`].","links":{"`CommandFactory`":"0:153:1669","`Command`":"0:755:1660"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["cmd",{"kind":"resolved_path","inner":{"name":"Command","id":"0:755:1660","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Command","id":"0:755:1660","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1756":{"id":"0:1756","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[44,0],"end":[44,34]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"value_parser::via_prelude","name":"via_prelude","id":"0:1600:2269","glob":false}},"b:2:3213-0:4392:2263":{"id":"b:2:3213-0:4392:2263","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3183:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StringValueParser","id":"0:4392:2263","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3216:128","2:3217:1436"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4526:7069":{"id":"0:4526:7069","crate_id":0,"name":"InvalidArg","span":{"filename":"src/error/context.rs","begin":[8,4],"end":[8,14]},"visibility":"default","docs":"The cause of the error","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"0:2349":{"id":"0:2349","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1806,0],"end":[1815,1]},"visibility":{"restricted":{"parent":"0:2092:7461","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["collect","find","partial_cmp_by","rposition","partition_in_place","flatten","fuse","max_by","intersperse","copied","max","find_map","gt","lt","position","eq_by","unzip","is_partitioned","max_by_key","inspect","cmp","take","intersperse_with","eq","ge","is_sorted","count","cycle","try_fold","any","by_ref","try_for_each","min","size_hint","for_each","chain","filter","take_while","fold","all","partial_cmp","ne","filter_map","le","cloned","is_sorted_by","array_chunks","min_by_key","reduce","skip","try_collect","skip_while","next_chunk","sum","map","advance_by","is_sorted_by_key","product","try_reduce","collect_into","map_while","nth","flat_map","zip","__iterator_get_unchecked","enumerate","cmp_by","try_find","rev","min_by","partition","scan","step_by","last","peekable"],"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:4806:1682","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:2351:2117","0:2352:932","0:2353:4836"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3456:184":{"id":"2:3456:184","crate_id":2,"name":"Output","span":null,"visibility":"default","docs":"The resulting type after applying the `/` operator.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"0:130:2114":{"id":"0:130:2114","crate_id":0,"name":"parse_from","span":{"filename":"src/derive.rs","begin":[101,4],"end":[117,5]},"visibility":"default","docs":"Parse from iterator, exit on error","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["itr",{"kind":"generic","inner":"I"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsString","id":"1:2651:183","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4495:10374":{"id":"1:4495:10374","crate_id":1,"name":"has_data_left","span":null,"visibility":"default","docs":"Check if the underlying `Read` has any data left to be read.\n\nThis function may fill the buffer to check for data,\nso this functions returns `Result<bool>`, not `bool`.\n\nDefault implementation calls `fill_buf` and checks that\nreturned slice is empty (which means that there is no data left,\nsince EOF is reached).\n\nExamples\n\n```\n#![feature(buf_read_has_data_left)]\nuse std::io;\nuse std::io::prelude::*;\n\nlet stdin = io::stdin();\nlet mut stdin = stdin.lock();\n\nwhile stdin.has_data_left().unwrap() {\n    let mut line = String::new();\n    stdin.read_line(&mut line).unwrap();\n    // work with line\n    println!(\"{line:?}\");\n}\n```","links":{},"attrs":["#[unstable(feature = \"buf_read_has_data_left\", reason = \"recently added\",\nissue = \"86423\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"bool"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"1:3803:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3182:688":{"id":"2:3182:688","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Converts to this type from the input type.","links":{},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1872":{"id":"0:1872","crate_id":0,"name":null,"span":{"filename":"src/error/mod.rs","begin":[68,0],"end":[986,1]},"visibility":{"restricted":{"parent":"0:1792:1663","path":"::error"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4647:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1873:61","0:1875:678","0:1876:791","0:1877:488","0:1880:7028","0:1882:2109","0:1883:2051"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:3370:216-0:4806:1682":{"id":"a:2:3370:216-0:4806:1682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:4806:1682","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:6505:229":{"id":"5:6505:229","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6506:1415"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10819:10569":{"id":"2:10819:10569","crate_id":2,"name":"write_i8","span":null,"visibility":"default","docs":"Writes a single `i8` into this hasher.","links":{},"attrs":["#[stable(feature = \"hasher_write\", since = \"1.3.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"primitive","inner":"i8"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3207-0:4707:2393":{"id":"b:2:3207-0:4707:2393","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AnyValueId","id":"0:4707:2393","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3209:688"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:5518:14229":{"id":"1:5518:14229","crate_id":1,"name":"custom_flags","span":null,"visibility":"default","docs":"Pass custom flags to the `flags` argument of `open`.\n\nThe bits that define the access mode are masked out with `O_ACCMODE`, to\nensure they do not interfere with the access mode set by Rusts options.\n\nCustom flags can only set flags, not remove flags set by Rusts options.\nThis options overwrites any previously set custom flags.\n\n# Examples\n\n```no_run\n# #![feature(rustc_private)]\nextern crate libc;\nuse std::fs::OpenOptions;\nuse std::os::unix::fs::OpenOptionsExt;\n\n# fn main() {\nlet mut options = OpenOptions::new();\noptions.write(true);\nif cfg!(unix) {\n    options.custom_flags(libc::O_NOFOLLOW);\n}\nlet file = options.open(\"foo.txt\");\n# }\n```","links":{},"attrs":["#[stable(feature = \"open_options_ext\", since = \"1.10.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["flags",{"kind":"primitive","inner":"i32"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:4587:667":{"id":"0:4587:667","crate_id":0,"name":"fmt","span":{"filename":"src/error/context.rs","begin":[42,16],"end":[42,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10511:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4581:7095":{"id":"0:4581:7095","crate_id":0,"name":"Number","span":{"filename":"src/error/context.rs","begin":[54,4],"end":[54,17]},"visibility":"default","docs":"A single value","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":["0:4583:1564"]}},"b:2:8676-0:4796:1683":{"id":"b:2:8676-0:4796:1683","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsValues","id":"0:4796:1683","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:8678:2117","2:8679:7847","2:8680:777"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"23:50:28446":{"id":"23:50:28446","crate_id":23,"name":"retain2","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.1/src/mutable_keys.rs","begin":[38,4],"end":[40,59]},"visibility":"default","docs":"Scan through each key-value pair in the map and keep those where the\nclosure `keep` returns `true`.\n\nThe elements are visited in order, and remaining elements keep their\norder.\n\nComputes in **O(n)** time (average).","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["keep",{"kind":"generic","inner":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3624:132","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Key","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"MutableKeys","id":"23:45:10421","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Value","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"MutableKeys","id":"23:45:10421","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"a:2:3411:6205-0:3904:1662":{"id":"a:2:3411:6205-0:3904:1662","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:3411:6205","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3904:1662","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:384:3418":{"id":"0:384:3418","crate_id":0,"name":"allow_invalid_utf8","span":{"filename":"src/builder/arg.rs","begin":[1834,4],"end":[1840,5]},"visibility":"public","docs":"Deprecated, replaced with [`value_parser`][Arg::value_parser]\n\nDerive: replace `#[clap(allow_invalid_utf8 = true)]` with `#[clap(action)]` (which opts-in to the\nnew clap v4 behavior which gets the type via `value_parser!`)\n\nBuilder: replace `arg.allow_invalid_utf8(true)` with `arg.value_parser(value_parser!(T))` where\n`T` is the type of interest, like `OsString` or `PathBuf`, and `matches.value_of_os` with\n`matches.get_one::<T>` or `matches.values_of_os` with `matches.get_many::<T>`","links":{"Arg::value_parser":"0:353:2257"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1511:930":{"id":"0:1511:930","crate_id":0,"name":"new","span":{"filename":"src/builder/value_parser.rs","begin":[1600,4],"end":[1602,5]},"visibility":"public","docs":"Parse false-like string values, everything else is `true`","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10575:8831":{"id":"2:10575:8831","crate_id":2,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10576:667"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:3450:2594":{"id":"0:3450:2594","crate_id":0,"name":"HelpExpected","span":{"filename":"src/builder/app_settings.rs","begin":[659,4],"end":[659,16]},"visibility":"default","docs":"Deprecated, replaced with [`Command::help_expected`]\n\nDerive: replace `#[clap(setting = HelpExpected)]` with `#[clap(help_expected = true)]`\n\nBuilder: replace `cmd.setting(HelpExpected)` with `cmd.help_expected(true)`","links":{"`Command::help_expected`":"0:829:5143"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"0:3977:3425":{"id":"0:3977:3425","crate_id":0,"name":"ForbidEmptyValues","span":{"filename":"src/builder/arg_settings.rs","begin":[120,4],"end":[120,21]},"visibility":"default","docs":"Deprecated, replaced with [`Arg::value_parser(NonEmptyStringValueParser::new())`]\n\nDerive: replace `#[clap(setting = ForbidEmptyValues)]` with `#[clap(value_parser = NonEmptyStringValueParser::new())]`\n\nBuilder: replace `arg.setting(Multiple)` with `arg.value_parser(NonEmptyStringValueParser::new())`","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"0:349":{"id":"0:349","crate_id":0,"name":null,"span":{"filename":"src/builder/arg.rs","begin":[915,0],"end":[2619,1]},"visibility":{"restricted":{"parent":"0:242:1932","path":"::builder::arg"}},"docs":"# Value Handling","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3818:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":["0:351:1949","0:352:2249","0:353:2257","0:355:3240","0:356:3259","0:357:1953","0:358:1952","0:359:1945","0:360:3312","0:361:2256","0:362:2017","0:369:2838","0:376:2254","0:378:3370","0:382:2236","0:383:3410","0:384:3418","0:385:3424","0:386:3435","0:387:3457","0:388:3464","0:389:3471","0:390:3499","0:391:3505","0:392:3533","0:393:61","0:394:2389","0:395:3580","0:396:3581","0:398:3576","0:399:3629","0:400:3633","0:401:3634","0:403:3630"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:5566:10972":{"id":"1:5566:10972","crate_id":1,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5567:28822"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:4314":{"id":"0:4314","crate_id":0,"name":null,"span":{"filename":"src/builder/possible_value.rs","begin":[29,43],"end":[29,45]},"visibility":{"restricted":{"parent":"0:1203:2254","path":"::builder::possible_value"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:3379:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:4294:1679","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:32154:69426":{"id":"2:32154:69426","crate_id":2,"name":"leading_ones","span":null,"visibility":"public","docs":"Returns the number of leading ones in the binary representation of `self`.\n\n# Examples\n\nBasic usage:\n\n```\nlet n = !(u64::MAX >> 2);\n\nassert_eq!(n.leading_ones(), 2);\n```","links":{},"attrs":["#[stable(feature = \"leading_trailing_ones\", since = \"1.46.0\")]","#[rustc_const_stable(feature = \"leading_trailing_ones\", since = \"1.46.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9532:7459-0:4806:1682":{"id":"a:2:9532:7459-0:4806:1682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:9532:7459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:4806:1682","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:8743:1916":{"id":"2:8743:1916","crate_id":2,"name":"is_empty","span":null,"visibility":"default","docs":"Returns `true` if the iterator is empty.\n\nThis method has a default implementation using\n[`ExactSizeIterator::len()`], so you don't need to implement it yourself.\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(exact_size_is_empty)]\n\nlet mut one_element = std::iter::once(0);\nassert!(!one_element.is_empty());\n\nassert_eq!(one_element.next(), Some(0));\nassert!(one_element.is_empty());\n\nassert_eq!(one_element.next(), None);\n```","links":{"`ExactSizeIterator::len()`":"2:8742:802"},"attrs":["#[unstable(feature = \"exact_size_is_empty\", issue = \"35428\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3370:216-0:4451:2270":{"id":"a:2:3370:216-0:4451:2270","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BoolValueParser","id":"0:4451:2270","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:895:4791":{"id":"0:895:4791","crate_id":0,"name":"long_flag_aliases","span":{"filename":"src/builder/command.rs","begin":[2519,4],"end":[2524,5]},"visibility":"public","docs":"Add aliases, which function as \"hidden\" long flag subcommands.\n\nThese will automatically dispatch as if this subcommand was used. This is more efficient,\nand easier than creating multiple hidden subcommands as one only needs to check for the\nexistence of this command, and not all variants.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, };\nlet m = Command::new(\"myprog\")\n            .subcommand(Command::new(\"test\").long_flag(\"test\")\n                .long_flag_aliases(&[\"testing\", \"testall\", \"test_all\"]))\n                .arg(Arg::new(\"input\")\n                            .help(\"the file to add\")\n                            .required(false))\n            .get_matches_from(vec![\"myprog\", \"--testing\"]);\nassert_eq!(m.subcommand_name(), Some(\"test\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["names",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3411:6205-0:4594:1681":{"id":"a:2:3411:6205-0:4594:1681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:3411:6205","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4594:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:4104-0:4351:1680":{"id":"b:2:4104-0:4351:1680","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:4102:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:4351:1680","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:4106:1449"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3478:8783":{"id":"2:3478:8783","crate_id":2,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3480:903"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:336:3029":{"id":"0:336:3029","crate_id":0,"name":"last","span":{"filename":"src/builder/arg.rs","begin":[581,4],"end":[587,5]},"visibility":"public","docs":"This arg is the last, or final, positional argument (i.e. has the highest\nindex) and is *only* able to be accessed via the `--` syntax (i.e. `$ prog args --\nlast_arg`).\n\nEven, if no other arguments are left to parse, if the user omits the `--` syntax\nthey will receive an [`UnknownArgument`] error. Setting an argument to `.last(true)` also\nallows one to access this arg early using the `--` syntax. Accessing an arg early, even with\nthe `--` syntax is otherwise not possible.\n\n**NOTE:** This will change the usage string to look like `$ prog [OPTIONS] [-- <ARG>]` if\n`ARG` is marked as `.last(true)`.\n\n**NOTE:** This setting will imply [`crate::Command::dont_collapse_args_in_usage`] because failing\nto set this can make the usage string very confusing.\n\n**NOTE**: This setting only applies to positional arguments, and has no effect on OPTIONS\n\n**NOTE:** Setting this requires [`Arg::takes_value`]\n\n**CAUTION:** Using this setting *and* having child subcommands is not\nrecommended with the exception of *also* using\n[`crate::Command::args_conflicts_with_subcommands`]\n(or [`crate::Command::subcommand_negates_reqs`] if the argument marked `Last` is also\nmarked [`Arg::required`])\n\n# Examples\n\n```rust\n# use clap::Arg;\nArg::new(\"args\")\n    .takes_value(true)\n    .last(true)\n# ;\n```\n\nSetting `last` ensures the arg has the highest [index] of all positional args\nand requires that the `--` syntax be used to access it early.\n\n```rust\n# use clap::{Command, Arg};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"first\"))\n    .arg(Arg::new(\"second\"))\n    .arg(Arg::new(\"third\")\n        .takes_value(true)\n        .last(true))\n    .try_get_matches_from(vec![\n        \"prog\", \"one\", \"--\", \"three\"\n    ]);\n\nassert!(res.is_ok());\nlet m = res.unwrap();\nassert_eq!(m.value_of(\"third\"), Some(\"three\"));\nassert!(m.value_of(\"second\").is_none());\n```\n\nEven if the positional argument marked `Last` is the only argument left to parse,\nfailing to use the `--` syntax results in an error.\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"first\"))\n    .arg(Arg::new(\"second\"))\n    .arg(Arg::new(\"third\")\n        .takes_value(true)\n        .last(true))\n    .try_get_matches_from(vec![\n        \"prog\", \"one\", \"two\", \"three\"\n    ]);\n\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind(), ErrorKind::UnknownArgument);\n```\n[index]: Arg::index()\n[`UnknownArgument`]: crate::ErrorKind::UnknownArgument","links":{"`crate::Command::dont_collapse_args_in_usage`":"0:830:5146","`crate::Command::args_conflicts_with_subcommands`":"0:909:5678","`Arg::takes_value`":"0:351:1949","crate::ErrorKind::UnknownArgument":"0:4597:7110","`crate::Command::subcommand_negates_reqs`":"0:911:5720","`Arg::required`":"0:337:1948","Arg::index()":"0:335:761"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:32220:46804":{"id":"2:32220:46804","crate_id":2,"name":"pow","span":null,"visibility":"public","docs":"Raises self to the power of `exp`, using exponentiation by squaring.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(2u64.pow(5), 32);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_int_pow\", since = \"1.50.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["exp",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3859:59":{"id":"0:3859:59","crate_id":0,"name":"default","span":{"filename":"src/builder/arg.rs","begin":[60,9],"end":[60,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3818:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9532:7459-0:3968:1678":{"id":"a:2:9532:7459-0:3968:1678","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:9532:7459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgSettings","id":"0:3968:1678","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:8674:7847":{"id":"2:8674:7847","crate_id":2,"name":"IntoIter","span":null,"visibility":"default","docs":"Which kind of iterator are we turning this into?","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[{"eq_predicate":{"lhs":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"qualified_path","inner":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"IntoIterator","id":"2:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"rhs":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"IntoIterator","id":"2:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null}},"0:4316":{"id":"0:4316","crate_id":0,"name":null,"span":{"filename":"src/builder/possible_value.rs","begin":[29,43],"end":[29,45]},"visibility":{"restricted":{"parent":"0:1203:2254","path":"::builder::possible_value"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2925:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:4294:1679","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:8916:9958":{"id":"2:8916:9958","crate_id":2,"name":"map_while","span":null,"visibility":"default","docs":"Creates an iterator that both yields elements based on a predicate and maps.\n\n`map_while()` takes a closure as an argument. It will call this\nclosure on each element of the iterator, and yield elements\nwhile it returns [`Some(_)`][`Some`].\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [-1i32, 4, 0, 1];\n\nlet mut iter = a.iter().map_while(|x| 16i32.checked_div(*x));\n\nassert_eq!(iter.next(), Some(-16));\nassert_eq!(iter.next(), Some(4));\nassert_eq!(iter.next(), None);\n```\n\nHere's the same example, but with [`take_while`] and [`map`]:\n\n[`take_while`]: Iterator::take_while\n[`map`]: Iterator::map\n\n```\nlet a = [-1i32, 4, 0, 1];\n\nlet mut iter = a.iter()\n                .map(|x| 16i32.checked_div(*x))\n                .take_while(|x| x.is_some())\n                .map(|x| x.unwrap());\n\nassert_eq!(iter.next(), Some(-16));\nassert_eq!(iter.next(), Some(4));\nassert_eq!(iter.next(), None);\n```\n\nStopping after an initial [`None`]:\n\n```\nlet a = [0, 1, 2, -3, 4, 5, -6];\n\nlet iter = a.iter().map_while(|x| u32::try_from(*x).ok());\nlet vec = iter.collect::<Vec<_>>();\n\n// We have more elements which could fit in u32 (4, 5), but `map_while` returned `None` for `-3`\n// (as the `predicate` returned `None`) and `collect` stops at the first `None` encountered.\nassert_eq!(vec, vec![0, 1, 2]);\n```\n\nBecause `map_while()` needs to look at the value in order to see if it\nshould be included or not, consuming iterators will see that it is\nremoved:\n\n```\nlet a = [1, 2, -3, 4];\nlet mut iter = a.iter();\n\nlet result: Vec<u32> = iter.by_ref()\n                           .map_while(|n| u32::try_from(*n).ok())\n                           .collect();\n\nassert_eq!(result, &[1, 2]);\n\nlet result: Vec<i32> = iter.cloned().collect();\n\nassert_eq!(result, &[4]);\n```\n\nThe `-3` is no longer there, because it was consumed in order to see if\nthe iteration should stop, but wasn't placed back into the iterator.\n\nNote that unlike [`take_while`] this iterator is **not** fused.\nIt is also not specified what this iterator returns after the first [`None`] is returned.\nIf you need fused iterator, use [`fuse`].\n\n[`fuse`]: Iterator::fuse","links":{"`None`":"2:47811:177","Iterator::fuse":"2:8929:9960","`Some`":"2:47813:220","Iterator::take_while":"2:8914:6299","Iterator::map":"2:8895:851"},"attrs":["#[stable(feature = \"iter_map_while\", since = \"1.57.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["predicate",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MapWhile","id":"2:47025:9048","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3624:132","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9533:7458-0:4351:1680":{"id":"a:2:9533:7458-0:4351:1680","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:9533:7458","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:4351:1680","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:6642:11002":{"id":"1:6642:11002","crate_id":1,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6643:28867"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:3382:225-0:4410:2272":{"id":"a:2:3382:225-0:4410:2272","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EnumValueParser","id":"0:4410:2272","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:563":{"id":"0:563","crate_id":0,"name":null,"span":{"filename":"src/builder/arg.rs","begin":[5204,0],"end":[5208,1]},"visibility":{"restricted":{"parent":"0:242:1932","path":"::builder::arg"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["gt","ge","lt","le"],"trait":{"name":"PartialOrd","id":"2:2969:187","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3818:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3818:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":["0:565:1008"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:6239:28884":{"id":"1:6239:28884","crate_id":1,"name":"continued","span":null,"visibility":"default","docs":"Whether the process was continued from a stopped status.\n\nIe, `WIFCONTINUED`.  This is only possible if the status came from a `wait` system call\nwhich was passed `WCONTINUED`, and was then converted into an `ExitStatus`.","links":{},"attrs":["#[stable(feature = \"unix_process_wait_more\", since = \"1.58.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1747":{"id":"0:1747","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[41,0],"end":[41,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"value_parser::ValueParserFactory","name":"ValueParserFactory","id":"0:1558:2266","glob":false}},"0:2191:1845":{"id":"0:2191:1845","crate_id":0,"name":"value_of_t_or_exit","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[600,4],"end":[607,5]},"visibility":"public","docs":"Deprecated, replaced with [`ArgMatches::get_one()`]","links":{"`ArgMatches::get_one()`":"0:2161:7523"},"attrs":["#[track_caller]","#![allow(deprecated)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"generic","inner":"R"},"c_variadic":false},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:13275:1861","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"R"},"trait":{"name":"FromStr","id":"2:13275:1861","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10569:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:204":{"id":"0:204","crate_id":0,"name":null,"span":{"filename":"src/derive.rs","begin":[553,0],"end":[560,1]},"visibility":{"restricted":{"parent":"0:110:554","path":"::derive"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Args","id":"0:167:1668","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Args","id":"0:167:1668","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:2245","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:206:2198","0:207:2201"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3207-0:3818:1661":{"id":"b:2:3207-0:3818:1661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3818:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":["2:3209:688"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1857:313":{"id":"0:1857:313","crate_id":0,"name":"as_str","span":{"filename":"src/error/kind.rs","begin":[400,4],"end":[433,5]},"visibility":"public","docs":"End-user description of the error case, where relevant","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'static","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:9532:7459":{"id":"2:9532:7459","crate_id":2,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:474:4168":{"id":"0:474:4168","crate_id":0,"name":"get_all_short_aliases","span":{"filename":"src/builder/arg.rs","begin":[4445,4],"end":[4451,5]},"visibility":"public","docs":"Get *all* short aliases for this argument, if any, both visible and hidden.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7898:240","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"char"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11213:7401":{"id":"2:11213:7401","crate_id":2,"name":"get_mut","span":null,"visibility":"default","docs":"Returns a mutable reference to the output at this location, if in\nbounds.","links":{},"attrs":["#[unstable(feature = \"slice_index_methods\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["slice",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SliceIndex","id":"2:11209:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:4564":{"id":"0:4564","crate_id":0,"name":null,"span":{"filename":"src/error/context.rs","begin":[2,29],"end":[2,38]},"visibility":{"restricted":{"parent":"0:1854:488","path":"::error::context"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2920:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:4523:6999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:4523:6999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4565:611"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4726":{"id":"0:4726","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[67,32],"end":[67,41]},"visibility":{"restricted":{"parent":"0:2092:7461","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2920:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4713:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4713:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4727:611"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2865-0:3904:1662":{"id":"b:2:2865-0:3904:1662","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3904:1662","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":["2:2867:2792"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:9532:7459-0:4796:1683":{"id":"a:2:9532:7459-0:4796:1683","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:9532:7459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsValues","id":"0:4796:1683","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"0:4651":{"id":"0:4651","crate_id":0,"name":null,"span":{"filename":"src/error/mod.rs","begin":[39,9],"end":[39,14]},"visibility":{"restricted":{"parent":"0:1792:1663","path":"::error"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4647:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4652:667"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1362:2264":{"id":"0:1362:2264","crate_id":0,"name":"TypedValueParser","span":{"filename":"src/builder/value_parser.rs","begin":[605,0],"end":[684,1]},"visibility":"public","docs":"Parse/validate argument values","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:1363:6597","0:1364:6637","0:1365:2102","0:1366:3370","0:1367:851"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"implementations":["0:1370","0:1382","0:1391","0:1399","0:1409","0:1431","0:1452","0:1478","0:1502","0:1515","0:1527","0:1539"]}},"0:1219:278":{"id":"0:1219:278","crate_id":0,"name":"alias","span":{"filename":"src/builder/possible_value.rs","begin":[114,4],"end":[117,5]},"visibility":"public","docs":"Sets a *hidden* alias for this argument value.\n\n# Examples\n\n```rust\n# use clap::PossibleValue;\nPossibleValue::new(\"slow\")\n    .alias(\"not-fast\")\n# ;\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["name",{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:395:3580":{"id":"0:395:3580","crate_id":0,"name":"default_value_os","span":{"filename":"src/builder/arg.rs","begin":[2305,4],"end":[2307,5]},"visibility":"public","docs":"Value for the argument when not present.\n\nSee [`Arg::default_value`].\n\n[`Arg::default_value`]: Arg::default_value()\n[`OsStr`]: std::ffi::OsStr","links":{"Arg::default_value()":"0:394:2389"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["val",{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"1:2654:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2206:7673":{"id":"0:2206:7673","crate_id":0,"name":"occurrences_of","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[744,4],"end":[748,5]},"visibility":"public","docs":"Deprecated, replaced with  [`ArgAction::Count`][crate::ArgAction],\n[`ArgMatches::get_many`]`.len()`, or [`ArgMatches::value_source`].\n\n`occurrences_of`s meaning was overloaded and we are replacing it with more direct approaches.\n\nFor counting flags, call `arg.action(ArgAction::Count)` and lookup the value with `matches.get_count(...)`\n\nTo check if a user explicitly passed in a value, check the source with `matches.value_source(...)`\n\nTo see how many values there are, call `matches.get_many::<T>(...).map(|v| v.len())`","links":{"`ArgMatches::value_source`":"0:2204:7462","`ArgMatches::get_many`":"0:2165:7548","crate::ArgAction":"0:3351:1659"},"attrs":["#[track_caller]","#![allow(deprecated)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"generic","inner":"T"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Key","id":"0:3239:2795","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1380":{"id":"0:1380","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[722,0],"end":[727,1]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"StringValueParser","id":"0:4392:2263","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1381:930"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:826:5117":{"id":"0:826:5117","crate_id":0,"name":"disable_help_flag","span":{"filename":"src/builder/command.rs","begin":[1186,4],"end":[1192,5]},"visibility":"public","docs":"Disables `-h` and `--help` flag.\n\n**NOTE:** This choice is propagated to all child subcommands.\n\n# Examples\n\n```rust\n# use clap::{Command, ErrorKind};\nlet res = Command::new(\"myprog\")\n    .disable_help_flag(true)\n    .try_get_matches_from(vec![\n        \"myprog\", \"-h\"\n    ]);\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind(), ErrorKind::UnknownArgument);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:23:25-0:5070:1667":{"id":"b:23:25-0:5070:1667","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.1/src/equivalent.rs","begin":[18,0],"end":[18,46]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2925:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Equivalent","id":"23:22:9122","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:5070:1667","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["23:28:9116"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"Q"}}},"a:2:3370:216-0:4427:2261":{"id":"a:2:3370:216-0:4427:2261","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:4427:2261","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3371:415":{"id":"0:3371:415","crate_id":0,"name":"clone","span":{"filename":"src/builder/action.rs","begin":[23,9],"end":[23,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"ArgAction","id":"0:3351:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2865-0:4457:2273":{"id":"b:2:2865-0:4457:2273","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FalseyValueParser","id":"0:4457:2273","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2867:2792"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:9139:21758":{"id":"1:9139:21758","crate_id":1,"name":"ceil","span":null,"visibility":"default","docs":"Returns the smallest integer greater than or equal to each lane.","links":{},"attrs":["#[must_use =\n\"method returns a new vector and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:14079:776":{"id":"2:14079:776","crate_id":2,"name":"into_future","span":null,"visibility":"default","docs":"Creates a future from a value.\n\n# Examples\n\nBasic usage:\n\n```no_run\nuse std::future::IntoFuture;\n\n# async fn foo() {\nlet v = async { \"meow\" };\nlet mut fut = v.into_future();\nassert_eq!(\"meow\", fut.await);\n# }\n```","links":{},"attrs":["#[stable(feature = \"into_future\", since = \"1.64.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"IntoFuture","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"IntoFuture","id":"2:14076:151","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:2306:4836":{"id":"0:2306:4836","crate_id":0,"name":"size_hint","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1668,4],"end":[1670,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3370:216-0:5070:1667":{"id":"a:2:3370:216-0:5070:1667","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:5070:1667","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4473":{"id":"0:4473","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1780,22],"end":[1780,27]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"NonEmptyStringValueParser","id":"0:4469:2274","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4474:667"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:612:909":{"id":"0:612:909","crate_id":0,"name":"name","span":{"filename":"src/builder/arg_group.rs","begin":[144,4],"end":[146,5]},"visibility":"public","docs":"Deprecated, replaced with [`ArgGroup::id`]\n\nBuilder: replaced `group.name(...)` with `group.id(...)`","links":{"`ArgGroup::id`":"0:610:1941"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["n",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:846:4785":{"id":"0:846:4785","crate_id":0,"name":"long_about","span":{"filename":"src/builder/command.rs","begin":[1517,4],"end":[1520,5]},"visibility":"public","docs":"Sets the program's description for the long help (`--help`).\n\nIf [`Command::about`] is not specified, this message will be displayed for `-h`.\n\n**NOTE:** Only [`Command::about`] (short format) is used in completion\nscript generation in order to be concise.\n\n# Examples\n\n```no_run\n# use clap::Command;\nCommand::new(\"myprog\")\n    .long_about(\n\"Does really amazing things to great people. Now let's talk a little\n more in depth about how this subcommand really works. It may take about\n a few lines of text, but that's ok!\")\n# ;\n```\n[`App::about`]: Command::about()","links":{"`Command::about`":"0:844:1917"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["long_about",{"kind":"generic","inner":"O"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13350:28626":{"id":"2:13350:28626","crate_id":2,"name":"is_contained_in","span":null,"visibility":"default","docs":"Checks whether the pattern matches anywhere in the haystack","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["haystack",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:471:1951":{"id":"0:471:1951","crate_id":0,"name":"get_short","span":{"filename":"src/builder/arg.rs","begin":[4423,4],"end":[4425,5]},"visibility":"public","docs":"Get the short option name for this argument, if any","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"char"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1332":{"id":"0:1332","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[413,0],"end":[418,1]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":"Create an `i64` [`ValueParser`] from a `..M` range\n\nSee [`RangedI64ValueParser`] for more control over the output type.\n\nSee also [`RangedU64ValueParser`]\n\n# Examples\n\n```rust\nlet mut cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"port\")\n            .long(\"port\")\n            .value_parser(..3000)\n            .takes_value(true)\n            .required(true)\n    );\n\nlet m = cmd.try_get_matches_from_mut([\"cmd\", \"--port\", \"80\"]).unwrap();\nlet port: i64 = *m.get_one(\"port\")\n    .expect(\"required\");\nassert_eq!(port, 80);\n```","links":{"`ValueParser`":"0:1294:2265","`RangedI64ValueParser`":"0:4427:2261","`RangedU64ValueParser`":"0:4439:2262"},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"RangeTo","id":"2:46232:201","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i64"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1294:2265","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1333:688"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2868-0:4713:1665":{"id":"b:2:2868-0:4713:1665","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2862:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4713:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2870:27181"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:2078":{"id":"0:2078","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/any_value.rs","begin":[64,0],"end":[64,25]},"visibility":{"restricted":{"parent":"0:2060:7460","path":"::parser::matches::any_value"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2925:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AnyValueId","id":"0:4707:2393","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:342:1954":{"id":"0:342:1954","crate_id":0,"name":"multiple_occurrences","span":{"filename":"src/builder/arg.rs","begin":[809,4],"end":[815,5]},"visibility":"public","docs":"Deprecated, replaced with [`Arg::action`] ([Issue #3772](https://github.com/clap-rs/clap/issues/3772))","links":{"`Arg::action`":"0:352:2249"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:909:5678":{"id":"0:909:5678","crate_id":0,"name":"args_conflicts_with_subcommands","span":{"filename":"src/builder/command.rs","begin":[2910,4],"end":[2916,5]},"visibility":"public","docs":"Specifies that use of an argument prevents the use of [`subcommands`].\n\nBy default `clap` allows arguments between subcommands such\nas `<cmd> [cmd_args] <subcmd> [subcmd_args] <subsubcmd> [subsubcmd_args]`.\n\nThis setting disables that functionality and says that arguments can\nonly follow the *final* subcommand. For instance using this setting\nmakes only the following invocations possible:\n\n* `<cmd> <subcmd> <subsubcmd> [subsubcmd_args]`\n* `<cmd> <subcmd> [subcmd_args]`\n* `<cmd> [cmd_args]`\n\n# Examples\n\n```rust\n# use clap::Command;\nCommand::new(\"myprog\")\n    .args_conflicts_with_subcommands(true);\n```\n\n[`subcommands`]: crate::Command::subcommand()","links":{"crate::Command::subcommand()":"0:782:2012"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5508:10974":{"id":"1:5508:10974","crate_id":1,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5509:6429","1:5510:28817","1:5511:28818"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:3488":{"id":"0:3488","crate_id":0,"name":null,"span":{"filename":"src/builder/app_settings.rs","begin":[32,16],"end":[32,25]},"visibility":{"restricted":{"parent":"0:227:2250","path":"::builder::app_settings"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:3378:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:3389:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3410:2477":{"id":"0:3410:2477","crate_id":0,"name":"SubcommandRequired","span":{"filename":"src/builder/app_settings.rs","begin":[268,4],"end":[268,22]},"visibility":"default","docs":"Deprecated, replaced with [`Command::subcommand_required`] and\n[`Command::is_subcommand_required_set`]\n\nDerive: replace `#[clap(setting = SubcommandRequired)]` with `#[clap(subcommand_required = true)]`\n\nBuilder: replace `cmd.setting(SubcommandRequired)` with `cmd.subcommand_required(true)`","links":{"`Command::subcommand_required`":"0:906:5633","`Command::is_subcommand_required_set`":"0:1012:5957"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"b:2:3213-0:4755:7386":{"id":"b:2:3213-0:4755:7386","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3183:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValuesRef","id":"0:4755:7386","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:3216:128","2:3217:1436"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:9532:7459-0:4398:2275":{"id":"a:2:9532:7459-0:4398:2275","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:9532:7459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsStringValueParser","id":"0:4398:2275","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3968:1678":{"id":"0:3968:1678","crate_id":0,"name":"ArgSettings","span":{"filename":"src/builder/arg_settings.rs","begin":[34,0],"end":[496,1]},"visibility":"public","docs":"Various settings that apply to arguments and may be set, unset, and checked via getter/setter\nmethods [`Arg::setting`], [`Arg::unset_setting`], and [`Arg::is_set`]. This is what the\n[`Arg`] methods which accept a `bool` use internally.\n\n[`Arg`]: crate::Arg\n[`Arg::setting`]: crate::Arg::setting()\n[`Arg::unset_setting`]: crate::Arg::unset_setting()\n[`Arg::is_set`]: crate::Arg::is_set()","links":{"crate::Arg::unset_setting()":"0:347:3032","crate::Arg::setting()":"0:345:2010","crate::Arg::is_set()":"0:344:2030","crate::Arg":"0:3818:1661"},"attrs":["#[non_exhaustive]"],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":true,"variants":["0:3969:3050","0:3971:3241","0:3973:3101","0:3977:3425","0:3979:3098","0:3981:2583","0:3983:3137","0:3985:3459","0:3987:2550","0:3989:3500","0:3991:2589","0:3993:2433","0:3997:3436","0:3999:3031","0:4001:3806","0:4003:3390","0:4007:3834","0:4009:3840","0:4011:3419","0:4013:3078"],"impls":["a:2:9533:7458-0:3968:1678","a:2:9532:7459-0:3968:1678","a:2:3382:225-0:3968:1678","a:2:3370:216-0:3968:1678","a:2:3411:6205-0:3968:1678","b:2:4104-0:3968:1678","b:2:2865-0:3968:1678","b:2:3203-0:3968:1678","b:2:3207-0:3968:1678","b:2:3218-0:3968:1678","b:2:2868-0:3968:1678","b:2:3213-0:3968:1678","b:5:848-0:3968:1678","0:4015","0:4017","0:4018","0:4020","0:4021","0:4238"]}},"0:1366:3370":{"id":"0:1366:3370","crate_id":0,"name":"possible_values","span":{"filename":"src/builder/value_parser.rs","begin":[635,4],"end":[639,5]},"visibility":"default","docs":"Reflect on enumerated value properties\n\nError checking should not be done with this; it is mostly targeted at user-facing\napplications like errors and completion.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:2245","args":{"angle_bracketed":{"args":[{"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"resolved_path","inner":{"name":"crate::PossibleValue","id":"0:4294:1679","args":{"angle_bracketed":{"args":[{"lifetime":"'static"}],"bindings":[]}}}}}}}]}}},"generic_params":[]}],"lifetime":"'_"}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4467:2035":{"id":"1:4467:2035","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4468:1869","1:4469:10375","1:4471:10376","1:4472:5016","1:4473:8305","1:4474:10377","1:4475:9564","1:4484:9962"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:153:1669":{"id":"0:153:1669","crate_id":0,"name":"CommandFactory","span":{"filename":"src/derive.rs","begin":[250,0],"end":[280,1]},"visibility":"public","docs":"Create a [`Command`] relevant for a user-defined container.\n\nDerived as part of [`Parser`].","links":{"`Command`":"0:755:1660","`Parser`":"0:127:1671"},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:154:1913","0:156:2151","0:158:2124","0:160:2156"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:192"]}},"0:4619:7087":{"id":"0:4619:7087","crate_id":0,"name":"MissingRequiredArgument","span":{"filename":"src/error/kind.rs","begin":[250,4],"end":[250,27]},"visibility":"default","docs":"Occurs when the user does not provide one or more required arguments.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet result = Command::new(\"prog\")\n    .arg(Arg::new(\"debug\")\n        .required(true))\n    .try_get_matches_from(vec![\"prog\"]);\nassert!(result.is_err());\nassert_eq!(result.unwrap_err().kind(), ErrorKind::MissingRequiredArgument);\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"2:13790:67830":{"id":"2:13790:67830","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"`DoubleEndedIterator`":"2:8716:121","prim@char":"1:15876:8642","str::matches":"2:13787:2103","self::pattern":"2:13336:8923"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:50012:8945","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13346:8917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13346:8917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13361:8918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2087:667":{"id":"0:2087:667","crate_id":0,"name":"fmt","span":{"filename":"src/parser/matches/any_value.rs","begin":[85,4],"end":[94,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"std::fmt::Formatter","id":"2:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"std::fmt::Error","id":"2:48872:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3218-0:4806:1682":{"id":"b:2:3218-0:4806:1682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:4806:1682","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3221:128","2:3222:1435"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:5:848-0:4410:2272":{"id":"b:5:848-0:4410:2272","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:844:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EnumValueParser","id":"0:4410:2272","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"items":["5:850:4342","5:851:4983","5:852:9984"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:2826":{"id":"0:2826","crate_id":0,"name":null,"span":{"filename":"src/parser/mod.rs","begin":[23,36],"end":[23,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::matches::Indices","name":"Indices","id":"0:4806:1682","glob":false}},"0:3418:2499":{"id":"0:3418:2499","crate_id":0,"name":"AllowInvalidUtf8ForExternalSubcommands","span":{"filename":"src/builder/app_settings.rs","begin":[346,4],"end":[346,42]},"visibility":"default","docs":"Deprecated, replaced with [`Command::allow_invalid_utf8_for_external_subcommands`] and [`Command::is_allow_invalid_utf8_for_external_subcommands_set`]\n\nDerive: replace `#[clap(setting = AllowInvalidUtf8ForExternalSubcommands)]` with `#[clap(allow_invalid_utf8_for_external_subcommands = true)]`\n\nBuilder: replace `cmd.setting(AllowInvalidUtf8ForExternalSubcommands)` with `cmd.allow_invalid_utf8_for_external_subcommands(true)`","links":{"`Command::allow_invalid_utf8_for_external_subcommands`":"0:908:5667","`Command::is_allow_invalid_utf8_for_external_subcommands_set`":"0:1014:5961"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"2:3833:8800":{"id":"2:3833:8800","crate_id":2,"name":"Residual","span":null,"visibility":"default","docs":"The type of the value passed to [`FromResidual::from_residual`]\nas part of `?` when short-circuiting.\n\nThis represents the possible values of the `Self` type which are *not*\nrepresented by the `Output` type.\n\n# Note to Implementors\n\nThe choice of this type is critical to interconversion.\nUnlike the `Output` type, which will often be a raw generic type,\nthis type is typically a newtype of some sort to \"color\" the type\nso that it's distinguishable from the residuals of other types.\n\nThis is why `Result<T, E>::Residual` is not `E`, but `Result<Infallible, E>`.\nThat way it's distinct from `ControlFlow<E>::Residual`, for example,\nand thus `?` on `ControlFlow` cannot be used in a method returning `Result`.\n\nIf you're making a generic type `Foo<T>` that implements `Try<Output = T>`,\nthen typically you can use `Foo<std::convert::Infallible>` as its `Residual`\ntype: that type will have a \"hole\" in the correct place, and will maintain the\n\"foo-ness\" of the residual so other types need to opt-in to interconversion.","links":{"`FromResidual::from_residual`":"2:3838:694"},"attrs":["#[unstable(feature = \"try_trait_v2\", issue = \"84277\")]"],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"0:2875":{"id":"0:2875","crate_id":0,"name":null,"span":{"filename":"src/mkeymap.rs","begin":[74,0],"end":[81,1]},"visibility":{"restricted":{"parent":"0:2842:1714","path":"::mkeymap"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2920:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"char"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"KeyType","id":"0:4973:6885","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2876:611"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:492:4199":{"id":"0:492:4199","crate_id":0,"name":"get_global","span":{"filename":"src/builder/arg.rs","begin":[4592,4],"end":[4594,5]},"visibility":"public","docs":"Deprecated, replaced with [`Arg::is_global_set`]","links":{"`Arg::is_global_set`":"0:507:4200"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:848-0:4392:2263":{"id":"b:5:848-0:4392:2263","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:844:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StringValueParser","id":"0:4392:2263","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:850:4342","5:851:4983","5:852:9984"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4700":{"id":"0:4700","crate_id":0,"name":null,"span":{"filename":"src/parser/error.rs","begin":[4,16],"end":[4,21]},"visibility":{"restricted":{"parent":"0:2049:1663","path":"::parser::error"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(missing_copy_implementations)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4693:7387","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4701:667"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:798:2121":{"id":"0:798:2121","crate_id":0,"name":"try_get_matches_from","span":{"filename":"src/builder/command.rs","begin":[641,4],"end":[647,5]},"visibility":"public","docs":"Parse the specified arguments, returning a [`clap::Result`] on failure.\n\n**NOTE:** This method WILL NOT exit when `--help` or `--version` (or short versions) are\nused. It will return a [`clap::Error`], where the [`kind`] is a [`ErrorKind::DisplayHelp`]\nor [`ErrorKind::DisplayVersion`] respectively. You must call [`Error::exit`] or\nperform a [`std::process::exit`] yourself.\n\n**NOTE:** The first argument will be parsed as the binary name unless\n[`Command::no_binary_name`] is used.\n\n# Panics\n\nIf contradictory arguments or settings exist.\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg};\nlet arg_vec = vec![\"my_prog\", \"some\", \"args\", \"to\", \"parse\"];\n\nlet matches = Command::new(\"myprog\")\n    // Args and options go here...\n    .try_get_matches_from(arg_vec)\n    .unwrap_or_else(|e| e.exit());\n```\n[`App::get_matches_from`]: Command::get_matches_from()\n[`App::try_get_matches`]: Command::try_get_matches()\n[`Error::exit`]: crate::Error::exit()\n[`std::process::exit`]: std::process::exit()\n[`clap::Error`]: crate::Error\n[`Error::exit`]: crate::Error::exit()\n[`kind`]: crate::Error\n[`ErrorKind::DisplayHelp`]: crate::ErrorKind::DisplayHelp\n[`ErrorKind::DisplayVersion`]: crate::ErrorKind::DisplayVersion\n[`clap::Result`]: Result","links":{"crate::ErrorKind::DisplayHelp":"0:4627:7029","crate::ErrorKind::DisplayVersion":"0:4631:7030","crate::Error::exit()":"0:1882:2109","Result":"2:47934:208","std::process::exit()":"1:7592:2109","`Command::no_binary_name`":"0:816:5053","crate::Error":"0:4647:128"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["itr",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"ClapResult","id":"0:1869:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4713:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsString","id":"1:2651:183","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:618:2014":{"id":"0:618:2014","crate_id":0,"name":"multiple","span":{"filename":"src/builder/arg_group.rs","begin":[246,4],"end":[249,5]},"visibility":"public","docs":"Allows more than one of the [`Arg`]s in this group to be used. (Default: `false`)\n\n# Examples\n\nNotice in this example we use *both* the `-f` and `-c` flags which are both part of the\ngroup\n\n```rust\n# use clap::{Command, Arg, ArgGroup};\nlet m = Command::new(\"myprog\")\n    .arg(Arg::new(\"flag\")\n        .short('f'))\n    .arg(Arg::new(\"color\")\n        .short('c'))\n    .group(ArgGroup::new(\"req_flags\")\n        .args(&[\"flag\", \"color\"])\n        .multiple(true))\n    .get_matches_from(vec![\"myprog\", \"-f\", \"-c\"]);\n// maybe we don't know which of the two flags was used...\nassert!(m.contains_id(\"req_flags\"));\n```\nIn this next example, we show the default behavior (i.e. `multiple(false)) which will throw\nan error if more than one of the args in the group was used.\n\n```rust\n# use clap::{Command, Arg, ArgGroup, ErrorKind};\nlet result = Command::new(\"myprog\")\n    .arg(Arg::new(\"flag\")\n        .short('f'))\n    .arg(Arg::new(\"color\")\n        .short('c'))\n    .group(ArgGroup::new(\"req_flags\")\n        .args(&[\"flag\", \"color\"]))\n    .try_get_matches_from(vec![\"myprog\", \"-f\", \"-c\"]);\n// Because we used both args in the group it's an error\nassert!(result.is_err());\nlet err = result.unwrap_err();\nassert_eq!(err.kind(), ErrorKind::ArgumentConflict);\n```\n\n[`Arg`]: crate::Arg","links":{"crate::Arg":"0:3818:1661"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4567":{"id":"0:4567","crate_id":0,"name":null,"span":{"filename":"src/error/context.rs","begin":[2,40],"end":[2,42]},"visibility":{"restricted":{"parent":"0:1854:488","path":"::error::context"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2925:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:4523:6999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1929":{"id":"0:1929","crate_id":0,"name":null,"span":{"filename":"src/error/mod.rs","begin":[988,0],"end":[992,1]},"visibility":{"restricted":{"parent":"0:1792:1663","path":"::error"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"1:3803:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4647:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1930:688"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1499:930":{"id":"0:1499:930","crate_id":0,"name":"new","span":{"filename":"src/builder/value_parser.rs","begin":[1501,4],"end":[1503,5]},"visibility":"public","docs":"Implementation for [`ValueParser::bool`]","links":{"`ValueParser::bool`":"0:1312:367"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:956:5869":{"id":"0:956:5869","crate_id":0,"name":"get_color","span":{"filename":"src/builder/command.rs","begin":[3445,4],"end":[3463,5]},"visibility":"public","docs":"Should we color the output?","links":{},"attrs":["#[inline(never)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:5070:1667","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:32246:69497":{"id":"2:32246:69497","crate_id":2,"name":"widening_mul","span":null,"visibility":"public","docs":"Calculates the complete product `self * rhs` without the possibility to overflow.\n\nThis returns the low-order (wrapping) bits and the high-order (overflow) bits\nof the result as two separate values, in that order.\n\n# Examples\n\nBasic usage:\n\nPlease note that this example is shared between integer types.\nWhich explains why `u32` is used here.\n\n```\n#![feature(bigint_helper_methods)]\nassert_eq!(5u32.widening_mul(2), (10, 0));\nassert_eq!(1_000_000_000u32.widening_mul(10), (1410065408, 2));\n```","links":{},"attrs":["#[unstable(feature = \"bigint_helper_methods\", issue = \"85532\")]","#[rustc_const_unstable(feature = \"const_bigint_helper_methods\", issue =\n\"85532\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"u64"},{"kind":"primitive","inner":"u64"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3438:2561":{"id":"0:3438:2561","crate_id":0,"name":"DisableHelpFlag","span":{"filename":"src/builder/app_settings.rs","begin":[542,4],"end":[542,19]},"visibility":"default","docs":"Deprecated, replaced with [`Command::disable_help_flag`] and [`Command::is_disable_help_flag_set`]\n\nDerive: replace `#[clap(setting = DisableHelpFlag)]` with `#[clap(disable_help_flag = true)]`\n\nBuilder: replace `cmd.setting(DisableHelpFlag)` with `cmd.disable_help_flag(true)`","links":{"`Command::disable_help_flag`":"0:826:5117","`Command::is_disable_help_flag_set`":"0:999:5933"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"a:2:3370:216-0:4828:1684":{"id":"a:2:3370:216-0:4828:1684","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4828:1684","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3351:1659":{"id":"0:3351:1659","crate_id":0,"name":"ArgAction","span":{"filename":"src/builder/action.rs","begin":[26,0],"end":[270,1]},"visibility":"public","docs":"Behavior of arguments when they are encountered while parsing\n\n# Examples\n\n```rust\n# use clap::Command;\n# use clap::Arg;\nlet cmd = Command::new(\"mycmd\")\n    .arg(\n        Arg::new(\"special-help\")\n            .short('?')\n            .action(clap::ArgAction::Help)\n    );\n\n// Existing help still exists\nlet err = cmd.clone().try_get_matches_from([\"mycmd\", \"-h\"]).unwrap_err();\nassert_eq!(err.kind(), clap::error::ErrorKind::DisplayHelp);\n\n// New help available\nlet err = cmd.try_get_matches_from([\"mycmd\", \"-?\"]).unwrap_err();\nassert_eq!(err.kind(), clap::error::ErrorKind::DisplayHelp);\n```","links":{},"attrs":["#[non_exhaustive]","#[allow(missing_copy_implementations)]"],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:3352:2336","0:3354:2340","0:3356:2347","0:3358:2350","0:3360:2361","0:3362:2365","0:3364:108","0:3366:2374","0:3368:2384"],"impls":["0:218","a:2:9533:7458-0:3351:1659","a:2:9532:7459-0:3351:1659","a:2:3382:225-0:3351:1659","a:2:3370:216-0:3351:1659","a:2:3411:6205-0:3351:1659","b:2:4104-0:3351:1659","b:2:2865-0:3351:1659","b:2:3203-0:3351:1659","b:2:3207-0:3351:1659","b:2:3218-0:3351:1659","b:2:2868-0:3351:1659","b:2:3213-0:3351:1659","b:5:848-0:3351:1659","0:3370","0:3372"]}},"0:1519:3370":{"id":"0:1519:3370","crate_id":0,"name":"possible_values","span":{"filename":"src/builder/value_parser.rs","begin":[1636,4],"end":[1640,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:2245","args":{"angle_bracketed":{"args":[{"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"resolved_path","inner":{"name":"crate::PossibleValue","id":"0:4294:1679","args":{"angle_bracketed":{"args":[{"lifetime":"'static"}],"bindings":[]}}}}}}}]}}},"generic_params":[]}],"lifetime":"'_"}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:755:1660":{"id":"0:755:1660","crate_id":0,"name":"Command","span":{"filename":"src/builder/command.rs","begin":[70,0],"end":[70,37]},"visibility":"public","docs":"Build a command-line interface.\n\nThis includes defining arguments, subcommands, parser behavior, and help output.\nOnce all configuration is complete,\nthe [`Command::get_matches`] family of methods starts the runtime-parsing\nprocess. These methods then return information about the user supplied\narguments (or lack thereof).\n\nWhen deriving a [`Parser`][crate::Parser], you can use\n[`CommandFactory::command`][crate::CommandFactory::command] to access the\n`Command`.\n\n- [Basic API][crate::App#basic-api]\n- [Application-wide Settings][crate::App#application-wide-settings]\n- [Command-specific Settings][crate::App#command-specific-settings]\n- [Subcommand-specific Settings][crate::App#subcommand-specific-settings]\n- [Reflection][crate::App#reflection]\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg};\nlet m = Command::new(\"My Program\")\n    .author(\"Me, me@mail.com\")\n    .version(\"1.0.2\")\n    .about(\"Explains in brief what the program does\")\n    .arg(\n        Arg::new(\"in_file\")\n    )\n    .after_help(\"Longer explanation to appear after the options when \\\n                 displaying the help information from --help or -h\")\n    .get_matches();\n\n// Your program logic starts here...\n```\n[`App::get_matches`]: Command::get_matches()","links":{"crate::App#reflection":"0:4241:1674","crate::Parser":"0:127:1671","`Command::get_matches`":"0:790:2104","crate::App#command-specific-settings":"0:4241:1674","crate::App#application-wide-settings":"0:4241:1674","crate::App#basic-api":"0:4241:1674","crate::App#subcommand-specific-settings":"0:4241:1674","crate::CommandFactory::command":"0:154:1913"},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"App","id":"0:4241:1674","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]}}},"2:3279:7013":{"id":"2:3279:7013","crate_id":2,"name":"source","span":null,"visibility":"default","docs":"The lower-level source of this error, if any.\n\n# Examples\n\n```\nuse std::error::Error;\nuse std::fmt;\n\n#[derive(Debug)]\nstruct SuperError {\n    source: SuperErrorSideKick,\n}\n\nimpl fmt::Display for SuperError {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        write!(f, \"SuperError is here!\")\n    }\n}\n\nimpl Error for SuperError {\n    fn source(&self) -> Option<&(dyn Error + 'static)> {\n        Some(&self.source)\n    }\n}\n\n#[derive(Debug)]\nstruct SuperErrorSideKick;\n\nimpl fmt::Display for SuperErrorSideKick {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        write!(f, \"SuperErrorSideKick is here!\")\n    }\n}\n\nimpl Error for SuperErrorSideKick {}\n\nfn get_super_error() -> Result<(), SuperError> {\n    Err(SuperError { source: SuperErrorSideKick })\n}\n\nfn main() {\n    match get_super_error() {\n        Err(e) => {\n            println!(\"Error: {e}\");\n            println!(\"Caused by: {}\", e.source().unwrap());\n        }\n        _ => println!(\"No error\"),\n    }\n}\n```","links":{},"attrs":["#[stable(feature = \"error_source\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"2:3278:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:848-0:1294:2265":{"id":"b:5:848-0:1294:2265","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:844:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1294:2265","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:850:4342","5:851:4983","5:852:9984"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4713:1665":{"id":"0:4713:1665","crate_id":0,"name":"ArgMatches","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[68,0],"end":[77,1]},"visibility":"public","docs":"Container for parse results.\n\nUsed to get information about the arguments that were supplied to the program at runtime by\nthe user. New instances of this struct are obtained by using the [`Command::get_matches`] family of\nmethods.\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg, ValueSource};\nlet matches = Command::new(\"MyApp\")\n    .arg(Arg::new(\"out\")\n        .long(\"output\")\n        .required(true)\n        .takes_value(true)\n        .default_value(\"-\"))\n    .arg(Arg::new(\"cfg\")\n        .short('c')\n        .takes_value(true))\n    .get_matches(); // builds the instance of ArgMatches\n\n// to get information about the \"cfg\" argument we created, such as the value supplied we use\n// various ArgMatches methods, such as [ArgMatches::get_one]\nif let Some(c) = matches.get_one::<String>(\"cfg\") {\n    println!(\"Value for -c: {}\", c);\n}\n\n// The ArgMatches::get_one method returns an Option because the user may not have supplied\n// that argument at runtime. But if we specified that the argument was \"required\" as we did\n// with the \"out\" argument, we can safely unwrap because `clap` verifies that was actually\n// used at runtime.\nprintln!(\"Value for --output: {}\", matches.get_one::<String>(\"out\").unwrap());\n\n// You can check the presence of an argument's values\nif matches.contains_id(\"out\") {\n    // However, if you want to know where the value came from\n    if matches.value_source(\"out\").expect(\"checked contains_id\") == ValueSource::CommandLine {\n        println!(\"`out` set by user\");\n    } else {\n        println!(\"`out` is defaulted\");\n    }\n}\n```\n[`Command::get_matches`]: crate::Command::get_matches()","links":{"crate::Command::get_matches()":"0:790:2104"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:2160","0:2215","0:2227","a:2:9533:7458-0:4713:1665","a:2:9532:7459-0:4713:1665","a:2:3382:225-0:4713:1665","a:2:3370:216-0:4713:1665","a:2:3411:6205-0:4713:1665","b:2:4104-0:4713:1665","b:2:2865-0:4713:1665","b:2:3203-0:4713:1665","b:2:3207-0:4713:1665","b:2:3218-0:4713:1665","b:2:2868-0:4713:1665","b:2:3213-0:4713:1665","b:5:848-0:4713:1665","b:23:25-0:4713:1665","0:4719","0:4721","0:4723","0:4725","0:4726","0:4728","0:4729"]}},"a:2:3382:225-0:4768:7385":{"id":"a:2:3382:225-0:4768:7385","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawValues","id":"0:4768:7385","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:3595:227":{"id":"2:3595:227","crate_id":2,"name":"Target","span":null,"visibility":"default","docs":"The resulting type after dereferencing.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"deref_target\"]"],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null}},"2:23120:21819":{"id":"2:23120:21819","crate_id":2,"name":"reduce_min","span":null,"visibility":"default","docs":"Returns the minimum lane in the vector.\n\n# Examples\n\n```\n# #![feature(portable_simd)]\n# #[cfg(feature = \"as_crate\")] use core_simd::simd;\n# #[cfg(not(feature = \"as_crate\"))] use core::simd;\n# use simd::{i32x4, SimdInt};\nlet v = i32x4::from_array([1, 2, 3, 4]);\nassert_eq!(v.reduce_min(), 1);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Scalar","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdInt","id":"2:23106:11397","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:5:848-0:4420:2260":{"id":"b:5:848-0:4420:2260","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:844:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValuesParser","id":"0:4420:2260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:850:4342","5:851:4983","5:852:9984"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:3382:225-0:4693:7387":{"id":"a:2:3382:225-0:4693:7387","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4693:7387","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2868-0:4457:2273":{"id":"b:2:2868-0:4457:2273","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2862:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FalseyValueParser","id":"0:4457:2273","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2870:27181"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4528:7070":{"id":"0:4528:7070","crate_id":0,"name":"PriorArg","span":{"filename":"src/error/context.rs","begin":[10,4],"end":[10,12]},"visibility":"default","docs":"Existing arguments","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"0:1316":{"id":"0:1316","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[223,0],"end":[260,1]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1294:2265","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1318:1449","0:1319:3370"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:23113:21822":{"id":"2:23113:21822","crate_id":2,"name":"saturating_neg","span":null,"visibility":"default","docs":"Lanewise saturating negation, implemented in Rust.\nAs neg(), except the MIN value becomes MAX instead of itself.\n\n# Examples\n```\n# #![feature(portable_simd)]\n# #[cfg(feature = \"as_crate\")] use core_simd::simd;\n# #[cfg(not(feature = \"as_crate\"))] use core::simd;\n# use simd::{Simd, SimdInt};\nuse core::i32::{MIN, MAX};\nlet x = Simd::from_array([MIN, -2, 3, MAX]);\nlet unsat = -x;\nlet sat = x.saturating_neg();\nassert_eq!(unsat, Simd::from_array([MIN, 2, -3, MIN + 1]));\nassert_eq!(sat, Simd::from_array([MAX, 2, -3, MIN + 1]));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:23115:21824":{"id":"2:23115:21824","crate_id":2,"name":"is_negative","span":null,"visibility":"default","docs":"Returns true for each negative lane and false if it is zero or positive.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Mask","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdInt","id":"2:23106:11397","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:2:8676-0:4806:1682":{"id":"b:2:8676-0:4806:1682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:4806:1682","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:8678:2117","2:8679:7847","2:8680:777"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"5:5915:184":{"id":"5:5915:184","crate_id":5,"name":"Output","span":null,"visibility":"default","docs":"The resulting type after concatenation","links":{},"attrs":["#[unstable(feature = \"slice_concat_trait\", issue = \"27747\")]"],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"0:4623:7108":{"id":"0:4623:7108","crate_id":0,"name":"UnexpectedMultipleUsage","span":{"filename":"src/error/kind.rs","begin":[287,4],"end":[287,27]},"visibility":"default","docs":"Occurs when the user provides multiple values to an argument which doesn't allow that.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet result = Command::new(\"prog\")\n    .arg(Arg::new(\"debug\")\n        .long(\"debug\")\n        .multiple_occurrences(false))\n    .try_get_matches_from(vec![\"prog\", \"--debug\", \"--debug\"]);\nassert!(result.is_err());\nassert_eq!(result.unwrap_err().kind(), ErrorKind::UnexpectedMultipleUsage);\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"0:4585:415":{"id":"0:4585:415","crate_id":0,"name":"clone","span":{"filename":"src/error/context.rs","begin":[42,9],"end":[42,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"ContextValue","id":"0:4569:7000","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:938:5856":{"id":"0:938:5856","crate_id":0,"name":"get_visible_short_flag_aliases","span":{"filename":"src/builder/command.rs","begin":[3398,4],"end":[3403,5]},"visibility":"public","docs":"Iterate through the *visible* short aliases for this subcommand.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"primitive","inner":"char"}}}}]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'_"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6464:15075":{"id":"1:6464:15075","crate_id":1,"name":"st_mode","span":null,"visibility":"default","docs":"Returns the file type and mode.\n\n# Examples\n\n```no_run\nuse std::fs;\nuse std::io;\nuse std::os::linux::fs::MetadataExt;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    println!(\"{}\", meta.st_mode());\n    Ok(())\n}\n```","links":{},"attrs":["#[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:3362:2365":{"id":"0:3362:2365","crate_id":0,"name":"SetFalse","span":{"filename":"src/builder/action.rs","begin":[182,4],"end":[182,12]},"visibility":"default","docs":"When encountered, act as if `\"false\"` was encountered on the command-line\n\nIf no [`default_value`][super::Arg::default_value] is set, it will be `true`.\n\nNo value is allowed. To optionally accept a value, see\n[`Arg::default_missing_value`][super::Arg::default_missing_value]\n\n# Examples\n\n```rust\n# use clap::Command;\n# use clap::Arg;\nlet cmd = Command::new(\"mycmd\")\n    .arg(\n        Arg::new(\"flag\")\n            .long(\"flag\")\n            .action(clap::ArgAction::SetFalse)\n    );\n\nlet matches = cmd.clone().try_get_matches_from([\"mycmd\", \"--flag\", \"--flag\"]).unwrap();\nassert!(matches.contains_id(\"flag\"));\nassert_eq!(matches.occurrences_of(\"flag\"), 0);\nassert_eq!(\n    matches.get_one::<bool>(\"flag\").copied(),\n    Some(false)\n);\n\nlet matches = cmd.try_get_matches_from([\"mycmd\"]).unwrap();\nassert!(matches.contains_id(\"flag\"));\nassert_eq!(matches.occurrences_of(\"flag\"), 0);\nassert_eq!(\n    matches.get_one::<bool>(\"flag\").copied(),\n    Some(true)\n);\n```","links":{"super::Arg::default_missing_value":"0:399:3629","super::Arg::default_value":"0:394:2389"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"2:32146:6772":{"id":"2:32146:6772","crate_id":2,"name":"MIN","span":null,"visibility":"public","docs":"The smallest value that can be represented by this integer type.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(u64::MIN, 0);\n```","links":{},"attrs":["#[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]"],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"primitive","inner":"u64"},"default":"0"}},"2:13275:1861":{"id":"2:13275:1861","crate_id":2,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13276:127","2:13277:1862"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:4283:415":{"id":"0:4283:415","crate_id":0,"name":"clone","span":{"filename":"src/builder/command.rs","begin":[77,16],"end":[77,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"App","id":"0:4241:1674","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6569:10998":{"id":"1:6569:10998","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6570:14224"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10409:10989","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:3857":{"id":"0:3857","crate_id":0,"name":null,"span":{"filename":"src/builder/arg.rs","begin":[60,9],"end":[60,16]},"visibility":{"restricted":{"parent":"0:242:1932","path":"::builder::arg"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(missing_debug_implementations)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:3254:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3818:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":["0:3859:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4849:422":{"id":"0:4849:422","crate_id":0,"name":"cmp","span":{"filename":"src/parser/matches/value_source.rs","begin":[2,56],"end":[2,59]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4828:1684","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::cmp::Ordering","id":"2:37932:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8200:27620":{"id":"2:8200:27620","crate_id":2,"name":"forward_unchecked","span":null,"visibility":"default","docs":"Returns the value that would be obtained by taking the *successor*\nof `self` `count` times.\n\n# Safety\n\nIt is undefined behavior for this operation to overflow the\nrange of values supported by `Self`. If you cannot guarantee that this\nwill not overflow, use `forward` or `forward_checked` instead.\n\n# Invariants\n\nFor any `a`:\n\n* if there exists `b` such that `b > a`, it is safe to call `Step::forward_unchecked(a, 1)`\n* if there exists `b`, `n` such that `steps_between(&a, &b) == Some(n)`,\n  it is safe to call `Step::forward_unchecked(a, m)` for any `m <= n`.\n\nFor any `a` and `n`, where no overflow occurs:\n\n* `Step::forward_unchecked(a, n)` is equivalent to `Step::forward(a, n)`","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["start",{"kind":"generic","inner":"Self"}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:5538:28832":{"id":"1:5538:28832","crate_id":1,"name":"blocks","span":null,"visibility":"default","docs":"Returns the number of blocks allocated to the file, in 512-byte units.\n\nPlease note that this may be smaller than `st_size / 512` when the file has holes.\n\n# Examples\n\n```no_run\nuse std::fs;\nuse std::os::unix::fs::MetadataExt;\nuse std::io;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    let blocks = meta.blocks();\n    Ok(())\n}\n```","links":{},"attrs":["#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:4487:21344":{"id":"1:4487:21344","crate_id":1,"name":"rewind","span":null,"visibility":"default","docs":"Rewind to the beginning of a stream.\n\nThis is a convenience method, equivalent to `seek(SeekFrom::Start(0))`.\n\n# Errors\n\nRewinding can fail, for example because it might involve flushing a buffer.\n\n# Example\n\n```no_run\nuse std::io::{Read, Seek, Write};\nuse std::fs::OpenOptions;\n\nlet mut f = OpenOptions::new()\n    .write(true)\n    .read(true)\n    .create(true)\n    .open(\"foo.txt\").unwrap();\n\nlet hello = \"Hello!\\n\";\nwrite!(f, \"{hello}\").unwrap();\nf.rewind().unwrap();\n\nlet mut buf = String::new();\nf.read_to_string(&mut buf).unwrap();\nassert_eq!(&buf, hello);\n```","links":{},"attrs":["#[stable(feature = \"seek_rewind\", since = \"1.55.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"1:3803:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:952:5863":{"id":"0:952:5863","crate_id":0,"name":"get_all_long_flag_aliases","span":{"filename":"src/builder/command.rs","begin":[3428,4],"end":[3430,5]},"visibility":"public","docs":"Iterate through the set of *all* the long aliases for this subcommand, both visible and hidden.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}}]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'_"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3213-0:4806:1682":{"id":"b:2:3213-0:4806:1682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3183:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:4806:1682","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3216:128","2:3217:1436"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:9532:7459-0:4457:2273":{"id":"a:2:9532:7459-0:4457:2273","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:9532:7459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FalseyValueParser","id":"0:4457:2273","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1336":{"id":"0:1336","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[473,0],"end":[478,1]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":"Create an `i64` [`ValueParser`] from a `..` range\n\nSee [`RangedI64ValueParser`] for more control over the output type.\n\nSee also [`RangedU64ValueParser`]\n\n# Examples\n\n```rust\nlet mut cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"port\")\n            .long(\"port\")\n            .value_parser(..)\n            .takes_value(true)\n            .required(true)\n    );\n\nlet m = cmd.try_get_matches_from_mut([\"cmd\", \"--port\", \"3001\"]).unwrap();\nlet port: i64 = *m.get_one(\"port\")\n    .expect(\"required\");\nassert_eq!(port, 3001);\n```","links":{"`ValueParser`":"0:1294:2265","`RangedI64ValueParser`":"0:4427:2261","`RangedU64ValueParser`":"0:4439:2262"},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"RangeFull","id":"2:46172:199","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1294:2265","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1337:688"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:23109:1243":{"id":"2:23109:1243","crate_id":2,"name":"saturating_add","span":null,"visibility":"default","docs":"Lanewise saturating add.\n\n# Examples\n```\n# #![feature(portable_simd)]\n# #[cfg(feature = \"as_crate\")] use core_simd::simd;\n# #[cfg(not(feature = \"as_crate\"))] use core::simd;\n# use simd::{Simd, SimdInt};\nuse core::i32::{MIN, MAX};\nlet x = Simd::from_array([MIN, 0, 1, MAX]);\nlet max = Simd::splat(MAX);\nlet unsat = x + max;\nlet sat = x.saturating_add(max);\nassert_eq!(unsat, Simd::from_array([-1, MAX, MIN, -2]));\nassert_eq!(sat, Simd::from_array([-1, MAX, MAX, MAX]));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["second",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1222":{"id":"0:1222","crate_id":0,"name":null,"span":{"filename":"src/builder/possible_value.rs","begin":[140,0],"end":[247,1]},"visibility":{"restricted":{"parent":"0:1203:2254","path":"::builder::possible_value"}},"docs":"Reflection","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:4294:1679","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":["0:1224:4153","0:1225:4155","0:1226:6250","0:1227:4245","0:1229:6256","0:1231:6264","0:1233:2103"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:3370:216-0:4569:7000":{"id":"a:2:3370:216-0:4569:7000","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextValue","id":"0:4569:7000","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:419":{"id":"0:419","crate_id":0,"name":null,"span":{"filename":"src/builder/arg.rs","begin":[3179,0],"end":[4375,1]},"visibility":{"restricted":{"parent":"0:242:1932","path":"::builder::arg"}},"docs":"# Advanced Argument Relations","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3818:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":["0:421:2011","0:423:2821","0:425:3887","0:427:3888","0:429:3905","0:431:3910","0:433:3921","0:435:3939","0:438:3954","0:441:3966","0:443:3989","0:446:3999","0:449:4016","0:451:4031","0:454:4045","0:457:4060","0:459:4071","0:460:4136","0:462:4148"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:787:1937":{"id":"0:787:1937","crate_id":0,"name":"debug_assert","span":{"filename":"src/builder/command.rs","begin":[477,4],"end":[479,5]},"visibility":"public","docs":"Catch problems earlier in the development cycle.\n\nMost error states are handled as asserts under the assumption they are programming mistake\nand not something to handle at runtime.  Rather than relying on tests (manual or automated)\nthat exhaustively test your CLI to ensure the asserts are evaluated, this will run those\nasserts in a way convenient for running as a test.\n\n**Note::** This will not help with asserts in [`ArgMatches`], those will need exhaustive\ntesting of your CLI.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ArgAction};\nfn cmd() -> Command<'static> {\n    Command::new(\"foo\")\n        .arg(\n            Arg::new(\"bar\").short('b').action(ArgAction::SetTrue)\n        )\n}\n\n#[test]\nfn verify_app() {\n    cmd().debug_assert();\n}\n\nfn main() {\n    let m = cmd().get_matches_from(vec![\"foo\", \"-b\"]);\n    println!(\"{}\", *m.get_one::<bool>(\"bar\").expect(\"defaulted by clap\"));\n}\n```","links":{"`ArgMatches`":"0:4713:1665"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4354:6524":{"id":"0:4354:6524","crate_id":0,"name":"Other","span":{"filename":"src/builder/value_hint.rs","begin":[34,4],"end":[34,9]},"visibility":"default","docs":"None of the hints below apply. Disables shell completion for this argument.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"0:1224:4153":{"id":"0:1224:4153","crate_id":0,"name":"get_name","span":{"filename":"src/builder/possible_value.rs","begin":[143,4],"end":[145,5]},"visibility":"public","docs":"Get the name of the argument value","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4501:6010":{"id":"1:4501:6010","crate_id":1,"name":"lines","span":null,"visibility":"default","docs":"Returns an iterator over the lines of this reader.\n\nThe iterator returned from this function will yield instances of\n<code>[io::Result]<[String]></code>. Each string returned will *not* have a newline\nbyte (the `0xA` byte) or `CRLF` (`0xD`, `0xA` bytes) at the end.\n\n[io::Result]: self::Result \"io::Result\"\n\n# Examples\n\n[`std::io::Cursor`][`Cursor`] is a type that implements `BufRead`. In\nthis example, we use [`Cursor`] to iterate over all the lines in a byte\nslice.\n\n```\nuse std::io::{self, BufRead};\n\nlet cursor = io::Cursor::new(b\"lorem\\nipsum\\r\\ndolor\");\n\nlet mut lines_iter = cursor.lines().map(|l| l.unwrap());\nassert_eq!(lines_iter.next(), Some(String::from(\"lorem\")));\nassert_eq!(lines_iter.next(), Some(String::from(\"ipsum\")));\nassert_eq!(lines_iter.next(), Some(String::from(\"dolor\")));\nassert_eq!(lines_iter.next(), None);\n```\n\n# Errors\n\nEach line of the iterator has the same error semantics as [`BufRead::read_line`].","links":{"String":"5:8479:221","self::Result":"1:3801:208","`Cursor`":"1:10712:9001","`BufRead::read_line`":"1:4498:7036"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"1:10986:8940","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4835":{"id":"0:4835","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/value_source.rs","begin":[2,9],"end":[2,14]},"visibility":{"restricted":{"parent":"0:2440:7462","path":"::parser::matches::value_source"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4828:1684","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4836:667"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:2178:7622":{"id":"0:2178:7622","crate_id":0,"name":"value_of_os","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[463,4],"end":[468,5]},"visibility":"public","docs":"Deprecated, replaced with [`ArgMatches::get_one()`]\n\nReplace `m.value_of(...)` with `m.get_one::<OsString>(...).map(|s| s.as_os_str())`","links":{"`ArgMatches::get_one()`":"0:2161:7523"},"attrs":["#[track_caller]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"1:2654:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Key","id":"0:3239:2795","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3218-0:4647:128":{"id":"b:2:3218-0:4647:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4647:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3221:128","2:3222:1435"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3218-0:4755:7386":{"id":"b:2:3218-0:4755:7386","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValuesRef","id":"0:4755:7386","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:3221:128","2:3222:1435"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4464":{"id":"0:4464","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1691,9],"end":[1691,13]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3380:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BoolishValueParser","id":"0:4463:2271","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3661:8803":{"id":"2:3661:8803","crate_id":2,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3663:243","2:3664:209","2:3665:28257"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8921:9959":{"id":"2:8921:9959","crate_id":2,"name":"scan","span":null,"visibility":"default","docs":"An iterator adapter similar to [`fold`] that holds internal state and\nproduces a new iterator.\n\n[`fold`]: Iterator::fold\n\n`scan()` takes two arguments: an initial value which seeds the internal\nstate, and a closure with two arguments, the first being a mutable\nreference to the internal state and the second an iterator element.\nThe closure can assign to the internal state to share state between\niterations.\n\nOn iteration, the closure will be applied to each element of the\niterator and the return value from the closure, an [`Option`], is\nyielded by the iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\n\nlet mut iter = a.iter().scan(1, |state, &x| {\n    // each iteration, we'll multiply the state by the element\n    *state = *state * x;\n\n    // then, we'll yield the negation of the state\n    Some(-*state)\n});\n\nassert_eq!(iter.next(), Some(-1));\nassert_eq!(iter.next(), Some(-2));\nassert_eq!(iter.next(), Some(-6));\nassert_eq!(iter.next(), None);\n```","links":{"Iterator::fold":"2:8980:8024","`Option`":"2:47809:179"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["initial_state",{"kind":"generic","inner":"St"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Scan","id":"2:47053:9062","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"generic","inner":"St"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"St","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3624:132","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"St"}}},{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3487:667":{"id":"0:3487:667","crate_id":0,"name":"fmt","span":{"filename":"src/builder/app_settings.rs","begin":[32,9],"end":[32,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10511:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6467:15077":{"id":"1:6467:15077","crate_id":1,"name":"st_gid","span":null,"visibility":"default","docs":"Returns the group ID of the file owner.\n\n# Examples\n\n```no_run\nuse std::fs;\nuse std::io;\nuse std::os::linux::fs::MetadataExt;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    println!(\"{}\", meta.st_gid());\n    Ok(())\n}\n```","links":{},"attrs":["#[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"a:2:3382:225-0:4392:2263":{"id":"a:2:3382:225-0:4392:2263","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StringValueParser","id":"0:4392:2263","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:3207-0:4569:7000":{"id":"b:2:3207-0:4569:7000","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextValue","id":"0:4569:7000","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3209:688"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:478:4174":{"id":"0:478:4174","crate_id":0,"name":"get_visible_aliases","span":{"filename":"src/builder/arg.rs","begin":[4474,4],"end":[4486,5]},"visibility":"public","docs":"Get visible aliases for this argument, if any","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7898:240","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3411:6205-0:4469:2274":{"id":"a:2:3411:6205-0:4469:2274","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:3411:6205","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"NonEmptyStringValueParser","id":"0:4469:2274","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:3213-0:4569:7000":{"id":"b:2:3213-0:4569:7000","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3183:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextValue","id":"0:4569:7000","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3216:128","2:3217:1436"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4454:415":{"id":"0:4454:415","crate_id":0,"name":"clone","span":{"filename":"src/builder/value_parser.rs","begin":[1495,15],"end":[1495,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"BoolValueParser","id":"0:4451:2270","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2836":{"id":"0:2836","crate_id":0,"name":null,"span":{"filename":"src/parser/mod.rs","begin":[27,24],"end":[27,32]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"import","inner":{"source":"self::matches::OsValues","name":"OsValues","id":"0:4796:1683","glob":false}},"a:2:9532:7459-0:3904:1662":{"id":"a:2:9532:7459-0:3904:1662","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:9532:7459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3904:1662","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:852:9984":{"id":"5:852:9984","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23056:21798":{"id":"2:23056:21798","crate_id":2,"name":"Bits","span":null,"visibility":"default","docs":"Bit representation of this SIMD vector type.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"2:3834:693":{"id":"2:3834:693","crate_id":2,"name":"from_output","span":null,"visibility":"default","docs":"Constructs the type from its `Output` type.\n\nThis should be implemented consistently with the `branch` method\nsuch that applying the `?` operator will get back the original value:\n`Try::from_output(x).branch() --> ControlFlow::Continue(x)`.\n\n# Examples\n\n```\n#![feature(try_trait_v2)]\nuse std::ops::Try;\n\nassert_eq!(<Result<_, String> as Try>::from_output(3), Ok(3));\nassert_eq!(<Option<_> as Try>::from_output(4), Some(4));\nassert_eq!(\n    <std::ops::ControlFlow<String, _> as Try>::from_output(5),\n    std::ops::ControlFlow::Continue(5),\n);\n\n# fn make_question_mark_work() -> Option<()> {\nassert_eq!(Option::from_output(4)?, 4);\n# None }\n# make_question_mark_work();\n\n// This is used, for example, on the accumulator in `try_fold`:\nlet r = std::iter::empty().try_fold(4, |_, ()| -> Option<_> { unreachable!() });\nassert_eq!(r, Some(4));\n```","links":{},"attrs":["#[unstable(feature = \"try_trait_v2\", issue = \"84277\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["output",{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Try","id":"2:3831:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:470:4161":{"id":"0:470:4161","crate_id":0,"name":"get_help_heading","span":{"filename":"src/builder/arg.rs","begin":[4417,4],"end":[4419,5]},"visibility":"public","docs":"Get the help heading specified for this argument, if any","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:32244:69495":{"id":"2:32244:69495","crate_id":2,"name":"min_value","span":null,"visibility":"public","docs":"New code should prefer to use\n[`u64::MIN`] instead.\n\nReturns the smallest value that can be represented by this integer type.","links":{"`u64::MIN`":"2:32146:6772"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_promotable]","#[rustc_const_stable(feature = \"const_max_value\", since = \"1.32.0\")]","#[deprecated(since = \"TBD\", note =\n\"replaced by the `MIN` associated constant on this type\")]"],"deprecation":{"since":"TBD","note":"replaced by the `MIN` associated constant on this type"},"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1333:688":{"id":"0:1333:688","crate_id":0,"name":"from","span":{"filename":"src/builder/value_parser.rs","begin":[414,4],"end":[417,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["value",{"kind":"resolved_path","inner":{"name":"std::ops::RangeTo","id":"2:46232:201","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i64"}}],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2868-0:4707:2393":{"id":"b:2:2868-0:4707:2393","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2862:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AnyValueId","id":"0:4707:2393","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2870:27181"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1279:127":{"id":"0:1279:127","crate_id":0,"name":"Err","span":{"filename":"src/builder/value_hint.rs","begin":[76,4],"end":[76,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"String","id":"5:8479:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:1199:667":{"id":"0:1199:667","crate_id":0,"name":"fmt","span":{"filename":"src/builder/command.rs","begin":[5180,4],"end":[5182,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:10511:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1583:1671":{"id":"0:1583:1671","crate_id":0,"name":"Parser","span":{"filename":"src/builder/value_parser.rs","begin":[1970,4],"end":[1970,44]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:4427:2261","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i16"}}],"bindings":[]}}}}}},"1:9138:21757":{"id":"1:9138:21757","crate_id":1,"name":"sqrt","span":null,"visibility":"default","docs":"Produces a vector where every lane has the square root value\nof the equivalently-indexed lane in `self`","links":{},"attrs":["#[must_use =\n\"method returns a new vector and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:1034:21133":{"id":"1:1034:21133","crate_id":1,"name":"to_ascii_uppercase","span":null,"visibility":"default","docs":"Makes a copy of the value in its ASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`str::to_uppercase`].\n\n# Note\n\nThis method is deprecated in favor of the identically-named\ninherent methods on `u8`, `char`, `[u8]` and `str`.\n\n[`make_ascii_uppercase`]: AsciiExt::make_ascii_uppercase","links":{"`str::to_uppercase`":"5:6190:68479","AsciiExt::make_ascii_uppercase":"1:1037:21134"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.26.0","note":"use inherent methods instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"qualified_path","inner":{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"AsciiExt","id":"1:1031:1864","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:3979:3098":{"id":"0:3979:3098","crate_id":0,"name":"Global","span":{"filename":"src/builder/arg_settings.rs","begin":[138,4],"end":[138,10]},"visibility":"default","docs":"Deprecated, replaced with [`Arg::global`] and [`Arg::is_global_set`]\n\nDerive: replace `#[clap(setting = Global)]` with `#[clap(global = true)]`\n\nBuilder: replace `arg.setting(Global)` with `arg.global(true)`","links":{"`Arg::global`":"0:341:3097","`Arg::is_global_set`":"0:507:4200"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"2:3519:8790":{"id":"2:3519:8790","crate_id":2,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3521:184","2:3522:1252"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5436:6285":{"id":"1:5436:6285","crate_id":1,"name":"as_bytes","span":null,"visibility":"default","docs":"Gets the underlying byte view of the [`OsStr`] slice.\n\nSee the module documentation for an example.","links":{"`OsStr`":"1:2654:182"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:2:4104-0:4713:1665":{"id":"b:2:4104-0:4713:1665","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:4102:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4713:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:4106:1449"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:9119:917":{"id":"2:9119:917","crate_id":2,"name":"ne","span":null,"visibility":"default","docs":"Determines if the elements of this [`Iterator`] are unequal to those of\nanother.\n\n# Examples\n\n```\nassert_eq!([1].iter().ne([1].iter()), false);\nassert_eq!([1].iter().ne([1, 2].iter()), true);\n```","links":{"`Iterator`":"2:8873:159"},"attrs":["#[stable(feature = \"iter_order\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"I"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2920:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"IntoIterator","id":"2:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:827:5124":{"id":"0:827:5124","crate_id":0,"name":"disable_help_subcommand","span":{"filename":"src/builder/command.rs","begin":[1214,4],"end":[1220,5]},"visibility":"public","docs":"Disables the `help` [`subcommand`].\n\n# Examples\n\n```rust\n# use clap::{Command, ErrorKind};\nlet res = Command::new(\"myprog\")\n    .disable_help_subcommand(true)\n    // Normally, creating a subcommand causes a `help` subcommand to automatically\n    // be generated as well\n    .subcommand(Command::new(\"test\"))\n    .try_get_matches_from(vec![\n        \"myprog\", \"help\"\n    ]);\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind(), ErrorKind::UnknownArgument);\n```\n\n[`subcommand`]: crate::Command::subcommand()","links":{"crate::Command::subcommand()":"0:782:2012"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:1032:4342":{"id":"1:1032:4342","crate_id":1,"name":"Owned","span":null,"visibility":"default","docs":"Container type for copied ASCII characters.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":{"since":"1.26.0","note":"use inherent methods instead"},"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"2:9082:6960":{"id":"2:9082:6960","crate_id":2,"name":"rev","span":null,"visibility":"default","docs":"Reverses an iterator's direction.\n\nUsually, iterators iterate from left to right. After using `rev()`,\nan iterator will instead iterate from right to left.\n\nThis is only possible if the iterator has an end, so `rev()` only\nworks on [`DoubleEndedIterator`]s.\n\n# Examples\n\n```\nlet a = [1, 2, 3];\n\nlet mut iter = a.iter().rev();\n\nassert_eq!(iter.next(), Some(&3));\nassert_eq!(iter.next(), Some(&2));\nassert_eq!(iter.next(), Some(&1));\n\nassert_eq!(iter.next(), None);\n```","links":{"`DoubleEndedIterator`":"2:8716:121"},"attrs":["#[doc(alias = \"reverse\")]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Rev","id":"2:47044:9061","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedIterator","id":"2:8716:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8678:2117":{"id":"2:8678:2117","crate_id":2,"name":"Item","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"b:2:8676-0:4778:1685":{"id":"b:2:8676-0:4778:1685","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:4778:1685","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:8678:2117","2:8679:7847","2:8680:777"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"2:8681:8737":{"id":"2:8681:8737","crate_id":2,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8683:2926","2:8685:9949","2:8686:9950"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:5:6507-0:4241:1674":{"id":"b:5:6507-0:4241:1674","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10569:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:6505:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:4241:1674","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":["5:6509:1415"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3618:8736":{"id":"2:3618:8736","crate_id":2,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3619:585"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:385:3424":{"id":"0:385:3424","crate_id":0,"name":"forbid_empty_values","span":{"filename":"src/builder/arg.rs","begin":[1861,4],"end":[1867,5]},"visibility":"public","docs":"Deprecated, replaced with [`Arg::value_parser(NonEmptyStringValueParser::new())`]\n\nDerive: replace `#[clap(forbid_empty_values = true)]` with `#[clap(value_parser = NonEmptyStringValueParser::new())]`\n\nBuilder: replace `arg.forbid_empty_values(true)` with `arg.value_parser(NonEmptyStringValueParser::new())`","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4629:7063":{"id":"0:4629:7063","crate_id":0,"name":"DisplayHelpOnMissingArgumentOrSubcommand","span":{"filename":"src/error/kind.rs","begin":[360,4],"end":[360,44]},"visibility":"default","docs":"Occurs when either an argument or a [`Subcommand`] is required, as defined by\n[`Command::arg_required_else_help`] , but the user did not provide\none.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ErrorKind, };\nlet result = Command::new(\"prog\")\n    .arg_required_else_help(true)\n    .subcommand(Command::new(\"config\")\n        .about(\"Used for configuration\")\n        .arg(Arg::new(\"config_file\")\n            .help(\"The configuration file to use\")))\n    .try_get_matches_from(vec![\"prog\"]);\nassert!(result.is_err());\nassert_eq!(result.unwrap_err().kind(), ErrorKind::DisplayHelpOnMissingArgumentOrSubcommand);\n```\n\n[`Subcommand`]: crate::Subcommand\n[`Command::arg_required_else_help`]: crate::Command::arg_required_else_help","links":{"crate::Subcommand":"0:170:1672","crate::Command::arg_required_else_help":"0:878:5415"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"0:2839":{"id":"0:2839","crate_id":0,"name":null,"span":{"filename":"src/parser/mod.rs","begin":[27,34],"end":[27,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"import","inner":{"source":"self::matches::Values","name":"Values","id":"0:4778:1685","glob":false}},"0:1019:5969":{"id":"0:1019:5969","crate_id":0,"name":"is_subcommand_precedence_over_arg_set","span":{"filename":"src/builder/command.rs","begin":[3805,4],"end":[3807,5]},"visibility":"public","docs":"Report whether [`Command::subcommand_precedence_over_arg`] is set","links":{"`Command::subcommand_precedence_over_arg`":"0:910:5702"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6333:28895":{"id":"1:6333:28895","crate_id":1,"name":"as_pthread_t","span":null,"visibility":"default","docs":"Extracts the raw pthread_t without taking ownership","links":{},"attrs":["#[stable(feature = \"thread_extensions\", since = \"1.9.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:842:1915":{"id":"0:842:1915","crate_id":0,"name":"author","span":{"filename":"src/builder/command.rs","begin":[1469,4],"end":[1472,5]},"visibility":"public","docs":"Sets the author(s) for the help message.\n\n**Pro-tip:** Use `clap`s convenience macro [`crate_authors!`] to\nautomatically set your application's author(s) to the same thing as your\ncrate at compile time.\n\n# Examples\n\n```no_run\n# use clap::Command;\nCommand::new(\"myprog\")\n     .author(\"Me, me@mymain.com\")\n# ;\n```\n[`crate_authors!`]: ./macro.crate_authors!.html","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["author",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6643:28867":{"id":"1:6643:28867","crate_id":1,"name":"into_raw_fd","span":null,"visibility":"default","docs":"Consumes this object, returning the raw underlying file descriptor.\n\nThis function is typically used to **transfer ownership** of the underlying\nfile descriptor to the caller. When used in this way, callers are then the unique\nowners of the file descriptor and must close it once it's no longer needed.\n\nHowever, transferring ownership is not strictly required. Use a\n[`Into<OwnedFd>::into`] implementation for an API which strictly\ntransfers ownership.\n\n# Example\n\n```no_run\nuse std::fs::File;\n# use std::io;\n#[cfg(unix)]\nuse std::os::unix::io::{IntoRawFd, RawFd};\n#[cfg(target_os = \"wasi\")]\nuse std::os::wasi::io::{IntoRawFd, RawFd};\n\nlet f = File::open(\"foo.txt\")?;\n#[cfg(any(unix, target_os = \"wasi\"))]\nlet raw_fd: RawFd = f.into_raw_fd();\n# Ok::<(), io::Error>(())\n```","links":{"`Into<OwnedFd>::into`":"2:3179:2391"},"attrs":["#[stable(feature = \"into_raw_os\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"i32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:3503:2032":{"id":"2:3503:2032","crate_id":2,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3505:184","2:3506:360"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13712:1916":{"id":"2:13712:1916","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3203-0:4351:1680":{"id":"b:2:3203-0:4351:1680","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:4351:1680","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3206:2391"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:820:1575":{"id":"0:820:1575","crate_id":0,"name":"color","span":{"filename":"src/builder/command.rs","begin":[1032,4],"end":[1043,5]},"visibility":"public","docs":"Sets when to color output.\n\n**NOTE:** This choice is propagated to all child subcommands.\n\n**NOTE:** Default behaviour is [`ColorChoice::Auto`].\n\n# Examples\n\n```no_run\n# use clap::{Command, ColorChoice};\nCommand::new(\"myprog\")\n    .color(ColorChoice::Never)\n    .get_matches();\n```\n[`ColorChoice::Auto`]: crate::ColorChoice::Auto","links":{"crate::ColorChoice::Auto":"0:5071:2047"},"attrs":["#[cfg(feature = \"color\")]","#[inline]","#[must_use]","#![allow(deprecated)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["color",{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:5070:1667","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13805:67835":{"id":"2:13805:67835","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3411:6205-0:4707:2393":{"id":"a:2:3411:6205-0:4707:2393","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:3411:6205","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AnyValueId","id":"0:4707:2393","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:23071:21812":{"id":"2:23071:21812","crate_id":2,"name":"copysign","span":null,"visibility":"default","docs":"Returns each lane with the magnitude of `self` and the sign of `sign`.\n\nFor any lane containing a `NAN`, a `NAN` with the sign of `sign` is returned.","links":{},"attrs":["#[must_use =\n\"method returns a new vector and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["sign",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:5:848-0:4569:7000":{"id":"b:5:848-0:4569:7000","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:844:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextValue","id":"0:4569:7000","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:850:4342","5:851:4983","5:852:9984"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13766:64113":{"id":"2:13766:64113","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"`DoubleEndedIterator`":"2:8716:121","self::pattern":"2:13336:8923","str::split":"2:13760:6983","prim@char":"1:15876:8642"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:49808:8946","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13346:8917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13346:8917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13361:8918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4723":{"id":"0:4723","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[67,23],"end":[67,30]},"visibility":{"restricted":{"parent":"0:2092:7461","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:3254:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4713:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4724:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:5556:10977":{"id":"1:5556:10977","crate_id":1,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5557:28834","1:5558:28835","1:5559:28836","1:5560:28837"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:2868-0:3968:1678":{"id":"b:2:2868-0:3968:1678","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2862:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgSettings","id":"0:3968:1678","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2870:27181"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:32197:66557":{"id":"2:32197:66557","crate_id":2,"name":"wrapping_div","span":null,"visibility":"public","docs":"Wrapping (modular) division. Computes `self / rhs`.\nWrapped division on unsigned types is just normal division.\nThere's no way wrapping could ever happen.\nThis function exists, so that all operations\nare accounted for in the wrapping operations.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(100u64.wrapping_div(10), 10);\n```","links":{},"attrs":["#[stable(feature = \"num_wrapping\", since = \"1.2.0\")]","#[rustc_const_stable(feature = \"const_wrapping_int_methods\", since =\n\"1.52.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2974:720":{"id":"2:2974:720","crate_id":2,"name":"gt","span":null,"visibility":"default","docs":"This method tests greater than (for `self` and `other`) and is used by the `>` operator.\n\n# Examples\n\n```\nlet result = 1.0 > 2.0;\nassert_eq!(result, false);\n\nlet result = 2.0 > 2.0;\nassert_eq!(result, false);\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Rhs"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1278":{"id":"0:1278","crate_id":0,"name":null,"span":{"filename":"src/builder/value_hint.rs","begin":[75,0],"end":[95,1]},"visibility":{"restricted":{"parent":"0:1272:2256","path":"::builder::value_hint"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromStr","id":"2:13275:1861","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:4351:1680","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1279:127","0:1280:1862"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4796:1683":{"id":"0:4796:1683","crate_id":0,"name":"OsValues","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1740,0],"end":[1744,1]},"visibility":"public","docs":"Deprecated, replaced with [`ArgMatches::get_many()`]","links":{"`ArgMatches::get_many()`":"0:2165:7548"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:2:9533:7458-0:4796:1683","a:2:9532:7459-0:4796:1683","a:2:3382:225-0:4796:1683","a:2:3370:216-0:4796:1683","a:2:3411:6205-0:4796:1683","b:2:8676-0:4796:1683","b:2:4104-0:4796:1683","b:2:2865-0:4796:1683","b:2:3203-0:4796:1683","b:2:3207-0:4796:1683","b:2:3218-0:4796:1683","b:2:2868-0:4796:1683","b:2:3213-0:4796:1683","b:5:848-0:4796:1683","0:4800","0:4803","0:2334","0:2339","0:2342","0:2344"]}},"0:1726":{"id":"0:1726","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[34,0],"end":[34,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"value_hint::ValueHint","name":"ValueHint","id":"0:4351:1680","glob":false}},"1:6473:15085":{"id":"1:6473:15085","crate_id":1,"name":"st_mtime_nsec","span":null,"visibility":"default","docs":"Returns the last modification time of the file, in nanoseconds since [`st_mtime`].\n\n[`st_mtime`]: Self::st_mtime\n\n# Examples\n\n```no_run\nuse std::fs;\nuse std::io;\nuse std::os::linux::fs::MetadataExt;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    println!(\"{}\", meta.st_mtime_nsec());\n    Ok(())\n}\n```","links":{"Self::st_mtime":"1:6472:15084"},"attrs":["#[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:165:2181":{"id":"0:165:2181","crate_id":0,"name":"update_from_arg_matches","span":{"filename":"src/derive.rs","begin":[357,4],"end":[357,85]},"visibility":"default","docs":"Assign values from `ArgMatches` to `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["matches",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4713:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4647:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:915:5825":{"id":"0:915:5825","crate_id":0,"name":"subcommand_help_heading","span":{"filename":"src/builder/command.rs","begin":[3287,4],"end":[3293,5]},"visibility":"public","docs":"Sets the help heading used for subcommands when printing usage and help.\n\nBy default, this is \"SUBCOMMANDS\".\n\nSee also [`Command::subcommand_value_name`]\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg};\nCommand::new(\"myprog\")\n    .subcommand(Command::new(\"sub1\"))\n    .print_help()\n# ;\n```\n\nwill produce\n\n```text\nmyprog\n\nUSAGE:\n    myprog [SUBCOMMAND]\n\nOPTIONS:\n    -h, --help       Print help information\n    -V, --version    Print version information\n\nSUBCOMMANDS:\n    help    Print this message or the help of the given subcommand(s)\n    sub1\n```\n\nbut usage of `subcommand_help_heading`\n\n```no_run\n# use clap::{Command, Arg};\nCommand::new(\"myprog\")\n    .subcommand(Command::new(\"sub1\"))\n    .subcommand_help_heading(\"THINGS\")\n    .print_help()\n# ;\n```\n\nwill produce\n\n```text\nmyprog\n\nUSAGE:\n    myprog [SUBCOMMAND]\n\nOPTIONS:\n    -h, --help       Print help information\n    -V, --version    Print version information\n\nTHINGS:\n    help    Print this message or the help of the given subcommand(s)\n    sub1\n```","links":{"`Command::subcommand_value_name`":"0:913:4803"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["heading",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:32174:69441":{"id":"2:32174:69441","crate_id":2,"name":"checked_rem_euclid","span":null,"visibility":"public","docs":"Checked Euclidean modulo. Computes `self.rem_euclid(rhs)`, returning `None`\nif `rhs == 0`.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(5u64.checked_rem_euclid(2), Some(1));\nassert_eq!(5u64.checked_rem_euclid(0), None);\n```","links":{},"attrs":["#[stable(feature = \"euclidean_division\", since = \"1.38.0\")]","#[rustc_const_stable(feature = \"const_euclidean_int_methods\", since =\n\"1.52.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3382:225-0:4778:1685":{"id":"a:2:3382:225-0:4778:1685","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:4778:1685","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:23772:18236":{"id":"2:23772:18236","crate_id":2,"name":"SimdOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23773:21814","2:23774:21813","2:23775:21815"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdPartialOrd","id":"2:23767:11343","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:823:5104":{"id":"0:823:5104","crate_id":0,"name":"disable_version_flag","span":{"filename":"src/builder/command.rs","begin":[1108,4],"end":[1114,5]},"visibility":"public","docs":"Disables `-V` and `--version` flag.\n\n# Examples\n\n```rust\n# use clap::{Command, ErrorKind};\nlet res = Command::new(\"myprog\")\n    .disable_version_flag(true)\n    .try_get_matches_from(vec![\n        \"myprog\", \"-V\"\n    ]);\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind(), ErrorKind::UnknownArgument);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"23:22:9122":{"id":"23:22:9122","crate_id":23,"name":"Equivalent","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["23:24:9116"],"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3750:6566":{"id":"2:3750:6566","crate_id":2,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3752:6765","2:3753:6770","2:3754:2031"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3466:8778":{"id":"2:3466:8778","crate_id":2,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3467:184","2:3468:923"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1774":{"id":"0:1774","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[50,0],"end":[50,42]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"value_parser::OsStringValueParser","name":"OsStringValueParser","id":"0:4398:2275","glob":false}},"25:105:1545":{"id":"25:105:1545","crate_id":25,"name":"width","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.15.1/src/core.rs","begin":[199,4],"end":[199,27]},"visibility":"default","docs":"Displayed width of word represented by this fragment.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:3923:611":{"id":"0:3923:611","crate_id":0,"name":"eq","span":{"filename":"src/builder/arg_group.rs","begin":[80,25],"end":[80,34]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3904:1662","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1537":{"id":"0:1537","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1784,0],"end":[1789,1]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"NonEmptyStringValueParser","id":"0:4469:2274","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1538:930"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13775:64115":{"id":"2:13775:64115","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"str::rsplitn":"2:13778:64117","self::pattern":"2:13336:8923","prim@char":"1:15876:8642"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:49894:8949","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13346:8917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3596:550":{"id":"2:3596:550","crate_id":2,"name":"deref","span":null,"visibility":"default","docs":"Dereferences the value.","links":{},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"deref_method\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Deref","id":"2:3594:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:32226:69483":{"id":"2:32226:69483","crate_id":2,"name":"checked_next_multiple_of","span":null,"visibility":"public","docs":"Calculates the smallest value greater than or equal to `self` that\nis a multiple of `rhs`. Returns `None` if `rhs` is zero or the\noperation would result in overflow.\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(int_roundings)]\nassert_eq!(16_u64.checked_next_multiple_of(8), Some(16));\nassert_eq!(23_u64.checked_next_multiple_of(8), Some(24));\nassert_eq!(1_u64.checked_next_multiple_of(0), None);\nassert_eq!(u64::MAX.checked_next_multiple_of(2), None);\n```","links":{},"attrs":["#[unstable(feature = \"int_roundings\", issue = \"88581\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6192:8309":{"id":"5:6192:8309","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8479:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8479:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4380":{"id":"0:4380","crate_id":0,"name":null,"span":{"filename":"src/builder/value_hint.rs","begin":[27,16],"end":[27,25]},"visibility":{"restricted":{"parent":"0:1272:2256","path":"::builder::value_hint"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:3378:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:4351:1680","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:9018:9971":{"id":"2:9018:9971","crate_id":2,"name":"try_find","span":null,"visibility":"default","docs":"Applies function to the elements of iterator and returns\nthe first true result or the first error.\n\nThe return type of this method depends on the return type of the closure.\nIf you return `Result<bool, E>` from the closure, you'll get a `Result<Option<Self::Item>; E>`.\nIf you return `Option<bool>` from the closure, you'll get an `Option<Option<Self::Item>>`.\n\n# Examples\n\n```\n#![feature(try_find)]\n\nlet a = [\"1\", \"2\", \"lol\", \"NaN\", \"5\"];\n\nlet is_my_num = |s: &str, search: i32| -> Result<bool, std::num::ParseIntError> {\n    Ok(s.parse::<i32>()?  == search)\n};\n\nlet result = a.iter().try_find(|&&s| is_my_num(s, 2));\nassert_eq!(result, Ok(Some(&\"2\")));\n\nlet result = a.iter().try_find(|&&s| is_my_num(s, 5));\nassert!(result.is_err());\n```\n\nThis also supports other types which implement `Try`, not just `Result`.\n```\n#![feature(try_find)]\n\nuse std::num::NonZeroU32;\nlet a = [3, 5, 7, 4, 9, 0, 11];\nlet result = a.iter().try_find(|&&x| NonZeroU32::new(x).map(|y| y.is_power_of_two()));\nassert_eq!(result, Some(Some(&4)));\nlet result = a.iter().take(3).try_find(|&&x| NonZeroU32::new(x).map(|y| y.is_power_of_two()));\nassert_eq!(result, Some(None));\nlet result = a.iter().rev().try_find(|&&x| NonZeroU32::new(x).map(|y| y.is_power_of_two()));\nassert_eq!(result, None);\n```","links":{},"attrs":["#[unstable(feature = \"try_find\", reason = \"new API\", issue = \"63178\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"qualified_path","inner":{"name":"TryType","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"R"},"trait":{"name":"Try","id":"2:3831:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"trait":{"name":"Residual","id":"2:3842:8800","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}}}],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3624:132","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"output":{"kind":"generic","inner":"R"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Try","id":"2:3831:230","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"primitive","inner":"bool"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"R"},"trait":{"name":"Try","id":"2:3831:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Residual","id":"2:3842:8800","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:996:5928":{"id":"0:996:5928","crate_id":0,"name":"is_disable_version_flag_set","span":{"filename":"src/builder/command.rs","begin":[3681,4],"end":[3683,5]},"visibility":"public","docs":"Report whether [`Command::disable_version_flag`] is set","links":{"`Command::disable_version_flag`":"0:823:5104"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3203-0:4294:1679":{"id":"b:2:3203-0:4294:1679","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:4294:1679","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":["2:3206:2391"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:10574:667":{"id":"2:10574:667","crate_id":2,"name":"fmt","span":null,"visibility":"default","docs":"Formats the value using the given formatter.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Formatter","id":"2:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"2:48872:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"a:2:3382:225-0:4427:2261":{"id":"a:2:3382:225-0:4427:2261","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:4427:2261","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1022":{"id":"0:1022","crate_id":0,"name":null,"span":{"filename":"src/builder/command.rs","begin":[3821,0],"end":[4139,1]},"visibility":{"restricted":{"parent":"0:649:1913","path":"::builder::command"}},"docs":"Deprecated","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:4241:1674","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3213-0:3968:1678":{"id":"b:2:3213-0:3968:1678","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3183:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgSettings","id":"0:3968:1678","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3216:128","2:3217:1436"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3364:108":{"id":"0:3364:108","crate_id":0,"name":"Count","span":{"filename":"src/builder/action.rs","begin":[218,4],"end":[218,9]},"visibility":"default","docs":"When encountered, increment a `u8` counter\n\nIf no [`default_value`][super::Arg::default_value] is set, it will be `0`.\n\nNo value is allowed. To optionally accept a value, see\n[`Arg::default_missing_value`][super::Arg::default_missing_value]\n\n# Examples\n\n```rust\n# use clap::Command;\n# use clap::Arg;\nlet cmd = Command::new(\"mycmd\")\n    .arg(\n        Arg::new(\"flag\")\n            .long(\"flag\")\n            .action(clap::ArgAction::Count)\n    );\n\nlet matches = cmd.clone().try_get_matches_from([\"mycmd\", \"--flag\", \"--flag\"]).unwrap();\nassert!(matches.contains_id(\"flag\"));\nassert_eq!(matches.occurrences_of(\"flag\"), 0);\nassert_eq!(\n    matches.get_count(\"flag\"),\n    2\n);\n\nlet matches = cmd.try_get_matches_from([\"mycmd\"]).unwrap();\nassert!(matches.contains_id(\"flag\"));\nassert_eq!(matches.occurrences_of(\"flag\"), 0);\nassert_eq!(\n    matches.get_count(\"flag\"),\n    0\n);\n```","links":{"super::Arg::default_missing_value":"0:399:3629","super::Arg::default_value":"0:394:2389"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"b:2:2865-0:4427:2261":{"id":"b:2:2865-0:4427:2261","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:4427:2261","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2867:2792"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:325:2912":{"id":"0:325:2912","crate_id":0,"name":"short_alias","span":{"filename":"src/builder/arg.rs","begin":[277,4],"end":[282,5]},"visibility":"public","docs":"Add an alias, which functions as a hidden short flag.\n\nThis is more efficient, and easier than creating multiple hidden arguments as one only\nneeds to check for the existence of this command, and not all variants.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n            .arg(Arg::new(\"test\")\n            .short('t')\n            .short_alias('e')\n            .takes_value(true))\n       .get_matches_from(vec![\n            \"prog\", \"-e\", \"cool\"\n        ]);\nassert!(m.contains_id(\"test\"));\nassert_eq!(m.value_of(\"test\"), Some(\"cool\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["name",{"kind":"primitive","inner":"char"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4468:667":{"id":"0:4468:667","crate_id":0,"name":"fmt","span":{"filename":"src/builder/value_parser.rs","begin":[1691,22],"end":[1691,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10511:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5535:28829":{"id":"1:5535:28829","crate_id":1,"name":"ctime","span":null,"visibility":"default","docs":"Returns the last status change time of the file, in seconds since Unix Epoch.\n\n# Examples\n\n```no_run\nuse std::fs;\nuse std::os::unix::fs::MetadataExt;\nuse std::io;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    let last_status_change_time = meta.ctime();\n    Ok(())\n}\n```","links":{},"attrs":["#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"a:2:3382:225-0:4594:1681":{"id":"a:2:3382:225-0:4594:1681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4594:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:3285-0:4647:128":{"id":"b:2:3285-0:4647:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"2:3278:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Provider","id":"2:4153:9022","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4647:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3287:10132"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"E"}}},"0:4806:1682":{"id":"0:4806:1682","crate_id":0,"name":"Indices","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1801,0],"end":[1804,1]},"visibility":"public","docs":"Iterate over indices for where an argument appeared when parsing, via [`ArgMatches::indices_of`]\n\n# Examples\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"myapp\")\n    .arg(Arg::new(\"output\")\n        .short('o')\n        .multiple_values(true)\n        .takes_value(true))\n    .get_matches_from(vec![\"myapp\", \"-o\", \"val1\", \"val2\"]);\n\nlet mut indices = m.indices_of(\"output\").unwrap();\n\nassert_eq!(indices.next(), Some(2));\nassert_eq!(indices.next(), Some(3));\nassert_eq!(indices.next(), None);\n```\n[`ArgMatches::indices_of`]: ArgMatches::indices_of()","links":{"ArgMatches::indices_of()":"0:2211:7748"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:2:9533:7458-0:4806:1682","a:2:9532:7459-0:4806:1682","a:2:3382:225-0:4806:1682","a:2:3370:216-0:4806:1682","a:2:3411:6205-0:4806:1682","b:2:8676-0:4806:1682","b:2:4104-0:4806:1682","b:2:2865-0:4806:1682","b:2:3203-0:4806:1682","b:2:3207-0:4806:1682","b:2:3218-0:4806:1682","b:2:2868-0:4806:1682","b:2:3213-0:4806:1682","b:5:848-0:4806:1682","0:4810","0:4813","0:2349","0:2354","0:2357","0:2359"]}},"0:2447":{"id":"0:2447","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/mod.rs","begin":[8,0],"end":[8,31]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"arg_matches::ValuesRef","name":"ValuesRef","id":"0:4755:7386","glob":false}},"0:879:3410":{"id":"0:879:3410","crate_id":0,"name":"allow_hyphen_values","span":{"filename":"src/builder/command.rs","begin":[2101,4],"end":[2107,5]},"visibility":"public","docs":"Specifies that leading hyphens are allowed in all argument *values* (e.g. `-10`).\n\nOtherwise they will be parsed as another flag or option.  See also\n[`Command::allow_negative_numbers`].\n\n**NOTE:** Use this setting with caution as it silences certain circumstances which would\notherwise be an error (such as accidentally forgetting to specify a value for leading\noption). It is preferred to set this on a per argument basis, via [`Arg::allow_hyphen_values`].\n\n# Examples\n\n```rust\n# use clap::{Arg, Command};\n// Imagine you needed to represent negative numbers as well, such as -10\nlet m = Command::new(\"nums\")\n    .allow_hyphen_values(true)\n    .arg(Arg::new(\"neg\"))\n    .get_matches_from(vec![\n        \"nums\", \"-20\"\n    ]);\n\nassert_eq!(m.value_of(\"neg\"), Some(\"-20\"));\n# ;\n```\n[`Arg::allow_hyphen_values`]: crate::Arg::allow_hyphen_values()","links":{"crate::Arg::allow_hyphen_values()":"0:383:3410","`Command::allow_negative_numbers`":"0:880:5437"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4728":{"id":"0:4728","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[67,43],"end":[67,45]},"visibility":{"restricted":{"parent":"0:2092:7461","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:3379:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4713:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"1:6236:15146":{"id":"1:6236:15146","crate_id":1,"name":"signal","span":null,"visibility":"default","docs":"If the process was terminated by a signal, returns that signal.\n\nIn other words, if `WIFSIGNALED`, this returns `WTERMSIG`.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:8197:27617":{"id":"2:8197:27617","crate_id":2,"name":"steps_between","span":null,"visibility":"default","docs":"Returns the number of *successor* steps required to get from `start` to `end`.\n\nReturns `None` if the number of steps would overflow `usize`\n(or is infinite, or if `end` would never be reached).\n\n# Invariants\n\nFor any `a`, `b`, and `n`:\n\n* `steps_between(&a, &b) == Some(n)` if and only if `Step::forward_checked(&a, n) == Some(b)`\n* `steps_between(&a, &b) == Some(n)` if and only if `Step::backward_checked(&b, n) == Some(a)`\n* `steps_between(&a, &b) == Some(n)` only if `a <= b`\n  * Corollary: `steps_between(&a, &b) == Some(0)` if and only if `a == b`\n  * Note that `a <= b` does _not_ imply `steps_between(&a, &b) != None`;\n    this is the case when it would require more than `usize::MAX` steps to get to `b`\n* `steps_between(&a, &b) == None` if `a > b`","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["start",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["end",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:894:4790":{"id":"0:894:4790","crate_id":0,"name":"short_flag_aliases","span":{"filename":"src/builder/command.rs","begin":[2491,4],"end":[2497,5]},"visibility":"public","docs":"Add aliases, which function as \"hidden\" short flag subcommands.\n\nThese will automatically dispatch as if this subcommand was used. This is more efficient,\nand easier than creating multiple hidden subcommands as one only needs to check for the\nexistence of this command, and not all variants.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, };\nlet m = Command::new(\"myprog\")\n    .subcommand(Command::new(\"test\").short_flag('t')\n        .short_flag_aliases(&['a', 'b', 'c']))\n        .arg(Arg::new(\"input\")\n            .help(\"the file to add\")\n            .required(false))\n    .get_matches_from(vec![\"myprog\", \"-a\"]);\nassert_eq!(m.subcommand_name(), Some(\"test\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["names",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"char"}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1569:2257":{"id":"0:1569:2257","crate_id":0,"name":"value_parser","span":{"filename":"src/builder/value_parser.rs","begin":[1935,4],"end":[1937,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"qualified_path","inner":{"name":"Parser","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:1558:2266","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:425:3887":{"id":"0:425:3887","crate_id":0,"name":"default_value_if","span":{"filename":"src/builder/arg.rs","begin":[3365,4],"end":[3372,5]},"visibility":"public","docs":"Specifies the value of the argument if `arg` has been used at runtime.\n\nIf `val` is set to `None`, `arg` only needs to be present. If `val` is set to `\"some-val\"`\nthen `arg` must be present at runtime **and** have the value `val`.\n\nIf `default` is set to `None`, `default_value` will be removed.\n\n**NOTE:** This setting is perfectly compatible with [`Arg::default_value`] but slightly\ndifferent. `Arg::default_value` *only* takes effect when the user has not provided this arg\nat runtime. This setting however only takes effect when the user has not provided a value at\nruntime **and** these other conditions are met as well. If you have set `Arg::default_value`\nand `Arg::default_value_if`, and the user **did not** provide this arg at runtime, nor were\nthe conditions met for `Arg::default_value_if`, the `Arg::default_value` will be applied.\n\n**NOTE:** This implicitly sets [`Arg::takes_value(true)`].\n\n# Examples\n\nFirst we use the default value only if another arg is present at runtime.\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"flag\")\n        .long(\"flag\"))\n    .arg(Arg::new(\"other\")\n        .long(\"other\")\n        .default_value_if(\"flag\", None, Some(\"default\")))\n    .get_matches_from(vec![\n        \"prog\", \"--flag\"\n    ]);\n\nassert_eq!(m.value_of(\"other\"), Some(\"default\"));\n```\n\nNext we run the same test, but without providing `--flag`.\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"flag\")\n        .long(\"flag\"))\n    .arg(Arg::new(\"other\")\n        .long(\"other\")\n        .default_value_if(\"flag\", None, Some(\"default\")))\n    .get_matches_from(vec![\n        \"prog\"\n    ]);\n\nassert_eq!(m.value_of(\"other\"), None);\n```\n\nNow lets only use the default value if `--opt` contains the value `special`.\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"opt\")\n        .takes_value(true)\n        .long(\"opt\"))\n    .arg(Arg::new(\"other\")\n        .long(\"other\")\n        .default_value_if(\"opt\", Some(\"special\"), Some(\"default\")))\n    .get_matches_from(vec![\n        \"prog\", \"--opt\", \"special\"\n    ]);\n\nassert_eq!(m.value_of(\"other\"), Some(\"default\"));\n```\n\nWe can run the same test and provide any value *other than* `special` and we won't get a\ndefault value.\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"opt\")\n        .takes_value(true)\n        .long(\"opt\"))\n    .arg(Arg::new(\"other\")\n        .long(\"other\")\n        .default_value_if(\"opt\", Some(\"special\"), Some(\"default\")))\n    .get_matches_from(vec![\n        \"prog\", \"--opt\", \"hahaha\"\n    ]);\n\nassert_eq!(m.value_of(\"other\"), None);\n```\n\nIf we want to unset the default value for an Arg based on the presence or\nvalue of some other Arg.\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"flag\")\n        .long(\"flag\"))\n    .arg(Arg::new(\"other\")\n        .long(\"other\")\n        .default_value(\"default\")\n        .default_value_if(\"flag\", None, None))\n    .get_matches_from(vec![\n        \"prog\", \"--flag\"\n    ]);\n\nassert_eq!(m.value_of(\"other\"), None);\n```\n[`Arg::takes_value(true)`]: Arg::takes_value()\n[`Arg::default_value`]: Arg::default_value()","links":{"Arg::takes_value()":"0:351:1949","Arg::default_value()":"0:394:2389"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["arg_id",{"kind":"generic","inner":"T"}],["val",{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}}],["default",{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Key","id":"0:3239:2795","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3904:1662":{"id":"0:3904:1662","crate_id":0,"name":"ArgGroup","span":{"filename":"src/builder/arg_group.rs","begin":[81,0],"end":[89,1]},"visibility":"public","docs":"Family of related [arguments].\n\nBy placing arguments in a logical group, you can create easier requirement and\nexclusion rules instead of having to list each argument individually, or when you want a rule\nto apply \"any but not all\" arguments.\n\nFor instance, you can make an entire `ArgGroup` required. If [`ArgGroup::multiple(true)`] is\nset, this means that at least one argument from that group must be present. If\n[`ArgGroup::multiple(false)`] is set (the default), one and *only* one must be present.\n\nYou can also do things such as name an entire `ArgGroup` as a [conflict] or [requirement] for\nanother argument, meaning any of the arguments that belong to that group will cause a failure\nif present, or must be present respectively.\n\nPerhaps the most common use of `ArgGroup`s is to require one and *only* one argument to be\npresent out of a given set. Imagine that you had multiple arguments, and you want one of them\nto be required, but making all of them required isn't feasible because perhaps they conflict\nwith each other. For example, lets say that you were building an application where one could\nset a given version number by supplying a string with an option argument, i.e.\n`--set-ver v1.2.3`, you also wanted to support automatically using a previous version number\nand simply incrementing one of the three numbers. So you create three flags `--major`,\n`--minor`, and `--patch`. All of these arguments shouldn't be used at one time but you want to\nspecify that *at least one* of them is used. For this, you can create a group.\n\nFinally, you may use `ArgGroup`s to pull a value from a group of arguments when you don't care\nexactly which argument was actually used at runtime.\n\n# Examples\n\nThe following example demonstrates using an `ArgGroup` to ensure that one, and only one, of\nthe arguments from the specified group is present at runtime.\n\n```rust\n# use clap::{Command, arg, ArgGroup, ErrorKind};\nlet result = Command::new(\"cmd\")\n    .arg(arg!(--\"set-ver\" <ver> \"set the version manually\").required(false))\n    .arg(arg!(--major           \"auto increase major\"))\n    .arg(arg!(--minor           \"auto increase minor\"))\n    .arg(arg!(--patch           \"auto increase patch\"))\n    .group(ArgGroup::new(\"vers\")\n         .args(&[\"set-ver\", \"major\", \"minor\", \"patch\"])\n         .required(true))\n    .try_get_matches_from(vec![\"cmd\", \"--major\", \"--patch\"]);\n// Because we used two args in the group it's an error\nassert!(result.is_err());\nlet err = result.unwrap_err();\nassert_eq!(err.kind(), ErrorKind::ArgumentConflict);\n```\nThis next example shows a passing parse of the same scenario\n\n```rust\n# use clap::{Command, arg, ArgGroup};\nlet result = Command::new(\"cmd\")\n    .arg(arg!(--\"set-ver\" <ver> \"set the version manually\").required(false))\n    .arg(arg!(--major           \"auto increase major\"))\n    .arg(arg!(--minor           \"auto increase minor\"))\n    .arg(arg!(--patch           \"auto increase patch\"))\n    .group(ArgGroup::new(\"vers\")\n         .args(&[\"set-ver\", \"major\", \"minor\",\"patch\"])\n         .required(true))\n    .try_get_matches_from(vec![\"cmd\", \"--major\"]);\nassert!(result.is_ok());\nlet matches = result.unwrap();\n// We may not know which of the args was used, so we can test for the group...\nassert!(matches.contains_id(\"vers\"));\n// we could also alternatively check each arg individually (not shown here)\n```\n[`ArgGroup::multiple(true)`]: ArgGroup::multiple()\n\n[`ArgGroup::multiple(false)`]: ArgGroup::multiple()\n[arguments]: crate::Arg\n[conflict]: crate::Arg::conflicts_with()\n[requirement]: crate::Arg::requires()","links":{"crate::Arg::conflicts_with()":"0:457:4060","ArgGroup::multiple()":"0:618:2014","crate::Arg::requires()":"0:338:2822","crate::Arg":"0:3818:1661"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:605","a:2:9533:7458-0:3904:1662","a:2:9532:7459-0:3904:1662","a:2:3382:225-0:3904:1662","a:2:3370:216-0:3904:1662","a:2:3411:6205-0:3904:1662","b:2:4104-0:3904:1662","b:2:2865-0:3904:1662","b:2:3203-0:3904:1662","b:2:3207-0:3904:1662","b:2:3218-0:3904:1662","b:2:2868-0:3904:1662","b:2:3213-0:3904:1662","b:5:848-0:3904:1662","b:23:25-0:3904:1662","0:3913","0:3916","0:3919","0:3921","0:3924","0:3926","0:628","0:631"]}},"0:4383":{"id":"0:4383","crate_id":0,"name":null,"span":{"filename":"src/builder/value_hint.rs","begin":[27,27],"end":[27,29]},"visibility":{"restricted":{"parent":"0:1272:2256","path":"::builder::value_hint"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:3379:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:4351:1680","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3218-0:4351:1680":{"id":"b:2:3218-0:4351:1680","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:4351:1680","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3221:128","2:3222:1435"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1762":{"id":"0:1762","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[46,0],"end":[46,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"value_parser::BoolishValueParser","name":"BoolishValueParser","id":"0:4463:2271","glob":false}},"2:3221:128":{"id":"2:3221:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:39109:8026","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"2:13714:67821":{"id":"2:13714:67821","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3218-0:4778:1685":{"id":"b:2:3218-0:4778:1685","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:4778:1685","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3221:128","2:3222:1435"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3337":{"id":"0:3337","crate_id":0,"name":null,"span":{"filename":"src/util/color.rs","begin":[58,0],"end":[62,1]},"visibility":{"restricted":{"parent":"0:3336:1575","path":"::util::color"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:3254:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:5070:1667","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3338:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3924":{"id":"0:3924","crate_id":0,"name":null,"span":{"filename":"src/builder/arg_group.rs","begin":[80,36],"end":[80,38]},"visibility":{"restricted":{"parent":"0:597:2251","path":"::builder::arg_group"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:3379:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3904:1662","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4647:128":{"id":"0:4647:128","crate_id":0,"name":"Error","span":{"filename":"src/error/mod.rs","begin":[40,0],"end":[54,1]},"visibility":"public","docs":"Command Line Argument Parser Error\n\nSee [`Command::error`] to create an error.\n\n[`Command::error`]: crate::Command::error","links":{"crate::Command::error":"0:788:1663"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":["0:4649:791","0:4650:7011"],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:1872","a:2:9533:7458-0:4647:128","a:2:9532:7459-0:4647:128","a:2:3382:225-0:4647:128","a:2:3370:216-0:4647:128","a:2:3411:6205-0:4647:128","b:2:4104-0:4647:128","b:2:2865-0:4647:128","b:2:3203-0:4647:128","b:2:3207-0:4647:128","b:2:3218-0:4647:128","b:2:2868-0:4647:128","b:2:3285-0:4647:128","b:2:3213-0:4647:128","b:5:6507-0:4647:128","0:4651","0:1929","0:1931","0:1933","0:1936"]}},"0:3444:2578":{"id":"0:3444:2578","crate_id":0,"name":"PropagateVersion","span":{"filename":"src/builder/app_settings.rs","begin":[601,4],"end":[601,20]},"visibility":"default","docs":"Deprecated, replaced with [`Command::propagate_version`] and [`Command::is_propagate_version_set`]\n\nDerive: replace `#[clap(setting = PropagateVersion)]` with `#[clap(propagate_version = true)]`\n\nBuilder: replace `cmd.setting(PropagateVersion)` with `cmd.propagate_version(true)`","links":{"`Command::propagate_version`":"0:824:5111","`Command::is_propagate_version_set`":"0:997:5930"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"a:2:9532:7459-0:4392:2263":{"id":"a:2:9532:7459-0:4392:2263","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:9532:7459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StringValueParser","id":"0:4392:2263","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1010:5954":{"id":"0:1010:5954","crate_id":0,"name":"is_allow_missing_positional_set","span":{"filename":"src/builder/command.rs","begin":[3752,4],"end":[3754,5]},"visibility":"public","docs":"Report whether [`Command::allow_missing_positional`] is set","links":{"`Command::allow_missing_positional`":"0:882:5492"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3406:2466":{"id":"0:3406:2466","crate_id":0,"name":"InferLongArgs","span":{"filename":"src/builder/app_settings.rs","begin":[229,4],"end":[229,17]},"visibility":"default","docs":"Deprecated, replaced with [`Command::infer_long_args`]\n\nDerive: replace `#[clap(setting = InferLongArgs)]` with `#[clap(infer_long_args = true)]`\n\nBuilder: replace `cmd.setting(InferLongArgs)` with `cmd.infer_long_args(true)`","links":{"`Command::infer_long_args`":"0:832:5158"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"b:2:4104-0:4569:7000":{"id":"b:2:4104-0:4569:7000","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:4102:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextValue","id":"0:4569:7000","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:4106:1449"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:8910:6137":{"id":"2:8910:6137","crate_id":2,"name":"enumerate","span":null,"visibility":"default","docs":"Creates an iterator which gives the current iteration count as well as\nthe next value.\n\nThe iterator returned yields pairs `(i, val)`, where `i` is the\ncurrent index of iteration and `val` is the value returned by the\niterator.\n\n`enumerate()` keeps its count as a [`usize`]. If you want to count by a\ndifferent sized integer, the [`zip`] function provides similar\nfunctionality.\n\n# Overflow Behavior\n\nThe method does no guarding against overflows, so enumerating more than\n[`usize::MAX`] elements either produces the wrong result or panics. If\ndebug assertions are enabled, a panic is guaranteed.\n\n# Panics\n\nThe returned iterator might panic if the to-be-returned index would\noverflow a [`usize`].\n\n[`zip`]: Iterator::zip\n\n# Examples\n\n```\nlet a = ['a', 'b', 'c'];\n\nlet mut iter = a.iter().enumerate();\n\nassert_eq!(iter.next(), Some((0, &'a')));\nassert_eq!(iter.next(), Some((1, &'b')));\nassert_eq!(iter.next(), Some((2, &'c')));\nassert_eq!(iter.next(), None);\n```","links":{"`usize`":"1:15899:8662","`usize::MAX`":"2:32349:6773","Iterator::zip":"2:8890:9044"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Enumerate","id":"2:46945:9054","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6641:28863":{"id":"1:6641:28863","crate_id":1,"name":"from_raw_fd","span":null,"visibility":"default","docs":"Constructs a new instance of `Self` from the given raw file\ndescriptor.\n\nThis function is typically used to **consume ownership** of the\nspecified file descriptor. When used in this way, the returned object\nwill take responsibility for closing it when the object goes out of\nscope.\n\nHowever, consuming ownership is not strictly required. Use a\n[`From<OwnedFd>::from`] implementation for an API which strictly\nconsumes ownership.\n\n# Safety\n\nThe `fd` passed in must be a valid and open file descriptor.\n\n# Example\n\n```no_run\nuse std::fs::File;\n# use std::io;\n#[cfg(unix)]\nuse std::os::unix::io::{FromRawFd, IntoRawFd, RawFd};\n#[cfg(target_os = \"wasi\")]\nuse std::os::wasi::io::{FromRawFd, IntoRawFd, RawFd};\n\nlet f = File::open(\"foo.txt\")?;\n# #[cfg(any(unix, target_os = \"wasi\"))]\nlet raw_fd: RawFd = f.into_raw_fd();\n// SAFETY: no other functions should call `from_raw_fd`, so there\n// is only one owner for the file descriptor.\n# #[cfg(any(unix, target_os = \"wasi\"))]\nlet f = unsafe { File::from_raw_fd(raw_fd) };\n# Ok::<(), io::Error>(())\n```","links":{"`From<OwnedFd>::from`":"2:3182:688"},"attrs":["#[stable(feature = \"from_raw_os\", since = \"1.1.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["fd",{"kind":"primitive","inner":"i32"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"0:4306":{"id":"0:4306","crate_id":0,"name":null,"span":{"filename":"src/builder/possible_value.rs","begin":[29,25],"end":[29,30]},"visibility":{"restricted":{"parent":"0:1203:2254","path":"::builder::possible_value"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:4294:1679","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":["0:4308:415"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:8685:9949":{"id":"2:8685:9949","crate_id":2,"name":"extend_one","span":null,"visibility":"default","docs":"Extends a collection with exactly one element.","links":{},"attrs":["#[unstable(feature = \"extend_one\", issue = \"72631\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["item",{"kind":"generic","inner":"A"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3213-0:4594:1681":{"id":"b:2:3213-0:4594:1681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3183:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4594:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3216:128","2:3217:1436"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3218-0:4404:2276":{"id":"b:2:3218-0:4404:2276","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PathBufValueParser","id":"0:4404:2276","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3221:128","2:3222:1435"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:194:2151":{"id":"0:194:2151","crate_id":0,"name":"into_app","span":{"filename":"src/derive.rs","begin":[530,4],"end":[532,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Command","id":"0:755:1660","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8888:5915":{"id":"2:8888:5915","crate_id":2,"name":"chain","span":null,"visibility":"default","docs":"Takes two iterators and creates a new iterator over both in sequence.\n\n`chain()` will return a new iterator which will first iterate over\nvalues from the first iterator and then over values from the second\niterator.\n\nIn other words, it links two iterators together, in a chain. 🔗\n\n[`once`] is commonly used to adapt a single value into a chain of\nother kinds of iteration.\n\n# Examples\n\nBasic usage:\n\n```\nlet a1 = [1, 2, 3];\nlet a2 = [4, 5, 6];\n\nlet mut iter = a1.iter().chain(a2.iter());\n\nassert_eq!(iter.next(), Some(&1));\nassert_eq!(iter.next(), Some(&2));\nassert_eq!(iter.next(), Some(&3));\nassert_eq!(iter.next(), Some(&4));\nassert_eq!(iter.next(), Some(&5));\nassert_eq!(iter.next(), Some(&6));\nassert_eq!(iter.next(), None);\n```\n\nSince the argument to `chain()` uses [`IntoIterator`], we can pass\nanything that can be converted into an [`Iterator`], not just an\n[`Iterator`] itself. For example, slices (`&[T]`) implement\n[`IntoIterator`], and so can be passed to `chain()` directly:\n\n```\nlet s1 = &[1, 2, 3];\nlet s2 = &[4, 5, 6];\n\nlet mut iter = s1.iter().chain(s2);\n\nassert_eq!(iter.next(), Some(&1));\nassert_eq!(iter.next(), Some(&2));\nassert_eq!(iter.next(), Some(&3));\nassert_eq!(iter.next(), Some(&4));\nassert_eq!(iter.next(), Some(&5));\nassert_eq!(iter.next(), Some(&6));\nassert_eq!(iter.next(), None);\n```\n\nIf you work with Windows API, you may wish to convert [`OsStr`] to `Vec<u16>`:\n\n```\n#[cfg(windows)]\nfn os_str_to_utf16(s: &std::ffi::OsStr) -> Vec<u16> {\n    use std::os::windows::ffi::OsStrExt;\n    s.encode_wide().chain(std::iter::once(0)).collect()\n}\n```\n\n[`once`]: crate::iter::once\n[`OsStr`]: ../../std/ffi/struct.OsStr.html","links":{"crate::iter::once":"2:8448:6173","`IntoIterator`":"2:8672:152","`Iterator`":"2:8873:159"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Chain","id":"2:46904:8990","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"qualified_path","inner":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"IntoIterator","id":"2:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5067:11016":{"id":"1:5067:11016","crate_id":1,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5068:7409","1:5069:21436"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:3368:2384":{"id":"0:3368:2384","crate_id":0,"name":"Version","span":{"filename":"src/builder/action.rs","begin":[269,4],"end":[269,11]},"visibility":"default","docs":"When encountered, display [`Command::version`][super::App::version]\n\nDepending on the flag, [`Command::long_version`][super::App::long_version] may be shown\n\n# Examples\n\n```rust\n# use clap::Command;\n# use clap::Arg;\nlet cmd = Command::new(\"mycmd\")\n    .version(\"1.0.0\")\n    .arg(\n        Arg::new(\"special-version\")\n            .long(\"special-version\")\n            .action(clap::ArgAction::Version)\n    );\n\n// Existing help still exists\nlet err = cmd.clone().try_get_matches_from([\"mycmd\", \"--version\"]).unwrap_err();\nassert_eq!(err.kind(), clap::error::ErrorKind::DisplayVersion);\n\n// New help available\nlet err = cmd.try_get_matches_from([\"mycmd\", \"--special-version\"]).unwrap_err();\nassert_eq!(err.kind(), clap::error::ErrorKind::DisplayVersion);\n```","links":{"super::App::long_version":"0:858:4784","super::App::version":"0:856:1526"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"2:13727:27266":{"id":"2:13727:27266","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11209:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11209:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:32242:69494":{"id":"2:32242:69494","crate_id":2,"name":"from_ne_bytes","span":null,"visibility":"public","docs":"Create a native endian integer value from its memory representation\nas a byte array in native endianness.\n\nAs the target platform's native endianness is used, portable code\nlikely wants to use [`from_be_bytes`] or [`from_le_bytes`], as\nappropriate instead.\n\n[`from_be_bytes`]: Self::from_be_bytes\n[`from_le_bytes`]: Self::from_le_bytes\n\n\n\n# Examples\n\n```\nlet value = u64::from_ne_bytes(if cfg!(target_endian = \"big\") {\n    [0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\n} else {\n    [0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\n});\nassert_eq!(value, 0x1234567890123456);\n```\n\nWhen starting from a slice rather than an array, fallible conversion APIs can be used:\n\n```\nfn read_ne_u64(input: &mut &[u8]) -> u64 {\n    let (int_bytes, rest) = input.split_at(std::mem::size_of::<u64>());\n    *input = rest;\n    u64::from_ne_bytes(int_bytes.try_into().unwrap())\n}\n```","links":{"Self::from_be_bytes":"2:32238:69492","Self::from_le_bytes":"2:32240:69493"},"attrs":["#[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]","#[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["bytes",{"kind":"array","inner":{"type":{"kind":"primitive","inner":"u8"},"len":"8"}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:32211:69469":{"id":"2:32211:69469","crate_id":2,"name":"overflowing_mul","span":null,"visibility":"public","docs":"Calculates the multiplication of `self` and `rhs`.\n\nReturns a tuple of the multiplication along with a boolean\nindicating whether an arithmetic overflow would occur. If an\noverflow would have occurred then the wrapped value is returned.\n\n# Examples\n\nBasic usage:\n\nPlease note that this example is shared between integer types.\nWhich explains why `u32` is used here.\n\n```\nassert_eq!(5u32.overflowing_mul(2), (10, false));\nassert_eq!(1_000_000_000u32.overflowing_mul(10), (1410065408, true));\n```","links":{},"attrs":["#[stable(feature = \"wrapping\", since = \"1.7.0\")]","#[rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                          without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"u64"},{"kind":"primitive","inner":"bool"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3217:1436":{"id":"2:3217:1436","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2960:9943":{"id":"2:2960:9943","crate_id":2,"name":"clamp","span":null,"visibility":"default","docs":"Restrict a value to a certain interval.\n\nReturns `max` if `self` is greater than `max`, and `min` if `self` is\nless than `min`. Otherwise this returns `self`.\n\n# Panics\n\nPanics if `min > max`.\n\n# Examples\n\n```\nassert!((-3).clamp(-2, 1) == -2);\nassert!(0.clamp(-2, 1) == 0);\nassert!(2.clamp(-2, 1) == 1);\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"clamp\", since = \"1.50.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["min",{"kind":"generic","inner":"Self"}],["max",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"PartialOrd","id":"2:2969:187","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:355:3240":{"id":"0:355:3240","crate_id":0,"name":"multiple_values","span":{"filename":"src/builder/arg.rs","begin":[1206,4],"end":[1212,5]},"visibility":"public","docs":"Specifies that the argument may have an unknown number of values\n\nWithout any other settings, this argument may appear only *once*.\n\nFor example, `--opt val1 val2` is allowed, but `--opt val1 val2 --opt val3` is not.\n\n**NOTE:** Setting this requires [`Arg::takes_value`].\n\n**WARNING:**\n\nSetting `multiple_values` for an argument that takes a value, but with no other details can\nbe dangerous in some circumstances. Because multiple values are allowed,\n`--option val1 val2 val3` is perfectly valid. Be careful when designing a CLI where\npositional arguments are *also* expected as `clap` will continue parsing *values* until one\nof the following happens:\n\n- It reaches the [maximum number of values]\n- It reaches a [specific number of values]\n- It finds another flag or option (i.e. something that starts with a `-`)\n- It reaches a [value terminator][Arg::value_terminator] is reached\n\nAlternatively, [require a delimiter between values][Arg::require_delimiter].\n\n**WARNING:**\n\nWhen using args with `multiple_values` and [`subcommands`], one needs to consider the\npossibility of an argument value being the same as a valid subcommand. By default `clap` will\nparse the argument in question as a value *only if* a value is possible at that moment.\nOtherwise it will be parsed as a subcommand. In effect, this means using `multiple_values` with no\nadditional parameters and a value that coincides with a subcommand name, the subcommand\ncannot be called unless another argument is passed between them.\n\nAs an example, consider a CLI with an option `--ui-paths=<paths>...` and subcommand `signer`\n\nThe following would be parsed as values to `--ui-paths`.\n\n```text\n$ program --ui-paths path1 path2 signer\n```\n\nThis is because `--ui-paths` accepts multiple values. `clap` will continue parsing values\nuntil another argument is reached and it knows `--ui-paths` is done parsing.\n\nBy adding additional parameters to `--ui-paths` we can solve this issue. Consider adding\n[`Arg::number_of_values(1)`] or using *only* [`ArgAction::Append`]. The following are all\nvalid, and `signer` is parsed as a subcommand in the first case, but a value in the second\ncase.\n\n```text\n$ program --ui-paths path1 signer\n$ program --ui-paths path1 --ui-paths signer signer\n```\n\n# Examples\n\nAn example with options\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"file\")\n        .takes_value(true)\n        .multiple_values(true)\n        .short('F'))\n    .get_matches_from(vec![\n        \"prog\", \"-F\", \"file1\", \"file2\", \"file3\"\n    ]);\n\nassert!(m.contains_id(\"file\"));\nlet files: Vec<_> = m.values_of(\"file\").unwrap().collect();\nassert_eq!(files, [\"file1\", \"file2\", \"file3\"]);\n```\n\nAlthough `multiple_values` has been specified, we cannot use the argument more than once.\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"file\")\n        .takes_value(true)\n        .multiple_values(true)\n        .short('F'))\n    .try_get_matches_from(vec![\n        \"prog\", \"-F\", \"file1\", \"-F\", \"file2\", \"-F\", \"file3\"\n    ]);\n\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind(), ErrorKind::UnexpectedMultipleUsage)\n```\n\nA common mistake is to define an option which allows multiple values, and a positional\nargument.\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"file\")\n        .takes_value(true)\n        .multiple_values(true)\n        .short('F'))\n    .arg(Arg::new(\"word\"))\n    .get_matches_from(vec![\n        \"prog\", \"-F\", \"file1\", \"file2\", \"file3\", \"word\"\n    ]);\n\nassert!(m.contains_id(\"file\"));\nlet files: Vec<_> = m.values_of(\"file\").unwrap().collect();\nassert_eq!(files, [\"file1\", \"file2\", \"file3\", \"word\"]); // wait...what?!\nassert!(!m.contains_id(\"word\")); // but we clearly used word!\n```\n\nThe problem is `clap` doesn't know when to stop parsing values for \"files\". This is further\ncompounded by if we'd said `word -F file1 file2` it would have worked fine, so it would\nappear to only fail sometimes...not good!\n\nA solution for the example above is to limit how many values with a [maximum], or [specific]\nnumber, or to say [`ArgAction::Append`] is ok, but multiple values is not.\n\n```rust\n# use clap::{Command, Arg, ArgAction};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"file\")\n        .takes_value(true)\n        .action(ArgAction::Append)\n        .short('F'))\n    .arg(Arg::new(\"word\"))\n    .get_matches_from(vec![\n        \"prog\", \"-F\", \"file1\", \"-F\", \"file2\", \"-F\", \"file3\", \"word\"\n    ]);\n\nassert!(m.contains_id(\"file\"));\nlet files: Vec<_> = m.values_of(\"file\").unwrap().collect();\nassert_eq!(files, [\"file1\", \"file2\", \"file3\"]);\nassert!(m.contains_id(\"word\"));\nassert_eq!(m.value_of(\"word\"), Some(\"word\"));\n```\n\nAs a final example, let's fix the above error and get a pretty message to the user :)\n\n```rust\n# use clap::{Command, Arg, ErrorKind, ArgAction};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"file\")\n        .takes_value(true)\n        .action(ArgAction::Append)\n        .short('F'))\n    .arg(Arg::new(\"word\"))\n    .try_get_matches_from(vec![\n        \"prog\", \"-F\", \"file1\", \"file2\", \"file3\", \"word\"\n    ]);\n\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind(), ErrorKind::UnknownArgument);\n```\n\n[`subcommands`]: crate::Command::subcommand()\n[`Arg::number_of_values(1)`]: Arg::number_of_values()\n[maximum number of values]: Arg::max_values()\n[specific number of values]: Arg::number_of_values()\n[maximum]: Arg::max_values()\n[specific]: Arg::number_of_values()","links":{"Arg::require_delimiter":"0:391:3505","`Arg::takes_value`":"0:351:1949","Arg::max_values()":"0:357:1953","Arg::value_terminator":"0:392:3533","crate::Command::subcommand()":"0:782:2012","`ArgAction::Append`":"0:3354:2340","Arg::number_of_values()":"0:356:3259"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3442:2573":{"id":"0:3442:2573","crate_id":0,"name":"DisableVersionFlag","span":{"filename":"src/builder/app_settings.rs","begin":[582,4],"end":[582,22]},"visibility":"default","docs":"Deprecated, replaced with [`Command::disable_version_flag`] and\n[`Command::is_disable_version_flag_set`]\n\nDerive: replace `#[clap(setting = DisableVersionFlag)]` with `#[clap(disable_version_flag = true)]`\n\nBuilder: replace `cmd.setting(DisableVersionFlag)` with `cmd.disable_version_flag(true)`","links":{"`Command::disable_version_flag`":"0:823:5104","`Command::is_disable_version_flag_set`":"0:996:5928"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"2:2886:417":{"id":"2:2886:417","crate_id":2,"name":"clone_from","span":null,"visibility":"default","docs":"Performs copy-assignment from `source`.\n\n`a.clone_from(&b)` is equivalent to `a = b.clone()` in functionality,\nbut can be overridden to reuse the resources of `a` to avoid unnecessary\nallocations.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["source",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:864:5314":{"id":"0:864:5314","crate_id":0,"name":"help_template","span":{"filename":"src/builder/command.rs","begin":[1782,4],"end":[1785,5]},"visibility":"public","docs":"Sets the help template to be used, overriding the default format.\n\n**NOTE:** The template system is by design very simple. Therefore, the\ntags have to be written in the lowercase and without spacing.\n\nTags are given inside curly brackets.\n\nValid tags are:\n\n  * `{name}`                - Display name for the (sub-)command.\n  * `{bin}`                 - Binary name.\n  * `{version}`             - Version number.\n  * `{author}`              - Author information.\n  * `{author-with-newline}` - Author followed by `\\n`.\n  * `{author-section}`      - Author preceded and followed by `\\n`.\n  * `{about}`               - General description (from [`Command::about`] or\n                              [`Command::long_about`]).\n  * `{about-with-newline}`  - About followed by `\\n`.\n  * `{about-section}`       - About preceded and followed by '\\n'.\n  * `{usage-heading}`       - Automatically generated usage heading.\n  * `{usage}`               - Automatically generated or given usage string.\n  * `{all-args}`            - Help for all arguments (options, flags, positional\n                              arguments, and subcommands) including titles.\n  * `{options}`             - Help for options.\n  * `{positionals}`         - Help for positional arguments.\n  * `{subcommands}`         - Help for subcommands.\n  * `{after-help}`          - Help from [`App::after_help`] or [`Command::after_long_help`].\n  * `{before-help}`         - Help from [`App::before_help`] or [`Command::before_long_help`].\n\n# Examples\n\n```no_run\n# use clap::Command;\nCommand::new(\"myprog\")\n    .version(\"1.0\")\n    .help_template(\"{bin} ({version}) - {usage}\")\n# ;\n```\n[`App::about`]: Command::about()\n[`App::long_about`]: Command::long_about()\n[`App::after_help`]: Command::after_help()\n[`App::after_long_help`]: Command::after_long_help()\n[`App::before_help`]: Command::before_help()\n[`App::before_long_help`]: Command::before_long_help()","links":{"`Command::long_about`":"0:846:4785","Command::after_help()":"0:848:4788","`Command::about`":"0:844:1917","`Command::before_long_help`":"0:854:4787","`Command::after_long_help`":"0:850:4789","Command::before_help()":"0:852:4786"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["s",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5078:667":{"id":"0:5078:667","crate_id":0,"name":"fmt","span":{"filename":"src/util/color.rs","begin":[2,9],"end":[2,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10511:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4020":{"id":"0:4020","crate_id":0,"name":null,"span":{"filename":"src/builder/arg_settings.rs","begin":[32,27],"end":[32,31]},"visibility":{"restricted":{"parent":"0:637:2253","path":"::builder::arg_settings"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3380:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgSettings","id":"0:3968:1678","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3203-0:3351:1659":{"id":"b:2:3203-0:3351:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgAction","id":"0:3351:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3206:2391"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:23066:21807":{"id":"2:23066:21807","crate_id":2,"name":"is_infinite","span":null,"visibility":"default","docs":"Returns true for each lane if its value is positive infinity or negative infinity.","links":{},"attrs":["#[must_use =\n\"method returns a new mask and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Mask","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdFloat","id":"2:23053:11401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:5429:28809":{"id":"1:5429:28809","crate_id":1,"name":"from_vec","span":null,"visibility":"default","docs":"Creates an [`OsString`] from a byte vector.\n\nSee the module documentation for an example.","links":{"`OsString`":"1:2651:183"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["vec",{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7898:240","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8224:3098","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1474:930":{"id":"0:1474:930","crate_id":0,"name":"new","span":{"filename":"src/builder/value_parser.rs","begin":[1340,4],"end":[1342,5]},"visibility":"public","docs":"Select full range of `u64`","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3317":{"id":"0:3317","crate_id":0,"name":null,"span":{"filename":"src/util/mod.rs","begin":[8,0],"end":[8,23]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::fnv::Key","name":"Key","id":"0:3239:2795","glob":false}},"0:1384:6637":{"id":"0:1384:6637","crate_id":0,"name":"parse_ref","span":{"filename":"src/builder/value_parser.rs","begin":[732,4],"end":[739,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["cmd",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Command","id":"0:755:1660","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["arg",{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Arg","id":"0:3818:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}],"bindings":[]}}}}],["value",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"std::ffi::OsStr","id":"1:2654:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Value","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:1362:2264","args":null}}}},{"type":{"kind":"resolved_path","inner":{"name":"crate::Error","id":"0:4647:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"25:106:28459":{"id":"25:106:28459","crate_id":25,"name":"whitespace_width","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.15.1/src/core.rs","begin":[203,4],"end":[203,38]},"visibility":"default","docs":"Displayed width of the whitespace that must follow the word\nwhen the word is not at the end of a line.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:32159:69429":{"id":"2:32159:69429","crate_id":2,"name":"reverse_bits","span":null,"visibility":"public","docs":"Reverses the order of bits in the integer. The least significant bit becomes the most significant bit,\n                second least-significant bit becomes second most-significant bit, etc.\n\n# Examples\n\nBasic usage:\n\n```\nlet n = 0x1234567890123456u64;\nlet m = n.reverse_bits();\n\nassert_eq!(m, 0x6a2c48091e6a2c48);\nassert_eq!(0, 0u64.reverse_bits());\n```","links":{},"attrs":["#[stable(feature = \"reverse_bits\", since = \"1.37.0\")]","#[rustc_const_stable(feature = \"reverse_bits\", since = \"1.37.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4457:2273":{"id":"0:4457:2273","crate_id":0,"name":"FalseyValueParser","span":{"filename":"src/builder/value_parser.rs","begin":[1596,0],"end":[1596,31]},"visibility":"public","docs":"Parse false-like string values, everything else is `true`\n\nSee also:\n- [`ValueParser::bool`] for assuming non-false is true\n- [`BoolishValueParser`] for different human readable bool representations\n\n# Example\n\nUsage:\n```rust\nlet mut cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"append\")\n            .value_parser(clap::builder::FalseyValueParser::new())\n            .required(true)\n    );\n\nlet m = cmd.try_get_matches_from_mut([\"cmd\", \"true\"]).unwrap();\nlet port: bool = *m.get_one(\"append\")\n    .expect(\"required\");\nassert_eq!(port, true);\n```\n\nSemantics:\n```rust\n# use std::ffi::OsStr;\n# use clap::builder::TypedValueParser;\n# let cmd = clap::Command::new(\"test\");\n# let arg = None;\nlet value_parser = clap::builder::FalseyValueParser::new();\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"random\")).unwrap(), true);\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"100\")).unwrap(), true);\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"\")).unwrap(), false);\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"false\")).unwrap(), false);\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"No\")).unwrap(), false);\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"oFF\")).unwrap(), false);\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"0\")).unwrap(), false);\n```","links":{"`BoolishValueParser`":"0:4463:2271","`ValueParser::bool`":"0:1312:367"},"attrs":["#[non_exhaustive]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":false}},"generics":{"params":[],"where_predicates":[]},"impls":["0:1510","a:2:9533:7458-0:4457:2273","a:2:9532:7459-0:4457:2273","a:2:3382:225-0:4457:2273","a:2:3370:216-0:4457:2273","a:2:3411:6205-0:4457:2273","b:2:4104-0:4457:2273","b:2:2865-0:4457:2273","b:2:3203-0:4457:2273","b:2:3207-0:4457:2273","b:2:3218-0:4457:2273","b:2:2868-0:4457:2273","b:2:3213-0:4457:2273","b:5:848-0:4457:2273","0:4458","0:4459","0:4461","0:1515","0:1520"]}},"1:6462:15072":{"id":"1:6462:15072","crate_id":1,"name":"st_dev","span":null,"visibility":"default","docs":"Returns the device ID on which this file resides.\n\n# Examples\n\n```no_run\nuse std::fs;\nuse std::io;\nuse std::os::linux::fs::MetadataExt;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    println!(\"{}\", meta.st_dev());\n    Ok(())\n}\n```","links":{},"attrs":["#[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1335:688":{"id":"0:1335:688","crate_id":0,"name":"from","span":{"filename":"src/builder/value_parser.rs","begin":[444,4],"end":[447,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["value",{"kind":"resolved_path","inner":{"name":"std::ops::RangeToInclusive","id":"2:46276:202","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i64"}}],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:488:4191":{"id":"0:488:4191","crate_id":0,"name":"get_value_delimiter","span":{"filename":"src/builder/arg.rs","begin":[4561,4],"end":[4563,5]},"visibility":"public","docs":"Get the delimiter between multiple values","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"char"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3207-0:3351:1659":{"id":"b:2:3207-0:3351:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgAction","id":"0:3351:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3209:688"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:891:5542":{"id":"0:891:5542","crate_id":0,"name":"long_flag_alias","span":{"filename":"src/builder/command.rs","begin":[2432,4],"end":[2435,5]},"visibility":"public","docs":"Add an alias, which functions as a \"hidden\" long flag subcommand.\n\nThis will automatically dispatch as if this subcommand was used. This is more efficient,\nand easier than creating multiple hidden subcommands as one only needs to check for the\nexistence of this command, and not all variants.\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg, };\nlet m = Command::new(\"myprog\")\n            .subcommand(Command::new(\"test\").long_flag(\"test\")\n                .long_flag_alias(\"testing\"))\n            .get_matches_from(vec![\"myprog\", \"--testing\"]);\nassert_eq!(m.subcommand_name(), Some(\"test\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["name",{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9533:7458-0:4569:7000":{"id":"a:2:9533:7458-0:4569:7000","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:9533:7458","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextValue","id":"0:4569:7000","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4548:7111":{"id":"0:4548:7111","crate_id":0,"name":"SuggestedArg","span":{"filename":"src/error/context.rs","begin":[30,4],"end":[30,16]},"visibility":"default","docs":"Potential fix for the user","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"0:4615:7105":{"id":"0:4615:7105","crate_id":0,"name":"WrongNumberOfValues","span":{"filename":"src/error/kind.rs","begin":[216,4],"end":[216,23]},"visibility":"default","docs":"Occurs when the user provides a different number of values for an argument than what's\nbeen defined by setting [`Arg::number_of_values`] or than was implicitly set by\n[`Arg::value_names`].\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet result = Command::new(\"prog\")\n    .arg(Arg::new(\"some_opt\")\n        .long(\"opt\")\n        .takes_value(true)\n        .number_of_values(2))\n    .try_get_matches_from(vec![\"prog\", \"--opt\", \"wrong\"]);\nassert!(result.is_err());\nassert_eq!(result.unwrap_err().kind(), ErrorKind::WrongNumberOfValues);\n```\n\n[`Arg::number_of_values`]: crate::Arg::number_of_values()\n[`Arg::value_names`]: crate::Arg::value_names()","links":{"crate::Arg::value_names()":"0:360:3312","crate::Arg::number_of_values()":"0:356:3259"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"2:23114:21823":{"id":"2:23114:21823","crate_id":2,"name":"is_positive","span":null,"visibility":"default","docs":"Returns true for each positive lane and false if it is zero or negative.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Mask","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdInt","id":"2:23106:11397","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:23146:21816":{"id":"2:23146:21816","crate_id":2,"name":"reduce_sum","span":null,"visibility":"default","docs":"Returns the sum of the lanes of the vector, with wrapping addition.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Scalar","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdUint","id":"2:23142:11395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"a:2:3370:216-0:4469:2274":{"id":"a:2:3370:216-0:4469:2274","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"NonEmptyStringValueParser","id":"0:4469:2274","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:156:2151":{"id":"0:156:2151","crate_id":0,"name":"into_app","span":{"filename":"src/derive.rs","begin":[263,4],"end":[263,43]},"visibility":"default","docs":"Deprecated, replaced with `CommandFactory::command`","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Command","id":"0:755:1660","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:2:3203-0:1294:2265":{"id":"b:2:3203-0:1294:2265","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1294:2265","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3206:2391"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:10811:659":{"id":"2:10811:659","crate_id":2,"name":"finish","span":null,"visibility":"default","docs":"Returns the hash value for the values written so far.\n\nDespite its name, the method does not reset the hasher’s internal\nstate. Additional [`write`]s will continue from the current value.\nIf you need to start a fresh hash value, you will have to create\na new hasher.\n\n# Examples\n\n```\nuse std::collections::hash_map::DefaultHasher;\nuse std::hash::Hasher;\n\nlet mut hasher = DefaultHasher::new();\nhasher.write(b\"Cool!\");\n\nprintln!(\"Hash is {:x}!\", hasher.finish());\n```\n\n[`write`]: Hasher::write","links":{"Hasher::write":"2:10812:1869"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:4466:415":{"id":"0:4466:415","crate_id":0,"name":"clone","span":{"filename":"src/builder/value_parser.rs","begin":[1691,15],"end":[1691,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"BoolishValueParser","id":"0:4463:2271","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3203-0:4594:1681":{"id":"b:2:3203-0:4594:1681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4594:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3206:2391"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:772:4858":{"id":"0:772:4858","crate_id":0,"name":"mut_subcommand","span":{"filename":"src/builder/command.rs","begin":[301,4],"end":[319,5]},"visibility":"public","docs":"Allows one to mutate a [`Command`] after it's been added as a subcommand.\n\nThis can be useful for modifying auto-generated arguments of nested subcommands with\n[`Command::mut_arg`].\n\n# Examples\n\n```rust\n# use clap::Command;\n\nlet mut cmd = Command::new(\"foo\")\n        .subcommand(Command::new(\"bar\"))\n        .mut_subcommand(\"bar\", |subcmd| subcmd.disable_help_flag(true));\n\nlet res = cmd.try_get_matches_from_mut(vec![\"foo\", \"bar\", \"--help\"]);\n\n// Since we disabled the help flag on the \"bar\" subcommand, this should err.\n\nassert!(res.is_err());\n\nlet res = cmd.try_get_matches_from_mut(vec![\"foo\", \"bar\"]);\nassert!(res.is_ok());\n```","links":{"`Command`":"0:755:1660","`Command::mut_arg`":"0:768:4848"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["subcmd_id",{"kind":"generic","inner":"T"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3627:133","args":{"parenthesized":{"inputs":[{"kind":"resolved_path","inner":{"name":"App","id":"0:4241:1674","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}}],"output":{"kind":"resolved_path","inner":{"name":"App","id":"0:4241:1674","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:19":{"id":"0:19","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[102,0],"end":[102,34]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::parser::ArgMatches","name":"ArgMatches","id":"0:4713:1665","glob":false}},"1:5532:28826":{"id":"1:5532:28826","crate_id":1,"name":"atime_nsec","span":null,"visibility":"default","docs":"Returns the last access time of the file, in nanoseconds since [`atime`].\n\n[`atime`]: MetadataExt::atime\n\n# Examples\n\n```no_run\nuse std::fs;\nuse std::os::unix::fs::MetadataExt;\nuse std::io;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    let nano_last_access_time = meta.atime_nsec();\n    Ok(())\n}\n```","links":{"MetadataExt::atime":"1:5531:28825"},"attrs":["#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:830:5146":{"id":"0:830:5146","crate_id":0,"name":"dont_collapse_args_in_usage","span":{"filename":"src/builder/command.rs","begin":[1299,4],"end":[1305,5]},"visibility":"public","docs":"Disables the automatic collapsing of positional args into `[ARGS]` inside the usage string.\n\n**NOTE:** This choice is propagated to all child subcommands.\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg};\nCommand::new(\"myprog\")\n    .dont_collapse_args_in_usage(true)\n    .get_matches();\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3370":{"id":"0:3370","crate_id":0,"name":null,"span":{"filename":"src/builder/action.rs","begin":[23,9],"end":[23,14]},"visibility":{"restricted":{"parent":"0:217:2249","path":"::builder::action"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(missing_copy_implementations)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgAction","id":"0:3351:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3371:415"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:6234:10995":{"id":"1:6234:10995","crate_id":1,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6235:28881","1:6236:15146","1:6237:28882","1:6238:28883","1:6239:28884","1:6240:28885"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10409:10989","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:32157:1133":{"id":"2:32157:1133","crate_id":2,"name":"rotate_right","span":null,"visibility":"public","docs":"Shifts the bits to the right by a specified amount, `n`,\nwrapping the truncated bits to the beginning of the resulting\ninteger.\n\nPlease note this isn't the same operation as the `>>` shifting operator!\n\n# Examples\n\nBasic usage:\n\n```\nlet n = 0x6e10aau64;\nlet m = 0xaa00000000006e1;\n\nassert_eq!(n.rotate_right(12), m);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["n",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13352:28628":{"id":"2:13352:28628","crate_id":2,"name":"is_suffix_of","span":null,"visibility":"default","docs":"Checks whether the pattern matches at the back of the haystack","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["haystack",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Pattern","id":"2:13346:8917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13361:8918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3624:132":{"id":"2:3624:132","crate_id":2,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3626:384"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3627:133","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:1006:5947":{"id":"0:1006:5947","crate_id":0,"name":"is_arg_required_else_help_set","span":{"filename":"src/builder/command.rs","begin":[3732,4],"end":[3734,5]},"visibility":"public","docs":"Report whether [`Command::arg_required_else_help`] is set","links":{"`Command::arg_required_else_help`":"0:878:5415"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9532:7459-0:4451:2270":{"id":"a:2:9532:7459-0:4451:2270","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:9532:7459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BoolValueParser","id":"0:4451:2270","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:4493:10372":{"id":"1:4493:10372","crate_id":1,"name":"fill_buf","span":null,"visibility":"default","docs":"Returns the contents of the internal buffer, filling it with more data\nfrom the inner reader if it is empty.\n\nThis function is a lower-level call. It needs to be paired with the\n[`consume`] method to function properly. When calling this\nmethod, none of the contents will be \"read\" in the sense that later\ncalling `read` may return the same contents. As such, [`consume`] must\nbe called with the number of bytes that are consumed from this buffer to\nensure that the bytes are never returned twice.\n\n[`consume`]: BufRead::consume\n\nAn empty buffer returned indicates that the stream has reached EOF.\n\n# Errors\n\nThis function will return an I/O error if the underlying reader was\nread, but returned an error.\n\n# Examples\n\nA locked standard input implements `BufRead`:\n\n```no_run\nuse std::io;\nuse std::io::prelude::*;\n\nlet stdin = io::stdin();\nlet mut stdin = stdin.lock();\n\nlet buffer = stdin.fill_buf().unwrap();\n\n// work with buffer\nprintln!(\"{buffer:?}\");\n\n// ensure the bytes we worked with aren't returned again later\nlet length = buffer.len();\nstdin.consume(length);\n```","links":{"BufRead::consume":"1:4494:10373"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"1:3803:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:8198:27618":{"id":"2:8198:27618","crate_id":2,"name":"forward_checked","span":null,"visibility":"default","docs":"Returns the value that would be obtained by taking the *successor*\nof `self` `count` times.\n\nIf this would overflow the range of values supported by `Self`, returns `None`.\n\n# Invariants\n\nFor any `a`, `n`, and `m`:\n\n* `Step::forward_checked(a, n).and_then(|x| Step::forward_checked(x, m)) == Step::forward_checked(a, m).and_then(|x| Step::forward_checked(x, n))`\n\nFor any `a`, `n`, and `m` where `n + m` does not overflow:\n\n* `Step::forward_checked(a, n).and_then(|x| Step::forward_checked(x, m)) == Step::forward_checked(a, n + m)`\n\nFor any `a` and `n`:\n\n* `Step::forward_checked(a, n) == (0..n).try_fold(a, |x, _| Step::forward_checked(&x, 1))`\n  * Corollary: `Step::forward_checked(&a, 0) == Some(a)`","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["start",{"kind":"generic","inner":"Self"}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:2:3218-0:4469:2274":{"id":"b:2:3218-0:4469:2274","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"NonEmptyStringValueParser","id":"0:4469:2274","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3221:128","2:3222:1435"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2865-0:4647:128":{"id":"b:2:2865-0:4647:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4647:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2867:2792"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3203-0:3904:1662":{"id":"b:2:3203-0:3904:1662","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3904:1662","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":["2:3206:2391"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1750":{"id":"0:1750","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[42,0],"end":[42,44]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"value_parser::_AnonymousValueParser","name":"_AnonymousValueParser","id":"0:4495:2267","glob":false}},"b:2:3207-0:4806:1682":{"id":"b:2:3207-0:4806:1682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:4806:1682","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3209:688"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:8203:27623":{"id":"2:8203:27623","crate_id":2,"name":"backward_unchecked","span":null,"visibility":"default","docs":"Returns the value that would be obtained by taking the *predecessor*\nof `self` `count` times.\n\n# Safety\n\nIt is undefined behavior for this operation to overflow the\nrange of values supported by `Self`. If you cannot guarantee that this\nwill not overflow, use `backward` or `backward_checked` instead.\n\n# Invariants\n\nFor any `a`:\n\n* if there exists `b` such that `b < a`, it is safe to call `Step::backward_unchecked(a, 1)`\n* if there exists `b`, `n` such that `steps_between(&b, &a) == Some(n)`,\n  it is safe to call `Step::backward_unchecked(a, m)` for any `m <= n`.\n\nFor any `a` and `n`, where no overflow occurs:\n\n* `Step::backward_unchecked(a, n)` is equivalent to `Step::backward(a, n)`","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["start",{"kind":"generic","inner":"Self"}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:4458":{"id":"0:4458","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1594,9],"end":[1594,13]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3380:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FalseyValueParser","id":"0:4457:2273","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:832:5158":{"id":"0:832:5158","crate_id":0,"name":"infer_long_args","span":{"filename":"src/builder/command.rs","begin":[1337,4],"end":[1343,5]},"visibility":"public","docs":"Allow partial matches of long arguments or their [aliases].\n\nFor example, to match an argument named `--test`, one could use `--t`, `--te`, `--tes`, and\n`--test`.\n\n**NOTE:** The match *must not* be ambiguous at all in order to succeed. i.e. to match\n`--te` to `--test` there could not also be another argument or alias `--temp` because both\nstart with `--te`\n\n**NOTE:** This choice is propagated to all child subcommands.\n\n[aliases]: crate::Command::aliases()","links":{"crate::Command::aliases()":"0:892:2827"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3213-0:4351:1680":{"id":"b:2:3213-0:4351:1680","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3183:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:4351:1680","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3216:128","2:3217:1436"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:4104-0:3904:1662":{"id":"b:2:4104-0:3904:1662","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:4102:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3904:1662","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":["2:4106:1449"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4696:623":{"id":"0:4696:623","crate_id":0,"name":"expected","span":{"filename":"src/parser/error.rs","begin":[14,8],"end":[14,35]},"visibility":"default","docs":"The target type to downcast to","links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"super::AnyValueId","id":"0:4707:2393","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"a:2:3411:6205-0:5070:1667":{"id":"a:2:3411:6205-0:5070:1667","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:3411:6205","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:5070:1667","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:3411:6205-0:4410:2272":{"id":"a:2:3411:6205-0:4410:2272","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:3411:6205","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:3411:6205","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EnumValueParser","id":"0:4410:2272","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:10570:667":{"id":"2:10570:667","crate_id":2,"name":"fmt","span":null,"visibility":"default","docs":"Formats the value using the given formatter.\n\n# Examples\n\n```\nuse std::fmt;\n\nstruct Position {\n    longitude: f32,\n    latitude: f32,\n}\n\nimpl fmt::Display for Position {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        write!(f, \"({}, {})\", self.longitude, self.latitude)\n    }\n}\n\nassert_eq!(\"(1.987, 2.983)\",\n           format!(\"{}\", Position { longitude: 1.987, latitude: 2.983, }));\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Formatter","id":"2:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"2:48872:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:23107:11341":{"id":"2:23107:11341","crate_id":2,"name":"Mask","span":null,"visibility":"default","docs":"Mask type used for manipulating this SIMD vector type.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"a:2:3382:225-0:4351:1680":{"id":"a:2:3382:225-0:4351:1680","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:4351:1680","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:3411:6205-0:3968:1678":{"id":"a:2:3411:6205-0:3968:1678","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:3411:6205","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgSettings","id":"0:3968:1678","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3360:2361":{"id":"0:3360:2361","crate_id":0,"name":"SetTrue","span":{"filename":"src/builder/action.rs","begin":[146,4],"end":[146,11]},"visibility":"default","docs":"When encountered, act as if `\"true\"` was encountered on the command-line\n\nIf no [`default_value`][super::Arg::default_value] is set, it will be `false`.\n\nNo value is allowed. To optionally accept a value, see\n[`Arg::default_missing_value`][super::Arg::default_missing_value]\n\n# Examples\n\n```rust\n# use clap::Command;\n# use clap::Arg;\nlet cmd = Command::new(\"mycmd\")\n    .arg(\n        Arg::new(\"flag\")\n            .long(\"flag\")\n            .action(clap::ArgAction::SetTrue)\n    );\n\nlet matches = cmd.clone().try_get_matches_from([\"mycmd\", \"--flag\", \"--flag\"]).unwrap();\nassert!(matches.contains_id(\"flag\"));\nassert_eq!(matches.occurrences_of(\"flag\"), 0);\nassert_eq!(\n    matches.get_one::<bool>(\"flag\").copied(),\n    Some(true)\n);\n\nlet matches = cmd.try_get_matches_from([\"mycmd\"]).unwrap();\nassert!(matches.contains_id(\"flag\"));\nassert_eq!(matches.occurrences_of(\"flag\"), 0);\nassert_eq!(\n    matches.get_one::<bool>(\"flag\").copied(),\n    Some(false)\n);\n```","links":{"super::Arg::default_value":"0:394:2389","super::Arg::default_missing_value":"0:399:3629"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"0:2058:667":{"id":"0:2058:667","crate_id":0,"name":"fmt","span":{"filename":"src/parser/error.rs","begin":[42,4],"end":[55,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"std::fmt::Formatter","id":"2:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"std::fmt::Result","id":"2:10511:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10845:9197":{"id":"2:10845:9197","crate_id":2,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10846:147","2:10847:27599","2:10848:27600"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:32223:69480":{"id":"2:32223:69480","crate_id":2,"name":"div_floor","span":null,"visibility":"public","docs":"Calculates the quotient of `self` and `rhs`, rounding the result towards negative infinity.\n\nThis is the same as performing `self / rhs` for all unsigned integers.\n\n# Panics\n\nThis function will panic if `rhs` is zero.\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(int_roundings)]\nassert_eq!(7_u64.div_floor(4), 1);\n```","links":{},"attrs":["#[unstable(feature = \"int_roundings\", issue = \"88581\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1594":{"id":"0:1594","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1999,0],"end":[2004,1]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ValueParserFactory","id":"0:1558:2266","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"u64"},"items":["0:1595:1671","0:1596:2257"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3815":{"id":"0:3815","crate_id":0,"name":null,"span":{"filename":"src/builder/app_settings.rs","begin":[1019,0],"end":[1115,1]},"visibility":{"restricted":{"parent":"0:227:2250","path":"::builder::app_settings"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BitOr","id":"2:3503:2032","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:3389:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:3389:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3816:184","0:3817:360"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:4474:10377":{"id":"1:4474:10377","crate_id":1,"name":"write_all_vectored","span":null,"visibility":"default","docs":"Attempts to write multiple buffers into this writer.\n\nThis method will continuously call [`write_vectored`] until there is no\nmore data to be written or an error of non-[`ErrorKind::Interrupted`]\nkind is returned. This method will not return until all buffers have\nbeen successfully written or such an error occurs. The first error that\nis not of [`ErrorKind::Interrupted`] kind generated from this method\nwill be returned.\n\nIf the buffer contains no data, this will never call [`write_vectored`].\n\n# Notes\n\nUnlike [`write_vectored`], this takes a *mutable* reference to\na slice of [`IoSlice`]s, not an immutable one. That's because we need to\nmodify the slice to keep track of the bytes already written.\n\nOnce this function returns, the contents of `bufs` are unspecified, as\nthis depends on how many calls to [`write_vectored`] were necessary. It is\nbest to understand this function as taking ownership of `bufs` and to\nnot use `bufs` afterwards. The underlying buffers, to which the\n[`IoSlice`]s point (but not the [`IoSlice`]s themselves), are unchanged and\ncan be reused.\n\n[`write_vectored`]: Write::write_vectored\n\n# Examples\n\n```\n#![feature(write_all_vectored)]\n# fn main() -> std::io::Result<()> {\n\nuse std::io::{Write, IoSlice};\n\nlet mut writer = Vec::new();\nlet bufs = &mut [\n    IoSlice::new(&[1]),\n    IoSlice::new(&[2, 3]),\n    IoSlice::new(&[4, 5, 6]),\n];\n\nwriter.write_all_vectored(bufs)?;\n// Note: the contents of `bufs` is now undefined, see the Notes section.\n\nassert_eq!(writer, &[1, 2, 3, 4, 5, 6]);\n# Ok(()) }\n```","links":{"`ErrorKind::Interrupted`":"1:10863:14188","`IoSlice`":"1:10923:8987","Write::write_vectored":"1:4469:10375"},"attrs":["#[unstable(feature = \"write_all_vectored\", issue = \"70436\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"1:10923:8987","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"1:3803:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3542:8795":{"id":"2:3542:8795","crate_id":2,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3544:1253"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10847:27599":{"id":"2:10847:27599","crate_id":2,"name":"build_hasher","span":null,"visibility":"default","docs":"Creates a new hasher.\n\nEach call to `build_hasher` on the same instance should produce identical\n[`Hasher`]s.\n\n# Examples\n\n```\nuse std::collections::hash_map::RandomState;\nuse std::hash::BuildHasher;\n\nlet s = RandomState::new();\nlet new_s = s.build_hasher();\n```","links":{"`Hasher`":"2:10810:147"},"attrs":["#[stable(since = \"1.7.0\", feature = \"build_hasher\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"qualified_path","inner":{"name":"Hasher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"BuildHasher","id":"2:10845:9197","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:898:5580":{"id":"0:898:5580","crate_id":0,"name":"visible_short_flag_alias","span":{"filename":"src/builder/command.rs","begin":[2579,4],"end":[2583,5]},"visibility":"public","docs":"Add an alias, which functions as  \"visible\" short flag subcommand\n\nThis will automatically dispatch as if this subcommand was used. This is more efficient,\nand easier than creating multiple hidden subcommands as one only needs to check for the\nexistence of this command, and not all variants.\n\nSee also [`Command::short_flag_alias`].\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg, };\nlet m = Command::new(\"myprog\")\n            .subcommand(Command::new(\"test\").short_flag('t')\n                .visible_short_flag_alias('d'))\n            .get_matches_from(vec![\"myprog\", \"-d\"]);\nassert_eq!(m.subcommand_name(), Some(\"test\"));\n```\n[`App::short_flag_alias`]: Command::short_flag_alias()","links":{"`Command::short_flag_alias`":"0:890:5537"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["name",{"kind":"primitive","inner":"char"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:1031:1864":{"id":"1:1031:1864","crate_id":1,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:1032:4342","1:1033:11658","1:1034:21133","1:1035:2740","1:1036:1865","1:1037:21134","1:1038:21135"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:4450:667":{"id":"0:4450:667","crate_id":0,"name":"fmt","span":{"filename":"src/builder/value_parser.rs","begin":[1332,22],"end":[1332,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10511:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2287":{"id":"0:2287","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1614,0],"end":[1623,1]},"visibility":{"restricted":{"parent":"0:2092:7461","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["collect","find","partial_cmp_by","rposition","partition_in_place","flatten","fuse","max_by","intersperse","copied","max","find_map","gt","lt","position","eq_by","unzip","is_partitioned","max_by_key","inspect","cmp","take","intersperse_with","eq","ge","is_sorted","count","cycle","try_fold","any","by_ref","try_for_each","min","size_hint","for_each","chain","filter","take_while","fold","all","partial_cmp","ne","filter_map","le","cloned","is_sorted_by","array_chunks","min_by_key","reduce","skip","try_collect","skip_while","next_chunk","sum","map","advance_by","is_sorted_by_key","product","try_reduce","collect_into","map_while","nth","flat_map","zip","__iterator_get_unchecked","enumerate","cmp_by","try_find","rev","min_by","partition","scan","step_by","last","peekable"],"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawValues","id":"0:4768:7385","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:2289:2117","0:2290:932","0:2291:4836"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:577:667":{"id":"0:577:667","crate_id":0,"name":"fmt","span":{"filename":"src/builder/arg.rs","begin":[5256,4],"end":[5308,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Formatter","id":"2:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"fmt::Error","id":"2:48872:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2084:722":{"id":"0:2084:722","crate_id":0,"name":"hash","span":{"filename":"src/parser/matches/any_value.rs","begin":[79,4],"end":[81,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["state",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"std::hash::Hasher","id":"2:10810:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:942:5858":{"id":"0:942:5858","crate_id":0,"name":"get_visible_long_flag_aliases","span":{"filename":"src/builder/command.rs","begin":[3407,4],"end":[3412,5]},"visibility":"public","docs":"Iterate through the *visible* long aliases for this subcommand.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}}]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'_"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:847:9984":{"id":"5:847:9984","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":"Uses borrowed data to replace owned data, usually by cloning.\n\nThis is borrow-generalized version of [`Clone::clone_from`].\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s: String = String::new();\n\"hello\".clone_into(&mut s);\n\nlet mut v: Vec<i32> = Vec::new();\n[1, 2][..].clone_into(&mut v);\n```","links":{"`Clone::clone_from`":"2:2886:417"},"attrs":["#[stable(feature = \"toowned_clone_into\", since = \"1.63.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"ToOwned","id":"5:844:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:415:3796":{"id":"0:415:3796","crate_id":0,"name":"hide_possible_values","span":{"filename":"src/builder/arg.rs","begin":[2927,4],"end":[2933,5]},"visibility":"public","docs":"Do not display the [possible values][crate::builder::ValueParser::possible_values] in the help message.\n\nThis is useful for args with many values, or ones which are explained elsewhere in the\nhelp text.\n\n**NOTE:** Setting this requires [`Arg::takes_value`]\n\nTo set this for all arguments, see\n[`Command::hide_possible_values`][crate::Command::hide_possible_values].\n\n# Examples\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"mode\")\n        .long(\"mode\")\n        .value_parser([\"fast\", \"slow\"])\n        .takes_value(true)\n        .hide_possible_values(true));\n```\nIf we were to run the above program with `--help` the `[values: fast, slow]` portion of\nthe help text would be omitted.","links":{"crate::builder::ValueParser::possible_values":"0:1319:3370","`Arg::takes_value`":"0:351:1949","crate::Command::hide_possible_values":"0:831:3796"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4463:2271":{"id":"0:4463:2271","crate_id":0,"name":"BoolishValueParser","span":{"filename":"src/builder/value_parser.rs","begin":[1693,0],"end":[1693,32]},"visibility":"public","docs":"Parse bool-like string values, everything else is `true`\n\nSee also:\n- [`ValueParser::bool`] for different human readable bool representations\n- [`FalseyValueParser`] for assuming non-false is true\n\n# Example\n\nUsage:\n```rust\nlet mut cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"append\")\n            .value_parser(clap::builder::BoolishValueParser::new())\n            .required(true)\n    );\n\nlet m = cmd.try_get_matches_from_mut([\"cmd\", \"true\"]).unwrap();\nlet port: bool = *m.get_one(\"append\")\n    .expect(\"required\");\nassert_eq!(port, true);\n```\n\nSemantics:\n```rust\n# use std::ffi::OsStr;\n# use clap::builder::TypedValueParser;\n# let cmd = clap::Command::new(\"test\");\n# let arg = None;\nlet value_parser = clap::builder::BoolishValueParser::new();\nassert!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"random\")).is_err());\nassert!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"\")).is_err());\nassert!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"100\")).is_err());\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"true\")).unwrap(), true);\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"Yes\")).unwrap(), true);\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"oN\")).unwrap(), true);\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"1\")).unwrap(), true);\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"false\")).unwrap(), false);\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"No\")).unwrap(), false);\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"oFF\")).unwrap(), false);\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"0\")).unwrap(), false);\n```","links":{"`ValueParser::bool`":"0:1312:367","`FalseyValueParser`":"0:4457:2273"},"attrs":["#[non_exhaustive]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":false}},"generics":{"params":[],"where_predicates":[]},"impls":["0:1522","a:2:9533:7458-0:4463:2271","a:2:9532:7459-0:4463:2271","a:2:3382:225-0:4463:2271","a:2:3370:216-0:4463:2271","a:2:3411:6205-0:4463:2271","b:2:4104-0:4463:2271","b:2:2865-0:4463:2271","b:2:3203-0:4463:2271","b:2:3207-0:4463:2271","b:2:3218-0:4463:2271","b:2:2868-0:4463:2271","b:2:3213-0:4463:2271","b:5:848-0:4463:2271","0:4464","0:4465","0:4467","0:1527","0:1535"]}},"1:5501:28811":{"id":"1:5501:28811","crate_id":1,"name":"read_at","span":null,"visibility":"default","docs":"Reads a number of bytes starting from a given offset.\n\nReturns the number of bytes read.\n\nThe offset is relative to the start of the file and thus independent\nfrom the current cursor.\n\nThe current file cursor is not affected by this function.\n\nNote that similar to [`File::read`], it is not an error to return with a\nshort read.\n\n[`File::read`]: fs::File::read\n\n# Examples\n\n```no_run\nuse std::io;\nuse std::fs::File;\nuse std::os::unix::prelude::FileExt;\n\nfn main() -> io::Result<()> {\n    let mut buf = [0u8; 8];\n    let file = File::open(\"foo.txt\")?;\n\n    // We now read 8 bytes from the offset 10.\n    let num_bytes_read = file.read_at(&mut buf, 10)?;\n    println!(\"read {num_bytes_read} bytes: {buf:?}\");\n    Ok(())\n}\n```","links":{"fs::File::read":"1:2951:11149"},"attrs":["#[stable(feature = \"file_offset\", since = \"1.15.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["offset",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"1:3803:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:14062:184":{"id":"2:14062:184","crate_id":2,"name":"Output","span":null,"visibility":"default","docs":"The type of value produced on completion.","links":{},"attrs":["#[stable(feature = \"futures_api\", since = \"1.36.0\")]"],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"b:5:848-0:4755:7386":{"id":"b:5:848-0:4755:7386","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:844:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValuesRef","id":"0:4755:7386","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["5:850:4342","5:851:4983","5:852:9984"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3213-0:3818:1661":{"id":"b:2:3213-0:3818:1661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3183:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3818:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":["2:3216:128","2:3217:1436"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:3411:6205-0:4427:2261":{"id":"a:2:3411:6205-0:4427:2261","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:3411:6205","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:3411:6205","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:4427:2261","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1276":{"id":"0:1276","crate_id":0,"name":null,"span":{"filename":"src/builder/value_hint.rs","begin":[69,0],"end":[73,1]},"visibility":{"restricted":{"parent":"0:1272:2256","path":"::builder::value_hint"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:3254:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:4351:1680","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1277:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4805:667":{"id":"0:4805:667","crate_id":0,"name":"fmt","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1739,16],"end":[1739,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10511:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3544:1253":{"id":"2:3544:1253","crate_id":2,"name":"shr_assign","span":null,"visibility":"default","docs":"Performs the `>>=` operation.\n\n# Examples\n\n```\nlet mut x: u8 = 5;\nx >>= 1;\nassert_eq!(x, 2);\n\nlet mut x: u8 = 2;\nx >>= 1;\nassert_eq!(x, 1);\n```","links":{},"attrs":["#[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["rhs",{"kind":"generic","inner":"Rhs"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:351:1949":{"id":"0:351:1949","crate_id":0,"name":"takes_value","span":{"filename":"src/builder/arg.rs","begin":[949,4],"end":[955,5]},"visibility":"public","docs":"Specifies that the argument takes a value at run time.\n\n**NOTE:** values for arguments may be specified in any of the following methods\n\n- Using a space such as `-o value` or `--option value`\n- Using an equals and no space such as `-o=value` or `--option=value`\n- Use a short and no space such as `-ovalue`\n\n**NOTE:** By default, args which allow [multiple values] are delimited by commas, meaning\n`--option=val1,val2,val3` is three values for the `--option` argument. If you wish to\nchange the delimiter to another character you can use [`Arg::value_delimiter(char)`],\nalternatively you can turn delimiting values **OFF** by using\n[`Arg::use_value_delimiter(false)`][Arg::use_value_delimiter]\n\n# Examples\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"mode\")\n        .long(\"mode\")\n        .takes_value(true))\n    .get_matches_from(vec![\n        \"prog\", \"--mode\", \"fast\"\n    ]);\n\nassert!(m.contains_id(\"mode\"));\nassert_eq!(m.value_of(\"mode\"), Some(\"fast\"));\n```\n[`Arg::value_delimiter(char)`]: Arg::value_delimiter()\n[multiple values]: Arg::multiple_values","links":{"Arg::value_delimiter()":"0:389:3471","Arg::use_value_delimiter":"0:387:3457","Arg::multiple_values":"0:355:3240"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4381":{"id":"0:4381","crate_id":0,"name":null,"span":{"filename":"src/builder/value_hint.rs","begin":[27,16],"end":[27,25]},"visibility":{"restricted":{"parent":"0:1272:2256","path":"::builder::value_hint"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2920:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:4351:1680","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:4351:1680","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4382:611"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3218-0:4707:2393":{"id":"b:2:3218-0:4707:2393","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AnyValueId","id":"0:4707:2393","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3221:128","2:3222:1435"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:5079":{"id":"0:5079","crate_id":0,"name":null,"span":{"filename":"src/util/color.rs","begin":[2,16],"end":[2,20]},"visibility":{"restricted":{"parent":"0:3336:1575","path":"::util::color"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3380:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:5070:1667","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"1:5537:28831":{"id":"1:5537:28831","crate_id":1,"name":"blksize","span":null,"visibility":"default","docs":"Returns the block size for filesystem I/O.\n\n# Examples\n\n```no_run\nuse std::fs;\nuse std::os::unix::fs::MetadataExt;\nuse std::io;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    let block_size = meta.blksize();\n    Ok(())\n}\n```","links":{},"attrs":["#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1226:6250":{"id":"0:1226:6250","crate_id":0,"name":"is_hidden","span":{"filename":"src/builder/possible_value.rs","begin":[171,4],"end":[173,5]},"visibility":"public","docs":"Deprecated, replaced with [`PossibleValue::is_hide_set`]","links":{"`PossibleValue::is_hide_set`":"0:1227:4245"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:910:5702":{"id":"0:910:5702","crate_id":0,"name":"subcommand_precedence_over_arg","span":{"filename":"src/builder/command.rs","begin":[2972,4],"end":[2978,5]},"visibility":"public","docs":"Prevent subcommands from being consumed as an arguments value.\n\nBy default, if an option taking multiple values is followed by a subcommand, the\nsubcommand will be parsed as another value.\n\n```text\ncmd --foo val1 val2 subcommand\n          --------- ----------\n            values   another value\n```\n\nThis setting instructs the parser to stop when encountering a subcommand instead of\ngreedily consuming arguments.\n\n```text\ncmd --foo val1 val2 subcommand\n          --------- ----------\n            values   subcommand\n```\n\n**Note:** Make sure you apply it as `global_setting` if you want this setting\nto be propagated to subcommands and sub-subcommands!\n\n# Examples\n\n```rust\n# use clap::{Command, Arg};\nlet cmd = Command::new(\"cmd\").subcommand(Command::new(\"sub\")).arg(\n    Arg::new(\"arg\")\n        .long(\"arg\")\n        .multiple_values(true)\n        .takes_value(true),\n);\n\nlet matches = cmd\n    .clone()\n    .try_get_matches_from(&[\"cmd\", \"--arg\", \"1\", \"2\", \"3\", \"sub\"])\n    .unwrap();\nassert_eq!(\n    matches.values_of(\"arg\").unwrap().collect::<Vec<_>>(),\n    &[\"1\", \"2\", \"3\", \"sub\"]\n);\nassert!(matches.subcommand_matches(\"sub\").is_none());\n\nlet matches = cmd\n    .subcommand_precedence_over_arg(true)\n    .try_get_matches_from(&[\"cmd\", \"--arg\", \"1\", \"2\", \"3\", \"sub\"])\n    .unwrap();\nassert_eq!(\n    matches.values_of(\"arg\").unwrap().collect::<Vec<_>>(),\n    &[\"1\", \"2\", \"3\"]\n);\nassert!(matches.subcommand_matches(\"sub\").is_some());\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4591":{"id":"0:4591","crate_id":0,"name":null,"span":{"filename":"src/error/context.rs","begin":[42,34],"end":[42,36]},"visibility":{"restricted":{"parent":"0:1854:488","path":"::error::context"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:3379:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextValue","id":"0:4569:7000","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3402:2455":{"id":"0:3402:2455","crate_id":0,"name":"TrailingVarArg","span":{"filename":"src/builder/app_settings.rs","begin":[190,4],"end":[190,18]},"visibility":"default","docs":"Deprecated, replaced with [`Command::trailing_var_arg`] and [`Command::is_trailing_var_arg_set`]\n\nDerive: replace `#[clap(setting = TrailingVarArg)]` with `#[clap(trailing_var_arg = true)]`\n\nBuilder: replace `cmd.setting(TrailingVarArg)` with `cmd.trailing_var_arg(true)`","links":{"`Command::trailing_var_arg`":"0:881:5447","`Command::is_trailing_var_arg_set`":"0:1009:5952"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"2:13806:67836":{"id":"2:13806:67836","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4362:6531":{"id":"0:4362:6531","crate_id":0,"name":"ExecutablePath","span":{"filename":"src/builder/value_hint.rs","begin":[42,4],"end":[42,18]},"visibility":"default","docs":"Path to an executable file.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"2:3500:184":{"id":"2:3500:184","crate_id":2,"name":"Output","span":null,"visibility":"default","docs":"The resulting type after applying the `&` operator.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"2:2884:105":{"id":"2:2884:105","crate_id":2,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2885:415","2:2886:417"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1014:5961":{"id":"0:1014:5961","crate_id":0,"name":"is_allow_invalid_utf8_for_external_subcommands_set","span":{"filename":"src/builder/command.rs","begin":[3772,4],"end":[3774,5]},"visibility":"public","docs":"Report whether [`Command::allow_invalid_utf8_for_external_subcommands`] is set","links":{"`Command::allow_invalid_utf8_for_external_subcommands`":"0:908:5667"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8898:9956":{"id":"2:8898:9956","crate_id":2,"name":"for_each","span":null,"visibility":"default","docs":"Calls a closure on each element of an iterator.\n\nThis is equivalent to using a [`for`] loop on the iterator, although\n`break` and `continue` are not possible from a closure. It's generally\nmore idiomatic to use a `for` loop, but `for_each` may be more legible\nwhen processing items at the end of longer iterator chains. In some\ncases `for_each` may also be faster than a loop, because it will use\ninternal iteration on adapters like `Chain`.\n\n[`for`]: ../../book/ch03-05-control-flow.html#looping-through-a-collection-with-for\n\n# Examples\n\nBasic usage:\n\n```\nuse std::sync::mpsc::channel;\n\nlet (tx, rx) = channel();\n(0..5).map(|x| x * 2 + 1)\n      .for_each(move |x| tx.send(x).unwrap());\n\nlet v: Vec<_> =  rx.iter().collect();\nassert_eq!(v, vec![1, 3, 5, 7, 9]);\n```\n\nFor such a small example, a `for` loop may be cleaner, but `for_each`\nmight be preferable to keep a functional style with longer iterators:\n\n```\n(0..5).flat_map(|x| x * 100 .. x * 110)\n      .enumerate()\n      .filter(|&(i, x)| (i + x) % 3 == 0)\n      .for_each(|(i, x)| println!(\"{i}:{x}\"));\n```","links":{},"attrs":["#[stable(feature = \"iterator_for_each\", since = \"1.21.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3624:132","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3206:2391":{"id":"2:3206:2391","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:3180:136"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3817:360":{"id":"0:3817:360","crate_id":0,"name":"bitor","span":{"filename":"src/builder/app_settings.rs","begin":[1019,0],"end":[1115,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"2:3503:2032","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4643:415":{"id":"0:4643:415","crate_id":0,"name":"clone","span":{"filename":"src/error/kind.rs","begin":[2,22],"end":[2,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4594:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1933":{"id":"0:1933","crate_id":0,"name":null,"span":{"filename":"src/error/mod.rs","begin":[1000,0],"end":[1005,1]},"visibility":{"restricted":{"parent":"0:1792:1663","path":"::error"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["source","description","provide","type_id","cause"],"trait":{"name":"Error","id":"2:3278:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4647:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1934:7013"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:483:4182":{"id":"0:483:4182","crate_id":0,"name":"get_possible_values","span":{"filename":"src/builder/arg.rs","begin":[4519,4],"end":[4525,5]},"visibility":"public","docs":"Deprecated, replaced with [`Arg::get_value_parser().possible_values()`]","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:4294:1679","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:32169:69437":{"id":"2:32169:69437","crate_id":2,"name":"checked_mul","span":null,"visibility":"public","docs":"Checked integer multiplication. Computes `self * rhs`, returning\n`None` if overflow occurred.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(5u64.checked_mul(1), Some(5));\nassert_eq!(u64::MAX.checked_mul(2), None);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.47.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2361:59":{"id":"0:2361:59","crate_id":0,"name":"default","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1827,4],"end":[1834,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1627:6845":{"id":"0:1627:6845","crate_id":0,"name":"_ValueParserViaFactorySealed","span":{"filename":"src/builder/value_parser.rs","begin":[2154,4],"end":[2154,45]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8938:9964":{"id":"2:8938:9964","crate_id":2,"name":"collect_into","span":null,"visibility":"default","docs":"Collects all the items from an iterator into a collection.\n\nThis method consumes the iterator and adds all its items to the\npassed collection. The collection is then returned, so the call chain\ncan be continued.\n\nThis is useful when you already have a collection and wants to add\nthe iterator items to it.\n\nThis method is a convenience method to call [Extend::extend](trait.Extend.html),\nbut instead of being called on a collection, it's called on an iterator.\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(iter_collect_into)]\n\nlet a = [1, 2, 3];\nlet mut vec: Vec::<i32> = vec![0, 1];\n\na.iter().map(|&x| x * 2).collect_into(&mut vec);\na.iter().map(|&x| x * 10).collect_into(&mut vec);\n\nassert_eq!(vec![0, 1, 2, 4, 6, 10, 20, 30], vec);\n```\n\n`Vec` can have a manual set capacity to avoid reallocating it:\n\n```\n#![feature(iter_collect_into)]\n\nlet a = [1, 2, 3];\nlet mut vec: Vec::<i32> = Vec::with_capacity(6);\n\na.iter().map(|&x| x * 2).collect_into(&mut vec);\na.iter().map(|&x| x * 10).collect_into(&mut vec);\n\nassert_eq!(6, vec.capacity());\nprintln!(\"{:?}\", vec);\n```\n\nThe returned mutable reference can be used to continue the call chain:\n\n```\n#![feature(iter_collect_into)]\n\nlet a = [1, 2, 3];\nlet mut vec: Vec::<i32> = Vec::with_capacity(6);\n\nlet count = a.iter().collect_into(&mut vec).iter().count();\n\nassert_eq!(count, vec.len());\nprintln!(\"Vec len is {}\", count);\n\nlet count = a.iter().collect_into(&mut vec).iter().count();\n\nassert_eq!(count, vec.len());\nprintln!(\"Vec len now is {}\", count);\n```","links":{},"attrs":["#[unstable(feature = \"iter_collect_into\", reason = \"new API\", issue =\n\"94780\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["collection",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"E"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"E"}}},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Extend","id":"2:8681:8737","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1536:59":{"id":"0:1536:59","crate_id":0,"name":"default","span":{"filename":"src/builder/value_parser.rs","begin":[1743,4],"end":[1745,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4366:6535":{"id":"0:4366:6535","crate_id":0,"name":"CommandString","span":{"filename":"src/builder/value_hint.rs","begin":[46,4],"end":[46,17]},"visibility":"default","docs":"A single string containing a command and its arguments.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"0:2295":{"id":"0:2295","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1631,0],"end":[1631,47]},"visibility":{"restricted":{"parent":"0:2092:7461","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"2:8741:7849","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawValues","id":"0:4768:7385","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:2163:7528":{"id":"0:2163:7528","crate_id":0,"name":"get_count","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[147,4],"end":[151,5]},"visibility":"public","docs":"Gets the value of a specific [`ArgAction::Count`][crate::ArgAction::Count] flag\n\n# Panic\n\nIf the argument's action is not [`ArgAction::Count`][crate::ArgAction::Count]\n\n# Examples\n\n```rust\n# use clap::Command;\n# use clap::Arg;\nlet cmd = Command::new(\"mycmd\")\n    .arg(\n        Arg::new(\"flag\")\n            .long(\"flag\")\n            .action(clap::ArgAction::Count)\n    );\n\nlet matches = cmd.clone().try_get_matches_from([\"mycmd\", \"--flag\", \"--flag\"]).unwrap();\nassert_eq!(\n    matches.get_count(\"flag\"),\n    2\n);\n```","links":{"crate::ArgAction::Count":"0:3364:108"},"attrs":["#[track_caller]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"u8"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3490:611":{"id":"0:3490:611","crate_id":0,"name":"eq","span":{"filename":"src/builder/app_settings.rs","begin":[32,16],"end":[32,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:3389:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2868-0:4828:1684":{"id":"b:2:2868-0:4828:1684","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2862:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4828:1684","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2870:27181"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3338:59":{"id":"0:3338:59","crate_id":0,"name":"default","span":{"filename":"src/util/color.rs","begin":[59,4],"end":[61,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4489:21346":{"id":"1:4489:21346","crate_id":1,"name":"stream_position","span":null,"visibility":"default","docs":"Returns the current seek position from the start of the stream.\n\nThis is equivalent to `self.seek(SeekFrom::Current(0))`.\n\n# Example\n\n```no_run\nuse std::{\n    io::{self, BufRead, BufReader, Seek},\n    fs::File,\n};\n\nfn main() -> io::Result<()> {\n    let mut f = BufReader::new(File::open(\"foo.txt\")?);\n\n    let before = f.stream_position()?;\n    f.read_line(&mut String::new())?;\n    let after = f.stream_position()?;\n\n    println!(\"The first line was {} bytes long\", after - before);\n    Ok(())\n}\n```","links":{},"attrs":["#[stable(feature = \"seek_convenience\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"1:3803:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:32190:69453":{"id":"2:32190:69453","crate_id":2,"name":"saturating_mul","span":null,"visibility":"public","docs":"Saturating integer multiplication. Computes `self * rhs`,\nsaturating at the numeric bounds instead of overflowing.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(2u64.saturating_mul(10), 20);\nassert_eq!((u64::MAX).saturating_mul(10), u64::MAX);\n```","links":{},"attrs":["#[stable(feature = \"wrapping\", since = \"1.7.0\")]","#[rustc_const_stable(feature = \"const_saturating_int_methods\", since =\n\"1.47.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4645":{"id":"0:4645","crate_id":0,"name":null,"span":{"filename":"src/error/kind.rs","begin":[2,29],"end":[2,38]},"visibility":{"restricted":{"parent":"0:1855:791","path":"::error::kind"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2920:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4594:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4594:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4646:611"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4613:7093":{"id":"0:4613:7093","crate_id":0,"name":"TooManyOccurrences","span":{"filename":"src/error/kind.rs","begin":[194,4],"end":[194,22]},"visibility":"default","docs":"Occurs when a user provides more occurrences for an argument than were defined by setting\n[`Arg::max_occurrences`].\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet result = Command::new(\"prog\")\n    .arg(Arg::new(\"verbosity\")\n        .short('v')\n        .max_occurrences(2))\n    .try_get_matches_from(vec![\"prog\", \"-vvv\"]);\nassert!(result.is_err());\nassert_eq!(result.unwrap_err().kind(), ErrorKind::TooManyOccurrences);\n```\n[`Arg::max_occurrences`]: crate::Arg::max_occurrences()","links":{"crate::Arg::max_occurrences()":"0:343:3106"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"0:1538:930":{"id":"0:1538:930","crate_id":0,"name":"new","span":{"filename":"src/builder/value_parser.rs","begin":[1786,4],"end":[1788,5]},"visibility":"public","docs":"Parse non-empty string values","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:162:1670":{"id":"0:162:1670","crate_id":0,"name":"FromArgMatches","span":{"filename":"src/derive.rs","begin":[285,0],"end":[363,1]},"visibility":"public","docs":"Converts an instance of [`ArgMatches`] to a user-defined container.\n\nDerived as part of [`Parser`], [`Args`], and [`Subcommand`].","links":{"`ArgMatches`":"0:4713:1665","`Parser`":"0:127:1671","`Args`":"0:167:1668","`Subcommand`":"0:170:1672"},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:163:2134","0:164:2106","0:165:2181","0:166:2125"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:198"]}},"0:398:3576":{"id":"0:398:3576","crate_id":0,"name":"default_values_os","span":{"filename":"src/builder/arg.rs","begin":[2329,4],"end":[2332,5]},"visibility":"public","docs":"Value for the argument when not present.\n\nSee [`Arg::default_values`].\n\n[`Arg::default_values`]: Arg::default_values()\n[`OsStr`]: std::ffi::OsStr","links":{"Arg::default_values()":"0:396:3581"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["vals",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"1:2654:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2294:7848":{"id":"0:2294:7848","crate_id":0,"name":"next_back","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1626,4],"end":[1628,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"1:2654:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3370:216-0:4693:7387":{"id":"a:2:3370:216-0:4693:7387","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4693:7387","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:931:5847":{"id":"0:931:5847","crate_id":0,"name":"get_long_about","span":{"filename":"src/builder/command.rs","begin":[3368,4],"end":[3370,5]},"visibility":"public","docs":"Get the help message specified via [`Command::long_about`].\n\n[`App::long_about`]: Command::long_about()","links":{"`Command::long_about`":"0:846:4785"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:427:3888":{"id":"0:427:3888","crate_id":0,"name":"default_value_if_os","span":{"filename":"src/builder/arg.rs","begin":[3380,4],"end":[3389,5]},"visibility":"public","docs":"Provides a conditional default value in the exact same manner as [`Arg::default_value_if`]\nonly using [`OsStr`]s instead.\n\n[`Arg::default_value_if`]: Arg::default_value_if()\n[`OsStr`]: std::ffi::OsStr","links":{"Arg::default_value_if()":"0:425:3887","std::ffi::OsStr":"1:2654:182"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["arg_id",{"kind":"generic","inner":"T"}],["val",{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"1:2654:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}}}],["default",{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"1:2654:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Key","id":"0:3239:2795","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1454:6597":{"id":"0:1454:6597","crate_id":0,"name":"Value","span":{"filename":"src/builder/value_parser.rs","begin":[1225,4],"end":[1225,19]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"2:13746:6895":{"id":"2:13746:6895","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"2:13336:8923","prim@char":"1:15876:8642"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13346:8917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3380:107":{"id":"2:3380:107","crate_id":2,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:1494:688":{"id":"0:1494:688","crate_id":0,"name":"from","span":{"filename":"src/builder/value_parser.rs","begin":[1478,4],"end":[1483,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["range",{"kind":"generic","inner":"B"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:816:5053":{"id":"0:816:5053","crate_id":0,"name":"no_binary_name","span":{"filename":"src/builder/command.rs","begin":[919,4],"end":[925,5]},"visibility":"public","docs":"Specifies that the parser should not assume the first argument passed is the binary name.\n\nThis is normally the case when using a \"daemon\" style mode.  For shells / REPLs, see\n[`Command::multicall`][App::multicall].\n\n# Examples\n\n```rust\n# use clap::{Command, arg};\nlet m = Command::new(\"myprog\")\n    .no_binary_name(true)\n    .arg(arg!(<cmd> ... \"commands to run\"))\n    .get_matches_from(vec![\"command\", \"set\"]);\n\nlet cmds: Vec<&str> = m.values_of(\"cmd\").unwrap().collect();\nassert_eq!(cmds, [\"command\", \"set\"]);\n```\n[`try_get_matches_from_mut`]: crate::Command::try_get_matches_from_mut()","links":{"App::multicall":"0:912:5805"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2868-0:4351:1680":{"id":"b:2:2868-0:4351:1680","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2862:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:4351:1680","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2870:27181"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1432:6597":{"id":"0:1432:6597","crate_id":0,"name":"Value","span":{"filename":"src/builder/value_parser.rs","begin":[1036,4],"end":[1036,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"String","id":"5:8479:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"2:10826:1555":{"id":"2:10826:1555","crate_id":2,"name":"write_str","span":null,"visibility":"default","docs":"Writes a single `str` into this hasher.\n\nIf you're implementing [`Hash`], you generally do not need to call this,\nas the `impl Hash for str` does, so you should prefer that instead.\n\nThis includes the domain separator for prefix-freedom, so you should\n**not** call `Self::write_length_prefix` before calling this.\n\n# Note to Implementers\n\nThere are at least two reasonable default ways to implement this.\nWhich one will be the default is not yet decided, so for now\nyou probably want to override it specifically.\n\n## The general answer\n\nIt's always correct to implement this with a length prefix:\n\n```\n# #![feature(hasher_prefixfree_extras)]\n# struct Foo;\n# impl std::hash::Hasher for Foo {\n# fn finish(&self) -> u64 { unimplemented!() }\n# fn write(&mut self, _bytes: &[u8]) { unimplemented!() }\nfn write_str(&mut self, s: &str) {\n    self.write_length_prefix(s.len());\n    self.write(s.as_bytes());\n}\n# }\n```\n\nAnd, if your `Hasher` works in `usize` chunks, this is likely a very\nefficient way to do it, as anything more complicated may well end up\nslower than just running the round with the length.\n\n## If your `Hasher` works byte-wise\n\nOne nice thing about `str` being UTF-8 is that the `b'\\xFF'` byte\nnever happens.  That means that you can append that to the byte stream\nbeing hashed and maintain prefix-freedom:\n\n```\n# #![feature(hasher_prefixfree_extras)]\n# struct Foo;\n# impl std::hash::Hasher for Foo {\n# fn finish(&self) -> u64 { unimplemented!() }\n# fn write(&mut self, _bytes: &[u8]) { unimplemented!() }\nfn write_str(&mut self, s: &str) {\n    self.write(s.as_bytes());\n    self.write_u8(0xff);\n}\n# }\n```\n\nThis does require that your implementation not add extra padding, and\nthus generally requires that you maintain a buffer, running a round\nonly once that buffer is full (or `finish` is called).\n\nThat's because if `write` pads data out to a fixed chunk size, it's\nlikely that it does it in such a way that `\"a\"` and `\"a\\x00\"` would\nend up hashing the same sequence of things, introducing conflicts.","links":{"`Hash`":"2:10800:143"},"attrs":["#[unstable(feature = \"hasher_prefixfree_extras\", issue = \"96762\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["s",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4471":{"id":"0:4471","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1780,15],"end":[1780,20]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"NonEmptyStringValueParser","id":"0:4469:2274","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4472:415"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4396":{"id":"0:4396","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[718,22],"end":[718,27]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StringValueParser","id":"0:4392:2263","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4397:667"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1337:688":{"id":"0:1337:688","crate_id":0,"name":"from","span":{"filename":"src/builder/value_parser.rs","begin":[474,4],"end":[477,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["value",{"kind":"resolved_path","inner":{"name":"std::ops::RangeFull","id":"2:46172:199","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4451:2270":{"id":"0:4451:2270","crate_id":0,"name":"BoolValueParser","span":{"filename":"src/builder/value_parser.rs","begin":[1497,0],"end":[1497,29]},"visibility":"public","docs":"Implementation for [`ValueParser::bool`]\n\nUseful for composing new [`TypedValueParser`]s","links":{"`TypedValueParser`":"0:1362:2264","`ValueParser::bool`":"0:1312:367"},"attrs":["#[non_exhaustive]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":false}},"generics":{"params":[],"where_predicates":[]},"impls":["0:1498","a:2:9533:7458-0:4451:2270","a:2:9532:7459-0:4451:2270","a:2:3382:225-0:4451:2270","a:2:3370:216-0:4451:2270","a:2:3411:6205-0:4451:2270","b:2:4104-0:4451:2270","b:2:2865-0:4451:2270","b:2:3203-0:4451:2270","b:2:3207-0:4451:2270","b:2:3218-0:4451:2270","b:2:2868-0:4451:2270","b:2:3213-0:4451:2270","b:5:848-0:4451:2270","0:4452","0:4453","0:4455","0:1502","0:1508"]}},"2:3254:116":{"id":"2:3254:116","crate_id":2,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3255:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:32160:69430":{"id":"2:32160:69430","crate_id":2,"name":"from_be","span":null,"visibility":"public","docs":"Converts an integer from big endian to the target's endianness.\n\nOn big endian this is a no-op. On little endian the bytes are\nswapped.\n\n# Examples\n\nBasic usage:\n\n```\nlet n = 0x1Au64;\n\nif cfg!(target_endian = \"big\") {\n    assert_eq!(u64::from_be(n), n)\n} else {\n    assert_eq!(u64::from_be(n), n.swap_bytes())\n}\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["x",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13819:67838":{"id":"2:13819:67838","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:13336:8923","prim@char":"1:15876:8642"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13346:8917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13346:8917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13361:8918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:4154:10132":{"id":"2:4154:10132","crate_id":2,"name":"provide","span":null,"visibility":"default","docs":"Data providers should implement this method to provide *all* values they are able to\nprovide by using `demand`.\n\nNote that the `provide_*` methods on `Demand` have short-circuit semantics: if an earlier\nmethod has successfully provided a value, then later methods will not get an opportunity to\nprovide.\n\n# Examples\n\nProvides a reference to a field with type `String` as a `&str`, and a value of\ntype `i32`.\n\n```rust\n# #![feature(provide_any)]\nuse std::any::{Provider, Demand};\n# struct SomeConcreteType { field: String, num_field: i32 }\n\nimpl Provider for SomeConcreteType {\n    fn provide<'a>(&'a self, demand: &mut Demand<'a>) {\n        demand.provide_ref::<str>(&self.field)\n            .provide_value::<i32>(self.num_field);\n    }\n}\n```","links":{},"attrs":["#[unstable(feature = \"provide_any\", issue = \"96024\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["demand",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Demand","id":"2:4168:9026","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:41":{"id":"0:41","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[109,82],"end":[109,91]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::derive::ValueEnum","name":"ValueEnum","id":"0:174:1673","glob":false}},"b:2:4104-0:4457:2273":{"id":"b:2:4104-0:4457:2273","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:4102:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FalseyValueParser","id":"0:4457:2273","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:4106:1449"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:410:3756":{"id":"0:410:3756","crate_id":0,"name":"display_order","span":{"filename":"src/builder/arg.rs","begin":[2789,4],"end":[2792,5]},"visibility":"public","docs":"Allows custom ordering of args within the help message.\n\nArgs with a lower value will be displayed first in the help message. This is helpful when\none would like to emphasise frequently used args, or prioritize those towards the top of\nthe list. Args with duplicate display orders will be displayed in alphabetical order.\n\n**NOTE:** The default is 999 for all arguments.\n\n**NOTE:** This setting is ignored for [positional arguments] which are always displayed in\n[index] order.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"a\") // Typically args are grouped alphabetically by name.\n                             // Args without a display_order have a value of 999 and are\n                             // displayed alphabetically with all other 999 valued args.\n        .long(\"long-option\")\n        .short('o')\n        .takes_value(true)\n        .help(\"Some help and text\"))\n    .arg(Arg::new(\"b\")\n        .long(\"other-option\")\n        .short('O')\n        .takes_value(true)\n        .display_order(1)   // In order to force this arg to appear *first*\n                            // all we have to do is give it a value lower than 999.\n                            // Any other args with a value of 1 will be displayed\n                            // alphabetically with this one...then 2 values, then 3, etc.\n        .help(\"I should be first!\"))\n    .get_matches_from(vec![\n        \"prog\", \"--help\"\n    ]);\n```\n\nThe above example displays the following help message\n\n```text\ncust-ord\n\nUSAGE:\n    cust-ord [OPTIONS]\n\nOPTIONS:\n    -h, --help                Print help information\n    -V, --version             Print version information\n    -O, --other-option <b>    I should be first!\n    -o, --long-option <a>     Some help and text\n```\n[positional arguments]: Arg::index()\n[index]: Arg::index()","links":{"Arg::index()":"0:335:761"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["ord",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3382:225-0:4647:128":{"id":"a:2:3382:225-0:4647:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4647:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1057":{"id":"0:1057","crate_id":0,"name":null,"span":{"filename":"src/builder/command.rs","begin":[4142,0],"end":[4858,1]},"visibility":{"restricted":{"parent":"0:649:1913","path":"::builder::command"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:4241:1674","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":["0:1074:6050"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:777:2011":{"id":"0:777:2011","crate_id":0,"name":"group","span":{"filename":"src/builder/command.rs","begin":[354,4],"end":[357,5]},"visibility":"public","docs":"Adds an [`ArgGroup`] to the application.\n\n[`ArgGroup`]s are a family of related arguments.\nBy placing them in a logical group, you can build easier requirement and exclusion rules.\n\nExample use cases:\n- Make an entire [`ArgGroup`] required, meaning that one (and *only*\n  one) argument from that group must be present at runtime.\n- Name an [`ArgGroup`] as a conflict to another argument.\n  Meaning any of the arguments that belong to that group will cause a failure if present with\n  the conflicting argument.\n- Ensure exclusion between arguments.\n- Extract a value from a group instead of determining exactly which argument was used.\n\n# Examples\n\nThe following example demonstrates using an [`ArgGroup`] to ensure that one, and only one,\nof the arguments from the specified group is present at runtime.\n\n```no_run\n# use clap::{Command, arg, ArgGroup};\nCommand::new(\"cmd\")\n    .arg(arg!(\"--set-ver [ver] 'set the version manually'\"))\n    .arg(arg!(\"--major 'auto increase major'\"))\n    .arg(arg!(\"--minor 'auto increase minor'\"))\n    .arg(arg!(\"--patch 'auto increase patch'\"))\n    .group(ArgGroup::new(\"vers\")\n         .args(&[\"set-ver\", \"major\", \"minor\",\"patch\"])\n         .required(true))\n# ;\n```","links":{"`ArgGroup`":"0:3904:1662"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["group",{"kind":"generic","inner":"G"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3904:1662","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3411:6205-0:4647:128":{"id":"a:2:3411:6205-0:4647:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:3411:6205","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4647:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:9532:7459-0:3389:1676":{"id":"a:2:9532:7459-0:3389:1676","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:9532:7459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:3389:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:23393:21791":{"id":"2:23393:21791","crate_id":2,"name":"to_bitmask","span":null,"visibility":"default","docs":"Converts a mask to a bitmask.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"BitMask","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"ToBitMask","id":"2:23391:18217","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:421:2011":{"id":"0:421:2011","crate_id":0,"name":"group","span":{"filename":"src/builder/arg.rs","begin":[3212,4],"end":[3215,5]},"visibility":"public","docs":"The name of the [`ArgGroup`] the argument belongs to.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg};\nArg::new(\"debug\")\n    .long(\"debug\")\n    .group(\"mode\")\n# ;\n```\n\nMultiple arguments can be a member of a single group and then the group checked as if it\nwas one of said arguments.\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"debug\")\n        .long(\"debug\")\n        .group(\"mode\"))\n    .arg(Arg::new(\"verbose\")\n        .long(\"verbose\")\n        .group(\"mode\"))\n    .get_matches_from(vec![\n        \"prog\", \"--debug\"\n    ]);\nassert!(m.contains_id(\"mode\"));\n```\n\n[`ArgGroup`]: crate::ArgGroup","links":{"crate::ArgGroup":"0:3904:1662"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["group_id",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Key","id":"0:3239:2795","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3213-0:4398:2275":{"id":"b:2:3213-0:4398:2275","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3183:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsStringValueParser","id":"0:4398:2275","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3216:128","2:3217:1436"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:9533:7458-0:4463:2271":{"id":"a:2:9533:7458-0:4463:2271","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:9533:7458","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BoolishValueParser","id":"0:4463:2271","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:9002:2237":{"id":"2:9002:2237","crate_id":2,"name":"find","span":null,"visibility":"default","docs":"Searches for an element of an iterator that satisfies a predicate.\n\n`find()` takes a closure that returns `true` or `false`. It applies\nthis closure to each element of the iterator, and if any of them return\n`true`, then `find()` returns [`Some(element)`]. If they all return\n`false`, it returns [`None`].\n\n`find()` is short-circuiting; in other words, it will stop processing\nas soon as the closure returns `true`.\n\nBecause `find()` takes a reference, and many iterators iterate over\nreferences, this leads to a possibly confusing situation where the\nargument is a double reference. You can see this effect in the\nexamples below, with `&&x`.\n\n[`Some(element)`]: Some\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\n\nassert_eq!(a.iter().find(|&&x| x == 2), Some(&2));\n\nassert_eq!(a.iter().find(|&&x| x == 5), None);\n```\n\nStopping at the first `true`:\n\n```\nlet a = [1, 2, 3];\n\nlet mut iter = a.iter();\n\nassert_eq!(iter.find(|&&x| x == 2), Some(&2));\n\n// we can still use `iter`, as there are more elements.\nassert_eq!(iter.next(), Some(&3));\n```\n\nNote that `iter.find(f)` is equivalent to `iter.filter(f).next()`.","links":{"`None`":"2:47811:177","Some":"2:47813:220"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["predicate",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3624:132","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5557:28834":{"id":"1:5557:28834","crate_id":1,"name":"is_block_device","span":null,"visibility":"default","docs":"Returns `true` if this file type is a block device.\n\n# Examples\n\n```no_run\nuse std::fs;\nuse std::os::unix::fs::FileTypeExt;\nuse std::io;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"block_device_file\")?;\n    let file_type = meta.file_type();\n    assert!(file_type.is_block_device());\n    Ok(())\n}\n```","links":{},"attrs":["#[stable(feature = \"file_type_ext\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:969:5891":{"id":"0:969:5891","crate_id":0,"name":"find_subcommand","span":{"filename":"src/builder/command.rs","begin":[3536,4],"end":[3541,5]},"visibility":"public","docs":"Find subcommand such that its name or one of aliases equals `name`.\n\nThis does not recurse through subcommands of subcommands.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"App","id":"0:4241:1674","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2920:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10818:10568":{"id":"2:10818:10568","crate_id":2,"name":"write_usize","span":null,"visibility":"default","docs":"Writes a single `usize` into this hasher.","links":{},"attrs":["#[stable(feature = \"hasher_write\", since = \"1.3.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2865-0:4469:2274":{"id":"b:2:2865-0:4469:2274","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"NonEmptyStringValueParser","id":"0:4469:2274","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2867:2792"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:876:5344":{"id":"0:876:5344","crate_id":0,"name":"next_display_order","span":{"filename":"src/builder/command.rs","begin":[1932,4],"end":[1935,5]},"visibility":"public","docs":"Change the starting value for assigning future display orders for ags.\n\nThis will be used for any arg that hasn't had [`Arg::display_order`] called.","links":{"`Arg::display_order`":"0:410:3756"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["disp_ord",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl Into<Option<usize>>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3358:2350":{"id":"0:3358:2350","crate_id":0,"name":"IncOccurrence","span":{"filename":"src/builder/action.rs","begin":[110,4],"end":[110,17]},"visibility":"default","docs":"Deprecated, replaced with [`ArgAction::SetTrue`] or [`ArgAction::Count`]","links":{"`ArgAction::SetTrue`":"0:3360:2361","`ArgAction::Count`":"0:3364:108"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"0:1388:59":{"id":"0:1388:59","crate_id":0,"name":"default","span":{"filename":"src/builder/value_parser.rs","begin":[758,4],"end":[760,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2865-0:4707:2393":{"id":"b:2:2865-0:4707:2393","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AnyValueId","id":"0:4707:2393","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2867:2792"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:23149:21819":{"id":"2:23149:21819","crate_id":2,"name":"reduce_min","span":null,"visibility":"default","docs":"Returns the minimum lane in the vector.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Scalar","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdUint","id":"2:23142:11395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:6469:13017":{"id":"1:6469:13017","crate_id":1,"name":"st_size","span":null,"visibility":"default","docs":"Returns the size of the file (if it is a regular file or a symbolic link) in bytes.\n\nThe size of a symbolic link is the length of the pathname it contains,\nwithout a terminating null byte.\n\n# Examples\n\n```no_run\nuse std::fs;\nuse std::io;\nuse std::os::linux::fs::MetadataExt;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    println!(\"{}\", meta.st_size());\n    Ok(())\n}\n```","links":{},"attrs":["#[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:2:4104-0:4398:2275":{"id":"b:2:4104-0:4398:2275","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:4102:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsStringValueParser","id":"0:4398:2275","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:4106:1449"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:885:4781":{"id":"0:885:4781","crate_id":0,"name":"short_flag","span":{"filename":"src/builder/command.rs","begin":[2311,4],"end":[2314,5]},"visibility":"public","docs":"Sets the short version of the subcommand flag without the preceding `-`.\n\nAllows the subcommand to be used as if it were an [`Arg::short`].\n\n# Examples\n\n```\n# use clap::{Command, Arg, ArgAction};\nlet matches = Command::new(\"pacman\")\n    .subcommand(\n        Command::new(\"sync\").short_flag('S').arg(\n            Arg::new(\"search\")\n                .short('s')\n                .long(\"search\")\n                .action(ArgAction::SetTrue)\n                .help(\"search remote repositories for matching strings\"),\n        ),\n    )\n    .get_matches_from(vec![\"pacman\", \"-Ss\"]);\n\nassert_eq!(matches.subcommand_name().unwrap(), \"sync\");\nlet sync_matches = matches.subcommand_matches(\"sync\").unwrap();\nassert!(*sync_matches.get_one::<bool>(\"search\").expect(\"defaulted by clap\"));\n```\n[`Arg::short`]: Arg::short()","links":{"Arg::short()":"0:320:1942"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["short",{"kind":"primitive","inner":"char"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4425:6115":{"id":"1:4425:6115","crate_id":1,"name":"take","span":null,"visibility":"default","docs":"Creates an adapter which will read at most `limit` bytes from it.\n\nThis function returns a new instance of `Read` which will read at most\n`limit` bytes, after which it will always return EOF ([`Ok(0)`]). Any\nread errors will not count towards the number of bytes read and future\ncalls to [`read()`] may succeed.\n\n# Examples\n\n[`File`]s implement `Read`:\n\n[`File`]: crate::fs::File\n[`Ok(0)`]: Ok\n[`read()`]: Read::read\n\n```no_run\nuse std::io;\nuse std::io::prelude::*;\nuse std::fs::File;\n\nfn main() -> io::Result<()> {\n    let f = File::open(\"foo.txt\")?;\n    let mut buffer = [0; 5];\n\n    // read at most five bytes\n    let mut handle = f.take(5);\n\n    handle.read(&mut buffer)?;\n    Ok(())\n}\n```","links":{"crate::fs::File":"1:2909:129","Read::read":"1:4411:11149","Ok":"2:47937:178"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["limit",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"resolved_path","inner":{"name":"Take","id":"1:10966:8991","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4711":{"id":"0:4711","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/any_value.rs","begin":[41,15],"end":[41,20]},"visibility":{"restricted":{"parent":"0:2060:7460","path":"::parser::matches::any_value"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AnyValueId","id":"0:4707:2393","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4712:415"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4425":{"id":"0:4425","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1025,16],"end":[1025,21]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValuesParser","id":"0:4420:2260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4426:667"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4783":{"id":"0:4783","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1654,9],"end":[1654,14]},"visibility":{"restricted":{"parent":"0:2092:7461","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:4778:1685","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:4785:415"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3207-0:4828:1684":{"id":"b:2:3207-0:4828:1684","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4828:1684","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3209:688"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13354:28630":{"id":"2:13354:28630","crate_id":2,"name":"strip_suffix_of","span":null,"visibility":"default","docs":"Removes the pattern from the back of haystack, if it matches.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["haystack",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Pattern","id":"2:13346:8917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13361:8918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9532:7459-0:4469:2274":{"id":"a:2:9532:7459-0:4469:2274","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:9532:7459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"NonEmptyStringValueParser","id":"0:4469:2274","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:13810:2894":{"id":"2:13810:2894","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:13336:8923","prim@char":"1:15876:8642"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13346:8917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1231:6264":{"id":"0:1231:6264","crate_id":0,"name":"get_name_and_aliases","span":{"filename":"src/builder/possible_value.rs","begin":[219,4],"end":[221,5]},"visibility":"public","docs":"Returns all valid values of the argument value.\n\nNamely the name and all aliases.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}}]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'_"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:358:1952":{"id":"0:358:1952","crate_id":0,"name":"min_values","span":{"filename":"src/builder/arg.rs","begin":[1390,4],"end":[1393,5]},"visibility":"public","docs":"The *minimum* number of values for this argument.\n\nFor example, if you had a\n`-f <file>` argument where you wanted at least 2 'files' you would set\n`.min_values(2)`, and this argument would be satisfied if the user provided, 2 or more\nvalues.\n\n**NOTE:** This does not implicitly set [`Arg::multiple_occurrences(true)`]. This is because\n`-o val -o val` is multiple occurrences but a single value and `-o val1 val2` is a single\noccurrence with multiple values. For positional arguments this **does** set\n[`Arg::multiple_occurrences(true)`] because there is no way to determine the difference between multiple\noccurrences and multiple values.\n\n**NOTE:** Passing a non-zero value is not the same as specifying [`Arg::required(true)`].\nThis is due to min and max validation only being performed for present arguments,\nmarking them as required will thus perform validation and a min value of 1\nis unnecessary, ignored if not required.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg};\nArg::new(\"file\")\n    .short('f')\n    .min_values(3);\n```\n\nSupplying more than the minimum number of values is allowed\n\n```rust\n# use clap::{Command, Arg};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"file\")\n        .takes_value(true)\n        .min_values(2)\n        .short('F'))\n    .try_get_matches_from(vec![\n        \"prog\", \"-F\", \"file1\", \"file2\", \"file3\"\n    ]);\n\nassert!(res.is_ok());\nlet m = res.unwrap();\nlet files: Vec<_> = m.values_of(\"file\").unwrap().collect();\nassert_eq!(files, [\"file1\", \"file2\", \"file3\"]);\n```\n\nSupplying less than the minimum number of values is an error\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"file\")\n        .takes_value(true)\n        .min_values(2)\n        .short('F'))\n    .try_get_matches_from(vec![\n        \"prog\", \"-F\", \"file1\"\n    ]);\n\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind(), ErrorKind::TooFewValues);\n```\n[`Arg::multiple_occurrences(true)`]: Arg::multiple_occurrences()\n[`Arg::required(true)`]: Arg::required()","links":{"Arg::multiple_occurrences()":"0:342:1954","Arg::required()":"0:337:1948"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["qty",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13360:28670":{"id":"2:13360:28670","crate_id":2,"name":"next_reject","span":null,"visibility":"default","docs":"Finds the next [`Reject`][SearchStep::Reject] result. See [`next()`][Searcher::next]\nand [`next_match()`][Searcher::next_match].\n\nUnlike [`next()`][Searcher::next], there is no guarantee that the returned ranges\nof this and [`next_match`][Searcher::next_match] will overlap.","links":{"Searcher::next":"2:13358:932","Searcher::next_match":"2:13359:28669","SearchStep::Reject":"2:50175:14081"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"primitive","inner":"usize"}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5527:11212":{"id":"1:5527:11212","crate_id":1,"name":"uid","span":null,"visibility":"default","docs":"Returns the user ID of the owner of this file.\n\n# Examples\n\n```no_run\nuse std::fs;\nuse std::os::unix::fs::MetadataExt;\nuse std::io;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    let user_id = meta.uid();\n    Ok(())\n}\n```","links":{},"attrs":["#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:3838:694":{"id":"2:3838:694","crate_id":2,"name":"from_residual","span":null,"visibility":"default","docs":"Constructs the type from a compatible `Residual` type.\n\nThis should be implemented consistently with the `branch` method such\nthat applying the `?` operator will get back an equivalent residual:\n`FromResidual::from_residual(r).branch() --> ControlFlow::Break(r)`.\n(It must not be an *identical* residual when interconversion is involved.)\n\n# Examples\n\n```\n#![feature(try_trait_v2)]\nuse std::ops::{ControlFlow, FromResidual};\n\nassert_eq!(Result::<String, i64>::from_residual(Err(3_u8)), Err(3));\nassert_eq!(Option::<String>::from_residual(None), None);\nassert_eq!(\n    ControlFlow::<_, String>::from_residual(ControlFlow::Break(5)),\n    ControlFlow::Break(5),\n);\n```","links":{},"attrs":["#[unstable(feature = \"try_trait_v2\", issue = \"84277\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["residual",{"kind":"generic","inner":"R"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:8202:27622":{"id":"2:8202:27622","crate_id":2,"name":"backward","span":null,"visibility":"default","docs":"Returns the value that would be obtained by taking the *predecessor*\nof `self` `count` times.\n\nIf this would overflow the range of values supported by `Self`,\nthis function is allowed to panic, wrap, or saturate.\nThe suggested behavior is to panic when debug assertions are enabled,\nand to wrap or saturate otherwise.\n\nUnsafe code should not rely on the correctness of behavior after overflow.\n\n# Invariants\n\nFor any `a`, `n`, and `m`, where no overflow occurs:\n\n* `Step::backward(Step::backward(a, n), m) == Step::backward(a, n + m)`\n\nFor any `a` and `n`, where no overflow occurs:\n\n* `Step::backward_checked(a, n) == Some(Step::backward(a, n))`\n* `Step::backward(a, n) == (0..n).fold(a, |x, _| Step::backward(x, 1))`\n  * Corollary: `Step::backward(a, 0) == a`\n* `Step::backward(a, n) <= a`\n* `Step::forward(Step::backward(a, n), n) == a`","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["start",{"kind":"generic","inner":"Self"}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:851:4983":{"id":"5:851:4983","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4379:667":{"id":"0:4379:667","crate_id":0,"name":"fmt","span":{"filename":"src/builder/value_hint.rs","begin":[27,9],"end":[27,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10511:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:9094:9974":{"id":"2:9094:9974","crate_id":2,"name":"cycle","span":null,"visibility":"default","docs":"Repeats an iterator endlessly.\n\nInstead of stopping at [`None`], the iterator will instead start again,\nfrom the beginning. After iterating again, it will start at the\nbeginning again. And again. And again. Forever. Note that in case the\noriginal iterator is empty, the resulting iterator will also be empty.\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\n\nlet mut it = a.iter().cycle();\n\nassert_eq!(it.next(), Some(&1));\nassert_eq!(it.next(), Some(&2));\nassert_eq!(it.next(), Some(&3));\nassert_eq!(it.next(), Some(&1));\nassert_eq!(it.next(), Some(&2));\nassert_eq!(it.next(), Some(&3));\nassert_eq!(it.next(), Some(&1));\n```","links":{"`None`":"2:47811:177"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Cycle","id":"2:46935:9053","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1329:688":{"id":"0:1329:688","crate_id":0,"name":"from","span":{"filename":"src/builder/value_parser.rs","begin":[354,4],"end":[357,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["value",{"kind":"resolved_path","inner":{"name":"std::ops::RangeInclusive","id":"2:46254:200","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i64"}}],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5523:14731":{"id":"1:5523:14731","crate_id":1,"name":"dev","span":null,"visibility":"default","docs":"Returns the ID of the device containing the file.\n\n# Examples\n\n```no_run\nuse std::io;\nuse std::fs;\nuse std::os::unix::fs::MetadataExt;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    let dev_id = meta.dev();\n    Ok(())\n}\n```","links":{},"attrs":["#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"a:2:3382:225-0:4713:1665":{"id":"a:2:3382:225-0:4713:1665","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4713:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:13355:8919":{"id":"2:13355:8919","crate_id":2,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13357:11302","2:13358:932","2:13359:28669","2:13360:28670"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3207-0:4427:2261":{"id":"b:2:3207-0:4427:2261","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:4427:2261","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:3209:688"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:921:5830":{"id":"0:921:5830","crate_id":0,"name":"get_bin_name","span":{"filename":"src/builder/command.rs","begin":[3311,4],"end":[3313,5]},"visibility":"public","docs":"Get the name of the binary.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2298:59":{"id":"0:2298:59","crate_id":0,"name":"default","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1635,4],"end":[1641,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:32177:69444":{"id":"2:32177:69444","crate_id":2,"name":"ilog10","span":null,"visibility":"public","docs":"Returns the base 10 logarithm of the number, rounded down.\n\n# Panics\n\nWhen the number is zero it panics in debug mode and the\nreturn value is 0 in release mode.\n\n# Example\n\n```\n#![feature(int_log)]\nassert_eq!(10u64.ilog10(), 1);\n```","links":{},"attrs":["#[unstable(feature = \"int_log\", issue = \"70887\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]","#[track_caller]","#[allow(arithmetic_overflow)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4475:9564":{"id":"1:4475:9564","crate_id":1,"name":"write_fmt","span":null,"visibility":"default","docs":"Writes a formatted string into this writer, returning any error\nencountered.\n\nThis method is primarily used to interface with the\n[`format_args!()`] macro, and it is rare that this should\nexplicitly be called. The [`write!()`] macro should be favored to\ninvoke this method instead.\n\nThis function internally uses the [`write_all`] method on\nthis trait and hence will continuously write data so long as no errors\nare received. This also means that partial writes are not indicated in\nthis signature.\n\n[`write_all`]: Write::write_all\n\n# Errors\n\nThis function will return any I/O error reported while formatting.\n\n# Examples\n\n```no_run\nuse std::io::prelude::*;\nuse std::fs::File;\n\nfn main() -> std::io::Result<()> {\n    let mut buffer = File::create(\"foo.txt\")?;\n\n    // this call\n    write!(buffer, \"{:.*}\", 2, 1.234567)?;\n    // turns into this:\n    buffer.write_fmt(format_args!(\"{:.*}\", 2, 1.234567))?;\n    Ok(())\n}\n```","links":{"`write!()`":"2:14:1869","Write::write_all":"1:4473:8305","`format_args!()`":"2:21:679"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["fmt",{"kind":"resolved_path","inner":{"name":"Arguments","id":"2:48946:73","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"1:3803:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4439:2262":{"id":"0:4439:2262","crate_id":0,"name":"RangedU64ValueParser","span":{"filename":"src/builder/value_parser.rs","begin":[1333,0],"end":[1336,1]},"visibility":"public","docs":"Parse number that fall within a range of values\n\n# Example\n\nUsage:\n```rust\nlet mut cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"port\")\n            .long(\"port\")\n            .value_parser(clap::value_parser!(u64).range(3000..))\n            .takes_value(true)\n            .required(true)\n    );\n\nlet m = cmd.try_get_matches_from_mut([\"cmd\", \"--port\", \"3001\"]).unwrap();\nlet port: u64 = *m.get_one(\"port\")\n    .expect(\"required\");\nassert_eq!(port, 3001);\n```\n\nSemantics:\n```rust\n# use std::ffi::OsStr;\n# use clap::builder::TypedValueParser;\n# let cmd = clap::Command::new(\"test\");\n# let arg = None;\nlet value_parser = clap::builder::RangedU64ValueParser::<u32>::new().range(0..200);\nassert!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"random\")).is_err());\nassert!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"\")).is_err());\nassert!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"-200\")).is_err());\nassert!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"300\")).is_err());\nassert!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"-1\")).is_err());\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"0\")).unwrap(), 0);\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"50\")).unwrap(), 50);\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"std::convert::TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"kind":"primitive","inner":"u64"},"synthetic":false}}}],"where_predicates":[]},"impls":["0:1472","a:2:9533:7458-0:4439:2262","a:2:9532:7459-0:4439:2262","a:2:3382:225-0:4439:2262","a:2:3370:216-0:4439:2262","a:2:3411:6205-0:4439:2262","b:2:4104-0:4439:2262","b:2:2865-0:4439:2262","b:2:3203-0:4439:2262","b:2:3207-0:4439:2262","b:2:3218-0:4439:2262","b:2:2868-0:4439:2262","b:2:3213-0:4439:2262","b:5:848-0:4439:2262","0:4443","0:4445","0:4448","0:1478","0:1491","0:1495"]}},"1:4469:10375":{"id":"1:4469:10375","crate_id":1,"name":"write_vectored","span":null,"visibility":"default","docs":"Like [`write`], except that it writes from a slice of buffers.\n\nData is copied from each buffer in order, with the final buffer\nread from possibly being only partially consumed. This method must\nbehave as a call to [`write`] with the buffers concatenated would.\n\nThe default implementation calls [`write`] with either the first nonempty\nbuffer provided, or an empty one if none exists.\n\n# Examples\n\n```no_run\nuse std::io::IoSlice;\nuse std::io::prelude::*;\nuse std::fs::File;\n\nfn main() -> std::io::Result<()> {\n    let data1 = [1; 8];\n    let data2 = [15; 8];\n    let io_slice1 = IoSlice::new(&data1);\n    let io_slice2 = IoSlice::new(&data2);\n\n    let mut buffer = File::create(\"foo.txt\")?;\n\n    // Writes some prefix of the byte string, not necessarily all of it.\n    buffer.write_vectored(&[io_slice1, io_slice2])?;\n    Ok(())\n}\n```\n\n[`write`]: Write::write","links":{"Write::write":"1:4468:1869"},"attrs":["#[stable(feature = \"iovec\", since = \"1.36.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"1:10923:8987","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"1:3803:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:911:5720":{"id":"0:911:5720","crate_id":0,"name":"subcommand_negates_reqs","span":{"filename":"src/builder/command.rs","begin":[3025,4],"end":[3031,5]},"visibility":"public","docs":"Allows [`subcommands`] to override all requirements of the parent command.\n\nFor example, if you had a subcommand or top level application with a required argument\nthat is only required as long as there is no subcommand present,\nusing this setting would allow you to set those arguments to [`Arg::required(true)`]\nand yet receive no error so long as the user uses a valid subcommand instead.\n\n**NOTE:** This defaults to false (using subcommand does *not* negate requirements)\n\n# Examples\n\nThis first example shows that it is an error to not use a required argument\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet err = Command::new(\"myprog\")\n    .subcommand_negates_reqs(true)\n    .arg(Arg::new(\"opt\").required(true))\n    .subcommand(Command::new(\"test\"))\n    .try_get_matches_from(vec![\n        \"myprog\"\n    ]);\nassert!(err.is_err());\nassert_eq!(err.unwrap_err().kind(), ErrorKind::MissingRequiredArgument);\n# ;\n```\n\nThis next example shows that it is no longer error to not use a required argument if a\nvalid subcommand is used.\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet noerr = Command::new(\"myprog\")\n    .subcommand_negates_reqs(true)\n    .arg(Arg::new(\"opt\").required(true))\n    .subcommand(Command::new(\"test\"))\n    .try_get_matches_from(vec![\n        \"myprog\", \"test\"\n    ]);\nassert!(noerr.is_ok());\n# ;\n```\n\n[`Arg::required(true)`]: crate::Arg::required()\n[`subcommands`]: crate::Command::subcommand()","links":{"crate::Arg::required()":"0:337:1948","crate::Command::subcommand()":"0:782:2012"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3411:6205-0:4392:2263":{"id":"a:2:3411:6205-0:4392:2263","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:3411:6205","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StringValueParser","id":"0:4392:2263","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:5080":{"id":"0:5080","crate_id":0,"name":null,"span":{"filename":"src/util/color.rs","begin":[2,22],"end":[2,27]},"visibility":{"restricted":{"parent":"0:3336:1575","path":"::util::color"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:5070:1667","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5081:415"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:5531:28825":{"id":"1:5531:28825","crate_id":1,"name":"atime","span":null,"visibility":"default","docs":"Returns the last access time of the file, in seconds since Unix Epoch.\n\n# Examples\n\n```no_run\nuse std::fs;\nuse std::os::unix::fs::MetadataExt;\nuse std::io;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    let last_access_time = meta.atime();\n    Ok(())\n}\n```","links":{},"attrs":["#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:5503:28813":{"id":"1:5503:28813","crate_id":1,"name":"write_at","span":null,"visibility":"default","docs":"Writes a number of bytes starting from a given offset.\n\nReturns the number of bytes written.\n\nThe offset is relative to the start of the file and thus independent\nfrom the current cursor.\n\nThe current file cursor is not affected by this function.\n\nWhen writing beyond the end of the file, the file is appropriately\nextended and the intermediate bytes are initialized with the value 0.\n\nNote that similar to [`File::write`], it is not an error to return a\nshort write.\n\n[`File::write`]: fs::File::write\n\n# Examples\n\n```no_run\nuse std::fs::File;\nuse std::io;\nuse std::os::unix::prelude::FileExt;\n\nfn main() -> io::Result<()> {\n    let file = File::open(\"foo.txt\")?;\n\n    // We now write at the offset 10.\n    file.write_at(b\"sushi\", 10)?;\n    Ok(())\n}\n```","links":{"fs::File::write":"1:2958:1869"},"attrs":["#[stable(feature = \"file_offset\", since = \"1.15.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["offset",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"1:3803:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:4695:7452":{"id":"0:4695:7452","crate_id":0,"name":"actual","span":{"filename":"src/parser/error.rs","begin":[12,8],"end":[12,33]},"visibility":"default","docs":"Type for value stored in [`ArgMatches`][crate::ArgMatches]","links":{"crate::ArgMatches":"0:4713:1665"},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"super::AnyValueId","id":"0:4707:2393","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"2:1233":{"id":"2:1233","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:305:7440","path":"::num"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"u64"},"items":["2:32146:6772","2:32147:6773","2:32148:69421","2:32149:11591","2:32150:69423","2:32151:69424","2:32152:46879","2:32153:69425","2:32154:69426","2:32155:69427","2:32156:1132","2:32157:1133","2:32158:69428","2:32159:69429","2:32160:69430","2:32161:69431","2:32162:69432","2:32163:69433","2:32164:69434","2:32165:1461","2:32166:69435","2:32167:69436","2:32168:1467","2:32169:69437","2:32170:1463","2:32171:69438","2:32172:69439","2:32173:69440","2:32174:69441","2:32175:69442","2:32176:69443","2:32177:69444","2:32178:69445","2:32179:69446","2:32180:69447","2:32181:69448","2:32182:69449","2:32183:1465","2:32184:69450","2:32185:1466","2:32186:69451","2:32187:1243","2:32188:69452","2:32189:1244","2:32190:69453","2:32191:69454","2:32192:69455","2:32193:1549","2:32194:69456","2:32195:1551","2:32196:1550","2:32197:66557","2:32198:69457","2:32199:69458","2:32200:69459","2:32201:66481","2:32202:69460","2:32203:69461","2:32204:69462","2:32205:69463","2:32206:69464","2:32207:69465","2:32208:69466","2:32209:69467","2:32210:69468","2:32211:69469","2:32212:69470","2:32213:69471","2:32214:69472","2:32215:69473","2:32216:69474","2:32217:69475","2:32218:69476","2:32219:69477","2:32220:46804","2:32221:69478","2:32222:69479","2:32223:69480","2:32224:69481","2:32225:69482","2:32226:69483","2:32227:69484","2:32229:69486","2:32230:69487","2:32231:69488","2:32232:69489","2:32234:69490","2:32236:69491","2:32238:69492","2:32240:69493","2:32242:69494","2:32244:69495","2:32245:69496","2:32246:69497","2:32247:69498"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:5:848-0:4451:2270":{"id":"b:5:848-0:4451:2270","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:844:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BoolValueParser","id":"0:4451:2270","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:850:4342","5:851:4983","5:852:9984"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:2829":{"id":"0:2829","crate_id":0,"name":null,"span":{"filename":"src/parser/mod.rs","begin":[23,45],"end":[23,56]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::matches::ValueSource","name":"ValueSource","id":"0:4828:1684","glob":false}},"0:489:4193":{"id":"0:489:4193","crate_id":0,"name":"get_index","span":{"filename":"src/builder/arg.rs","begin":[4567,4],"end":[4569,5]},"visibility":"public","docs":"Get the index of this argument, if any","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:1035:2740":{"id":"1:1035:2740","crate_id":1,"name":"to_ascii_lowercase","span":null,"visibility":"default","docs":"Makes a copy of the value in its ASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`str::to_lowercase`].\n\n# Note\n\nThis method is deprecated in favor of the identically-named\ninherent methods on `u8`, `char`, `[u8]` and `str`.\n\n[`make_ascii_lowercase`]: AsciiExt::make_ascii_lowercase","links":{"`str::to_lowercase`":"5:6178:8607","AsciiExt::make_ascii_lowercase":"1:1038:21135"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.26.0","note":"use inherent methods instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"qualified_path","inner":{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"AsciiExt","id":"1:1031:1864","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:4641":{"id":"0:4641","crate_id":0,"name":null,"span":{"filename":"src/error/kind.rs","begin":[2,16],"end":[2,20]},"visibility":{"restricted":{"parent":"0:1855:791","path":"::error::kind"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3380:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4594:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1196:184":{"id":"0:1196:184","crate_id":0,"name":"Output","span":{"filename":"src/builder/command.rs","begin":[5172,4],"end":[5172,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3818:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}}}},"2:8887:9953":{"id":"2:8887:9953","crate_id":2,"name":"step_by","span":null,"visibility":"default","docs":"Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.\n\nNote 1: The first element of the iterator will always be returned,\nregardless of the step given.\n\nNote 2: The time at which ignored elements are pulled is not fixed.\n`StepBy` behaves like the sequence `self.next()`, `self.nth(step-1)`,\n`self.nth(step-1)`, …, but is also free to behave like the sequence\n`advance_n_and_return_first(&mut self, step)`,\n`advance_n_and_return_first(&mut self, step)`, …\nWhich way is used may change for some iterators for performance reasons.\nThe second way will advance the iterator earlier and may consume more items.\n\n`advance_n_and_return_first` is the equivalent of:\n```\nfn advance_n_and_return_first<I>(iter: &mut I, n: usize) -> Option<I::Item>\nwhere\n    I: Iterator,\n{\n    let next = iter.next();\n    if n > 1 {\n        iter.nth(n - 2);\n    }\n    next\n}\n```\n\n# Panics\n\nThe method will panic if the given step is `0`.\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [0, 1, 2, 3, 4, 5];\nlet mut iter = a.iter().step_by(2);\n\nassert_eq!(iter.next(), Some(&0));\nassert_eq!(iter.next(), Some(&2));\nassert_eq!(iter.next(), Some(&4));\nassert_eq!(iter.next(), None);\n```","links":{},"attrs":["#[stable(feature = \"iterator_step_by\", since = \"1.28.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["step",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"StepBy","id":"2:47085:9050","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6472:15084":{"id":"1:6472:15084","crate_id":1,"name":"st_mtime","span":null,"visibility":"default","docs":"Returns the last modification time of the file, in seconds since Unix Epoch.\n\n# Examples\n\n```no_run\nuse std::fs;\nuse std::io;\nuse std::os::linux::fs::MetadataExt;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    println!(\"{}\", meta.st_mtime());\n    Ok(())\n}\n```","links":{},"attrs":["#[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1440:3370":{"id":"0:1440:3370","crate_id":0,"name":"possible_values","span":{"filename":"src/builder/value_parser.rs","begin":[1081,4],"end":[1085,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:2245","args":{"angle_bracketed":{"args":[{"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"resolved_path","inner":{"name":"crate::PossibleValue","id":"0:4294:1679","args":{"angle_bracketed":{"args":[{"lifetime":"'static"}],"bindings":[]}}}}}}}]}}},"generic_params":[]}],"lifetime":"'_"}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3370:216":{"id":"2:3370:216","crate_id":2,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1471:59":{"id":"0:1471:59","crate_id":0,"name":"default","span":{"filename":"src/builder/value_parser.rs","begin":[1291,4],"end":[1293,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9532:7459-0:4828:1684":{"id":"a:2:9532:7459-0:4828:1684","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:9532:7459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4828:1684","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:23068:21809":{"id":"2:23068:21809","crate_id":2,"name":"is_subnormal","span":null,"visibility":"default","docs":"Returns true for each lane if its value is subnormal.","links":{},"attrs":["#[must_use =\n\"method returns a new mask and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Mask","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdFloat","id":"2:23053:11401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1517:6637":{"id":"0:1517:6637","crate_id":0,"name":"parse_ref","span":{"filename":"src/builder/value_parser.rs","begin":[1616,4],"end":[1634,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["cmd",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Command","id":"0:755:1660","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["_arg",{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Arg","id":"0:3818:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}],"bindings":[]}}}}],["value",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"std::ffi::OsStr","id":"1:2654:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Value","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:1362:2264","args":null}}}},{"type":{"kind":"resolved_path","inner":{"name":"crate::Error","id":"0:4647:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3207-0:4463:2271":{"id":"b:2:3207-0:4463:2271","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BoolishValueParser","id":"0:4463:2271","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3209:688"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4399":{"id":"0:4399","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[766,9],"end":[766,13]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3380:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsStringValueParser","id":"0:4398:2275","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"1:5579:6429":{"id":"1:5579:6429","crate_id":1,"name":"mode","span":null,"visibility":"default","docs":"Sets the mode to create new directories with. This option defaults to\n0o777.\n\n# Examples\n\n```no_run\nuse std::fs::DirBuilder;\nuse std::os::unix::fs::DirBuilderExt;\n\nlet mut builder = DirBuilder::new();\nbuilder.mode(0o755);\n```","links":{},"attrs":["#[stable(feature = \"dir_builder\", since = \"1.6.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mode",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:4590:611":{"id":"0:4590:611","crate_id":0,"name":"eq","span":{"filename":"src/error/context.rs","begin":[42,23],"end":[42,32]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ContextValue","id":"0:4569:7000","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:173:2217":{"id":"0:173:2217","crate_id":0,"name":"has_subcommand","span":{"filename":"src/derive.rs","begin":[447,4],"end":[447,42]},"visibility":"default","docs":"Test whether `Self` can parse a specific subcommand","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:2:3213-0:4241:1674":{"id":"b:2:3213-0:4241:1674","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3183:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:4241:1674","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":["2:3216:128","2:3217:1436"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:975:5897":{"id":"0:975:5897","crate_id":0,"name":"get_groups","span":{"filename":"src/builder/command.rs","begin":[3557,4],"end":[3559,5]},"visibility":"public","docs":"Iterate through the set of groups.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3904:1662","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}}}}}}}]}}},"generic_params":[],"modifier":"none"}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10571:8825":{"id":"2:10571:8825","crate_id":2,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10572:667"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3210-0:5056:2794":{"id":"b:2:3210-0:5056:2794","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"never"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Id","id":"0:5056:2794","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3212:688"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:3382:225-0:4420:2260":{"id":"a:2:3382:225-0:4420:2260","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValuesParser","id":"0:4420:2260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:557":{"id":"0:557","crate_id":0,"name":null,"span":{"filename":"src/builder/arg.rs","begin":[5192,0],"end":[5196,1]},"visibility":{"restricted":{"parent":"0:242:1932","path":"::builder::arg"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3818:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3818:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":["0:559:688"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:846:4983":{"id":"5:846:4983","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":"Creates owned data from borrowed data, usually by cloning.\n\n# Examples\n\nBasic usage:\n\n```\nlet s: &str = \"a\";\nlet ss: String = s.to_owned();\n\nlet v: &[i32] = &[1, 2];\nlet vv: Vec<i32> = v.to_owned();\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[must_use =\n\"cloning is often expensive and is not expected to have side effects\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"qualified_path","inner":{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"ToOwned","id":"5:844:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:900:2952":{"id":"0:900:2952","crate_id":0,"name":"visible_aliases","span":{"filename":"src/builder/command.rs","begin":[2638,4],"end":[2641,5]},"visibility":"public","docs":"Sets multiple visible aliases to this subcommand.\n\nThis allows the subcommand to be accessed via *either* the\noriginal name or any of the given aliases. This is more efficient and easier\nthan creating multiple hidden subcommands as one only needs to check for\nthe existence of this command and not all aliased variants.\n\n**NOTE:** The alias defined with this method is *visible* from the help\nmessage and displayed as if it were just another regular subcommand. If\nlooking for an alias that will not be displayed in the help message, see\n[`Command::alias`].\n\n**NOTE:** When using aliases, and checking for the existence of a\nparticular subcommand within an [`ArgMatches`] struct, one only needs to\nsearch for the original name and not all aliases.\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg, };\nlet m = Command::new(\"myprog\")\n    .subcommand(Command::new(\"test\")\n        .visible_aliases(&[\"do-stuff\", \"tests\"]))\n    .get_matches_from(vec![\"myprog\", \"do-stuff\"]);\nassert_eq!(m.subcommand_name(), Some(\"test\"));\n```\n[`App::alias`]: Command::alias()","links":{"`Command::alias`":"0:888:278","`ArgMatches`":"0:4713:1665"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["names",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5522:10976":{"id":"1:5522:10976","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5523:14731","1:5524:28822","1:5525:6429","1:5526:28823","1:5527:11212","1:5528:11213","1:5529:28824","1:5530:1322","1:5531:28825","1:5532:28826","1:5533:28827","1:5534:28828","1:5535:28829","1:5536:28830","1:5537:28831","1:5538:28832"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6836:28906":{"id":"1:6836:28906","crate_id":1,"name":"quickack","span":null,"visibility":"default","docs":"Gets the value of the `TCP_QUICKACK` option on this socket.\n\nFor more information about this option, see [`TcpStreamExt::set_quickack`].\n\n# Examples\n\n```no_run\n#![feature(tcp_quickack)]\nuse std::net::TcpStream;\nuse std::os::linux::net::TcpStreamExt;\n\nlet stream = TcpStream::connect(\"127.0.0.1:8080\")\n        .expect(\"Couldn't connect to the server...\");\nstream.set_quickack(true).expect(\"set_quickack call failed\");\nassert_eq!(stream.quickack().unwrap_or(false), true);\n```","links":{"`TcpStreamExt::set_quickack`":"1:6835:28905"},"attrs":["#[unstable(feature = \"tcp_quickack\", issue = \"96256\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"bool"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"1:3803:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:4289":{"id":"0:4289","crate_id":0,"name":null,"span":{"filename":"src/builder/command.rs","begin":[77,34],"end":[77,36]},"visibility":{"restricted":{"parent":"0:649:1913","path":"::builder::command"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:3379:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:4241:1674","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4727:611":{"id":"0:4727:611","crate_id":0,"name":"eq","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[67,32],"end":[67,41]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4713:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1220:2827":{"id":"0:1220:2827","crate_id":0,"name":"aliases","span":{"filename":"src/builder/possible_value.rs","begin":[130,4],"end":[136,5]},"visibility":"public","docs":"Sets multiple *hidden* aliases for this argument value.\n\n# Examples\n\n```rust\n# use clap::PossibleValue;\nPossibleValue::new(\"slow\")\n    .aliases([\"not-fast\", \"snake-like\"])\n# ;\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["names",{"kind":"generic","inner":"I"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5073:5086":{"id":"0:5073:5086","crate_id":0,"name":"Always","span":{"filename":"src/util/color.rs","begin":[38,4],"end":[38,10]},"visibility":"default","docs":"Enables colored output regardless of whether or not the output is going to a terminal/TTY.\n\n# Platform Specific\n\nThis setting only applies to Unix, Linux, and macOS (i.e. non-Windows platforms).\n\n# Examples\n\n ```no_run\n# use clap::{Command, ColorChoice};\nCommand::new(\"myprog\")\n    .color(ColorChoice::Always)\n    .get_matches();\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"2:3209:688":{"id":"2:3209:688","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13799:6011":{"id":"2:13799:6011","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4536:7106":{"id":"0:4536:7106","crate_id":0,"name":"ExpectedNumValues","span":{"filename":"src/error/context.rs","begin":[18,4],"end":[18,21]},"visibility":"default","docs":"Number of allowed values","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"2:32173:69440":{"id":"2:32173:69440","crate_id":2,"name":"checked_rem","span":null,"visibility":"public","docs":"Checked integer remainder. Computes `self % rhs`, returning `None`\nif `rhs == 0`.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(5u64.checked_rem(2), Some(1));\nassert_eq!(5u64.checked_rem(0), None);\n```","links":{},"attrs":["#[stable(feature = \"wrapping\", since = \"1.7.0\")]","#[rustc_const_stable(feature = \"const_checked_int_div\", since = \"1.52.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4497:8989":{"id":"1:4497:8989","crate_id":1,"name":"read_until","span":null,"visibility":"default","docs":"Read all bytes into `buf` until the delimiter `byte` or EOF is reached.\n\nThis function will read bytes from the underlying stream until the\ndelimiter or EOF is found. Once found, all bytes up to, and including,\nthe delimiter (if found) will be appended to `buf`.\n\nIf successful, this function will return the total number of bytes read.\n\nThis function is blocking and should be used carefully: it is possible for\nan attacker to continuously send bytes without ever sending the delimiter\nor EOF.\n\n# Errors\n\nThis function will ignore all instances of [`ErrorKind::Interrupted`] and\nwill otherwise return any errors returned by [`fill_buf`].\n\nIf an I/O error is encountered then all bytes read so far will be\npresent in `buf` and its length will have been adjusted appropriately.\n\n[`fill_buf`]: BufRead::fill_buf\n\n# Examples\n\n[`std::io::Cursor`][`Cursor`] is a type that implements `BufRead`. In\nthis example, we use [`Cursor`] to read all the bytes in a byte slice\nin hyphen delimited segments:\n\n```\nuse std::io::{self, BufRead};\n\nlet mut cursor = io::Cursor::new(b\"lorem-ipsum\");\nlet mut buf = vec![];\n\n// cursor is at 'l'\nlet num_bytes = cursor.read_until(b'-', &mut buf)\n    .expect(\"reading from cursor won't fail\");\nassert_eq!(num_bytes, 6);\nassert_eq!(buf, b\"lorem-\");\nbuf.clear();\n\n// cursor is at 'i'\nlet num_bytes = cursor.read_until(b'-', &mut buf)\n    .expect(\"reading from cursor won't fail\");\nassert_eq!(num_bytes, 5);\nassert_eq!(buf, b\"ipsum\");\nbuf.clear();\n\n// cursor is at EOF\nlet num_bytes = cursor.read_until(b'-', &mut buf)\n    .expect(\"reading from cursor won't fail\");\nassert_eq!(num_bytes, 0);\nassert_eq!(buf, b\"\");\n```","links":{"BufRead::fill_buf":"1:4493:10372","`ErrorKind::Interrupted`":"1:10863:14188","`Cursor`":"1:10712:9001"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["byte",{"kind":"primitive","inner":"u8"}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7898:240","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8224:3098","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"1:3803:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:441:3966":{"id":"0:441:3966","crate_id":0,"name":"required_if_eq","span":{"filename":"src/builder/arg.rs","begin":[3785,4],"end":[3788,5]},"visibility":"public","docs":"This argument is [required] only if the specified `arg` is present at runtime and its value\nequals `val`.\n\n# Examples\n\n```rust\n# use clap::Arg;\nArg::new(\"config\")\n    .required_if_eq(\"other_arg\", \"value\")\n# ;\n```\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .takes_value(true)\n        .required_if_eq(\"other\", \"special\")\n        .long(\"config\"))\n    .arg(Arg::new(\"other\")\n        .long(\"other\")\n        .takes_value(true))\n    .try_get_matches_from(vec![\n        \"prog\", \"--other\", \"not-special\"\n    ]);\n\nassert!(res.is_ok()); // We didn't use --other=special, so \"cfg\" wasn't required\n\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .takes_value(true)\n        .required_if_eq(\"other\", \"special\")\n        .long(\"config\"))\n    .arg(Arg::new(\"other\")\n        .long(\"other\")\n        .takes_value(true))\n    .try_get_matches_from(vec![\n        \"prog\", \"--other\", \"special\"\n    ]);\n\n// We did use --other=special so \"cfg\" had become required but was missing.\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind(), ErrorKind::MissingRequiredArgument);\n\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .takes_value(true)\n        .required_if_eq(\"other\", \"special\")\n        .long(\"config\"))\n    .arg(Arg::new(\"other\")\n        .long(\"other\")\n        .takes_value(true))\n    .try_get_matches_from(vec![\n        \"prog\", \"--other\", \"SPECIAL\"\n    ]);\n\n// By default, the comparison is case-sensitive, so \"cfg\" wasn't required\nassert!(res.is_ok());\n\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .takes_value(true)\n        .required_if_eq(\"other\", \"special\")\n        .long(\"config\"))\n    .arg(Arg::new(\"other\")\n        .long(\"other\")\n        .ignore_case(true)\n        .takes_value(true))\n    .try_get_matches_from(vec![\n        \"prog\", \"--other\", \"SPECIAL\"\n    ]);\n\n// However, case-insensitive comparisons can be enabled.  This typically occurs when using Arg::possible_values().\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind(), ErrorKind::MissingRequiredArgument);\n```\n[`Arg::requires(name)`]: Arg::requires()\n[Conflicting]: Arg::conflicts_with()\n[required]: Arg::required()","links":{"Arg::required()":"0:337:1948"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["arg_id",{"kind":"generic","inner":"T"}],["val",{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Key","id":"0:3239:2795","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:352:2249":{"id":"0:352:2249","crate_id":0,"name":"action","span":{"filename":"src/builder/arg.rs","begin":[981,4],"end":[984,5]},"visibility":"public","docs":"Specify the behavior when parsing an argument\n\n# Examples\n\n```rust\n# use clap::Command;\n# use clap::Arg;\nlet cmd = Command::new(\"mycmd\")\n    .arg(\n        Arg::new(\"flag\")\n            .long(\"flag\")\n            .action(clap::ArgAction::Set)\n    );\n\nlet matches = cmd.try_get_matches_from([\"mycmd\", \"--flag\", \"value\"]).unwrap();\nassert!(matches.contains_id(\"flag\"));\nassert_eq!(matches.occurrences_of(\"flag\"), 0);\nassert_eq!(\n    matches.get_many::<String>(\"flag\").unwrap_or_default().map(|v| v.as_str()).collect::<Vec<_>>(),\n    vec![\"value\"]\n);\n```","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["action",{"kind":"resolved_path","inner":{"name":"ArgAction","id":"0:3351:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:848-0:4778:1685":{"id":"b:5:848-0:4778:1685","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:844:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:4778:1685","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["5:850:4342","5:851:4983","5:852:9984"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1216:930":{"id":"0:1216:930","crate_id":0,"name":"new","span":{"filename":"src/builder/possible_value.rs","begin":[55,4],"end":[60,5]},"visibility":"public","docs":"Create a [`PossibleValue`] with its name.\n\nThe name will be used to decide whether this value was provided by the user to an argument.\n\n**NOTE:** In case it is not [hidden] it will also be shown in help messages for arguments\nthat use it as a [possible value] and have not hidden them through [`Arg::hide_possible_values(true)`].\n\n# Examples\n\n```rust\n# use clap::PossibleValue;\nPossibleValue::new(\"fast\")\n# ;\n```\n[hidden]: PossibleValue::hide\n[possible value]: crate::Arg::possible_values\n[`Arg::hide_possible_values(true)`]: crate::Arg::hide_possible_values()","links":{"`PossibleValue`":"0:4294:1679","PossibleValue::hide":"0:1218:3786","crate::Arg::hide_possible_values()":"0:415:3796","crate::Arg::possible_values":"0:378:3370"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["name",{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4021":{"id":"0:4021","crate_id":0,"name":null,"span":{"filename":"src/builder/arg_settings.rs","begin":[32,33],"end":[32,38]},"visibility":{"restricted":{"parent":"0:637:2253","path":"::builder::arg_settings"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgSettings","id":"0:3968:1678","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4022:415"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3207-0:4404:2276":{"id":"b:2:3207-0:4404:2276","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PathBufValueParser","id":"0:4404:2276","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3209:688"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:2080:1008":{"id":"0:2080:1008","crate_id":0,"name":"partial_cmp","span":{"filename":"src/parser/matches/any_value.rs","begin":[67,4],"end":[69,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"std::cmp::Ordering","id":"2:37932:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1399":{"id":"0:1399","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[819,0],"end":[847,1]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["map","parse","possible_values"],"trait":{"name":"TypedValueParser","id":"0:1362:2264","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PathBufValueParser","id":"0:4404:2276","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1400:6597","0:1401:6637","0:1402:2102"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:3370:216-0:4351:1680":{"id":"a:2:3370:216-0:4351:1680","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:4351:1680","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:13740:6010":{"id":"2:13740:6010","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:50044:8940","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23067:21808":{"id":"2:23067:21808","crate_id":2,"name":"is_finite","span":null,"visibility":"default","docs":"Returns true for each lane if its value is neither infinite nor `NaN`.","links":{},"attrs":["#[must_use =\n\"method returns a new mask and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Mask","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdFloat","id":"2:23053:11401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:4601:7085":{"id":"0:4601:7085","crate_id":0,"name":"UnrecognizedSubcommand","span":{"filename":"src/error/kind.rs","begin":[84,4],"end":[84,26]},"visibility":"default","docs":"Occurs when the user provides an unrecognized [`Subcommand`] which either\ndoesn't meet the threshold for being similar enough to an existing subcommand,\nor the 'suggestions' feature is disabled.\nOtherwise the more detailed [`InvalidSubcommand`] error is returned.\n\nThis error typically happens when passing additional subcommand names to the `help`\nsubcommand. Otherwise, the more general [`UnknownArgument`] error is used.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ErrorKind, };\nlet result = Command::new(\"prog\")\n    .subcommand(Command::new(\"config\")\n        .about(\"Used for configuration\")\n        .arg(Arg::new(\"config_file\")\n            .help(\"The configuration file to use\")))\n    .try_get_matches_from(vec![\"prog\", \"help\", \"nothing\"]);\nassert!(result.is_err());\nassert_eq!(result.unwrap_err().kind(), ErrorKind::UnrecognizedSubcommand);\n```\n\n[`Subcommand`]: crate::Subcommand\n[`InvalidSubcommand`]: ErrorKind::InvalidSubcommand\n[`UnknownArgument`]: ErrorKind::UnknownArgument","links":{"ErrorKind::InvalidSubcommand":"0:4599:7081","ErrorKind::UnknownArgument":"0:4597:7110","crate::Subcommand":"0:170:1672"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"2:11211:184":{"id":"2:11211:184","crate_id":2,"name":"Output","span":null,"visibility":"default","docs":"The output type returned by methods.","links":{},"attrs":["#[stable(feature = \"slice_get_slice\", since = \"1.28.0\")]"],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null}},"0:1765":{"id":"0:1765","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[47,0],"end":[47,38]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"value_parser::EnumValueParser","name":"EnumValueParser","id":"0:4410:2272","glob":false}},"0:502:4231":{"id":"0:502:4231","crate_id":0,"name":"get_action","span":{"filename":"src/builder/arg.rs","begin":[4688,4],"end":[4691,5]},"visibility":"public","docs":"Behavior when parsing the argument","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"super::ArgAction","id":"0:3351:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4453":{"id":"0:4453","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1495,15],"end":[1495,20]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BoolValueParser","id":"0:4451:2270","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4454:415"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:160:2156":{"id":"0:160:2156","crate_id":0,"name":"into_app_for_update","span":{"filename":"src/derive.rs","begin":[279,4],"end":[279,54]},"visibility":"default","docs":"Deprecated, replaced with `CommandFactory::command_for_update`","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Command","id":"0:755:1660","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:8683:2926":{"id":"2:8683:2926","crate_id":2,"name":"extend","span":null,"visibility":"default","docs":"Extends a collection with the contents of an iterator.\n\nAs this is the only required method for this trait, the [trait-level] docs\ncontain more details.\n\n[trait-level]: Extend\n\n# Examples\n\nBasic usage:\n\n```\n// You can extend a String with some chars:\nlet mut message = String::from(\"abc\");\n\nmessage.extend(['d', 'e', 'f'].iter());\n\nassert_eq!(\"abcdef\", &message);\n```","links":{"Extend":"2:8681:8737"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["iter",{"kind":"generic","inner":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"A"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"a:2:9532:7459-0:3351:1659":{"id":"a:2:9532:7459-0:3351:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:9532:7459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgAction","id":"0:3351:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:2164:7534":{"id":"0:2164:7534","crate_id":0,"name":"get_flag","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[179,4],"end":[183,5]},"visibility":"public","docs":"Gets the value of a specific [`ArgAction::SetTrue`][crate::ArgAction::SetTrue] or [`ArgAction::SetFalse`][crate::ArgAction::SetFalse] flag\n\n# Panic\n\nIf the argument's action is not [`ArgAction::SetTrue`][crate::ArgAction::SetTrue] or [`ArgAction::SetFalse`][crate::ArgAction::SetFalse]\n\n# Examples\n\n```rust\n# use clap::Command;\n# use clap::Arg;\nlet cmd = Command::new(\"mycmd\")\n    .arg(\n        Arg::new(\"flag\")\n            .long(\"flag\")\n            .action(clap::ArgAction::SetTrue)\n    );\n\nlet matches = cmd.clone().try_get_matches_from([\"mycmd\", \"--flag\", \"--flag\"]).unwrap();\nassert!(matches.contains_id(\"flag\"));\nassert_eq!(\n    matches.get_flag(\"flag\"),\n    true\n);\n```","links":{"crate::ArgAction::SetFalse":"0:3362:2365","crate::ArgAction::SetTrue":"0:3360:2361"},"attrs":["#[track_caller]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:378:3370":{"id":"0:378:3370","crate_id":0,"name":"possible_values","span":{"filename":"src/builder/arg.rs","begin":[1681,4],"end":[1689,5]},"visibility":"public","docs":"Deprecated, replaced with [`Arg::value_parser(PossibleValuesParser::new(...))`]\n\nDerive: replace `#[clap(possible_values = [<1>, <2>])]` with `#[clap(value_parser = [<1>, <2>])]`.\nIf the field is not a `String`, instead do `#[clap(value_parser = PossibleValueParser::new([<1>, <2>]).map(T::from_str))]`\n\nBuilder: replace `arg.possible_values([<1>, <2>) with `arg.value_parser([<1>, <2>])`","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["values",{"kind":"generic","inner":"I"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:4294:1679","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:860:5263":{"id":"0:860:5263","crate_id":0,"name":"override_usage","span":{"filename":"src/builder/command.rs","begin":[1695,4],"end":[1698,5]},"visibility":"public","docs":"Overrides the `clap` generated usage string for help and error messages.\n\n**NOTE:** Using this setting disables `clap`s \"context-aware\" usage\nstrings. After this setting is set, this will be *the only* usage string\ndisplayed to the user!\n\n**NOTE:** Multiple usage lines may be present in the usage argument, but\nsome rules need to be followed to ensure the usage lines are formatted\ncorrectly by the default help formatter:\n\n- Do not indent the first usage line.\n- Indent all subsequent usage lines with four spaces.\n- The last line must not end with a newline.\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg};\nCommand::new(\"myprog\")\n    .override_usage(\"myapp [-clDas] <some_file>\")\n# ;\n```\n\nOr for multiple usage lines:\n\n```no_run\n# use clap::{Command, Arg};\nCommand::new(\"myprog\")\n    .override_usage(\n        \"myapp -X [-a] [-b] <file>\\n    \\\n         myapp -Y [-c] <file1> <file2>\\n    \\\n         myapp -Z [-d|-e]\"\n    )\n# ;\n```\n\n[`ArgMatches::usage`]: ArgMatches::usage()","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["usage",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2868-0:4569:7000":{"id":"b:2:2868-0:4569:7000","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2862:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextValue","id":"0:4569:7000","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2870:27181"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3213-0:4439:2262":{"id":"b:2:3213-0:4439:2262","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3183:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangedU64ValueParser","id":"0:4439:2262","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:3216:128","2:3217:1436"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:3411:6205-0:4398:2275":{"id":"a:2:3411:6205-0:4398:2275","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:3411:6205","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsStringValueParser","id":"0:4398:2275","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"25:104:9166":{"id":"25:104:9166","crate_id":25,"name":"Fragment","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["25:105:1545","25:106:28459","25:107:28460"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"2:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:23121:21825":{"id":"2:23121:21825","crate_id":2,"name":"reduce_and","span":null,"visibility":"default","docs":"Returns the cumulative bitwise \"and\" across the lanes of the vector.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Scalar","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdInt","id":"2:23106:11397","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:4423":{"id":"0:4423","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1025,9],"end":[1025,14]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValuesParser","id":"0:4420:2260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4424:415"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:6235:28881":{"id":"1:6235:28881","crate_id":1,"name":"from_raw","span":null,"visibility":"default","docs":"Creates a new `ExitStatus` or `ExitStatusError` from the raw underlying integer status\nvalue from `wait`\n\nThe value should be a **wait status, not an exit status**.\n\n# Panics\n\nPanics on an attempt to make an `ExitStatusError` from a wait status of `0`.\n\nMaking an `ExitStatus` always succeeds and never panics.","links":{},"attrs":["#[stable(feature = \"exit_status_from\", since = \"1.12.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["raw",{"kind":"primitive","inner":"i32"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:32155:69427":{"id":"2:32155:69427","crate_id":2,"name":"trailing_ones","span":null,"visibility":"public","docs":"Returns the number of trailing ones in the binary representation\nof `self`.\n\n# Examples\n\nBasic usage:\n\n```\nlet n = 0b1010111u64;\n\nassert_eq!(n.trailing_ones(), 3);\n```","links":{},"attrs":["#[stable(feature = \"leading_trailing_ones\", since = \"1.46.0\")]","#[rustc_const_stable(feature = \"leading_trailing_ones\", since = \"1.46.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4609:7098":{"id":"0:4609:7098","crate_id":0,"name":"TooManyValues","span":{"filename":"src/error/kind.rs","begin":[158,4],"end":[158,17]},"visibility":"default","docs":"Occurs when a user provides more values for an argument than were defined by setting\n[`Arg::max_values`].\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet result = Command::new(\"prog\")\n    .arg(Arg::new(\"arg\")\n        .max_values(2))\n    .try_get_matches_from(vec![\"prog\", \"too\", \"many\", \"values\"]);\nassert!(result.is_err());\nassert_eq!(result.unwrap_err().kind(), ErrorKind::TooManyValues);\n```\n[`Arg::max_values`]: crate::Arg::max_values()","links":{"crate::Arg::max_values()":"0:357:1953"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"b:2:4104-0:4469:2274":{"id":"b:2:4104-0:4469:2274","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:4102:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"NonEmptyStringValueParser","id":"0:4469:2274","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:4106:1449"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1498":{"id":"0:1498","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1499,0],"end":[1511,1]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"BoolValueParser","id":"0:4451:2270","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1499:930"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4416:415":{"id":"0:4416:415","crate_id":0,"name":"clone","span":{"filename":"src/builder/value_parser.rs","begin":[912,9],"end":[912,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EnumValueParser","id":"0:4410:2272","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13720:67823":{"id":"2:13720:67823","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:32210:69468":{"id":"2:32210:69468","crate_id":2,"name":"abs_diff","span":null,"visibility":"public","docs":"Computes the absolute difference between `self` and `other`.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(100u64.abs_diff(80), 20u64);\nassert_eq!(100u64.abs_diff(110), 10u64);\n```","links":{},"attrs":["#[stable(feature = \"int_abs_diff\", since = \"1.60.0\")]","#[rustc_const_stable(feature = \"int_abs_diff\", since = \"1.60.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:9121:836":{"id":"2:9121:836","crate_id":2,"name":"lt","span":null,"visibility":"default","docs":"Determines if the elements of this [`Iterator`] are [lexicographically](Ord#lexicographical-comparison)\nless than those of another.\n\n# Examples\n\n```\nassert_eq!([1].iter().lt([1].iter()), false);\nassert_eq!([1].iter().lt([1, 2].iter()), true);\nassert_eq!([1, 2].iter().lt([1].iter()), false);\nassert_eq!([1, 2].iter().lt([1, 2].iter()), false);\n```","links":{"`Iterator`":"2:8873:159","Ord#lexicographical-comparison":"2:2956:180"},"attrs":["#[stable(feature = \"iter_order\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"I"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"PartialOrd","id":"2:2969:187","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"IntoIterator","id":"2:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3422:2510":{"id":"0:3422:2510","crate_id":0,"name":"SubcommandsNegateReqs","span":{"filename":"src/builder/app_settings.rs","begin":[385,4],"end":[385,25]},"visibility":"default","docs":"Deprecated, replaced with [`Command::subcommand_negates_reqs`] and\n[`Command::is_subcommand_negates_reqs_set`]\n\nDerive: replace `#[clap(setting = SubcommandsNegateReqs)]` with `#[clap(subcommand_negates_reqs = true)]`\n\nBuilder: replace `cmd.setting(SubcommandsNegateReqs)` with `cmd.subcommand_negates_reqs(true)`","links":{"`Command::subcommand_negates_reqs`":"0:911:5720","`Command::is_subcommand_negates_reqs_set`":"0:1020:5971"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"a:2:3382:225-0:1294:2265":{"id":"a:2:3382:225-0:1294:2265","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1294:2265","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:3370:216-0:4457:2273":{"id":"a:2:3370:216-0:4457:2273","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FalseyValueParser","id":"0:4457:2273","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:9533:7458-0:4806:1682":{"id":"a:2:9533:7458-0:4806:1682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:9533:7458","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:4806:1682","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:416:3805":{"id":"0:416:3805","crate_id":0,"name":"hide_default_value","span":{"filename":"src/builder/arg.rs","begin":[2958,4],"end":[2964,5]},"visibility":"public","docs":"Do not display the default value of the argument in the help message.\n\nThis is useful when default behavior of an arg is explained elsewhere in the help text.\n\n**NOTE:** Setting this requires [`Arg::takes_value`]\n\n# Examples\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"connect\")\n    .arg(Arg::new(\"host\")\n        .long(\"host\")\n        .default_value(\"localhost\")\n        .takes_value(true)\n        .hide_default_value(true));\n\n```\n\nIf we were to run the above program with `--help` the `[default: localhost]` portion of\nthe help text would be omitted.","links":{"`Arg::takes_value`":"0:351:1949"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2868-0:1294:2265":{"id":"b:2:2868-0:1294:2265","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2862:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1294:2265","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2870:27181"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:23055:21797":{"id":"2:23055:21797","crate_id":2,"name":"Scalar","span":null,"visibility":"default","docs":"Scalar type contained by this SIMD vector type.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"0:1334":{"id":"0:1334","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[443,0],"end":[448,1]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":"Create an `i64` [`ValueParser`] from a `..=M` range\n\nSee [`RangedI64ValueParser`] for more control over the output type.\n\nSee also [`RangedU64ValueParser`]\n\n# Examples\n\n```rust\nlet mut cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"port\")\n            .long(\"port\")\n            .value_parser(..=3000)\n            .takes_value(true)\n            .required(true)\n    );\n\nlet m = cmd.try_get_matches_from_mut([\"cmd\", \"--port\", \"80\"]).unwrap();\nlet port: i64 = *m.get_one(\"port\")\n    .expect(\"required\");\nassert_eq!(port, 80);\n```","links":{"`ValueParser`":"0:1294:2265","`RangedU64ValueParser`":"0:4439:2262","`RangedI64ValueParser`":"0:4427:2261"},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"RangeToInclusive","id":"2:46276:202","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i64"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1294:2265","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1335:688"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3213-0:4404:2276":{"id":"b:2:3213-0:4404:2276","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3183:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PathBufValueParser","id":"0:4404:2276","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3216:128","2:3217:1436"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3207-0:4469:2274":{"id":"b:2:3207-0:4469:2274","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"NonEmptyStringValueParser","id":"0:4469:2274","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3209:688"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3629:184":{"id":"2:3629:184","crate_id":2,"name":"Output","span":null,"visibility":"default","docs":"The returned type after the call operator is used.","links":{},"attrs":["#[stable(feature = \"fn_once_output\", since = \"1.12.0\")]"],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"0:4712:415":{"id":"0:4712:415","crate_id":0,"name":"clone","span":{"filename":"src/parser/matches/any_value.rs","begin":[41,15],"end":[41,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"AnyValueId","id":"0:4707:2393","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8892:9954":{"id":"2:8892:9954","crate_id":2,"name":"intersperse","span":null,"visibility":"default","docs":"Creates a new iterator which places a copy of `separator` between adjacent\nitems of the original iterator.\n\nIn case `separator` does not implement [`Clone`] or needs to be\ncomputed every time, use [`intersperse_with`].\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(iter_intersperse)]\n\nlet mut a = [0, 1, 2].iter().intersperse(&100);\nassert_eq!(a.next(), Some(&0));   // The first element from `a`.\nassert_eq!(a.next(), Some(&100)); // The separator.\nassert_eq!(a.next(), Some(&1));   // The next element from `a`.\nassert_eq!(a.next(), Some(&100)); // The separator.\nassert_eq!(a.next(), Some(&2));   // The last element from `a`.\nassert_eq!(a.next(), None);       // The iterator is finished.\n```\n\n`intersperse` can be very useful to join an iterator's items using a common element:\n```\n#![feature(iter_intersperse)]\n\nlet hello = [\"Hello\", \"World\", \"!\"].iter().copied().intersperse(\" \").collect::<String>();\nassert_eq!(hello, \"Hello World !\");\n```\n\n[`Clone`]: crate::clone::Clone\n[`intersperse_with`]: Iterator::intersperse_with","links":{"Iterator::intersperse_with":"2:8893:9955","crate::clone::Clone":"2:2884:105"},"attrs":["#[unstable(feature = \"iter_intersperse\", reason = \"recently added\", issue =\n\"79524\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["separator",{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Intersperse","id":"2:47005:9067","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9533:7458-0:4410:2272":{"id":"a:2:9533:7458-0:4410:2272","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:9533:7458","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:9533:7458","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EnumValueParser","id":"0:4410:2272","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4431":{"id":"0:4431","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1134,9],"end":[1134,13]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::marker::Copy","id":"2:3380:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"std::convert::TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3380:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:4427:2261","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3203-0:4569:7000":{"id":"b:2:3203-0:4569:7000","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextValue","id":"0:4569:7000","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3206:2391"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:32238:69492":{"id":"2:32238:69492","crate_id":2,"name":"from_be_bytes","span":null,"visibility":"public","docs":"Create a native endian integer value from its representation\nas a byte array in big endian.\n\n\n\n# Examples\n\n```\nlet value = u64::from_be_bytes([0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]);\nassert_eq!(value, 0x1234567890123456);\n```\n\nWhen starting from a slice rather than an array, fallible conversion APIs can be used:\n\n```\nfn read_be_u64(input: &mut &[u8]) -> u64 {\n    let (int_bytes, rest) = input.split_at(std::mem::size_of::<u64>());\n    *input = rest;\n    u64::from_be_bytes(int_bytes.try_into().unwrap())\n}\n```","links":{},"attrs":["#[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]","#[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["bytes",{"kind":"array","inner":{"type":{"kind":"primitive","inner":"u8"},"len":"8"}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:389:3471":{"id":"0:389:3471","crate_id":0,"name":"value_delimiter","span":{"filename":"src/builder/arg.rs","begin":[2031,4],"end":[2034,5]},"visibility":"public","docs":"Separator between the arguments values, defaults to `,` (comma).\n\n**NOTE:** implicitly sets [`Arg::use_value_delimiter(true)`]\n\n**NOTE:** implicitly sets [`Arg::takes_value(true)`]\n\n# Examples\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"config\")\n        .short('c')\n        .long(\"config\")\n        .value_delimiter(';'))\n    .get_matches_from(vec![\n        \"prog\", \"--config=val1;val2;val3\"\n    ]);\n\nassert_eq!(m.values_of(\"config\").unwrap().collect::<Vec<_>>(), [\"val1\", \"val2\", \"val3\"])\n```\n[`Arg::use_value_delimiter(true)`]: Arg::use_value_delimiter()\n[`Arg::takes_value(true)`]: Arg::takes_value()","links":{"Arg::use_value_delimiter()":"0:387:3457","Arg::takes_value()":"0:351:1949"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["d",{"kind":"primitive","inner":"char"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3171:75":{"id":"2:3171:75","crate_id":2,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3173:312"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:3492":{"id":"0:3492","crate_id":0,"name":null,"span":{"filename":"src/builder/app_settings.rs","begin":[32,33],"end":[32,38]},"visibility":{"restricted":{"parent":"0:227:2250","path":"::builder::app_settings"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:3389:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3493:415"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5916:440":{"id":"5:5916:440","crate_id":5,"name":"concat","span":null,"visibility":"default","docs":"Implementation of [`[T]::concat`](slice::concat)","links":{"slice::concat":"5:5904:440"},"attrs":["#[unstable(feature = \"slice_concat_trait\", issue = \"27747\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["slice",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Concat","id":"5:5913:8921","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Item"}}],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:2:4104-0:3818:1661":{"id":"b:2:4104-0:3818:1661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:4102:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3818:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":["2:4106:1449"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13729:27267":{"id":"2:13729:27267","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11209:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11209:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:316:1941":{"id":"0:316:1941","crate_id":0,"name":"id","span":{"filename":"src/builder/arg.rs","begin":[130,4],"end":[135,5]},"visibility":"public","docs":"Set the identifier used for referencing this argument in the clap API.\n\nSee [`Arg::new`] for more details.","links":{"`Arg::new`":"0:314:930"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["n",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4592":{"id":"0:4592","crate_id":0,"name":null,"span":{"filename":"src/error/context.rs","begin":[42,34],"end":[42,36]},"visibility":{"restricted":{"parent":"0:1854:488","path":"::error::context"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2925:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextValue","id":"0:4569:7000","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4829:7900":{"id":"0:4829:7900","crate_id":0,"name":"DefaultValue","span":{"filename":"src/parser/matches/value_source.rs","begin":[6,4],"end":[6,16]},"visibility":"default","docs":"Value came [`Arg::default_value`][crate::Arg::default_value]","links":{"crate::Arg::default_value":"0:394:2389"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"a:2:9532:7459-0:3818:1661":{"id":"a:2:9532:7459-0:3818:1661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:9532:7459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3818:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"1:4418:21316":{"id":"1:4418:21316","crate_id":1,"name":"read_buf","span":null,"visibility":"default","docs":"Pull some bytes from this source into the specified buffer.\n\nThis is equivalent to the [`read`](Read::read) method, except that it is passed a [`BorrowedCursor`] rather than `[u8]` to allow use\nwith uninitialized buffers. The new data will be appended to any existing contents of `buf`.\n\nThe default implementation delegates to `read`.","links":{"Read::read":"1:4411:11149","`BorrowedCursor`":"1:10895:9011"},"attrs":["#[unstable(feature = \"read_buf\", issue = \"78485\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"resolved_path","inner":{"name":"BorrowedCursor","id":"1:10895:9011","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"1:3803:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:32219:69477":{"id":"2:32219:69477","crate_id":2,"name":"overflowing_pow","span":null,"visibility":"public","docs":"Raises self to the power of `exp`, using exponentiation by squaring.\n\nReturns a tuple of the exponentiation along with a bool indicating\nwhether an overflow happened.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(3u64.overflowing_pow(5), (243, false));\nassert_eq!(3u8.overflowing_pow(6), (217, true));\n```","links":{},"attrs":["#[stable(feature = \"no_panic_pow\", since = \"1.34.0\")]","#[rustc_const_stable(feature = \"const_int_pow\", since = \"1.50.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["exp",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"u64"},{"kind":"primitive","inner":"bool"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2865-0:4693:7387":{"id":"b:2:2865-0:4693:7387","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4693:7387","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2867:2792"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:5526:28823":{"id":"1:5526:28823","crate_id":1,"name":"nlink","span":null,"visibility":"default","docs":"Returns the number of hard links pointing to this file.\n\n# Examples\n\n```no_run\nuse std::fs;\nuse std::os::unix::fs::MetadataExt;\nuse std::io;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    let nb_hard_links = meta.nlink();\n    Ok(())\n}\n```","links":{},"attrs":["#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:4019:611":{"id":"0:4019:611","crate_id":0,"name":"eq","span":{"filename":"src/builder/arg_settings.rs","begin":[32,16],"end":[32,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ArgSettings","id":"0:3968:1678","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:186:2114":{"id":"0:186:2114","crate_id":0,"name":"parse_from","span":{"filename":"src/derive.rs","begin":[511,4],"end":[517,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["itr",{"kind":"generic","inner":"I"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"It","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"It"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"It"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsString","id":"1:2651:183","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3447:1373":{"id":"2:3447:1373","crate_id":2,"name":"sub","span":null,"visibility":"default","docs":"Performs the `-` operation.\n\n# Example\n\n```\nassert_eq!(12 - 1, 11);\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"generic","inner":"Rhs"}]],"output":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Sub","id":"2:3444:8780","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"a:2:9533:7458-0:4392:2263":{"id":"a:2:9533:7458-0:4392:2263","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:9533:7458","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StringValueParser","id":"0:4392:2263","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:8673:2117":{"id":"2:8673:2117","crate_id":2,"name":"Item","span":null,"visibility":"default","docs":"The type of the elements being iterated over.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"2:32216:69474":{"id":"2:32216:69474","crate_id":2,"name":"overflowing_neg","span":null,"visibility":"public","docs":"Negates self in an overflowing fashion.\n\nReturns `!self + 1` using wrapping operations to return the value\nthat represents the negation of this unsigned value. Note that for\npositive unsigned values overflow always occurs, but negating 0 does\nnot overflow.\n\n# Examples\n\nBasic usage\n\n```\nassert_eq!(0u64.overflowing_neg(), (0, false));\nassert_eq!(2u64.overflowing_neg(), (-2i32 as u64, true));\n```","links":{},"attrs":["#[stable(feature = \"wrapping\", since = \"1.7.0\")]","#[rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"u64"},{"kind":"primitive","inner":"bool"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1744":{"id":"0:1744","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[40,0],"end":[40,34]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"value_parser::ValueParser","name":"ValueParser","id":"0:1294:2265","glob":false}},"0:896:2940":{"id":"0:896:2940","crate_id":0,"name":"visible_alias","span":{"filename":"src/builder/command.rs","begin":[2554,4],"end":[2557,5]},"visibility":"public","docs":"Sets a visible alias to this subcommand.\n\nThis allows the subcommand to be accessed via *either* the\noriginal name or the given alias. This is more efficient and easier\nthan creating hidden subcommands as one only needs to check for\nthe existence of this command and not all aliased variants.\n\n**NOTE:** The alias defined with this method is *visible* from the help\nmessage and displayed as if it were just another regular subcommand. If\nlooking for an alias that will not be displayed in the help message, see\n[`Command::alias`].\n\n**NOTE:** When using aliases and checking for the existence of a\nparticular subcommand within an [`ArgMatches`] struct, one only needs to\nsearch for the original name and not all aliases.\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg};\nlet m = Command::new(\"myprog\")\n    .subcommand(Command::new(\"test\")\n        .visible_alias(\"do-stuff\"))\n    .get_matches_from(vec![\"myprog\", \"do-stuff\"]);\nassert_eq!(m.subcommand_name(), Some(\"test\"));\n```\n[`App::alias`]: Command::alias()","links":{"`ArgMatches`":"0:4713:1665","`Command::alias`":"0:888:278"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["name",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:32148:69421":{"id":"2:32148:69421","crate_id":2,"name":"BITS","span":null,"visibility":"public","docs":"The size of this integer type in bits.\n\n# Examples\n\n```\nassert_eq!(u64::BITS, 64);\n```","links":{},"attrs":["#[stable(feature = \"int_bits_const\", since = \"1.53.0\")]"],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"primitive","inner":"u32"},"default":"64"}},"2:32163:69433":{"id":"2:32163:69433","crate_id":2,"name":"to_le","span":null,"visibility":"public","docs":"Converts `self` to little endian from the target's endianness.\n\nOn little endian this is a no-op. On big endian the bytes are\nswapped.\n\n# Examples\n\nBasic usage:\n\n```\nlet n = 0x1Au64;\n\nif cfg!(target_endian = \"little\") {\n    assert_eq!(n.to_le(), n)\n} else {\n    assert_eq!(n.to_le(), n.swap_bytes())\n}\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:961:5877":{"id":"0:961:5877","crate_id":0,"name":"has_subcommands","span":{"filename":"src/builder/command.rs","begin":[3479,4],"end":[3481,5]},"visibility":"public","docs":"Returns `true` if this `Command` has subcommands.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9532:7459-0:1294:2265":{"id":"a:2:9532:7459-0:1294:2265","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:9532:7459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1294:2265","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"0:390:3499":{"id":"0:390:3499","crate_id":0,"name":"require_value_delimiter","span":{"filename":"src/builder/arg.rs","begin":[2114,4],"end":[2120,5]},"visibility":"public","docs":"Specifies that *multiple values* may only be set using the delimiter.\n\nThis means if an option is encountered, and no delimiter is found, it is assumed that no\nadditional values for that option follow. This is unlike the default, where it is generally\nassumed that more values will follow regardless of whether or not a delimiter is used.\n\n**NOTE:** The default is `false`.\n\n**NOTE:** Setting this requires [`Arg::use_value_delimiter`] and\n[`Arg::takes_value`]\n\n**NOTE:** It's a good idea to inform the user that use of a delimiter is required, either\nthrough help text or other means.\n\n# Examples\n\nThese examples demonstrate what happens when `require_delimiter(true)` is used. Notice\neverything works in this first example, as we use a delimiter, as expected.\n\n```rust\n# use clap::{Command, Arg};\nlet delims = Command::new(\"prog\")\n    .arg(Arg::new(\"opt\")\n        .short('o')\n        .takes_value(true)\n        .use_value_delimiter(true)\n        .require_delimiter(true)\n        .multiple_values(true))\n    .get_matches_from(vec![\n        \"prog\", \"-o\", \"val1,val2,val3\",\n    ]);\n\nassert!(delims.contains_id(\"opt\"));\nassert_eq!(delims.values_of(\"opt\").unwrap().collect::<Vec<_>>(), [\"val1\", \"val2\", \"val3\"]);\n```\n\nIn this next example, we will *not* use a delimiter. Notice it's now an error.\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"opt\")\n        .short('o')\n        .takes_value(true)\n        .use_value_delimiter(true)\n        .require_delimiter(true))\n    .try_get_matches_from(vec![\n        \"prog\", \"-o\", \"val1\", \"val2\", \"val3\",\n    ]);\n\nassert!(res.is_err());\nlet err = res.unwrap_err();\nassert_eq!(err.kind(), ErrorKind::UnknownArgument);\n```\n\nWhat's happening is `-o` is getting `val1`, and because delimiters are required yet none\nwere present, it stops parsing `-o`. At this point it reaches `val2` and because no\npositional arguments have been defined, it's an error of an unexpected argument.\n\nIn this final example, we contrast the above with `clap`'s default behavior where the above\nis *not* an error.\n\n```rust\n# use clap::{Command, Arg};\nlet delims = Command::new(\"prog\")\n    .arg(Arg::new(\"opt\")\n        .short('o')\n        .takes_value(true)\n        .multiple_values(true))\n    .get_matches_from(vec![\n        \"prog\", \"-o\", \"val1\", \"val2\", \"val3\",\n    ]);\n\nassert!(delims.contains_id(\"opt\"));\nassert_eq!(delims.values_of(\"opt\").unwrap().collect::<Vec<_>>(), [\"val1\", \"val2\", \"val3\"]);\n```","links":{"`Arg::use_value_delimiter`":"0:387:3457","`Arg::takes_value`":"0:351:1949"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2868-0:4427:2261":{"id":"b:2:2868-0:4427:2261","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2862:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:4427:2261","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2870:27181"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1015:5965":{"id":"0:1015:5965","crate_id":0,"name":"get_external_subcommand_value_parser","span":{"filename":"src/builder/command.rs","begin":[3787,4],"end":[3797,5]},"visibility":"public","docs":"Configured parser for values passed to an external subcommand\n\n# Example\n\n```rust\nlet cmd = clap::Command::new(\"raw\")\n    .allow_external_subcommands(true)\n    .allow_invalid_utf8_for_external_subcommands(true);\nlet value_parser = cmd.get_external_subcommand_value_parser();\nprintln!(\"{:?}\", value_parser);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"super::ValueParser","id":"0:1294:2265","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:359:1945":{"id":"0:359:1945","crate_id":0,"name":"value_name","span":{"filename":"src/builder/arg.rs","begin":[1443,4],"end":[1445,5]},"visibility":"public","docs":"Placeholder for the argument's value in the help message / usage.\n\nThis name is cosmetic only; the name is **not** used to access arguments.\nThis setting can be very helpful when describing the type of input the user should be\nusing, such as `FILE`, `INTERFACE`, etc. Although not required, it's somewhat convention to\nuse all capital letters for the value name.\n\n**NOTE:** implicitly sets [`Arg::takes_value(true)`]\n\n# Examples\n\n```rust\n# use clap::{Command, Arg};\nArg::new(\"cfg\")\n    .long(\"config\")\n    .value_name(\"FILE\")\n# ;\n```\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"config\")\n        .long(\"config\")\n        .value_name(\"FILE\")\n        .help(\"Some help text\"))\n    .get_matches_from(vec![\n        \"prog\", \"--help\"\n    ]);\n```\nRunning the above program produces the following output\n\n```text\nvalnames\n\nUSAGE:\n   valnames [OPTIONS]\n\nOPTIONS:\n    --config <FILE>     Some help text\n    -h, --help          Print help information\n    -V, --version       Print version information\n```\n[option]: Arg::takes_value()\n[positional]: Arg::index()\n[`Arg::takes_value(true)`]: Arg::takes_value()","links":{"Arg::takes_value()":"0:351:1949"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["name",{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23180:11341":{"id":"2:23180:11341","crate_id":2,"name":"Mask","span":null,"visibility":"default","docs":"The mask type returned by each comparison.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"0:4560:415":{"id":"0:4560:415","crate_id":0,"name":"clone","span":{"filename":"src/error/context.rs","begin":[2,15],"end":[2,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:4523:6999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4836:667":{"id":"0:4836:667","crate_id":0,"name":"fmt","span":{"filename":"src/parser/matches/value_source.rs","begin":[2,9],"end":[2,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10511:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4633:7115":{"id":"0:4633:7115","crate_id":0,"name":"ArgumentNotFound","span":{"filename":"src/error/kind.rs","begin":[382,4],"end":[382,20]},"visibility":"default","docs":"Occurs when using the [`ArgMatches::value_of_t`] and friends to convert an argument value\ninto type `T`, but the argument you requested wasn't used. I.e. you asked for an argument\nwith name `config` to be converted, but `config` wasn't used by the user.\n\n[`ArgMatches::value_of_t`]: crate::ArgMatches::value_of_t()","links":{"crate::ArgMatches::value_of_t()":"0:2187:1842"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"0:3430:2539":{"id":"0:3430:2539","crate_id":0,"name":"DeriveDisplayOrder","span":{"filename":"src/builder/app_settings.rs","begin":[464,4],"end":[464,22]},"visibility":"default","docs":"Displays the arguments and [`subcommands`] in the help message in the order that they were\ndeclared in, and not alphabetically which is the default.\n\nTo override the declaration order, see [`Arg::display_order`] and [`Command::display_order`].\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg, AppSettings};\nCommand::new(\"myprog\")\n    .global_setting(AppSettings::DeriveDisplayOrder)\n    .get_matches();\n```\n\n[`subcommands`]: crate::Command::subcommand()\n[`Arg::display_order`]: crate::Arg::display_order\n[`Command::display_order`]: crate::Command::display_order","links":{"crate::Arg::display_order":"0:410:3756","crate::Command::subcommand()":"0:782:2012","crate::Command::display_order":"0:904:3756"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"a:2:3382:225-0:4439:2262":{"id":"a:2:3382:225-0:4439:2262","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangedU64ValueParser","id":"0:4439:2262","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:23123:21827":{"id":"2:23123:21827","crate_id":2,"name":"reduce_xor","span":null,"visibility":"default","docs":"Returns the cumulative bitwise \"xor\" across the lanes of the vector.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Scalar","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdInt","id":"2:23106:11397","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"a:2:9532:7459-0:4351:1680":{"id":"a:2:9532:7459-0:4351:1680","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:9532:7459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:4351:1680","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:13749:63785":{"id":"2:13749:63785","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"2:13336:8923","prim@char":"1:15876:8642"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13346:8917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13346:8917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13361:8918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6172:1897":{"id":"5:6172:1897","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8479:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8479:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13346:8917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1406":{"id":"0:1406","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[917,0],"end":[923,1]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"crate::ValueEnum","id":"0:174:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"EnumValueParser","id":"0:4410:2272","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"items":["0:1408:930"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3844:28246":{"id":"2:3844:28246","crate_id":2,"name":"TryType","span":null,"visibility":"default","docs":"The \"return\" type of this meta-function.","links":{},"attrs":["#[unstable(feature = \"try_trait_v2_residual\", issue = \"91285\")]"],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[{"eq_predicate":{"lhs":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"qualified_path","inner":{"name":"TryType","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Residual","id":"2:3842:8800","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"O"}}],"bindings":[]}}}}},"trait":{"name":"Try","id":"2:3831:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"rhs":{"type":{"kind":"generic","inner":"O"}}}},{"eq_predicate":{"lhs":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"qualified_path","inner":{"name":"TryType","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Residual","id":"2:3842:8800","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"O"}}],"bindings":[]}}}}},"trait":{"name":"Try","id":"2:3831:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"rhs":{"type":{"kind":"generic","inner":"Self"}}}}]},"bounds":[{"trait_bound":{"trait":{"name":"Try","id":"2:3831:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null}},"2:3378:223":{"id":"2:3378:223","crate_id":2,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:498:4184":{"id":"0:498:4184","crate_id":0,"name":"is_takes_value_set","span":{"filename":"src/builder/arg.rs","begin":[4660,4],"end":[4662,5]},"visibility":"public","docs":"Report whether [`Arg::is_takes_value_set`] is set","links":{"`Arg::is_takes_value_set`":"0:498:4184"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2180:1849":{"id":"0:2180:1849","crate_id":0,"name":"values_of","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[480,4],"end":[489,5]},"visibility":"public","docs":"Deprecated, replaced with [`ArgMatches::get_many()`]","links":{"`ArgMatches::get_many()`":"0:2165:7548"},"attrs":["#[track_caller]","#![allow(deprecated)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Values","id":"0:4778:1685","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Key","id":"0:3239:2795","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13732:67824":{"id":"2:13732:67824","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"crate::ops::IndexMut":"2:3683:8797","str::slice_unchecked":"2:13731:11078","`str`":"1:15882:8647"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:23110:1244":{"id":"2:23110:1244","crate_id":2,"name":"saturating_sub","span":null,"visibility":"default","docs":"Lanewise saturating subtract.\n\n# Examples\n```\n# #![feature(portable_simd)]\n# #[cfg(feature = \"as_crate\")] use core_simd::simd;\n# #[cfg(not(feature = \"as_crate\"))] use core::simd;\n# use simd::{Simd, SimdInt};\nuse core::i32::{MIN, MAX};\nlet x = Simd::from_array([MIN, -2, -1, MAX]);\nlet max = Simd::splat(MAX);\nlet unsat = x - max;\nlet sat = x.saturating_sub(max);\nassert_eq!(unsat, Simd::from_array([1, MAX, MIN, 0]));\nassert_eq!(sat, Simd::from_array([MIN, MIN, MIN, 0]));","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["second",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:23057:21799":{"id":"2:23057:21799","crate_id":2,"name":"to_bits","span":null,"visibility":"default","docs":"Raw transmutation to an unsigned integer vector type with the\nsame size and number of lanes.","links":{},"attrs":["#[must_use =\n\"method returns a new vector and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Bits","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdFloat","id":"2:23053:11401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"a:2:3382:225-0:4469:2274":{"id":"a:2:3382:225-0:4469:2274","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"NonEmptyStringValueParser","id":"0:4469:2274","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:2870:611":{"id":"0:2870:611","crate_id":0,"name":"eq","span":{"filename":"src/mkeymap.rs","begin":[48,4],"end":[53,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["rhs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:998:4243":{"id":"0:998:4243","crate_id":0,"name":"is_next_line_help_set","span":{"filename":"src/builder/command.rs","begin":[3691,4],"end":[3693,5]},"visibility":"public","docs":"Report whether [`Command::next_line_help`] is set","links":{"`Command::next_line_help`":"0:825:3781"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1313:1925":{"id":"0:1313:1925","crate_id":0,"name":"string","span":{"filename":"src/builder/value_parser.rs","begin":[163,4],"end":[165,5]},"visibility":"public","docs":"[`String`] parser for argument values\n\nSee also:\n- [`NonEmptyStringValueParser`]\n\n# Example\n\n```rust\nlet mut cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"port\")\n            .value_parser(clap::value_parser!(String))\n            .required(true)\n    );\n\nlet m = cmd.try_get_matches_from_mut([\"cmd\", \"80\"]).unwrap();\nlet port: &String = m.get_one(\"port\")\n    .expect(\"required\");\nassert_eq!(port, \"80\");\n```","links":{"`String`":"5:8479:221","`NonEmptyStringValueParser`":"0:4469:2274"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13772:67827":{"id":"2:13772:67827","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"prim@char":"1:15876:8642","str::split_terminator":"2:13769:67826","self::pattern":"2:13336:8923","str::split":"2:13760:6983"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:49858:8950","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13346:8917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13346:8917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13361:8918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23064:21805":{"id":"2:23064:21805","crate_id":2,"name":"is_sign_negative","span":null,"visibility":"default","docs":"Returns true for each lane if it has a negative sign, including\n`-0.0`, `NaN`s with negative sign bit and negative infinity.","links":{},"attrs":["#[must_use =\n\"method returns a new mask and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Mask","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdFloat","id":"2:23053:11401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1497:59":{"id":"0:1497:59","crate_id":0,"name":"default","span":{"filename":"src/builder/value_parser.rs","begin":[1487,4],"end":[1489,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4768:7385":{"id":"0:4768:7385","crate_id":0,"name":"RawValues","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1608,0],"end":[1612,1]},"visibility":"public","docs":"Iterate over raw argument values via [`ArgMatches::get_raw`].\n\n# Examples\n\n ```\n# use clap::{Command, arg, value_parser};\nuse std::ffi::OsString;\nuse std::os::unix::ffi::{OsStrExt,OsStringExt};\n\nlet m = Command::new(\"utf8\")\n    .arg(arg!(<arg> \"some arg\")\n        .value_parser(value_parser!(OsString)))\n    .get_matches_from(vec![OsString::from(\"myprog\"),\n                            // \"Hi {0xe9}!\"\n                            OsString::from_vec(vec![b'H', b'i', b' ', 0xe9, b'!'])]);\nassert_eq!(\n    &*m.get_raw(\"arg\")\n        .unwrap()\n        .next().unwrap()\n        .as_bytes(),\n    [b'H', b'i', b' ', 0xe9, b'!']\n);\n```","links":{"`ArgMatches::get_raw`":"0:2167:7575"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:2:9533:7458-0:4768:7385","a:2:9532:7459-0:4768:7385","a:2:3382:225-0:4768:7385","a:2:3370:216-0:4768:7385","a:2:3411:6205-0:4768:7385","b:2:8676-0:4768:7385","b:2:4104-0:4768:7385","b:2:2865-0:4768:7385","b:2:3203-0:4768:7385","b:2:3207-0:4768:7385","b:2:3218-0:4768:7385","b:2:2868-0:4768:7385","b:2:3213-0:4768:7385","b:5:848-0:4768:7385","0:4772","0:4775","0:2287","0:2292","0:2295","0:2297"]}},"0:1571:1671":{"id":"0:1571:1671","crate_id":0,"name":"Parser","span":{"filename":"src/builder/value_parser.rs","begin":[1940,4],"end":[1940,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1294:2265","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"b:2:4104-0:4451:2270":{"id":"b:2:4104-0:4451:2270","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:4102:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BoolValueParser","id":"0:4451:2270","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:4106:1449"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:9113:611":{"id":"2:9113:611","crate_id":2,"name":"eq","span":null,"visibility":"default","docs":"Determines if the elements of this [`Iterator`] are equal to those of\nanother.\n\n# Examples\n\n```\nassert_eq!([1].iter().eq([1].iter()), true);\nassert_eq!([1].iter().eq([1, 2].iter()), false);\n```","links":{"`Iterator`":"2:8873:159"},"attrs":["#[stable(feature = \"iter_order\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"I"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2920:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"IntoIterator","id":"2:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13833:21135":{"id":"2:13833:21135","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:401:3634":{"id":"0:401:3634","crate_id":0,"name":"default_missing_values","span":{"filename":"src/builder/arg.rs","begin":[2448,4],"end":[2451,5]},"visibility":"public","docs":"Value for the argument when the flag is present but no value is specified.\n\nSee [`Arg::default_missing_value`].\n\n[`Arg::default_missing_value`]: Arg::default_missing_value()","links":{"Arg::default_missing_value()":"0:399:3629"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["vals",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:391:3505":{"id":"0:391:3505","crate_id":0,"name":"require_delimiter","span":{"filename":"src/builder/arg.rs","begin":[2141,4],"end":[2143,5]},"visibility":"public","docs":"Deprecated, replaced with [`Arg::require_value_delimiter`]\n\nDerive: replace `#[clap(require_delimiter = true)]` with `#[clap(require_value_delimiter = true)]`\n\nBuilder: replace `arg.require_delimiter(true)` with `arg.require_value_delimiter(true)`","links":{"`Arg::require_value_delimiter`":"0:390:3499"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4469:2274":{"id":"0:4469:2274","crate_id":0,"name":"NonEmptyStringValueParser","span":{"filename":"src/builder/value_parser.rs","begin":[1782,0],"end":[1782,39]},"visibility":"public","docs":"Parse non-empty string values\n\nSee also:\n- [`ValueParser::string`]\n\n# Example\n\nUsage:\n```rust\nlet mut cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"append\")\n            .value_parser(clap::builder::NonEmptyStringValueParser::new())\n            .required(true)\n    );\n\nlet m = cmd.try_get_matches_from_mut([\"cmd\", \"true\"]).unwrap();\nlet port: &String = m.get_one(\"append\")\n    .expect(\"required\");\nassert_eq!(port, \"true\");\n```\n\nSemantics:\n```rust\n# use std::ffi::OsStr;\n# use clap::builder::TypedValueParser;\n# let cmd = clap::Command::new(\"test\");\n# let arg = None;\nlet value_parser = clap::builder::NonEmptyStringValueParser::new();\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"random\")).unwrap(), \"random\");\nassert!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"\")).is_err());\n```","links":{"`ValueParser::string`":"0:1313:1925"},"attrs":["#[non_exhaustive]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":false}},"generics":{"params":[],"where_predicates":[]},"impls":["0:1537","a:2:9533:7458-0:4469:2274","a:2:9532:7459-0:4469:2274","a:2:3382:225-0:4469:2274","a:2:3370:216-0:4469:2274","a:2:3411:6205-0:4469:2274","b:2:4104-0:4469:2274","b:2:2865-0:4469:2274","b:2:3203-0:4469:2274","b:2:3207-0:4469:2274","b:2:3218-0:4469:2274","b:2:2868-0:4469:2274","b:2:3213-0:4469:2274","b:5:848-0:4469:2274","0:4470","0:4471","0:4473","0:1539","0:1544"]}},"0:967:5887":{"id":"0:967:5887","crate_id":0,"name":"get_after_help","span":{"filename":"src/builder/command.rs","begin":[3522,4],"end":[3524,5]},"visibility":"public","docs":"Returns the help heading for listing subcommands.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3218-0:4420:2260":{"id":"b:2:3218-0:4420:2260","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValuesParser","id":"0:4420:2260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3221:128","2:3222:1435"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2868-0:4420:2260":{"id":"b:2:2868-0:4420:2260","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2862:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValuesParser","id":"0:4420:2260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2870:27181"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:963:5882":{"id":"0:963:5882","crate_id":0,"name":"get_subommand_help_heading","span":{"filename":"src/builder/command.rs","begin":[3498,4],"end":[3500,5]},"visibility":"public","docs":"Deprecated, replaced with [`App::get_subcommand_help_heading`]","links":{"`App::get_subcommand_help_heading`":"0:962:5879"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2920:186":{"id":"2:2920:186","crate_id":2,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2922:611","2:2923:917"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"b:2:2865-0:3968:1678":{"id":"b:2:2865-0:3968:1678","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgSettings","id":"0:3968:1678","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2867:2792"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:446:3999":{"id":"0:446:3999","crate_id":0,"name":"required_if_eq_all","span":{"filename":"src/builder/arg.rs","begin":[3942,4],"end":[3946,5]},"visibility":"public","docs":"Specify this argument is [required] based on multiple conditions.\n\nThe conditions are set up in a `(arg, val)` style tuple. The requirement will only become\nvalid if every one of the specified `arg`'s value equals its corresponding `val`.\n\n# Examples\n\n```rust\n# use clap::Arg;\nArg::new(\"config\")\n    .required_if_eq_all(&[\n        (\"extra\", \"val\"),\n        (\"option\", \"spec\")\n    ])\n# ;\n```\n\nSetting `Arg::required_if_eq_all(&[(arg, val)])` makes this arg required if all of the `arg`s\nare used at runtime and every value is equal to its corresponding `val`. If the `arg`'s value is\nanything other than `val`, this argument isn't required.\n\n```rust\n# use clap::{Command, Arg};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .required_if_eq_all(&[\n            (\"extra\", \"val\"),\n            (\"option\", \"spec\")\n        ])\n        .takes_value(true)\n        .long(\"config\"))\n    .arg(Arg::new(\"extra\")\n        .takes_value(true)\n        .long(\"extra\"))\n    .arg(Arg::new(\"option\")\n        .takes_value(true)\n        .long(\"option\"))\n    .try_get_matches_from(vec![\n        \"prog\", \"--option\", \"spec\"\n    ]);\n\nassert!(res.is_ok()); // We didn't use --option=spec --extra=val so \"cfg\" isn't required\n```\n\nSetting `Arg::required_if_eq_all(&[(arg, val)])` and having all of the `arg`s used with its\nvalue of `val` but *not* using this arg is an error.\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .required_if_eq_all(&[\n            (\"extra\", \"val\"),\n            (\"option\", \"spec\")\n        ])\n        .takes_value(true)\n        .long(\"config\"))\n    .arg(Arg::new(\"extra\")\n        .takes_value(true)\n        .long(\"extra\"))\n    .arg(Arg::new(\"option\")\n        .takes_value(true)\n        .long(\"option\"))\n    .try_get_matches_from(vec![\n        \"prog\", \"--extra\", \"val\", \"--option\", \"spec\"\n    ]);\n\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind(), ErrorKind::MissingRequiredArgument);\n```\n[required]: Arg::required()","links":{"Arg::required()":"0:337:1948"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["ifs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"tuple","inner":[{"kind":"generic","inner":"T"},{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Key","id":"0:3239:2795","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:353:2257":{"id":"0:353:2257","crate_id":0,"name":"value_parser","span":{"filename":"src/builder/arg.rs","begin":[1038,4],"end":[1041,5]},"visibility":"public","docs":"Specify the type of the argument.\n\nThis allows parsing and validating a value before storing it into\n[`ArgMatches`][crate::ArgMatches].\n\nSee also\n- [`value_parser!`][crate::value_parser!] for auto-selecting a value parser for a given type\n  - [`BoolishValueParser`][crate::builder::BoolishValueParser], and [`FalseyValueParser`][crate::builder::FalseyValueParser] for alternative `bool` implementations\n  - [`NonEmptyStringValueParser`][crate::builder::NonEmptyStringValueParser] for basic validation for strings\n- [`RangedI64ValueParser`][crate::builder::RangedI64ValueParser] and [`RangedU64ValueParser`][crate::builder::RangedU64ValueParser] for numeric ranges\n- [`EnumValueParser`][crate::builder::EnumValueParser] and  [`PossibleValuesParser`][crate::builder::PossibleValuesParser] for static enumerated values\n- or any other [`TypedValueParser`][crate::builder::TypedValueParser] implementation\n\n```rust\nlet mut cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"color\")\n            .long(\"color\")\n            .value_parser([\"always\", \"auto\", \"never\"])\n            .default_value(\"auto\")\n    )\n    .arg(\n        clap::Arg::new(\"hostname\")\n            .long(\"hostname\")\n            .value_parser(clap::builder::NonEmptyStringValueParser::new())\n            .takes_value(true)\n            .required(true)\n    )\n    .arg(\n        clap::Arg::new(\"port\")\n            .long(\"port\")\n            .value_parser(clap::value_parser!(u16).range(3000..))\n            .takes_value(true)\n            .required(true)\n    );\n\nlet m = cmd.try_get_matches_from_mut(\n    [\"cmd\", \"--hostname\", \"rust-lang.org\", \"--port\", \"3001\"]\n).unwrap();\n\nlet color: &String = m.get_one(\"color\")\n    .expect(\"default\");\nassert_eq!(color, \"auto\");\n\nlet hostname: &String = m.get_one(\"hostname\")\n    .expect(\"required\");\nassert_eq!(hostname, \"rust-lang.org\");\n\nlet port: u16 = *m.get_one(\"port\")\n    .expect(\"required\");\nassert_eq!(port, 3001);\n```","links":{"crate::builder::BoolishValueParser":"0:4463:2271","crate::builder::FalseyValueParser":"0:4457:2273","crate::builder::NonEmptyStringValueParser":"0:4469:2274","crate::builder::EnumValueParser":"0:4410:2272","crate::builder::RangedI64ValueParser":"0:4427:2261","crate::builder::PossibleValuesParser":"0:4420:2260","crate::builder::TypedValueParser":"0:1362:2264","crate::builder::RangedU64ValueParser":"0:4439:2262","crate::ArgMatches":"0:4713:1665","crate::value_parser!":"0:1621:2257"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["parser",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"super::ValueParser","id":"0:1294:2265","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl Into<super::ValueParser>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"super::ValueParser","id":"0:1294:2265","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:848-0:4796:1683":{"id":"b:5:848-0:4796:1683","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:844:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsValues","id":"0:4796:1683","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["5:850:4342","5:851:4983","5:852:9984"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4841":{"id":"0:4841","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/value_source.rs","begin":[2,29],"end":[2,38]},"visibility":{"restricted":{"parent":"0:2440:7462","path":"::parser::matches::value_source"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2920:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4828:1684","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4828:1684","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4842:611"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4404:2276":{"id":"0:4404:2276","crate_id":0,"name":"PathBufValueParser","span":{"filename":"src/builder/value_parser.rs","begin":[810,0],"end":[810,32]},"visibility":"public","docs":"Implementation for [`ValueParser::path_buf`]\n\nUseful for composing new [`TypedValueParser`]s","links":{"`ValueParser::path_buf`":"0:1315:6634","`TypedValueParser`":"0:1362:2264"},"attrs":["#[non_exhaustive]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":false}},"generics":{"params":[],"where_predicates":[]},"impls":["0:1397","a:2:9533:7458-0:4404:2276","a:2:9532:7459-0:4404:2276","a:2:3382:225-0:4404:2276","a:2:3370:216-0:4404:2276","a:2:3411:6205-0:4404:2276","b:2:4104-0:4404:2276","b:2:2865-0:4404:2276","b:2:3203-0:4404:2276","b:2:3207-0:4404:2276","b:2:3218-0:4404:2276","b:2:2868-0:4404:2276","b:2:3213-0:4404:2276","b:5:848-0:4404:2276","0:4405","0:4406","0:4408","0:1399","0:1404"]}},"0:4438:667":{"id":"0:4438:667","crate_id":0,"name":"fmt","span":{"filename":"src/builder/value_parser.rs","begin":[1134,22],"end":[1134,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10511:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:14550:26909":{"id":"2:14550:26909","crate_id":2,"name":"shrink","span":null,"visibility":"default","docs":"Attempts to shrink the memory block.\n\nReturns a new [`NonNull<[u8]>`][NonNull] containing a pointer and the actual size of the allocated\nmemory. The pointer is suitable for holding data described by `new_layout`. To accomplish\nthis, the allocator may shrink the allocation referenced by `ptr` to fit the new layout.\n\nIf this returns `Ok`, then ownership of the memory block referenced by `ptr` has been\ntransferred to this allocator. The memory may or may not have been freed, and should be\nconsidered unusable.\n\nIf this method returns `Err`, then ownership of the memory block has not been transferred to\nthis allocator, and the contents of the memory block are unaltered.\n\n# Safety\n\n* `ptr` must denote a block of memory [*currently allocated*] via this allocator.\n* `old_layout` must [*fit*] that block of memory (The `new_layout` argument need not fit it.).\n* `new_layout.size()` must be smaller than or equal to `old_layout.size()`.\n\nNote that `new_layout.align()` need not be the same as `old_layout.align()`.\n\n[*currently allocated*]: #currently-allocated-memory\n[*fit*]: #memory-fitting\n\n# Errors\n\nReturns `Err` if the new layout does not meet the allocator's size and alignment\nconstraints of the allocator, or if shrinking otherwise fails.\n\nImplementations are encouraged to return `Err` on memory exhaustion rather than panicking or\naborting, but this is not a strict requirement. (Specifically: it is *legal* to implement\nthis trait atop an underlying native allocation library that aborts on memory exhaustion.)\n\nClients wishing to abort computation in response to an allocation error are encouraged to\ncall the [`handle_alloc_error`] function, rather than directly invoking `panic!` or similar.\n\n[`handle_alloc_error`]: ../../alloc/alloc/fn.handle_alloc_error.html","links":{"NonNull":"2:2391:9139"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["ptr",{"kind":"resolved_path","inner":{"name":"NonNull","id":"2:2391:9139","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}],["old_layout",{"kind":"resolved_path","inner":{"name":"Layout","id":"2:50749:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["new_layout",{"kind":"resolved_path","inner":{"name":"Layout","id":"2:50749:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"NonNull","id":"2:2391:9139","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"AllocError","id":"2:50778:10147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:4701:667":{"id":"0:4701:667","crate_id":0,"name":"fmt","span":{"filename":"src/parser/error.rs","begin":[4,16],"end":[4,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10511:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:997:5930":{"id":"0:997:5930","crate_id":0,"name":"is_propagate_version_set","span":{"filename":"src/builder/command.rs","begin":[3686,4],"end":[3688,5]},"visibility":"public","docs":"Report whether [`Command::propagate_version`] is set","links":{"`Command::propagate_version`":"0:824:5111"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:848-0:4351:1680":{"id":"b:5:848-0:4351:1680","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:844:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:4351:1680","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:850:4342","5:851:4983","5:852:9984"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:476:4170":{"id":"0:476:4170","crate_id":0,"name":"get_short_and_visible_aliases","span":{"filename":"src/builder/arg.rs","begin":[4455,4],"end":[4464,5]},"visibility":"public","docs":"Get the short option name and its visible aliases, if any","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7898:240","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"char"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3218-0:4463:2271":{"id":"b:2:3218-0:4463:2271","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BoolishValueParser","id":"0:4463:2271","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3221:128","2:3222:1435"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3218-0:4439:2262":{"id":"b:2:3218-0:4439:2262","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangedU64ValueParser","id":"0:4439:2262","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:3221:128","2:3222:1435"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:9533:7458-0:4439:2262":{"id":"a:2:9533:7458-0:4439:2262","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:9533:7458","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:9533:7458","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangedU64ValueParser","id":"0:4439:2262","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:5434:10992":{"id":"1:5434:10992","crate_id":1,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5435:12372","1:5436:6285"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10409:10989","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6237:28882":{"id":"1:6237:28882","crate_id":1,"name":"core_dumped","span":null,"visibility":"default","docs":"If the process was terminated by a signal, says whether it dumped core.","links":{},"attrs":["#[stable(feature = \"unix_process_wait_more\", since = \"1.58.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"a:2:3411:6205-0:4523:6999":{"id":"a:2:3411:6205-0:4523:6999","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:3411:6205","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:4523:6999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:508:4243":{"id":"0:508:4243","crate_id":0,"name":"is_next_line_help_set","span":{"filename":"src/builder/arg.rs","begin":[4726,4],"end":[4728,5]},"visibility":"public","docs":"Report whether [`Arg::next_line_help`] is set","links":{"`Arg::next_line_help`":"0:413:3781"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2865-0:4294:1679":{"id":"b:2:2865-0:4294:1679","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:4294:1679","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":["2:2867:2792"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2868-0:5070:1667":{"id":"b:2:2868-0:5070:1667","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2862:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:5070:1667","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2870:27181"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:9533:7458-0:4796:1683":{"id":"a:2:9533:7458-0:4796:1683","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:9533:7458","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsValues","id":"0:4796:1683","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"0:3400:2450":{"id":"0:3400:2450","crate_id":0,"name":"AllowMissingPositional","span":{"filename":"src/builder/app_settings.rs","begin":[171,4],"end":[171,26]},"visibility":"default","docs":"Deprecated, replaced with [`Command::allow_missing_positional`] and\n[`Command::is_allow_missing_positional_set`]\n\nDerive: replace `#[clap(setting = AllowMissingPositional)]` with `#[clap(allow_missing_positional = true)]`\n\nBuilder: replace `cmd.setting(AllowMissingPositional)` with `cmd.allow_missing_positional(true)`","links":{"`Command::allow_missing_positional`":"0:882:5492","`Command::is_allow_missing_positional_set`":"0:1010:5954"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"2:3486:8784":{"id":"2:3486:8784","crate_id":2,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3488:1115"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:9533:7458-0:4755:7386":{"id":"a:2:9533:7458-0:4755:7386","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:9533:7458","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValuesRef","id":"0:4755:7386","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"0:4785:415":{"id":"0:4785:415","crate_id":0,"name":"clone","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1654,9],"end":[1654,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Values","id":"0:4778:1685","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6471:15083":{"id":"1:6471:15083","crate_id":1,"name":"st_atime_nsec","span":null,"visibility":"default","docs":"Returns the last access time of the file, in nanoseconds since [`st_atime`].\n\n[`st_atime`]: Self::st_atime\n\n# Examples\n\n```no_run\nuse std::fs;\nuse std::io;\nuse std::os::linux::fs::MetadataExt;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    println!(\"{}\", meta.st_atime_nsec());\n    Ok(())\n}\n```","links":{"Self::st_atime":"1:6470:15082"},"attrs":["#[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"a:2:9532:7459-0:4755:7386":{"id":"a:2:9532:7459-0:4755:7386","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:9532:7459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValuesRef","id":"0:4755:7386","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"0:811:5031":{"id":"0:811:5031","crate_id":0,"name":"render_version","span":{"filename":"src/builder/command.rs","begin":[848,4],"end":[850,5]},"visibility":"public","docs":"Version message rendered as if the user ran `-V`.\n\nSee also [`Command::render_long_version`].\n\n### Coloring\n\nThis function does not try to color the message nor it inserts any [ANSI escape codes].\n\n### Examples\n\n```rust\n# use clap::Command;\nuse std::io;\nlet cmd = Command::new(\"myprog\");\nprintln!(\"{}\", cmd.render_version());\n```\n[`io::Write`]: std::io::Write\n[`-V` (short)]: Command::version()\n[`--version` (long)]: Command::long_version()\n[ANSI escape codes]: https://en.wikipedia.org/wiki/ANSI_escape_code","links":{"`Command::render_long_version`":"0:812:5036"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8479:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3370:216-0:4647:128":{"id":"a:2:3370:216-0:4647:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4647:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:388:3464":{"id":"0:388:3464","crate_id":0,"name":"use_delimiter","span":{"filename":"src/builder/arg.rs","begin":[2002,4],"end":[2004,5]},"visibility":"public","docs":"Deprecated, replaced with [`Arg::use_value_delimiter`]\n\nDerive: replace `#[clap(use_delimiter = true)]` with `#[clap(use_value_delimiter = true)]`\n\nBuilder: replace `arg.use_delimiter(true)` with `arg.use_value_delimiter(true)`","links":{"`Arg::use_value_delimiter`":"0:387:3457"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8719:9945":{"id":"2:8719:9945","crate_id":2,"name":"nth_back","span":null,"visibility":"default","docs":"Returns the `n`th element from the end of the iterator.\n\nThis is essentially the reversed version of [`Iterator::nth()`].\nAlthough like most indexing operations, the count starts from zero, so\n`nth_back(0)` returns the first value from the end, `nth_back(1)` the\nsecond, and so on.\n\nNote that all elements between the end and the returned element will be\nconsumed, including the returned element. This also means that calling\n`nth_back(0)` multiple times on the same iterator will return different\nelements.\n\n`nth_back()` will return [`None`] if `n` is greater than or equal to the\nlength of the iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\nassert_eq!(a.iter().nth_back(2), Some(&1));\n```\n\nCalling `nth_back()` multiple times doesn't rewind the iterator:\n\n```\nlet a = [1, 2, 3];\n\nlet mut iter = a.iter();\n\nassert_eq!(iter.nth_back(1), Some(&2));\nassert_eq!(iter.nth_back(1), None);\n```\n\nReturning `None` if there are less than `n + 1` elements:\n\n```\nlet a = [1, 2, 3];\nassert_eq!(a.iter().nth_back(10), None);\n```","links":{"`Iterator::nth()`":"2:8886:9952","`None`":"2:47811:177"},"attrs":["#[stable(feature = \"iter_nth_back\", since = \"1.37.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3207-0:4713:1665":{"id":"b:2:3207-0:4713:1665","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4713:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3209:688"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:632:415":{"id":"0:632:415","crate_id":0,"name":"clone","span":{"filename":"src/builder/arg_group.rs","begin":[630,4],"end":[640,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6178:8607":{"id":"5:6178:8607","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8479:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8479:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4309":{"id":"0:4309","crate_id":0,"name":null,"span":{"filename":"src/builder/possible_value.rs","begin":[29,32],"end":[29,41]},"visibility":{"restricted":{"parent":"0:1203:2254","path":"::builder::possible_value"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:3378:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:4294:1679","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3213-0:4707:2393":{"id":"b:2:3213-0:4707:2393","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3183:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AnyValueId","id":"0:4707:2393","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3216:128","2:3217:1436"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:902:5597":{"id":"0:902:5597","crate_id":0,"name":"visible_short_flag_aliases","span":{"filename":"src/builder/command.rs","begin":[2659,4],"end":[2665,5]},"visibility":"public","docs":"Add aliases, which function as *visible* short flag subcommands.\n\nSee [`Command::short_flag_aliases`].\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg, };\nlet m = Command::new(\"myprog\")\n            .subcommand(Command::new(\"test\").short_flag('b')\n                .visible_short_flag_aliases(&['t']))\n            .get_matches_from(vec![\"myprog\", \"-t\"]);\nassert_eq!(m.subcommand_name(), Some(\"test\"));\n```\n[`App::short_flag_aliases`]: Command::short_flag_aliases()","links":{"`Command::short_flag_aliases`":"0:894:4790"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["names",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"char"}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3218-0:3389:1676":{"id":"b:2:3218-0:3389:1676","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:3389:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3221:128","2:3222:1435"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4812:415":{"id":"0:4812:415","crate_id":0,"name":"clone","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1800,9],"end":[1800,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:4806:1682","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13743:2031":{"id":"2:13743:2031","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"self::pattern":"2:13336:8923","prim@char":"1:15876:8642"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13346:8917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:411:2845":{"id":"0:411:2845","crate_id":0,"name":"help_heading","span":{"filename":"src/builder/arg.rs","begin":[2799,4],"end":[2805,5]},"visibility":"public","docs":"Override the [current] help section.\n\n[current]: crate::Command::help_heading","links":{"crate::Command::help_heading":"0:872:2845"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["heading",{"kind":"generic","inner":"O"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"O"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5917:8922":{"id":"5:5917:8922","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5919:184","5:5920:1867"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:3382:225-0:4404:2276":{"id":"a:2:3382:225-0:4404:2276","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PathBufValueParser","id":"0:4404:2276","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3919":{"id":"0:3919","crate_id":0,"name":null,"span":{"filename":"src/builder/arg_group.rs","begin":[80,25],"end":[80,34]},"visibility":{"restricted":{"parent":"0:597:2251","path":"::builder::arg_group"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:3378:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3904:1662","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:8679:7847":{"id":"2:8679:7847","crate_id":2,"name":"IntoIter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"I"}}},"2:32195:1551":{"id":"2:32195:1551","crate_id":2,"name":"wrapping_sub","span":null,"visibility":"public","docs":"Wrapping (modular) subtraction. Computes `self - rhs`,\nwrapping around at the boundary of the type.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(100u64.wrapping_sub(100), 0);\nassert_eq!(100u64.wrapping_sub(u64::MAX), 101);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1592:1671":{"id":"0:1592:1671","crate_id":0,"name":"Parser","span":{"filename":"src/builder/value_parser.rs","begin":[1994,4],"end":[1994,44]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:4427:2261","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i64"}}],"bindings":[]}}}}}},"0:1398:930":{"id":"0:1398:930","crate_id":0,"name":"new","span":{"filename":"src/builder/value_parser.rs","begin":[814,4],"end":[816,5]},"visibility":"public","docs":"Implementation for [`ValueParser::path_buf`]","links":{"`ValueParser::path_buf`":"0:1315:6634"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:791:4944":{"id":"0:791:4944","crate_id":0,"name":"get_matches_mut","span":{"filename":"src/builder/command.rs","begin":[534,4],"end":[537,5]},"visibility":"public","docs":"Parse [`env::args_os`], exiting on failure.\n\nLike [`App::get_matches`] but doesn't consume the `Command`.\n\n# Panics\n\nIf contradictory arguments or settings exist.\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg};\nlet mut cmd = Command::new(\"myprog\")\n    // Args and options go here...\n    ;\nlet matches = cmd.get_matches_mut();\n```\n[`env::args_os`]: std::env::args_os()\n[`App::get_matches`]: Command::get_matches()","links":{"Command::get_matches()":"0:790:2104","std::env::args_os()":"1:2425:4939"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4713:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1875:678":{"id":"0:1875:678","crate_id":0,"name":"format","span":{"filename":"src/error/mod.rs","begin":[83,4],"end":[90,5]},"visibility":"public","docs":"Format the existing message with the Command's context","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["cmd",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Command","id":"0:755:1660","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:9156:9020":{"id":"2:9156:9020","crate_id":2,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:343:3106":{"id":"0:343:3106","crate_id":0,"name":"max_occurrences","span":{"filename":"src/builder/arg.rs","begin":[836,4],"end":[843,5]},"visibility":"public","docs":"Deprecated, for flags, this is replaced with `RangedI64ValueParser::range`\n\nDerive: `#[clap(action = ArgAction::Count, value_parser = value_parser!(u8).range(..max))]`\n\nBuilder: `arg.action(ArgAction::Count).value_parser(value_parser!(u8).range(..max))`","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["qty",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:9140:21759":{"id":"1:9140:21759","crate_id":1,"name":"floor","span":null,"visibility":"default","docs":"Returns the largest integer value less than or equal to each lane.","links":{},"attrs":["#[must_use =\n\"method returns a new vector and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1577:1671":{"id":"0:1577:1671","crate_id":0,"name":"Parser","span":{"filename":"src/builder/value_parser.rs","begin":[1954,4],"end":[1954,43]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:4427:2261","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i8"}}],"bindings":[]}}}}}},"0:4725":{"id":"0:4725","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[67,32],"end":[67,41]},"visibility":{"restricted":{"parent":"0:2092:7461","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:3378:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4713:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3539:1250":{"id":"2:3539:1250","crate_id":2,"name":"shl_assign","span":null,"visibility":"default","docs":"Performs the `<<=` operation.\n\n# Examples\n\n```\nlet mut x: u8 = 5;\nx <<= 1;\nassert_eq!(x, 10);\n\nlet mut x: u8 = 1;\nx <<= 1;\nassert_eq!(x, 2);\n```","links":{},"attrs":["#[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["rhs",{"kind":"generic","inner":"Rhs"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:3243:6034":{"id":"0:3243:6034","crate_id":0,"name":"key","span":{"filename":"src/util/fnv.rs","begin":[17,4],"end":[21,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3370:216-0:4796:1683":{"id":"a:2:3370:216-0:4796:1683","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsValues","id":"0:4796:1683","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1558:2266":{"id":"0:1558:2266","crate_id":0,"name":"ValueParserFactory","span":{"filename":"src/builder/value_parser.rs","begin":[1911,0],"end":[1920,1]},"visibility":"public","docs":"Register a type with [value_parser!][crate::value_parser!]\n\n# Example\n\n```rust\n#[derive(Copy, Clone, Debug)]\npub struct Custom(u32);\n\nimpl clap::builder::ValueParserFactory for Custom {\n    type Parser = CustomValueParser;\n    fn value_parser() -> Self::Parser {\n        CustomValueParser\n    }\n}\n\n#[derive(Clone, Debug)]\npub struct CustomValueParser;\nimpl clap::builder::TypedValueParser for CustomValueParser {\n    type Value = Custom;\n\n    fn parse_ref(\n        &self,\n        cmd: &clap::Command,\n        arg: Option<&clap::Arg>,\n        value: &std::ffi::OsStr,\n    ) -> Result<Self::Value, clap::Error> {\n        let inner = clap::value_parser!(u32);\n        let val = inner.parse_ref(cmd, arg, value)?;\n        Ok(Custom(val))\n    }\n}\n\nlet parser: CustomValueParser = clap::value_parser!(Custom);\n```","links":{"crate::value_parser!":"0:1621:2257"},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:1559:1671","0:1560:2257"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:1561","0:1564","0:1567","0:1570","0:1573","0:1576","0:1579","0:1582","0:1585","0:1588","0:1591","0:1594"]}},"0:1521:59":{"id":"0:1521:59","crate_id":0,"name":"default","span":{"filename":"src/builder/value_parser.rs","begin":[1644,4],"end":[1646,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9533:7458-0:4713:1665":{"id":"a:2:9533:7458-0:4713:1665","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:9533:7458","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4713:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"0:4419:667":{"id":"0:4419:667","crate_id":0,"name":"fmt","span":{"filename":"src/builder/value_parser.rs","begin":[912,16],"end":[912,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10511:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:477:1943":{"id":"0:477:1943","crate_id":0,"name":"get_long","span":{"filename":"src/builder/arg.rs","begin":[4468,4],"end":[4470,5]},"visibility":"public","docs":"Get the long option name for this argument, if any","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:4104-0:4427:2261":{"id":"b:2:4104-0:4427:2261","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:4102:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:4427:2261","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:4106:1449"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:9533:7458-0:3351:1659":{"id":"a:2:9533:7458-0:3351:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:9533:7458","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgAction","id":"0:3351:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:5:848-0:4457:2273":{"id":"b:5:848-0:4457:2273","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:844:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FalseyValueParser","id":"0:4457:2273","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:850:4342","5:851:4983","5:852:9984"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1563:2257":{"id":"0:1563:2257","crate_id":0,"name":"value_parser","span":{"filename":"src/builder/value_parser.rs","begin":[1923,4],"end":[1925,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"qualified_path","inner":{"name":"Parser","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:1558:2266","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1528:6597":{"id":"0:1528:6597","crate_id":0,"name":"Value","span":{"filename":"src/builder/value_parser.rs","begin":[1711,4],"end":[1711,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"primitive","inner":"bool"}}},"2:9123:801":{"id":"2:9123:801","crate_id":2,"name":"le","span":null,"visibility":"default","docs":"Determines if the elements of this [`Iterator`] are [lexicographically](Ord#lexicographical-comparison)\nless or equal to those of another.\n\n# Examples\n\n```\nassert_eq!([1].iter().le([1].iter()), true);\nassert_eq!([1].iter().le([1, 2].iter()), true);\nassert_eq!([1, 2].iter().le([1].iter()), false);\nassert_eq!([1, 2].iter().le([1, 2].iter()), true);\n```","links":{"Ord#lexicographical-comparison":"2:2956:180","`Iterator`":"2:8873:159"},"attrs":["#[stable(feature = \"iter_order\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"I"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"PartialOrd","id":"2:2969:187","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"IntoIterator","id":"2:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3472:272":{"id":"2:3472:272","crate_id":2,"name":"add_assign","span":null,"visibility":"default","docs":"Performs the `+=` operation.\n\n# Example\n\n```\nlet mut x: u32 = 12;\nx += 1;\nassert_eq!(x, 13);\n```","links":{},"attrs":["#[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["rhs",{"kind":"generic","inner":"Rhs"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:920:5829":{"id":"0:920:5829","crate_id":0,"name":"get_display_name","span":{"filename":"src/builder/command.rs","begin":[3305,4],"end":[3307,5]},"visibility":"public","docs":"Get the name of the binary.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:32188:69452":{"id":"2:32188:69452","crate_id":2,"name":"saturating_add_signed","span":null,"visibility":"public","docs":"Saturating addition with a signed integer. Computes `self + rhs`,\nsaturating at the numeric bounds instead of overflowing.\n\n# Examples\n\nBasic usage:\n\n```\n# #![feature(mixed_integer_ops)]\nassert_eq!(1u64.saturating_add_signed(2), 3);\nassert_eq!(1u64.saturating_add_signed(-2), 0);\nassert_eq!((u64::MAX - 2).saturating_add_signed(4), u64::MAX);\n```","links":{},"attrs":["#[unstable(feature = \"mixed_integer_ops\", issue = \"87840\")]","#[rustc_const_unstable(feature = \"mixed_integer_ops\", issue = \"87840\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"i64"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3213-0:4828:1684":{"id":"b:2:3213-0:4828:1684","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3183:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4828:1684","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3216:128","2:3217:1436"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:9088:4072":{"id":"2:9088:4072","crate_id":2,"name":"copied","span":null,"visibility":"default","docs":"Creates an iterator which copies all of its elements.\n\nThis is useful when you have an iterator over `&T`, but you need an\niterator over `T`.\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\n\nlet v_copied: Vec<_> = a.iter().copied().collect();\n\n// copied is the same as .map(|&x| x)\nlet v_map: Vec<_> = a.iter().map(|&x| x).collect();\n\nassert_eq!(v_copied, vec![1, 2, 3]);\nassert_eq!(v_map, vec![1, 2, 3]);\n```","links":{},"attrs":["#[stable(feature = \"iter_copied\", since = \"1.36.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Copied","id":"2:46926:9047","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'a"},{"trait_bound":{"trait":{"name":"Copy","id":"2:3380:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4570:177":{"id":"0:4570:177","crate_id":0,"name":"None","span":{"filename":"src/error/context.rs","begin":[46,4],"end":[46,8]},"visibility":"default","docs":"[`ContextKind`] is self-sufficient, no additional information needed","links":{"`ContextKind`":"0:4523:6999"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"0:870:5054":{"id":"0:870:5054","crate_id":0,"name":"global_setting","span":{"filename":"src/builder/command.rs","begin":[1865,4],"end":[1869,5]},"visibility":"public","docs":"Apply a setting for the current command and all subcommands.\n\nSee [`Command::setting`] to apply a setting only to this command.\n\nSee [`AppSettings`] for a full list of possibilities and examples.\n\n# Examples\n\n```no_run\n# use clap::{Command, AppSettings};\nCommand::new(\"myprog\")\n    .global_setting(AppSettings::AllowNegativeNumbers)\n# ;\n```","links":{"`Command::setting`":"0:866:2010","`AppSettings`":"0:3389:1676"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["setting",{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:3389:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4022:415":{"id":"0:4022:415","crate_id":0,"name":"clone","span":{"filename":"src/builder/arg_settings.rs","begin":[32,33],"end":[32,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"ArgSettings","id":"0:3968:1678","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:14545:26904":{"id":"2:14545:26904","crate_id":2,"name":"allocate","span":null,"visibility":"default","docs":"Attempts to allocate a block of memory.\n\nOn success, returns a [`NonNull<[u8]>`][NonNull] meeting the size and alignment guarantees of `layout`.\n\nThe returned block may have a larger size than specified by `layout.size()`, and may or may\nnot have its contents initialized.\n\n# Errors\n\nReturning `Err` indicates that either memory is exhausted or `layout` does not meet\nallocator's size or alignment constraints.\n\nImplementations are encouraged to return `Err` on memory exhaustion rather than panicking or\naborting, but this is not a strict requirement. (Specifically: it is *legal* to implement\nthis trait atop an underlying native allocation library that aborts on memory exhaustion.)\n\nClients wishing to abort computation in response to an allocation error are encouraged to\ncall the [`handle_alloc_error`] function, rather than directly invoking `panic!` or similar.\n\n[`handle_alloc_error`]: ../../alloc/alloc/fn.handle_alloc_error.html","links":{"NonNull":"2:2391:9139"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["layout",{"kind":"resolved_path","inner":{"name":"Layout","id":"2:50749:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"NonNull","id":"2:2391:9139","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"AllocError","id":"2:50778:10147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1735":{"id":"0:1735","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[37,0],"end":[37,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"value_parser::RangedU64ValueParser","name":"RangedU64ValueParser","id":"0:4439:2262","glob":false}},"0:882:5492":{"id":"0:882:5492","crate_id":0,"name":"allow_missing_positional","span":{"filename":"src/builder/command.rs","begin":[2274,4],"end":[2280,5]},"visibility":"public","docs":"Allows one to implement two styles of CLIs where positionals can be used out of order.\n\nThe first example is a CLI where the second to last positional argument is optional, but\nthe final positional argument is required. Such as `$ prog [optional] <required>` where one\nof the two following usages is allowed:\n\n* `$ prog [optional] <required>`\n* `$ prog <required>`\n\nThis would otherwise not be allowed. This is useful when `[optional]` has a default value.\n\n**Note:** when using this style of \"missing positionals\" the final positional *must* be\n[required] if `--` will not be used to skip to the final positional argument.\n\n**Note:** This style also only allows a single positional argument to be \"skipped\" without\nthe use of `--`. To skip more than one, see the second example.\n\nThe second example is when one wants to skip multiple optional positional arguments, and use\nof the `--` operator is OK (but not required if all arguments will be specified anyways).\n\nFor example, imagine a CLI which has three positional arguments `[foo] [bar] [baz]...` where\n`baz` accepts multiple values (similar to man `ARGS...` style training arguments).\n\nWith this setting the following invocations are posisble:\n\n* `$ prog foo bar baz1 baz2 baz3`\n* `$ prog foo -- baz1 baz2 baz3`\n* `$ prog -- baz1 baz2 baz3`\n\n# Examples\n\nStyle number one from above:\n\n```rust\n# use clap::{Command, Arg};\n// Assume there is an external subcommand named \"subcmd\"\nlet m = Command::new(\"myprog\")\n    .allow_missing_positional(true)\n    .arg(Arg::new(\"arg1\"))\n    .arg(Arg::new(\"arg2\")\n        .required(true))\n    .get_matches_from(vec![\n        \"prog\", \"other\"\n    ]);\n\nassert_eq!(m.value_of(\"arg1\"), None);\nassert_eq!(m.value_of(\"arg2\"), Some(\"other\"));\n```\n\nNow the same example, but using a default value for the first optional positional argument\n\n```rust\n# use clap::{Command, Arg};\n// Assume there is an external subcommand named \"subcmd\"\nlet m = Command::new(\"myprog\")\n    .allow_missing_positional(true)\n    .arg(Arg::new(\"arg1\")\n        .default_value(\"something\"))\n    .arg(Arg::new(\"arg2\")\n        .required(true))\n    .get_matches_from(vec![\n        \"prog\", \"other\"\n    ]);\n\nassert_eq!(m.value_of(\"arg1\"), Some(\"something\"));\nassert_eq!(m.value_of(\"arg2\"), Some(\"other\"));\n```\n\nStyle number two from above:\n\n```rust\n# use clap::{Command, Arg};\n// Assume there is an external subcommand named \"subcmd\"\nlet m = Command::new(\"myprog\")\n    .allow_missing_positional(true)\n    .arg(Arg::new(\"foo\"))\n    .arg(Arg::new(\"bar\"))\n    .arg(Arg::new(\"baz\").takes_value(true).multiple_values(true))\n    .get_matches_from(vec![\n        \"prog\", \"foo\", \"bar\", \"baz1\", \"baz2\", \"baz3\"\n    ]);\n\nassert_eq!(m.value_of(\"foo\"), Some(\"foo\"));\nassert_eq!(m.value_of(\"bar\"), Some(\"bar\"));\nassert_eq!(m.values_of(\"baz\").unwrap().collect::<Vec<_>>(), &[\"baz1\", \"baz2\", \"baz3\"]);\n```\n\nNow nofice if we don't specify `foo` or `baz` but use the `--` operator.\n\n```rust\n# use clap::{Command, Arg};\n// Assume there is an external subcommand named \"subcmd\"\nlet m = Command::new(\"myprog\")\n    .allow_missing_positional(true)\n    .arg(Arg::new(\"foo\"))\n    .arg(Arg::new(\"bar\"))\n    .arg(Arg::new(\"baz\").takes_value(true).multiple_values(true))\n    .get_matches_from(vec![\n        \"prog\", \"--\", \"baz1\", \"baz2\", \"baz3\"\n    ]);\n\nassert_eq!(m.value_of(\"foo\"), None);\nassert_eq!(m.value_of(\"bar\"), None);\nassert_eq!(m.values_of(\"baz\").unwrap().collect::<Vec<_>>(), &[\"baz1\", \"baz2\", \"baz3\"]);\n```\n\n[required]: crate::Arg::required()","links":{"crate::Arg::required()":"0:337:1948"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5071:2047":{"id":"0:5071:2047","crate_id":0,"name":"Auto","span":{"filename":"src/util/color.rs","begin":[21,4],"end":[21,8]},"visibility":"default","docs":"Enables colored output only when the output is going to a terminal or TTY.\n\n**NOTE:** This is the default behavior of `clap`.\n\n# Platform Specific\n\nThis setting only applies to Unix, Linux, and macOS (i.e. non-Windows platforms).\n\n# Examples\n\n ```no_run\n# use clap::{Command, ColorChoice};\nCommand::new(\"myprog\")\n    .color(ColorChoice::Auto)\n    .get_matches();\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"2:3177:150":{"id":"2:3177:150","crate_id":2,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3179:2391"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:9138:9982":{"id":"2:9138:9982","crate_id":2,"name":"is_sorted_by_key","span":null,"visibility":"default","docs":"Checks if the elements of this iterator are sorted using the given key extraction\nfunction.\n\nInstead of comparing the iterator's elements directly, this function compares the keys of\nthe elements, as determined by `f`. Apart from that, it's equivalent to [`is_sorted`]; see\nits documentation for more information.\n\n[`is_sorted`]: Iterator::is_sorted\n\n# Examples\n\n```\n#![feature(is_sorted)]\n\nassert!([\"c\", \"bb\", \"aaa\"].iter().is_sorted_by_key(|s| s.len()));\nassert!(![-2i32, -1, 0, 3].iter().is_sorted_by_key(|n| n.abs()));\n```","links":{"Iterator::is_sorted":"2:9129:9980"},"attrs":["#[unstable(feature = \"is_sorted\", reason = \"new API\", issue = \"53485\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3624:132","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"output":{"kind":"generic","inner":"K"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"PartialOrd","id":"2:2969:187","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1572:2257":{"id":"0:1572:2257","crate_id":0,"name":"value_parser","span":{"filename":"src/builder/value_parser.rs","begin":[1941,4],"end":[1943,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"qualified_path","inner":{"name":"Parser","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:1558:2266","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4391:415":{"id":"0:4391:415","crate_id":0,"name":"clone","span":{"filename":"src/builder/value_hint.rs","begin":[27,43],"end":[27,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:4351:1680","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1932:688":{"id":"0:1932:688","crate_id":0,"name":"from","span":{"filename":"src/error/mod.rs","begin":[995,4],"end":[997,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["e",{"kind":"resolved_path","inner":{"name":"fmt::Error","id":"2:48872:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3203-0:4463:2271":{"id":"b:2:3203-0:4463:2271","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BoolishValueParser","id":"0:4463:2271","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3206:2391"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4650:7011":{"id":"0:4650:7011","crate_id":0,"name":"info","span":{"filename":"src/error/mod.rs","begin":[53,4],"end":[53,25]},"visibility":"public","docs":"Deprecated, replaced with [`Error::context()`]","links":{"`Error::context()`":"0:1877:488"},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7898:240","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:8479:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},"0:201:2106":{"id":"0:201:2106","crate_id":0,"name":"from_arg_matches_mut","span":{"filename":"src/derive.rs","begin":[542,4],"end":[544,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["matches",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4713:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4647:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6334:28896":{"id":"1:6334:28896","crate_id":1,"name":"into_pthread_t","span":null,"visibility":"default","docs":"Consumes the thread, returning the raw pthread_t\n\nThis function **transfers ownership** of the underlying pthread_t to\nthe caller. Callers are then the unique owners of the pthread_t and\nmust either detach or join the pthread_t once it's no longer needed.","links":{},"attrs":["#[stable(feature = \"thread_extensions\", since = \"1.9.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:495:4217":{"id":"0:495:4217","crate_id":0,"name":"is_required_set","span":{"filename":"src/builder/arg.rs","begin":[4641,4],"end":[4643,5]},"visibility":"public","docs":"Reports whether [`Arg::required`] is set","links":{"`Arg::required`":"0:337:1948"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23108:21797":{"id":"2:23108:21797","crate_id":2,"name":"Scalar","span":null,"visibility":"default","docs":"Scalar type contained by this SIMD vector type.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"b:2:3207-0:4241:1674":{"id":"b:2:3207-0:4241:1674","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:4241:1674","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":["2:3209:688"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3663:243":{"id":"2:3663:243","crate_id":2,"name":"Yield","span":null,"visibility":"default","docs":"The type of value this generator yields.\n\nThis associated type corresponds to the `yield` expression and the\nvalues which are allowed to be returned each time a generator yields.\nFor example an iterator-as-a-generator would likely have this type as\n`T`, the type being iterated over.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"0:4013:3078":{"id":"0:4013:3078","crate_id":0,"name":"Exclusive","span":{"filename":"src/builder/arg_settings.rs","begin":[495,4],"end":[495,13]},"visibility":"default","docs":"Deprecated, replaced with [`Arg::exclusive`] and [`Arg::is_exclusive_set`]\n\nDerive: replace `#[clap(setting = Exclusive)]` with `#[clap(exclusive = true)]`\n\nBuilder: replace `arg.setting(Exclusive)` with `arg.exclusive(true)`","links":{"`Arg::is_exclusive_set`":"0:517:4265","`Arg::exclusive`":"0:340:3077"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"a:2:9533:7458-0:4420:2260":{"id":"a:2:9533:7458-0:4420:2260","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:9533:7458","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValuesParser","id":"0:4420:2260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:7595:10589":{"id":"1:7595:10589","crate_id":1,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7596:21580"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1777":{"id":"0:1777","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[51,0],"end":[51,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"value_parser::PathBufValueParser","name":"PathBufValueParser","id":"0:4404:2276","glob":false}},"b:5:848-0:4439:2262":{"id":"b:5:848-0:4439:2262","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:844:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangedU64ValueParser","id":"0:4439:2262","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["5:850:4342","5:851:4983","5:852:9984"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1741":{"id":"0:1741","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[39,0],"end":[39,39]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"value_parser::TypedValueParser","name":"TypedValueParser","id":"0:1362:2264","glob":false}},"b:2:3213-0:4469:2274":{"id":"b:2:3213-0:4469:2274","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3183:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"NonEmptyStringValueParser","id":"0:4469:2274","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3216:128","2:3217:1436"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:10846:147":{"id":"2:10846:147","crate_id":2,"name":"Hasher","span":null,"visibility":"default","docs":"Type of the hasher that will be created.","links":{},"attrs":["#[stable(since = \"1.7.0\", feature = \"build_hasher\")]"],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Hasher","id":"2:10810:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null}},"2:9042:4377":{"id":"2:9042:4377","crate_id":2,"name":"max","span":null,"visibility":"default","docs":"Returns the maximum element of an iterator.\n\nIf several elements are equally maximum, the last element is\nreturned. If the iterator is empty, [`None`] is returned.\n\nNote that [`f32`]/[`f64`] doesn't implement [`Ord`] due to NaN being\nincomparable. You can work around this by using [`Iterator::reduce`]:\n```\nassert_eq!(\n    [2.4, f32::NAN, 1.3]\n        .into_iter()\n        .reduce(f32::max)\n        .unwrap(),\n    2.4\n);\n```\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\nlet b: Vec<u32> = Vec::new();\n\nassert_eq!(a.iter().max(), Some(&3));\nassert_eq!(b.iter().max(), None);\n```","links":{"`Ord`":"2:2956:180","`f64`":"1:15887:8650","`f32`":"1:15886:8649","`Iterator::reduce`":"2:8983:9969","`None`":"2:47811:177"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"2:2956:180","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:907:5655":{"id":"0:907:5655","crate_id":0,"name":"allow_external_subcommands","span":{"filename":"src/builder/command.rs","begin":[2832,4],"end":[2838,5]},"visibility":"public","docs":"Assume unexpected positional arguments are a [`subcommand`].\n\nArguments will be stored in the `\"\"` argument in the [`ArgMatches`]\n\n**NOTE:** Use this setting with caution,\nas a truly unexpected argument (i.e. one that is *NOT* an external subcommand)\nwill **not** cause an error and instead be treated as a potential subcommand.\nOne should check for such cases manually and inform the user appropriately.\n\n**NOTE:** A built-in subcommand will be parsed as an external subcommand when escaped with\n`--`.\n\n# Examples\n\n```rust\n# use clap::Command;\n// Assume there is an external subcommand named \"subcmd\"\nlet m = Command::new(\"myprog\")\n    .allow_external_subcommands(true)\n    .get_matches_from(vec![\n        \"myprog\", \"subcmd\", \"--option\", \"value\", \"-fff\", \"--flag\"\n    ]);\n\n// All trailing arguments will be stored under the subcommand's sub-matches using an empty\n// string argument name\nmatch m.subcommand() {\n    Some((external, ext_m)) => {\n         let ext_args: Vec<&str> = ext_m.values_of(\"\").unwrap().collect();\n         assert_eq!(external, \"subcmd\");\n         assert_eq!(ext_args, [\"--option\", \"value\", \"-fff\", \"--flag\"]);\n    },\n    _ => {},\n}\n```\n\n[`subcommand`]: crate::Command::subcommand()\n[`ArgMatches`]: crate::ArgMatches\n[`ErrorKind::UnknownArgument`]: crate::ErrorKind::UnknownArgument","links":{"crate::Command::subcommand()":"0:782:2012","crate::ArgMatches":"0:4713:1665"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4433":{"id":"0:4433","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1134,15],"end":[1134,20]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"std::convert::TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:4427:2261","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:4435:415"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:103:1913":{"id":"0:103:1913","crate_id":0,"name":"command","span":{"filename":"src/macros.rs","begin":[353,0],"end":[360,1]},"visibility":"public","docs":"Requires `cargo` feature flag to be enabled.","links":{},"attrs":["#[cfg(not(feature = \"cargo\"))]","#[macro_export]"],"deprecation":null,"kind":"macro","inner":"macro_rules! command {\n    () => { ... };\n    ($name:expr) => { ... };\n}"},"1:4486:7986":{"id":"1:4486:7986","crate_id":1,"name":"seek","span":null,"visibility":"default","docs":"Seek to an offset, in bytes, in a stream.\n\nA seek beyond the end of a stream is allowed, but behavior is defined\nby the implementation.\n\nIf the seek operation completed successfully,\nthis method returns the new position from the start of the stream.\nThat position can be used later with [`SeekFrom::Start`].\n\n# Errors\n\nSeeking can fail, for example because it might involve flushing a buffer.\n\nSeeking to a negative offset is considered an error.","links":{"`SeekFrom::Start`":"1:10936:10434"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["pos",{"kind":"resolved_path","inner":{"name":"SeekFrom","id":"1:10935:7987","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"1:3803:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:32217:69475":{"id":"2:32217:69475","crate_id":2,"name":"overflowing_shl","span":null,"visibility":"public","docs":"Shifts self left by `rhs` bits.\n\nReturns a tuple of the shifted version of self along with a boolean\nindicating whether the shift value was larger than or equal to the\nnumber of bits. If the shift value is too large, then value is\nmasked (N-1) where N is the number of bits, and this value is then\nused to perform the shift.\n\n# Examples\n\nBasic usage\n\n```\nassert_eq!(0x1u64.overflowing_shl(4), (0x10, false));\nassert_eq!(0x1u64.overflowing_shl(132), (0x10, true));\n```","links":{},"attrs":["#[stable(feature = \"wrapping\", since = \"1.7.0\")]","#[rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"u64"},{"kind":"primitive","inner":"bool"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9532:7459-0:5070:1667":{"id":"a:2:9532:7459-0:5070:1667","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:9532:7459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:5070:1667","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:3521:184":{"id":"2:3521:184","crate_id":2,"name":"Output","span":null,"visibility":"default","docs":"The resulting type after applying the `>>` operator.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"2:13741:67825":{"id":"2:13741:67825","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:50054:8941","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9533:7458-0:3389:1676":{"id":"a:2:9533:7458-0:3389:1676","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:9533:7458","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:3389:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2865-0:4404:2276":{"id":"b:2:2865-0:4404:2276","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PathBufValueParser","id":"0:4404:2276","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2867:2792"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:9130:9981":{"id":"2:9130:9981","crate_id":2,"name":"is_sorted_by","span":null,"visibility":"default","docs":"Checks if the elements of this iterator are sorted using the given comparator function.\n\nInstead of using `PartialOrd::partial_cmp`, this function uses the given `compare`\nfunction to determine the ordering of two elements. Apart from that, it's equivalent to\n[`is_sorted`]; see its documentation for more information.\n\n# Examples\n\n```\n#![feature(is_sorted)]\n\nassert!([1, 2, 2, 9].iter().is_sorted_by(|a, b| a.partial_cmp(b)));\nassert!(![1, 3, 2, 4].iter().is_sorted_by(|a, b| a.partial_cmp(b)));\nassert!([0].iter().is_sorted_by(|a, b| a.partial_cmp(b)));\nassert!(std::iter::empty::<i32>().is_sorted_by(|a, b| a.partial_cmp(b)));\nassert!(![0.0, 1.0, f32::NAN].iter().is_sorted_by(|a, b| a.partial_cmp(b)));\n```\n\n[`is_sorted`]: Iterator::is_sorted","links":{"Iterator::is_sorted":"2:9129:9980"},"attrs":["#[unstable(feature = \"is_sorted\", reason = \"new API\", issue = \"53485\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["compare",{"kind":"generic","inner":"F"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3624:132","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Ordering","id":"2:37932:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2056":{"id":"0:2056","crate_id":0,"name":null,"span":{"filename":"src/parser/error.rs","begin":[39,0],"end":[39,42]},"visibility":{"restricted":{"parent":"0:2049:1663","path":"::parser::error"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["source","description","provide","type_id","cause"],"trait":{"name":"Error","id":"2:3278:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4693:7387","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3753:6770":{"id":"2:3753:6770","crate_id":2,"name":"end_bound","span":null,"visibility":"default","docs":"End index bound.\n\nReturns the end value as a `Bound`.\n\n# Examples\n\n```\n# fn main() {\nuse std::ops::Bound::*;\nuse std::ops::RangeBounds;\n\nassert_eq!((3..).end_bound(), Unbounded);\nassert_eq!((3..10).end_bound(), Excluded(&10));\n# }\n```","links":{},"attrs":["#[stable(feature = \"collections_range\", since = \"1.28.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bound","id":"2:46298:6761","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:3442:271":{"id":"2:3442:271","crate_id":2,"name":"add","span":null,"visibility":"default","docs":"Performs the `+` operation.\n\n# Example\n\n```\nassert_eq!(12 + 1, 13);\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"generic","inner":"Rhs"}]],"output":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Add","id":"2:3439:8775","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:4707:2393":{"id":"0:4707:2393","crate_id":0,"name":"AnyValueId","span":{"filename":"src/parser/matches/any_value.rs","begin":[42,0],"end":[46,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:9533:7458-0:4707:2393","a:2:9532:7459-0:4707:2393","a:2:3382:225-0:4707:2393","a:2:3370:216-0:4707:2393","a:2:3411:6205-0:4707:2393","b:2:4104-0:4707:2393","b:2:2865-0:4707:2393","b:2:3203-0:4707:2393","b:2:3207-0:4707:2393","b:2:3218-0:4707:2393","b:2:2868-0:4707:2393","b:2:3213-0:4707:2393","b:5:848-0:4707:2393","b:23:25-0:4707:2393","0:4710","0:4711","0:2076","0:2078","0:2079","0:2081","0:2083","0:2086","0:2088"]}},"0:4018":{"id":"0:4018","crate_id":0,"name":null,"span":{"filename":"src/builder/arg_settings.rs","begin":[32,16],"end":[32,25]},"visibility":{"restricted":{"parent":"0:637:2253","path":"::builder::arg_settings"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2920:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ArgSettings","id":"0:3968:1678","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgSettings","id":"0:3968:1678","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4019:611"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4595:7077":{"id":"0:4595:7077","crate_id":0,"name":"InvalidValue","span":{"filename":"src/error/kind.rs","begin":[19,4],"end":[19,16]},"visibility":"default","docs":"Occurs when an [`Arg`][crate::Arg] has a set of possible values,\nand the user provides a value which isn't in that set.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet result = Command::new(\"prog\")\n    .arg(Arg::new(\"speed\")\n        .value_parser([\"fast\", \"slow\"]))\n    .try_get_matches_from(vec![\"prog\", \"other\"]);\nassert!(result.is_err());\nassert_eq!(result.unwrap_err().kind(), ErrorKind::InvalidValue);\n```","links":{"crate::Arg":"0:3818:1661"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"0:1409":{"id":"0:1409","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[925,0],"end":[982,1]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"crate::ValueEnum","id":"0:174:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["map","parse","possible_values"],"trait":{"name":"TypedValueParser","id":"0:1362:2264","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EnumValueParser","id":"0:4410:2272","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"items":["0:1411:6597","0:1412:6637","0:1423:3370"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:890:5537":{"id":"0:890:5537","crate_id":0,"name":"short_flag_alias","span":{"filename":"src/builder/command.rs","begin":[2409,4],"end":[2413,5]},"visibility":"public","docs":"Add an alias, which functions as  \"hidden\" short flag subcommand\n\nThis will automatically dispatch as if this subcommand was used. This is more efficient,\nand easier than creating multiple hidden subcommands as one only needs to check for the\nexistence of this command, and not all variants.\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg, };\nlet m = Command::new(\"myprog\")\n            .subcommand(Command::new(\"test\").short_flag('t')\n                .short_flag_alias('d'))\n            .get_matches_from(vec![\"myprog\", \"-d\"]);\nassert_eq!(m.subcommand_name(), Some(\"test\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["name",{"kind":"primitive","inner":"char"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3203-0:4404:2276":{"id":"b:2:3203-0:4404:2276","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PathBufValueParser","id":"0:4404:2276","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3206:2391"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:5:848-0:4398:2275":{"id":"b:5:848-0:4398:2275","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:844:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsStringValueParser","id":"0:4398:2275","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:850:4342","5:851:4983","5:852:9984"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:23112:21821":{"id":"2:23112:21821","crate_id":2,"name":"saturating_abs","span":null,"visibility":"default","docs":"Lanewise saturating absolute value, implemented in Rust.\nAs abs(), except the MIN value becomes MAX instead of itself.\n\n# Examples\n```\n# #![feature(portable_simd)]\n# #[cfg(feature = \"as_crate\")] use core_simd::simd;\n# #[cfg(not(feature = \"as_crate\"))] use core::simd;\n# use simd::{Simd, SimdInt};\nuse core::i32::{MIN, MAX};\nlet xs = Simd::from_array([MIN, -2, 0, 3]);\nlet unsat = xs.abs();\nlet sat = xs.saturating_abs();\nassert_eq!(unsat, Simd::from_array([MIN, 2, 0, 3]));\nassert_eq!(sat, Simd::from_array([MAX, 2, 0, 3]));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:518:4267":{"id":"0:518:4267","crate_id":0,"name":"is_last_set","span":{"filename":"src/builder/arg.rs","begin":[4788,4],"end":[4790,5]},"visibility":"public","docs":"Reports whether [`Arg::last`] is set","links":{"`Arg::last`":"0:336:3029"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3456:2608":{"id":"0:3456:2608","crate_id":0,"name":"NoAutoVersion","span":{"filename":"src/builder/app_settings.rs","begin":[716,4],"end":[716,17]},"visibility":"default","docs":"Deprecated, replaced with [`Arg::action`][super::Arg::action]\n\nDerive: replace `#[clap(setting = NoAutoVersion)]` with setting an explicit action on your version argument\n\nBuilder: replace `cmd.setting(NoAutoVersion)` with setting an explicit action on your version argument","links":{"super::Arg::action":"0:352:2249"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"1:4492:6993":{"id":"1:4492:6993","crate_id":1,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4493:10372","1:4494:10373","1:4495:10374","1:4497:8989","1:4498:7036","1:4500:6983","1:4501:6010"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Read","id":"1:4410:8984","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:32161:69431":{"id":"2:32161:69431","crate_id":2,"name":"from_le","span":null,"visibility":"public","docs":"Converts an integer from little endian to the target's endianness.\n\nOn little endian this is a no-op. On big endian the bytes are\nswapped.\n\n# Examples\n\nBasic usage:\n\n```\nlet n = 0x1Au64;\n\nif cfg!(target_endian = \"little\") {\n    assert_eq!(u64::from_le(n), n)\n} else {\n    assert_eq!(u64::from_le(n), n.swap_bytes())\n}\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["x",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3282:10131":{"id":"2:3282:10131","crate_id":2,"name":"cause","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note =\n\"replaced by Error::source, which can support downcasting\")]","#[allow(missing_docs)]"],"deprecation":{"since":"1.33.0","note":"replaced by Error::source, which can support downcasting"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"2:3278:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2862:98":{"id":"2:2862:98","crate_id":2,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2864:27181"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"a:2:3411:6205-0:3818:1661":{"id":"a:2:3411:6205-0:3818:1661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:3411:6205","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3818:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1319:3370":{"id":"0:1319:3370","crate_id":0,"name":"possible_values","span":{"filename":"src/builder/value_parser.rs","begin":[245,4],"end":[249,5]},"visibility":"public","docs":"Reflect on enumerated value properties\n\nError checking should not be done with this; it is mostly targeted at user-facing\napplications like errors and completion.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:2245","args":{"angle_bracketed":{"args":[{"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"resolved_path","inner":{"name":"crate::PossibleValue","id":"0:4294:1679","args":{"angle_bracketed":{"args":[{"lifetime":"'static"}],"bindings":[]}}}}}}}]}}},"generic_params":[]}],"lifetime":"'_"}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3476:1374":{"id":"2:3476:1374","crate_id":2,"name":"sub_assign","span":null,"visibility":"default","docs":"Performs the `-=` operation.\n\n# Example\n\n```\nlet mut x: u32 = 12;\nx -= 1;\nassert_eq!(x, 11);\n```","links":{},"attrs":["#[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["rhs",{"kind":"generic","inner":"Rhs"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"a:2:3411:6205-0:4693:7387":{"id":"a:2:3411:6205-0:4693:7387","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:3411:6205","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4693:7387","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2865-0:3818:1661":{"id":"b:2:2865-0:3818:1661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3818:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":["2:2867:2792"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:48":{"id":"0:48","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[113,25],"end":[113,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::builder::AppFlags","name":"AppFlags","id":"0:3375:1675","glob":false}},"2:3836:138":{"id":"2:3836:138","crate_id":2,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3838:694"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Try","id":"2:3831:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3203-0:4828:1684":{"id":"b:2:3203-0:4828:1684","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4828:1684","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3206:2391"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1344":{"id":"0:1344","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[514,0],"end":[524,1]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1294:2265","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1345:667"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:2923:917":{"id":"2:2923:917","crate_id":2,"name":"ne","span":null,"visibility":"default","docs":"This method tests for `!=`. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.","links":{},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Rhs"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2339":{"id":"0:2339","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1759,0],"end":[1763,1]},"visibility":{"restricted":{"parent":"0:2092:7461","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["advance_back_by","try_rfold","rfind","nth_back","rfold"],"trait":{"name":"DoubleEndedIterator","id":"2:8716:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsValues","id":"0:4796:1683","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:2341:7848"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:2310":{"id":"0:2310","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1681,0],"end":[1681,44]},"visibility":{"restricted":{"parent":"0:2092:7461","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"2:8741:7849","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:4778:1685","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:54":{"id":"0:54","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[113,48],"end":[113,56]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::builder::ArgFlags","name":"ArgFlags","id":"0:3954:1677","glob":false}},"0:757":{"id":"0:757","crate_id":0,"name":null,"span":{"filename":"src/builder/command.rs","begin":[117,0],"end":[893,1]},"visibility":{"restricted":{"parent":"0:649:1913","path":"::builder::command"}},"docs":"# Basic API","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:4241:1674","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":["0:759:930","0:763:1932","0:765:305","0:768:4848","0:772:4858","0:777:2011","0:779:2821","0:782:2012","0:784:4799","0:787:1937","0:788:1663","0:790:2104","0:791:4944","0:793:2112","0:794:2118","0:798:2121","0:801:4945","0:805:4994","0:806:5007","0:807:5000","0:809:5020","0:811:5031","0:812:5036","0:813:5039"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3213-0:4647:128":{"id":"b:2:3213-0:4647:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3183:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4647:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3216:128","2:3217:1436"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3754:2031":{"id":"2:3754:2031","crate_id":2,"name":"contains","span":null,"visibility":"default","docs":"Returns `true` if `item` is contained in the range.\n\n# Examples\n\n```\nassert!( (3..5).contains(&4));\nassert!(!(3..5).contains(&2));\n\nassert!( (0.0..1.0).contains(&0.5));\nassert!(!(0.0..1.0).contains(&f32::NAN));\nassert!(!(0.0..f32::NAN).contains(&0.5));\nassert!(!(f32::NAN..1.0).contains(&0.5));","links":{},"attrs":["#[stable(feature = \"range_contains\", since = \"1.35.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["item",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"U"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"PartialOrd","id":"2:2969:187","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"PartialOrd","id":"2:2969:187","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:196:2156":{"id":"0:196:2156","crate_id":0,"name":"into_app_for_update","span":{"filename":"src/derive.rs","begin":[533,4],"end":[535,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Command","id":"0:755:1660","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:494:4215":{"id":"0:494:4215","crate_id":0,"name":"is_positional","span":{"filename":"src/builder/arg.rs","begin":[4636,4],"end":[4638,5]},"visibility":"public","docs":"Checks whether this argument is a positional or not.\n\n# Examples\n\n```\n# use clap::Arg;\nlet arg = Arg::new(\"foo\");\nassert_eq!(true, arg.is_positional());\n\nlet arg = Arg::new(\"foo\").long(\"foo\");\nassert_eq!(false, arg.is_positional());\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:883":{"id":"0:883","crate_id":0,"name":null,"span":{"filename":"src/builder/command.rs","begin":[2284,0],"end":[3294,1]},"visibility":{"restricted":{"parent":"0:649:1913","path":"::builder::command"}},"docs":"# Subcommand-specific Settings","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:4241:1674","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":["0:885:4781","0:886:4780","0:888:278","0:890:5537","0:891:5542","0:892:2827","0:894:4790","0:895:4791","0:896:2940","0:898:5580","0:899:5585","0:900:2952","0:902:5597","0:903:5602","0:904:3756","0:905:3786","0:906:5633","0:907:5655","0:908:5667","0:909:5678","0:910:5702","0:911:5720","0:912:5805","0:913:4803","0:915:5825"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:2176:7618":{"id":"0:2176:7618","crate_id":0,"name":"value_of_lossy","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[442,4],"end":[447,5]},"visibility":"public","docs":"Deprecated, replaced with [`ArgMatches::get_one()`]\n\nReplace `m.value_of(...)` with `m.get_one::<String>(...).map(|s| s.as_str())`","links":{"`ArgMatches::get_one()`":"0:2161:7523"},"attrs":["#[track_caller]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Cow","id":"5:853:109","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Key","id":"0:3239:2795","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:23:25-0:4241:1674":{"id":"b:23:25-0:4241:1674","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.1/src/equivalent.rs","begin":[18,0],"end":[18,46]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2925:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Equivalent","id":"23:22:9122","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:4241:1674","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":["23:28:9116"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"Q"}}},"b:2:4104-0:4768:7385":{"id":"b:2:4104-0:4768:7385","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:4102:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawValues","id":"0:4768:7385","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:4106:1449"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:3382:225-0:4828:1684":{"id":"a:2:3382:225-0:4828:1684","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4828:1684","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4584":{"id":"0:4584","crate_id":0,"name":null,"span":{"filename":"src/error/context.rs","begin":[42,9],"end":[42,14]},"visibility":{"restricted":{"parent":"0:1854:488","path":"::error::context"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextValue","id":"0:4569:7000","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4585:415"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:74":{"id":"0:74","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[116,24],"end":[116,31]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::parser::Indices","name":"Indices","id":"0:4806:1682","glob":false}},"1:6640:11001":{"id":"1:6640:11001","crate_id":1,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6641:28863"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3207-0:3389:1676":{"id":"b:2:3207-0:3389:1676","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:3389:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3209:688"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:174:1673":{"id":"0:174:1673","crate_id":0,"name":"ValueEnum","span":{"filename":"src/derive.rs","begin":[479,0],"end":[500,1]},"visibility":"public","docs":"Parse arguments into enums.\n\nWhen deriving [`Parser`], a field whose type implements `ValueEnum` can have the attribute\n`#[clap(value_enum)]` which will\n- Call [`Arg::possible_values`][crate::Arg::possible_values]\n- Allowing using the `#[clap(default_value_t)]` attribute without implementing `Display`.\n\nSee the [derive reference](crate::_derive) for attributes and best practices.\n\n**NOTE:** Deriving requires the [`derive` feature flag][crate::_features]\n\n# Example\n\n ```ignore\n#[derive(clap::Parser)]\nstruct Args {\n    #[clap(value_enum)]\n    level: Level,\n}\n\n#[derive(clap::ValueEnum, Clone)]\nenum Level {\n    Debug,\n    Info,\n    Warning,\n    Error,\n}\n```","links":{"crate::Arg::possible_values":"0:378:3370","`Parser`":"0:127:1671"},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:175:2232","0:177:1862","0:180:2238"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:2:4104-0:3968:1678":{"id":"b:2:4104-0:3968:1678","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:4102:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgSettings","id":"0:3968:1678","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:4106:1449"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1405:59":{"id":"0:1405:59","crate_id":0,"name":"default","span":{"filename":"src/builder/value_parser.rs","begin":[850,4],"end":[852,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3218-0:3351:1659":{"id":"b:2:3218-0:3351:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgAction","id":"0:3351:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3221:128","2:3222:1435"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3375:2100":{"id":"2:3375:2100","crate_id":2,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:4572:6576":{"id":"0:4572:6576","crate_id":0,"name":"Bool","span":{"filename":"src/error/context.rs","begin":[48,4],"end":[48,14]},"visibility":"default","docs":"A single value","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":["0:4574:1564"]}},"0:105:1932":{"id":"0:105:1932","crate_id":0,"name":"arg","span":{"filename":"src/macros.rs","begin":[761,0],"end":[774,1]},"visibility":"public","docs":"Create an [`Arg`] from a usage string.\n\nAllows creation of basic settings for the [`Arg`].\n\n**NOTE**: Not all settings may be set using the usage string method. Some properties are\nonly available via the builder pattern.\n\n# Syntax\n\nUsage strings typically following the form:\n\n```notrust\n[explicit name] [short] [long] [value names] [...] [help string]\n```\n\n### Explicit Name\n\nThe name may be either a bare-word or a string, followed by a `:`, like `name:` or\n`\"name\":`.\n\n*Note:* This is an optional field, if it's omitted the argument will use one of the additional\nfields as the name using the following priority order:\n\n 1. Explicit Name\n 2. Long\n 3. Value Name\n\nSee [`Arg::name`][crate::Arg::name].\n\n### Short\n\nA short flag is a `-` followed by either a bare-character or quoted character, like `-f` or\n`-'f'`.\n\nSee [`Arg::short`][crate::Arg::short].\n\n### Long\n\nA long flag is a `--` followed by either a bare-word or a string, like `--foo` or\n`--\"foo\"`.\n\nSee [`Arg::long`][crate::Arg::long].\n\n### Values (Value Notation)\n\nThis is set by placing bare-word between:\n- `[]` like `[FOO]`\n  - Positional argument: optional\n  - Named argument: optional value\n- `<>` like `<FOO>`: required\n\nSee [`Arg::value_name`][crate::Arg::value_name].\n\n### `...`\n\n`...` (three consecutive dots/periods) specifies that this argument may occur multiple\ntimes (not to be confused with multiple values per occurrence).\n\nSee [`Arg::multiple_occurrences`][crate::Arg::multiple_occurrences].\n\n### Help String\n\nThe help string is denoted between a pair of double quotes `\"\"` and may contain any\ncharacters.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, arg};\nCommand::new(\"prog\")\n    .args(&[\n        arg!(--config <FILE> \"a required file for the configuration and no short\"),\n        arg!(-d --debug ... \"turns on debugging information and allows multiples\"),\n        arg!([input] \"an optional input file to use\")\n])\n# ;\n```\n[`Arg`]: ./struct.Arg.html","links":{"crate::Arg::name":"0:318:909","crate::Arg::value_name":"0:359:1945","crate::Arg::long":"0:321:1933","crate::Arg::multiple_occurrences":"0:342:1954","crate::Arg::short":"0:320:1942"},"attrs":["#[macro_export]"],"deprecation":null,"kind":"macro","inner":"macro_rules! arg {\n    ( $name:ident: $($tail:tt)+ ) => { ... };\n    ( $($tail:tt)+ ) => { ... };\n}"},"1:5504:28814":{"id":"1:5504:28814","crate_id":1,"name":"write_all_at","span":null,"visibility":"default","docs":"Attempts to write an entire buffer starting from a given offset.\n\nThe offset is relative to the start of the file and thus independent\nfrom the current cursor.\n\nThe current file cursor is not affected by this function.\n\nThis method will continuously call [`write_at`] until there is no more data\nto be written or an error of non-[`io::ErrorKind::Interrupted`] kind is\nreturned. This method will not return until the entire buffer has been\nsuccessfully written or such an error occurs. The first error that is\nnot of [`io::ErrorKind::Interrupted`] kind generated from this method will be\nreturned.\n\n# Errors\n\nThis function will return the first error of\nnon-[`io::ErrorKind::Interrupted`] kind that [`write_at`] returns.\n\n[`write_at`]: FileExt::write_at\n\n# Examples\n\n```no_run\nuse std::fs::File;\nuse std::io;\nuse std::os::unix::prelude::FileExt;\n\nfn main() -> io::Result<()> {\n    let file = File::open(\"foo.txt\")?;\n\n    // We now write at the offset 10.\n    file.write_all_at(b\"sushi\", 10)?;\n    Ok(())\n}\n```","links":{"FileExt::write_at":"1:5503:28813","`io::ErrorKind::Interrupted`":"1:10863:14188"},"attrs":["#[stable(feature = \"rw_exact_all_at\", since = \"1.33.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["offset",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"1:3803:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3918:667":{"id":"0:3918:667","crate_id":0,"name":"fmt","span":{"filename":"src/builder/arg_group.rs","begin":[80,18],"end":[80,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10511:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2444":{"id":"0:2444","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/mod.rs","begin":[7,0],"end":[7,31]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"arg_matches::RawValues","name":"RawValues","id":"0:4768:7385","glob":false}},"a:2:3382:225-0:3968:1678":{"id":"a:2:3382:225-0:3968:1678","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgSettings","id":"0:3968:1678","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3408:2471":{"id":"0:3408:2471","crate_id":0,"name":"InferSubcommands","span":{"filename":"src/builder/app_settings.rs","begin":[248,4],"end":[248,20]},"visibility":"default","docs":"Deprecated, replaced with [`Command::infer_subcommands`]\n\nDerive: replace `#[clap(setting = InferSubcommands)]` with `#[clap(infer_subcommands = true)]`\n\nBuilder: replace `cmd.setting(InferSubcommands)` with `cmd.infer_subcommands(true)`","links":{"`Command::infer_subcommands`":"0:833:5174"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"0:4583:1564":{"id":"0:4583:1564","crate_id":0,"name":"0","span":{"filename":"src/error/context.rs","begin":[54,11],"end":[54,16]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"primitive","inner":"isize"}},"2:32234:69490":{"id":"2:32234:69490","crate_id":2,"name":"to_le_bytes","span":null,"visibility":"public","docs":"Return the memory representation of this integer as a byte array in\nlittle-endian byte order.\n\n\n\n# Examples\n\n```\nlet bytes = 0x1234567890123456u64.to_le_bytes();\nassert_eq!(bytes, [0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]);\n```","links":{},"attrs":["#[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]","#[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"array","inner":{"type":{"kind":"primitive","inner":"u8"},"len":"8"}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1534:3370":{"id":"0:1534:3370","crate_id":0,"name":"possible_values","span":{"filename":"src/builder/value_parser.rs","begin":[1735,4],"end":[1739,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:2245","args":{"angle_bracketed":{"args":[{"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"resolved_path","inner":{"name":"crate::PossibleValue","id":"0:4294:1679","args":{"angle_bracketed":{"args":[{"lifetime":"'static"}],"bindings":[]}}}}}}}]}}},"generic_params":[]}],"lifetime":"'_"}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6638:10988":{"id":"1:6638:10988","crate_id":1,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6639:28858"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:4578:7067":{"id":"0:4578:7067","crate_id":0,"name":"Strings","span":{"filename":"src/error/context.rs","begin":[52,4],"end":[52,24]},"visibility":"default","docs":"Many values","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":["0:4580:1564"]}},"0:128:2102":{"id":"0:128:2102","crate_id":0,"name":"parse","span":{"filename":"src/derive.rs","begin":[80,4],"end":[92,5]},"visibility":"default","docs":"Parse from `std::env::args_os()`, exit on error","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3370:216-0:4713:1665":{"id":"a:2:3370:216-0:4713:1665","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4713:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:6215:2821":{"id":"1:6215:2821","crate_id":1,"name":"groups","span":null,"visibility":"default","docs":"Sets the supplementary group IDs for the calling process. Translates to\na `setgroups` call in the child process.","links":{},"attrs":["#[unstable(feature = \"setgroups\", issue = \"90747\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["groups",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u32"}}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Command","id":"1:7477:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:4815:667":{"id":"0:4815:667","crate_id":0,"name":"fmt","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1800,16],"end":[1800,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10511:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5083":{"id":"0:5083","crate_id":0,"name":null,"span":{"filename":"src/util/color.rs","begin":[2,29],"end":[2,31]},"visibility":{"restricted":{"parent":"0:3336:1575","path":"::util::color"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2925:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:5070:1667","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:9533:7458-0:3968:1678":{"id":"a:2:9533:7458-0:3968:1678","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:9533:7458","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgSettings","id":"0:3968:1678","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1011:4245":{"id":"0:1011:4245","crate_id":0,"name":"is_hide_set","span":{"filename":"src/builder/command.rs","begin":[3757,4],"end":[3759,5]},"visibility":"public","docs":"Report whether [`Command::hide`] is set","links":{"`Command::hide`":"0:905:3786"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:784:4799":{"id":"0:784:4799","crate_id":0,"name":"subcommands","span":{"filename":"src/builder/command.rs","begin":[435,4],"end":[444,5]},"visibility":"public","docs":"Adds multiple subcommands to the list of valid possibilities.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, };\n# Command::new(\"myprog\")\n.subcommands( vec![\n       Command::new(\"config\").about(\"Controls configuration functionality\")\n                                .arg(Arg::new(\"config_file\")),\n       Command::new(\"debug\").about(\"Controls debug functionality\")])\n# ;\n```\n[`IntoIterator`]: std::iter::IntoIterator","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["subcmds",{"kind":"generic","inner":"I"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"App","id":"0:4241:1674","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2859:97":{"id":"2:2859:97","crate_id":2,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2861:2792"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:23069:21810":{"id":"2:23069:21810","crate_id":2,"name":"is_normal","span":null,"visibility":"default","docs":"Returns true for each lane if its value is neither zero, infinite,\nsubnormal, nor `NaN`.","links":{},"attrs":["#[must_use =\n\"method returns a new mask and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Mask","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdFloat","id":"2:23053:11401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:2:3218-0:3968:1678":{"id":"b:2:3218-0:3968:1678","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgSettings","id":"0:3968:1678","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3221:128","2:3222:1435"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1697":{"id":"0:1697","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[27,0],"end":[27,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"action::ArgAction","name":"ArgAction","id":"0:3351:1659","glob":false}},"b:23:25-0:4828:1684":{"id":"b:23:25-0:4828:1684","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.1/src/equivalent.rs","begin":[18,0],"end":[18,46]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2925:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Equivalent","id":"23:22:9122","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4828:1684","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["23:28:9116"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"Q"}}},"2:10512:2035":{"id":"2:10512:2035","crate_id":2,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10513:1555","2:10514:10265","2:10516:9564"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:3411:6205-0:3389:1676":{"id":"a:2:3411:6205-0:3389:1676","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:3411:6205","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:3389:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:13760:6983":{"id":"2:13760:6983","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:13336:8923","`DoubleEndedIterator`":"2:8716:121","str::split_whitespace":"2:13738:43188","str::rsplit":"2:13766:64113","prim@char":"1:15876:8642"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:49790:8947","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13346:8917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1510":{"id":"0:1510","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1598,0],"end":[1611,1]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"FalseyValueParser","id":"0:4457:2273","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1511:930"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3997:3436":{"id":"0:3997:3436","crate_id":0,"name":"RequireEquals","span":{"filename":"src/builder/arg_settings.rs","begin":[306,4],"end":[306,17]},"visibility":"default","docs":"Deprecated, replaced with [`Arg::require_equals`] and [`Arg::is_require_equals_set`]\n\nDerive: replace `#[clap(setting = RequireEquals)]` with `#[clap(require_equals = true)]`\n\nBuilder: replace `arg.setting(RequireEquals)` with `arg.require_equals(true)`","links":{"`Arg::is_require_equals_set`":"0:516:4263","`Arg::require_equals`":"0:386:3435"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"0:4372:6549":{"id":"0:4372:6549","crate_id":0,"name":"Hostname","span":{"filename":"src/builder/value_hint.rs","begin":[62,4],"end":[62,12]},"visibility":"default","docs":"Host name of a computer.\nShells usually parse `/etc/hosts` and `.ssh/known_hosts` to complete hostnames.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"0:1365:2102":{"id":"0:1365:2102","crate_id":0,"name":"parse","span":{"filename":"src/builder/value_parser.rs","begin":[622,4],"end":[629,5]},"visibility":"default","docs":"Parse the argument value\n\nWhen `arg` is `None`, an external subcommand value is being parsed.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["cmd",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Command","id":"0:755:1660","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["arg",{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Arg","id":"0:3818:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}],"bindings":[]}}}}],["value",{"kind":"resolved_path","inner":{"name":"std::ffi::OsString","id":"1:2651:183","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Value","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:1362:2264","args":null}}}},{"type":{"kind":"resolved_path","inner":{"name":"crate::Error","id":"0:4647:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1714":{"id":"0:1714","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[31,23],"end":[31,31]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"arg_settings::ArgFlags","name":"ArgFlags","id":"0:3954:1677","glob":false}},"0:2336:2117":{"id":"0:2336:2117","crate_id":0,"name":"Item","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1748,4],"end":[1748,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"1:2654:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"2:13836:11015":{"id":"2:13836:11015","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:5453:11015"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:50098:8937","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1198":{"id":"0:1198","crate_id":0,"name":null,"span":{"filename":"src/builder/command.rs","begin":[5179,0],"end":[5183,1]},"visibility":{"restricted":{"parent":"0:649:1913","path":"::builder::command"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10569:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:4241:1674","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"items":["0:1199:667"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:4104-0:4778:1685":{"id":"b:2:4104-0:4778:1685","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:4102:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:4778:1685","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:4106:1449"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4558":{"id":"0:4558","crate_id":0,"name":null,"span":{"filename":"src/error/context.rs","begin":[2,9],"end":[2,13]},"visibility":{"restricted":{"parent":"0:1854:488","path":"::error::context"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3380:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:4523:6999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:10812:1869":{"id":"2:10812:1869","crate_id":2,"name":"write","span":null,"visibility":"default","docs":"Writes some data into this `Hasher`.\n\n# Examples\n\n```\nuse std::collections::hash_map::DefaultHasher;\nuse std::hash::Hasher;\n\nlet mut hasher = DefaultHasher::new();\nlet data = [0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef];\n\nhasher.write(&data);\n\nprintln!(\"Hash is {:x}!\", hasher.finish());\n```\n\n# Note to Implementers\n\nYou generally should not do length-prefixing as part of implementing\nthis method.  It's up to the [`Hash`] implementation to call\n[`Hasher::write_length_prefix`] before sequences that need it.","links":{"`Hasher::write_length_prefix`":"2:10825:10575","`Hash`":"2:10800:143"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["bytes",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:13366:8916":{"id":"2:13366:8916","crate_id":2,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13361:8918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:2:3213-0:4768:7385":{"id":"b:2:3213-0:4768:7385","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3183:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawValues","id":"0:4768:7385","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3216:128","2:3217:1436"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:878:5415":{"id":"0:878:5415","crate_id":0,"name":"arg_required_else_help","span":{"filename":"src/builder/command.rs","begin":[2067,4],"end":[2073,5]},"visibility":"public","docs":"Exit gracefully if no arguments are present (e.g. `$ myprog`).\n\n**NOTE:** [`subcommands`] count as arguments\n\n# Examples\n\n```rust\n# use clap::{Command};\nCommand::new(\"myprog\")\n    .arg_required_else_help(true);\n```\n\n[`subcommands`]: crate::Command::subcommand()\n[`Arg::default_value`]: crate::Arg::default_value()","links":{"crate::Command::subcommand()":"0:782:2012"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1869:208":{"id":"0:1869:208","crate_id":0,"name":"Result","span":{"filename":"src/error/mod.rs","begin":[32,0],"end":[32,48]},"visibility":"public","docs":"Short hand for [`Result`] type\n\n[`Result`]: std::result::Result","links":{"std::result::Result":"2:47934:208"},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"StdResult","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4647:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]}}},"a:2:3382:225-0:5070:1667":{"id":"a:2:3382:225-0:5070:1667","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:5070:1667","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:2167:7575":{"id":"0:2167:7575","crate_id":0,"name":"get_raw","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[269,4],"end":[272,5]},"visibility":"public","docs":"Iterate over the original argument values.\n\nAn `OsStr` on Unix-like systems is any series of bytes, regardless of whether or not they\ncontain valid UTF-8. Since [`String`]s in Rust are guaranteed to be valid UTF-8, a valid\nfilename on a Unix system as an argument value may contain invalid UTF-8.\n\nReturns `None` if the option wasn't present.\n\n# Panic\n\nIf the argument definition and access mismatch.  To handle this case programmatically, see\n[`ArgMatches::try_get_raw`].\n\n# Examples\n\n ```\n# use clap::{Command, arg, value_parser};\n# use std::ffi::{OsStr,OsString};\n# use std::os::unix::ffi::{OsStrExt,OsStringExt};\nuse std::path::PathBuf;\n\nlet m = Command::new(\"utf8\")\n    .arg(arg!(<arg> ... \"some arg\").value_parser(value_parser!(PathBuf)))\n    .get_matches_from(vec![OsString::from(\"myprog\"),\n                                // \"Hi\"\n                                OsString::from_vec(vec![b'H', b'i']),\n                                // \"{0xe9}!\"\n                                OsString::from_vec(vec![0xe9, b'!'])]);\n\nlet mut itr = m.get_raw(\"arg\")\n    .expect(\"`port`is required\")\n    .into_iter();\nassert_eq!(itr.next(), Some(OsStr::new(\"Hi\")));\nassert_eq!(itr.next(), Some(OsStr::from_bytes(&[0xe9, b'!'])));\nassert_eq!(itr.next(), None);\n```\n[`Iterator`]: std::iter::Iterator\n[`OsSt`]: std::ffi::OsStr\n[values]: OsValues\n[`String`]: std::string::String","links":{"std::string::String":"5:8479:221","`ArgMatches::try_get_raw`":"0:2234:7576"},"attrs":["#[track_caller]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"RawValues","id":"0:4768:7385","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5085":{"id":"0:5085","crate_id":0,"name":null,"span":{"filename":"src/util/color.rs","begin":[2,33],"end":[2,42]},"visibility":{"restricted":{"parent":"0:3336:1575","path":"::util::color"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:3378:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:5070:1667","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:487:4189":{"id":"0:487:4189","crate_id":0,"name":"get_num_vals","span":{"filename":"src/builder/arg.rs","begin":[4555,4],"end":[4557,5]},"visibility":"public","docs":"Get the number of values for this argument.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:625:4071":{"id":"0:625:4071","crate_id":0,"name":"conflicts_with_all","span":{"filename":"src/builder/arg_group.rs","begin":[439,4],"end":[444,5]},"visibility":"public","docs":"Specify arguments or groups that must **not** be present when this group is.\n\nExclusion rules function just like [argument exclusion rules], you can name other arguments\nor groups that must *not* be present when one of the arguments from this group are used.\n\n**NOTE:** The names provided may be an argument, or group name\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ArgGroup, ErrorKind};\nlet result = Command::new(\"myprog\")\n    .arg(Arg::new(\"flag\")\n        .short('f'))\n    .arg(Arg::new(\"color\")\n        .short('c'))\n    .arg(Arg::new(\"debug\")\n        .short('d'))\n    .arg(Arg::new(\"verb\")\n        .short('v'))\n    .group(ArgGroup::new(\"req_flags\")\n        .args(&[\"flag\", \"color\"])\n        .conflicts_with_all(&[\"debug\", \"verb\"]))\n    .try_get_matches_from(vec![\"myprog\", \"-c\", \"-v\"]);\n// because we used an arg from the group, and the group conflicts with either \"-v\" or \"-d\"\n// it's an error\nassert!(result.is_err());\nlet err = result.unwrap_err();\nassert_eq!(err.kind(), ErrorKind::ArgumentConflict);\n```\n\n[argument exclusion rules]: crate::Arg::conflicts_with_all()","links":{"crate::Arg::conflicts_with_all()":"0:459:4071"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["ns",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2972:836":{"id":"2:2972:836","crate_id":2,"name":"lt","span":null,"visibility":"default","docs":"This method tests less than (for `self` and `other`) and is used by the `<` operator.\n\n# Examples\n\n```\nlet result = 1.0 < 2.0;\nassert_eq!(result, true);\n\nlet result = 2.0 < 1.0;\nassert_eq!(result, false);\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Rhs"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4475:6691":{"id":"0:4475:6691","crate_id":0,"name":"MapValueParser","span":{"filename":"src/builder/value_parser.rs","begin":[1828,0],"end":[1831,1]},"visibility":"public","docs":"Adapt a `TypedValueParser` from one value to another\n\nSee [`TypedValueParser::map`]","links":{"`TypedValueParser::map`":"0:1367:851"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":[]}},"2:32176:69443":{"id":"2:32176:69443","crate_id":2,"name":"ilog2","span":null,"visibility":"public","docs":"Returns the base 2 logarithm of the number, rounded down.\n\n# Panics\n\nWhen the number is zero it panics in debug mode and\nthe return value is 0 in release mode.\n\n# Examples\n\n```\n#![feature(int_log)]\nassert_eq!(2u64.ilog2(), 1);\n```","links":{},"attrs":["#[unstable(feature = \"int_log\", issue = \"70887\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]","#[track_caller]","#[allow(arithmetic_overflow)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:210:2214":{"id":"0:210:2214","crate_id":0,"name":"augment_subcommands","span":{"filename":"src/derive.rs","begin":[563,4],"end":[565,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["cmd",{"kind":"resolved_path","inner":{"name":"Command","id":"0:755:1660","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Command","id":"0:755:1660","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3180:136":{"id":"2:3180:136","crate_id":2,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3182:688"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:968:5888":{"id":"0:968:5888","crate_id":0,"name":"get_after_long_help","span":{"filename":"src/builder/command.rs","begin":[3528,4],"end":[3530,5]},"visibility":"public","docs":"Returns the help heading for listing subcommands.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13358:932":{"id":"2:13358:932","crate_id":2,"name":"next","span":null,"visibility":"default","docs":"Performs the next search step starting from the front.\n\n- Returns [`Match(a, b)`][SearchStep::Match] if `haystack[a..b]` matches\n  the pattern.\n- Returns [`Reject(a, b)`][SearchStep::Reject] if `haystack[a..b]` can\n  not match the pattern, even partially.\n- Returns [`Done`][SearchStep::Done] if every byte of the haystack has\n  been visited.\n\nThe stream of [`Match`][SearchStep::Match] and\n[`Reject`][SearchStep::Reject] values up to a [`Done`][SearchStep::Done]\nwill contain index ranges that are adjacent, non-overlapping,\ncovering the whole haystack, and laying on utf8 boundaries.\n\nA [`Match`][SearchStep::Match] result needs to contain the whole matched\npattern, however [`Reject`][SearchStep::Reject] results may be split up\ninto arbitrary many adjacent fragments. Both ranges may have zero length.\n\nAs an example, the pattern `\"aaa\"` and the haystack `\"cbaaaaab\"`\nmight produce the stream\n`[Reject(0, 1), Reject(1, 2), Match(2, 5), Reject(5, 8)]`","links":{"SearchStep::Done":"2:50179:13950","SearchStep::Match":"2:50171:10312","SearchStep::Reject":"2:50175:14081"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SearchStep","id":"2:50170:11284","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:14460:142":{"id":"2:14460:142","crate_id":2,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14461:284","2:14462:525","2:14463:287","2:14464:1091"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13813:8069":{"id":"2:13813:8069","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:13336:8923","prim@char":"1:15876:8642"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13346:8917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10813:10563":{"id":"2:10813:10563","crate_id":2,"name":"write_u8","span":null,"visibility":"default","docs":"Writes a single `u8` into this hasher.","links":{},"attrs":["#[stable(feature = \"hasher_write\", since = \"1.3.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"primitive","inner":"u8"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4562:667":{"id":"0:4562:667","crate_id":0,"name":"fmt","span":{"filename":"src/error/context.rs","begin":[2,22],"end":[2,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10511:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1931":{"id":"0:1931","crate_id":0,"name":null,"span":{"filename":"src/error/mod.rs","begin":[994,0],"end":[998,1]},"visibility":{"restricted":{"parent":"0:1792:1663","path":"::error"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"2:48872:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4647:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1932:688"],"negative":false,"synthetic":false,"blanket_impl":null}},"23:28:9116":{"id":"23:28:9116","crate_id":23,"name":"equivalent","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.1/src/equivalent.rs","begin":[24,4],"end":[24,41]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["key",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"K"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1402:2102":{"id":"0:1402:2102","crate_id":0,"name":"parse","span":{"filename":"src/builder/value_parser.rs","begin":[831,4],"end":[846,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["cmd",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Command","id":"0:755:1660","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["arg",{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Arg","id":"0:3818:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}],"bindings":[]}}}}],["value",{"kind":"resolved_path","inner":{"name":"std::ffi::OsString","id":"1:2651:183","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Value","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:1362:2264","args":null}}}},{"type":{"kind":"resolved_path","inner":{"name":"crate::Error","id":"0:4647:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4755:7386":{"id":"0:4755:7386","crate_id":0,"name":"ValuesRef","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1547,0],"end":[1551,1]},"visibility":"public","docs":"Iterate over multiple values for an argument via [`ArgMatches::get_many`].\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ArgAction};\nlet m = Command::new(\"myapp\")\n    .arg(Arg::new(\"output\")\n        .short('o')\n        .action(ArgAction::Append)\n        .takes_value(true))\n    .get_matches_from(vec![\"myapp\", \"-o\", \"val1\", \"-o\", \"val2\"]);\n\nlet mut values = m.get_many::<String>(\"output\")\n    .unwrap()\n    .map(|s| s.as_str());\n\nassert_eq!(values.next(), Some(\"val1\"));\nassert_eq!(values.next(), Some(\"val2\"));\nassert_eq!(values.next(), None);\n```","links":{"`ArgMatches::get_many`":"0:2165:7548"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:2:9533:7458-0:4755:7386","a:2:9532:7459-0:4755:7386","a:2:3382:225-0:4755:7386","a:2:3370:216-0:4755:7386","a:2:3411:6205-0:4755:7386","b:2:8676-0:4755:7386","b:2:4104-0:4755:7386","b:2:2865-0:4755:7386","b:2:3203-0:4755:7386","b:2:3207-0:4755:7386","b:2:3218-0:4755:7386","b:2:2868-0:4755:7386","b:2:3213-0:4755:7386","b:5:848-0:4755:7386","0:4760","0:4764","0:2267","0:2273","0:2277","0:2280"]}},"b:2:3207-0:4294:1679":{"id":"b:2:3207-0:4294:1679","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:4294:1679","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":["2:3209:688"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1717":{"id":"0:1717","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[31,33],"end":[31,44]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"arg_settings::ArgSettings","name":"ArgSettings","id":"0:3968:1678","glob":false}},"a:2:9533:7458-0:4707:2393":{"id":"a:2:9533:7458-0:4707:2393","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:9533:7458","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AnyValueId","id":"0:4707:2393","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1585":{"id":"0:1585","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1977,0],"end":[1984,1]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ValueParserFactory","id":"0:1558:2266","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"u32"},"items":["0:1586:1671","0:1587:2257"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:182":{"id":"0:182","crate_id":0,"name":null,"span":{"filename":"src/derive.rs","begin":[502,0],"end":[526,1]},"visibility":{"restricted":{"parent":"0:110:554","path":"::derive"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Parser","id":"0:127:1671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["from_args_safe","from_iter","from_iter_safe","update_from","try_parse_from","clap","parse_from","try_parse","try_update_from","from_clap","parse","from_args"],"trait":{"name":"Parser","id":"0:127:1671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:2245","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:184:2102","0:185:2111","0:186:2114","0:189:2120"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:9533:7458-0:4294:1679":{"id":"a:2:9533:7458-0:4294:1679","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:9533:7458","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:4294:1679","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:977:5899":{"id":"0:977:5899","crate_id":0,"name":"get_arguments","span":{"filename":"src/builder/command.rs","begin":[3563,4],"end":[3565,5]},"visibility":"public","docs":"Iterate through the set of arguments.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3818:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}}}}}}}]}}},"generic_params":[],"modifier":"none"}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:788:1663":{"id":"0:788:1663","crate_id":0,"name":"error","span":{"filename":"src/builder/command.rs","begin":[490,4],"end":[492,5]},"visibility":"public","docs":"Custom error message for post-parsing validation\n\n# Examples\n\n```rust\n# use clap::{Command, ErrorKind};\nlet mut cmd = Command::new(\"myprog\");\nlet err = cmd.error(ErrorKind::InvalidValue, \"Some failure case\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["kind",{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4594:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["message",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"std::fmt::Display","id":"2:10569:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4647:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"impl std::fmt::Display","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"std::fmt::Display","id":"2:10569:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23070:21811":{"id":"2:23070:21811","crate_id":2,"name":"signum","span":null,"visibility":"default","docs":"Replaces each lane with a number that represents its sign.\n\n* `1.0` if the number is positive, `+0.0`, or `INFINITY`\n* `-1.0` if the number is negative, `-0.0`, or `NEG_INFINITY`\n* `NAN` if the number is `NAN`","links":{},"attrs":["#[must_use =\n\"method returns a new vector and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"a:2:9533:7458-0:4241:1674":{"id":"a:2:9533:7458-0:4241:1674","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:9533:7458","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:4241:1674","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"0:3493:415":{"id":"0:3493:415","crate_id":0,"name":"clone","span":{"filename":"src/builder/app_settings.rs","begin":[32,33],"end":[32,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:3389:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8886:9952":{"id":"2:8886:9952","crate_id":2,"name":"nth","span":null,"visibility":"default","docs":"Returns the `n`th element of the iterator.\n\nLike most indexing operations, the count starts from zero, so `nth(0)`\nreturns the first value, `nth(1)` the second, and so on.\n\nNote that all preceding elements, as well as the returned element, will be\nconsumed from the iterator. That means that the preceding elements will be\ndiscarded, and also that calling `nth(0)` multiple times on the same iterator\nwill return different elements.\n\n`nth()` will return [`None`] if `n` is greater than or equal to the length of the\niterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\nassert_eq!(a.iter().nth(1), Some(&2));\n```\n\nCalling `nth()` multiple times doesn't rewind the iterator:\n\n```\nlet a = [1, 2, 3];\n\nlet mut iter = a.iter();\n\nassert_eq!(iter.nth(1), Some(&2));\nassert_eq!(iter.nth(1), None);\n```\n\nReturning `None` if there are less than `n + 1` elements:\n\n```\nlet a = [1, 2, 3];\nassert_eq!(a.iter().nth(10), None);\n```","links":{"`None`":"2:47811:177"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2865-0:4755:7386":{"id":"b:2:2865-0:4755:7386","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValuesRef","id":"0:4755:7386","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2867:2792"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1581:2257":{"id":"0:1581:2257","crate_id":0,"name":"value_parser","span":{"filename":"src/builder/value_parser.rs","begin":[1963,4],"end":[1967,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"qualified_path","inner":{"name":"Parser","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:1558:2266","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:357:1953":{"id":"0:357:1953","crate_id":0,"name":"max_values","span":{"filename":"src/builder/arg.rs","begin":[1319,4],"end":[1322,5]},"visibility":"public","docs":"The *maximum* number of values are for this argument.\n\nFor example, if you had a\n`-f <file>` argument where you wanted up to 3 'files' you would set `.max_values(3)`, and\nthis argument would be satisfied if the user provided, 1, 2, or 3 values.\n\n**NOTE:** This does *not* implicitly set [`Arg::multiple_occurrences(true)`]. This is because\n`-o val -o val` is multiple occurrences but a single value and `-o val1 val2` is a single\noccurrence with multiple values. For positional arguments this **does** set\n[`Arg::multiple_occurrences(true)`] because there is no way to determine the difference between multiple\noccurrences and multiple values.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg};\nArg::new(\"file\")\n    .short('f')\n    .max_values(3);\n```\n\nSupplying less than the maximum number of values is allowed\n\n```rust\n# use clap::{Command, Arg};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"file\")\n        .takes_value(true)\n        .max_values(3)\n        .short('F'))\n    .try_get_matches_from(vec![\n        \"prog\", \"-F\", \"file1\", \"file2\"\n    ]);\n\nassert!(res.is_ok());\nlet m = res.unwrap();\nlet files: Vec<_> = m.values_of(\"file\").unwrap().collect();\nassert_eq!(files, [\"file1\", \"file2\"]);\n```\n\nSupplying more than the maximum number of values is an error\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"file\")\n        .takes_value(true)\n        .max_values(2)\n        .short('F'))\n    .try_get_matches_from(vec![\n        \"prog\", \"-F\", \"file1\", \"file2\", \"file3\"\n    ]);\n\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind(), ErrorKind::UnknownArgument);\n```\n[`Arg::multiple_occurrences(true)`]: Arg::multiple_occurrences()","links":{"Arg::multiple_occurrences()":"0:342:1954"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["qty",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:886:4780":{"id":"0:886:4780","crate_id":0,"name":"long_flag","span":{"filename":"src/builder/command.rs","begin":[2349,4],"end":[2359,5]},"visibility":"public","docs":"Sets the long version of the subcommand flag without the preceding `--`.\n\nAllows the subcommand to be used as if it were an [`Arg::long`].\n\n**NOTE:** Any leading `-` characters will be stripped.\n\n# Examples\n\nTo set `long_flag` use a word containing valid UTF-8 codepoints. If you supply a double leading\n`--` such as `--sync` they will be stripped. Hyphens in the middle of the word; however,\nwill *not* be stripped (i.e. `sync-file` is allowed).\n\n```\n# use clap::{Command, Arg, ArgAction};\nlet matches = Command::new(\"pacman\")\n    .subcommand(\n        Command::new(\"sync\").long_flag(\"sync\").arg(\n            Arg::new(\"search\")\n                .short('s')\n                .long(\"search\")\n                .action(ArgAction::SetTrue)\n                .help(\"search remote repositories for matching strings\"),\n        ),\n    )\n    .get_matches_from(vec![\"pacman\", \"--sync\", \"--search\"]);\n\nassert_eq!(matches.subcommand_name().unwrap(), \"sync\");\nlet sync_matches = matches.subcommand_matches(\"sync\").unwrap();\nassert!(*sync_matches.get_one::<bool>(\"search\").expect(\"defaulted by clap\"));\n```\n\n[`Arg::long`]: Arg::long()","links":{"Arg::long()":"0:321:1933"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["long",{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1508":{"id":"0:1508","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1550,0],"end":[1554,1]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:3254:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BoolValueParser","id":"0:4451:2270","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1509:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4238":{"id":"0:4238","crate_id":0,"name":null,"span":{"filename":"src/builder/arg_settings.rs","begin":[530,0],"end":[558,1]},"visibility":{"restricted":{"parent":"0:637:2253","path":"::builder::arg_settings"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BitOr","id":"2:3503:2032","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ArgSettings","id":"0:3968:1678","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgSettings","id":"0:3968:1678","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4239:184","0:4240:360"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:4484:9962":{"id":"1:4484:9962","crate_id":1,"name":"by_ref","span":null,"visibility":"default","docs":"Creates a \"by reference\" adapter for this instance of `Write`.\n\nThe returned adapter also implements `Write` and will simply borrow this\ncurrent writer.\n\n# Examples\n\n```no_run\nuse std::io::Write;\nuse std::fs::File;\n\nfn main() -> std::io::Result<()> {\n    let mut buffer = File::create(\"foo.txt\")?;\n\n    let reference = buffer.by_ref();\n\n    // we can use reference just like our original buffer\n    reference.write_all(b\"some bytes\")?;\n    Ok(())\n}\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:32187:1243":{"id":"2:32187:1243","crate_id":2,"name":"saturating_add","span":null,"visibility":"public","docs":"Saturating integer addition. Computes `self + rhs`, saturating at\nthe numeric bounds instead of overflowing.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(100u64.saturating_add(1), 101);\nassert_eq!(u64::MAX.saturating_add(127), u64::MAX);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]","#[rustc_const_stable(feature = \"const_saturating_int_methods\", since =\n\"1.47.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4594:1681":{"id":"0:4594:1681","crate_id":0,"name":"ErrorKind","span":{"filename":"src/error/kind.rs","begin":[4,0],"end":[396,1]},"visibility":"public","docs":"Command line argument parser kind of error","links":{},"attrs":["#[non_exhaustive]"],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:4595:7077","0:4597:7110","0:4599:7081","0:4601:7085","0:4603:6497","0:4605:7074","0:4607:7103","0:4609:7098","0:4611:7101","0:4613:7093","0:4615:7105","0:4617:7068","0:4619:7087","0:4621:7089","0:4623:7108","0:4625:7090","0:4627:7029","0:4629:7063","0:4631:7030","0:4633:7115","0:4635:7179","0:4637:7180"],"impls":["0:1856","a:2:9533:7458-0:4594:1681","a:2:9532:7459-0:4594:1681","a:2:3382:225-0:4594:1681","a:2:3370:216-0:4594:1681","a:2:3411:6205-0:4594:1681","b:2:4104-0:4594:1681","b:2:2865-0:4594:1681","b:2:3203-0:4594:1681","b:2:3207-0:4594:1681","b:2:3218-0:4594:1681","b:2:2868-0:4594:1681","b:2:3213-0:4594:1681","b:5:848-0:4594:1681","b:5:6507-0:4594:1681","0:4639","0:4641","0:4642","0:4644","0:4645","0:1858"]}},"2:32204:69462":{"id":"2:32204:69462","crate_id":2,"name":"wrapping_pow","span":null,"visibility":"public","docs":"Wrapping (modular) exponentiation. Computes `self.pow(exp)`,\nwrapping around at the boundary of the type.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(3u64.wrapping_pow(5), 243);\nassert_eq!(3u8.wrapping_pow(6), 217);\n```","links":{},"attrs":["#[stable(feature = \"no_panic_pow\", since = \"1.34.0\")]","#[rustc_const_stable(feature = \"const_int_pow\", since = \"1.50.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["exp",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1701":{"id":"0:1701","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[28,23],"end":[28,31]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"app_settings::AppFlags","name":"AppFlags","id":"0:3375:1675","glob":false}},"2:14549:26908":{"id":"2:14549:26908","crate_id":2,"name":"grow_zeroed","span":null,"visibility":"default","docs":"Behaves like `grow`, but also ensures that the new contents are set to zero before being\nreturned.\n\nThe memory block will contain the following contents after a successful call to\n`grow_zeroed`:\n  * Bytes `0..old_layout.size()` are preserved from the original allocation.\n  * Bytes `old_layout.size()..old_size` will either be preserved or zeroed, depending on\n    the allocator implementation. `old_size` refers to the size of the memory block prior\n    to the `grow_zeroed` call, which may be larger than the size that was originally\n    requested when it was allocated.\n  * Bytes `old_size..new_size` are zeroed. `new_size` refers to the size of the memory\n    block returned by the `grow_zeroed` call.\n\n# Safety\n\n* `ptr` must denote a block of memory [*currently allocated*] via this allocator.\n* `old_layout` must [*fit*] that block of memory (The `new_layout` argument need not fit it.).\n* `new_layout.size()` must be greater than or equal to `old_layout.size()`.\n\nNote that `new_layout.align()` need not be the same as `old_layout.align()`.\n\n[*currently allocated*]: #currently-allocated-memory\n[*fit*]: #memory-fitting\n\n# Errors\n\nReturns `Err` if the new layout does not meet the allocator's size and alignment\nconstraints of the allocator, or if growing otherwise fails.\n\nImplementations are encouraged to return `Err` on memory exhaustion rather than panicking or\naborting, but this is not a strict requirement. (Specifically: it is *legal* to implement\nthis trait atop an underlying native allocation library that aborts on memory exhaustion.)\n\nClients wishing to abort computation in response to an allocation error are encouraged to\ncall the [`handle_alloc_error`] function, rather than directly invoking `panic!` or similar.\n\n[`handle_alloc_error`]: ../../alloc/alloc/fn.handle_alloc_error.html","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["ptr",{"kind":"resolved_path","inner":{"name":"NonNull","id":"2:2391:9139","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}],["old_layout",{"kind":"resolved_path","inner":{"name":"Layout","id":"2:50749:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["new_layout",{"kind":"resolved_path","inner":{"name":"Layout","id":"2:50749:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"NonNull","id":"2:2391:9139","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"AllocError","id":"2:50778:10147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:513:4257":{"id":"0:513:4257","crate_id":0,"name":"is_hide_long_help_set","span":{"filename":"src/builder/arg.rs","begin":[4763,4],"end":[4765,5]},"visibility":"public","docs":"Report whether [`Arg::hide_long_help`] is set","links":{"`Arg::hide_long_help`":"0:418:3839"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:433:3921":{"id":"0:433:3921","crate_id":0,"name":"required_unless_present","span":{"filename":"src/builder/arg.rs","begin":[3548,4],"end":[3551,5]},"visibility":"public","docs":"Set this arg as [required] as long as the specified argument is not present at runtime.\n\n**Pro Tip:** Using `Arg::required_unless_present` implies [`Arg::required`] and is therefore not\nmandatory to also set.\n\n# Examples\n\n```rust\n# use clap::Arg;\nArg::new(\"config\")\n    .required_unless_present(\"debug\")\n# ;\n```\n\nIn the following example, the required argument is *not* provided,\nbut it's not an error because the `unless` arg has been supplied.\n\n```rust\n# use clap::{Command, Arg};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .required_unless_present(\"dbg\")\n        .takes_value(true)\n        .long(\"config\"))\n    .arg(Arg::new(\"dbg\")\n        .long(\"debug\"))\n    .try_get_matches_from(vec![\n        \"prog\", \"--debug\"\n    ]);\n\nassert!(res.is_ok());\n```\n\nSetting `Arg::required_unless_present(name)` and *not* supplying `name` or this arg is an error.\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .required_unless_present(\"dbg\")\n        .takes_value(true)\n        .long(\"config\"))\n    .arg(Arg::new(\"dbg\")\n        .long(\"debug\"))\n    .try_get_matches_from(vec![\n        \"prog\"\n    ]);\n\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind(), ErrorKind::MissingRequiredArgument);\n```\n[required]: Arg::required()","links":{"`Arg::required`":"0:337:1948","Arg::required()":"0:337:1948"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["arg_id",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Key","id":"0:3239:2795","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9532:7459-0:4410:2272":{"id":"a:2:9532:7459-0:4410:2272","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:9532:7459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:9532:7459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EnumValueParser","id":"0:4410:2272","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:2216:2012":{"id":"0:2216:2012","crate_id":0,"name":"subcommand","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1069,4],"end":[1071,5]},"visibility":"public","docs":"The name and `ArgMatches` of the current [subcommand].\n\nSubcommand values are put in a child [`ArgMatches`]\n\nReturns `None` if the subcommand wasn't present at runtime,\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg, };\n let app_m = Command::new(\"git\")\n     .subcommand(Command::new(\"clone\"))\n     .subcommand(Command::new(\"push\"))\n     .subcommand(Command::new(\"commit\"))\n     .get_matches();\n\nmatch app_m.subcommand() {\n    Some((\"clone\",  sub_m)) => {}, // clone was used\n    Some((\"push\",   sub_m)) => {}, // push was used\n    Some((\"commit\", sub_m)) => {}, // commit was used\n    _                       => {}, // Either no subcommand or one not tested for...\n}\n```\n\nAnother useful scenario is when you want to support third party, or external, subcommands.\nIn these cases you can't know the subcommand name ahead of time, so use a variable instead\nwith pattern matching!\n\n```rust\n# use clap::Command;\n// Assume there is an external subcommand named \"subcmd\"\nlet app_m = Command::new(\"myprog\")\n    .allow_external_subcommands(true)\n    .get_matches_from(vec![\n        \"myprog\", \"subcmd\", \"--option\", \"value\", \"-fff\", \"--flag\"\n    ]);\n\n// All trailing arguments will be stored under the subcommand's sub-matches using an empty\n// string argument name\nmatch app_m.subcommand() {\n    Some((external, sub_m)) => {\n         let ext_args: Vec<&str> = sub_m.get_many::<String>(\"\")\n            .unwrap().map(|s| s.as_str()).collect();\n         assert_eq!(external, \"subcmd\");\n         assert_eq!(ext_args, [\"--option\", \"value\", \"-fff\", \"--flag\"]);\n    },\n    _ => {},\n}\n```\n[subcommand]: crate::Command::subcommand","links":{"`ArgMatches`":"0:4713:1665","crate::Command::subcommand":"0:782:2012"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4713:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3207-0:4351:1680":{"id":"b:2:3207-0:4351:1680","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:4351:1680","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3209:688"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:3370:216-0:4594:1681":{"id":"a:2:3370:216-0:4594:1681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4594:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:32186:69451":{"id":"2:32186:69451","crate_id":2,"name":"checked_pow","span":null,"visibility":"public","docs":"Checked exponentiation. Computes `self.pow(exp)`, returning `None` if\noverflow occurred.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(2u64.checked_pow(5), Some(32));\nassert_eq!(u64::MAX.checked_pow(2), None);\n```","links":{},"attrs":["#[stable(feature = \"no_panic_pow\", since = \"1.34.0\")]","#[rustc_const_stable(feature = \"const_int_pow\", since = \"1.50.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["exp",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4422:6298":{"id":"1:4422:6298","crate_id":1,"name":"bytes","span":null,"visibility":"default","docs":"Transforms this `Read` instance to an [`Iterator`] over its bytes.\n\nThe returned type implements [`Iterator`] where the [`Item`] is\n<code>[Result]<[u8], [io::Error]></code>.\nThe yielded item is [`Ok`] if a byte was successfully read and [`Err`]\notherwise. EOF is mapped to returning [`None`] from this iterator.\n\nThe default implementation calls `read` for each byte,\nwhich can be very inefficient for data that's not in memory,\nsuch as [`File`]. Consider using a [`BufReader`] in such cases.\n\n# Examples\n\n[`File`]s implement `Read`:\n\n[`Item`]: Iterator::Item\n[`File`]: crate::fs::File \"fs::File\"\n[Result]: crate::result::Result \"Result\"\n[io::Error]: self::Error \"io::Error\"\n\n```no_run\nuse std::io;\nuse std::io::prelude::*;\nuse std::io::BufReader;\nuse std::fs::File;\n\nfn main() -> io::Result<()> {\n    let f = BufReader::new(File::open(\"foo.txt\")?);\n\n    for byte in f.bytes() {\n        println!(\"{}\", byte.unwrap());\n    }\n    Ok(())\n}\n```","links":{"`Iterator`":"2:8873:159","`None`":"2:47811:177","crate::result::Result":"2:47934:208","`Err`":"2:47940:127","crate::fs::File":"1:2909:129","self::Error":"1:3803:128","`BufReader`":"1:3284:8997","u8":"1:15893:8656","`Ok`":"2:47937:178","Iterator::Item":"2:8874:2117"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"1:10973:8930","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1389":{"id":"0:1389","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[770,0],"end":[775,1]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"OsStringValueParser","id":"0:4398:2275","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1390:930"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:219:2388":{"id":"0:219:2388","crate_id":0,"name":"takes_values","span":{"filename":"src/builder/action.rs","begin":[277,4],"end":[291,5]},"visibility":"public","docs":"Returns whether this action accepts values on the command-line\n\n[`default_values`][super::Arg::default_values] and [`env`][super::Arg::env] may still be\nprocessed.","links":{"super::Arg::default_values":"0:396:3581"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1364:6637":{"id":"0:1364:6637","crate_id":0,"name":"parse_ref","span":{"filename":"src/builder/value_parser.rs","begin":[612,4],"end":[617,43]},"visibility":"default","docs":"Parse the argument value\n\nWhen `arg` is `None`, an external subcommand value is being parsed.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["cmd",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Command","id":"0:755:1660","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["arg",{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Arg","id":"0:3818:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}],"bindings":[]}}}}],["value",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"std::ffi::OsStr","id":"1:2654:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Value","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:1362:2264","args":null}}}},{"type":{"kind":"resolved_path","inner":{"name":"crate::Error","id":"0:4647:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:3212:688":{"id":"2:3212:688","crate_id":2,"name":"from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["t",{"kind":"primitive","inner":"never"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:67":{"id":"0:67","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[114,23],"end":[114,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::error::ErrorKind","name":"ErrorKind","id":"0:4594:1681","glob":false}},"2:9104:9977":{"id":"2:9104:9977","crate_id":2,"name":"cmp_by","span":null,"visibility":"default","docs":"[Lexicographically](Ord#lexicographical-comparison) compares the elements of this [`Iterator`] with those\nof another with respect to the specified comparison function.\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(iter_order_by)]\n\nuse std::cmp::Ordering;\n\nlet xs = [1, 2, 3, 4];\nlet ys = [1, 4, 9, 16];\n\nassert_eq!(xs.iter().cmp_by(&ys, |&x, &y| x.cmp(&y)), Ordering::Less);\nassert_eq!(xs.iter().cmp_by(&ys, |&x, &y| (x * x).cmp(&y)), Ordering::Equal);\nassert_eq!(xs.iter().cmp_by(&ys, |&x, &y| (2 * x).cmp(&y)), Ordering::Greater);\n```","links":{"`Iterator`":"2:8873:159","Ord#lexicographical-comparison":"2:2956:180"},"attrs":["#[unstable(feature = \"iter_order_by\", issue = \"64295\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"I"}],["cmp",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Ordering","id":"2:37932:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3624:132","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"IntoIterator","id":"2:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"output":{"kind":"resolved_path","inner":{"name":"Ordering","id":"2:37932:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4838:415":{"id":"0:4838:415","crate_id":0,"name":"clone","span":{"filename":"src/parser/matches/value_source.rs","begin":[2,16],"end":[2,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4828:1684","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4417:21315":{"id":"1:4417:21315","crate_id":1,"name":"read_exact","span":null,"visibility":"default","docs":"Read the exact number of bytes required to fill `buf`.\n\nThis function reads as many bytes as necessary to completely fill the\nspecified buffer `buf`.\n\nNo guarantees are provided about the contents of `buf` when this\nfunction is called, implementations cannot rely on any property of the\ncontents of `buf` being true. It is recommended that implementations\nonly write data to `buf` instead of reading its contents. The\ndocumentation on [`read`] has a more detailed explanation on this\nsubject.\n\n# Errors\n\nIf this function encounters an error of the kind\n[`ErrorKind::Interrupted`] then the error is ignored and the operation\nwill continue.\n\nIf this function encounters an \"end of file\" before completely filling\nthe buffer, it returns an error of the kind [`ErrorKind::UnexpectedEof`].\nThe contents of `buf` are unspecified in this case.\n\nIf any other read error is encountered then this function immediately\nreturns. The contents of `buf` are unspecified in this case.\n\nIf this function returns an error, it is unspecified how many bytes it\nhas read, but it will never read more than would be necessary to\ncompletely fill the buffer.\n\n# Examples\n\n[`File`]s implement `Read`:\n\n[`read`]: Read::read\n[`File`]: crate::fs::File\n\n```no_run\nuse std::io;\nuse std::io::prelude::*;\nuse std::fs::File;\n\nfn main() -> io::Result<()> {\n    let mut f = File::open(\"foo.txt\")?;\n    let mut buffer = [0; 10];\n\n    // read exactly 10 bytes\n    f.read_exact(&mut buffer)?;\n    Ok(())\n}\n```","links":{"crate::fs::File":"1:2909:129","Read::read":"1:4411:11149","`ErrorKind::Interrupted`":"1:10863:14188","`ErrorKind::UnexpectedEof`":"1:10867:13882"},"attrs":["#[stable(feature = \"read_exact\", since = \"1.6.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"1:3803:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1502":{"id":"0:1502","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1513,0],"end":[1548,1]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["map","parse","possible_values"],"trait":{"name":"TypedValueParser","id":"0:1362:2264","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BoolValueParser","id":"0:4451:2270","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1503:6597","0:1504:6637","0:1507:3370"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1633:6849":{"id":"0:1633:6849","crate_id":0,"name":"_ValueParserViaFromStrSealed","span":{"filename":"src/builder/value_parser.rs","begin":[2160,4],"end":[2160,45]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:2865-0:4713:1665":{"id":"b:2:2865-0:4713:1665","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4713:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2867:2792"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:57":{"id":"0:57","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[113,58],"end":[113,69]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::builder::ArgSettings","name":"ArgSettings","id":"0:3968:1678","glob":false}},"2:23059:21800":{"id":"2:23059:21800","crate_id":2,"name":"abs","span":null,"visibility":"default","docs":"Produces a vector where every lane has the absolute value of the\nequivalently-indexed lane in `self`.","links":{},"attrs":["#[must_use =\n\"method returns a new vector and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:203:2125":{"id":"0:203:2125","crate_id":0,"name":"update_from_arg_matches_mut","span":{"filename":"src/derive.rs","begin":[548,4],"end":[550,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["matches",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4713:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4647:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1630:6847":{"id":"0:1630:6847","crate_id":0,"name":"_ValueParserViaValueEnumSealed","span":{"filename":"src/builder/value_parser.rs","begin":[2157,4],"end":[2157,47]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:32213:69471":{"id":"2:32213:69471","crate_id":2,"name":"overflowing_div_euclid","span":null,"visibility":"public","docs":"Calculates the quotient of Euclidean division `self.div_euclid(rhs)`.\n\nReturns a tuple of the divisor along with a boolean indicating\nwhether an arithmetic overflow would occur. Note that for unsigned\nintegers overflow never occurs, so the second value is always\n`false`.\nSince, for the positive integers, all common\ndefinitions of division are equal, this\nis exactly equal to `self.overflowing_div(rhs)`.\n\n# Panics\n\nThis function will panic if `rhs` is 0.\n\n# Examples\n\nBasic usage\n\n```\nassert_eq!(5u64.overflowing_div_euclid(2), (2, false));\n```","links":{},"attrs":["#[stable(feature = \"euclidean_division\", since = \"1.38.0\")]","#[rustc_const_stable(feature = \"const_euclidean_int_methods\", since =\n\"1.52.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"u64"},{"kind":"primitive","inner":"bool"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:32218:69476":{"id":"2:32218:69476","crate_id":2,"name":"overflowing_shr","span":null,"visibility":"public","docs":"Shifts self right by `rhs` bits.\n\nReturns a tuple of the shifted version of self along with a boolean\nindicating whether the shift value was larger than or equal to the\nnumber of bits. If the shift value is too large, then value is\nmasked (N-1) where N is the number of bits, and this value is then\nused to perform the shift.\n\n# Examples\n\nBasic usage\n\n```\nassert_eq!(0x10u64.overflowing_shr(4), (0x1, false));\nassert_eq!(0x10u64.overflowing_shr(132), (0x1, true));\n```","links":{},"attrs":["#[stable(feature = \"wrapping\", since = \"1.7.0\")]","#[rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"u64"},{"kind":"primitive","inner":"bool"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:848-0:4713:1665":{"id":"b:5:848-0:4713:1665","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:844:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4713:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:850:4342","5:851:4983","5:852:9984"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:2352:932":{"id":"0:2352:932","crate_id":0,"name":"next","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1809,4],"end":[1811,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:212:2217":{"id":"0:212:2217","crate_id":0,"name":"has_subcommand","span":{"filename":"src/derive.rs","begin":[569,4],"end":[571,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4364:6533":{"id":"0:4364:6533","crate_id":0,"name":"CommandName","span":{"filename":"src/builder/value_hint.rs","begin":[44,4],"end":[44,15]},"visibility":"default","docs":"Name of a command, without arguments. May be relative to PATH, or full path to executable.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"0:1507:3370":{"id":"0:1507:3370","crate_id":0,"name":"possible_values","span":{"filename":"src/builder/value_parser.rs","begin":[1543,4],"end":[1547,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:2245","args":{"angle_bracketed":{"args":[{"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"resolved_path","inner":{"name":"crate::PossibleValue","id":"0:4294:1679","args":{"angle_bracketed":{"args":[{"lifetime":"'static"}],"bindings":[]}}}}}}}]}}},"generic_params":[]}],"lifetime":"'_"}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23106:11397":{"id":"2:23106:11397","crate_id":2,"name":"SimdInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23107:11341","2:23108:21797","2:23109:1243","2:23110:1244","2:23111:21800","2:23112:21821","2:23113:21822","2:23114:21823","2:23115:21824","2:23116:21811","2:23117:21816","2:23118:21817","2:23119:21818","2:23120:21819","2:23121:21825","2:23122:21826","2:23123:21827"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3380:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23155:10989","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:806:5007":{"id":"0:806:5007","crate_id":0,"name":"print_long_help","span":{"filename":"src/builder/command.rs","begin":[770,4],"end":[778,5]},"visibility":"public","docs":"Prints the long help message (`--help`) to [`io::stdout()`].\n\nSee also [`Command::print_help`].\n\n# Examples\n\n```rust\n# use clap::Command;\nlet mut cmd = Command::new(\"myprog\");\ncmd.print_long_help();\n```\n[`io::stdout()`]: std::io::stdout()\n[`BufWriter`]: std::io::BufWriter\n[`-h` (short)]: Arg::help()\n[`--help` (long)]: Arg::long_help()","links":{"`Command::print_help`":"0:805:4994","std::io::stdout()":"1:4223:8561"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3801:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4760":{"id":"0:4760","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1546,9],"end":[1546,14]},"visibility":{"restricted":{"parent":"0:2092:7461","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValuesRef","id":"0:4755:7386","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:4763:415"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4802:415":{"id":"0:4802:415","crate_id":0,"name":"clone","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1739,9],"end":[1739,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"OsValues","id":"0:4796:1683","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:4104-0:4241:1674":{"id":"b:2:4104-0:4241:1674","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:4102:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:4241:1674","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":["2:4106:1449"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:2160":{"id":"0:2160","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[80,0],"end":[1014,1]},"visibility":{"restricted":{"parent":"0:2092:7461","path":"::parser::matches::arg_matches"}},"docs":"# Arguments","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4713:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2161:7523","0:2163:7528","0:2164:7534","0:2165:7548","0:2167:7575","0:2168:7585","0:2170:7593","0:2172:7602","0:2173:7612","0:2174:1841","0:2176:7618","0:2178:7622","0:2180:1849","0:2182:7646","0:2185:7647","0:2187:1842","0:2191:1845","0:2194:1850","0:2199:1853","0:2202:7662","0:2204:7462","0:2206:7673","0:2209:7725","0:2211:7748"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:2344":{"id":"0:2344","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1770,0],"end":[1778,1]},"visibility":{"restricted":{"parent":"0:2092:7461","path":"::parser::matches::arg_matches"}},"docs":"Creates an empty iterator.","links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:3254:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsValues","id":"0:4796:1683","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"items":["0:2345:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3981:2583":{"id":"0:3981:2583","crate_id":0,"name":"Hidden","span":{"filename":"src/builder/arg_settings.rs","begin":[156,4],"end":[156,10]},"visibility":"default","docs":"Deprecated, replaced with [`Arg::hide`] and [`Arg::is_hide_set`]\n\nDerive: replace `#[clap(setting = Hidden)]` with `#[clap(hide = true)]`\n\nBuilder: replace `arg.setting(Hidden)` with `arg.hide(true)`","links":{"`Arg::hide`":"0:414:3786","`Arg::is_hide_set`":"0:509:4245"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"0:208":{"id":"0:208","crate_id":0,"name":null,"span":{"filename":"src/derive.rs","begin":[562,0],"end":[572,1]},"visibility":{"restricted":{"parent":"0:110:554","path":"::derive"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Subcommand","id":"0:170:1672","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Subcommand","id":"0:170:1672","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:2245","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:210:2214","0:211:2215","0:212:2217"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:2290:932":{"id":"0:2290:932","crate_id":0,"name":"next","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1617,4],"end":[1619,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"1:2654:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3203-0:4241:1674":{"id":"b:2:3203-0:4241:1674","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:4241:1674","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":["2:3206:2391"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:9532:7459-0:4420:2260":{"id":"a:2:9532:7459-0:4420:2260","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:9532:7459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValuesParser","id":"0:4420:2260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:13277:1862":{"id":"2:13277:1862","crate_id":2,"name":"from_str","span":null,"visibility":"default","docs":"Parses a string `s` to return a value of this type.\n\nIf parsing succeeds, return the value inside [`Ok`], otherwise\nwhen the string is ill-formatted return an error specific to the\ninside [`Err`]. The error type is specific to the implementation of the trait.\n\n# Examples\n\nBasic usage with [`i32`], a type that implements `FromStr`:\n\n```\nuse std::str::FromStr;\n\nlet s = \"5\";\nlet x = i32::from_str(s).unwrap();\n\nassert_eq!(5, x);\n```","links":{"`Ok`":"2:47937:178","`Err`":"2:47940:127","`i32`":"1:15890:8653"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["s",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"FromStr","id":"2:13275:1861","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:5070:1667":{"id":"0:5070:1667","crate_id":0,"name":"ColorChoice","span":{"filename":"src/util/color.rs","begin":[3,0],"end":[56,1]},"visibility":"public","docs":"Represents the color preferences for program output","links":{},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:5071:2047","0:5073:5086","0:5075:5087"],"impls":["a:2:9533:7458-0:5070:1667","a:2:9532:7459-0:5070:1667","a:2:3382:225-0:5070:1667","a:2:3370:216-0:5070:1667","a:2:3411:6205-0:5070:1667","b:2:4104-0:5070:1667","b:2:2865-0:5070:1667","b:2:3203-0:5070:1667","b:2:3207-0:5070:1667","b:2:3218-0:5070:1667","b:2:2868-0:5070:1667","b:2:3213-0:5070:1667","b:5:848-0:5070:1667","b:23:25-0:5070:1667","0:5077","0:5079","0:5080","0:5082","0:5083","0:5085","0:5086","0:3337"]}},"0:2057":{"id":"0:2057","crate_id":0,"name":null,"span":{"filename":"src/parser/error.rs","begin":[41,0],"end":[56,1]},"visibility":{"restricted":{"parent":"0:2049:1663","path":"::parser::error"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10569:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4693:7387","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2058:667"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4460:415":{"id":"0:4460:415","crate_id":0,"name":"clone","span":{"filename":"src/builder/value_parser.rs","begin":[1594,15],"end":[1594,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"FalseyValueParser","id":"0:4457:2273","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5075:5087":{"id":"0:5075:5087","crate_id":0,"name":"Never","span":{"filename":"src/util/color.rs","begin":[55,4],"end":[55,9]},"visibility":"default","docs":"Disables colored output no matter if the output is going to a terminal/TTY, or not.\n\n# Platform Specific\n\nThis setting only applies to Unix, Linux, and macOS (i.e. non-Windows platforms)\n\n# Examples\n\n ```no_run\n# use clap::{Command, ColorChoice};\nCommand::new(\"myprog\")\n    .color(ColorChoice::Never)\n    .get_matches();\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"2:13731:11078":{"id":"2:13731:11078","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:15882:8647","crate::ops::Index":"2:3679:4747","str::slice_mut_unchecked":"2:13732:67824"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:1009:5952":{"id":"0:1009:5952","crate_id":0,"name":"is_trailing_var_arg_set","span":{"filename":"src/builder/command.rs","begin":[3747,4],"end":[3749,5]},"visibility":"public","docs":"Report whether [`Command::trailing_var_arg`] is set","links":{"`Command::trailing_var_arg`":"0:881:5447"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:497:1938":{"id":"0:497:1938","crate_id":0,"name":"is_multiple_occurrences_set","span":{"filename":"src/builder/arg.rs","begin":[4655,4],"end":[4657,5]},"visibility":"public","docs":"[`Arg::multiple_occurrences`] is going away  ([Issue #3772](https://github.com/clap-rs/clap/issues/3772))","links":{"`Arg::multiple_occurrences`":"0:342:1954"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:6507-0:4693:7387":{"id":"b:5:6507-0:4693:7387","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10569:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:6505:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4693:7387","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:6509:1415"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:32164:69434":{"id":"2:32164:69434","crate_id":2,"name":"checked_add","span":null,"visibility":"public","docs":"Checked integer addition. Computes `self + rhs`, returning `None`\nif overflow occurred.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!((u64::MAX - 2).checked_add(1), Some(u64::MAX - 1));\nassert_eq!((u64::MAX - 2).checked_add(3), None);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.47.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:4104-0:4420:2260":{"id":"b:2:4104-0:4420:2260","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:4102:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValuesParser","id":"0:4420:2260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:4106:1449"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:768:4848":{"id":"0:768:4848","crate_id":0,"name":"mut_arg","span":{"filename":"src/builder/command.rs","begin":[255,4],"end":[275,5]},"visibility":"public","docs":"Allows one to mutate an [`Arg`] after it's been added to a [`Command`].\n\nThis can be useful for modifying the auto-generated help or version arguments.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg};\n\nlet mut cmd = Command::new(\"foo\")\n    .arg(Arg::new(\"bar\")\n        .short('b'))\n    .mut_arg(\"bar\", |a| a.short('B'));\n\nlet res = cmd.try_get_matches_from_mut(vec![\"foo\", \"-b\"]);\n\n// Since we changed `bar`'s short to \"B\" this should err as there\n// is no `-b` anymore, only `-B`\n\nassert!(res.is_err());\n\nlet res = cmd.try_get_matches_from_mut(vec![\"foo\", \"-B\"]);\nassert!(res.is_ok());\n```","links":{"`Command`":"0:755:1660","`Arg`":"0:3818:1661"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["arg_id",{"kind":"generic","inner":"T"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3627:133","args":{"parenthesized":{"inputs":[{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3818:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}}],"output":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3818:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Key","id":"0:3239:2795","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6834:11035":{"id":"1:6834:11035","crate_id":1,"name":"TcpStreamExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6835:28905","1:6836:28906"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10409:10989","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6240:28885":{"id":"1:6240:28885","crate_id":1,"name":"into_raw","span":null,"visibility":"default","docs":"Returns the underlying raw `wait` status.\n\nThe returned integer is a **wait status, not an exit status**.","links":{},"attrs":["#[stable(feature = \"unix_process_wait_more\", since = \"1.58.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"i32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:3109:8964":{"id":"2:3109:8964","crate_id":2,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:3108:10989","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:2231:7549":{"id":"0:2231:7549","crate_id":0,"name":"try_get_many","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1243,4],"end":[1260,5]},"visibility":"public","docs":"Non-panicking version of [`ArgMatches::get_many`]","links":{"`ArgMatches::get_many`":"0:2165:7548"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ValuesRef","id":"0:4755:7386","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4693:7387","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Any","id":"2:4102:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3373:667":{"id":"0:3373:667","crate_id":0,"name":"fmt","span":{"filename":"src/builder/action.rs","begin":[23,16],"end":[23,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10511:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3452:2599":{"id":"0:3452:2599","crate_id":0,"name":"NoBinaryName","span":{"filename":"src/builder/app_settings.rs","begin":[678,4],"end":[678,16]},"visibility":"default","docs":"Deprecated, replaced with [`Command::no_binary_name`]\n\nDerive: replace `#[clap(setting = NoBinaryName)]` with `#[clap(no_binary_name = true)]`\n\nBuilder: replace `cmd.setting(NoBinaryName)` with `cmd.no_binary_name(true)`","links":{"`Command::no_binary_name`":"0:816:5053"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"1:6238:28883":{"id":"1:6238:28883","crate_id":1,"name":"stopped_signal","span":null,"visibility":"default","docs":"If the process was stopped by a signal, returns that signal.\n\nIn other words, if `WIFSTOPPED`, this returns `WSTOPSIG`.  This is only possible if the status came from\na `wait` system call which was passed `WUNTRACED`, and was then converted into an `ExitStatus`.","links":{},"attrs":["#[stable(feature = \"unix_process_wait_more\", since = \"1.58.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"a:2:3411:6205-0:4451:2270":{"id":"a:2:3411:6205-0:4451:2270","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:3411:6205","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BoolValueParser","id":"0:4451:2270","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:892:2827":{"id":"0:892:2827","crate_id":0,"name":"aliases","span":{"filename":"src/builder/command.rs","begin":[2466,4],"end":[2469,5]},"visibility":"public","docs":"Sets multiple hidden aliases to this subcommand.\n\nThis allows the subcommand to be accessed via *either* the original name or any of the\ngiven aliases. This is more efficient, and easier than creating multiple hidden subcommands\nas one only needs to check for the existence of this command and not all aliased variants.\n\n**NOTE:** Aliases defined with this method are *hidden* from the help\nmessage. If looking for aliases that will be displayed in the help\nmessage, see [`Command::visible_aliases`].\n\n**NOTE:** When using aliases and checking for the existence of a\nparticular subcommand within an [`ArgMatches`] struct, one only needs to\nsearch for the original name and not all aliases.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"myprog\")\n    .subcommand(Command::new(\"test\")\n        .aliases(&[\"do-stuff\", \"do-tests\", \"tests\"]))\n        .arg(Arg::new(\"input\")\n            .help(\"the file to add\")\n            .required(false))\n    .get_matches_from(vec![\"myprog\", \"do-tests\"]);\nassert_eq!(m.subcommand_name(), Some(\"test\"));\n```\n[`App::visible_aliases`]: Command::visible_aliases()","links":{"`Command::visible_aliases`":"0:900:2952","`ArgMatches`":"0:4713:1665"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["names",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2271:932":{"id":"0:2271:932","crate_id":0,"name":"next","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1556,4],"end":[1558,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"2:8873:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4565:611":{"id":"0:4565:611","crate_id":0,"name":"eq","span":{"filename":"src/error/context.rs","begin":[2,29],"end":[2,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:4523:6999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1541:6637":{"id":"0:1541:6637","crate_id":0,"name":"parse_ref","span":{"filename":"src/builder/value_parser.rs","begin":[1794,4],"end":[1815,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["cmd",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Command","id":"0:755:1660","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["arg",{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Arg","id":"0:3818:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}],"bindings":[]}}}}],["value",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"std::ffi::OsStr","id":"1:2654:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Value","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:1362:2264","args":null}}}},{"type":{"kind":"resolved_path","inner":{"name":"crate::Error","id":"0:4647:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2182:7646":{"id":"0:2182:7646","crate_id":0,"name":"values_of_lossy","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[542,4],"end":[550,5]},"visibility":"public","docs":"Deprecated, replaced with [`ArgMatches::get_many()`]","links":{"`ArgMatches::get_many()`":"0:2165:7548"},"attrs":["#[track_caller]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7898:240","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:8479:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Key","id":"0:3239:2795","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3594:117":{"id":"2:3594:117","crate_id":2,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3595:227","2:3596:550"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8988:283":{"id":"2:8988:283","crate_id":2,"name":"all","span":null,"visibility":"default","docs":"Tests if every element of the iterator matches a predicate.\n\n`all()` takes a closure that returns `true` or `false`. It applies\nthis closure to each element of the iterator, and if they all return\n`true`, then so does `all()`. If any of them return `false`, it\nreturns `false`.\n\n`all()` is short-circuiting; in other words, it will stop processing\nas soon as it finds a `false`, given that no matter what else happens,\nthe result will also be `false`.\n\nAn empty iterator returns `true`.\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\n\nassert!(a.iter().all(|&x| x > 0));\n\nassert!(!a.iter().all(|&x| x > 2));\n```\n\nStopping at the first `false`:\n\n```\nlet a = [1, 2, 3];\n\nlet mut iter = a.iter();\n\nassert!(!iter.all(|&x| x != 2));\n\n// we can still use `iter`, as there are more elements.\nassert_eq!(iter.next(), Some(&3));\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3624:132","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:32165:1461":{"id":"2:32165:1461","crate_id":2,"name":"unchecked_add","span":null,"visibility":"public","docs":"Unchecked integer addition. Computes `self + rhs`, assuming overflow\ncannot occur.\n\n# Safety\n\nThis results in undefined behavior when\n`self + rhs > u64::MAX` or `self + rhs < u64::MIN`,\ni.e. when [`checked_add`] would return `None`.\n\n[`checked_add`]: u64::checked_add","links":{"u64::checked_add":"2:32164:69434"},"attrs":["#[unstable(feature = \"unchecked_math\", reason = \"niche optimization path\",\nissue = \"85122\",)]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]","#[rustc_const_unstable(feature = \"const_inherent_unchecked_arith\", issue =\n\"85122\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:1374:6597":{"id":"0:1374:6597","crate_id":0,"name":"Value","span":{"filename":"src/builder/value_parser.rs","begin":[691,4],"end":[691,19]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"5:5919:184":{"id":"5:5919:184","crate_id":5,"name":"Output","span":null,"visibility":"default","docs":"The resulting type after concatenation","links":{},"attrs":["#[unstable(feature = \"slice_concat_trait\", issue = \"27747\")]"],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"a:2:9533:7458-0:4693:7387":{"id":"a:2:9533:7458-0:4693:7387","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:9533:7458","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4693:7387","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4772":{"id":"0:4772","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1607,9],"end":[1607,14]},"visibility":{"restricted":{"parent":"0:2092:7461","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawValues","id":"0:4768:7385","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:4774:415"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:4410:8984":{"id":"1:4410:8984","crate_id":1,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4411:11149","1:4412:21312","1:4414:21313","1:4415:21314","1:4416:8985","1:4417:21315","1:4418:21316","1:4420:21317","1:4421:9962","1:4422:6298","1:4423:5915","1:4425:6115"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"22:93:69105":{"id":"22:93:69105","crate_id":22,"name":"from_raw_vec","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/os_str_bytes-6.0.0/src/lib.rs","begin":[369,4],"end":[369,53]},"visibility":"default","docs":"Converts a byte vector into an equivalent platform-native string.\n\nProvided byte strings should always be valid for the [unspecified\nencoding] used by this crate.\n\n# Errors\n\nSee documentation for [`EncodingError`].\n\n# Examples\n\n```\nuse std::env;\nuse std::ffi::OsString;\n# use std::io;\n\nuse os_str_bytes::OsStringBytes;\n\nlet os_string = env::current_exe()?;\nlet os_bytes = os_string.clone().into_raw_vec();\nassert_eq!(os_string, OsString::from_raw_vec(os_bytes).unwrap());\n#\n# Ok::<_, io::Error>(())\n```\n\n[unspecified encoding]: self#encoding","links":{"self#encoding":"22:0:8965","`EncodingError`":"22:508:12447"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["string",{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7898:240","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8224:3098","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"resolved_path","inner":{"name":"EncodingError","id":"22:508:12447","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:5578:10980":{"id":"1:5578:10980","crate_id":1,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5579:6429"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:4104-0:4392:2263":{"id":"b:2:4104-0:4392:2263","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:4102:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StringValueParser","id":"0:4392:2263","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:4106:1449"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:5559:28836":{"id":"1:5559:28836","crate_id":1,"name":"is_fifo","span":null,"visibility":"default","docs":"Returns `true` if this file type is a fifo.\n\n# Examples\n\n```no_run\nuse std::fs;\nuse std::os::unix::fs::FileTypeExt;\nuse std::io;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"fifo_file\")?;\n    let file_type = meta.file_type();\n    assert!(file_type.is_fifo());\n    Ok(())\n}\n```","links":{},"attrs":["#[stable(feature = \"file_type_ext\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:2283:59":{"id":"0:2283:59","crate_id":0,"name":"default","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1574,4],"end":[1580,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1074:6050":{"id":"0:1074:6050","crate_id":0,"name":"build","span":{"filename":"src/builder/command.rs","begin":[4251,4],"end":[4254,5]},"visibility":"public","docs":"Prepare for introspecting on all included [`Command`]s\n\nCall this on the top-level [`Command`] when done building and before reading state for\ncases like completions, custom help output, etc.","links":{"`Command`":"0:755:1660"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:23:25-0:3904:1662":{"id":"b:23:25-0:3904:1662","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.1/src/equivalent.rs","begin":[18,0],"end":[18,46]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2925:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Equivalent","id":"23:22:9122","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3904:1662","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":["23:28:9116"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"Q"}}},"2:8911:4370":{"id":"2:8911:4370","crate_id":2,"name":"peekable","span":null,"visibility":"default","docs":"Creates an iterator which can use the [`peek`] and [`peek_mut`] methods\nto look at the next element of the iterator without consuming it. See\ntheir documentation for more information.\n\nNote that the underlying iterator is still advanced when [`peek`] or\n[`peek_mut`] are called for the first time: In order to retrieve the\nnext element, [`next`] is called on the underlying iterator, hence any\nside effects (i.e. anything other than fetching the next value) of\nthe [`next`] method will occur.\n\n\n# Examples\n\nBasic usage:\n\n```\nlet xs = [1, 2, 3];\n\nlet mut iter = xs.iter().peekable();\n\n// peek() lets us see into the future\nassert_eq!(iter.peek(), Some(&&1));\nassert_eq!(iter.next(), Some(&1));\n\nassert_eq!(iter.next(), Some(&2));\n\n// we can peek() multiple times, the iterator won't advance\nassert_eq!(iter.peek(), Some(&&3));\nassert_eq!(iter.peek(), Some(&&3));\n\nassert_eq!(iter.next(), Some(&3));\n\n// after the iterator is finished, so is peek()\nassert_eq!(iter.peek(), None);\nassert_eq!(iter.next(), None);\n```\n\nUsing [`peek_mut`] to mutate the next item without advancing the\niterator:\n\n```\nlet xs = [1, 2, 3];\n\nlet mut iter = xs.iter().peekable();\n\n// `peek_mut()` lets us see into the future\nassert_eq!(iter.peek_mut(), Some(&mut &1));\nassert_eq!(iter.peek_mut(), Some(&mut &1));\nassert_eq!(iter.next(), Some(&1));\n\nif let Some(mut p) = iter.peek_mut() {\n    assert_eq!(*p, &2);\n    // put a value into the iterator\n    *p = &1000;\n}\n\n// The value reappears as the iterator continues\nassert_eq!(iter.collect::<Vec<_>>(), vec![&1000, &3]);\n```\n[`peek`]: Peekable::peek\n[`peek_mut`]: Peekable::peek_mut\n[`next`]: Iterator::next","links":{"Iterator::next":"2:8875:932","Peekable::peek":"2:7416:4371","Peekable::peek_mut":"2:7418:76682"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Peekable","id":"2:47034:9060","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9533:7458-0:4451:2270":{"id":"a:2:9533:7458-0:4451:2270","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:9533:7458","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BoolValueParser","id":"0:4451:2270","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:5567:28822":{"id":"1:5567:28822","crate_id":1,"name":"ino","span":null,"visibility":"default","docs":"Returns the underlying `d_ino` field in the contained `dirent`\nstructure.\n\n# Examples\n\n```\nuse std::fs;\nuse std::os::unix::fs::DirEntryExt;\n\nif let Ok(entries) = fs::read_dir(\".\") {\n    for entry in entries {\n        if let Ok(entry) = entry {\n            // Here, `entry` is a `DirEntry`.\n            println!(\"{:?}: {}\", entry.file_name(), entry.ino());\n        }\n    }\n}\n```","links":{},"attrs":["#[stable(feature = \"dir_entry_ext\", since = \"1.1.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:4102:68":{"id":"2:4102:68","crate_id":2,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4103:1449"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"b:2:2865-0:4796:1683":{"id":"b:2:2865-0:4796:1683","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsValues","id":"0:4796:1683","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2867:2792"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1560:2257":{"id":"0:1560:2257","crate_id":0,"name":"value_parser","span":{"filename":"src/builder/value_parser.rs","begin":[1919,4],"end":[1919,38]},"visibility":"default","docs":"Create the specified [`Self::Parser`]","links":{"`Self::Parser`":"0:1559:1671"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"qualified_path","inner":{"name":"Parser","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:1558:2266","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:185:2111":{"id":"0:185:2111","crate_id":0,"name":"try_parse","span":{"filename":"src/derive.rs","begin":[507,4],"end":[509,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4647:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5533:28827":{"id":"1:5533:28827","crate_id":1,"name":"mtime","span":null,"visibility":"default","docs":"Returns the last modification time of the file, in seconds since Unix Epoch.\n\n# Examples\n\n```no_run\nuse std::fs;\nuse std::os::unix::fs::MetadataExt;\nuse std::io;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    let last_modification_time = meta.mtime();\n    Ok(())\n}\n```","links":{},"attrs":["#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:2:3213-0:4713:1665":{"id":"b:2:3213-0:4713:1665","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3183:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4713:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3216:128","2:3217:1436"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:10815:10565":{"id":"2:10815:10565","crate_id":2,"name":"write_u32","span":null,"visibility":"default","docs":"Writes a single `u32` into this hasher.","links":{},"attrs":["#[stable(feature = \"hasher_write\", since = \"1.3.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"primitive","inner":"u32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:347:3032":{"id":"0:347:3032","crate_id":0,"name":"unset_setting","span":{"filename":"src/builder/arg.rs","begin":[905,4],"end":[911,5]},"visibility":"public","docs":"Remove a setting from the argument.\n\nSee [`ArgSettings`] for a full list of possibilities and examples.\n\n# Examples\n\n```no_run\n# use clap::{Arg, ArgSettings};\nArg::new(\"config\")\n    .unset_setting(ArgSettings::Required)\n    .unset_setting(ArgSettings::TakesValue)\n# ;\n```\n\n```no_run\n# use clap::{Arg, ArgSettings};\nArg::new(\"config\")\n    .unset_setting(ArgSettings::Required | ArgSettings::TakesValue)\n# ;\n```","links":{"`ArgSettings`":"0:3968:1678"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["setting",{"kind":"generic","inner":"F"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ArgFlags","id":"0:3954:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1707":{"id":"0:1707","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[29,0],"end":[29,17]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"arg::Arg","name":"Arg","id":"0:3818:1661","glob":false}},"b:23:25-0:4707:2393":{"id":"b:23:25-0:4707:2393","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.1/src/equivalent.rs","begin":[18,0],"end":[18,46]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2925:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Equivalent","id":"23:22:9122","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AnyValueId","id":"0:4707:2393","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["23:28:9116"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"Q"}}},"0:836:909":{"id":"0:836:909","crate_id":0,"name":"name","span":{"filename":"src/builder/command.rs","begin":[1406,4],"end":[1409,5]},"visibility":"public","docs":"(Re)Sets the program's name.\n\nSee [`Command::new`] for more details.\n\n# Examples\n\n```ignore\n# use clap::{Command, load_yaml};\nlet yaml = load_yaml!(\"cmd.yaml\");\nlet cmd = Command::from(yaml)\n    .name(crate_name!());\n\n// continued logic goes here, such as `cmd.get_matches()` etc.\n```","links":{"`Command::new`":"0:759:930"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["name",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:8479:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1876:791":{"id":"0:1876:791","crate_id":0,"name":"kind","span":{"filename":"src/error/mod.rs","begin":[93,4],"end":[95,5]},"visibility":"public","docs":"Type of error for programmatic processing","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4594:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:32201:66481":{"id":"2:32201:66481","crate_id":2,"name":"wrapping_neg","span":null,"visibility":"public","docs":"Wrapping (modular) negation. Computes `-self`,\nwrapping around at the boundary of the type.\n\nSince unsigned types do not have negative equivalents\nall applications of this function will wrap (except for `-0`).\nFor values smaller than the corresponding signed type's maximum\nthe result is the same as casting the corresponding signed value.\nAny larger values are equivalent to `MAX + 1 - (val - MAX - 1)` where\n`MAX` is the corresponding signed type's maximum.\n\n# Examples\n\nBasic usage:\n\nPlease note that this example is shared between integer types.\nWhich explains why `i8` is used here.\n\n```\nassert_eq!(100i8.wrapping_neg(), -100);\nassert_eq!((-128i8).wrapping_neg(), -128);\n```","links":{},"attrs":["#[stable(feature = \"num_wrapping\", since = \"1.2.0\")]","#[rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13349:28625":{"id":"2:13349:28625","crate_id":2,"name":"into_searcher","span":null,"visibility":"default","docs":"Constructs the associated searcher from\n`self` and the `haystack` to search in.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["haystack",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Pattern","id":"2:13346:8917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:4305:59":{"id":"0:4305:59","crate_id":0,"name":"default","span":{"filename":"src/builder/possible_value.rs","begin":[29,16],"end":[29,23]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:4294:1679","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13346:8917":{"id":"2:13346:8917","crate_id":2,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13348:8919","2:13349:28625","2:13350:28626","2:13351:28627","2:13352:28628","2:13353:28629","2:13354:28630"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:568:422":{"id":"0:568:422","crate_id":0,"name":"cmp","span":{"filename":"src/builder/arg.rs","begin":[5211,4],"end":[5213,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3818:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Ordering","id":"2:37932:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4461":{"id":"0:4461","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1594,22],"end":[1594,27]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FalseyValueParser","id":"0:4457:2273","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4462:667"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1393:6637":{"id":"0:1393:6637","crate_id":0,"name":"parse_ref","span":{"filename":"src/builder/value_parser.rs","begin":[780,4],"end":[787,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["cmd",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Command","id":"0:755:1660","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["arg",{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Arg","id":"0:3818:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}],"bindings":[]}}}}],["value",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"std::ffi::OsStr","id":"1:2654:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Value","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:1362:2264","args":null}}}},{"type":{"kind":"resolved_path","inner":{"name":"crate::Error","id":"0:4647:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:848-0:4707:2393":{"id":"b:5:848-0:4707:2393","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:844:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AnyValueId","id":"0:4707:2393","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:850:4342","5:851:4983","5:852:9984"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3484:566":{"id":"2:3484:566","crate_id":2,"name":"div_assign","span":null,"visibility":"default","docs":"Performs the `/=` operation.\n\n# Example\n\n```\nlet mut x: u32 = 12;\nx /= 2;\nassert_eq!(x, 6);\n```","links":{},"attrs":["#[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["rhs",{"kind":"generic","inner":"Rhs"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:3683:8797":{"id":"2:3683:8797","crate_id":2,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3685:762"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Index","id":"2:3679:4747","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:32205:69463":{"id":"2:32205:69463","crate_id":2,"name":"overflowing_add","span":null,"visibility":"public","docs":"Calculates `self` + `rhs`\n\nReturns a tuple of the addition along with a boolean indicating\nwhether an arithmetic overflow would occur. If an overflow would\nhave occurred then the wrapped value is returned.\n\n# Examples\n\nBasic usage\n\n```\n\nassert_eq!(5u64.overflowing_add(2), (7, false));\nassert_eq!(u64::MAX.overflowing_add(1), (0, true));\n```","links":{},"attrs":["#[stable(feature = \"wrapping\", since = \"1.7.0\")]","#[rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"u64"},{"kind":"primitive","inner":"bool"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4387:722":{"id":"0:4387:722","crate_id":0,"name":"hash","span":{"filename":"src/builder/value_hint.rs","begin":[27,31],"end":[27,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["state",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"__H"}}}]],"output":{"kind":"tuple","inner":[]},"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10810:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:23:25-0:4569:7000":{"id":"b:23:25-0:4569:7000","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.1/src/equivalent.rs","begin":[18,0],"end":[18,46]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2925:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Equivalent","id":"23:22:9122","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextValue","id":"0:4569:7000","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["23:28:9116"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"Q"}}},"0:1000:5935":{"id":"0:1000:5935","crate_id":0,"name":"is_disable_help_subcommand_set","span":{"filename":"src/builder/command.rs","begin":[3701,4],"end":[3703,5]},"visibility":"public","docs":"Report whether [`Command::disable_help_subcommand`] is set","links":{"`Command::disable_help_subcommand`":"0:827:5124"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10803:10130":{"id":"2:10803:10130","crate_id":2,"name":"hash_slice","span":null,"visibility":"default","docs":"Feeds a slice of this type into the given [`Hasher`].\n\nThis method is meant as a convenience, but its implementation is\nalso explicitly left unspecified. It isn't guaranteed to be\nequivalent to repeated calls of [`hash`] and implementations of\n[`Hash`] should keep that in mind and call [`hash`] themselves\nif the slice isn't treated as a whole unit in the [`PartialEq`]\nimplementation.\n\nFor example, a [`VecDeque`] implementation might naïvely call\n[`as_slices`] and then [`hash_slice`] on each slice, but this\nis wrong since the two slices can change with a call to\n[`make_contiguous`] without affecting the [`PartialEq`]\nresult. Since these slices aren't treated as singular\nunits, and instead part of a larger deque, this method cannot\nbe used.\n\n# Examples\n\n```\nuse std::collections::hash_map::DefaultHasher;\nuse std::hash::{Hash, Hasher};\n\nlet mut hasher = DefaultHasher::new();\nlet numbers = [6, 28, 496, 8128];\nHash::hash_slice(&numbers, &mut hasher);\nprintln!(\"Hash is {:x}!\", hasher.finish());\n```\n\n[`VecDeque`]: ../../std/collections/struct.VecDeque.html\n[`as_slices`]: ../../std/collections/struct.VecDeque.html#method.as_slices\n[`make_contiguous`]: ../../std/collections/struct.VecDeque.html#method.make_contiguous\n[`hash`]: Hash::hash\n[`hash_slice`]: Hash::hash_slice","links":{"Hash::hash_slice":"2:10803:10130","`Hasher`":"2:10810:147","Hash::hash":"2:10801:722","`PartialEq`":"2:2920:186"},"attrs":["#[stable(feature = \"hash_slice\", since = \"1.3.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["data",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"generic","inner":"Self"}}}}],["state",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"H","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"H"},"bounds":[{"trait_bound":{"trait":{"name":"Hasher","id":"2:10810:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3831:230":{"id":"2:3831:230","crate_id":2,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3832:184","2:3833:8800","2:3834:693","2:3835:376"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FromResidual","id":"2:3836:138","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Try","id":"2:3831:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3444:8780":{"id":"2:3444:8780","crate_id":2,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3446:184","2:3447:1373"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:2865-0:4828:1684":{"id":"b:2:2865-0:4828:1684","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4828:1684","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2867:2792"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:9097:7897":{"id":"2:9097:7897","crate_id":2,"name":"sum","span":null,"visibility":"default","docs":"Sums the elements of an iterator.\n\nTakes each element, adds them together, and returns the result.\n\nAn empty iterator returns the zero value of the type.\n\n# Panics\n\nWhen calling `sum()` and a primitive integer type is being returned, this\nmethod will panic if the computation overflows and debug assertions are\nenabled.\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\nlet sum: i32 = a.iter().sum();\n\nassert_eq!(sum, 6);\n```","links":{},"attrs":["#[stable(feature = \"iter_arith\", since = \"1.11.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"S"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sum","id":"2:8631:9043","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4394":{"id":"0:4394","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[718,15],"end":[718,20]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StringValueParser","id":"0:4392:2263","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4395:415"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:2223:7408":{"id":"0:2223:7408","crate_id":0,"name":"subcommand_name","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1197,4],"end":[1199,5]},"visibility":"public","docs":"The name of the current [subcommand].\n\nReturns `None` if the subcommand wasn't present at runtime,\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg, };\n let app_m = Command::new(\"git\")\n     .subcommand(Command::new(\"clone\"))\n     .subcommand(Command::new(\"push\"))\n     .subcommand(Command::new(\"commit\"))\n     .get_matches();\n\nmatch app_m.subcommand_name() {\n    Some(\"clone\")  => {}, // clone was used\n    Some(\"push\")   => {}, // push was used\n    Some(\"commit\") => {}, // commit was used\n    _              => {}, // Either no subcommand or one not tested for...\n}\n```\n[subcommand]: crate::Command::subcommand\n[`Command`]: crate::Command","links":{"crate::Command::subcommand":"0:782:2012"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3370:216-0:3904:1662":{"id":"a:2:3370:216-0:3904:1662","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3904:1662","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:5528:11213":{"id":"1:5528:11213","crate_id":1,"name":"gid","span":null,"visibility":"default","docs":"Returns the group ID of the owner of this file.\n\n# Examples\n\n```no_run\nuse std::fs;\nuse std::os::unix::fs::MetadataExt;\nuse std::io;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    let group_id = meta.gid();\n    Ok(())\n}\n```","links":{},"attrs":["#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1193:59":{"id":"0:1193:59","crate_id":0,"name":"default","span":{"filename":"src/builder/command.rs","begin":[5130,4],"end":[5168,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3457:565":{"id":"2:3457:565","crate_id":2,"name":"div","span":null,"visibility":"default","docs":"Performs the `/` operation.\n\n# Example\n\n```\nassert_eq!(12 / 2, 6);\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"generic","inner":"Rhs"}]],"output":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Div","id":"2:3454:8776","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1327:688":{"id":"0:1327:688","crate_id":0,"name":"from","span":{"filename":"src/builder/value_parser.rs","begin":[324,4],"end":[327,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["value",{"kind":"resolved_path","inner":{"name":"std::ops::Range","id":"2:46188:197","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i64"}}],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:831:3796":{"id":"0:831:3796","crate_id":0,"name":"hide_possible_values","span":{"filename":"src/builder/command.rs","begin":[1316,4],"end":[1322,5]},"visibility":"public","docs":"Tells `clap` *not* to print possible values when displaying help information.\n\nThis can be useful if there are many values, or they are explained elsewhere.\n\nTo set this per argument, see\n[`Arg::hide_possible_values`][crate::Arg::hide_possible_values].\n\n**NOTE:** This choice is propagated to all child subcommands.","links":{"crate::Arg::hide_possible_values":"0:415:3796"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3187:233":{"id":"2:3187:233","crate_id":2,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3189:128","2:3190:1435"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:14077:184":{"id":"2:14077:184","crate_id":2,"name":"Output","span":null,"visibility":"default","docs":"The output that the future will produce on completion.","links":{},"attrs":["#[stable(feature = \"into_future\", since = \"1.64.0\")]"],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"b:5:848-0:4523:6999":{"id":"b:5:848-0:4523:6999","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:844:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:4523:6999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:850:4342","5:851:4983","5:852:9984"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:14544:9087":{"id":"2:14544:9087","crate_id":2,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14545:26904","2:14546:26905","2:14547:26906","2:14548:26907","2:14549:26908","2:14550:26909","2:14551:9962"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:628":{"id":"0:628","crate_id":0,"name":null,"span":{"filename":"src/builder/arg_group.rs","begin":[471,0],"end":[483,1]},"visibility":{"restricted":{"parent":"0:597:2251","path":"::builder::arg_group"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3904:1662","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3904:1662","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":["0:630:688"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3213-0:4796:1683":{"id":"b:2:3213-0:4796:1683","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3183:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsValues","id":"0:4796:1683","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3216:128","2:3217:1436"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:23769:1287":{"id":"2:23769:1287","crate_id":2,"name":"simd_le","span":null,"visibility":"default","docs":"Test if each lane is less than or equal to the corresponding lane in `other`.","links":{},"attrs":["#[must_use =\n\"method returns a new mask and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Mask","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdPartialEq","id":"2:23179:11402","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:5:848-0:4463:2271":{"id":"b:5:848-0:4463:2271","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:844:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BoolishValueParser","id":"0:4463:2271","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:850:4342","5:851:4983","5:852:9984"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13725:7401":{"id":"2:13725:7401","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:47811:177"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11209:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11209:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:32225:69482":{"id":"2:32225:69482","crate_id":2,"name":"next_multiple_of","span":null,"visibility":"public","docs":"Calculates the smallest value greater than or equal to `self` that\nis a multiple of `rhs`.\n\n# Panics\n\nThis function will panic if `rhs` is zero.\n\n## Overflow behavior\n\nOn overflow, this function will panic if overflow checks are enabled (default in debug\nmode) and wrap if overflow checks are disabled (default in release mode).\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(int_roundings)]\nassert_eq!(16_u64.next_multiple_of(8), 16);\nassert_eq!(23_u64.next_multiple_of(8), 24);\n```","links":{},"attrs":["#[unstable(feature = \"int_roundings\", issue = \"88581\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13781:67828":{"id":"2:13781:67828","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13346:8917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:573:667":{"id":"0:573:667","crate_id":0,"name":"fmt","span":{"filename":"src/builder/arg.rs","begin":[5219,4],"end":[5252,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Formatter","id":"2:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:10511:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4390":{"id":"0:4390","crate_id":0,"name":null,"span":{"filename":"src/builder/value_hint.rs","begin":[27,43],"end":[27,48]},"visibility":{"restricted":{"parent":"0:1272:2256","path":"::builder::value_hint"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:4351:1680","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4391:415"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:3370:216-0:4398:2275":{"id":"a:2:3370:216-0:4398:2275","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsStringValueParser","id":"0:4398:2275","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1397":{"id":"0:1397","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[812,0],"end":[817,1]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"PathBufValueParser","id":"0:4404:2276","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1398:930"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:459:4071":{"id":"0:459:4071","crate_id":0,"name":"conflicts_with_all","span":{"filename":"src/builder/arg.rs","begin":[4222,4],"end":[4225,5]},"visibility":"public","docs":"This argument is mutually exclusive with the specified arguments.\n\nSee [`Arg::conflicts_with`].\n\n**NOTE:** Conflicting rules take precedence over being required by default. Conflict rules\nonly need to be set for one of the two arguments, they do not need to be set for each.\n\n**NOTE:** Defining a conflict is two-way, but does *not* need to defined for both arguments\n(i.e. if A conflicts with B, defining A.conflicts_with(B) is sufficient. You do not need\nneed to also do B.conflicts_with(A))\n\n**NOTE:** [`Arg::exclusive(true)`] allows specifying an argument which conflicts with every other argument.\n\n# Examples\n\n```rust\n# use clap::Arg;\nArg::new(\"config\")\n    .conflicts_with_all(&[\"debug\", \"input\"])\n# ;\n```\n\nSetting conflicting argument, and having any of the arguments present at runtime with a\nconflicting argument is an error.\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .takes_value(true)\n        .conflicts_with_all(&[\"debug\", \"input\"])\n        .long(\"config\"))\n    .arg(Arg::new(\"debug\")\n        .long(\"debug\"))\n    .arg(Arg::new(\"input\"))\n    .try_get_matches_from(vec![\n        \"prog\", \"--config\", \"file.conf\", \"file.txt\"\n    ]);\n\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind(), ErrorKind::ArgumentConflict);\n```\n[`Arg::conflicts_with`]: Arg::conflicts_with()\n[`Arg::exclusive(true)`]: Arg::exclusive()","links":{"Arg::exclusive()":"0:340:3077","Arg::conflicts_with()":"0:457:4060"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["names",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:486:1935":{"id":"0:486:1935","crate_id":0,"name":"get_value_names","span":{"filename":"src/builder/arg.rs","begin":[4545,4],"end":[4551,5]},"visibility":"public","docs":"Get the names of values for this argument.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10825:10575":{"id":"2:10825:10575","crate_id":2,"name":"write_length_prefix","span":null,"visibility":"default","docs":"Writes a length prefix into this hasher, as part of being prefix-free.\n\nIf you're implementing [`Hash`] for a custom collection, call this before\nwriting its contents to this `Hasher`.  That way\n`(collection![1, 2, 3], collection![4, 5])` and\n`(collection![1, 2], collection![3, 4, 5])` will provide different\nsequences of values to the `Hasher`\n\nThe `impl<T> Hash for [T]` includes a call to this method, so if you're\nhashing a slice (or array or vector) via its `Hash::hash` method,\nyou should **not** call this yourself.\n\nThis method is only for providing domain separation.  If you want to\nhash a `usize` that represents part of the *data*, then it's important\nthat you pass it to [`Hasher::write_usize`] instead of to this method.\n\n# Examples\n\n```\n#![feature(hasher_prefixfree_extras)]\n# // Stubs to make the `impl` below pass the compiler\n# struct MyCollection<T>(Option<T>);\n# impl<T> MyCollection<T> {\n#     fn len(&self) -> usize { todo!() }\n# }\n# impl<'a, T> IntoIterator for &'a MyCollection<T> {\n#     type Item = T;\n#     type IntoIter = std::iter::Empty<T>;\n#     fn into_iter(self) -> Self::IntoIter { todo!() }\n# }\n\nuse std::hash::{Hash, Hasher};\nimpl<T: Hash> Hash for MyCollection<T> {\n    fn hash<H: Hasher>(&self, state: &mut H) {\n        state.write_length_prefix(self.len());\n        for elt in self {\n            elt.hash(state);\n        }\n    }\n}\n```\n\n# Note to Implementers\n\nIf you've decided that your `Hasher` is willing to be susceptible to\nHash-DoS attacks, then you might consider skipping hashing some or all\nof the `len` provided in the name of increased performance.","links":{"`Hasher::write_usize`":"2:10818:10568","`Hash`":"2:10800:143"},"attrs":["#[unstable(feature = \"hasher_prefixfree_extras\", issue = \"96762\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["len",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8912:9957":{"id":"2:8912:9957","crate_id":2,"name":"skip_while","span":null,"visibility":"default","docs":"Creates an iterator that [`skip`]s elements based on a predicate.\n\n[`skip`]: Iterator::skip\n\n`skip_while()` takes a closure as an argument. It will call this\nclosure on each element of the iterator, and ignore elements\nuntil it returns `false`.\n\nAfter `false` is returned, `skip_while()`'s job is over, and the\nrest of the elements are yielded.\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [-1i32, 0, 1];\n\nlet mut iter = a.iter().skip_while(|x| x.is_negative());\n\nassert_eq!(iter.next(), Some(&0));\nassert_eq!(iter.next(), Some(&1));\nassert_eq!(iter.next(), None);\n```\n\nBecause the closure passed to `skip_while()` takes a reference, and many\niterators iterate over references, this leads to a possibly confusing\nsituation, where the type of the closure argument is a double reference:\n\n```\nlet a = [-1, 0, 1];\n\nlet mut iter = a.iter().skip_while(|x| **x < 0); // need two *s!\n\nassert_eq!(iter.next(), Some(&0));\nassert_eq!(iter.next(), Some(&1));\nassert_eq!(iter.next(), None);\n```\n\nStopping after an initial `false`:\n\n```\nlet a = [-1, 0, 1, -2];\n\nlet mut iter = a.iter().skip_while(|x| **x < 0);\n\nassert_eq!(iter.next(), Some(&0));\nassert_eq!(iter.next(), Some(&1));\n\n// while this would have been false, since we already got a false,\n// skip_while() isn't used any more\nassert_eq!(iter.next(), Some(&-2));\n\nassert_eq!(iter.next(), None);\n```","links":{"Iterator::skip":"2:8919:1326"},"attrs":["#[doc(alias = \"drop_while\")]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["predicate",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SkipWhile","id":"2:47075:9064","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3624:132","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:77:69230":{"id":"22:77:69230","crate_id":22,"name":"from_raw_bytes","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/os_str_bytes-6.0.0/src/lib.rs","begin":[269,4],"end":[271,31]},"visibility":"default","docs":"Converts a byte slice into an equivalent platform-native string.\n\nProvided byte strings should always be valid for the [unspecified\nencoding] used by this crate.\n\n# Errors\n\nSee documentation for [`EncodingError`].\n\n# Examples\n\n```\nuse std::env;\nuse std::ffi::OsStr;\n# use std::io;\n\nuse os_str_bytes::OsStrBytes;\n\nlet os_string = env::current_exe()?;\nlet os_bytes = os_string.to_raw_bytes();\nassert_eq!(os_string, OsStr::from_raw_bytes(os_bytes).unwrap());\n#\n# Ok::<_, io::Error>(())\n```\n\n[unspecified encoding]: self#encoding","links":{"`EncodingError`":"22:508:12447","self#encoding":"22:0:8965"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["string",{"kind":"generic","inner":"S"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Cow","id":"5:853:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"EncodingError","id":"22:508:12447","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Cow","id":"5:853:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:3467:184":{"id":"2:3467:184","crate_id":2,"name":"Output","span":null,"visibility":"default","docs":"The resulting type after applying the `-` operator.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"a:2:3411:6205-0:4768:7385":{"id":"a:2:3411:6205-0:4768:7385","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:3411:6205","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawValues","id":"0:4768:7385","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:23054:11341":{"id":"2:23054:11341","crate_id":2,"name":"Mask","span":null,"visibility":"default","docs":"Mask type used for manipulating this SIMD vector type.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"0:1509:59":{"id":"0:1509:59","crate_id":0,"name":"default","span":{"filename":"src/builder/value_parser.rs","begin":[1551,4],"end":[1553,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2082:422":{"id":"0:2082:422","crate_id":0,"name":"cmp","span":{"filename":"src/parser/matches/any_value.rs","begin":[73,4],"end":[75,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"std::cmp::Ordering","id":"2:37932:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:850:4789":{"id":"0:850:4789","crate_id":0,"name":"after_long_help","span":{"filename":"src/builder/command.rs","begin":[1561,4],"end":[1564,5]},"visibility":"public","docs":"Free-form help text for after auto-generated long help (`--help`).\n\nThis is often used to describe how to use the arguments, caveats to be noted, or license\nand contact information.\n\nIf [`Command::after_help`] is not specified, this message will be displayed for `-h`.\n\n# Examples\n\n```no_run\n# use clap::Command;\nCommand::new(\"myprog\")\n    .after_long_help(\"Does really amazing things to great people... but be careful with -R, \\\n                     like, for real, be careful with this!\")\n# ;\n```","links":{"`Command::after_help`":"0:848:4788"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["help",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:614:1932":{"id":"0:614:1932","crate_id":0,"name":"arg","span":{"filename":"src/builder/arg_group.rs","begin":[170,4],"end":[173,5]},"visibility":"public","docs":"Adds an [argument] to this group by name\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ArgGroup};\nlet m = Command::new(\"myprog\")\n    .arg(Arg::new(\"flag\")\n        .short('f'))\n    .arg(Arg::new(\"color\")\n        .short('c'))\n    .group(ArgGroup::new(\"req_flags\")\n        .arg(\"flag\")\n        .arg(\"color\"))\n    .get_matches_from(vec![\"myprog\", \"-f\"]);\n// maybe we don't know which of the two flags was used...\nassert!(m.contains_id(\"req_flags\"));\n// but we can also check individually if needed\nassert!(m.contains_id(\"flag\"));\n```\n[argument]: crate::Arg","links":{"crate::Arg":"0:3818:1661"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["arg_id",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Key","id":"0:3239:2795","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:32183:1465":{"id":"2:32183:1465","crate_id":2,"name":"unchecked_shl","span":null,"visibility":"public","docs":"Unchecked shift left. Computes `self << rhs`, assuming that\n`rhs` is less than the number of bits in `self`.\n\n# Safety\n\nThis results in undefined behavior if `rhs` is larger than\nor equal to the number of bits in `self`,\ni.e. when [`checked_shl`] would return `None`.\n\n[`checked_shl`]: u64::checked_shl","links":{"u64::checked_shl":"2:32182:69449"},"attrs":["#[unstable(feature = \"unchecked_math\", reason = \"niche optimization path\",\nissue = \"85122\",)]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]","#[rustc_const_unstable(feature = \"const_inherent_unchecked_arith\", issue =\n\"85122\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:198":{"id":"0:198","crate_id":0,"name":null,"span":{"filename":"src/derive.rs","begin":[538,0],"end":[551,1]},"visibility":{"restricted":{"parent":"0:110:554","path":"::derive"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FromArgMatches","id":"0:162:1670","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["update_from_arg_matches_mut","from_arg_matches_mut"],"trait":{"name":"FromArgMatches","id":"0:162:1670","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:2245","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:200:2134","0:201:2106","0:202:2181","0:203:2125"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:933:5850":{"id":"0:933:5850","crate_id":0,"name":"get_next_help_heading","span":{"filename":"src/builder/command.rs","begin":[3386,4],"end":[3388,5]},"visibility":"public","docs":"Get the custom section heading specified via [`Command::help_heading`].\n\n[`App::help_heading`]: Command::help_heading()","links":{"`Command::help_heading`":"0:872:2845"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4698":{"id":"0:4698","crate_id":0,"name":null,"span":{"filename":"src/parser/error.rs","begin":[4,9],"end":[4,14]},"visibility":{"restricted":{"parent":"0:2049:1663","path":"::parser::error"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(missing_copy_implementations)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4693:7387","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4699:415"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5920:1867":{"id":"5:5920:1867","crate_id":5,"name":"join","span":null,"visibility":"default","docs":"Implementation of [`[T]::join`](slice::join)","links":{"slice::join":"5:5906:1867"},"attrs":["#[unstable(feature = \"slice_concat_trait\", issue = \"27747\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["slice",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["sep",{"kind":"generic","inner":"Separator"}]],"output":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Join","id":"5:5917:8922","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Separator"}}],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:4524:7081":{"id":"0:4524:7081","crate_id":0,"name":"InvalidSubcommand","span":{"filename":"src/error/context.rs","begin":[6,4],"end":[6,21]},"visibility":"default","docs":"The cause of the error","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"2:9125:720":{"id":"2:9125:720","crate_id":2,"name":"gt","span":null,"visibility":"default","docs":"Determines if the elements of this [`Iterator`] are [lexicographically](Ord#lexicographical-comparison)\ngreater than those of another.\n\n# Examples\n\n```\nassert_eq!([1].iter().gt([1].iter()), false);\nassert_eq!([1].iter().gt([1, 2].iter()), false);\nassert_eq!([1, 2].iter().gt([1].iter()), true);\nassert_eq!([1, 2].iter().gt([1, 2].iter()), false);\n```","links":{"Ord#lexicographical-comparison":"2:2956:180","`Iterator`":"2:8873:159"},"attrs":["#[stable(feature = \"iter_order\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"I"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"PartialOrd","id":"2:2969:187","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"IntoIterator","id":"2:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3862:415":{"id":"0:3862:415","crate_id":0,"name":"clone","span":{"filename":"src/builder/arg.rs","begin":[60,18],"end":[60,23]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3818:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4436":{"id":"0:4436","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1134,22],"end":[1134,27]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"2:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"std::convert::TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:4427:2261","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:4438:667"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:2215":{"id":"0:2215","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1017,0],"end":[1219,1]},"visibility":{"restricted":{"parent":"0:2092:7461","path":"::parser::matches::arg_matches"}},"docs":"# Subcommands","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4713:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2216:2012","0:2218:7790","0:2220:7804","0:2223:7408"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:825:3781":{"id":"0:825:3781","crate_id":0,"name":"next_line_help","span":{"filename":"src/builder/command.rs","begin":[1161,4],"end":[1167,5]},"visibility":"public","docs":"Places the help string for all arguments and subcommands on the line after them.\n\n**NOTE:** This choice is propagated to all child subcommands.\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg};\nCommand::new(\"myprog\")\n    .next_line_help(true)\n    .get_matches();\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4405":{"id":"0:4405","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[808,9],"end":[808,13]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3380:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PathBufValueParser","id":"0:4404:2276","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:8925:5917":{"id":"2:8925:5917","crate_id":2,"name":"flat_map","span":null,"visibility":"default","docs":"Creates an iterator that works like map, but flattens nested structure.\n\nThe [`map`] adapter is very useful, but only when the closure\nargument produces values. If it produces an iterator instead, there's\nan extra layer of indirection. `flat_map()` will remove this extra layer\non its own.\n\nYou can think of `flat_map(f)` as the semantic equivalent\nof [`map`]ping, and then [`flatten`]ing as in `map(f).flatten()`.\n\nAnother way of thinking about `flat_map()`: [`map`]'s closure returns\none item for each element, and `flat_map()`'s closure returns an\niterator for each element.\n\n[`map`]: Iterator::map\n[`flatten`]: Iterator::flatten\n\n# Examples\n\nBasic usage:\n\n```\nlet words = [\"alpha\", \"beta\", \"gamma\"];\n\n// chars() returns an iterator\nlet merged: String = words.iter()\n                          .flat_map(|s| s.chars())\n                          .collect();\nassert_eq!(merged, \"alphabetagamma\");\n```","links":{"Iterator::flatten":"2:8928:7851","Iterator::map":"2:8895:851"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"FlatMap","id":"2:6639:9057","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3624:132","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"output":{"kind":"generic","inner":"U"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6477:15081":{"id":"1:6477:15081","crate_id":1,"name":"st_blocks","span":null,"visibility":"default","docs":"Returns the number of blocks allocated to the file, 512-byte units.\n\n# Examples\n\n```no_run\nuse std::fs;\nuse std::io;\nuse std::os::linux::fs::MetadataExt;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    println!(\"{}\", meta.st_blocks());\n    Ok(())\n}\n```","links":{},"attrs":["#[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:8201:27621":{"id":"2:8201:27621","crate_id":2,"name":"backward_checked","span":null,"visibility":"default","docs":"Returns the value that would be obtained by taking the *predecessor*\nof `self` `count` times.\n\nIf this would overflow the range of values supported by `Self`, returns `None`.\n\n# Invariants\n\nFor any `a`, `n`, and `m`:\n\n* `Step::backward_checked(a, n).and_then(|x| Step::backward_checked(x, m)) == n.checked_add(m).and_then(|x| Step::backward_checked(a, x))`\n* `Step::backward_checked(a, n).and_then(|x| Step::backward_checked(x, m)) == try { Step::backward_checked(a, n.checked_add(m)?) }`\n\nFor any `a` and `n`:\n\n* `Step::backward_checked(a, n) == (0..n).try_fold(a, |x, _| Step::backward_checked(&x, 1))`\n  * Corollary: `Step::backward_checked(&a, 0) == Some(a)`","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["start",{"kind":"generic","inner":"Self"}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:202:2181":{"id":"0:202:2181","crate_id":0,"name":"update_from_arg_matches","span":{"filename":"src/derive.rs","begin":[545,4],"end":[547,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["matches",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4713:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4647:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2868-0:4594:1681":{"id":"b:2:2868-0:4594:1681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2862:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4594:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2870:27181"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:32184:69450":{"id":"2:32184:69450","crate_id":2,"name":"checked_shr","span":null,"visibility":"public","docs":"Checked shift right. Computes `self >> rhs`, returning `None`\nif `rhs` is larger than or equal to the number of bits in `self`.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(0x10u64.checked_shr(4), Some(0x1));\nassert_eq!(0x10u64.checked_shr(129), None);\n```","links":{},"attrs":["#[stable(feature = \"wrapping\", since = \"1.7.0\")]","#[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.47.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4842:611":{"id":"0:4842:611","crate_id":0,"name":"eq","span":{"filename":"src/parser/matches/value_source.rs","begin":[2,29],"end":[2,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4828:1684","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1704":{"id":"0:1704","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[28,33],"end":[28,44]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"app_settings::AppSettings","name":"AppSettings","id":"0:3389:1676","glob":false}},"2:23768:1288":{"id":"2:23768:1288","crate_id":2,"name":"simd_lt","span":null,"visibility":"default","docs":"Test if each lane is less than the corresponding lane in `other`.","links":{},"attrs":["#[must_use =\n\"method returns a new mask and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Mask","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdPartialEq","id":"2:23179:11402","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1934:7013":{"id":"0:1934:7013","crate_id":0,"name":"source","span":{"filename":"src/error/mod.rs","begin":[1002,4],"end":[1004,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(trivial_casts)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"error::Error","id":"2:3278:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8965:9967":{"id":"2:8965:9967","crate_id":2,"name":"is_partitioned","span":null,"visibility":"default","docs":"Checks if the elements of this iterator are partitioned according to the given predicate,\nsuch that all those that return `true` precede all those that return `false`.\n\nSee also [`partition()`] and [`partition_in_place()`].\n\n[`partition()`]: Iterator::partition\n[`partition_in_place()`]: Iterator::partition_in_place\n\n# Examples\n\n```\n#![feature(iter_is_partitioned)]\n\nassert!(\"Iterator\".chars().is_partitioned(char::is_uppercase));\nassert!(!\"IntoIterator\".chars().is_partitioned(char::is_uppercase));\n```","links":{"Iterator::partition_in_place":"2:8950:9966","Iterator::partition":"2:8940:9965"},"attrs":["#[unstable(feature = \"iter_is_partitioned\", reason = \"new API\", issue =\n\"62544\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["predicate",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3624:132","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:9044:8815":{"id":"2:9044:8815","crate_id":2,"name":"max_by_key","span":null,"visibility":"default","docs":"Returns the element that gives the maximum value from the\nspecified function.\n\nIf several elements are equally maximum, the last element is\nreturned. If the iterator is empty, [`None`] is returned.\n\n# Examples\n\n```\nlet a = [-3_i32, 0, 1, 5, -10];\nassert_eq!(*a.iter().max_by_key(|x| x.abs()).unwrap(), -10);\n```","links":{"`None`":"2:47811:177"},"attrs":["#[stable(feature = \"iter_cmp_by_key\", since = \"1.6.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"B"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"2:2956:180","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3624:132","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"output":{"kind":"generic","inner":"B"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:32196:1550":{"id":"2:32196:1550","crate_id":2,"name":"wrapping_mul","span":null,"visibility":"public","docs":"Wrapping (modular) multiplication. Computes `self *\nrhs`, wrapping around at the boundary of the type.\n\n# Examples\n\nBasic usage:\n\nPlease note that this example is shared between integer types.\nWhich explains why `u8` is used here.\n\n```\nassert_eq!(10u8.wrapping_mul(12), 120);\nassert_eq!(25u8.wrapping_mul(12), 44);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8670:691":{"id":"2:8670:691","crate_id":2,"name":"from_iter","span":null,"visibility":"default","docs":"Creates a value from an iterator.\n\nSee the [module-level documentation] for more.\n\n[module-level documentation]: crate::iter\n\n# Examples\n\nBasic usage:\n\n```\nlet five_fives = std::iter::repeat(5).take(5);\n\nlet v = Vec::from_iter(five_fives);\n\nassert_eq!(v, vec![5, 5, 5, 5, 5]);\n```","links":{"crate::iter":"2:5752:788"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["iter",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"A"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:2:3218-0:4457:2273":{"id":"b:2:3218-0:4457:2273","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FalseyValueParser","id":"0:4457:2273","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3221:128","2:3222:1435"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:759:930":{"id":"0:759:930","crate_id":0,"name":"new","span":{"filename":"src/builder/command.rs","begin":[133,4],"end":[161,5]},"visibility":"public","docs":"Creates a new instance of an `Command`.\n\nIt is common, but not required, to use binary name as the `name`. This\nname will only be displayed to the user when they request to print\nversion or help and usage information.\n\nSee also [`command!`](crate::command!) and [`crate_name!`](crate::crate_name!).\n\n# Examples\n\n```no_run\n# use clap::Command;\nCommand::new(\"My Program\")\n# ;\n```","links":{"crate::command!":"0:103:1913"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["name",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:8479:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3396:2439":{"id":"0:3396:2439","crate_id":0,"name":"AllowNegativeNumbers","span":{"filename":"src/builder/app_settings.rs","begin":[132,4],"end":[132,24]},"visibility":"default","docs":"Deprecated, replaced with [`Command::allow_negative_numbers`] and\n[`Command::is_allow_negative_numbers_set`]\n\nDerive: replace `#[clap(setting = AllowNegativeNumbers)]` with `#[clap(allow_negative_numbers = true)]`\n\nBuilder: replace `cmd.setting(AllowNegativeNumbers)` with `cmd.allow_negative_numbers(true)`","links":{"`Command::is_allow_negative_numbers_set`":"0:1008:5950","`Command::allow_negative_numbers`":"0:880:5437"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"0:4617:7068":{"id":"0:4617:7068","crate_id":0,"name":"ArgumentConflict","span":{"filename":"src/error/kind.rs","begin":[235,4],"end":[235,20]},"visibility":"default","docs":"Occurs when the user provides two values which conflict with each other and can't be used\ntogether.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet result = Command::new(\"prog\")\n    .arg(Arg::new(\"debug\")\n        .long(\"debug\")\n        .conflicts_with(\"color\"))\n    .arg(Arg::new(\"color\")\n        .long(\"color\"))\n    .try_get_matches_from(vec![\"prog\", \"--debug\", \"--color\"]);\nassert!(result.is_err());\nassert_eq!(result.unwrap_err().kind(), ErrorKind::ArgumentConflict);\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"0:4239:184":{"id":"0:4239:184","crate_id":0,"name":"Output","span":{"filename":"src/builder/arg_settings.rs","begin":[530,0],"end":[558,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"ArgFlags","id":"0:3954:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"2:9009:7059":{"id":"2:9009:7059","crate_id":2,"name":"find_map","span":null,"visibility":"default","docs":"Applies function to the elements of iterator and returns\nthe first non-none result.\n\n`iter.find_map(f)` is equivalent to `iter.filter_map(f).next()`.\n\n# Examples\n\n```\nlet a = [\"lol\", \"NaN\", \"2\", \"5\"];\n\nlet first_number = a.iter().find_map(|s| s.parse().ok());\n\nassert_eq!(first_number, Some(2));\n```","links":{},"attrs":["#[stable(feature = \"iterator_find_map\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3624:132","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:163:2134":{"id":"0:163:2134","crate_id":0,"name":"from_arg_matches","span":{"filename":"src/derive.rs","begin":[318,4],"end":[318,69]},"visibility":"default","docs":"Instantiate `Self` from [`ArgMatches`], parsing the arguments as needed.\n\nMotivation: If our application had two CLI options, `--name\n<STRING>` and the flag `--debug`, we may create a struct as follows:\n\n ```ignore\nstruct Context {\n    name: String,\n    debug: bool\n}\n```\n\nWe then need to convert the `ArgMatches` that `clap` generated into our struct.\n`from_arg_matches` serves as the equivalent of:\n\n ```ignore\n# use clap::ArgMatches;\n# struct Context {\n#   name: String,\n#   debug: bool\n# }\nimpl From<ArgMatches> for Context {\n   fn from(m: ArgMatches) -> Self {\n       Context {\n           name: m.get_one::<String>(\"name\").unwrap().clone(),\n           debug: *m.get_one::<bool>(\"debug\").expect(\"defaulted by clap\"),\n       }\n   }\n}\n```","links":{"`ArgMatches`":"0:4713:1665"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["matches",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4713:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4647:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:2:3213-0:3351:1659":{"id":"b:2:3213-0:3351:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3183:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgAction","id":"0:3351:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3216:128","2:3217:1436"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4417":{"id":"0:4417","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[912,16],"end":[912,21]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"2:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"crate::ValueEnum","id":"0:174:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EnumValueParser","id":"0:4410:2272","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"items":["0:4419:667"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:8680:777":{"id":"2:8680:777","crate_id":2,"name":"into_iter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"I"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:9129:9980":{"id":"2:9129:9980","crate_id":2,"name":"is_sorted","span":null,"visibility":"default","docs":"Checks if the elements of this iterator are sorted.\n\nThat is, for each element `a` and its following element `b`, `a <= b` must hold. If the\niterator yields exactly zero or one element, `true` is returned.\n\nNote that if `Self::Item` is only `PartialOrd`, but not `Ord`, the above definition\nimplies that this function returns `false` if any two consecutive items are not\ncomparable.\n\n# Examples\n\n```\n#![feature(is_sorted)]\n\nassert!([1, 2, 2, 9].iter().is_sorted());\nassert!(![1, 3, 2, 4].iter().is_sorted());\nassert!([0].iter().is_sorted());\nassert!(std::iter::empty::<i32>().is_sorted());\nassert!(![0.0, 1.0, f32::NAN].iter().is_sorted());\n```","links":{},"attrs":["#[unstable(feature = \"is_sorted\", reason = \"new API\", issue = \"53485\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"PartialOrd","id":"2:2969:187","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:32149:11591":{"id":"2:32149:11591","crate_id":2,"name":"from_str_radix","span":null,"visibility":"public","docs":"Converts a string slice in a given base to an integer.\n\nThe string is expected to be an optional `+` sign\nfollowed by digits.\nLeading and trailing whitespace represent an error.\nDigits are a subset of these characters, depending on `radix`:\n\n* `0-9`\n* `a-z`\n* `A-Z`\n\n# Panics\n\nThis function panics if `radix` is not in the range from 2 to 36.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(u64::from_str_radix(\"A\", 16), Ok(10));\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["radix",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}},{"type":{"kind":"resolved_path","inner":{"name":"ParseIntError","id":"2:24531:11593","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:14546:26905":{"id":"2:14546:26905","crate_id":2,"name":"allocate_zeroed","span":null,"visibility":"default","docs":"Behaves like `allocate`, but also ensures that the returned memory is zero-initialized.\n\n# Errors\n\nReturning `Err` indicates that either memory is exhausted or `layout` does not meet\nallocator's size or alignment constraints.\n\nImplementations are encouraged to return `Err` on memory exhaustion rather than panicking or\naborting, but this is not a strict requirement. (Specifically: it is *legal* to implement\nthis trait atop an underlying native allocation library that aborts on memory exhaustion.)\n\nClients wishing to abort computation in response to an allocation error are encouraged to\ncall the [`handle_alloc_error`] function, rather than directly invoking `panic!` or similar.\n\n[`handle_alloc_error`]: ../../alloc/alloc/fn.handle_alloc_error.html","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["layout",{"kind":"resolved_path","inner":{"name":"Layout","id":"2:50749:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"NonNull","id":"2:2391:9139","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"AllocError","id":"2:50778:10147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4530:7072":{"id":"0:4530:7072","crate_id":0,"name":"ValidValue","span":{"filename":"src/error/context.rs","begin":[12,4],"end":[12,14]},"visibility":"default","docs":"Accepted values","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"0:467:4153":{"id":"0:467:4153","crate_id":0,"name":"get_name","span":{"filename":"src/builder/arg.rs","begin":[4390,4],"end":[4392,5]},"visibility":"public","docs":"Deprecated, replaced with [`Arg::get_id`]","links":{"`Arg::get_id`":"0:466:1940"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3370:216-0:3389:1676":{"id":"a:2:3370:216-0:3389:1676","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:3389:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:1036:1865":{"id":"1:1036:1865","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"default","docs":"Checks that two values are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Note\n\nThis method is deprecated in favor of the identically-named\ninherent methods on `u8`, `char`, `[u8]` and `str`.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":{"since":"1.26.0","note":"use inherent methods instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:790:2104":{"id":"0:790:2104","crate_id":0,"name":"get_matches","span":{"filename":"src/builder/command.rs","begin":[511,4],"end":[513,5]},"visibility":"public","docs":"Parse [`env::args_os`], exiting on failure.\n\n# Panics\n\nIf contradictory arguments or settings exist.\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg};\nlet matches = Command::new(\"myprog\")\n    // Args and options go here...\n    .get_matches();\n```\n[`env::args_os`]: std::env::args_os()\n[`App::try_get_matches_from_mut`]: Command::try_get_matches_from_mut()","links":{"std::env::args_os()":"1:2425:4939"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4713:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:184:2102":{"id":"0:184:2102","crate_id":0,"name":"parse","span":{"filename":"src/derive.rs","begin":[503,4],"end":[505,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4720:667":{"id":"0:4720:667","crate_id":0,"name":"fmt","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[67,9],"end":[67,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10511:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3818:1661":{"id":"0:3818:1661","crate_id":0,"name":"Arg","span":{"filename":"src/builder/arg.rs","begin":[61,0],"end":[101,1]},"visibility":"public","docs":"The abstract representation of a command line argument. Used to set all the options and\nrelationships that define a valid argument for the program.\n\nThere are two methods for constructing [`Arg`]s, using the builder pattern and setting options\nmanually, or using a usage string which is far less verbose but has fewer options. You can also\nuse a combination of the two methods to achieve the best of both worlds.\n\n- [Basic API][crate::Arg#basic-api]\n- [Value Handling][crate::Arg#value-handling]\n- [Help][crate::Arg#help-1]\n- [Advanced Argument Relations][crate::Arg#advanced-argument-relations]\n- [Reflection][crate::Arg#reflection]\n\n# Examples\n\n```rust\n# use clap::{Arg, arg};\n// Using the traditional builder pattern and setting each option manually\nlet cfg = Arg::new(\"config\")\n      .short('c')\n      .long(\"config\")\n      .takes_value(true)\n      .value_name(\"FILE\")\n      .help(\"Provides a config file to myprog\");\n// Using a usage string (setting a similar argument to the one above)\nlet input = arg!(-i --input <FILE> \"Provides an input file to the program\");\n```","links":{"crate::Arg#advanced-argument-relations":"0:3818:1661","crate::Arg#help-1":"0:3818:1661","`Arg`":"0:3818:1661","crate::Arg#basic-api":"0:3818:1661","crate::Arg#reflection":"0:3818:1661","crate::Arg#value-handling":"0:3818:1661"},"attrs":["#[allow(missing_debug_implementations)]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:312","0:349","0:404","0:419","0:464","0:520","a:2:9533:7458-0:3818:1661","a:2:9532:7459-0:3818:1661","a:2:3382:225-0:3818:1661","a:2:3370:216-0:3818:1661","a:2:3411:6205-0:3818:1661","b:2:4104-0:3818:1661","b:2:2865-0:3818:1661","b:2:3203-0:3818:1661","b:2:3207-0:3818:1661","b:2:3218-0:3818:1661","b:2:2868-0:3818:1661","b:2:3213-0:3818:1661","b:5:848-0:3818:1661","b:5:6507-0:3818:1661","b:23:25-0:3818:1661","0:3857","0:3860","0:557","0:560","0:563","0:566","0:569","0:571","0:575"]}},"0:386:3435":{"id":"0:386:3435","crate_id":0,"name":"require_equals","span":{"filename":"src/builder/arg.rs","begin":[1913,4],"end":[1919,5]},"visibility":"public","docs":"Requires that options use the `--option=val` syntax\n\ni.e. an equals between the option and associated value.\n\n**NOTE:** Setting this requires [`Arg::takes_value`]\n\n# Examples\n\nSetting `require_equals` requires that the option have an equals sign between\nit and the associated value.\n\n```rust\n# use clap::{Command, Arg};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .takes_value(true)\n        .require_equals(true)\n        .long(\"config\"))\n    .try_get_matches_from(vec![\n        \"prog\", \"--config=file.conf\"\n    ]);\n\nassert!(res.is_ok());\n```\n\nSetting `require_equals` and *not* supplying the equals will cause an\nerror.\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .takes_value(true)\n        .require_equals(true)\n        .long(\"config\"))\n    .try_get_matches_from(vec![\n        \"prog\", \"--config\", \"file.conf\"\n    ]);\n\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind(), ErrorKind::NoEquals);\n```","links":{"`Arg::takes_value`":"0:351:1949"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1342:688":{"id":"0:1342:688","crate_id":0,"name":"from","span":{"filename":"src/builder/value_parser.rs","begin":[508,4],"end":[511,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["values",{"kind":"array","inner":{"type":{"kind":"generic","inner":"P"},"len":"C"}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4550:7078":{"id":"0:4550:7078","crate_id":0,"name":"SuggestedValue","span":{"filename":"src/error/context.rs","begin":[32,4],"end":[32,18]},"visibility":"default","docs":"Potential fix for the user","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"2:3462:184":{"id":"2:3462:184","crate_id":2,"name":"Output","span":null,"visibility":"default","docs":"The resulting type after applying the `%` operator.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"0:4642":{"id":"0:4642","crate_id":0,"name":null,"span":{"filename":"src/error/kind.rs","begin":[2,22],"end":[2,27]},"visibility":{"restricted":{"parent":"0:1855:791","path":"::error::kind"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4594:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4643:415"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:6470:15082":{"id":"1:6470:15082","crate_id":1,"name":"st_atime","span":null,"visibility":"default","docs":"Returns the last access time of the file, in seconds since Unix Epoch.\n\n# Examples\n\n```no_run\nuse std::fs;\nuse std::io;\nuse std::os::linux::fs::MetadataExt;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    println!(\"{}\", meta.st_atime());\n    Ok(())\n}\n```","links":{},"attrs":["#[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:2:3207-0:4398:2275":{"id":"b:2:3207-0:4398:2275","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsStringValueParser","id":"0:4398:2275","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3209:688"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3366:2374":{"id":"0:3366:2374","crate_id":0,"name":"Help","span":{"filename":"src/builder/action.rs","begin":[243,4],"end":[243,8]},"visibility":"default","docs":"When encountered, display [`Command::print_help`][super::App::print_help]\n\nDepending on the flag, [`Command::print_long_help`][super::App::print_long_help] may be shown\n\n# Examples\n\n```rust\n# use clap::Command;\n# use clap::Arg;\nlet cmd = Command::new(\"mycmd\")\n    .arg(\n        Arg::new(\"special-help\")\n            .short('?')\n            .action(clap::ArgAction::Help)\n    );\n\n// Existing help still exists\nlet err = cmd.clone().try_get_matches_from([\"mycmd\", \"-h\"]).unwrap_err();\nassert_eq!(err.kind(), clap::error::ErrorKind::DisplayHelp);\n\n// New help available\nlet err = cmd.try_get_matches_from([\"mycmd\", \"-?\"]).unwrap_err();\nassert_eq!(err.kind(), clap::error::ErrorKind::DisplayHelp);\n```","links":{"super::App::print_long_help":"0:806:5007","super::App::print_help":"0:805:4994"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"0:1475:6651":{"id":"0:1475:6651","crate_id":0,"name":"range","span":{"filename":"src/builder/value_parser.rs","begin":[1345,4],"end":[1393,5]},"visibility":"public","docs":"Narrow the supported range","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["range",{"kind":"generic","inner":"B"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"2:3750:6566","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3525:8791":{"id":"2:3525:8791","crate_id":2,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3527:359"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:565:1008":{"id":"0:565:1008","crate_id":0,"name":"partial_cmp","span":{"filename":"src/builder/arg.rs","begin":[5205,4],"end":[5207,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Ordering","id":"2:37932:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13816:64119":{"id":"2:13816:64119","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:15876:8642","self::pattern":"2:13336:8923"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13346:8917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13346:8917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13361:8918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1411:6597":{"id":"0:1411:6597","crate_id":0,"name":"Value","span":{"filename":"src/builder/value_parser.rs","begin":[926,4],"end":[926,19]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"E"}}},"0:2359":{"id":"0:2359","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1826,0],"end":[1835,1]},"visibility":{"restricted":{"parent":"0:2092:7461","path":"::parser::matches::arg_matches"}},"docs":"Creates an empty iterator.","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:3254:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:4806:1682","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:2361:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3207-0:4594:1681":{"id":"b:2:3207-0:4594:1681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4594:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3209:688"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3679:4747":{"id":"2:3679:4747","crate_id":2,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3681:184","2:3682:761"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13353:28629":{"id":"2:13353:28629","crate_id":2,"name":"strip_prefix_of","span":null,"visibility":"default","docs":"Removes the pattern from the front of haystack, if it matches.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["haystack",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23770:1285":{"id":"2:23770:1285","crate_id":2,"name":"simd_gt","span":null,"visibility":"default","docs":"Test if each lane is greater than the corresponding lane in `other`.","links":{},"attrs":["#[must_use =\n\"method returns a new mask and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Mask","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdPartialEq","id":"2:23179:11402","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:23439:11342":{"id":"2:23439:11342","crate_id":2,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdElement","id":"2:24076:11337","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23430:10989","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:414:3786":{"id":"0:414:3786","crate_id":0,"name":"hide","span":{"filename":"src/builder/arg.rs","begin":[2894,4],"end":[2900,5]},"visibility":"public","docs":"Do not display the argument in help message.\n\n**NOTE:** This does **not** hide the argument from usage strings on error\n\n# Examples\n\nSetting `Hidden` will hide the argument when displaying help text\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .long(\"config\")\n        .hide(true)\n        .help(\"Some help text describing the --config arg\"))\n    .get_matches_from(vec![\n        \"prog\", \"--help\"\n    ]);\n```\n\nThe above example displays\n\n```text\nhelptest\n\nUSAGE:\n   helptest [OPTIONS]\n\nOPTIONS:\n-h, --help       Print help information\n-V, --version    Print version information\n```","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5068:7409":{"id":"1:5068:7409","crate_id":1,"name":"Iter","span":null,"visibility":"default","docs":"Returned iterator over socket addresses which this type may correspond\nto.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[{"eq_predicate":{"lhs":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"qualified_path","inner":{"name":"Iter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"ToSocketAddrs","id":"1:5067:11016","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"rhs":{"type":{"kind":"resolved_path","inner":{"name":"SocketAddr","id":"1:11134:11018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null}},"0:4402":{"id":"0:4402","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[766,22],"end":[766,27]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsStringValueParser","id":"0:4398:2275","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4403:667"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1227:4245":{"id":"0:1227:4245","crate_id":0,"name":"is_hide_set","span":{"filename":"src/builder/possible_value.rs","begin":[177,4],"end":[179,5]},"visibility":"public","docs":"Report if [`PossibleValue::hide`] is set","links":{"`PossibleValue::hide`":"0:1218:3786"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1392:6597":{"id":"0:1392:6597","crate_id":0,"name":"Value","span":{"filename":"src/builder/value_parser.rs","begin":[778,4],"end":[778,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"OsString","id":"1:2651:183","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"2:10573:8824":{"id":"2:10573:8824","crate_id":2,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10574:667"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:399:3629":{"id":"0:399:3629","crate_id":0,"name":"default_missing_value","span":{"filename":"src/builder/arg.rs","begin":[2425,4],"end":[2427,5]},"visibility":"public","docs":"Value for the argument when the flag is present but no value is specified.\n\nThis configuration option is often used to give the user a shortcut and allow them to\nefficiently specify an option argument without requiring an explicitly value. The `--color`\nargument is a common example. By, supplying an default, such as `default_missing_value(\"always\")`,\nthe user can quickly just add `--color` to the command line to produce the desired color output.\n\n**NOTE:** using this configuration option requires the use of the `.min_values(0)` and the\n`.require_equals(true)` configuration option. These are required in order to unambiguously\ndetermine what, if any, value was supplied for the argument.\n\n# Examples\n\nFor POSIX style `--color`:\n```rust\n# use clap::{Command, Arg, ValueSource};\nfn cli() -> Command<'static> {\n    Command::new(\"prog\")\n        .arg(Arg::new(\"color\").long(\"color\")\n            .value_name(\"WHEN\")\n            .value_parser([\"always\", \"auto\", \"never\"])\n            .default_value(\"auto\")\n            .min_values(0)\n            .require_equals(true)\n            .default_missing_value(\"always\")\n            .help(\"Specify WHEN to colorize output.\")\n        )\n}\n\n// first, we'll provide no arguments\nlet m  = cli().get_matches_from(vec![\n        \"prog\"\n    ]);\nassert_eq!(m.value_of(\"color\"), Some(\"auto\"));\nassert_eq!(m.value_source(\"color\"), Some(ValueSource::DefaultValue));\n\n// next, we'll provide a runtime value to override the default (as usually done).\nlet m  = cli().get_matches_from(vec![\n        \"prog\", \"--color=never\"\n    ]);\nassert_eq!(m.value_of(\"color\"), Some(\"never\"));\nassert_eq!(m.value_source(\"color\"), Some(ValueSource::CommandLine));\n\n// finally, we will use the shortcut and only provide the argument without a value.\nlet m  = cli().get_matches_from(vec![\n        \"prog\", \"--color\"\n    ]);\nassert_eq!(m.value_of(\"color\"), Some(\"always\"));\nassert_eq!(m.value_source(\"color\"), Some(ValueSource::CommandLine));\n```\n\nFor bool literals:\n```rust\n# use clap::{Command, Arg, ValueSource, value_parser};\nfn cli() -> Command<'static> {\n    Command::new(\"prog\")\n        .arg(Arg::new(\"create\").long(\"create\")\n            .value_name(\"BOOL\")\n            .value_parser(value_parser!(bool))\n            .min_values(0)\n            .require_equals(true)\n            .default_missing_value(\"true\")\n        )\n}\n\n// first, we'll provide no arguments\nlet m  = cli().get_matches_from(vec![\n        \"prog\"\n    ]);\nassert_eq!(m.get_one::<bool>(\"create\").copied(), None);\n\n// next, we'll provide a runtime value to override the default (as usually done).\nlet m  = cli().get_matches_from(vec![\n        \"prog\", \"--create=false\"\n    ]);\nassert_eq!(m.get_one::<bool>(\"create\").copied(), Some(false));\nassert_eq!(m.value_source(\"create\"), Some(ValueSource::CommandLine));\n\n// finally, we will use the shortcut and only provide the argument without a value.\nlet m  = cli().get_matches_from(vec![\n        \"prog\", \"--create\"\n    ]);\nassert_eq!(m.get_one::<bool>(\"create\").copied(), Some(true));\nassert_eq!(m.value_source(\"create\"), Some(ValueSource::CommandLine));\n```\n\n[`ArgMatches::value_of`]: ArgMatches::value_of()\n[`Arg::takes_value(true)`]: Arg::takes_value()\n[`Arg::default_value`]: Arg::default_value()","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["val",{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4356:4196":{"id":"0:4356:4196","crate_id":0,"name":"AnyPath","span":{"filename":"src/builder/value_hint.rs","begin":[36,4],"end":[36,11]},"visibility":"default","docs":"Any existing path.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"0:1404":{"id":"0:1404","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[849,0],"end":[853,1]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:3254:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PathBufValueParser","id":"0:4404:2276","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1405:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:387:3457":{"id":"0:387:3457","crate_id":0,"name":"use_value_delimiter","span":{"filename":"src/builder/arg.rs","begin":[1970,4],"end":[1981,5]},"visibility":"public","docs":"Specifies that an argument should allow grouping of multiple values via a\ndelimiter.\n\ni.e. should `--option=val1,val2,val3` be parsed as three values (`val1`, `val2`,\nand `val3`) or as a single value (`val1,val2,val3`). Defaults to using `,` (comma) as the\nvalue delimiter for all arguments that accept values (options and positional arguments)\n\n**NOTE:** When this setting is used, it will default [`Arg::value_delimiter`]\nto the comma `,`.\n\n**NOTE:** Implicitly sets [`Arg::takes_value`]\n\n# Examples\n\nThe following example shows the default behavior.\n\n```rust\n# use clap::{Command, Arg};\nlet delims = Command::new(\"prog\")\n    .arg(Arg::new(\"option\")\n        .long(\"option\")\n        .use_value_delimiter(true)\n        .takes_value(true))\n    .get_matches_from(vec![\n        \"prog\", \"--option=val1,val2,val3\",\n    ]);\n\nassert!(delims.contains_id(\"option\"));\nassert_eq!(delims.values_of(\"option\").unwrap().collect::<Vec<_>>(), [\"val1\", \"val2\", \"val3\"]);\n```\nThe next example shows the difference when turning delimiters off. This is the default\nbehavior\n\n```rust\n# use clap::{Command, Arg};\nlet nodelims = Command::new(\"prog\")\n    .arg(Arg::new(\"option\")\n        .long(\"option\")\n        .takes_value(true))\n    .get_matches_from(vec![\n        \"prog\", \"--option=val1,val2,val3\",\n    ]);\n\nassert!(nodelims.contains_id(\"option\"));\nassert_eq!(nodelims.value_of(\"option\").unwrap(), \"val1,val2,val3\");\n```\n[`Arg::value_delimiter`]: Arg::value_delimiter()","links":{"Arg::value_delimiter()":"0:389:3471","`Arg::takes_value`":"0:351:1949"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3213-0:4451:2270":{"id":"b:2:3213-0:4451:2270","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3183:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BoolValueParser","id":"0:4451:2270","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3216:128","2:3217:1436"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:9091:2240":{"id":"2:9091:2240","crate_id":2,"name":"cloned","span":null,"visibility":"default","docs":"Creates an iterator which [`clone`]s all of its elements.\n\nThis is useful when you have an iterator over `&T`, but you need an\niterator over `T`.\n\nThere is no guarantee whatsoever about the `clone` method actually\nbeing called *or* optimized away. So code should not depend on\neither.\n\n[`clone`]: Clone::clone\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\n\nlet v_cloned: Vec<_> = a.iter().cloned().collect();\n\n// cloned is the same as .map(|&x| x), for integers\nlet v_map: Vec<_> = a.iter().map(|&x| x).collect();\n\nassert_eq!(v_cloned, vec![1, 2, 3]);\nassert_eq!(v_map, vec![1, 2, 3]);\n```\n\nTo get the best performance, try to clone late:\n\n```\nlet a = [vec![0_u8, 1, 2], vec![3, 4], vec![23]];\n// don't do this:\nlet slower: Vec<_> = a.iter().cloned().filter(|s| s.len() == 1).collect();\nassert_eq!(&[vec![23]], &slower[..]);\n// instead call `cloned` late\nlet faster: Vec<_> = a.iter().filter(|s| s.len() == 1).cloned().collect();\nassert_eq!(&[vec![23]], &faster[..]);\n```","links":{"Clone::clone":"2:2885:415"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Cloned","id":"2:46917:7472","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'a"},{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10569:120":{"id":"2:10569:120","crate_id":2,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10570:667"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:5081:415":{"id":"0:5081:415","crate_id":0,"name":"clone","span":{"filename":"src/util/color.rs","begin":[2,22],"end":[2,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:5070:1667","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1559:1671":{"id":"0:1559:1671","crate_id":0,"name":"Parser","span":{"filename":"src/builder/value_parser.rs","begin":[1916,4],"end":[1916,16]},"visibility":"default","docs":"Generated parser, usually [`ValueParser`].\n\nIt should at least be a type that supports `Into<ValueParser>`.  A non-`ValueParser` type\nallows the caller to do further initialization on the parser.","links":{"`ValueParser`":"0:1294:2265"},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"0:1738":{"id":"0:1738","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[38,0],"end":[38,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"value_parser::StringValueParser","name":"StringValueParser","id":"0:4392:2263","glob":false}},"2:32182:69449":{"id":"2:32182:69449","crate_id":2,"name":"checked_shl","span":null,"visibility":"public","docs":"Checked shift left. Computes `self << rhs`, returning `None`\nif `rhs` is larger than or equal to the number of bits in `self`.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(0x1u64.checked_shl(4), Some(0x10));\nassert_eq!(0x10u64.checked_shl(129), None);\n```","links":{},"attrs":["#[stable(feature = \"wrapping\", since = \"1.7.0\")]","#[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.47.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3411:6205":{"id":"2:3411:6205","crate_id":2,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:9532:7459-0:4463:2271":{"id":"a:2:9532:7459-0:4463:2271","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:9532:7459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BoolishValueParser","id":"0:4463:2271","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:3621:131":{"id":"2:3621:131","crate_id":2,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3623:383"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3624:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:4009:3840":{"id":"0:4009:3840","crate_id":0,"name":"HiddenLongHelp","span":{"filename":"src/builder/arg_settings.rs","begin":[453,4],"end":[453,18]},"visibility":"default","docs":"Deprecated, replaced with [`Arg::hide_long_help`] and [`Arg::is_hide_long_help_set`]\n\nDerive: replace `#[clap(setting = HiddenLongHelp)]` with `#[clap(hide_long_help = true)]`\n\nBuilder: replace `arg.setting(HiddenLongHelp)` with `arg.hide_long_help(true)`","links":{"`Arg::is_hide_long_help_set`":"0:513:4257","`Arg::hide_long_help`":"0:418:3839"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"a:2:3382:225-0:3351:1659":{"id":"a:2:3382:225-0:3351:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgAction","id":"0:3351:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4580:1564":{"id":"0:4580:1564","crate_id":0,"name":"0","span":{"filename":"src/error/context.rs","begin":[52,12],"end":[52,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7898:240","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:8479:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},"2:32227:69484":{"id":"2:32227:69484","crate_id":2,"name":"is_power_of_two","span":null,"visibility":"public","docs":"Returns `true` if and only if `self == 2^k` for some `k`.\n\n# Examples\n\nBasic usage:\n\n```\nassert!(16u64.is_power_of_two());\nassert!(!10u64.is_power_of_two());\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_is_power_of_two\", since = \"1.32.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3411:6205-0:4796:1683":{"id":"a:2:3411:6205-0:4796:1683","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:3411:6205","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsValues","id":"0:4796:1683","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4639":{"id":"0:4639","crate_id":0,"name":null,"span":{"filename":"src/error/kind.rs","begin":[2,9],"end":[2,14]},"visibility":{"restricted":{"parent":"0:1855:791","path":"::error::kind"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4594:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4640:667"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:2922:611":{"id":"2:2922:611","crate_id":2,"name":"eq","span":null,"visibility":"default","docs":"This method tests for `self` and `other` values to be equal, and is used\nby `==`.","links":{},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Rhs"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:13722:64084":{"id":"2:13722:64084","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:15893:8656"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13363:7848":{"id":"2:13363:7848","crate_id":2,"name":"next_back","span":null,"visibility":"default","docs":"Performs the next search step starting from the back.\n\n- Returns [`Match(a, b)`][SearchStep::Match] if `haystack[a..b]`\n  matches the pattern.\n- Returns [`Reject(a, b)`][SearchStep::Reject] if `haystack[a..b]`\n  can not match the pattern, even partially.\n- Returns [`Done`][SearchStep::Done] if every byte of the haystack\n  has been visited\n\nThe stream of [`Match`][SearchStep::Match] and\n[`Reject`][SearchStep::Reject] values up to a [`Done`][SearchStep::Done]\nwill contain index ranges that are adjacent, non-overlapping,\ncovering the whole haystack, and laying on utf8 boundaries.\n\nA [`Match`][SearchStep::Match] result needs to contain the whole matched\npattern, however [`Reject`][SearchStep::Reject] results may be split up\ninto arbitrary many adjacent fragments. Both ranges may have zero length.\n\nAs an example, the pattern `\"aaa\"` and the haystack `\"cbaaaaab\"`\nmight produce the stream\n`[Reject(7, 8), Match(4, 7), Reject(1, 4), Reject(0, 1)]`.","links":{"SearchStep::Done":"2:50179:13950","SearchStep::Match":"2:50171:10312","SearchStep::Reject":"2:50175:14081"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SearchStep","id":"2:50170:11284","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1768":{"id":"0:1768","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[48,0],"end":[48,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"value_parser::FalseyValueParser","name":"FalseyValueParser","id":"0:4457:2273","glob":false}},"2:10800:143":{"id":"2:10800:143","crate_id":2,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10801:722","2:10803:10130"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3505:184":{"id":"2:3505:184","crate_id":2,"name":"Output","span":null,"visibility":"default","docs":"The resulting type after applying the `|` operator.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"0:4839":{"id":"0:4839","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/value_source.rs","begin":[2,23],"end":[2,27]},"visibility":{"restricted":{"parent":"0:2440:7462","path":"::parser::matches::value_source"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3380:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4828:1684","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:171:2214":{"id":"0:171:2214","crate_id":0,"name":"augment_subcommands","span":{"filename":"src/derive.rs","begin":[439,4],"end":[439,60]},"visibility":"default","docs":"Append to [`Command`] so it can instantiate `Self`.\n\nSee also [`CommandFactory`].","links":{"`Command`":"0:755:1660","`CommandFactory`":"0:153:1669"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["cmd",{"kind":"resolved_path","inner":{"name":"Command","id":"0:755:1660","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Command","id":"0:755:1660","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:3414:2489":{"id":"0:3414:2489","crate_id":0,"name":"AllowExternalSubcommands","span":{"filename":"src/builder/app_settings.rs","begin":[308,4],"end":[308,28]},"visibility":"default","docs":"Deprecated, replaced with [`Command::allow_external_subcommands`] and\n[`Command::is_allow_external_subcommands_set`]\n\nDerive: replace `#[clap(setting = AllowExternalSubcommands)]` with `#[clap(allow_external_subcommands = true)]`\n\nBuilder: replace `cmd.setting(AllowExternalSubcommands)` with `cmd.allow_external_subcommands(true)`","links":{"`Command::allow_external_subcommands`":"0:907:5655","`Command::is_allow_external_subcommands_set`":"0:1013:5959"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"1:5509:6429":{"id":"1:5509:6429","crate_id":1,"name":"mode","span":null,"visibility":"default","docs":"Returns the underlying raw `st_mode` bits that contain the standard\nUnix permissions for this file.\n\n# Examples\n\n```no_run\nuse std::fs::File;\nuse std::os::unix::fs::PermissionsExt;\n\nfn main() -> std::io::Result<()> {\n    let f = File::create(\"foo.txt\")?;\n    let metadata = f.metadata()?;\n    let permissions = metadata.permissions();\n\n    println!(\"permissions: {:o}\", permissions.mode());\n    Ok(())\n}\n```","links":{},"attrs":["#[stable(feature = \"fs_ext\", since = \"1.1.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:2280":{"id":"0:2280","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1573,0],"end":[1581,1]},"visibility":{"restricted":{"parent":"0:2092:7461","path":"::parser::matches::arg_matches"}},"docs":"Creates an empty iterator.","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:3254:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValuesRef","id":"0:4755:7386","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:2283:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4693:7387":{"id":"0:4693:7387","crate_id":0,"name":"MatchesError","span":{"filename":"src/parser/error.rs","begin":[7,0],"end":[21,1]},"visibility":"public","docs":"Violation of [`ArgMatches`][crate::ArgMatches] assumptions","links":{"crate::ArgMatches":"0:4713:1665"},"attrs":["#[allow(missing_copy_implementations)]","#[non_exhaustive]"],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:4694:7450","0:4697:7110"],"impls":["a:2:9533:7458-0:4693:7387","a:2:9532:7459-0:4693:7387","a:2:3382:225-0:4693:7387","a:2:3370:216-0:4693:7387","a:2:3411:6205-0:4693:7387","b:2:4104-0:4693:7387","b:2:2865-0:4693:7387","b:2:3203-0:4693:7387","b:2:3207-0:4693:7387","b:2:3218-0:4693:7387","b:2:2868-0:4693:7387","b:2:3285-0:4693:7387","b:2:3213-0:4693:7387","b:5:848-0:4693:7387","b:5:6507-0:4693:7387","0:4698","0:4700","0:2056","0:2057"]}},"0:1434:2102":{"id":"0:1434:2102","crate_id":0,"name":"parse","span":{"filename":"src/builder/value_parser.rs","begin":[1047,4],"end":[1079,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["cmd",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Command","id":"0:755:1660","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["arg",{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Arg","id":"0:3818:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}],"bindings":[]}}}}],["value",{"kind":"resolved_path","inner":{"name":"std::ffi::OsString","id":"1:2651:183","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:8479:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"crate::Error","id":"0:4647:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:438:3954":{"id":"0:438:3954","crate_id":0,"name":"required_unless_present_any","span":{"filename":"src/builder/arg.rs","begin":[3696,4],"end":[3703,5]},"visibility":"public","docs":"Sets this arg as [required] unless *any* of the specified arguments are present at runtime.\n\nIn other words, parsing will succeed only if user either\n* supplies the `self` arg.\n* supplies *one or more* of the `unless` arguments.\n\n**NOTE:** If you wish for this argument to be required unless *all of* these args are\npresent see [`Arg::required_unless_present_all`]\n\n# Examples\n\n```rust\n# use clap::Arg;\nArg::new(\"config\")\n    .required_unless_present_any(&[\"cfg\", \"dbg\"])\n# ;\n```\n\nSetting [`Arg::required_unless_present_any(names)`] requires that the argument be used at runtime\n*unless* *at least one of* the args in `names` are present. In the following example, the\nrequired argument is *not* provided, but it's not an error because one the `unless` args\nhave been supplied.\n\n```rust\n# use clap::{Command, Arg};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .required_unless_present_any(&[\"dbg\", \"infile\"])\n        .takes_value(true)\n        .long(\"config\"))\n    .arg(Arg::new(\"dbg\")\n        .long(\"debug\"))\n    .arg(Arg::new(\"infile\")\n        .short('i')\n        .takes_value(true))\n    .try_get_matches_from(vec![\n        \"prog\", \"--debug\"\n    ]);\n\nassert!(res.is_ok());\n```\n\nSetting [`Arg::required_unless_present_any(names)`] and *not* supplying *at least one of* `names`\nor this arg is an error.\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .required_unless_present_any(&[\"dbg\", \"infile\"])\n        .takes_value(true)\n        .long(\"config\"))\n    .arg(Arg::new(\"dbg\")\n        .long(\"debug\"))\n    .arg(Arg::new(\"infile\")\n        .short('i')\n        .takes_value(true))\n    .try_get_matches_from(vec![\n        \"prog\"\n    ]);\n\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind(), ErrorKind::MissingRequiredArgument);\n```\n[required]: Arg::required()\n[`Arg::required_unless_present_any(names)`]: Arg::required_unless_present_any()\n[`Arg::required_unless_present_all`]: Arg::required_unless_present_all()","links":{"Arg::required_unless_present_any()":"0:438:3954","Arg::required_unless_present_all()":"0:435:3939","Arg::required()":"0:337:1948"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["names",{"kind":"generic","inner":"I"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Key","id":"0:3239:2795","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:32194:69456":{"id":"2:32194:69456","crate_id":2,"name":"wrapping_add_signed","span":null,"visibility":"public","docs":"Wrapping (modular) addition with a signed integer. Computes\n`self + rhs`, wrapping around at the boundary of the type.\n\n# Examples\n\nBasic usage:\n\n```\n# #![feature(mixed_integer_ops)]\nassert_eq!(1u64.wrapping_add_signed(2), 3);\nassert_eq!(1u64.wrapping_add_signed(-2), u64::MAX);\nassert_eq!((u64::MAX - 2).wrapping_add_signed(4), 1);\n```","links":{},"attrs":["#[unstable(feature = \"mixed_integer_ops\", issue = \"87840\")]","#[rustc_const_unstable(feature = \"mixed_integer_ops\", issue = \"87840\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"i64"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2868-0:4404:2276":{"id":"b:2:2868-0:4404:2276","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2862:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PathBufValueParser","id":"0:4404:2276","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2870:27181"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:189:2120":{"id":"0:189:2120","crate_id":0,"name":"try_parse_from","span":{"filename":"src/derive.rs","begin":[519,4],"end":[525,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["itr",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4647:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"It","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"It"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"It"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsString","id":"1:2651:183","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9532:7459-0:4523:6999":{"id":"a:2:9532:7459-0:4523:6999","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:9532:7459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:4523:6999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:3411:6205-0:4241:1674":{"id":"a:2:3411:6205-0:4241:1674","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:3411:6205","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:4241:1674","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:2228:7525":{"id":"0:2228:7525","crate_id":0,"name":"try_get_one","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1224,4],"end":[1240,5]},"visibility":"public","docs":"Non-panicking version of [`ArgMatches::get_one`]","links":{"`ArgMatches::get_one`":"0:2161:7523"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4693:7387","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Any","id":"2:4102:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:14464:1091":{"id":"2:14464:1091","crate_id":2,"name":"realloc","span":null,"visibility":"default","docs":"Shrink or grow a block of memory to the given `new_size`.\nThe block is described by the given `ptr` pointer and `layout`.\n\nIf this returns a non-null pointer, then ownership of the memory block\nreferenced by `ptr` has been transferred to this allocator.\nThe memory may or may not have been deallocated, and should be\nconsidered unusable. The new memory block is allocated with `layout`,\nbut with the `size` updated to `new_size`. This new layout should be\nused when deallocating the new memory block with `dealloc`. The range\n`0..min(layout.size(), new_size)` of the new memory block is\nguaranteed to have the same values as the original block.\n\nIf this method returns null, then ownership of the memory\nblock has not been transferred to this allocator, and the\ncontents of the memory block are unaltered.\n\n# Safety\n\nThis function is unsafe because undefined behavior can result\nif the caller does not ensure all of the following:\n\n* `ptr` must be currently allocated via this allocator,\n\n* `layout` must be the same layout that was used\n  to allocate that block of memory,\n\n* `new_size` must be greater than zero.\n\n* `new_size`, when rounded up to the nearest multiple of `layout.align()`,\n  must not overflow (i.e., the rounded value must be less than `usize::MAX`).\n\n(Extension subtraits might provide more specific bounds on\nbehavior, e.g., guarantee a sentinel address or a null pointer\nin response to a zero-size allocation request.)\n\n# Errors\n\nReturns null if the new layout does not meet the size\nand alignment constraints of the allocator, or if reallocation\notherwise fails.\n\nImplementations are encouraged to return null on memory\nexhaustion rather than panicking or aborting, but this is not\na strict requirement. (Specifically: it is *legal* to\nimplement this trait atop an underlying native allocation\nlibrary that aborts on memory exhaustion.)\n\nClients wishing to abort computation in response to a\nreallocation error are encouraged to call the [`handle_alloc_error`] function,\nrather than directly invoking `panic!` or similar.\n\n[`handle_alloc_error`]: ../../alloc/alloc/fn.handle_alloc_error.html","links":{},"attrs":["#[stable(feature = \"global_alloc\", since = \"1.28.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["ptr",{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}}],["layout",{"kind":"resolved_path","inner":{"name":"Layout","id":"2:50749:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["new_size",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3203-0:4755:7386":{"id":"b:2:3203-0:4755:7386","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValuesRef","id":"0:4755:7386","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:3206:2391"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4286":{"id":"0:4286","crate_id":0,"name":null,"span":{"filename":"src/builder/command.rs","begin":[77,23],"end":[77,32]},"visibility":{"restricted":{"parent":"0:649:1913","path":"::builder::command"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2920:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"App","id":"0:4241:1674","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:4241:1674","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":["0:4288:611"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:127:1671":{"id":"0:127:1671","crate_id":0,"name":"Parser","span":{"filename":"src/derive.rs","begin":[78,0],"end":[245,1]},"visibility":"public","docs":"Parse command-line arguments into `Self`.\n\nThe primary one-stop-shop trait used to create an instance of a `clap`\n[`Command`], conduct the parsing, and turn the resulting [`ArgMatches`] back\ninto concrete instance of the user struct.\n\nThis trait is primarily a convenience on top of [`FromArgMatches`] +\n[`CommandFactory`] which uses those two underlying traits to build the two\nfundamental functions `parse` which uses the `std::env::args_os` iterator,\nand `parse_from` which allows the consumer to supply the iterator (along\nwith fallible options for each).\n\nSee also [`Subcommand`] and [`Args`].\n\nSee the [derive reference](crate::_derive) for attributes and best practices.\n\n**NOTE:** Deriving requires the [`derive` feature flag][crate::_features]\n\n# Examples\n\nThe following example creates a `Context` struct that would be used\nthroughout the application representing the normalized values coming from\nthe CLI.\n\n ```ignore\n/// My super CLI\n#[derive(clap::Parser)]\n#[clap(name = \"demo\")]\nstruct Context {\n    /// More verbose output\n    #[clap(long)]\n    verbose: bool,\n    /// An optional name\n    #[clap(short, long)]\n    name: Option<String>,\n}\n```\n\nThe equivalent [`Command`] struct + `From` implementation:\n\n```rust\n# use clap::{Command, Arg, ArgMatches, ArgAction};\nCommand::new(\"demo\")\n    .about(\"My super CLI\")\n    .arg(Arg::new(\"verbose\")\n        .long(\"verbose\")\n        .action(ArgAction::SetTrue)\n        .help(\"More verbose output\"))\n    .arg(Arg::new(\"name\")\n        .long(\"name\")\n        .short('n')\n        .help(\"An optional name\")\n        .takes_value(true));\n\nstruct Context {\n    verbose: bool,\n    name: Option<String>,\n}\n\nimpl From<ArgMatches> for Context {\n    fn from(m: ArgMatches) -> Self {\n        Context {\n            verbose: *m.get_one::<bool>(\"verbose\").expect(\"defaulted_by_clap\"),\n            name: m.get_one::<String>(\"name\").cloned(),\n        }\n    }\n}\n```\n","links":{"`CommandFactory`":"0:153:1669","`Command`":"0:755:1660","`ArgMatches`":"0:4713:1665","`Args`":"0:167:1668","`FromArgMatches`":"0:162:1670","`Subcommand`":"0:170:1672"},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:128:2102","0:129:2111","0:130:2114","0:133:2120","0:136:2123","0:139:2127"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FromArgMatches","id":"0:162:1670","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"CommandFactory","id":"0:153:1669","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:182"]}},"b:2:3203-0:4713:1665":{"id":"b:2:3203-0:4713:1665","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4713:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3206:2391"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:23150:21825":{"id":"2:23150:21825","crate_id":2,"name":"reduce_and","span":null,"visibility":"default","docs":"Returns the cumulative bitwise \"and\" across the lanes of the vector.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Scalar","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdUint","id":"2:23142:11395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1880:7028":{"id":"0:1880:7028","crate_id":0,"name":"use_stderr","span":{"filename":"src/error/mod.rs","begin":[104,4],"end":[106,5]},"visibility":"public","docs":"Should the message be written to `stdout` or not?","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:200:2134":{"id":"0:200:2134","crate_id":0,"name":"from_arg_matches","span":{"filename":"src/derive.rs","begin":[539,4],"end":[541,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["matches",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4713:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4647:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:9533:7458":{"id":"2:9533:7458","crate_id":2,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8727:9948":{"id":"2:8727:9948","crate_id":2,"name":"rfind","span":null,"visibility":"default","docs":"Searches for an element of an iterator from the back that satisfies a predicate.\n\n`rfind()` takes a closure that returns `true` or `false`. It applies\nthis closure to each element of the iterator, starting at the end, and if any\nof them return `true`, then `rfind()` returns [`Some(element)`]. If they all return\n`false`, it returns [`None`].\n\n`rfind()` is short-circuiting; in other words, it will stop processing\nas soon as the closure returns `true`.\n\nBecause `rfind()` takes a reference, and many iterators iterate over\nreferences, this leads to a possibly confusing situation where the\nargument is a double reference. You can see this effect in the\nexamples below, with `&&x`.\n\n[`Some(element)`]: Some\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\n\nassert_eq!(a.iter().rfind(|&&x| x == 2), Some(&2));\n\nassert_eq!(a.iter().rfind(|&&x| x == 5), None);\n```\n\nStopping at the first `true`:\n\n```\nlet a = [1, 2, 3];\n\nlet mut iter = a.iter();\n\nassert_eq!(iter.rfind(|&&x| x == 2), Some(&2));\n\n// we can still use `iter`, as there are more elements.\nassert_eq!(iter.next_back(), Some(&1));\n```","links":{"`None`":"2:47811:177","Some":"2:47813:220"},"attrs":["#[stable(feature = \"iter_rfind\", since = \"1.27.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["predicate",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3624:132","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3203-0:4451:2270":{"id":"b:2:3203-0:4451:2270","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BoolValueParser","id":"0:4451:2270","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3206:2391"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1858":{"id":"0:1858","crate_id":0,"name":null,"span":{"filename":"src/error/kind.rs","begin":[436,0],"end":[440,1]},"visibility":{"restricted":{"parent":"0:1855:791","path":"::error::kind"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10569:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4594:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1859:667"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:331:2945":{"id":"0:331:2945","crate_id":0,"name":"visible_short_alias","span":{"filename":"src/builder/arg.rs","begin":[387,4],"end":[392,5]},"visibility":"public","docs":"Add an alias, which functions as a visible short flag.\n\nLike [`Arg::short_alias`], except that they are visible inside the help message.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n            .arg(Arg::new(\"test\")\n                .long(\"test\")\n                .visible_short_alias('t')\n                .takes_value(true))\n       .get_matches_from(vec![\n            \"prog\", \"-t\", \"coffee\"\n        ]);\nassert!(m.contains_id(\"test\"));\nassert_eq!(m.value_of(\"test\"), Some(\"coffee\"));\n```","links":{"`Arg::short_alias`":"0:325:2912"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["name",{"kind":"primitive","inner":"char"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3241":{"id":"0:3241","crate_id":0,"name":null,"span":{"filename":"src/util/fnv.rs","begin":[13,0],"end":[22,1]},"visibility":{"restricted":{"parent":"0:3226:8574","path":"::util::fnv"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"2:10800:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Display","id":"2:10569:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Key","id":"0:3239:2795","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"generic","inner":"T"},"items":["0:3243:6034"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3398:2444":{"id":"0:3398:2444","crate_id":0,"name":"AllArgsOverrideSelf","span":{"filename":"src/builder/app_settings.rs","begin":[151,4],"end":[151,23]},"visibility":"default","docs":"Deprecated, replaced with [`ArgAction::Set`][super::ArgAction::Set]\n\nThe new actions (`ArgAction::Set`, `ArgAction::SetTrue`) do this by default.\n\nSee `ArgAction::StoreValue` and `ArgAction::IncOccurrence` for how to migrate","links":{"super::ArgAction::Set":"0:3352:2336"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"2:8930:9961":{"id":"2:8930:9961","crate_id":2,"name":"inspect","span":null,"visibility":"default","docs":"Does something with each element of an iterator, passing the value on.\n\nWhen using iterators, you'll often chain several of them together.\nWhile working on such code, you might want to check out what's\nhappening at various parts in the pipeline. To do that, insert\na call to `inspect()`.\n\nIt's more common for `inspect()` to be used as a debugging tool than to\nexist in your final code, but applications may find it useful in certain\nsituations when errors need to be logged before being discarded.\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 4, 2, 3];\n\n// this iterator sequence is complex.\nlet sum = a.iter()\n    .cloned()\n    .filter(|x| x % 2 == 0)\n    .fold(0, |sum, i| sum + i);\n\nprintln!(\"{sum}\");\n\n// let's add some inspect() calls to investigate what's happening\nlet sum = a.iter()\n    .cloned()\n    .inspect(|x| println!(\"about to filter: {x}\"))\n    .filter(|x| x % 2 == 0)\n    .inspect(|x| println!(\"made it through filter: {x}\"))\n    .fold(0, |sum, i| sum + i);\n\nprintln!(\"{sum}\");\n```\n\nThis will print:\n\n```text\n6\nabout to filter: 1\nabout to filter: 4\nmade it through filter: 4\nabout to filter: 2\nmade it through filter: 2\nabout to filter: 3\n6\n```\n\nLogging errors before discarding them:\n\n```\nlet lines = [\"1\", \"2\", \"a\"];\n\nlet sum: i32 = lines\n    .iter()\n    .map(|line| line.parse::<i32>())\n    .inspect(|num| {\n        if let Err(ref e) = *num {\n            println!(\"Parsing error: {e}\");\n        }\n    })\n    .filter_map(Result::ok)\n    .sum();\n\nprintln!(\"Sum: {sum}\");\n```\n\nThis will print:\n\n```text\nParsing error: invalid digit found in string\nSum: 3\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Inspect","id":"2:46996:9059","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3624:132","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2473":{"id":"0:2473","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/mod.rs","begin":[17,32],"end":[17,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"import","inner":{"source":"arg_matches::Values","name":"Values","id":"0:4778:1685","glob":false}},"0:2291:4836":{"id":"0:2291:4836","crate_id":0,"name":"size_hint","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1620,4],"end":[1622,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2307":{"id":"0:2307","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1674,0],"end":[1678,1]},"visibility":{"restricted":{"parent":"0:2092:7461","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["advance_back_by","try_rfold","rfind","nth_back","rfold"],"trait":{"name":"DoubleEndedIterator","id":"2:8716:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:4778:1685","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:2309:7848"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:874:5334":{"id":"0:874:5334","crate_id":0,"name":"next_help_heading","span":{"filename":"src/builder/command.rs","begin":[1919,4],"end":[1925,5]},"visibility":"public","docs":"Set the default section heading for future args.\n\nThis will be used for any arg that hasn't had [`Arg::help_heading`] called.\n\nThis is useful if the default `OPTIONS` or `ARGS` headings are\nnot specific enough for one's use case.\n\nFor subcommands, see [`Command::subcommand_help_heading`]\n\n[`App::arg`]: Command::arg()\n[`Arg::help_heading`]: crate::Arg::help_heading()","links":{"`Command::subcommand_help_heading`":"0:915:5825","crate::Arg::help_heading()":"0:411:2845"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["heading",{"kind":"generic","inner":"O"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"O"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3513:8789":{"id":"2:3513:8789","crate_id":2,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3515:184","2:3516:1249"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:844:228":{"id":"5:844:228","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:845:4342","5:846:4983","5:847:9984"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3627:133":{"id":"2:3627:133","crate_id":2,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3629:184","2:3630:385"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4416:8985":{"id":"1:4416:8985","crate_id":1,"name":"read_to_string","span":null,"visibility":"default","docs":"Read all bytes until EOF in this source, appending them to `buf`.\n\nIf successful, this function returns the number of bytes which were read\nand appended to `buf`.\n\n# Errors\n\nIf the data in this stream is *not* valid UTF-8 then an error is\nreturned and `buf` is unchanged.\n\nSee [`read_to_end`] for other error semantics.\n\n[`read_to_end`]: Read::read_to_end\n\n# Examples\n\n[`File`]s implement `Read`:\n\n[`File`]: crate::fs::File\n\n```no_run\nuse std::io;\nuse std::io::prelude::*;\nuse std::fs::File;\n\nfn main() -> io::Result<()> {\n    let mut f = File::open(\"foo.txt\")?;\n    let mut buffer = String::new();\n\n    f.read_to_string(&mut buffer)?;\n    Ok(())\n}\n```\n\n(See also the [`std::fs::read_to_string`] convenience function for\nreading from a file.)\n\n[`std::fs::read_to_string`]: crate::fs::read_to_string","links":{"crate::fs::File":"1:2909:129","Read::read_to_end":"1:4415:21314","crate::fs::read_to_string":"1:2917:8985"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:8479:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"1:3803:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13737:6298":{"id":"2:13737:6298","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49776:8930","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:854:4787":{"id":"0:854:4787","crate_id":0,"name":"before_long_help","span":{"filename":"src/builder/command.rs","begin":[1601,4],"end":[1604,5]},"visibility":"public","docs":"Free-form help text for before auto-generated long help (`--help`).\n\nThis is often used for header, copyright, or license information.\n\nIf [`Command::before_help`] is not specified, this message will be displayed for `-h`.\n\n# Examples\n\n```no_run\n# use clap::Command;\nCommand::new(\"myprog\")\n    .before_long_help(\"Some verbose and long info I'd like to appear before the help info\")\n# ;\n```","links":{"`Command::before_help`":"0:852:4786"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["help",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4488:21345":{"id":"1:4488:21345","crate_id":1,"name":"stream_len","span":null,"visibility":"default","docs":"Returns the length of this stream (in bytes).\n\nThis method is implemented using up to three seek operations. If this\nmethod returns successfully, the seek position is unchanged (i.e. the\nposition before calling this method is the same as afterwards).\nHowever, if this method returns an error, the seek position is\nunspecified.\n\nIf you need to obtain the length of *many* streams and you don't care\nabout the seek position afterwards, you can reduce the number of seek\noperations by simply calling `seek(SeekFrom::End(0))` and using its\nreturn value (it is also the stream length).\n\nNote that length of a stream can change over time (for example, when\ndata is appended to a file). So calling this method multiple times does\nnot necessarily return the same length each time.\n\n# Example\n\n```no_run\n#![feature(seek_stream_len)]\nuse std::{\n    io::{self, Seek},\n    fs::File,\n};\n\nfn main() -> io::Result<()> {\n    let mut f = File::open(\"foo.txt\")?;\n\n    let len = f.stream_len()?;\n    println!(\"The file is currently {len} bytes long\");\n    Ok(())\n}\n```","links":{},"attrs":["#[unstable(feature = \"seek_stream_len\", issue = \"59359\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"1:3803:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1495":{"id":"0:1495","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1486,0],"end":[1490,1]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"std::convert::TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:3254:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangedU64ValueParser","id":"0:4439:2262","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:1497:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:3370:216-0:4778:1685":{"id":"a:2:3370:216-0:4778:1685","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:4778:1685","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1503:6597":{"id":"0:1503:6597","crate_id":0,"name":"Value","span":{"filename":"src/builder/value_parser.rs","begin":[1514,4],"end":[1514,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"primitive","inner":"bool"}}},"0:29":{"id":"0:29","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[109,30],"end":[109,44]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::derive::CommandFactory","name":"CommandFactory","id":"0:153:1669","glob":false}},"0:807:5000":{"id":"0:807:5000","crate_id":0,"name":"write_help","span":{"filename":"src/builder/command.rs","begin":[796,4],"end":[802,5]},"visibility":"public","docs":"Writes the short help message (`-h`) to a [`io::Write`] object.\n\nSee also [`Command::write_long_help`].\n\n# Examples\n\n```rust\n# use clap::Command;\nuse std::io;\nlet mut cmd = Command::new(\"myprog\");\nlet mut out = io::stdout();\ncmd.write_help(&mut out).expect(\"failed to write to stdout\");\n```\n[`io::Write`]: std::io::Write\n[`-h` (short)]: Arg::help()\n[`--help` (long)]: Arg::long_help()","links":{"`Command::write_long_help`":"0:809:5020","std::io::Write":"1:4467:2035"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["w",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"W"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3801:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"W","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"io::Write","id":"1:4467:2035","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6738:10987":{"id":"1:6738:10987","crate_id":1,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6739:28851"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3522:1252":{"id":"2:3522:1252","crate_id":2,"name":"shr","span":null,"visibility":"default","docs":"Performs the `>>` operation.\n\n# Examples\n\n```\nassert_eq!(5u8 >> 1, 2);\nassert_eq!(2u8 >> 1, 1);\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"generic","inner":"Rhs"}]],"output":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Shr","id":"2:3519:8790","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:4352:238":{"id":"0:4352:238","crate_id":0,"name":"Unknown","span":{"filename":"src/builder/value_hint.rs","begin":[32,4],"end":[32,11]},"visibility":"default","docs":"Default value if hint is not specified. Follows shell default behavior, which is usually\nauto-completing filenames.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"1:5530:1322":{"id":"1:5530:1322","crate_id":1,"name":"size","span":null,"visibility":"default","docs":"Returns the total size of this file in bytes.\n\n# Examples\n\n```no_run\nuse std::fs;\nuse std::os::unix::fs::MetadataExt;\nuse std::io;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    let file_size = meta.size();\n    Ok(())\n}\n```","links":{},"attrs":["#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1367:851":{"id":"0:1367:851","crate_id":0,"name":"map","span":{"filename":"src/builder/value_parser.rs","begin":[677,4],"end":[683,5]},"visibility":"default","docs":"Adapt a `TypedValueParser` from one value to another\n\n# Example\n\n```rust\n# use clap::Command;\n# use clap::Arg;\n# use clap::builder::TypedValueParser as _;\n# use clap::builder::BoolishValueParser;\nlet cmd = Command::new(\"mycmd\")\n    .arg(\n        Arg::new(\"flag\")\n            .long(\"flag\")\n            .action(clap::ArgAction::Set)\n            .value_parser(\n                BoolishValueParser::new()\n                .map(|b| -> usize {\n                    if b { 10 } else { 5 }\n                })\n            )\n    );\n\nlet matches = cmd.clone().try_get_matches_from([\"mycmd\", \"--flag=true\", \"--flag=true\"]).unwrap();\nassert!(matches.contains_id(\"flag\"));\nassert_eq!(\n    matches.get_one::<usize>(\"flag\").copied(),\n    Some(10)\n);\n\nlet matches = cmd.try_get_matches_from([\"mycmd\", \"--flag=false\"]).unwrap();\nassert!(matches.contains_id(\"flag\"));\nassert_eq!(\n    matches.get_one::<usize>(\"flag\").copied(),\n    Some(5)\n);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["func",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"MapValueParser","id":"0:4475:6691","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Fn","id":"2:3621:131","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Value","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:1362:2264","args":null}}}],"output":{"kind":"generic","inner":"T"}}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2865-0:4451:2270":{"id":"b:2:2865-0:4451:2270","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BoolValueParser","id":"0:4451:2270","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2867:2792"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1578:2257":{"id":"0:1578:2257","crate_id":0,"name":"value_parser","span":{"filename":"src/builder/value_parser.rs","begin":[1955,4],"end":[1959,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"qualified_path","inner":{"name":"Parser","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:1558:2266","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23147:21817":{"id":"2:23147:21817","crate_id":2,"name":"reduce_product","span":null,"visibility":"default","docs":"Returns the product of the lanes of the vector, with wrapping multiplication.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Scalar","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdUint","id":"2:23142:11395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:2:2868-0:4806:1682":{"id":"b:2:2868-0:4806:1682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2862:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:4806:1682","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2870:27181"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4409:667":{"id":"0:4409:667","crate_id":0,"name":"fmt","span":{"filename":"src/builder/value_parser.rs","begin":[808,22],"end":[808,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10511:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1310:930":{"id":"0:1310:930","crate_id":0,"name":"new","span":{"filename":"src/builder/value_parser.rs","begin":[108,4],"end":[114,5]},"visibility":"public","docs":"Custom parser for argument values\n\nTo create a custom parser, see [`TypedValueParser`]\n\nPre-existing implementations include:\n- [`EnumValueParser`] and  [`PossibleValuesParser`] for static enumerated values\n- [`BoolishValueParser`] and [`FalseyValueParser`] for alternative `bool` implementations\n- [`RangedI64ValueParser`] and [`RangedU64ValueParser`]\n- [`NonEmptyStringValueParser`]\n\n# Example\n\n```rust\ntype EnvVar = (String, Option<String>);\nfn parse_env_var(env: &str) -> Result<EnvVar, std::io::Error> {\n    if let Some((var, value)) = env.split_once('=') {\n        Ok((var.to_owned(), Some(value.to_owned())))\n    } else {\n        Ok((env.to_owned(), None))\n    }\n}\n\nlet mut cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"env\")\n            .value_parser(clap::builder::ValueParser::new(parse_env_var))\n            .required(true)\n    );\n\nlet m = cmd.try_get_matches_from_mut([\"cmd\", \"key=value\"]).unwrap();\nlet port: &EnvVar = m.get_one(\"env\")\n    .expect(\"required\");\nassert_eq!(*port, (\"key\".into(), Some(\"value\".into())));\n```","links":{"`EnumValueParser`":"0:4410:2272","`PossibleValuesParser`":"0:4420:2260","`FalseyValueParser`":"0:4457:2273","`RangedI64ValueParser`":"0:4427:2261","`NonEmptyStringValueParser`":"0:4469:2274","`BoolishValueParser`":"0:4463:2271","`TypedValueParser`":"0:1362:2264","`RangedU64ValueParser`":"0:4439:2262"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["other",{"kind":"generic","inner":"P"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"TypedValueParser","id":"0:1362:2264","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Value","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"","id":"0:1362:2264","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5570:10978":{"id":"1:5570:10978","crate_id":1,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5571:28845"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10409:10989","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:818:5072":{"id":"0:818:5072","crate_id":0,"name":"args_override_self","span":{"filename":"src/builder/command.rs","begin":[978,4],"end":[984,5]},"visibility":"public","docs":"Deprecated, replaced with [`ArgAction::Set`][super::ArgAction::Set]\n\nThe new actions (`ArgAction::Set`, `ArgAction::SetTrue`) do this by default.\n\nSee `ArgAction::StoreValue` and `ArgAction::IncOccurrence` for how to migrate","links":{"super::ArgAction::Set":"0:3352:2336"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:472:4165":{"id":"0:472:4165","crate_id":0,"name":"get_visible_short_aliases","span":{"filename":"src/builder/arg.rs","begin":[4429,4],"end":[4441,5]},"visibility":"public","docs":"Get visible short aliases for this argument, if any","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7898:240","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"char"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23076:21817":{"id":"2:23076:21817","crate_id":2,"name":"reduce_product","span":null,"visibility":"default","docs":"Reducing multiply.  Returns the product of the lanes of the vector.\n\n# Examples\n\n```\n# #![feature(portable_simd)]\n# #[cfg(feature = \"as_crate\")] use core_simd::simd;\n# #[cfg(not(feature = \"as_crate\"))] use core::simd;\n# use simd::{f32x2, SimdFloat};\nlet v = f32x2::from_array([3., 4.]);\nassert_eq!(v.reduce_product(), 12.);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Scalar","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdFloat","id":"2:23053:11401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1236":{"id":"0:1236","crate_id":0,"name":null,"span":{"filename":"src/builder/possible_value.rs","begin":[249,0],"end":[253,1]},"visibility":{"restricted":{"parent":"0:1203:2254","path":"::builder::possible_value"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:4294:1679","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":["0:1238:688"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3440:2567":{"id":"0:3440:2567","crate_id":0,"name":"DisableHelpSubcommand","span":{"filename":"src/builder/app_settings.rs","begin":[562,4],"end":[562,25]},"visibility":"default","docs":"Deprecated, replaced with [`Command::disable_help_subcommand`] and\n[`Command::is_disable_help_subcommand_set`]\n\nDerive: replace `#[clap(setting = DisableHelpSubcommand)]` with `#[clap(disable_help_subcommand = true)]`\n\nBuilder: replace `cmd.setting(DisableHelpSubcommand)` with `cmd.disable_help_subcommand(true)`","links":{"`Command::is_disable_help_subcommand_set`":"0:1000:5935","`Command::disable_help_subcommand`":"0:827:5124"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"0:1468:688":{"id":"0:1468:688","crate_id":0,"name":"from","span":{"filename":"src/builder/value_parser.rs","begin":[1282,4],"end":[1287,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["range",{"kind":"generic","inner":"B"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3382:225-0:4241:1674":{"id":"a:2:3382:225-0:4241:1674","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:4241:1674","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:2086":{"id":"0:2086","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/any_value.rs","begin":[84,0],"end":[95,1]},"visibility":{"restricted":{"parent":"0:2060:7460","path":"::parser::matches::any_value"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AnyValueId","id":"0:4707:2393","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2087:667"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:32189:1244":{"id":"2:32189:1244","crate_id":2,"name":"saturating_sub","span":null,"visibility":"public","docs":"Saturating integer subtraction. Computes `self - rhs`, saturating\nat the numeric bounds instead of overflowing.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(100u64.saturating_sub(27), 73);\nassert_eq!(13u64.saturating_sub(127), 0);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]","#[rustc_const_stable(feature = \"const_saturating_int_methods\", since =\n\"1.47.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4777:667":{"id":"0:4777:667","crate_id":0,"name":"fmt","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1607,16],"end":[1607,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10511:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:376:2254":{"id":"0:376:2254","crate_id":0,"name":"possible_value","span":{"filename":"src/builder/arg.rs","begin":[1653,4],"end":[1659,5]},"visibility":"public","docs":"Deprecated, replaced with [`Arg::value_parser(PossibleValuesParser::new(...))`]\n\nDerive: replace `#[clap(possible_value = <1>, possible_value = <2>, ...)]` with `#[clap(value_parser = [<1>, <2>])]`.\nIf the field is not a `String`, instead do `#[clap(value_parser = PossibleValueParser::new([<1>, <2>]).map(T::from_str))]`\n\nBuilder: replace `arg.possible_value(<1>).possible_value(<2>) with `arg.value_parser([<1>, <2>])`","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["value",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:4294:1679","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3207-0:4523:6999":{"id":"b:2:3207-0:4523:6999","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:4523:6999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3209:688"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1883:2051":{"id":"0:1883:2051","crate_id":0,"name":"print","span":{"filename":"src/error/mod.rs","begin":[155,4],"end":[157,5]},"visibility":"public","docs":"Prints formatted and colored error to `stdout` or `stderr` according to its error kind\n\n# Example\n```no_run\nuse clap::Command;\n\nmatch Command::new(\"Command\").try_get_matches() {\n    Ok(matches) => {\n        // do_something\n    },\n    Err(err) => {\n        err.print().expect(\"Error writing Error\");\n        // do_something\n    },\n};\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3801:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2925:125":{"id":"2:2925:125","crate_id":2,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2920:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"a:2:9533:7458-0:4404:2276":{"id":"a:2:9533:7458-0:4404:2276","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:9533:7458","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PathBufValueParser","id":"0:4404:2276","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:3203-0:4392:2263":{"id":"b:2:3203-0:4392:2263","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StringValueParser","id":"0:4392:2263","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3206:2391"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3179:2391":{"id":"2:3179:2391","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Converts this type into the (usually inferred) input type.","links":{},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"a:2:9532:7459-0:4294:1679":{"id":"a:2:9532:7459-0:4294:1679","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:9532:7459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:4294:1679","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:2353:4836":{"id":"0:2353:4836","crate_id":0,"name":"size_hint","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1812,4],"end":[1814,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3973:3101":{"id":"0:3973:3101","crate_id":0,"name":"MultipleOccurrences","span":{"filename":"src/builder/arg_settings.rs","begin":[82,4],"end":[82,23]},"visibility":"default","docs":"Deprecated, replaced with [`Arg::action`] ([Issue #3772](https://github.com/clap-rs/clap/issues/3772))","links":{"`Arg::action`":"0:352:2249"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"2:8885:8062":{"id":"2:8885:8062","crate_id":2,"name":"advance_by","span":null,"visibility":"default","docs":"Advances the iterator by `n` elements.\n\nThis method will eagerly skip `n` elements by calling [`next`] up to `n`\ntimes until [`None`] is encountered.\n\n`advance_by(n)` will return [`Ok(())`][Ok] if the iterator successfully advances by\n`n` elements, or [`Err(k)`][Err] if [`None`] is encountered, where `k` is the number\nof elements the iterator is advanced by before running out of elements (i.e. the\nlength of the iterator). Note that `k` is always less than `n`.\n\nCalling `advance_by(0)` can do meaningful work, for example [`Flatten`]\ncan advance its outer iterator until it finds an inner iterator that is not empty, which\nthen often allows it to return a more accurate `size_hint()` than in its initial state.\n\n[`Flatten`]: crate::iter::Flatten\n[`next`]: Iterator::next\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(iter_advance_by)]\n\nlet a = [1, 2, 3, 4];\nlet mut iter = a.iter();\n\nassert_eq!(iter.advance_by(2), Ok(()));\nassert_eq!(iter.next(), Some(&3));\nassert_eq!(iter.advance_by(0), Ok(()));\nassert_eq!(iter.advance_by(100), Err(1)); // only `&4` was skipped\n```","links":{"Ok":"2:47937:178","`None`":"2:47811:177","Iterator::next":"2:8875:932","crate::iter::Flatten":"2:6716:7473","Err":"2:47940:127"},"attrs":["#[unstable(feature = \"iter_advance_by\", reason = \"recently added\", issue =\n\"77404\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6194:2740":{"id":"5:6194:2740","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13833:21135"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8479:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13831:1865":{"id":"2:13831:1865","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4474:667":{"id":"0:4474:667","crate_id":0,"name":"fmt","span":{"filename":"src/builder/value_parser.rs","begin":[1780,22],"end":[1780,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10511:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2871":{"id":"0:2871","crate_id":0,"name":null,"span":{"filename":"src/mkeymap.rs","begin":[56,0],"end":[63,1]},"visibility":{"restricted":{"parent":"0:2842:1714","path":"::mkeymap"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2920:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"KeyType","id":"0:4973:6885","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2872:611"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3207-0:4796:1683":{"id":"b:2:3207-0:4796:1683","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsValues","id":"0:4796:1683","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3209:688"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:6570:14224":{"id":"1:6570:14224","crate_id":1,"name":"create_pidfd","span":null,"visibility":"default","docs":"Sets whether a [`PidFd`](struct@PidFd) should be created for the [`Child`]\nspawned by this [`Command`].\nBy default, no pidfd will be created.\n\nThe pidfd can be retrieved from the child with [`pidfd`] or [`take_pidfd`].\n\nA pidfd will only be created if it is possible to do so\nin a guaranteed race-free manner (e.g. if the `clone3` system call\nis supported). Otherwise, [`pidfd`] will return an error.\n\n[`Command`]: process::Command\n[`Child`]: process::Child\n[`pidfd`]: fn@ChildExt::pidfd\n[`take_pidfd`]: ChildExt::take_pidfd","links":{"process::Child":"1:7415:8590","process::Command":"1:7477:1660","fn@ChildExt::pidfd":"1:6567:15269","ChildExt::take_pidfd":"1:6568:28909","struct@PidFd":"1:11281:11010"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["val",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Command","id":"1:7477:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:862:5282":{"id":"0:862:5282","crate_id":0,"name":"override_help","span":{"filename":"src/builder/command.rs","begin":[1732,4],"end":[1735,5]},"visibility":"public","docs":"Overrides the `clap` generated help message (both `-h` and `--help`).\n\nThis should only be used when the auto-generated message does not suffice.\n\n**NOTE:** This **only** replaces the help message for the current\ncommand, meaning if you are using subcommands, those help messages will\nstill be auto-generated unless you specify a [`Command::override_help`] for\nthem as well.\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg};\nCommand::new(\"myapp\")\n    .override_help(\"myapp v1.0\\n\\\n           Does awesome things\\n\\\n           (C) me@mail.com\\n\\n\\\n\n           USAGE: myapp <opts> <command>\\n\\n\\\n\n           Options:\\n\\\n           -h, --help       Display this message\\n\\\n           -V, --version    Display version info\\n\\\n           -s <stuff>       Do something with stuff\\n\\\n           -v               Be verbose\\n\\n\\\n\n           Commands:\\n\\\n           help             Print this message\\n\\\n           work             Do some work\")\n# ;\n```","links":{"`Command::override_help`":"0:862:5282"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["help",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4843":{"id":"0:4843","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/value_source.rs","begin":[2,40],"end":[2,42]},"visibility":{"restricted":{"parent":"0:2440:7462","path":"::parser::matches::value_source"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:3379:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4828:1684","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:623:4060":{"id":"0:623:4060","crate_id":0,"name":"conflicts_with","span":{"filename":"src/builder/arg_group.rs","begin":[401,4],"end":[404,5]},"visibility":"public","docs":"Specify an argument or group that must **not** be present when this group is.\n\nExclusion (aka conflict) rules function just like [argument exclusion rules], you can name\nother arguments or groups that must *not* be present when one of the arguments from this\ngroup are used.\n\n**NOTE:** The name provided may be an argument, or group name\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ArgGroup, ErrorKind};\nlet result = Command::new(\"myprog\")\n    .arg(Arg::new(\"flag\")\n        .short('f'))\n    .arg(Arg::new(\"color\")\n        .short('c'))\n    .arg(Arg::new(\"debug\")\n        .short('d'))\n    .group(ArgGroup::new(\"req_flags\")\n        .args(&[\"flag\", \"color\"])\n        .conflicts_with(\"debug\"))\n    .try_get_matches_from(vec![\"myprog\", \"-c\", \"-d\"]);\n// because we used an arg from the group, and the group conflicts with \"-d\", it's an error\nassert!(result.is_err());\nlet err = result.unwrap_err();\nassert_eq!(err.kind(), ErrorKind::ArgumentConflict);\n```\n[argument exclusion rules]: crate::Arg::conflicts_with()","links":{"crate::Arg::conflicts_with()":"0:457:4060"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["id",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Key","id":"0:3239:2795","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3222:1435":{"id":"2:3222:1435","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"name":"TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:158:2124":{"id":"0:158:2124","crate_id":0,"name":"command_for_update","span":{"filename":"src/derive.rs","begin":[267,4],"end":[270,5]},"visibility":"default","docs":"Build a [`Command`] that can update `self`.\n\nSee [`FromArgMatches::update_from_arg_matches_mut`] for updating `self`.","links":{"`Command`":"0:755:1660","`FromArgMatches::update_from_arg_matches_mut`":"0:166:2125"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Command","id":"0:755:1660","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4803":{"id":"0:4803","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1739,16],"end":[1739,21]},"visibility":{"restricted":{"parent":"0:2092:7461","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsValues","id":"0:4796:1683","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:4805:667"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1391":{"id":"0:1391","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[777,0],"end":[797,1]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["map","parse","possible_values"],"trait":{"name":"TypedValueParser","id":"0:1362:2264","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsStringValueParser","id":"0:4398:2275","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1392:6597","0:1393:6637","0:1394:2102"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:8929:9960":{"id":"2:8929:9960","crate_id":2,"name":"fuse","span":null,"visibility":"default","docs":"Creates an iterator which ends after the first [`None`].\n\nAfter an iterator returns [`None`], future calls may or may not yield\n[`Some(T)`] again. `fuse()` adapts an iterator, ensuring that after a\n[`None`] is given, it will always return [`None`] forever.\n\nNote that the [`Fuse`] wrapper is a no-op on iterators that implement\nthe [`FusedIterator`] trait. `fuse()` may therefore behave incorrectly\nif the [`FusedIterator`] trait is improperly implemented.\n\n[`Some(T)`]: Some\n[`FusedIterator`]: crate::iter::FusedIterator\n\n# Examples\n\nBasic usage:\n\n```\n// an iterator which alternates between Some and None\nstruct Alternate {\n    state: i32,\n}\n\nimpl Iterator for Alternate {\n    type Item = i32;\n\n    fn next(&mut self) -> Option<i32> {\n        let val = self.state;\n        self.state = self.state + 1;\n\n        // if it's even, Some(i32), else None\n        if val % 2 == 0 {\n            Some(val)\n        } else {\n            None\n        }\n    }\n}\n\nlet mut iter = Alternate { state: 0 };\n\n// we can see our iterator going back and forth\nassert_eq!(iter.next(), Some(0));\nassert_eq!(iter.next(), None);\nassert_eq!(iter.next(), Some(2));\nassert_eq!(iter.next(), None);\n\n// however, once we fuse it...\nlet mut iter = iter.fuse();\n\nassert_eq!(iter.next(), Some(4));\nassert_eq!(iter.next(), None);\n\n// it will always return `None` after the first time.\nassert_eq!(iter.next(), None);\nassert_eq!(iter.next(), None);\nassert_eq!(iter.next(), None);\n```","links":{"`Fuse`":"2:46987:9058","`None`":"2:47811:177","Some":"2:47813:220","crate::iter::FusedIterator":"2:9153:8903"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Fuse","id":"2:46987:9058","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2865-0:4569:7000":{"id":"b:2:2865-0:4569:7000","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextValue","id":"0:4569:7000","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2867:2792"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1191":{"id":"0:1191","crate_id":0,"name":null,"span":{"filename":"src/builder/command.rs","begin":[5129,0],"end":[5169,1]},"visibility":{"restricted":{"parent":"0:649:1913","path":"::builder::command"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:3254:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:4241:1674","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":["0:1193:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:519:4269":{"id":"0:519:4269","crate_id":0,"name":"is_ignore_case_set","span":{"filename":"src/builder/arg.rs","begin":[4793,4],"end":[4795,5]},"visibility":"public","docs":"Reports whether [`Arg::ignore_case`] is set","links":{"`Arg::ignore_case`":"0:382:2236"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"26:31:7052":{"id":"26:31:7052","crate_id":26,"name":"set_color","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/termcolor-1.1.3/src/lib.rs","begin":[151,4],"end":[151,64]},"visibility":"default","docs":"Set the color settings of the writer.\n\nSubsequent writes to this writer will use these settings until either\n`reset` is called or new color settings are set.\n\nIf there was a problem setting the color settings, then an error is\nreturned.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["spec",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ColorSpec","id":"26:357:8558","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"1:3803:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1469":{"id":"0:1469","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1290,0],"end":[1294,1]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"std::convert::TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:3254:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:4427:2261","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:1471:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:4485:8988":{"id":"1:4485:8988","crate_id":1,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4486:7986","1:4487:21344","1:4488:21345","1:4489:21346"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:4368:6544":{"id":"0:4368:6544","crate_id":0,"name":"CommandWithArguments","span":{"filename":"src/builder/value_hint.rs","begin":[57,4],"end":[57,24]},"visibility":"default","docs":"Capture the remaining arguments as a command name and arguments for that command. This is\ncommon when writing shell wrappers that execute anther command, for example `sudo` or `env`.\n\nThis hint is special, the argument must be a positional argument and have\n[`.multiple_values(true)`] and Command must use [`Command::trailing_var_arg(true)`]. The result is that the\ncommand line `my_app ls -la /` will be parsed as `[\"ls\", \"-la\", \"/\"]` and clap won't try to\nparse the `-la` argument itself.\n\n[`Command::trailing_var_arg(true)`]: crate::Command::trailing_var_arg\n[`.multiple_values(true)`]: crate::Arg::multiple_values()","links":{"crate::Arg::multiple_values()":"0:355:3240","crate::Command::trailing_var_arg":"0:881:5447"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"0:3426:2522":{"id":"0:3426:2522","crate_id":0,"name":"SubcommandPrecedenceOverArg","span":{"filename":"src/builder/app_settings.rs","begin":[425,4],"end":[425,31]},"visibility":"default","docs":"Deprecated, replaced with [`Command::subcommand_precedence_over_arg`] and\n[`Command::is_subcommand_precedence_over_arg_set`]\n\nDerive: replace `#[clap(setting = SubcommandPrecedenceOverArg)]` with `#[clap(subcommand_precedence_over_arg = true)]`\n\nBuilder: replace `cmd.setting(SubcommandPrecedenceOverArg)` with `cmd.subcommand_precedence_over_arg(true)`","links":{"`Command::subcommand_precedence_over_arg`":"0:910:5702","`Command::is_subcommand_precedence_over_arg_set`":"0:1019:5969"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"0:3434:2550":{"id":"0:3434:2550","crate_id":0,"name":"NextLineHelp","span":{"filename":"src/builder/app_settings.rs","begin":[503,4],"end":[503,16]},"visibility":"default","docs":"Deprecated, replaced with [`Command::next_line_help`] and [`Command::is_next_line_help_set`]\n\nDerive: replace `#[clap(setting = NextLineHelp)]` with `#[clap(next_line_help = true)]`\n\nBuilder: replace `cmd.setting(NextLineHelp)` with `cmd.next_line_help(true)`","links":{"`Command::is_next_line_help_set`":"0:998:4243","`Command::next_line_help`":"0:825:3781"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"2:9043:8292":{"id":"2:9043:8292","crate_id":2,"name":"min","span":null,"visibility":"default","docs":"Returns the minimum element of an iterator.\n\nIf several elements are equally minimum, the first element is returned.\nIf the iterator is empty, [`None`] is returned.\n\nNote that [`f32`]/[`f64`] doesn't implement [`Ord`] due to NaN being\nincomparable. You can work around this by using [`Iterator::reduce`]:\n```\nassert_eq!(\n    [2.4, f32::NAN, 1.3]\n        .into_iter()\n        .reduce(f32::min)\n        .unwrap(),\n    1.3\n);\n```\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\nlet b: Vec<u32> = Vec::new();\n\nassert_eq!(a.iter().min(), Some(&1));\nassert_eq!(b.iter().min(), None);\n```","links":{"`f32`":"1:15886:8649","`None`":"2:47811:177","`f64`":"1:15887:8650","`Iterator::reduce`":"2:8983:9969","`Ord`":"2:2956:180"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"2:2956:180","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1567":{"id":"0:1567","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1933,0],"end":[1938,1]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ValueParserFactory","id":"0:1558:2266","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"std::path::PathBuf","id":"1:7132:189","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1568:1671","0:1569:2257"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:5:848-0:4404:2276":{"id":"b:5:848-0:4404:2276","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:844:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PathBufValueParser","id":"0:4404:2276","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:850:4342","5:851:4983","5:852:9984"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4311":{"id":"0:4311","crate_id":0,"name":null,"span":{"filename":"src/builder/possible_value.rs","begin":[29,32],"end":[29,41]},"visibility":{"restricted":{"parent":"0:1203:2254","path":"::builder::possible_value"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2920:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:4294:1679","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:4294:1679","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":["0:4313:611"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:400:3633":{"id":"0:400:3633","crate_id":0,"name":"default_missing_value_os","span":{"filename":"src/builder/arg.rs","begin":[2437,4],"end":[2439,5]},"visibility":"public","docs":"Value for the argument when the flag is present but no value is specified.\n\nSee [`Arg::default_missing_value`].\n\n[`Arg::default_missing_value`]: Arg::default_missing_value()\n[`OsStr`]: std::ffi::OsStr","links":{"Arg::default_missing_value()":"0:399:3629"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["val",{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"1:2654:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:32203:69461":{"id":"2:32203:69461","crate_id":2,"name":"wrapping_shr","span":null,"visibility":"public","docs":"Panic-free bitwise shift-right; yields `self >> mask(rhs)`,\nwhere `mask` removes any high-order bits of `rhs` that\nwould cause the shift to exceed the bitwidth of the type.\n\nNote that this is *not* the same as a rotate-right; the\nRHS of a wrapping shift-right is restricted to the range\nof the type, rather than the bits shifted out of the LHS\nbeing returned to the other end. The primitive integer\ntypes all implement a [`rotate_right`](Self::rotate_right) function,\nwhich may be what you want instead.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(128u64.wrapping_shr(7), 1);\nassert_eq!(128u64.wrapping_shr(128), 128);\n```","links":{"Self::rotate_right":"2:32157:1133"},"attrs":["#[stable(feature = \"num_wrapping\", since = \"1.2.0\")]","#[rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3213-0:4693:7387":{"id":"b:2:3213-0:4693:7387","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3183:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4693:7387","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3216:128","2:3217:1436"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:9532:7459-0:4241:1674":{"id":"a:2:9532:7459-0:4241:1674","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:9532:7459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:4241:1674","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"0:1326":{"id":"0:1326","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[323,0],"end":[328,1]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":"Create an `i64` [`ValueParser`] from a `N..M` range\n\nSee [`RangedI64ValueParser`] for more control over the output type.\n\nSee also [`RangedU64ValueParser`]\n\n# Examples\n\n```rust\nlet mut cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"port\")\n            .long(\"port\")\n            .value_parser(3000..4000)\n            .takes_value(true)\n            .required(true)\n    );\n\nlet m = cmd.try_get_matches_from_mut([\"cmd\", \"--port\", \"3001\"]).unwrap();\nlet port: i64 = *m.get_one(\"port\")\n    .expect(\"required\");\nassert_eq!(port, 3001);\n```","links":{"`ValueParser`":"0:1294:2265","`RangedI64ValueParser`":"0:4427:2261","`RangedU64ValueParser`":"0:4439:2262"},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Range","id":"2:46188:197","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i64"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1294:2265","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1327:688"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:323:278":{"id":"0:323:278","crate_id":0,"name":"alias","span":{"filename":"src/builder/arg.rs","begin":[251,4],"end":[254,5]},"visibility":"public","docs":"Add an alias, which functions as a hidden long flag.\n\nThis is more efficient, and easier than creating multiple hidden arguments as one only\nneeds to check for the existence of this command, and not all variants.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n            .arg(Arg::new(\"test\")\n            .long(\"test\")\n            .alias(\"alias\")\n            .takes_value(true))\n       .get_matches_from(vec![\n            \"prog\", \"--alias\", \"cool\"\n        ]);\nassert!(m.contains_id(\"test\"));\nassert_eq!(m.value_of(\"test\"), Some(\"cool\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["name",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8879:4836":{"id":"2:8879:4836","crate_id":2,"name":"size_hint","span":null,"visibility":"default","docs":"Returns the bounds on the remaining length of the iterator.\n\nSpecifically, `size_hint()` returns a tuple where the first element\nis the lower bound, and the second element is the upper bound.\n\nThe second half of the tuple that is returned is an <code>[Option]<[usize]></code>.\nA [`None`] here means that either there is no known upper bound, or the\nupper bound is larger than [`usize`].\n\n# Implementation notes\n\nIt is not enforced that an iterator implementation yields the declared\nnumber of elements. A buggy iterator may yield less than the lower bound\nor more than the upper bound of elements.\n\n`size_hint()` is primarily intended to be used for optimizations such as\nreserving space for the elements of the iterator, but must not be\ntrusted to e.g., omit bounds checks in unsafe code. An incorrect\nimplementation of `size_hint()` should not lead to memory safety\nviolations.\n\nThat said, the implementation should provide a correct estimation,\nbecause otherwise it would be a violation of the trait's protocol.\n\nThe default implementation returns <code>(0, [None])</code> which is correct for any\niterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\nlet mut iter = a.iter();\n\nassert_eq!((3, Some(3)), iter.size_hint());\nlet _ = iter.next();\nassert_eq!((2, Some(2)), iter.size_hint());\n```\n\nA more complex example:\n\n```\n// The even numbers in the range of zero to nine.\nlet iter = (0..10).filter(|x| x % 2 == 0);\n\n// We might iterate from zero to ten times. Knowing that it's five\n// exactly wouldn't be possible without executing filter().\nassert_eq!((0, Some(10)), iter.size_hint());\n\n// Let's add five more numbers with chain()\nlet iter = (0..10).filter(|x| x % 2 == 0).chain(15..20);\n\n// now both bounds are increased by five\nassert_eq!((5, Some(15)), iter.size_hint());\n```\n\nReturning `None` for an upper bound:\n\n```\n// an infinite iterator has no upper bound\n// and the maximum possible lower bound\nlet iter = 0..;\n\nassert_eq!((usize::MAX, None), iter.size_hint());\n```","links":{"Option":"2:47809:179","usize":"1:15899:8662","`None`":"2:47811:177","`usize`":"1:15899:8662","None":"2:47811:177"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2276:7848":{"id":"0:2276:7848","crate_id":0,"name":"next_back","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1565,4],"end":[1567,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"2:8873:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13769:67826":{"id":"2:13769:67826","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"str::split":"2:13760:6983","prim@char":"1:15876:8642","`DoubleEndedIterator`":"2:8716:121","str::rsplit_terminator":"2:13772:67827","self::pattern":"2:13336:8923"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:49840:8951","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13346:8917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:431:3910":{"id":"0:431:3910","crate_id":0,"name":"default_value_ifs_os","span":{"filename":"src/builder/arg.rs","begin":[3485,4],"end":[3493,5]},"visibility":"public","docs":"Provides multiple conditional default values in the exact same manner as\n[`Arg::default_value_ifs`] only using [`OsStr`]s instead.\n\n[`Arg::default_value_ifs`]: Arg::default_value_ifs()\n[`OsStr`]: std::ffi::OsStr","links":{"std::ffi::OsStr":"1:2654:182","Arg::default_value_ifs()":"0:429:3905"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["ifs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"tuple","inner":[{"kind":"generic","inner":"T"},{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"1:2654:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}}},{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"1:2654:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}}}]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Key","id":"0:3239:2795","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10821:10571":{"id":"2:10821:10571","crate_id":2,"name":"write_i32","span":null,"visibility":"default","docs":"Writes a single `i32` into this hasher.","links":{},"attrs":["#[stable(feature = \"hasher_write\", since = \"1.3.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"primitive","inner":"i32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23142:11395":{"id":"2:23142:11395","crate_id":2,"name":"SimdUint","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23143:21797","2:23144:1243","2:23145:1244","2:23146:21816","2:23147:21817","2:23148:21818","2:23149:21819","2:23150:21825","2:23151:21826","2:23152:21827"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3380:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23155:10989","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"a:2:3370:216-0:3968:1678":{"id":"a:2:3370:216-0:3968:1678","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgSettings","id":"0:3968:1678","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:14548:26907":{"id":"2:14548:26907","crate_id":2,"name":"grow","span":null,"visibility":"default","docs":"Attempts to extend the memory block.\n\nReturns a new [`NonNull<[u8]>`][NonNull] containing a pointer and the actual size of the allocated\nmemory. The pointer is suitable for holding data described by `new_layout`. To accomplish\nthis, the allocator may extend the allocation referenced by `ptr` to fit the new layout.\n\nIf this returns `Ok`, then ownership of the memory block referenced by `ptr` has been\ntransferred to this allocator. The memory may or may not have been freed, and should be\nconsidered unusable.\n\nIf this method returns `Err`, then ownership of the memory block has not been transferred to\nthis allocator, and the contents of the memory block are unaltered.\n\n# Safety\n\n* `ptr` must denote a block of memory [*currently allocated*] via this allocator.\n* `old_layout` must [*fit*] that block of memory (The `new_layout` argument need not fit it.).\n* `new_layout.size()` must be greater than or equal to `old_layout.size()`.\n\nNote that `new_layout.align()` need not be the same as `old_layout.align()`.\n\n[*currently allocated*]: #currently-allocated-memory\n[*fit*]: #memory-fitting\n\n# Errors\n\nReturns `Err` if the new layout does not meet the allocator's size and alignment\nconstraints of the allocator, or if growing otherwise fails.\n\nImplementations are encouraged to return `Err` on memory exhaustion rather than panicking or\naborting, but this is not a strict requirement. (Specifically: it is *legal* to implement\nthis trait atop an underlying native allocation library that aborts on memory exhaustion.)\n\nClients wishing to abort computation in response to an allocation error are encouraged to\ncall the [`handle_alloc_error`] function, rather than directly invoking `panic!` or similar.\n\n[`handle_alloc_error`]: ../../alloc/alloc/fn.handle_alloc_error.html","links":{"NonNull":"2:2391:9139"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["ptr",{"kind":"resolved_path","inner":{"name":"NonNull","id":"2:2391:9139","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}],["old_layout",{"kind":"resolved_path","inner":{"name":"Layout","id":"2:50749:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["new_layout",{"kind":"resolved_path","inner":{"name":"Layout","id":"2:50749:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"NonNull","id":"2:2391:9139","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"AllocError","id":"2:50778:10147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:32179:69446":{"id":"2:32179:69446","crate_id":2,"name":"checked_ilog2","span":null,"visibility":"public","docs":"Returns the base 2 logarithm of the number, rounded down.\n\nReturns `None` if the number is zero.\n\n# Examples\n\n```\n#![feature(int_log)]\nassert_eq!(2u64.checked_ilog2(), Some(1));\n```","links":{},"attrs":["#[unstable(feature = \"int_log\", issue = \"70887\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:369:2838":{"id":"0:369:2838","crate_id":0,"name":"validator_os","span":{"filename":"src/builder/arg.rs","begin":[1588,4],"end":[1597,5]},"visibility":"public","docs":"Deprecated, replaced with [`Arg::value_parser(...)`]","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3624:132","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"1:2654:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"O"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'help"}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:2245","args":{"angle_bracketed":{"args":[{"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"2:3278:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"2:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"2:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:356:3259":{"id":"0:356:3259","crate_id":0,"name":"number_of_values","span":{"filename":"src/builder/arg.rs","begin":[1255,4],"end":[1258,5]},"visibility":"public","docs":"The number of values allowed for this argument.\n\nFor example, if you had a\n`-f <file>` argument where you wanted exactly 3 'files' you would set\n`.number_of_values(3)`, and this argument wouldn't be satisfied unless the user provided\n3 and only 3 values.\n\n**NOTE:** Does *not* require [`Arg::multiple_occurrences(true)`] to be set. Setting\n[`Arg::multiple_occurrences(true)`] would allow `-f <file> <file> <file> -f <file> <file> <file>` where\nas *not* setting it would only allow one occurrence of this argument.\n\n**NOTE:** implicitly sets [`Arg::takes_value(true)`] and [`Arg::multiple_values(true)`].\n\n# Examples\n\n```rust\n# use clap::{Command, Arg};\nArg::new(\"file\")\n    .short('f')\n    .number_of_values(3);\n```\n\nNot supplying the correct number of values is an error\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"file\")\n        .takes_value(true)\n        .number_of_values(2)\n        .short('F'))\n    .try_get_matches_from(vec![\n        \"prog\", \"-F\", \"file1\"\n    ]);\n\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind(), ErrorKind::WrongNumberOfValues);\n```\n[`Arg::multiple_occurrences(true)`]: Arg::multiple_occurrences()","links":{"Arg::multiple_occurrences()":"0:342:1954"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["qty",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2865-0:4351:1680":{"id":"b:2:2865-0:4351:1680","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:4351:1680","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2867:2792"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3213-0:4427:2261":{"id":"b:2:3213-0:4427:2261","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3183:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:4427:2261","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:3216:128","2:3217:1436"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3203-0:4778:1685":{"id":"b:2:3203-0:4778:1685","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:4778:1685","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3206:2391"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4649:791":{"id":"0:4649:791","crate_id":0,"name":"kind","span":{"filename":"src/error/mod.rs","begin":[47,4],"end":[47,23]},"visibility":"public","docs":"Deprecated, replaced with [`Error::kind()`]","links":{"`Error::kind()`":"0:1876:791"},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4594:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"1:5502:28812":{"id":"1:5502:28812","crate_id":1,"name":"read_exact_at","span":null,"visibility":"default","docs":"Reads the exact number of byte required to fill `buf` from the given offset.\n\nThe offset is relative to the start of the file and thus independent\nfrom the current cursor.\n\nThe current file cursor is not affected by this function.\n\nSimilar to [`io::Read::read_exact`] but uses [`read_at`] instead of `read`.\n\n[`read_at`]: FileExt::read_at\n\n# Errors\n\nIf this function encounters an error of the kind\n[`io::ErrorKind::Interrupted`] then the error is ignored and the operation\nwill continue.\n\nIf this function encounters an \"end of file\" before completely filling\nthe buffer, it returns an error of the kind [`io::ErrorKind::UnexpectedEof`].\nThe contents of `buf` are unspecified in this case.\n\nIf any other read error is encountered then this function immediately\nreturns. The contents of `buf` are unspecified in this case.\n\nIf this function returns an error, it is unspecified how many bytes it\nhas read, but it will never read more than would be necessary to\ncompletely fill the buffer.\n\n# Examples\n\n```no_run\nuse std::io;\nuse std::fs::File;\nuse std::os::unix::prelude::FileExt;\n\nfn main() -> io::Result<()> {\n    let mut buf = [0u8; 8];\n    let file = File::open(\"foo.txt\")?;\n\n    // We now read exactly 8 bytes from the offset 10.\n    file.read_exact_at(&mut buf, 10)?;\n    println!(\"read {} bytes: {:?}\", buf.len(), buf);\n    Ok(())\n}\n```","links":{"FileExt::read_at":"1:5501:28811","`io::ErrorKind::UnexpectedEof`":"1:10867:13882","`io::ErrorKind::Interrupted`":"1:10863:14188","`io::Read::read_exact`":"1:4417:21315"},"attrs":["#[stable(feature = \"rw_exact_all_at\", since = \"1.33.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["offset",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"1:3803:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3203-0:4427:2261":{"id":"b:2:3203-0:4427:2261","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:4427:2261","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:3206:2391"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:332:2952":{"id":"0:332:2952","crate_id":0,"name":"visible_aliases","span":{"filename":"src/builder/arg.rs","begin":[414,4],"end":[417,5]},"visibility":"public","docs":"Add aliases, which function as visible long flags.\n\nLike [`Arg::aliases`], except that they are visible inside the help message.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ArgAction};\nlet m = Command::new(\"prog\")\n            .arg(Arg::new(\"test\")\n                .long(\"test\")\n                .action(ArgAction::SetTrue)\n                .visible_aliases(&[\"something\", \"awesome\", \"cool\"]))\n       .get_matches_from(vec![\n            \"prog\", \"--awesome\"\n        ]);\nassert_eq!(*m.get_one::<bool>(\"test\").expect(\"defaulted by clap\"), true);\n```\n[`Command::aliases`]: Arg::aliases()","links":{"`Arg::aliases`":"0:326:2827"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["names",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3752:6765":{"id":"2:3752:6765","crate_id":2,"name":"start_bound","span":null,"visibility":"default","docs":"Start index bound.\n\nReturns the start value as a `Bound`.\n\n# Examples\n\n```\n# fn main() {\nuse std::ops::Bound::*;\nuse std::ops::RangeBounds;\n\nassert_eq!((..10).start_bound(), Unbounded);\nassert_eq!((3..10).start_bound(), Included(&3));\n# }\n```","links":{},"attrs":["#[stable(feature = \"collections_range\", since = \"1.28.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bound","id":"2:46298:6761","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:2:2868-0:4463:2271":{"id":"b:2:2868-0:4463:2271","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2862:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BoolishValueParser","id":"0:4463:2271","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2870:27181"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:32171:69438":{"id":"2:32171:69438","crate_id":2,"name":"checked_div","span":null,"visibility":"public","docs":"Checked integer division. Computes `self / rhs`, returning `None`\nif `rhs == 0`.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(128u64.checked_div(2), Some(64));\nassert_eq!(1u64.checked_div(0), None);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_checked_int_div\", since = \"1.52.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23773:21814":{"id":"2:23773:21814","crate_id":2,"name":"simd_max","span":null,"visibility":"default","docs":"Returns the lane-wise maximum with `other`.","links":{},"attrs":["#[must_use =\n\"method returns a new vector and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:60":{"id":"0:60","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[113,71],"end":[113,84]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::builder::PossibleValue","name":"PossibleValue","id":"0:4294:1679","glob":false}},"2:10817:10567":{"id":"2:10817:10567","crate_id":2,"name":"write_u128","span":null,"visibility":"default","docs":"Writes a single `u128` into this hasher.","links":{},"attrs":["#[stable(feature = \"i128\", since = \"1.26.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"primitive","inner":"u128"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4848":{"id":"0:4848","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/value_source.rs","begin":[2,56],"end":[2,59]},"visibility":{"restricted":{"parent":"0:2440:7462","path":"::parser::matches::value_source"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["min","max","clamp"],"trait":{"name":"Ord","id":"2:2956:180","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4828:1684","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4849:422"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:9533:7458-0:4778:1685":{"id":"a:2:9533:7458-0:4778:1685","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:9533:7458","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:4778:1685","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"2:3877:8805":{"id":"2:3877:8805","crate_id":2,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:908:5667":{"id":"0:908:5667","crate_id":0,"name":"allow_invalid_utf8_for_external_subcommands","span":{"filename":"src/builder/command.rs","begin":[2880,4],"end":[2886,5]},"visibility":"public","docs":"Specifies that external subcommands that are invalid UTF-8 should *not* be treated as an error.\n\n**NOTE:** Using external subcommand argument values with invalid UTF-8 requires using\n[`ArgMatches::values_of_os`] or [`ArgMatches::values_of_lossy`] for those particular\narguments which may contain invalid UTF-8 values\n\n**NOTE:** Setting this requires [`Command::allow_external_subcommands`]\n\n# Platform Specific\n\nNon Windows systems only\n\n# Examples\n\n ```\n# use clap::Command;\n// Assume there is an external subcommand named \"subcmd\"\nlet m = Command::new(\"myprog\")\n    .allow_invalid_utf8_for_external_subcommands(true)\n    .allow_external_subcommands(true)\n    .get_matches_from(vec![\n        \"myprog\", \"subcmd\", \"--option\", \"value\", \"-fff\", \"--flag\"\n    ]);\n\n// All trailing arguments will be stored under the subcommand's sub-matches using an empty\n// string argument name\nmatch m.subcommand() {\n    Some((external, ext_m)) => {\n         let ext_args: Vec<&std::ffi::OsStr> = ext_m.values_of_os(\"\").unwrap().collect();\n         assert_eq!(external, \"subcmd\");\n         assert_eq!(ext_args, [\"--option\", \"value\", \"-fff\", \"--flag\"]);\n    },\n    _ => {},\n}\n```\n\n[`ArgMatches::values_of_os`]: crate::ArgMatches::values_of_os()\n[`ArgMatches::values_of_lossy`]: crate::ArgMatches::values_of_lossy()\n[`subcommands`]: crate::Command::subcommand()","links":{"crate::ArgMatches::values_of_lossy()":"0:2182:7646","crate::ArgMatches::values_of_os()":"0:2185:7647","`Command::allow_external_subcommands`":"0:907:5655"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4445":{"id":"0:4445","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1332,15],"end":[1332,20]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"std::convert::TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangedU64ValueParser","id":"0:4439:2262","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:4447:415"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:4104-0:4796:1683":{"id":"b:2:4104-0:4796:1683","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:4102:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsValues","id":"0:4796:1683","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:4106:1449"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:32":{"id":"0:32","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[109,46],"end":[109,60]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::derive::FromArgMatches","name":"FromArgMatches","id":"0:162:1670","glob":false}},"0:4408":{"id":"0:4408","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[808,22],"end":[808,27]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PathBufValueParser","id":"0:4404:2276","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4409:667"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:23151:21826":{"id":"2:23151:21826","crate_id":2,"name":"reduce_or","span":null,"visibility":"default","docs":"Returns the cumulative bitwise \"or\" across the lanes of the vector.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Scalar","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdUint","id":"2:23142:11395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:2:3207-0:4439:2262":{"id":"b:2:3207-0:4439:2262","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangedU64ValueParser","id":"0:4439:2262","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:3209:688"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1579":{"id":"0:1579","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1961,0],"end":[1968,1]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ValueParserFactory","id":"0:1558:2266","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"u16"},"items":["0:1580:1671","0:1581:2257"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:8971:8170":{"id":"2:8971:8170","crate_id":2,"name":"try_for_each","span":null,"visibility":"default","docs":"An iterator method that applies a fallible function to each item in the\niterator, stopping at the first error and returning that error.\n\nThis can also be thought of as the fallible form of [`for_each()`]\nor as the stateless version of [`try_fold()`].\n\n[`for_each()`]: Iterator::for_each\n[`try_fold()`]: Iterator::try_fold\n\n# Examples\n\n```\nuse std::fs::rename;\nuse std::io::{stdout, Write};\nuse std::path::Path;\n\nlet data = [\"no_tea.txt\", \"stale_bread.json\", \"torrential_rain.png\"];\n\nlet res = data.iter().try_for_each(|x| writeln!(stdout(), \"{x}\"));\nassert!(res.is_ok());\n\nlet mut it = data.iter().cloned();\nlet res = it.try_for_each(|x| rename(x, Path::new(x).with_extension(\"old\")));\nassert!(res.is_err());\n// It short-circuited, so the remaining items are still in the iterator:\nassert_eq!(it.next(), Some(\"stale_bread.json\"));\n```\n\nThe [`ControlFlow`] type can be used with this method for the situations\nin which you'd use `break` and `continue` in a normal loop:\n\n```\nuse std::ops::ControlFlow;\n\nlet r = (2..100).try_for_each(|x| {\n    if 323 % x == 0 {\n        return ControlFlow::Break(x)\n    }\n\n    ControlFlow::Continue(())\n});\nassert_eq!(r, ControlFlow::Break(17));\n```","links":{"Iterator::try_fold":"2:8967:9968","Iterator::for_each":"2:8898:9956","`ControlFlow`":"2:46098:8807"},"attrs":["#[stable(feature = \"iterator_try_fold\", since = \"1.27.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"generic","inner":"R"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3624:132","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"output":{"kind":"generic","inner":"R"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Try","id":"2:3831:230","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"tuple","inner":[]}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:92":{"id":"0:92","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[152,0],"end":[152,29]},"visibility":"public","docs":"Deprecated, replaced with [`ValueEnum`]","links":{"`ValueEnum`":"0:174:1673"},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"ValueEnum","name":"ArgEnum","id":"0:174:1673","glob":false}},"2:23053:11401":{"id":"2:23053:11401","crate_id":2,"name":"SimdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23054:11341","2:23055:21797","2:23056:21798","2:23057:21799","2:23058:9346","2:23059:21800","2:23060:21801","2:23061:21802","2:23062:21803","2:23063:21804","2:23064:21805","2:23065:21806","2:23066:21807","2:23067:21808","2:23068:21809","2:23069:21810","2:23070:21811","2:23071:21812","2:23072:21813","2:23073:21814","2:23074:21815","2:23075:21816","2:23076:21817","2:23077:21818","2:23078:21819"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3380:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23155:10989","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:2209:7725":{"id":"0:2209:7725","crate_id":0,"name":"index_of","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[885,4],"end":[889,5]},"visibility":"public","docs":"The first index of that an argument showed up.\n\nIndices are similar to argv indices, but are not exactly 1:1.\n\nFor flags (i.e. those arguments which don't have an associated value), indices refer\nto occurrence of the switch, such as `-f`, or `--flag`. However, for options the indices\nrefer to the *values* `-o val` would therefore not represent two distinct indices, only the\nindex for `val` would be recorded. This is by design.\n\nBesides the flag/option discrepancy, the primary difference between an argv index and clap\nindex, is that clap continues counting once all arguments have properly separated, whereas\nan argv index does not.\n\nThe examples should clear this up.\n\n*NOTE:* If an argument is allowed multiple times, this method will only give the *first*\nindex.  See [`ArgMatches::indices_of`].\n\n# Panics\n\nIf `id` is is not a valid argument or group id.\n\n# Examples\n\nThe argv indices are listed in the comments below. See how they correspond to the clap\nindices. Note that if it's not listed in a clap index, this is because it's not saved in\nin an `ArgMatches` struct for querying.\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"myapp\")\n    .arg(Arg::new(\"flag\")\n        .short('f'))\n    .arg(Arg::new(\"option\")\n        .short('o')\n        .takes_value(true))\n    .get_matches_from(vec![\"myapp\", \"-f\", \"-o\", \"val\"]);\n           // ARGV indices: ^0       ^1    ^2    ^3\n           // clap indices:          ^1          ^3\n\nassert_eq!(m.index_of(\"flag\"), Some(1));\nassert_eq!(m.index_of(\"option\"), Some(3));\n```\n\nNow notice, if we use one of the other styles of options:\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"myapp\")\n    .arg(Arg::new(\"flag\")\n        .short('f'))\n    .arg(Arg::new(\"option\")\n        .short('o')\n        .takes_value(true))\n    .get_matches_from(vec![\"myapp\", \"-f\", \"-o=val\"]);\n           // ARGV indices: ^0       ^1    ^2\n           // clap indices:          ^1       ^3\n\nassert_eq!(m.index_of(\"flag\"), Some(1));\nassert_eq!(m.index_of(\"option\"), Some(3));\n```\n\nThings become much more complicated, or clear if we look at a more complex combination of\nflags. Let's also throw in the final option style for good measure.\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"myapp\")\n    .arg(Arg::new(\"flag\")\n        .short('f'))\n    .arg(Arg::new(\"flag2\")\n        .short('F'))\n    .arg(Arg::new(\"flag3\")\n        .short('z'))\n    .arg(Arg::new(\"option\")\n        .short('o')\n        .takes_value(true))\n    .get_matches_from(vec![\"myapp\", \"-fzF\", \"-oval\"]);\n           // ARGV indices: ^0      ^1       ^2\n           // clap indices:         ^1,2,3    ^5\n           //\n           // clap sees the above as 'myapp -f -z -F -o val'\n           //                         ^0    ^1 ^2 ^3 ^4 ^5\nassert_eq!(m.index_of(\"flag\"), Some(1));\nassert_eq!(m.index_of(\"flag2\"), Some(3));\nassert_eq!(m.index_of(\"flag3\"), Some(2));\nassert_eq!(m.index_of(\"option\"), Some(5));\n```\n\nOne final combination of flags/options to see how they combine:\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"myapp\")\n    .arg(Arg::new(\"flag\")\n        .short('f'))\n    .arg(Arg::new(\"flag2\")\n        .short('F'))\n    .arg(Arg::new(\"flag3\")\n        .short('z'))\n    .arg(Arg::new(\"option\")\n        .short('o')\n        .takes_value(true))\n    .get_matches_from(vec![\"myapp\", \"-fzFoval\"]);\n           // ARGV indices: ^0       ^1\n           // clap indices:          ^1,2,3^5\n           //\n           // clap sees the above as 'myapp -f -z -F -o val'\n           //                         ^0    ^1 ^2 ^3 ^4 ^5\nassert_eq!(m.index_of(\"flag\"), Some(1));\nassert_eq!(m.index_of(\"flag2\"), Some(3));\nassert_eq!(m.index_of(\"flag3\"), Some(2));\nassert_eq!(m.index_of(\"option\"), Some(5));\n```\n\nThe last part to mention is when values are sent in multiple groups with a [delimiter].\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"myapp\")\n    .arg(Arg::new(\"option\")\n        .short('o')\n        .use_value_delimiter(true)\n        .multiple_values(true))\n    .get_matches_from(vec![\"myapp\", \"-o=val1,val2,val3\"]);\n           // ARGV indices: ^0       ^1\n           // clap indices:             ^2   ^3   ^4\n           //\n           // clap sees the above as 'myapp -o val1 val2 val3'\n           //                         ^0    ^1 ^2   ^3   ^4\nassert_eq!(m.index_of(\"option\"), Some(2));\nassert_eq!(m.indices_of(\"option\").unwrap().collect::<Vec<_>>(), &[2, 3, 4]);\n```\n[delimiter]: crate::Arg::value_delimiter()","links":{"crate::Arg::value_delimiter()":"0:389:3471","`ArgMatches::indices_of`":"0:2211:7748"},"attrs":["#[track_caller]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Key","id":"0:3239:2795","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2868-0:4439:2262":{"id":"b:2:2868-0:4439:2262","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2862:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangedU64ValueParser","id":"0:4439:2262","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2870:27181"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:955:2030":{"id":"0:955:2030","crate_id":0,"name":"is_set","span":{"filename":"src/builder/command.rs","begin":[3439,4],"end":[3441,5]},"visibility":"public","docs":"Check if the given [`AppSettings`] variant is currently set on the `Command`.\n\nThis checks both [local] and [global settings].\n\n[local]: Command::setting()\n[global settings]: Command::global_setting()","links":{"`AppSettings`":"0:3389:1676","Command::setting()":"0:866:2010","Command::global_setting()":"0:870:5054"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["s",{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:3389:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:480:4176":{"id":"0:480:4176","crate_id":0,"name":"get_all_aliases","span":{"filename":"src/builder/arg.rs","begin":[4490,4],"end":[4496,5]},"visibility":"public","docs":"Get *all* aliases for this argument, if any, both visible and hidden.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7898:240","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:32200:69459":{"id":"2:32200:69459","crate_id":2,"name":"wrapping_rem_euclid","span":null,"visibility":"public","docs":"Wrapping Euclidean modulo. Computes `self.rem_euclid(rhs)`.\nWrapped modulo calculation on unsigned types is\njust the regular remainder calculation.\nThere's no way wrapping could ever happen.\nThis function exists, so that all operations\nare accounted for in the wrapping operations.\nSince, for the positive integers, all common\ndefinitions of division are equal, this\nis exactly equal to `self.wrapping_rem(rhs)`.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(100u64.wrapping_rem_euclid(10), 0);\n```","links":{},"attrs":["#[stable(feature = \"euclidean_division\", since = \"1.38.0\")]","#[rustc_const_stable(feature = \"const_euclidean_int_methods\", since =\n\"1.52.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:341:3097":{"id":"0:341:3097","crate_id":0,"name":"global","span":{"filename":"src/builder/arg.rs","begin":[788,4],"end":[794,5]},"visibility":"public","docs":"Specifies that an argument can be matched to all child [`Subcommand`]s.\n\n**NOTE:** Global arguments *only* propagate down, **not** up (to parent commands), however\ntheir values once a user uses them will be propagated back up to parents. In effect, this\nmeans one should *define* all global arguments at the top level, however it doesn't matter\nwhere the user *uses* the global argument.\n\n# Examples\n\nAssume an application with two subcommands, and you'd like to define a\n`--verbose` flag that can be called on any of the subcommands and parent, but you don't\nwant to clutter the source with three duplicate [`Arg`] definitions.\n\n```rust\n# use clap::{Command, Arg, ArgAction};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"verb\")\n        .long(\"verbose\")\n        .short('v')\n        .action(ArgAction::SetTrue)\n        .global(true))\n    .subcommand(Command::new(\"test\"))\n    .subcommand(Command::new(\"do-stuff\"))\n    .get_matches_from(vec![\n        \"prog\", \"do-stuff\", \"--verbose\"\n    ]);\n\nassert_eq!(m.subcommand_name(), Some(\"do-stuff\"));\nlet sub_m = m.subcommand_matches(\"do-stuff\").unwrap();\nassert_eq!(*sub_m.get_one::<bool>(\"verb\").expect(\"defaulted by clap\"), true);\n```\n\n[`Subcommand`]: crate::Subcommand","links":{"crate::Subcommand":"0:170:1672","`Arg`":"0:3818:1661"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1958:1664":{"id":"0:1958:1664","crate_id":0,"name":"parser","span":{"filename":"src/parser/mod.rs","begin":[1,0],"end":[27,42]},"visibility":"public","docs":"[`Command`][crate::Command] line argument parser","links":{"crate::Command":"0:755:1660"},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:2816","0:2819","0:2823","0:2826","0:2829","0:2832","0:2836","0:2839"],"is_stripped":false}},"2:32167:69436":{"id":"2:32167:69436","crate_id":2,"name":"checked_sub","span":null,"visibility":"public","docs":"Checked integer subtraction. Computes `self - rhs`, returning\n`None` if overflow occurred.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(1u64.checked_sub(1), Some(0));\nassert_eq!(0u64.checked_sub(1), None);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.47.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3203-0:4647:128":{"id":"b:2:3203-0:4647:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4647:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3206:2391"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:32247:69498":{"id":"2:32247:69498","crate_id":2,"name":"carrying_mul","span":null,"visibility":"public","docs":"Calculates the \"full multiplication\" `self * rhs + carry`\nwithout the possibility to overflow.\n\nThis returns the low-order (wrapping) bits and the high-order (overflow) bits\nof the result as two separate values, in that order.\n\nPerforms \"long multiplication\" which takes in an extra amount to add, and may return an\nadditional amount of overflow. This allows for chaining together multiple\nmultiplications to create \"big integers\" which represent larger values.\n\n# Examples\n\nBasic usage:\n\nPlease note that this example is shared between integer types.\nWhich explains why `u32` is used here.\n\n```\n#![feature(bigint_helper_methods)]\nassert_eq!(5u32.carrying_mul(2, 0), (10, 0));\nassert_eq!(5u32.carrying_mul(2, 10), (20, 0));\nassert_eq!(1_000_000_000u32.carrying_mul(10, 0), (1410065408, 2));\nassert_eq!(1_000_000_000u32.carrying_mul(10, 10), (1410065418, 2));\nassert_eq!(u64::MAX.carrying_mul(u64::MAX, u64::MAX), (0, u64::MAX));\n```\n\nIf `carry` is zero, this is similar to [`overflowing_mul`](Self::overflowing_mul),\nexcept that it gives the value of the overflow instead of just whether one happened:\n\n```\n#![feature(bigint_helper_methods)]\nlet r = u8::carrying_mul(7, 13, 0);\nassert_eq!((r.0, r.1 != 0), u8::overflowing_mul(7, 13));\nlet r = u8::carrying_mul(13, 42, 0);\nassert_eq!((r.0, r.1 != 0), u8::overflowing_mul(13, 42));\n```\n\nThe value of the first field in the returned tuple matches what you'd get\nby combining the [`wrapping_mul`](Self::wrapping_mul) and\n[`wrapping_add`](Self::wrapping_add) methods:\n\n```\n#![feature(bigint_helper_methods)]\nassert_eq!(\n    789_u16.carrying_mul(456, 123).0,\n    789_u16.wrapping_mul(456).wrapping_add(123),\n);\n```","links":{"Self::wrapping_mul":"2:32196:1550","Self::overflowing_mul":"2:32211:69469","Self::wrapping_add":"2:32193:1549"},"attrs":["#[unstable(feature = \"bigint_helper_methods\", issue = \"85532\")]","#[rustc_const_unstable(feature = \"bigint_helper_methods\", issue = \"85532\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}],["carry",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"u64"},{"kind":"primitive","inner":"u64"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:340:3077":{"id":"0:340:3077","crate_id":0,"name":"exclusive","span":{"filename":"src/builder/arg.rs","begin":[745,4],"end":[751,5]},"visibility":"public","docs":"This argument must be passed alone; it conflicts with all other arguments.\n\n# Examples\n\n```rust\n# use clap::Arg;\nArg::new(\"config\")\n    .exclusive(true)\n# ;\n```\n\nSetting an exclusive argument and having any other arguments present at runtime\nis an error.\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"exclusive\")\n        .takes_value(true)\n        .exclusive(true)\n        .long(\"exclusive\"))\n    .arg(Arg::new(\"debug\")\n        .long(\"debug\"))\n    .arg(Arg::new(\"input\"))\n    .try_get_matches_from(vec![\n        \"prog\", \"--exclusive\", \"file.conf\", \"file.txt\"\n    ]);\n\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind(), ErrorKind::ArgumentConflict);\n```","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23775:21815":{"id":"2:23775:21815","crate_id":2,"name":"simd_clamp","span":null,"visibility":"default","docs":"Restrict each lane to a certain interval.\n\nFor each lane, returns `max` if `self` is greater than `max`, and `min` if `self` is\nless than `min`. Otherwise returns `self`.\n\n# Panics\n\nPanics if `min > max` on any lane.","links":{},"attrs":["#[must_use =\n\"method returns a new vector and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["min",{"kind":"generic","inner":"Self"}],["max",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:5435:12372":{"id":"1:5435:12372","crate_id":1,"name":"from_bytes","span":null,"visibility":"default","docs":"Creates an [`OsStr`] from a byte slice.\n\nSee the module documentation for an example.","links":{"`OsStr`":"1:2654:182"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["slice",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:23118:21817":{"id":"2:23118:21817","crate_id":2,"name":"reduce_product","span":null,"visibility":"default","docs":"Returns the product of the lanes of the vector, with wrapping multiplication.\n\n# Examples\n\n```\n# #![feature(portable_simd)]\n# #[cfg(feature = \"as_crate\")] use core_simd::simd;\n# #[cfg(not(feature = \"as_crate\"))] use core::simd;\n# use simd::{i32x4, SimdInt};\nlet v = i32x4::from_array([1, 2, 3, 4]);\nassert_eq!(v.reduce_product(), 24);\n\n// SIMD integer multiplication is always wrapping\nlet v = i32x4::from_array([i32::MAX, 2, 1, 1]);\nassert!(v.reduce_product() < i32::MAX);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Scalar","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdInt","id":"2:23106:11397","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1710":{"id":"0:1710","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[30,0],"end":[30,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"arg_group::ArgGroup","name":"ArgGroup","id":"0:3904:1662","glob":false}},"2:13825:67840":{"id":"2:13825:67840","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:15876:8642","self::pattern":"2:13336:8923"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13346:8917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13346:8917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13361:8918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1021:5973":{"id":"0:1021:5973","crate_id":0,"name":"is_multicall_set","span":{"filename":"src/builder/command.rs","begin":[3815,4],"end":[3817,5]},"visibility":"public","docs":"Report whether [`Command::multicall`] is set","links":{"`Command::multicall`":"0:912:5805"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:4104-0:4439:2262":{"id":"b:2:4104-0:4439:2262","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:4102:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangedU64ValueParser","id":"0:4439:2262","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:4106:1449"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:180:2238":{"id":"0:180:2238","crate_id":0,"name":"to_possible_value","span":{"filename":"src/derive.rs","begin":[499,4],"end":[499,65]},"visibility":"default","docs":"The canonical argument value.\n\nThe value is `None` for skipped variants.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:4294:1679","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:4003:3390":{"id":"0:4003:3390","crate_id":0,"name":"IgnoreCase","span":{"filename":"src/builder/arg_settings.rs","begin":[360,4],"end":[360,14]},"visibility":"default","docs":"Deprecated, replaced with [`Arg::ignore_case`] and [`Arg::is_ignore_case_set`]\n\nDerive: replace `#[clap(setting = IgnoreCase)]` with `#[clap(ignore_case = true)]`\n\nBuilder: replace `arg.setting(IgnoreCase)` with `arg.ignore_case(true)`","links":{"`Arg::ignore_case`":"0:382:2236","`Arg::is_ignore_case_set`":"0:519:4269"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"2:3685:762":{"id":"2:3685:762","crate_id":2,"name":"index_mut","span":null,"visibility":"default","docs":"Performs the mutable indexing (`container[index]`) operation.\n\n# Panics\n\nMay panic if the index is out of bounds.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[track_caller]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"generic","inner":"Idx"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Index","id":"2:3679:4747","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"a:2:3411:6205-0:4439:2262":{"id":"a:2:3411:6205-0:4439:2262","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:3411:6205","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:3411:6205","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangedU64ValueParser","id":"0:4439:2262","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11215:27267":{"id":"2:11215:27267","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"default","docs":"Returns a mutable reference to the output at this location, without\nperforming any bounds checking.\nCalling this method with an out-of-bounds index or a dangling `slice` pointer\nis *[undefined behavior]* even if the resulting reference is not used.\n\n[undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html","links":{},"attrs":["#[unstable(feature = \"slice_index_methods\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["slice",{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"generic","inner":"T"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SliceIndex","id":"2:11209:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"0:1312:367":{"id":"0:1312:367","crate_id":0,"name":"bool","span":{"filename":"src/builder/value_parser.rs","begin":[139,4],"end":[141,5]},"visibility":"public","docs":"[`bool`] parser for argument values\n\nSee also:\n- [`BoolishValueParser`] for different human readable bool representations\n- [`FalseyValueParser`] for assuming non-false is true\n\n# Example\n\n```rust\nlet mut cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"download\")\n            .value_parser(clap::value_parser!(bool))\n            .required(true)\n    );\n\nlet m = cmd.try_get_matches_from_mut([\"cmd\", \"true\"]).unwrap();\nlet port: bool = *m.get_one(\"download\")\n    .expect(\"required\");\nassert_eq!(port, true);\n\nassert!(cmd.try_get_matches_from_mut([\"cmd\", \"forever\"]).is_err());\n```","links":{"`bool`":"1:15874:8640","`FalseyValueParser`":"0:4457:2273","`BoolishValueParser`":"0:4463:2271"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3186:1436":{"id":"2:3186:1436","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":"Performs the conversion.","links":{},"attrs":["#[stable(feature = \"try_from\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"TryInto","id":"2:3183:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:2:4104-0:4594:1681":{"id":"b:2:4104-0:4594:1681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:4102:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4594:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:4106:1449"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:5:848-0:4241:1674":{"id":"b:5:848-0:4241:1674","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:844:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:4241:1674","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":["5:850:4342","5:851:4983","5:852:9984"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3207-0:4778:1685":{"id":"b:2:3207-0:4778:1685","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:4778:1685","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3209:688"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3203-0:3968:1678":{"id":"b:2:3203-0:3968:1678","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgSettings","id":"0:3968:1678","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3206:2391"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4605:7074":{"id":"0:4605:7074","crate_id":0,"name":"NoEquals","span":{"filename":"src/error/kind.rs","begin":[118,4],"end":[118,12]},"visibility":"default","docs":"Occurs when the user doesn't use equals for an option that requires equal\nsign to provide values.\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"color\")\n         .takes_value(true)\n         .require_equals(true)\n         .long(\"color\"))\n    .try_get_matches_from(vec![\"prog\", \"--color\", \"red\"]);\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind(), ErrorKind::NoEquals);\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"0:215:1658":{"id":"0:215:1658","crate_id":0,"name":"builder","span":{"filename":"src/builder/mod.rs","begin":[1,0],"end":[61,43]},"visibility":"public","docs":"Define [`Command`] line [arguments][`Arg`]","links":{"`Arg`":"0:3818:1661","`Command`":"0:755:1660"},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1697","0:1701","0:1704","0:1707","0:1710","0:1714","0:1717","0:1720","0:1723","0:1726","0:1729","0:1732","0:1735","0:1738","0:1741","0:1744","0:1747","0:1750","0:1753","0:1756","0:1759","0:1762","0:1765","0:1768","0:1771","0:1774","0:1777","0:1780"],"is_stripped":false}},"0:1873:61":{"id":"0:1873:61","crate_id":0,"name":"raw","span":{"filename":"src/error/mod.rs","begin":[77,4],"end":[79,5]},"visibility":"public","docs":"Create an unformatted error\n\nThis is for you need to pass the error up to\na place that has access to the `Command` at which point you can call [`Error::format`].\n\nPrefer [`Command::error`] for generating errors.\n\n[`Command::error`]: crate::Command::error","links":{"`Error::format`":"0:1875:678","crate::Command::error":"0:788:1663"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["kind",{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4594:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["message",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"std::fmt::Display","id":"2:10569:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl std::fmt::Display","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"std::fmt::Display","id":"2:10569:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3382:225-0:4523:6999":{"id":"a:2:3382:225-0:4523:6999","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:4523:6999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:6213:11212":{"id":"1:6213:11212","crate_id":1,"name":"uid","span":null,"visibility":"default","docs":"Sets the child process's user ID. This translates to a\n`setuid` call in the child process. Failure in the `setuid`\ncall will cause the spawn to fail.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Command","id":"1:7477:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:8717:7848":{"id":"2:8717:7848","crate_id":2,"name":"next_back","span":null,"visibility":"default","docs":"Removes and returns an element from the end of the iterator.\n\nReturns `None` when there are no more elements.\n\nThe [trait-level] docs contain more details.\n\n[trait-level]: DoubleEndedIterator\n\n# Examples\n\nBasic usage:\n\n```\nlet numbers = vec![1, 2, 3, 4, 5, 6];\n\nlet mut iter = numbers.iter();\n\nassert_eq!(Some(&1), iter.next());\nassert_eq!(Some(&6), iter.next_back());\nassert_eq!(Some(&5), iter.next_back());\nassert_eq!(Some(&2), iter.next());\nassert_eq!(Some(&3), iter.next());\nassert_eq!(Some(&4), iter.next());\nassert_eq!(None, iter.next());\nassert_eq!(None, iter.next_back());\n```\n\n# Remarks\n\nThe elements yielded by `DoubleEndedIterator`'s methods may differ from\nthe ones yielded by [`Iterator`]'s methods:\n\n```\nlet vec = vec![(1, 'a'), (1, 'b'), (1, 'c'), (2, 'a'), (2, 'b')];\nlet uniq_by_fst_comp = || {\n    let mut seen = std::collections::HashSet::new();\n    vec.iter().copied().filter(move |x| seen.insert(x.0))\n};\n\nassert_eq!(uniq_by_fst_comp().last(), Some((2, 'a')));\nassert_eq!(uniq_by_fst_comp().next_back(), Some((2, 'b')));\n\nassert_eq!(\n    uniq_by_fst_comp().fold(vec![], |mut v, x| {v.push(x); v}),\n    vec![(1, 'a'), (2, 'a')]\n);\nassert_eq!(\n    uniq_by_fst_comp().rfold(vec![], |mut v, x| {v.push(x); v}),\n    vec![(2, 'b'), (1, 'c')]\n);\n```","links":{"`Iterator`":"2:8873:159","DoubleEndedIterator":"2:8716:121"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:4607:7103":{"id":"0:4607:7103","crate_id":0,"name":"ValueValidation","span":{"filename":"src/error/kind.rs","begin":[141,4],"end":[141,19]},"visibility":"default","docs":"Occurs when the user provides a value for an argument with a custom validation and the\nvalue fails that validation.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nfn is_numeric(val: &str) -> Result<(), String> {\n    match val.parse::<i64>() {\n        Ok(..) => Ok(()),\n        Err(..) => Err(String::from(\"Value wasn't a number!\")),\n    }\n}\n\nlet result = Command::new(\"prog\")\n    .arg(Arg::new(\"num\")\n         .validator(is_numeric))\n    .try_get_matches_from(vec![\"prog\", \"NotANumber\"]);\nassert!(result.is_err());\nassert_eq!(result.unwrap_err().kind(), ErrorKind::ValueValidation);\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"0:175:2232":{"id":"0:175:2232","crate_id":0,"name":"value_variants","span":{"filename":"src/derive.rs","begin":[481,4],"end":[481,42]},"visibility":"default","docs":"All possible argument values, in display order.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"slice","inner":{"kind":"generic","inner":"Self"}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:2297":{"id":"0:2297","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1634,0],"end":[1642,1]},"visibility":{"restricted":{"parent":"0:2092:7461","path":"::parser::matches::arg_matches"}},"docs":"Creates an empty iterator.","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:3254:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawValues","id":"0:4768:7385","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"items":["0:2298:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:620:2822":{"id":"0:620:2822","crate_id":0,"name":"requires","span":{"filename":"src/builder/arg_group.rs","begin":[325,4],"end":[328,5]},"visibility":"public","docs":"Specify an argument or group that must be present when this group is.\n\nThis is not to be confused with a [required group]. Requirement rules function just like\n[argument requirement rules], you can name other arguments or groups that must be present\nwhen any one of the arguments from this group is used.\n\n**NOTE:** The name provided may be an argument or group name\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ArgGroup, ErrorKind};\nlet result = Command::new(\"myprog\")\n    .arg(Arg::new(\"flag\")\n        .short('f'))\n    .arg(Arg::new(\"color\")\n        .short('c'))\n    .arg(Arg::new(\"debug\")\n        .short('d'))\n    .group(ArgGroup::new(\"req_flags\")\n        .args(&[\"flag\", \"color\"])\n        .requires(\"debug\"))\n    .try_get_matches_from(vec![\"myprog\", \"-c\"]);\n// because we used an arg from the group, and the group requires \"-d\" to be used, it's an\n// error\nassert!(result.is_err());\nlet err = result.unwrap_err();\nassert_eq!(err.kind(), ErrorKind::MissingRequiredArgument);\n```\n[required group]: ArgGroup::required()\n[argument requirement rules]: crate::Arg::requires()","links":{"crate::Arg::requires()":"0:338:2822","ArgGroup::required()":"0:619:1948"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["id",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Key","id":"0:3239:2795","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4291":{"id":"0:4291","crate_id":0,"name":null,"span":{"filename":"src/builder/command.rs","begin":[77,34],"end":[77,36]},"visibility":{"restricted":{"parent":"0:649:1913","path":"::builder::command"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2925:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:4241:1674","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1387":{"id":"0:1387","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[757,0],"end":[761,1]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:3254:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StringValueParser","id":"0:4392:2263","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1388:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1408:930":{"id":"0:1408:930","crate_id":0,"name":"new","span":{"filename":"src/builder/value_parser.rs","begin":[919,4],"end":[922,5]},"visibility":"public","docs":"Parse an [`ValueEnum`][crate::ValueEnum]","links":{"crate::ValueEnum":"0:174:1673"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1587:2257":{"id":"0:1587:2257","crate_id":0,"name":"value_parser","span":{"filename":"src/builder/value_parser.rs","begin":[1979,4],"end":[1983,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"qualified_path","inner":{"name":"Parser","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:1558:2266","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:443:3989":{"id":"0:443:3989","crate_id":0,"name":"required_if_eq_any","span":{"filename":"src/builder/arg.rs","begin":[3864,4],"end":[3868,5]},"visibility":"public","docs":"Specify this argument is [required] based on multiple conditions.\n\nThe conditions are set up in a `(arg, val)` style tuple. The requirement will only become\nvalid if one of the specified `arg`'s value equals its corresponding `val`.\n\n# Examples\n\n```rust\n# use clap::Arg;\nArg::new(\"config\")\n    .required_if_eq_any(&[\n        (\"extra\", \"val\"),\n        (\"option\", \"spec\")\n    ])\n# ;\n```\n\nSetting `Arg::required_if_eq_any(&[(arg, val)])` makes this arg required if any of the `arg`s\nare used at runtime and it's corresponding value is equal to `val`. If the `arg`'s value is\nanything other than `val`, this argument isn't required.\n\n```rust\n# use clap::{Command, Arg};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .required_if_eq_any(&[\n            (\"extra\", \"val\"),\n            (\"option\", \"spec\")\n        ])\n        .takes_value(true)\n        .long(\"config\"))\n    .arg(Arg::new(\"extra\")\n        .takes_value(true)\n        .long(\"extra\"))\n    .arg(Arg::new(\"option\")\n        .takes_value(true)\n        .long(\"option\"))\n    .try_get_matches_from(vec![\n        \"prog\", \"--option\", \"other\"\n    ]);\n\nassert!(res.is_ok()); // We didn't use --option=spec, or --extra=val so \"cfg\" isn't required\n```\n\nSetting `Arg::required_if_eq_any(&[(arg, val)])` and having any of the `arg`s used with its\nvalue of `val` but *not* using this arg is an error.\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .required_if_eq_any(&[\n            (\"extra\", \"val\"),\n            (\"option\", \"spec\")\n        ])\n        .takes_value(true)\n        .long(\"config\"))\n    .arg(Arg::new(\"extra\")\n        .takes_value(true)\n        .long(\"extra\"))\n    .arg(Arg::new(\"option\")\n        .takes_value(true)\n        .long(\"option\"))\n    .try_get_matches_from(vec![\n        \"prog\", \"--option\", \"spec\"\n    ]);\n\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind(), ErrorKind::MissingRequiredArgument);\n```\n[`Arg::requires(name)`]: Arg::requires()\n[Conflicting]: Arg::conflicts_with()\n[required]: Arg::required()","links":{"Arg::required()":"0:337:1948"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["ifs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"tuple","inner":[{"kind":"generic","inner":"T"},{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Key","id":"0:3239:2795","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1197:761":{"id":"0:1197:761","crate_id":0,"name":"index","span":{"filename":"src/builder/command.rs","begin":[5174,4],"end":[5176,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["key",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:5056:2794","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"2:3679:4747","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:904:3756":{"id":"0:904:3756","crate_id":0,"name":"display_order","span":{"filename":"src/builder/command.rs","begin":[2740,4],"end":[2743,5]},"visibility":"public","docs":"Set the placement of this subcommand within the help.\n\nSubcommands with a lower value will be displayed first in the help message.  Subcommands\nwith duplicate display orders will be displayed in alphabetical order.\n\nThis is helpful when one would like to emphasize frequently used subcommands, or prioritize\nthose towards the top of the list.\n\n**NOTE:** The default is 999 for all subcommands.\n\n# Examples\n\n```rust\n# use clap::{Command, };\nlet m = Command::new(\"cust-ord\")\n    .subcommand(Command::new(\"alpha\") // typically subcommands are grouped\n                                               // alphabetically by name. Subcommands\n                                               // without a display_order have a value of\n                                               // 999 and are displayed alphabetically with\n                                               // all other 999 subcommands\n        .about(\"Some help and text\"))\n    .subcommand(Command::new(\"beta\")\n        .display_order(1)   // In order to force this subcommand to appear *first*\n                            // all we have to do is give it a value lower than 999.\n                            // Any other subcommands with a value of 1 will be displayed\n                            // alphabetically with this one...then 2 values, then 3, etc.\n        .about(\"I should be first!\"))\n    .get_matches_from(vec![\n        \"cust-ord\", \"--help\"\n    ]);\n```\n\nThe above example displays the following help message\n\n```text\ncust-ord\n\nUSAGE:\n    cust-ord [OPTIONS]\n\nOPTIONS:\n    -h, --help       Print help information\n    -V, --version    Print version information\n\nSUBCOMMANDS:\n    beta    I should be first!\n    alpha   Some help and text\n```","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["ord",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1345:667":{"id":"0:1345:667","crate_id":0,"name":"fmt","span":{"filename":"src/builder/value_parser.rs","begin":[515,4],"end":[523,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"std::fmt::Formatter","id":"2:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"std::fmt::Error","id":"2:48872:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4552:7113":{"id":"0:4552:7113","crate_id":0,"name":"TrailingArg","span":{"filename":"src/error/context.rs","begin":[34,4],"end":[34,15]},"visibility":"default","docs":"Trailing argument","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"5:6191:6698":{"id":"5:6191:6698","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:444:2245","`String`":"5:8479:221"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:2245","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8224:3098","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8479:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1759":{"id":"0:1759","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[45,0],"end":[45,38]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"value_parser::BoolValueParser","name":"BoolValueParser","id":"0:4451:2270","glob":false}},"0:4382:611":{"id":"0:4382:611","crate_id":0,"name":"eq","span":{"filename":"src/builder/value_hint.rs","begin":[27,16],"end":[27,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:4351:1680","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3382:225":{"id":"2:3382:225","crate_id":2,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1381:930":{"id":"0:1381:930","crate_id":0,"name":"new","span":{"filename":"src/builder/value_parser.rs","begin":[724,4],"end":[726,5]},"visibility":"public","docs":"Implementation for [`ValueParser::string`]","links":{"`ValueParser::string`":"0:1313:1925"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3203-0:4523:6999":{"id":"b:2:3203-0:4523:6999","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:4523:6999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3206:2391"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:8720:9946":{"id":"2:8720:9946","crate_id":2,"name":"try_rfold","span":null,"visibility":"default","docs":"This is the reverse version of [`Iterator::try_fold()`]: it takes\nelements starting from the back of the iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [\"1\", \"2\", \"3\"];\nlet sum = a.iter()\n    .map(|&s| s.parse::<i32>())\n    .try_rfold(0, |acc, x| x.and_then(|y| Ok(acc + y)));\nassert_eq!(sum, Ok(6));\n```\n\nShort-circuiting:\n\n```\nlet a = [\"1\", \"rust\", \"3\"];\nlet mut it = a.iter();\nlet sum = it\n    .by_ref()\n    .map(|&s| s.parse::<i32>())\n    .try_rfold(0, |acc, x| x.and_then(|y| Ok(acc + y)));\nassert!(sum.is_err());\n\n// Because it short-circuited, the remaining elements are still\n// available through the iterator.\nassert_eq!(it.next_back(), Some(&\"1\"));\n```","links":{"`Iterator::try_fold()`":"2:8967:9968"},"attrs":["#[stable(feature = \"iterator_try_fold\", since = \"1.27.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["init",{"kind":"generic","inner":"B"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"generic","inner":"R"},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3624:132","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"B"},{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"output":{"kind":"generic","inner":"R"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Try","id":"2:3831:230","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"B"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3189:128":{"id":"2:3189:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":"The type returned in the event of a conversion error.","links":{},"attrs":["#[stable(feature = \"try_from\", since = \"1.34.0\")]"],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"2:3531:361":{"id":"2:3531:361","crate_id":2,"name":"bitor_assign","span":null,"visibility":"default","docs":"Performs the `|=` operation.\n\n# Examples\n\n```\nlet mut x = true;\nx |= false;\nassert_eq!(x, true);\n\nlet mut x = false;\nx |= false;\nassert_eq!(x, false);\n\nlet mut x: u8 = 5;\nx |= 1;\nassert_eq!(x, 5);\n\nlet mut x: u8 = 5;\nx |= 2;\nassert_eq!(x, 7);\n```","links":{},"attrs":["#[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["rhs",{"kind":"generic","inner":"Rhs"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:4563":{"id":"0:4563","crate_id":0,"name":null,"span":{"filename":"src/error/context.rs","begin":[2,29],"end":[2,38]},"visibility":{"restricted":{"parent":"0:1854:488","path":"::error::context"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:3378:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:4523:6999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:2338:4836":{"id":"0:2338:4836","crate_id":0,"name":"size_hint","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1753,4],"end":[1755,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3285-0:4693:7387":{"id":"b:2:3285-0:4693:7387","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"2:3278:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Provider","id":"2:4153:9022","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4693:7387","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3287:10132"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"E"}}},"0:608:930":{"id":"0:608:930","crate_id":0,"name":"new","span":{"filename":"src/builder/arg_group.rs","begin":[111,4],"end":[113,5]},"visibility":"public","docs":"Create a `ArgGroup` using a unique name.\n\nThe name will be used to get values from the group or refer to the group inside of conflict\nand requirement rules.\n\n# Examples\n\n```rust\n# use clap::{Command, ArgGroup};\nArgGroup::new(\"config\")\n# ;\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["n",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:496:4219":{"id":"0:496:4219","crate_id":0,"name":"is_multiple_values_set","span":{"filename":"src/builder/arg.rs","begin":[4646,4],"end":[4648,5]},"visibility":"public","docs":"Report whether [`Arg::multiple_values`] is set","links":{"`Arg::multiple_values`":"0:355:3240"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4241:1674":{"id":"0:4241:1674","crate_id":0,"name":"App","span":{"filename":"src/builder/command.rs","begin":[78,0],"end":[114,1]},"visibility":"public","docs":"Deprecated, replaced with [`Command`]","links":{"`Command`":"0:755:1660"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:757","0:814","0:834","0:883","0:917","0:1022","0:1057","a:2:9533:7458-0:4241:1674","a:2:9532:7459-0:4241:1674","a:2:3382:225-0:4241:1674","a:2:3370:216-0:4241:1674","a:2:3411:6205-0:4241:1674","b:2:4104-0:4241:1674","b:2:2865-0:4241:1674","b:2:3203-0:4241:1674","b:2:3207-0:4241:1674","b:2:3218-0:4241:1674","b:2:2868-0:4241:1674","b:2:3213-0:4241:1674","b:5:848-0:4241:1674","b:5:6507-0:4241:1674","b:23:25-0:4241:1674","0:4278","0:4281","0:4284","0:4286","0:4289","0:4291","0:1191","0:1194","0:1198"]}},"2:32232:69489":{"id":"2:32232:69489","crate_id":2,"name":"to_be_bytes","span":null,"visibility":"public","docs":"Return the memory representation of this integer as a byte array in\nbig-endian (network) byte order.\n\n\n\n# Examples\n\n```\nlet bytes = 0x1234567890123456u64.to_be_bytes();\nassert_eq!(bytes, [0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]);\n```","links":{},"attrs":["#[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]","#[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"array","inner":{"type":{"kind":"primitive","inner":"u8"},"len":"8"}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:63":{"id":"0:63","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[113,86],"end":[113,95]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::builder::ValueHint","name":"ValueHint","id":"0:4351:1680","glob":false}},"a:2:3370:216-0:4392:2263":{"id":"a:2:3370:216-0:4392:2263","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StringValueParser","id":"0:4392:2263","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:6475:15087":{"id":"1:6475:15087","crate_id":1,"name":"st_ctime_nsec","span":null,"visibility":"default","docs":"Returns the last status change time of the file, in nanoseconds since [`st_ctime`].\n\n[`st_ctime`]: Self::st_ctime\n\n# Examples\n\n```no_run\nuse std::fs;\nuse std::io;\nuse std::os::linux::fs::MetadataExt;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    println!(\"{}\", meta.st_ctime_nsec());\n    Ok(())\n}\n```","links":{"Self::st_ctime":"1:6474:15086"},"attrs":["#[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:10563:667":{"id":"2:10563:667","crate_id":2,"name":"fmt","span":null,"visibility":"default","docs":"Formats the value using the given formatter.\n\n# Examples\n\n```\nuse std::fmt;\n\nstruct Position {\n    longitude: f32,\n    latitude: f32,\n}\n\nimpl fmt::Debug for Position {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        f.debug_tuple(\"\")\n         .field(&self.longitude)\n         .field(&self.latitude)\n         .finish()\n    }\n}\n\nlet position = Position { longitude: 1.987, latitude: 2.983 };\nassert_eq!(format!(\"{position:?}\"), \"(1.987, 2.983)\");\n\nassert_eq!(format!(\"{position:#?}\"), \"(\n    1.987,\n    2.983,\n)\");\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Formatter","id":"2:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"2:48872:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:999:5933":{"id":"0:999:5933","crate_id":0,"name":"is_disable_help_flag_set","span":{"filename":"src/builder/command.rs","begin":[3696,4],"end":[3698,5]},"visibility":"public","docs":"Report whether [`Command::disable_help_flag`] is set","links":{"`Command::disable_help_flag`":"0:826:5117"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5087:611":{"id":"0:5087:611","crate_id":0,"name":"eq","span":{"filename":"src/util/color.rs","begin":[2,33],"end":[2,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:5070:1667","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:32180:69447":{"id":"2:32180:69447","crate_id":2,"name":"checked_ilog10","span":null,"visibility":"public","docs":"Returns the base 10 logarithm of the number, rounded down.\n\nReturns `None` if the number is zero.\n\n# Examples\n\n```\n#![feature(int_log)]\nassert_eq!(10u64.checked_ilog10(), Some(1));\n```","links":{},"attrs":["#[unstable(feature = \"int_log\", issue = \"70887\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4473:8305":{"id":"1:4473:8305","crate_id":1,"name":"write_all","span":null,"visibility":"default","docs":"Attempts to write an entire buffer into this writer.\n\nThis method will continuously call [`write`] until there is no more data\nto be written or an error of non-[`ErrorKind::Interrupted`] kind is\nreturned. This method will not return until the entire buffer has been\nsuccessfully written or such an error occurs. The first error that is\nnot of [`ErrorKind::Interrupted`] kind generated from this method will be\nreturned.\n\nIf the buffer contains no data, this will never call [`write`].\n\n# Errors\n\nThis function will return the first error of\nnon-[`ErrorKind::Interrupted`] kind that [`write`] returns.\n\n[`write`]: Write::write\n\n# Examples\n\n```no_run\nuse std::io::prelude::*;\nuse std::fs::File;\n\nfn main() -> std::io::Result<()> {\n    let mut buffer = File::create(\"foo.txt\")?;\n\n    buffer.write_all(b\"some bytes\")?;\n    Ok(())\n}\n```","links":{"Write::write":"1:4468:1869","`ErrorKind::Interrupted`":"1:10863:14188"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"1:3803:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3281:7047":{"id":"2:3281:7047","crate_id":2,"name":"description","span":null,"visibility":"default","docs":"```\nif let Err(e) = \"xc\".parse::<u32>() {\n    // Print `e` itself, no need for description().\n    eprintln!(\"Error: {e}\");\n}\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.42.0\", note = \"use the Display impl or to_string()\")]"],"deprecation":{"since":"1.42.0","note":"use the Display impl or to_string()"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:13":{"id":"0:13","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[100,30],"end":[100,38]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::builder::ArgGroup","name":"ArgGroup","id":"0:3904:1662","glob":false}},"0:822:5099":{"id":"0:822:5099","crate_id":0,"name":"max_term_width","span":{"filename":"src/builder/command.rs","begin":[1088,4],"end":[1091,5]},"visibility":"public","docs":"Sets the maximum terminal width at which to wrap help messages.\n\nThis only applies when setting the current terminal width.  See [`Command::term_width`] for\nmore details.\n\nUsing `0` will ignore terminal widths and use source formatting.\n\n**NOTE:** This setting applies globally and *not* on a per-command basis.\n\n# Examples\n\n```no_run\n# use clap::Command;\nCommand::new(\"myprog\")\n    .max_term_width(100)\n# ;\n```","links":{"`Command::term_width`":"0:821:5094"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["w",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3382:225-0:3389:1676":{"id":"a:2:3382:225-0:3389:1676","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:3389:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4462:667":{"id":"0:4462:667","crate_id":0,"name":"fmt","span":{"filename":"src/builder/value_parser.rs","begin":[1594,22],"end":[1594,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10511:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4398:2275":{"id":"0:4398:2275","crate_id":0,"name":"OsStringValueParser","span":{"filename":"src/builder/value_parser.rs","begin":[768,0],"end":[768,33]},"visibility":"public","docs":"Implementation for [`ValueParser::os_string`]\n\nUseful for composing new [`TypedValueParser`]s","links":{"`TypedValueParser`":"0:1362:2264","`ValueParser::os_string`":"0:1314:4240"},"attrs":["#[non_exhaustive]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":false}},"generics":{"params":[],"where_predicates":[]},"impls":["0:1389","a:2:9533:7458-0:4398:2275","a:2:9532:7459-0:4398:2275","a:2:3382:225-0:4398:2275","a:2:3370:216-0:4398:2275","a:2:3411:6205-0:4398:2275","b:2:4104-0:4398:2275","b:2:2865-0:4398:2275","b:2:3203-0:4398:2275","b:2:3207-0:4398:2275","b:2:3218-0:4398:2275","b:2:2868-0:4398:2275","b:2:3213-0:4398:2275","b:5:848-0:4398:2275","0:4399","0:4400","0:4402","0:1391","0:1395"]}},"b:2:3207-0:4451:2270":{"id":"b:2:3207-0:4451:2270","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BoolValueParser","id":"0:4451:2270","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3209:688"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:6509:1415":{"id":"5:6509:1415","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8479:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:605":{"id":"0:605","crate_id":0,"name":null,"span":{"filename":"src/builder/arg_group.rs","begin":[91,0],"end":[469,1]},"visibility":{"restricted":{"parent":"0:597:2251","path":"::builder::arg_group"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3904:1662","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":["0:608:930","0:610:1941","0:612:909","0:614:1932","0:616:305","0:618:2014","0:619:1948","0:620:2822","0:622:4045","0:623:4060","0:625:4071"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3213-0:3904:1662":{"id":"b:2:3213-0:3904:1662","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3183:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3904:1662","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":["2:3216:128","2:3217:1436"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4846":{"id":"0:4846","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/value_source.rs","begin":[2,44],"end":[2,54]},"visibility":{"restricted":{"parent":"0:2440:7462","path":"::parser::matches::value_source"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["gt","ge","lt","le"],"trait":{"name":"PartialOrd","id":"2:2969:187","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4828:1684","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4828:1684","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4847:1008"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:2973:801":{"id":"2:2973:801","crate_id":2,"name":"le","span":null,"visibility":"default","docs":"This method tests less than or equal to (for `self` and `other`) and is used by the `<=`\noperator.\n\n# Examples\n\n```\nlet result = 1.0 <= 2.0;\nassert_eq!(result, true);\n\nlet result = 2.0 <= 2.0;\nassert_eq!(result, true);\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Rhs"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3474:8785":{"id":"2:3474:8785","crate_id":2,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3476:1374"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:2868-0:4469:2274":{"id":"b:2:2868-0:4469:2274","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2862:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"NonEmptyStringValueParser","id":"0:4469:2274","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2870:27181"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1338":{"id":"0:1338","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[504,0],"end":[512,1]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":"Create a [`ValueParser`] with [`PossibleValuesParser`]\n\nSee [`PossibleValuesParser`] for more flexibility in creating the\n[`PossibleValue`][crate::PossibleValue]s.\n\n# Examples\n\n```rust\nlet mut cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"color\")\n            .long(\"color\")\n            .value_parser([\"always\", \"auto\", \"never\"])\n            .default_value(\"auto\")\n    );\n\nlet m = cmd.try_get_matches_from_mut(\n    [\"cmd\", \"--color\", \"never\"]\n).unwrap();\n\nlet color: &String = m.get_one(\"color\")\n    .expect(\"default\");\nassert_eq!(color, \"never\");\n```","links":{"`ValueParser`":"0:1294:2265","`PossibleValuesParser`":"0:4420:2260","crate::PossibleValue":"0:4294:1679"},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"C","kind":{"const":{"type":{"kind":"primitive","inner":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"super::PossibleValue","id":"0:4294:1679","args":{"angle_bracketed":{"args":[{"lifetime":"'static"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"array","inner":{"type":{"kind":"generic","inner":"P"},"len":"C"}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1294:2265","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1342:688"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13778:64117":{"id":"2:13778:64117","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"self::pattern":"2:13336:8923","prim@char":"1:15876:8642","str::splitn":"2:13775:64115"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:49912:8948","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13346:8917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13346:8917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13361:8918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2272:4836":{"id":"0:2272:4836","crate_id":0,"name":"size_hint","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1559,4],"end":[1561,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:848-0:3351:1659":{"id":"b:5:848-0:3351:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:844:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgAction","id":"0:3351:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:850:4342","5:851:4983","5:852:9984"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1576":{"id":"0:1576","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1953,0],"end":[1960,1]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ValueParserFactory","id":"0:1558:2266","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"i8"},"items":["0:1577:1671","0:1578:2257"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:2185:7647":{"id":"0:2185:7647","crate_id":0,"name":"values_of_os","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[558,4],"end":[567,5]},"visibility":"public","docs":"Deprecated, replaced with [`ArgMatches::get_many()`]","links":{"`ArgMatches::get_many()`":"0:2165:7548"},"attrs":["#[track_caller]","#![allow(deprecated)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsValues","id":"0:4796:1683","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Key","id":"0:3239:2795","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3203-0:4806:1682":{"id":"b:2:3203-0:4806:1682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:4806:1682","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3206:2391"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13822:67839":{"id":"2:13822:67839","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:13336:8923","prim@char":"1:15876:8642"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13346:8917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4455":{"id":"0:4455","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1495,22],"end":[1495,27]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BoolValueParser","id":"0:4451:2270","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4456:667"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:866:2010":{"id":"0:866:2010","crate_id":0,"name":"setting","span":{"filename":"src/builder/command.rs","begin":[1811,4],"end":[1817,5]},"visibility":"public","docs":"Apply a setting for the current command or subcommand.\n\nSee [`Command::global_setting`] to apply a setting to this command and all subcommands.\n\nSee [`AppSettings`] for a full list of possibilities and examples.\n\n# Examples\n\n```no_run\n# use clap::{Command, AppSettings};\nCommand::new(\"myprog\")\n    .setting(AppSettings::SubcommandRequired)\n    .setting(AppSettings::AllowLeadingHyphen)\n# ;\n```\nor\n```no_run\n# use clap::{Command, AppSettings};\nCommand::new(\"myprog\")\n    .setting(AppSettings::SubcommandRequired | AppSettings::AllowLeadingHyphen)\n# ;\n```","links":{"`Command::global_setting`":"0:870:5054","`AppSettings`":"0:3389:1676"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["setting",{"kind":"generic","inner":"F"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"AppFlags","id":"0:3375:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1441":{"id":"0:1441","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1088,0],"end":[1096,1]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"super::PossibleValue","id":"0:4294:1679","args":{"angle_bracketed":{"args":[{"lifetime":"'static"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"I"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValuesParser","id":"0:4420:2260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1444:688"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3999:3031":{"id":"0:3999:3031","crate_id":0,"name":"Last","span":{"filename":"src/builder/arg_settings.rs","begin":[324,4],"end":[324,8]},"visibility":"default","docs":"Deprecated, replaced with [`Arg::last`] and [`Arg::is_last_set`]\n\nDerive: replace `#[clap(setting = Last)]` with `#[clap(last = true)]`\n\nBuilder: replace `arg.setting(Last)` with `arg.last(true)`","links":{"`Arg::last`":"0:336:3029","`Arg::is_last_set`":"0:518:4267"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"b:2:2868-0:4523:6999":{"id":"b:2:2868-0:4523:6999","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2862:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:4523:6999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2870:27181"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:2441":{"id":"0:2441","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/mod.rs","begin":[6,0],"end":[6,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"any_value::AnyValueId","name":"AnyValueId","id":"0:4707:2393","glob":false}},"b:2:3207-0:3968:1678":{"id":"b:2:3207-0:3968:1678","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgSettings","id":"0:3968:1678","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3209:688"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:6212:10998":{"id":"1:6212:10998","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6213:11212","1:6214:11213","1:6215:2821","1:6216:28875","1:6218:28876","1:6220:28877","1:6221:28878","1:6223:28879"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10409:10989","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:454:4045":{"id":"0:454:4045","crate_id":0,"name":"requires_all","span":{"filename":"src/builder/arg.rs","begin":[4122,4],"end":[4126,5]},"visibility":"public","docs":"Require these arguments names when this one is presen\n\ni.e. when using this argument, the following arguments *must* be present.\n\n**NOTE:** [Conflicting] rules and [override] rules take precedence over being required\nby default.\n\n# Examples\n\n```rust\n# use clap::Arg;\nArg::new(\"config\")\n    .requires_all(&[\"input\", \"output\"])\n# ;\n```\n\nSetting `Arg::requires_all(&[arg, arg2])` requires that all the arguments be used at\nruntime if the defining argument is used. If the defining argument isn't used, the other\nargument isn't required\n\n```rust\n# use clap::{Command, Arg};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .takes_value(true)\n        .requires(\"input\")\n        .long(\"config\"))\n    .arg(Arg::new(\"input\"))\n    .arg(Arg::new(\"output\"))\n    .try_get_matches_from(vec![\n        \"prog\"\n    ]);\n\nassert!(res.is_ok()); // We didn't use cfg, so input and output weren't required\n```\n\nSetting `Arg::requires_all(&[arg, arg2])` and *not* supplying all the arguments is an\nerror.\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .takes_value(true)\n        .requires_all(&[\"input\", \"output\"])\n        .long(\"config\"))\n    .arg(Arg::new(\"input\"))\n    .arg(Arg::new(\"output\"))\n    .try_get_matches_from(vec![\n        \"prog\", \"--config\", \"file.conf\", \"in.txt\"\n    ]);\n\nassert!(res.is_err());\n// We didn't use output\nassert_eq!(res.unwrap_err().kind(), ErrorKind::MissingRequiredArgument);\n```\n[Conflicting]: Arg::conflicts_with()\n[override]: Arg::overrides_with()","links":{"Arg::overrides_with()":"0:460:4136","Arg::conflicts_with()":"0:457:4060"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["names",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Key","id":"0:3239:2795","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4844":{"id":"0:4844","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/value_source.rs","begin":[2,40],"end":[2,42]},"visibility":{"restricted":{"parent":"0:2440:7462","path":"::parser::matches::value_source"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2925:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4828:1684","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2865-0:4806:1682":{"id":"b:2:2865-0:4806:1682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:4806:1682","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2867:2792"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:6835:28905":{"id":"1:6835:28905","crate_id":1,"name":"set_quickack","span":null,"visibility":"default","docs":"Enable or disable `TCP_QUICKACK`.\n\nThis flag causes Linux to eagerly send ACKs rather than delaying them.\nLinux may reset this flag after further operations on the socket.\n\nSee [`man 7 tcp`](https://man7.org/linux/man-pages/man7/tcp.7.html) and\n[TCP delayed acknowledgement](https://en.wikipedia.org/wiki/TCP_delayed_acknowledgment)\nfor more information.\n\n# Examples\n\n```no_run\n#![feature(tcp_quickack)]\nuse std::net::TcpStream;\nuse std::os::linux::net::TcpStreamExt;\n\nlet stream = TcpStream::connect(\"127.0.0.1:8080\")\n        .expect(\"Couldn't connect to the server...\");\nstream.set_quickack(true).expect(\"set_quickack call failed\");\n```","links":{},"attrs":["#[unstable(feature = \"tcp_quickack\", issue = \"96256\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["quickack",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"1:3803:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:2170:7593":{"id":"0:2170:7593","crate_id":0,"name":"remove_many","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[346,4],"end":[352,5]},"visibility":"public","docs":"Return values of a specific option or positional argument.\n\ni.e. an argument that takes multiple values at runtime.\n\nReturns an error if the wrong type was used.  No item will have been removed.\n\nReturns `None` if the option wasn't present.\n\n# Panic\n\nIf the argument definition and access mismatch.  To handle this case programmatically, see\n[`ArgMatches::try_remove_many`].\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, value_parser, ArgAction};\nlet mut m = Command::new(\"myprog\")\n    .arg(Arg::new(\"file\")\n        .action(ArgAction::Append)\n        .multiple_values(true)\n        .required(true)\n        .takes_value(true))\n    .get_matches_from(vec![\n        \"myprog\", \"file1.txt\", \"file2.txt\", \"file3.txt\", \"file4.txt\",\n    ]);\nlet vals: Vec<String> = m.remove_many(\"file\")\n    .expect(\"`file`is required\")\n    .collect();\nassert_eq!(vals, [\"file1.txt\", \"file2.txt\", \"file3.txt\", \"file4.txt\"]);\n```","links":{"`ArgMatches::try_remove_many`":"0:2238:7595"},"attrs":["#[track_caller]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Values2","id":"0:4745:7594","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Any","id":"2:4102:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:490:4195":{"id":"0:490:4195","crate_id":0,"name":"get_value_hint","span":{"filename":"src/builder/arg.rs","begin":[4572,4],"end":[4585,5]},"visibility":"public","docs":"Get the value hint of this argument","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:4351:1680","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:824:5111":{"id":"0:824:5111","crate_id":0,"name":"propagate_version","span":{"filename":"src/builder/command.rs","begin":[1140,4],"end":[1146,5]},"visibility":"public","docs":"Specifies to use the version of the current command for all [`subcommands`].\n\nDefaults to `false`; subcommands have independent version strings from their parents.\n\n**Note:** Make sure you apply it as `global_setting` if you want this setting\nto be propagated to subcommands and sub-subcommands!\n\n**NOTE:** This choice is propagated to all child subcommands.\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg};\nCommand::new(\"myprog\")\n    .version(\"v1.1\")\n    .propagate_version(true)\n    .subcommand(Command::new(\"test\"))\n    .get_matches();\n// running `$ myprog test --version` will display\n// \"myprog-test v1.1\"\n```\n\n[`subcommands`]: crate::Command::subcommand()","links":{"crate::Command::subcommand()":"0:782:2012"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10581:8829":{"id":"2:10581:8829","crate_id":2,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10582:667"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3218-0:4427:2261":{"id":"b:2:3218-0:4427:2261","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:4427:2261","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:3221:128","2:3222:1435"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2865-0:4398:2275":{"id":"b:2:2865-0:4398:2275","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsStringValueParser","id":"0:4398:2275","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2867:2792"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:985:5910":{"id":"0:985:5910","crate_id":0,"name":"get_arg_conflicts_with","span":{"filename":"src/builder/command.rs","begin":[3588,4],"end":[3609,5]},"visibility":"public","docs":"Get a list of all arguments the given argument conflicts with.\n\nIf the provided argument is declared as global, the conflicts will be determined\nbased on the propagation rules of global arguments.\n\n### Panics\n\nIf the given arg contains a conflict with an argument that is unknown to\nthis `Command`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["arg",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3818:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7898:240","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3818:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2975:703":{"id":"2:2975:703","crate_id":2,"name":"ge","span":null,"visibility":"default","docs":"This method tests greater than or equal to (for `self` and `other`) and is used by the `>=`\noperator.\n\n# Examples\n\n```\nlet result = 2.0 >= 1.0;\nassert_eq!(result, true);\n\nlet result = 2.0 >= 2.0;\nassert_eq!(result, true);\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Rhs"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1423:3370":{"id":"0:1423:3370","crate_id":0,"name":"possible_values","span":{"filename":"src/builder/value_parser.rs","begin":[973,4],"end":[981,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:2245","args":{"angle_bracketed":{"args":[{"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"resolved_path","inner":{"name":"crate::PossibleValue","id":"0:4294:1679","args":{"angle_bracketed":{"args":[{"lifetime":"'static"}],"bindings":[]}}}}}}}]}}},"generic_params":[]}],"lifetime":"'_"}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:169:2201":{"id":"0:169:2201","crate_id":0,"name":"augment_args_for_update","span":{"filename":"src/derive.rs","begin":[403,4],"end":[403,64]},"visibility":"default","docs":"Append to [`Command`] so it can update `self`.\n\nThis is used to implement `#[clap(flatten)]`\n\nSee also [`CommandFactory`].","links":{"`Command`":"0:755:1660","`CommandFactory`":"0:153:1669"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["cmd",{"kind":"resolved_path","inner":{"name":"Command","id":"0:755:1660","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Command","id":"0:755:1660","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:928:5841":{"id":"0:928:5841","crate_id":0,"name":"get_short_flag","span":{"filename":"src/builder/command.rs","begin":[3346,4],"end":[3348,5]},"visibility":"public","docs":"Get the short flag of the subcommand.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"char"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:32185:1466":{"id":"2:32185:1466","crate_id":2,"name":"unchecked_shr","span":null,"visibility":"public","docs":"Unchecked shift right. Computes `self >> rhs`, assuming that\n`rhs` is less than the number of bits in `self`.\n\n# Safety\n\nThis results in undefined behavior if `rhs` is larger than\nor equal to the number of bits in `self`,\ni.e. when [`checked_shr`] would return `None`.\n\n[`checked_shr`]: u64::checked_shr","links":{"u64::checked_shr":"2:32184:69450"},"attrs":["#[unstable(feature = \"unchecked_math\", reason = \"niche optimization path\",\nissue = \"85122\",)]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]","#[rustc_const_unstable(feature = \"const_inherent_unchecked_arith\", issue =\n\"85122\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:8635:9042":{"id":"2:8635:9042","crate_id":2,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8637:9976"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1515":{"id":"0:1515","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1613,0],"end":[1641,1]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["map","parse","possible_values"],"trait":{"name":"TypedValueParser","id":"0:1362:2264","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FalseyValueParser","id":"0:4457:2273","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1516:6597","0:1517:6637","0:1519:3370"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:5:848-0:4427:2261":{"id":"b:5:848-0:4427:2261","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:844:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:4427:2261","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["5:850:4342","5:851:4983","5:852:9984"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:2174:1841":{"id":"0:2174:1841","crate_id":0,"name":"value_of","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[421,4],"end":[426,5]},"visibility":"public","docs":"Deprecated, replaced with [`ArgMatches::get_one()`]\n\nReplace `m.value_of(...)` with `m.get_one::<String>(...).map(|s| s.as_str())`","links":{"`ArgMatches::get_one()`":"0:2161:7523"},"attrs":["#[track_caller]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Key","id":"0:3239:2795","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3506:360":{"id":"2:3506:360","crate_id":2,"name":"bitor","span":null,"visibility":"default","docs":"Performs the `|` operation.\n\n# Examples\n\n```\nassert_eq!(true | false, true);\nassert_eq!(false | false, false);\nassert_eq!(5u8 | 1u8, 5);\nassert_eq!(5u8 | 2u8, 7);\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"generic","inner":"Rhs"}]],"output":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"BitOr","id":"2:3503:2032","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:4303":{"id":"0:4303","crate_id":0,"name":null,"span":{"filename":"src/builder/possible_value.rs","begin":[29,16],"end":[29,23]},"visibility":{"restricted":{"parent":"0:1203:2254","path":"::builder::possible_value"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:3254:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:4294:1679","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":["0:4305:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:5571:28845":{"id":"1:5571:28845","crate_id":1,"name":"file_name_ref","span":null,"visibility":"default","docs":"Returns a reference to the underlying `OsStr` of this entry's filename.\n\n# Examples\n\n```\n#![feature(dir_entry_ext2)]\nuse std::os::unix::fs::DirEntryExt2;\nuse std::{fs, io};\n\nfn main() -> io::Result<()> {\n    let mut entries = fs::read_dir(\".\")?.collect::<Result<Vec<_>, io::Error>>()?;\n    entries.sort_unstable_by(|a, b| a.file_name_ref().cmp(b.file_name_ref()));\n\n    for p in entries {\n        println!(\"{p:?}\");\n    }\n\n    Ok(())\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"1:2654:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:4103:1449":{"id":"2:4103:1449","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":"Gets the `TypeId` of `self`.\n\n# Examples\n\n```\nuse std::any::{Any, TypeId};\n\nfn is_string(s: &dyn Any) -> bool {\n    TypeId::of::<String>() == s.type_id()\n}\n\nassert_eq!(is_string(&0), false);\nassert_eq!(is_string(&\"cookie monster\".to_string()), true);\n```","links":{},"attrs":["#[stable(feature = \"get_type_id\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"2:46337:7468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:13807:67837":{"id":"2:13807:67837","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:15876:8642","self::pattern":"2:13336:8923"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13346:8917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13346:8917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:13366:8916","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8668:137":{"id":"2:8668:137","crate_id":2,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8670:691"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:133:2120":{"id":"0:133:2120","crate_id":0,"name":"try_parse_from","span":{"filename":"src/derive.rs","begin":[120,4],"end":[127,5]},"visibility":"default","docs":"Parse from iterator, return Err on error.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["itr",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4647:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsString","id":"1:2651:183","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1856":{"id":"0:1856","crate_id":0,"name":null,"span":{"filename":"src/error/kind.rs","begin":[398,0],"end":[434,1]},"visibility":{"restricted":{"parent":"0:1855:791","path":"::error::kind"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4594:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1857:313"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:8196:9031":{"id":"2:8196:9031","crate_id":2,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8197:27617","2:8198:27618","2:8199:27619","2:8200:27620","2:8201:27621","2:8202:27622","2:8203:27623"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"PartialOrd","id":"2:2969:187","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:2334":{"id":"0:2334","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1747,0],"end":[1756,1]},"visibility":{"restricted":{"parent":"0:2092:7461","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["collect","find","partial_cmp_by","rposition","partition_in_place","flatten","fuse","max_by","intersperse","copied","max","find_map","gt","lt","position","eq_by","unzip","is_partitioned","max_by_key","inspect","cmp","take","intersperse_with","eq","ge","is_sorted","count","cycle","try_fold","any","by_ref","try_for_each","min","size_hint","for_each","chain","filter","take_while","fold","all","partial_cmp","ne","filter_map","le","cloned","is_sorted_by","array_chunks","min_by_key","reduce","skip","try_collect","skip_while","next_chunk","sum","map","advance_by","is_sorted_by_key","product","try_reduce","collect_into","map_while","nth","flat_map","zip","__iterator_get_unchecked","enumerate","cmp_by","try_find","rev","min_by","partition","scan","step_by","last","peekable"],"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsValues","id":"0:4796:1683","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:2336:2117","0:2337:932","0:2338:4836"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:844:1917":{"id":"0:844:1917","crate_id":0,"name":"about","span":{"filename":"src/builder/command.rs","begin":[1492,4],"end":[1495,5]},"visibility":"public","docs":"Sets the program's description for the short help (`-h`).\n\nIf [`Command::long_about`] is not specified, this message will be displayed for `--help`.\n\n**NOTE:** Only `Command::about` (short format) is used in completion\nscript generation in order to be concise.\n\nSee also [`crate_description!`](crate::crate_description!).\n\n# Examples\n\n```no_run\n# use clap::Command;\nCommand::new(\"myprog\")\n    .about(\"Does really amazing things for great people\")\n# ;\n```","links":{"`Command::long_about`":"0:846:4785"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["about",{"kind":"generic","inner":"O"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9532:7459-0:4647:128":{"id":"a:2:9532:7459-0:4647:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:9532:7459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4647:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"2:8935:9963":{"id":"2:8935:9963","crate_id":2,"name":"try_collect","span":null,"visibility":"default","docs":"Fallibly transforms an iterator into a collection, short circuiting if\na failure is encountered.\n\n`try_collect()` is a variation of [`collect()`][`collect`] that allows fallible\nconversions during collection. Its main use case is simplifying conversions from\niterators yielding [`Option<T>`][`Option`] into `Option<Collection<T>>`, or similarly for other [`Try`]\ntypes (e.g. [`Result`]).\n\nImportantly, `try_collect()` doesn't require that the outer [`Try`] type also implements [`FromIterator`];\nonly the inner type produced on `Try::Output` must implement it. Concretely,\nthis means that collecting into `ControlFlow<_, Vec<i32>>` is valid because `Vec<i32>` implements\n[`FromIterator`], even though [`ControlFlow`] doesn't.\n\nAlso, if a failure is encountered during `try_collect()`, the iterator is still valid and\nmay continue to be used, in which case it will continue iterating starting after the element that\ntriggered the failure. See the last example below for an example of how this works.\n\n# Examples\nSuccessfully collecting an iterator of `Option<i32>` into `Option<Vec<i32>>`:\n```\n#![feature(iterator_try_collect)]\n\nlet u = vec![Some(1), Some(2), Some(3)];\nlet v = u.into_iter().try_collect::<Vec<i32>>();\nassert_eq!(v, Some(vec![1, 2, 3]));\n```\n\nFailing to collect in the same way:\n```\n#![feature(iterator_try_collect)]\n\nlet u = vec![Some(1), Some(2), None, Some(3)];\nlet v = u.into_iter().try_collect::<Vec<i32>>();\nassert_eq!(v, None);\n```\n\nA similar example, but with `Result`:\n```\n#![feature(iterator_try_collect)]\n\nlet u: Vec<Result<i32, ()>> = vec![Ok(1), Ok(2), Ok(3)];\nlet v = u.into_iter().try_collect::<Vec<i32>>();\nassert_eq!(v, Ok(vec![1, 2, 3]));\n\nlet u = vec![Ok(1), Ok(2), Err(()), Ok(3)];\nlet v = u.into_iter().try_collect::<Vec<i32>>();\nassert_eq!(v, Err(()));\n```\n\nFinally, even [`ControlFlow`] works, despite the fact that it\ndoesn't implement [`FromIterator`]. Note also that the iterator can\ncontinue to be used, even if a failure is encountered:\n\n```\n#![feature(iterator_try_collect)]\n\nuse core::ops::ControlFlow::{Break, Continue};\n\nlet u = [Continue(1), Continue(2), Break(3), Continue(4), Continue(5)];\nlet mut it = u.into_iter();\n\nlet v = it.try_collect::<Vec<_>>();\nassert_eq!(v, Break(3));\n\nlet v = it.try_collect::<Vec<_>>();\nassert_eq!(v, Continue(vec![4, 5]));\n```\n\n[`collect`]: Iterator::collect","links":{"Iterator::collect":"2:8933:3584","`Result`":"2:47934:208","`ControlFlow`":"2:46098:8807","`FromIterator`":"2:8668:137","`Option`":"2:47809:179","`Try`":"2:3831:230"},"attrs":["#[unstable(feature = \"iterator_try_collect\", issue = \"94047\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"qualified_path","inner":{"name":"TryType","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"trait":{"name":"Try","id":"2:3831:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"trait":{"name":"Residual","id":"2:3842:8800","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"B"},"bounds":[{"trait_bound":{"trait":{"name":"FromIterator","id":"2:8668:137","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"trait":{"name":"Try","id":"2:3831:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Try","id":"2:3831:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"trait":{"name":"Try","id":"2:3831:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Residual","id":"2:3842:8800","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13723:4345":{"id":"2:13723:4345","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:47811:177"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11209:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11209:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:9035:9972":{"id":"2:9035:9972","crate_id":2,"name":"rposition","span":null,"visibility":"default","docs":"Searches for an element in an iterator from the right, returning its\nindex.\n\n`rposition()` takes a closure that returns `true` or `false`. It applies\nthis closure to each element of the iterator, starting from the end,\nand if one of them returns `true`, then `rposition()` returns\n[`Some(index)`]. If all of them return `false`, it returns [`None`].\n\n`rposition()` is short-circuiting; in other words, it will stop\nprocessing as soon as it finds a `true`.\n\n[`Some(index)`]: Some\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\n\nassert_eq!(a.iter().rposition(|&x| x == 3), Some(2));\n\nassert_eq!(a.iter().rposition(|&x| x == 5), None);\n```\n\nStopping at the first `true`:\n\n```\nlet a = [1, 2, 3];\n\nlet mut iter = a.iter();\n\nassert_eq!(iter.rposition(|&x| x == 2), Some(1));\n\n// we can still use `iter`, as there are more elements.\nassert_eq!(iter.next(), Some(&1));\n```","links":{"Some":"2:47813:220","`None`":"2:47811:177"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["predicate",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3624:132","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"ExactSizeIterator","id":"2:8741:7849","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"DoubleEndedIterator","id":"2:8716:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:80:69231":{"id":"22:80:69231","crate_id":22,"name":"to_raw_bytes","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/os_str_bytes-6.0.0/src/lib.rs","begin":[293,4],"end":[293,44]},"visibility":"default","docs":"Converts a platform-native string into an equivalent byte slice.\n\nThe returned bytes string will use an [unspecified encoding].\n\n# Examples\n\n```\nuse std::env;\n# use std::io;\n\nuse os_str_bytes::OsStrBytes;\n\nlet os_string = env::current_exe()?;\nprintln!(\"{:?}\", os_string.to_raw_bytes());\n#\n# Ok::<_, io::Error>(())\n```\n\n[unspecified encoding]: self#encoding","links":{"self#encoding":"22:0:8965"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Cow","id":"5:853:109","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:3173:312":{"id":"2:3173:312","crate_id":2,"name":"as_ref","span":null,"visibility":"default","docs":"Converts this type into a shared reference of the (usually inferred) input type.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:4280:667":{"id":"0:4280:667","crate_id":0,"name":"fmt","span":{"filename":"src/builder/command.rs","begin":[77,9],"end":[77,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10511:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13739:43178":{"id":"2:13739:43178","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"2:13738:43188"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:50073:8925","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23182:1290":{"id":"2:23182:1290","crate_id":2,"name":"simd_ne","span":null,"visibility":"default","docs":"Test if each lane is equal to the corresponding lane in `other`.","links":{},"attrs":["#[must_use =\n\"method returns a new mask and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Mask","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdPartialEq","id":"2:23179:11402","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:2:3218-0:4410:2272":{"id":"b:2:3218-0:4410:2272","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EnumValueParser","id":"0:4410:2272","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"items":["2:3221:128","2:3222:1435"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:2270:2117":{"id":"0:2270:2117","crate_id":0,"name":"Item","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1554,4],"end":[1554,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}},"0:1520":{"id":"0:1520","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1643,0],"end":[1647,1]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:3254:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FalseyValueParser","id":"0:4457:2273","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1521:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:321:1933":{"id":"0:321:1933","crate_id":0,"name":"long","span":{"filename":"src/builder/arg.rs","begin":[218,4],"end":[228,5]},"visibility":"public","docs":"Sets the long version of the argument without the preceding `--`.\n\nBy default `version` and `help` are used by the auto-generated `version` and `help`\narguments, respectively. You may use the word `version` or `help` for the long form of your\nown arguments, in which case `clap` simply will not assign those to the auto-generated\n`version` or `help` arguments.\n\n**NOTE:** Any leading `-` characters will be stripped\n\n# Examples\n\nTo set `long` use a word containing valid UTF-8. If you supply a double leading\n`--` such as `--config` they will be stripped. Hyphens in the middle of the word, however,\nwill *not* be stripped (i.e. `config-file` is allowed).\n\nSetting `long` allows using the argument via a double hyphen (`--`) such as `--config`\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .long(\"config\")\n        .takes_value(true))\n    .get_matches_from(vec![\n        \"prog\", \"--config\", \"file.toml\"\n    ]);\n\nassert_eq!(m.get_one::<String>(\"cfg\").map(String::as_str), Some(\"file.toml\"));\n```","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["l",{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3218-0:3818:1661":{"id":"b:2:3218-0:3818:1661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3818:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":["2:3221:128","2:3222:1435"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:23179:11402":{"id":"2:23179:11402","crate_id":2,"name":"SimdPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23180:11341","2:23181:1265","2:23182:1290"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13742:43173":{"id":"2:13742:43173","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:50082:8924","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3382:225-0:4569:7000":{"id":"a:2:3382:225-0:4569:7000","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextValue","id":"0:4569:7000","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1294:2265":{"id":"0:1294:2265","crate_id":0,"name":"ValueParser","span":{"filename":"src/builder/value_parser.rs","begin":[59,0],"end":[59,41]},"visibility":"public","docs":"Parse/validate argument values\n\nSpecified with [`Arg::value_parser`][crate::Arg::value_parser].\n\n`ValueParser` defines how to convert a raw argument value into a validated and typed value for\nuse within an application.\n\nSee\n- [`value_parser!`][crate::value_parser] for automatically selecting an implementation for a given type\n- [`ValueParser::new`] for additional [`TypedValueParser`] that can be used\n\n# Example\n\n```rust\nlet mut cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"color\")\n            .long(\"color\")\n            .value_parser([\"always\", \"auto\", \"never\"])\n            .default_value(\"auto\")\n    )\n    .arg(\n        clap::Arg::new(\"hostname\")\n            .long(\"hostname\")\n            .value_parser(clap::builder::NonEmptyStringValueParser::new())\n            .takes_value(true)\n            .required(true)\n    )\n    .arg(\n        clap::Arg::new(\"port\")\n            .long(\"port\")\n            .value_parser(clap::value_parser!(u16).range(3000..))\n            .takes_value(true)\n            .required(true)\n    );\n\nlet m = cmd.try_get_matches_from_mut(\n    [\"cmd\", \"--hostname\", \"rust-lang.org\", \"--port\", \"3001\"]\n).unwrap();\n\nlet color: &String = m.get_one(\"color\")\n    .expect(\"default\");\nassert_eq!(color, \"auto\");\n\nlet hostname: &String = m.get_one(\"hostname\")\n    .expect(\"required\");\nassert_eq!(hostname, \"rust-lang.org\");\n\nlet port: u16 = *m.get_one(\"port\")\n    .expect(\"required\");\nassert_eq!(port, 3001);\n```","links":{"crate::Arg::value_parser":"0:353:2257","`TypedValueParser`":"0:1362:2264","`ValueParser::new`":"0:1310:930","crate::value_parser":"0:1621:2257"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:1309","0:1316","a:2:9533:7458-0:1294:2265","a:2:9532:7459-0:1294:2265","a:2:3382:225-0:1294:2265","a:2:3370:216-0:1294:2265","a:2:3411:6205-0:1294:2265","b:2:4104-0:1294:2265","b:2:2865-0:1294:2265","b:2:3203-0:1294:2265","b:2:3207-0:1294:2265","b:2:3218-0:1294:2265","b:2:2868-0:1294:2265","b:2:3213-0:1294:2265","b:5:848-0:1294:2265","0:1321","0:1326","0:1328","0:1330","0:1332","0:1334","0:1336","0:1338","0:1344","0:1346"]}},"0:314:930":{"id":"0:314:930","crate_id":0,"name":"new","span":{"filename":"src/builder/arg.rs","begin":[122,4],"end":[124,5]},"visibility":"public","docs":"Create a new [`Arg`] with a unique name.\n\nThe name is used to check whether or not the argument was used at\nruntime, get values, set relationships with other args, etc..\n\n**NOTE:** In the case of arguments that take values (i.e. [`Arg::takes_value(true)`])\nand positional arguments (i.e. those without a preceding `-` or `--`) the name will also\nbe displayed when the user prints the usage/help information of the program.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg};\nArg::new(\"config\")\n# ;\n```\n[`Arg::takes_value(true)`]: Arg::takes_value()","links":{"`Arg`":"0:3818:1661","Arg::takes_value()":"0:351:1949"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["n",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3428:2528":{"id":"0:3428:2528","crate_id":0,"name":"ArgRequiredElseHelp","span":{"filename":"src/builder/app_settings.rs","begin":[445,4],"end":[445,23]},"visibility":"default","docs":"Deprecated, replaced with [`Command::arg_required_else_help`] and\n[`Command::is_arg_required_else_help_set`]\n\nDerive: replace `#[clap(setting = ArgRequiredElseHelp)]` with `#[clap(arg_required_else_help = true)]`\n\nBuilder: replace `cmd.setting(ArgRequiredElseHelp)` with `cmd.arg_required_else_help(true)`","links":{"`Command::is_arg_required_else_help_set`":"0:1006:5947","`Command::arg_required_else_help`":"0:878:5415"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"2:23394:21792":{"id":"2:23394:21792","crate_id":2,"name":"from_bitmask","span":null,"visibility":"default","docs":"Converts a bitmask to a mask.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["bitmask",{"kind":"qualified_path","inner":{"name":"BitMask","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"ToBitMask","id":"2:23391:18217","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:4540:7150":{"id":"0:4540:7150","crate_id":0,"name":"ActualNumOccurrences","span":{"filename":"src/error/context.rs","begin":[22,4],"end":[22,24]},"visibility":"default","docs":"Number of occurrences present","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"2:13364:28680":{"id":"2:13364:28680","crate_id":2,"name":"next_match_back","span":null,"visibility":"default","docs":"Finds the next [`Match`][SearchStep::Match] result.\nSee [`next_back()`][ReverseSearcher::next_back].","links":{"SearchStep::Match":"2:50171:10312","ReverseSearcher::next_back":"2:13363:7848"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"primitive","inner":"usize"}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4435:415":{"id":"0:4435:415","crate_id":0,"name":"clone","span":{"filename":"src/builder/value_parser.rs","begin":[1134,15],"end":[1134,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:4427:2261","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2187:1842":{"id":"0:2187:1842","crate_id":0,"name":"value_of_t","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[575,4],"end":[592,5]},"visibility":"public","docs":"Deprecated, replaced with [`ArgMatches::get_one()`]","links":{"`ArgMatches::get_one()`":"0:2161:7523"},"attrs":["#[track_caller]","#![allow(deprecated)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"R"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4647:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:13275:1861","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"R"},"trait":{"name":"FromStr","id":"2:13275:1861","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10569:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23117:21816":{"id":"2:23117:21816","crate_id":2,"name":"reduce_sum","span":null,"visibility":"default","docs":"Returns the sum of the lanes of the vector, with wrapping addition.\n\n# Examples\n\n```\n# #![feature(portable_simd)]\n# #[cfg(feature = \"as_crate\")] use core_simd::simd;\n# #[cfg(not(feature = \"as_crate\"))] use core::simd;\n# use simd::{i32x4, SimdInt};\nlet v = i32x4::from_array([1, 2, 3, 4]);\nassert_eq!(v.reduce_sum(), 10);\n\n// SIMD integer addition is always wrapping\nlet v = i32x4::from_array([i32::MAX, 1, 0, 0]);\nassert_eq!(v.reduce_sum(), i32::MIN);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Scalar","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdInt","id":"2:23106:11397","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:2971:1008":{"id":"2:2971:1008","crate_id":2,"name":"partial_cmp","span":null,"visibility":"default","docs":"This method returns an ordering between `self` and `other` values if one exists.\n\n# Examples\n\n```\nuse std::cmp::Ordering;\n\nlet result = 1.0.partial_cmp(&2.0);\nassert_eq!(result, Some(Ordering::Less));\n\nlet result = 1.0.partial_cmp(&1.0);\nassert_eq!(result, Some(Ordering::Equal));\n\nlet result = 2.0.partial_cmp(&1.0);\nassert_eq!(result, Some(Ordering::Greater));\n```\n\nWhen comparison is impossible:\n\n```\nlet result = f64::NAN.partial_cmp(&1.0);\nassert_eq!(result, None);\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Rhs"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Ordering","id":"2:37932:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1446":{"id":"0:1446","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1140,0],"end":[1218,1]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"std::convert::TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:4427:2261","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:1448:930","0:1449:6651"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4472:415":{"id":"0:4472:415","crate_id":0,"name":"clone","span":{"filename":"src/builder/value_parser.rs","begin":[1780,15],"end":[1780,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"NonEmptyStringValueParser","id":"0:4469:2274","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1561":{"id":"0:1561","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1921,0],"end":[1926,1]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ValueParserFactory","id":"0:1558:2266","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"5:8479:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1562:1671","0:1563:2257"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:840:4782":{"id":"0:840:4782","crate_id":0,"name":"display_name","span":{"filename":"src/builder/command.rs","begin":[1448,4],"end":[1451,5]},"visibility":"public","docs":"Overrides the runtime-determined display name of the program for help and error messages.\n\n# Examples\n\n```no_run\n# use clap::Command;\nCommand::new(\"My Program\")\n     .display_name(\"my_program\")\n# ;\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["name",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:8479:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4745:7594":{"id":"0:4745:7594","crate_id":0,"name":"Values2","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1489,0],"end":[1493,1]},"visibility":"public","docs":"Iterate over multiple values for an argument via [`ArgMatches::remove_many`].\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ArgAction};\nlet mut m = Command::new(\"myapp\")\n    .arg(Arg::new(\"output\")\n        .short('o')\n        .action(ArgAction::Append)\n        .takes_value(true))\n    .get_matches_from(vec![\"myapp\", \"-o\", \"val1\", \"-o\", \"val2\"]);\n\nlet mut values = m.remove_many::<String>(\"output\")\n    .unwrap();\n\nassert_eq!(values.next(), Some(String::from(\"val1\")));\nassert_eq!(values.next(), Some(String::from(\"val2\")));\nassert_eq!(values.next(), None);\n```","links":{"`ArgMatches::remove_many`":"0:2170:7593"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":[]}},"0:1018:5967":{"id":"0:1018:5967","crate_id":0,"name":"is_args_conflicts_with_subcommands_set","span":{"filename":"src/builder/command.rs","begin":[3800,4],"end":[3802,5]},"visibility":"public","docs":"Report whether [`Command::args_conflicts_with_subcommands`] is set","links":{"`Command::args_conflicts_with_subcommands`":"0:909:5678"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4847:1008":{"id":"0:4847:1008","crate_id":0,"name":"partial_cmp","span":{"filename":"src/parser/matches/value_source.rs","begin":[2,44],"end":[2,54]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4828:1684","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::option::Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"$crate::cmp::Ordering","id":"2:37932:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3449:8777":{"id":"2:3449:8777","crate_id":2,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3451:184","2:3452:902"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"26:32:8571":{"id":"26:32:8571","crate_id":26,"name":"reset","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/termcolor-1.1.3/src/lib.rs","begin":[157,4],"end":[157,42]},"visibility":"default","docs":"Reset the current color settings to their original settings.\n\nIf there was a problem resetting the color settings, then an error is\nreturned.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"1:3803:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:5:848-0:5070:1667":{"id":"b:5:848-0:5070:1667","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:844:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:5070:1667","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:850:4342","5:851:4983","5:852:9984"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:912:5805":{"id":"0:912:5805","crate_id":0,"name":"multicall","span":{"filename":"src/builder/command.rs","begin":[3149,4],"end":[3155,5]},"visibility":"public","docs":"Multiple-personality program dispatched on the binary name (`argv[0]`)\n\nA \"multicall\" executable is a single executable\nthat contains a variety of applets,\nand decides which applet to run based on the name of the file.\nThe executable can be called from different names by creating hard links\nor symbolic links to it.\n\nThis is desirable for:\n- Easy distribution, a single binary that can install hardlinks to access the different\n  personalities.\n- Minimal binary size by sharing common code (e.g. standard library, clap)\n- Custom shells or REPLs where there isn't a single top-level command\n\nSetting `multicall` will cause\n- `argv[0]` to be stripped to the base name and parsed as the first argument, as if\n  [`Command::no_binary_name`][App::no_binary_name] was set.\n- Help and errors to report subcommands as if they were the top-level command\n\nWhen the subcommand is not present, there are several strategies you may employ, depending\non your needs:\n- Let the error percolate up normally\n- Print a specialized error message using the\n  [`Error::context`][crate::Error::context]\n- Print the [help][App::write_help] but this might be ambiguous\n- Disable `multicall` and re-parse it\n- Disable `multicall` and re-parse it with a specific subcommand\n\nWhen detecting the error condition, the [`ErrorKind`] isn't sufficient as a sub-subcommand\nmight report the same error.  Enable\n[`allow_external_subcommands`][App::allow_external_subcommands] if you want to specifically\nget the unrecognized binary name.\n\n**NOTE:** Multicall can't be used with [`no_binary_name`] since they interpret\nthe command name in incompatible ways.\n\n**NOTE:** The multicall command cannot have arguments.\n\n**NOTE:** Applets are slightly semantically different from subcommands,\nso it's recommended to use [`Command::subcommand_help_heading`] and\n[`Command::subcommand_value_name`] to change the descriptive text as above.\n\n# Examples\n\n`hostname` is an example of a multicall executable.\nBoth `hostname` and `dnsdomainname` are provided by the same executable\nand which behaviour to use is based on the executable file name.\n\nThis is desirable when the executable has a primary purpose\nbut there is related functionality that would be convenient to provide\nand implement it to be in the same executable.\n\nThe name of the cmd is essentially unused\nand may be the same as the name of a subcommand.\n\nThe names of the immediate subcommands of the Command\nare matched against the basename of the first argument,\nwhich is conventionally the path of the executable.\n\nThis does not allow the subcommand to be passed as the first non-path argument.\n\n```rust\n# use clap::{Command, ErrorKind};\nlet mut cmd = Command::new(\"hostname\")\n    .multicall(true)\n    .subcommand(Command::new(\"hostname\"))\n    .subcommand(Command::new(\"dnsdomainname\"));\nlet m = cmd.try_get_matches_from_mut(&[\"/usr/bin/hostname\", \"dnsdomainname\"]);\nassert!(m.is_err());\nassert_eq!(m.unwrap_err().kind(), ErrorKind::UnknownArgument);\nlet m = cmd.get_matches_from(&[\"/usr/bin/dnsdomainname\"]);\nassert_eq!(m.subcommand_name(), Some(\"dnsdomainname\"));\n```\n\nBusybox is another common example of a multicall executable\nwith a subcommmand for each applet that can be run directly,\ne.g. with the `cat` applet being run by running `busybox cat`,\nor with `cat` as a link to the `busybox` binary.\n\nThis is desirable when the launcher program has additional options\nor it is useful to run the applet without installing a symlink\ne.g. to test the applet without installing it\nor there may already be a command of that name installed.\n\nTo make an applet usable as both a multicall link and a subcommand\nthe subcommands must be defined both in the top-level Command\nand as subcommands of the \"main\" applet.\n\n```rust\n# use clap::Command;\nfn applet_commands() -> [Command<'static>; 2] {\n    [Command::new(\"true\"), Command::new(\"false\")]\n}\nlet mut cmd = Command::new(\"busybox\")\n    .multicall(true)\n    .subcommand(\n        Command::new(\"busybox\")\n            .subcommand_value_name(\"APPLET\")\n            .subcommand_help_heading(\"APPLETS\")\n            .subcommands(applet_commands()),\n    )\n    .subcommands(applet_commands());\n// When called from the executable's canonical name\n// its applets can be matched as subcommands.\nlet m = cmd.try_get_matches_from_mut(&[\"/usr/bin/busybox\", \"true\"]).unwrap();\nassert_eq!(m.subcommand_name(), Some(\"busybox\"));\nassert_eq!(m.subcommand().unwrap().1.subcommand_name(), Some(\"true\"));\n// When called from a link named after an applet that applet is matched.\nlet m = cmd.get_matches_from(&[\"/usr/bin/true\"]);\nassert_eq!(m.subcommand_name(), Some(\"true\"));\n```\n\n[`no_binary_name`]: crate::Command::no_binary_name\n[`App::subcommand_value_name`]: crate::Command::subcommand_value_name\n[`App::subcommand_help_heading`]: crate::Command::subcommand_help_heading","links":{"App::no_binary_name":"0:816:5053","`Command::subcommand_value_name`":"0:913:4803","App::write_help":"0:807:5000","`ErrorKind`":"0:4594:1681","App::allow_external_subcommands":"0:907:5655","crate::Error::context":"0:1877:488","`Command::subcommand_help_heading`":"0:915:5825","crate::Command::no_binary_name":"0:816:5053"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3370:216-0:4420:2260":{"id":"a:2:3370:216-0:4420:2260","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValuesParser","id":"0:4420:2260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:14076:151":{"id":"2:14076:151","crate_id":2,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:14077:184","2:14078:151","2:14079:776"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:4414":{"id":"0:4414","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[912,9],"end":[912,14]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"crate::ValueEnum","id":"0:174:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EnumValueParser","id":"0:4410:2272","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"items":["0:4416:415"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:167:1668":{"id":"0:167:1668","crate_id":0,"name":"Args","span":{"filename":"src/derive.rs","begin":[393,0],"end":[404,1]},"visibility":"public","docs":"Parse a set of arguments into a user-defined container.\n\nImplementing this trait lets a parent container delegate argument parsing behavior to `Self`.\nwith:\n- `#[clap(flatten)] args: ChildArgs`: Attribute can only be used with struct fields that impl\n  `Args`.\n- `Variant(ChildArgs)`: No attribute is used with enum variants that impl `Args`.\n\nSee the [derive reference](crate::_derive) for attributes and best practices.\n\n**NOTE:** Deriving requires the [`derive` feature flag][crate::_features]\n\n# Example\n\n ```ignore\n#[derive(clap::Parser)]\nstruct Args {\n    #[clap(flatten)]\n    logging: LogArgs,\n}\n\n#[derive(clap::Args)]\nstruct LogArgs {\n    #[clap(long, short = 'v', parse(from_occurrences))]\n    verbose: i8,\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:168:2198","0:169:2201"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FromArgMatches","id":"0:162:1670","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:204"]}},"2:13716:67822":{"id":"2:13716:67822","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:13714:67821"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:9101:422":{"id":"2:9101:422","crate_id":2,"name":"cmp","span":null,"visibility":"default","docs":"[Lexicographically](Ord#lexicographical-comparison) compares the elements of this [`Iterator`] with those\nof another.\n\n# Examples\n\n```\nuse std::cmp::Ordering;\n\nassert_eq!([1].iter().cmp([1].iter()), Ordering::Equal);\nassert_eq!([1].iter().cmp([1, 2].iter()), Ordering::Less);\nassert_eq!([1, 2].iter().cmp([1].iter()), Ordering::Greater);\n```","links":{"`Iterator`":"2:8873:159","Ord#lexicographical-comparison":"2:2956:180"},"attrs":["#[stable(feature = \"iter_order\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Ordering","id":"2:37932:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"2:2956:180","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2865-0:4439:2262":{"id":"b:2:2865-0:4439:2262","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangedU64ValueParser","id":"0:4439:2262","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2867:2792"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3213-0:4463:2271":{"id":"b:2:3213-0:4463:2271","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3183:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BoolishValueParser","id":"0:4463:2271","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3216:128","2:3217:1436"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4831:7921":{"id":"0:4831:7921","crate_id":0,"name":"EnvVariable","span":{"filename":"src/parser/matches/value_source.rs","begin":[8,4],"end":[8,15]},"visibility":"default","docs":"Value came [`Arg::env`][crate::Arg::env]","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"0:4800":{"id":"0:4800","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1739,9],"end":[1739,14]},"visibility":{"restricted":{"parent":"0:2092:7461","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsValues","id":"0:4796:1683","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:4802:415"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4538:7102":{"id":"0:4538:7102","crate_id":0,"name":"MinValues","span":{"filename":"src/error/context.rs","begin":[20,4],"end":[20,13]},"visibility":"default","docs":"Minimum number of allowed values","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"a:2:9532:7459-0:4778:1685":{"id":"a:2:9532:7459-0:4778:1685","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:9532:7459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:4778:1685","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"2:9107:1008":{"id":"2:9107:1008","crate_id":2,"name":"partial_cmp","span":null,"visibility":"default","docs":"[Lexicographically](Ord#lexicographical-comparison) compares the elements of this [`Iterator`] with those\nof another.\n\n# Examples\n\n```\nuse std::cmp::Ordering;\n\nassert_eq!([1.].iter().partial_cmp([1.].iter()), Some(Ordering::Equal));\nassert_eq!([1.].iter().partial_cmp([1., 2.].iter()), Some(Ordering::Less));\nassert_eq!([1., 2.].iter().partial_cmp([1.].iter()), Some(Ordering::Greater));\n\nassert_eq!([f64::NAN].iter().partial_cmp([1.].iter()), None);\n```","links":{"`Iterator`":"2:8873:159","Ord#lexicographical-comparison":"2:2956:180"},"attrs":["#[stable(feature = \"iter_order\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Ordering","id":"2:37932:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"PartialOrd","id":"2:2969:187","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"IntoIterator","id":"2:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2865-0:4463:2271":{"id":"b:2:2865-0:4463:2271","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BoolishValueParser","id":"0:4463:2271","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2867:2792"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13787:2103":{"id":"2:13787:2103","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:13336:8923","`DoubleEndedIterator`":"2:8716:121","str::matches":"2:13787:2103","prim@char":"1:15876:8642"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:49994:8944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13346:8917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:619:1948":{"id":"0:619:1948","crate_id":0,"name":"required","span":{"filename":"src/builder/arg_group.rs","begin":[288,4],"end":[291,5]},"visibility":"public","docs":"Require an argument from the group to be present when parsing.\n\nThis is unless conflicting with another argument.  A required group will be displayed in\nthe usage string of the application in the format `<arg|arg2|arg3>`.\n\n**NOTE:** This setting only applies to the current [`Command`] / [`Subcommand`]s, and not\nglobally.\n\n**NOTE:** By default, [`ArgGroup::multiple`] is set to `false` which when combined with\n`ArgGroup::required(true)` states, \"One and *only one* arg must be used from this group.\nUse of more than one arg is an error.\" Vice setting `ArgGroup::multiple(true)` which\nstates, '*At least* one arg from this group must be used. Using multiple is OK.\"\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ArgGroup, ErrorKind};\nlet result = Command::new(\"myprog\")\n    .arg(Arg::new(\"flag\")\n        .short('f'))\n    .arg(Arg::new(\"color\")\n        .short('c'))\n    .group(ArgGroup::new(\"req_flags\")\n        .args(&[\"flag\", \"color\"])\n        .required(true))\n    .try_get_matches_from(vec![\"myprog\"]);\n// Because we didn't use any of the args in the group, it's an error\nassert!(result.is_err());\nlet err = result.unwrap_err();\nassert_eq!(err.kind(), ErrorKind::MissingRequiredArgument);\n```\n\n[`Subcommand`]: crate::Subcommand\n[`ArgGroup::multiple`]: ArgGroup::multiple()\n[`Command`]: crate::Command","links":{"ArgGroup::multiple()":"0:618:2014","crate::Command":"0:755:1660","crate::Subcommand":"0:170:1672"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4561":{"id":"0:4561","crate_id":0,"name":null,"span":{"filename":"src/error/context.rs","begin":[2,22],"end":[2,27]},"visibility":{"restricted":{"parent":"0:1854:488","path":"::error::context"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:4523:6999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4562:667"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1280:1862":{"id":"0:1280:1862","crate_id":0,"name":"from_str","span":{"filename":"src/builder/value_hint.rs","begin":[77,4],"end":[94,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["s",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"FromStr","id":"2:13275:1861","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:819:5080":{"id":"0:819:5080","crate_id":0,"name":"dont_delimit_trailing_values","span":{"filename":"src/builder/command.rs","begin":[1006,4],"end":[1012,5]},"visibility":"public","docs":"Disables the automatic delimiting of values after `--` or when [`Command::trailing_var_arg`]\nwas used.\n\n**NOTE:** The same thing can be done manually by setting the final positional argument to\n[`Arg::use_value_delimiter(false)`]. Using this setting is safer, because it's easier to locate\nwhen making changes.\n\n**NOTE:** This choice is propagated to all child subcommands.\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg};\nCommand::new(\"myprog\")\n    .dont_delimit_trailing_values(true)\n    .get_matches();\n```\n\n[`Arg::use_value_delimiter(false)`]: crate::Arg::use_value_delimiter()","links":{"`Command::trailing_var_arg`":"0:881:5447","crate::Arg::use_value_delimiter()":"0:387:3457"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2865-0:4768:7385":{"id":"b:2:2865-0:4768:7385","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawValues","id":"0:4768:7385","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2867:2792"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3213-0:3389:1676":{"id":"b:2:3213-0:3389:1676","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3183:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:3389:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3216:128","2:3217:1436"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:10582:667":{"id":"2:10582:667","crate_id":2,"name":"fmt","span":null,"visibility":"default","docs":"Formats the value using the given formatter.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Formatter","id":"2:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"2:48872:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:4403:667":{"id":"0:4403:667","crate_id":0,"name":"fmt","span":{"filename":"src/builder/value_parser.rs","begin":[766,22],"end":[766,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10511:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3203-0:4796:1683":{"id":"b:2:3203-0:4796:1683","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsValues","id":"0:4796:1683","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3206:2391"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4465":{"id":"0:4465","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1691,15],"end":[1691,20]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BoolishValueParser","id":"0:4463:2271","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4466:415"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4406":{"id":"0:4406","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[808,15],"end":[808,20]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PathBufValueParser","id":"0:4404:2276","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4407:415"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:6190:68479":{"id":"5:6190:68479","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8479:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8479:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1330":{"id":"0:1330","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[383,0],"end":[388,1]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":"Create an `i64` [`ValueParser`] from a `N..` range\n\nSee [`RangedI64ValueParser`] for more control over the output type.\n\nSee also [`RangedU64ValueParser`]\n\n# Examples\n\n```rust\nlet mut cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"port\")\n            .long(\"port\")\n            .value_parser(3000..)\n            .takes_value(true)\n            .required(true)\n    );\n\nlet m = cmd.try_get_matches_from_mut([\"cmd\", \"--port\", \"3001\"]).unwrap();\nlet port: i64 = *m.get_one(\"port\")\n    .expect(\"required\");\nassert_eq!(port, 3001);\n```","links":{"`RangedU64ValueParser`":"0:4439:2262","`ValueParser`":"0:1294:2265","`RangedI64ValueParser`":"0:4427:2261"},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"RangeFrom","id":"2:46212:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i64"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1294:2265","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1331:688"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:2832":{"id":"0:2832","crate_id":0,"name":null,"span":{"filename":"src/parser/mod.rs","begin":[24,0],"end":[24,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"error::MatchesError","name":"MatchesError","id":"0:4693:7387","glob":false}},"0:5082":{"id":"0:5082","crate_id":0,"name":null,"span":{"filename":"src/util/color.rs","begin":[2,29],"end":[2,31]},"visibility":{"restricted":{"parent":"0:3336:1575","path":"::util::color"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:3379:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:5070:1667","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4646:611":{"id":"0:4646:611","crate_id":0,"name":"eq","span":{"filename":"src/error/kind.rs","begin":[2,29],"end":[2,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4594:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4586":{"id":"0:4586","crate_id":0,"name":null,"span":{"filename":"src/error/context.rs","begin":[42,16],"end":[42,21]},"visibility":{"restricted":{"parent":"0:1854:488","path":"::error::context"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextValue","id":"0:4569:7000","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4587:667"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:338:2822":{"id":"0:338:2822","crate_id":0,"name":"requires","span":{"filename":"src/builder/arg.rs","begin":[707,4],"end":[710,5]},"visibility":"public","docs":"Sets an argument that is required when this one is present\n\ni.e. when using this argument, the following argument *must* be present.\n\n**NOTE:** [Conflicting] rules and [override] rules take precedence over being required\n\n# Examples\n\n```rust\n# use clap::Arg;\nArg::new(\"config\")\n    .requires(\"input\")\n# ;\n```\n\nSetting [`Arg::requires(name)`] requires that the argument be used at runtime if the\ndefining argument is used. If the defining argument isn't used, the other argument isn't\nrequired\n\n```rust\n# use clap::{Command, Arg};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .takes_value(true)\n        .requires(\"input\")\n        .long(\"config\"))\n    .arg(Arg::new(\"input\"))\n    .try_get_matches_from(vec![\n        \"prog\"\n    ]);\n\nassert!(res.is_ok()); // We didn't use cfg, so input wasn't required\n```\n\nSetting [`Arg::requires(name)`] and *not* supplying that argument is an error.\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .takes_value(true)\n        .requires(\"input\")\n        .long(\"config\"))\n    .arg(Arg::new(\"input\"))\n    .try_get_matches_from(vec![\n        \"prog\", \"--config\", \"file.conf\"\n    ]);\n\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind(), ErrorKind::MissingRequiredArgument);\n```\n[`Arg::requires(name)`]: Arg::requires()\n[Conflicting]: Arg::conflicts_with()\n[override]: Arg::overrides_with()","links":{"Arg::conflicts_with()":"0:457:4060","Arg::requires()":"0:338:2822","Arg::overrides_with()":"0:460:4136"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["arg_id",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Key","id":"0:3239:2795","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13784:67829":{"id":"2:13784:67829","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13346:8917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13346:8917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13361:8918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:14063:1024":{"id":"2:14063:1024","crate_id":2,"name":"poll","span":null,"visibility":"default","docs":"Attempt to resolve the future to a final value, registering\nthe current task for wakeup if the value is not yet available.\n\n# Return value\n\nThis function returns:\n\n- [`Poll::Pending`] if the future is not ready yet\n- [`Poll::Ready(val)`] with the result `val` of this future if it\n  finished successfully.\n\nOnce a future has finished, clients should not `poll` it again.\n\nWhen a future is not ready yet, `poll` returns `Poll::Pending` and\nstores a clone of the [`Waker`] copied from the current [`Context`].\nThis [`Waker`] is then woken once the future can make progress.\nFor example, a future waiting for a socket to become\nreadable would call `.clone()` on the [`Waker`] and store it.\nWhen a signal arrives elsewhere indicating that the socket is readable,\n[`Waker::wake`] is called and the socket future's task is awoken.\nOnce a task has been woken up, it should attempt to `poll` the future\nagain, which may or may not produce a final value.\n\nNote that on multiple calls to `poll`, only the [`Waker`] from the\n[`Context`] passed to the most recent call should be scheduled to\nreceive a wakeup.\n\n# Runtime characteristics\n\nFutures alone are *inert*; they must be *actively* `poll`ed to make\nprogress, meaning that each time the current task is woken up, it should\nactively re-`poll` pending futures that it still has an interest in.\n\nThe `poll` function is not called repeatedly in a tight loop -- instead,\nit should only be called when the future indicates that it is ready to\nmake progress (by calling `wake()`). If you're familiar with the\n`poll(2)` or `select(2)` syscalls on Unix it's worth noting that futures\ntypically do *not* suffer the same problems of \"all wakeups must poll\nall events\"; they are more like `epoll(4)`.\n\nAn implementation of `poll` should strive to return quickly, and should\nnot block. Returning quickly prevents unnecessarily clogging up\nthreads or event loops. If it is known ahead of time that a call to\n`poll` may end up taking awhile, the work should be offloaded to a\nthread pool (or something similar) to ensure that `poll` can return\nquickly.\n\n# Panics\n\nOnce a future has completed (returned `Ready` from `poll`), calling its\n`poll` method again may panic, block forever, or cause other kinds of\nproblems; the `Future` trait places no requirements on the effects of\nsuch a call. However, as the `poll` method is not marked `unsafe`,\nRust's usual rules apply: calls must never cause undefined behavior\n(memory corruption, incorrect use of `unsafe` functions, or the like),\nregardless of the future's state.\n\n[`Poll::Ready(val)`]: Poll::Ready\n[`Waker`]: crate::task::Waker\n[`Waker::wake`]: crate::task::Waker::wake","links":{"crate::task::Waker::wake":"2:14379:11562","`Context`":"2:14363:10144","crate::task::Waker":"2:14373:11565","`Poll::Pending`":"2:50698:190","Poll::Ready":"2:50695:204"},"attrs":["#[stable(feature = \"futures_api\", since = \"1.36.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47926:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14363:10144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50693:193","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Future","id":"2:14061:139","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:4016:667":{"id":"0:4016:667","crate_id":0,"name":"fmt","span":{"filename":"src/builder/arg_settings.rs","begin":[32,9],"end":[32,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10511:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4378":{"id":"0:4378","crate_id":0,"name":null,"span":{"filename":"src/builder/value_hint.rs","begin":[27,9],"end":[27,14]},"visibility":{"restricted":{"parent":"0:1272:2256","path":"::builder::value_hint"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:4351:1680","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4379:667"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:8716:121":{"id":"2:8716:121","crate_id":2,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8717:7848","2:8718:9944","2:8719:9945","2:8720:9946","2:8724:9947","2:8727:9948"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:848:4788":{"id":"0:848:4788","crate_id":0,"name":"after_help","span":{"filename":"src/builder/command.rs","begin":[1539,4],"end":[1542,5]},"visibility":"public","docs":"Free-form help text for after auto-generated short help (`-h`).\n\nThis is often used to describe how to use the arguments, caveats to be noted, or license\nand contact information.\n\nIf [`Command::after_long_help`] is not specified, this message will be displayed for `--help`.\n\n# Examples\n\n```no_run\n# use clap::Command;\nCommand::new(\"myprog\")\n    .after_help(\"Does really amazing things for great people... but be careful with -R!\")\n# ;\n```\n","links":{"`Command::after_long_help`":"0:850:4789"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["help",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23122:21826":{"id":"2:23122:21826","crate_id":2,"name":"reduce_or","span":null,"visibility":"default","docs":"Returns the cumulative bitwise \"or\" across the lanes of the vector.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Scalar","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdInt","id":"2:23106:11397","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:8637:9976":{"id":"2:8637:9976","crate_id":2,"name":"product","span":null,"visibility":"default","docs":"Method which takes an iterator and generates `Self` from the elements by\nmultiplying the items.","links":{},"attrs":["#[stable(feature = \"iter_arith_traits\", since = \"1.12.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["iter",{"kind":"generic","inner":"I"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"A"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:13801:67833":{"id":"2:13801:67833","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:848-0:4594:1681":{"id":"b:5:848-0:4594:1681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:844:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4594:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:850:4342","5:851:4983","5:852:9984"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:129:2111":{"id":"0:129:2111","crate_id":0,"name":"try_parse","span":{"filename":"src/derive.rs","begin":[95,4],"end":[98,5]},"visibility":"default","docs":"Parse from `std::env::args_os()`, return Err on error.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4647:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23065:21806":{"id":"2:23065:21806","crate_id":2,"name":"is_nan","span":null,"visibility":"default","docs":"Returns true for each lane if its value is `NaN`.","links":{},"attrs":["#[must_use =\n\"method returns a new mask and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Mask","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdFloat","id":"2:23053:11401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"a:2:3411:6205-0:4755:7386":{"id":"a:2:3411:6205-0:4755:7386","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:3411:6205","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValuesRef","id":"0:4755:7386","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:1038:21135":{"id":"1:1038:21135","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"default","docs":"Converts this type to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase`].\n\n# Note\n\nThis method is deprecated in favor of the identically-named\ninherent methods on `u8`, `char`, `[u8]` and `str`.\n\n[`to_ascii_lowercase`]: AsciiExt::to_ascii_lowercase","links":{"AsciiExt::to_ascii_lowercase":"1:1035:2740"},"attrs":["#[stable(feature = \"ascii\", since = \"1.9.0\")]"],"deprecation":{"since":"1.26.0","note":"use inherent methods instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:32158:69428":{"id":"2:32158:69428","crate_id":2,"name":"swap_bytes","span":null,"visibility":"public","docs":"Reverses the byte order of the integer.\n\n# Examples\n\nBasic usage:\n\n```\nlet n = 0x1234567890123456u64;\nlet m = n.swap_bytes();\n\nassert_eq!(m, 0x5634129078563412);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9532:7459-0:4768:7385":{"id":"a:2:9532:7459-0:4768:7385","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:9532:7459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawValues","id":"0:4768:7385","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1780":{"id":"0:1780","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[54,0],"end":[54,21]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"import","inner":{"source":"command::App","name":"App","id":"0:4241:1674","glob":false}},"0:3971:3241":{"id":"0:3971:3241","crate_id":0,"name":"MultipleValues","span":{"filename":"src/builder/arg_settings.rs","begin":[70,4],"end":[70,18]},"visibility":"default","docs":"Deprecated, replaced with [`Arg::multiple_values`] and [`Arg::is_multiple_values_set`]\n\nDerive: replace `#[clap(setting = MultipleValues)]` with `#[clap(multiple_values = true)]`\n\nBuilder: replace `arg.setting(MultipleValues)` with `arg.multiple_values(true)`","links":{"`Arg::is_multiple_values_set`":"0:496:4219","`Arg::multiple_values`":"0:355:3240"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"0:813:5039":{"id":"0:813:5039","crate_id":0,"name":"render_usage","span":{"filename":"src/builder/command.rs","begin":[886,4],"end":[892,5]},"visibility":"public","docs":"Usage statement\n\n### Examples\n\n```rust\n# use clap::Command;\nuse std::io;\nlet mut cmd = Command::new(\"myprog\");\nprintln!(\"{}\", cmd.render_usage());\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8479:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3608:552":{"id":"2:3608:552","crate_id":2,"name":"deref_mut","span":null,"visibility":"default","docs":"Mutably dereferences the value.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Deref","id":"2:3594:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1593:2257":{"id":"0:1593:2257","crate_id":0,"name":"value_parser","span":{"filename":"src/builder/value_parser.rs","begin":[1995,4],"end":[1997,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"qualified_path","inner":{"name":"Parser","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:1558:2266","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3411:6205-0:4806:1682":{"id":"a:2:3411:6205-0:4806:1682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:3411:6205","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:4806:1682","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:4905:27338":{"id":"2:4905:27338","crate_id":2,"name":"poll_next","span":null,"visibility":"default","docs":"Attempt to pull out the next value of this async iterator, registering the\ncurrent task for wakeup if the value is not yet available, and returning\n`None` if the async iterator is exhausted.\n\n# Return value\n\nThere are several possible return values, each indicating a distinct\nasync iterator state:\n\n- `Poll::Pending` means that this async iterator's next value is not ready\nyet. Implementations will ensure that the current task will be notified\nwhen the next value may be ready.\n\n- `Poll::Ready(Some(val))` means that the async iterator has successfully\nproduced a value, `val`, and may produce further values on subsequent\n`poll_next` calls.\n\n- `Poll::Ready(None)` means that the async iterator has terminated, and\n`poll_next` should not be invoked again.\n\n# Panics\n\nOnce an async iterator has finished (returned `Ready(None)` from `poll_next`), calling its\n`poll_next` method again may panic, block forever, or cause other kinds of\nproblems; the `AsyncIterator` trait places no requirements on the effects of\nsuch a call. However, as the `poll_next` method is not marked `unsafe`,\nRust's usual rules apply: calls must never cause undefined behavior\n(memory corruption, incorrect use of `unsafe` functions, or the like),\nregardless of the async iterator's state.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47926:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14363:10144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50693:193","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"AsyncIterator","id":"2:4903:10142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"a:2:3370:216-0:4294:1679":{"id":"a:2:3370:216-0:4294:1679","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:4294:1679","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4294:1679":{"id":"0:4294:1679","crate_id":0,"name":"PossibleValue","span":{"filename":"src/builder/possible_value.rs","begin":[30,0],"end":[35,1]},"visibility":"public","docs":"A possible value of an argument.\n\nThis is used for specifying [possible values] of [Args].\n\n**NOTE:** This struct is likely not needed for most usecases as it is only required to\n[hide] single values from help messages and shell completions or to attach [help] to possible values.\n\n# Examples\n\n```rust\n# use clap::{Arg, PossibleValue};\nlet cfg = Arg::new(\"config\")\n    .takes_value(true)\n    .value_name(\"FILE\")\n    .value_parser([\n        PossibleValue::new(\"fast\"),\n        PossibleValue::new(\"slow\").help(\"slower than fast\"),\n        PossibleValue::new(\"secret speed\").hide(true)\n    ]);\n```\n[Args]: crate::Arg\n[possible values]: crate::builder::ValueParser::possible_values\n[hide]: PossibleValue::hide()\n[help]: PossibleValue::help()","links":{"crate::builder::ValueParser::possible_values":"0:1319:3370","PossibleValue::help()":"0:1217:1955","crate::Arg":"0:3818:1661","PossibleValue::hide()":"0:1218:3786"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:1214","0:1222","a:2:9533:7458-0:4294:1679","a:2:9532:7459-0:4294:1679","a:2:3382:225-0:4294:1679","a:2:3370:216-0:4294:1679","a:2:3411:6205-0:4294:1679","b:2:4104-0:4294:1679","b:2:2865-0:4294:1679","b:2:3203-0:4294:1679","b:2:3207-0:4294:1679","b:2:3218-0:4294:1679","b:2:2868-0:4294:1679","b:2:3213-0:4294:1679","b:5:848-0:4294:1679","b:23:25-0:4294:1679","0:4300","0:4303","0:4306","0:4309","0:4311","0:4314","0:4316","0:1236","0:1239"]}},"0:512:4255":{"id":"0:512:4255","crate_id":0,"name":"is_hide_short_help_set","span":{"filename":"src/builder/arg.rs","begin":[4758,4],"end":[4760,5]},"visibility":"public","docs":"Report whether [`Arg::hide_short_help`] is set","links":{"`Arg::hide_short_help`":"0:417:3833"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:32156:1132":{"id":"2:32156:1132","crate_id":2,"name":"rotate_left","span":null,"visibility":"public","docs":"Shifts the bits to the left by a specified amount, `n`,\nwrapping the truncated bits to the end of the resulting integer.\n\nPlease note this isn't the same operation as the `<<` shifting operator!\n\n# Examples\n\nBasic usage:\n\n```\nlet n = 0xaa00000000006e1u64;\nlet m = 0x6e10aa;\n\nassert_eq!(n.rotate_left(12), m);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["n",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13351:28627":{"id":"2:13351:28627","crate_id":2,"name":"is_prefix_of","span":null,"visibility":"default","docs":"Checks whether the pattern matches at the front of the haystack","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["haystack",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1238:688":{"id":"0:1238:688","crate_id":0,"name":"from","span":{"filename":"src/builder/possible_value.rs","begin":[250,4],"end":[252,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["s",{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6460:10976":{"id":"1:6460:10976","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6461:28902","1:6462:15072","1:6463:15073","1:6464:15075","1:6465:15074","1:6466:15076","1:6467:15077","1:6468:15079","1:6469:13017","1:6470:15082","1:6471:15083","1:6472:15084","1:6473:15085","1:6474:15086","1:6475:15087","1:6476:15080","1:6477:15081"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:9099:9976":{"id":"2:9099:9976","crate_id":2,"name":"product","span":null,"visibility":"default","docs":"Iterates over the entire iterator, multiplying all the elements\n\nAn empty iterator returns the one value of the type.\n\n# Panics\n\nWhen calling `product()` and a primitive integer type is being returned,\nmethod will panic if the computation overflows and debug assertions are\nenabled.\n\n# Examples\n\n```\nfn factorial(n: u32) -> u32 {\n    (1..=n).product()\n}\nassert_eq!(factorial(0), 1);\nassert_eq!(factorial(1), 1);\nassert_eq!(factorial(5), 120);\n```","links":{},"attrs":["#[stable(feature = \"iter_arith\", since = \"1.11.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"P"},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Product","id":"2:8635:9042","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:575":{"id":"0:575","crate_id":0,"name":null,"span":{"filename":"src/builder/arg.rs","begin":[5255,0],"end":[5309,1]},"visibility":{"restricted":{"parent":"0:242:1932","path":"::builder::arg"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3818:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":["0:577:667"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1003:5941":{"id":"0:1003:5941","crate_id":0,"name":"is_dont_collapse_args_in_usage_set","span":{"filename":"src/builder/command.rs","begin":[3717,4],"end":[3719,5]},"visibility":"public","docs":"Report whether [`Command::dont_collapse_args_in_usage`] is set","links":{"`Command::dont_collapse_args_in_usage`":"0:830:5146"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:92:12444":{"id":"22:92:12444","crate_id":22,"name":"OsStringBytes","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["22:93:69105","22:94:69106"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"22:114:10989","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8893:9955":{"id":"2:8893:9955","crate_id":2,"name":"intersperse_with","span":null,"visibility":"default","docs":"Creates a new iterator which places an item generated by `separator`\nbetween adjacent items of the original iterator.\n\nThe closure will be called exactly once each time an item is placed\nbetween two adjacent items from the underlying iterator; specifically,\nthe closure is not called if the underlying iterator yields less than\ntwo items and after the last item is yielded.\n\nIf the iterator's item implements [`Clone`], it may be easier to use\n[`intersperse`].\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(iter_intersperse)]\n\n#[derive(PartialEq, Debug)]\nstruct NotClone(usize);\n\nlet v = [NotClone(0), NotClone(1), NotClone(2)];\nlet mut it = v.into_iter().intersperse_with(|| NotClone(99));\n\nassert_eq!(it.next(), Some(NotClone(0)));  // The first element from `v`.\nassert_eq!(it.next(), Some(NotClone(99))); // The separator.\nassert_eq!(it.next(), Some(NotClone(1)));  // The next element from `v`.\nassert_eq!(it.next(), Some(NotClone(99))); // The separator.\nassert_eq!(it.next(), Some(NotClone(2)));  // The last element from from `v`.\nassert_eq!(it.next(), None);               // The iterator is finished.\n```\n\n`intersperse_with` can be used in situations where the separator needs\nto be computed:\n```\n#![feature(iter_intersperse)]\n\nlet src = [\"Hello\", \"to\", \"all\", \"people\", \"!!\"].iter().copied();\n\n// The closure mutably borrows its context to generate an item.\nlet mut happy_emojis = [\" ❤️ \", \" 😀 \"].iter().copied();\nlet separator = || happy_emojis.next().unwrap_or(\" 🦀 \");\n\nlet result = src.intersperse_with(separator).collect::<String>();\nassert_eq!(result, \"Hello ❤️ to 😀 all 🦀 people 🦀 !!\");\n```\n[`Clone`]: crate::clone::Clone\n[`intersperse`]: Iterator::intersperse","links":{"Iterator::intersperse":"2:8892:9954","crate::clone::Clone":"2:2884:105"},"attrs":["#[unstable(feature = \"iter_intersperse\", reason = \"recently added\", issue =\n\"79524\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["separator",{"kind":"generic","inner":"G"}]],"output":{"kind":"resolved_path","inner":{"name":"IntersperseWith","id":"2:7158:9068","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"generic","inner":"G"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"G"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3624:132","args":{"parenthesized":{"inputs":[],"output":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:196:8917":{"id":"22:196:8917","crate_id":22,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"22:114:10989","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:4278":{"id":"0:4278","crate_id":0,"name":null,"span":{"filename":"src/builder/command.rs","begin":[77,9],"end":[77,14]},"visibility":{"restricted":{"parent":"0:649:1913","path":"::builder::command"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:4241:1674","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":["0:4280:667"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1412:6637":{"id":"0:1412:6637","crate_id":0,"name":"parse_ref","span":{"filename":"src/builder/value_parser.rs","begin":[928,4],"end":[971,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["cmd",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Command","id":"0:755:1660","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["arg",{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Arg","id":"0:3818:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}],"bindings":[]}}}}],["value",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"std::ffi::OsStr","id":"1:2654:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Value","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:1362:2264","args":null}}}},{"type":{"kind":"resolved_path","inner":{"name":"crate::Error","id":"0:4647:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3218-0:4523:6999":{"id":"b:2:3218-0:4523:6999","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:4523:6999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3221:128","2:3222:1435"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3213-0:5070:1667":{"id":"b:2:3213-0:5070:1667","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3183:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:5070:1667","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3216:128","2:3217:1436"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:2289:2117":{"id":"0:2289:2117","crate_id":0,"name":"Item","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1615,4],"end":[1615,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"1:2654:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"0:4775":{"id":"0:4775","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1607,16],"end":[1607,21]},"visibility":{"restricted":{"parent":"0:2092:7461","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawValues","id":"0:4768:7385","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:4777:667"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1481:6637":{"id":"0:1481:6637","crate_id":0,"name":"parse_ref","span":{"filename":"src/builder/value_parser.rs","begin":[1425,4],"end":[1474,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["cmd",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Command","id":"0:755:1660","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["arg",{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Arg","id":"0:3818:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}],"bindings":[]}}}}],["raw_value",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"std::ffi::OsStr","id":"1:2654:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Value","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:1362:2264","args":null}}}},{"type":{"kind":"resolved_path","inner":{"name":"crate::Error","id":"0:4647:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2238:7595":{"id":"0:2238:7595","crate_id":0,"name":"try_remove_many","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1295,4],"end":[1312,5]},"visibility":"public","docs":"Non-panicking version of [`ArgMatches::remove_many`]","links":{"`ArgMatches::remove_many`":"0:2170:7593"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Values2","id":"0:4745:7594","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4693:7387","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Any","id":"2:4102:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2470":{"id":"0:2470","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/mod.rs","begin":[17,22],"end":[17,30]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"import","inner":{"source":"arg_matches::OsValues","name":"OsValues","id":"0:4796:1683","glob":false}},"0:2292":{"id":"0:2292","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1625,0],"end":[1629,1]},"visibility":{"restricted":{"parent":"0:2092:7461","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["advance_back_by","try_rfold","rfind","nth_back","rfold"],"trait":{"name":"DoubleEndedIterator","id":"2:8716:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawValues","id":"0:4768:7385","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:2294:7848"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:207:2201":{"id":"0:207:2201","crate_id":0,"name":"augment_args_for_update","span":{"filename":"src/derive.rs","begin":[557,4],"end":[559,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["cmd",{"kind":"resolved_path","inner":{"name":"Command","id":"0:755:1660","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Command","id":"0:755:1660","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5560:28837":{"id":"1:5560:28837","crate_id":1,"name":"is_socket","span":null,"visibility":"default","docs":"Returns `true` if this file type is a socket.\n\n# Examples\n\n```no_run\nuse std::fs;\nuse std::os::unix::fs::FileTypeExt;\nuse std::io;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"unix.socket\")?;\n    let file_type = meta.file_type();\n    assert!(file_type.is_socket());\n    Ok(())\n}\n```","links":{},"attrs":["#[stable(feature = \"file_type_ext\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:449:4016":{"id":"0:449:4016","crate_id":0,"name":"requires_if","span":{"filename":"src/builder/arg.rs","begin":[4004,4],"end":[4008,5]},"visibility":"public","docs":"Require another argument if this arg was present at runtime and its value equals to `val`.\n\nThis method takes `value, another_arg` pair. At runtime, clap will check\nif this arg (`self`) is present and its value equals to `val`.\nIf it does, `another_arg` will be marked as required.\n\n# Examples\n\n```rust\n# use clap::Arg;\nArg::new(\"config\")\n    .requires_if(\"val\", \"arg\")\n# ;\n```\n\nSetting `Arg::requires_if(val, arg)` requires that the `arg` be used at runtime if the\ndefining argument's value is equal to `val`. If the defining argument is anything other than\n`val`, the other argument isn't required.\n\n```rust\n# use clap::{Command, Arg};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .takes_value(true)\n        .requires_if(\"my.cfg\", \"other\")\n        .long(\"config\"))\n    .arg(Arg::new(\"other\"))\n    .try_get_matches_from(vec![\n        \"prog\", \"--config\", \"some.cfg\"\n    ]);\n\nassert!(res.is_ok()); // We didn't use --config=my.cfg, so other wasn't required\n```\n\nSetting `Arg::requires_if(val, arg)` and setting the value to `val` but *not* supplying\n`arg` is an error.\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .takes_value(true)\n        .requires_if(\"my.cfg\", \"input\")\n        .long(\"config\"))\n    .arg(Arg::new(\"input\"))\n    .try_get_matches_from(vec![\n        \"prog\", \"--config\", \"my.cfg\"\n    ]);\n\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind(), ErrorKind::MissingRequiredArgument);\n```\n[`Arg::requires(name)`]: Arg::requires()\n[Conflicting]: Arg::conflicts_with()\n[override]: Arg::overrides_with()","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["val",{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["arg_id",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Key","id":"0:3239:2795","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6171:68477":{"id":"5:6171:68477","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:2245","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8224:3098","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:2245","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8224:3098","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1860":{"id":"0:1860","crate_id":0,"name":null,"span":{"filename":"src/error/mod.rs","begin":[25,0],"end":[25,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"context::ContextKind","name":"ContextKind","id":"0:4523:6999","glob":false}},"0:1562:1671":{"id":"0:1562:1671","crate_id":0,"name":"Parser","span":{"filename":"src/builder/value_parser.rs","begin":[1922,4],"end":[1922,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1294:2265","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"b:2:2868-0:4392:2263":{"id":"b:2:2868-0:4392:2263","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2862:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StringValueParser","id":"0:4392:2263","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2870:27181"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4017":{"id":"0:4017","crate_id":0,"name":null,"span":{"filename":"src/builder/arg_settings.rs","begin":[32,16],"end":[32,25]},"visibility":{"restricted":{"parent":"0:637:2253","path":"::builder::arg_settings"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:3378:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgSettings","id":"0:3968:1678","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:77":{"id":"0:77","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[116,33],"end":[116,41]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::parser::OsValues","name":"OsValues","id":"0:4796:1683","glob":false}},"2:3454:8776":{"id":"2:3454:8776","crate_id":2,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3456:184","2:3457:565"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5525:6429":{"id":"1:5525:6429","crate_id":1,"name":"mode","span":null,"visibility":"default","docs":"Returns the rights applied to this file.\n\n# Examples\n\n```no_run\nuse std::fs;\nuse std::os::unix::fs::MetadataExt;\nuse std::io;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    let mode = meta.mode();\n    let user_has_write_access      = mode & 0o200;\n    let user_has_read_write_access = mode & 0o600;\n    let group_has_read_access      = mode & 0o040;\n    let others_have_exec_access    = mode & 0o001;\n    Ok(())\n}\n```","links":{},"attrs":["#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:4452":{"id":"0:4452","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1495,9],"end":[1495,13]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3380:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BoolValueParser","id":"0:4451:2270","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:569":{"id":"0:569","crate_id":0,"name":null,"span":{"filename":"src/builder/arg.rs","begin":[5216,0],"end":[5216,32]},"visibility":{"restricted":{"parent":"0:242:1932","path":"::builder::arg"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2925:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3818:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"1:5517:6429":{"id":"1:5517:6429","crate_id":1,"name":"mode","span":null,"visibility":"default","docs":"Sets the mode bits that a new file will be created with.\n\nIf a new file is created as part of an `OpenOptions::open` call then this\nspecified `mode` will be used as the permission bits for the new file.\nIf no `mode` is set, the default of `0o666` will be used.\nThe operating system masks out bits with the system's `umask`, to produce\nthe final permissions.\n\n# Examples\n\n```no_run\nuse std::fs::OpenOptions;\nuse std::os::unix::fs::OpenOptionsExt;\n\n# fn main() {\nlet mut options = OpenOptions::new();\noptions.mode(0o644); // Give read/write for owner and read for others.\nlet file = options.open(\"foo.txt\");\n# }\n```","links":{},"attrs":["#[stable(feature = \"fs_ext\", since = \"1.1.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mode",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"a:2:3382:225-0:4755:7386":{"id":"a:2:3382:225-0:4755:7386","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValuesRef","id":"0:4755:7386","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:957:5872":{"id":"0:957:5872","crate_id":0,"name":"get_subcommands","span":{"filename":"src/builder/command.rs","begin":[3467,4],"end":[3469,5]},"visibility":"public","docs":"Iterate through the set of subcommands, getting a reference to each.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"App","id":"0:4241:1674","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}}}}}}}]}}},"generic_params":[],"modifier":"none"}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:394:2389":{"id":"0:394:2389","crate_id":0,"name":"default_value","span":{"filename":"src/builder/arg.rs","begin":[2293,4],"end":[2295,5]},"visibility":"public","docs":"Value for the argument when not present.\n\n**NOTE:** If the user *does not* use this argument at runtime, [`ArgMatches::occurrences_of`]\nwill return `0` even though the [`ArgMatches::value_of`] will return the default specified.\n\n**NOTE:** If the user *does not* use this argument at runtime [`ArgMatches::contains_id`] will\nstill return `true`. If you wish to determine whether the argument was used at runtime or\nnot, consider [`ArgMatches::value_source`][crate::ArgMatches::value_source].\n\n**NOTE:** This setting is perfectly compatible with [`Arg::default_value_if`] but slightly\ndifferent. `Arg::default_value` *only* takes effect when the user has not provided this arg\nat runtime. `Arg::default_value_if` however only takes effect when the user has not provided\na value at runtime **and** these other conditions are met as well. If you have set\n`Arg::default_value` and `Arg::default_value_if`, and the user **did not** provide this arg\nat runtime, nor were the conditions met for `Arg::default_value_if`, the `Arg::default_value`\nwill be applied.\n\n**NOTE:** This implicitly sets [`Arg::takes_value(true)`].\n\n# Examples\n\nFirst we use the default value without providing any value at runtime.\n\n```rust\n# use clap::{Command, Arg, ValueSource};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"opt\")\n        .long(\"myopt\")\n        .default_value(\"myval\"))\n    .get_matches_from(vec![\n        \"prog\"\n    ]);\n\nassert_eq!(m.value_of(\"opt\"), Some(\"myval\"));\nassert!(m.contains_id(\"opt\"));\nassert_eq!(m.value_source(\"opt\"), Some(ValueSource::DefaultValue));\n```\n\nNext we provide a value at runtime to override the default.\n\n```rust\n# use clap::{Command, Arg, ValueSource};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"opt\")\n        .long(\"myopt\")\n        .default_value(\"myval\"))\n    .get_matches_from(vec![\n        \"prog\", \"--myopt=non_default\"\n    ]);\n\nassert_eq!(m.value_of(\"opt\"), Some(\"non_default\"));\nassert!(m.contains_id(\"opt\"));\nassert_eq!(m.value_source(\"opt\"), Some(ValueSource::CommandLine));\n```\n[`ArgMatches::occurrences_of`]: crate::ArgMatches::occurrences_of()\n[`ArgMatches::value_of`]: crate::ArgMatches::value_of()\n[`Arg::takes_value(true)`]: Arg::takes_value()\n[`ArgMatches::contains_id`]: crate::ArgMatches::contains_id()\n[`Arg::default_value_if`]: Arg::default_value_if()","links":{"crate::ArgMatches::occurrences_of()":"0:2206:7673","crate::ArgMatches::contains_id()":"0:2172:7602","Arg::default_value_if()":"0:425:3887","Arg::takes_value()":"0:351:1949","crate::ArgMatches::value_of()":"0:2174:1841","crate::ArgMatches::value_source":"0:2204:7462"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["val",{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23144:1243":{"id":"2:23144:1243","crate_id":2,"name":"saturating_add","span":null,"visibility":"default","docs":"Lanewise saturating add.\n\n# Examples\n```\n# #![feature(portable_simd)]\n# #[cfg(feature = \"as_crate\")] use core_simd::simd;\n# #[cfg(not(feature = \"as_crate\"))] use core::simd;\n# use simd::{Simd, SimdUint};\nuse core::u32::MAX;\nlet x = Simd::from_array([2, 1, 0, MAX]);\nlet max = Simd::splat(MAX);\nlet unsat = x + max;\nlet sat = x.saturating_add(max);\nassert_eq!(unsat, Simd::from_array([1, 0, MAX, MAX - 1]));\nassert_eq!(sat, max);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["second",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:361:2256":{"id":"0:361:2256","crate_id":0,"name":"value_hint","span":{"filename":"src/builder/arg.rs","begin":[1536,4],"end":[1539,5]},"visibility":"public","docs":"Provide the shell a hint about how to complete this argument.\n\nSee [`ValueHint`][crate::ValueHint] for more information.\n\n**NOTE:** implicitly sets [`Arg::takes_value(true)`].\n\nFor example, to take a username as argument:\n\n```\n# use clap::{Arg, ValueHint};\nArg::new(\"user\")\n    .short('u')\n    .long(\"user\")\n    .value_hint(ValueHint::Username);\n```\n\nTo take a full command line and its arguments (for example, when writing a command wrapper):\n\n```\n# use clap::{Command, Arg, ValueHint};\nCommand::new(\"prog\")\n    .trailing_var_arg(true)\n    .arg(\n        Arg::new(\"command\")\n            .takes_value(true)\n            .multiple_values(true)\n            .value_hint(ValueHint::CommandWithArguments)\n    );\n```","links":{"crate::ValueHint":"0:4351:1680"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["value_hint",{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:4351:1680","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:848-0:4693:7387":{"id":"b:5:848-0:4693:7387","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:844:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4693:7387","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:850:4342","5:851:4983","5:852:9984"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3493:962":{"id":"2:3493:962","crate_id":2,"name":"not","span":null,"visibility":"default","docs":"Performs the unary `!` operation.\n\n# Examples\n\n```\nassert_eq!(!true, false);\nassert_eq!(!false, true);\nassert_eq!(!1u8, 254);\nassert_eq!(!0u8, 255);\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Not","id":"2:3491:8788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:10848:27600":{"id":"2:10848:27600","crate_id":2,"name":"hash_one","span":null,"visibility":"default","docs":"Calculates the hash of a single value.\n\nThis is intended as a convenience for code which *consumes* hashes, such\nas the implementation of a hash table or in unit tests that check\nwhether a custom [`Hash`] implementation behaves as expected.\n\nThis must not be used in any code which *creates* hashes, such as in an\nimplementation of [`Hash`].  The way to create a combined hash of\nmultiple values is to call [`Hash::hash`] multiple times using the same\n[`Hasher`], not to call this method repeatedly and combine the results.\n\n# Example\n\n```\n#![feature(build_hasher_simple_hash_one)]\n\nuse std::cmp::{max, min};\nuse std::hash::{BuildHasher, Hash, Hasher};\nstruct OrderAmbivalentPair<T: Ord>(T, T);\nimpl<T: Ord + Hash> Hash for OrderAmbivalentPair<T> {\n    fn hash<H: Hasher>(&self, hasher: &mut H) {\n        min(&self.0, &self.1).hash(hasher);\n        max(&self.0, &self.1).hash(hasher);\n    }\n}\n\n// Then later, in a `#[test]` for the type...\nlet bh = std::collections::hash_map::RandomState::new();\nassert_eq!(\n    bh.hash_one(OrderAmbivalentPair(1, 2)),\n    bh.hash_one(OrderAmbivalentPair(2, 1))\n);\nassert_eq!(\n    bh.hash_one(OrderAmbivalentPair(10, 2)),\n    bh.hash_one(&OrderAmbivalentPair(2, 10))\n);\n```","links":{"`Hash`":"2:10800:143","`Hash::hash`":"2:10801:722","`Hasher`":"2:10810:147"},"attrs":["#[unstable(feature = \"build_hasher_simple_hash_one\", issue = \"86161\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["x",{"kind":"generic","inner":"T"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"2:10800:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3382:225-0:4806:1682":{"id":"a:2:3382:225-0:4806:1682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:4806:1682","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1012:5957":{"id":"0:1012:5957","crate_id":0,"name":"is_subcommand_required_set","span":{"filename":"src/builder/command.rs","begin":[3762,4],"end":[3764,5]},"visibility":"public","docs":"Report whether [`Command::subcommand_required`] is set","links":{"`Command::subcommand_required`":"0:906:5633"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10580:667":{"id":"2:10580:667","crate_id":2,"name":"fmt","span":null,"visibility":"default","docs":"Formats the value using the given formatter.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"pointer_trait_fmt\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Formatter","id":"2:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"2:48872:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:4412:21312":{"id":"1:4412:21312","crate_id":1,"name":"read_vectored","span":null,"visibility":"default","docs":"Like `read`, except that it reads into a slice of buffers.\n\nData is copied to fill each buffer in order, with the final buffer\nwritten to possibly being only partially filled. This method must\nbehave equivalently to a single call to `read` with concatenated\nbuffers.\n\nThe default implementation calls `read` with either the first nonempty\nbuffer provided, or an empty one if none exists.","links":{},"attrs":["#[stable(feature = \"iovec\", since = \"1.36.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSliceMut","id":"1:4428:8986","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"1:3803:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23143:21797":{"id":"2:23143:21797","crate_id":2,"name":"Scalar","span":null,"visibility":"default","docs":"Scalar type contained by this SIMD vector type.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"0:979:5901":{"id":"0:979:5901","crate_id":0,"name":"get_positionals","span":{"filename":"src/builder/command.rs","begin":[3569,4],"end":[3571,5]},"visibility":"public","docs":"Iterate through the *positionals* arguments.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3818:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}}}}}}}]}}},"generic_params":[],"modifier":"none"}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10584:667":{"id":"2:10584:667","crate_id":2,"name":"fmt","span":null,"visibility":"default","docs":"Formats the value using the given formatter.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Formatter","id":"2:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"2:48872:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"a:2:3411:6205-0:4713:1665":{"id":"a:2:3411:6205-0:4713:1665","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:3411:6205","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4713:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:4104-0:4707:2393":{"id":"b:2:4104-0:4707:2393","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:4102:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AnyValueId","id":"0:4707:2393","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:4106:1449"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1225:4155":{"id":"0:1225:4155","crate_id":0,"name":"get_help","span":{"filename":"src/builder/possible_value.rs","begin":[149,4],"end":[151,5]},"visibility":"public","docs":"Get the help specified for this argument, if any","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3174:74":{"id":"2:3174:74","crate_id":2,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3176:4828"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"b:2:3218-0:4398:2275":{"id":"b:2:3218-0:4398:2275","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsStringValueParser","id":"0:4398:2275","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3221:128","2:3222:1435"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13834:67841":{"id":"2:13834:67841","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:5452:67841"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:50089:8936","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:779:2821":{"id":"0:779:2821","crate_id":0,"name":"groups","span":{"filename":"src/builder/command.rs","begin":[382,4],"end":[391,5]},"visibility":"public","docs":"Adds multiple [`ArgGroup`]s to the [`Command`] at once.\n\n# Examples\n\n```no_run\n# use clap::{Command, arg, ArgGroup};\nCommand::new(\"cmd\")\n    .arg(arg!(\"--set-ver [ver] 'set the version manually'\"))\n    .arg(arg!(\"--major         'auto increase major'\"))\n    .arg(arg!(\"--minor         'auto increase minor'\"))\n    .arg(arg!(\"--patch         'auto increase patch'\"))\n    .arg(arg!(\"-c [FILE]       'a config file'\"))\n    .arg(arg!(\"-i [IFACE]      'an interface'\"))\n    .groups(&[\n        ArgGroup::new(\"vers\")\n            .args(&[\"set-ver\", \"major\", \"minor\",\"patch\"])\n            .required(true),\n        ArgGroup::new(\"input\")\n            .args(&[\"c\", \"i\"])\n    ])\n# ;\n```","links":{"`ArgGroup`":"0:3904:1662","`Command`":"0:755:1660"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["groups",{"kind":"generic","inner":"I"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3904:1662","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:423:2821":{"id":"0:423:2821","crate_id":0,"name":"groups","span":{"filename":"src/builder/arg.rs","begin":[3250,4],"end":[3253,5]},"visibility":"public","docs":"The names of [`ArgGroup`]'s the argument belongs to.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg};\nArg::new(\"debug\")\n    .long(\"debug\")\n    .groups(&[\"mode\", \"verbosity\"])\n# ;\n```\n\nArguments can be members of multiple groups and then the group checked as if it\nwas one of said arguments.\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"debug\")\n        .long(\"debug\")\n        .groups(&[\"mode\", \"verbosity\"]))\n    .arg(Arg::new(\"verbose\")\n        .long(\"verbose\")\n        .groups(&[\"mode\", \"verbosity\"]))\n    .get_matches_from(vec![\n        \"prog\", \"--debug\"\n    ]);\nassert!(m.contains_id(\"mode\"));\nassert!(m.contains_id(\"verbosity\"));\n```\n\n[`ArgGroup`]: crate::ArgGroup","links":{"crate::ArgGroup":"0:3904:1662"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["group_ids",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Key","id":"0:3239:2795","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:856:1526":{"id":"0:856:1526","crate_id":0,"name":"version","span":{"filename":"src/builder/command.rs","begin":[1624,4],"end":[1627,5]},"visibility":"public","docs":"Sets the version for the short version (`-V`) and help messages.\n\nIf [`Command::long_version`] is not specified, this message will be displayed for `--version`.\n\n**Pro-tip:** Use `clap`s convenience macro [`crate_version!`] to\nautomatically set your application's version to the same thing as your\ncrate at compile time.\n\n# Examples\n\n```no_run\n# use clap::Command;\nCommand::new(\"myprog\")\n    .version(\"v0.1.24\")\n# ;\n```\n[`crate_version!`]: ./macro.crate_version!.html","links":{"`Command::long_version`":"0:858:4784"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["ver",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9533:7458-0:4647:128":{"id":"a:2:9533:7458-0:4647:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:9533:7458","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4647:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"2:23148:21818":{"id":"2:23148:21818","crate_id":2,"name":"reduce_max","span":null,"visibility":"default","docs":"Returns the maximum lane in the vector.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Scalar","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdUint","id":"2:23142:11395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1478":{"id":"0:1478","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1418,0],"end":[1475,1]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"std::convert::TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"name":"std::convert::TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"},{"trait_bound":{"trait":{"name":"std::error::Error","id":"2:3278:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"ToString","id":"5:6505:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["map","parse","possible_values"],"trait":{"name":"TypedValueParser","id":"0:1362:2264","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangedU64ValueParser","id":"0:4439:2262","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:1480:6597","0:1481:6637"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1584:2257":{"id":"0:1584:2257","crate_id":0,"name":"value_parser","span":{"filename":"src/builder/value_parser.rs","begin":[1971,4],"end":[1975,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"qualified_path","inner":{"name":"Parser","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:1558:2266","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1314:4240":{"id":"0:1314:4240","crate_id":0,"name":"os_string","span":{"filename":"src/builder/value_parser.rs","begin":[193,4],"end":[195,5]},"visibility":"public","docs":"[`OsString`][std::ffi::OsString] parser for argument values\n\n# Example\n\n ```rust\n# use clap::{Command, Arg, builder::ValueParser};\nuse std::ffi::OsString;\nuse std::os::unix::ffi::{OsStrExt,OsStringExt};\nlet r = Command::new(\"myprog\")\n    .arg(\n        Arg::new(\"arg\")\n        .required(true)\n        .value_parser(ValueParser::os_string())\n    )\n    .try_get_matches_from(vec![\n        OsString::from(\"myprog\"),\n        OsString::from_vec(vec![0xe9])\n    ]);\n\nassert!(r.is_ok());\nlet m = r.unwrap();\nlet arg: &OsString = m.get_one(\"arg\")\n    .expect(\"required\");\nassert_eq!(arg.as_bytes(), &[0xe9]);\n```","links":{"std::ffi::OsString":"1:2651:183"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:848-0:4806:1682":{"id":"b:5:848-0:4806:1682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:844:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:4806:1682","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["5:850:4342","5:851:4983","5:852:9984"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:23111:21800":{"id":"2:23111:21800","crate_id":2,"name":"abs","span":null,"visibility":"default","docs":"Lanewise absolute value, implemented in Rust.\nEvery lane becomes its absolute value.\n\n# Examples\n```\n# #![feature(portable_simd)]\n# #[cfg(feature = \"as_crate\")] use core_simd::simd;\n# #[cfg(not(feature = \"as_crate\"))] use core::simd;\n# use simd::{Simd, SimdInt};\nuse core::i32::{MIN, MAX};\nlet xs = Simd::from_array([MIN, MIN +1, -5, 0]);\nassert_eq!(xs.abs(), Simd::from_array([MIN, MAX, 5, 0]));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1792:1663":{"id":"0:1792:1663","crate_id":0,"name":"error","span":{"filename":"src/error/mod.rs","begin":[1,0],"end":[1153,1]},"visibility":"public","docs":"Error reporting","links":{},"attrs":["#![allow(deprecated)]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1860","0:1863","0:1866","0:1869:208","0:4647:128"],"is_stripped":false}},"0:35":{"id":"0:35","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[109,62],"end":[109,68]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::derive::Parser","name":"Parser","id":"0:127:1671","glob":false}},"0:457:4060":{"id":"0:457:4060","crate_id":0,"name":"conflicts_with","span":{"filename":"src/builder/arg.rs","begin":[4172,4],"end":[4175,5]},"visibility":"public","docs":"This argument is mutually exclusive with the specified argument.\n\n**NOTE:** Conflicting rules take precedence over being required by default. Conflict rules\nonly need to be set for one of the two arguments, they do not need to be set for each.\n\n**NOTE:** Defining a conflict is two-way, but does *not* need to defined for both arguments\n(i.e. if A conflicts with B, defining A.conflicts_with(B) is sufficient. You do not\nneed to also do B.conflicts_with(A))\n\n**NOTE:** [`Arg::conflicts_with_all(names)`] allows specifying an argument which conflicts with more than one argument.\n\n**NOTE** [`Arg::exclusive(true)`] allows specifying an argument which conflicts with every other argument.\n\n# Examples\n\n```rust\n# use clap::Arg;\nArg::new(\"config\")\n    .conflicts_with(\"debug\")\n# ;\n```\n\nSetting conflicting argument, and having both arguments present at runtime is an error.\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .takes_value(true)\n        .conflicts_with(\"debug\")\n        .long(\"config\"))\n    .arg(Arg::new(\"debug\")\n        .long(\"debug\"))\n    .try_get_matches_from(vec![\n        \"prog\", \"--debug\", \"--config\", \"file.conf\"\n    ]);\n\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind(), ErrorKind::ArgumentConflict);\n```\n\n[`Arg::conflicts_with_all(names)`]: Arg::conflicts_with_all()\n[`Arg::exclusive(true)`]: Arg::exclusive()","links":{"Arg::exclusive()":"0:340:3077","Arg::conflicts_with_all()":"0:459:4071"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["arg_id",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Key","id":"0:3239:2795","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23392:15207":{"id":"2:23392:15207","crate_id":2,"name":"BitMask","span":null,"visibility":"default","docs":"The integer bitmask type.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"0:1574:1671":{"id":"0:1574:1671","crate_id":0,"name":"Parser","span":{"filename":"src/builder/value_parser.rs","begin":[1946,4],"end":[1946,43]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:4427:2261","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}}},"0:852:4786":{"id":"0:852:4786","crate_id":0,"name":"before_help","span":{"filename":"src/builder/command.rs","begin":[1581,4],"end":[1584,5]},"visibility":"public","docs":"Free-form help text for before auto-generated short help (`-h`).\n\nThis is often used for header, copyright, or license information.\n\nIf [`Command::before_long_help`] is not specified, this message will be displayed for `--help`.\n\n# Examples\n\n```no_run\n# use clap::Command;\nCommand::new(\"myprog\")\n    .before_help(\"Some info I'd like to appear before the help info\")\n# ;\n```","links":{"`Command::before_long_help`":"0:854:4787"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["help",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12778:28794":{"id":"2:12778:28794","crate_id":2,"name":"as_slice","span":null,"visibility":"default","docs":"Currently, the consumers of `SlicePattern` need a slice.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SlicePattern","id":"2:12776:11654","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:8933:3584":{"id":"2:8933:3584","crate_id":2,"name":"collect","span":null,"visibility":"default","docs":"Transforms an iterator into a collection.\n\n`collect()` can take anything iterable, and turn it into a relevant\ncollection. This is one of the more powerful methods in the standard\nlibrary, used in a variety of contexts.\n\nThe most basic pattern in which `collect()` is used is to turn one\ncollection into another. You take a collection, call [`iter`] on it,\ndo a bunch of transformations, and then `collect()` at the end.\n\n`collect()` can also create instances of types that are not typical\ncollections. For example, a [`String`] can be built from [`char`]s,\nand an iterator of [`Result<T, E>`][`Result`] items can be collected\ninto `Result<Collection<T>, E>`. See the examples below for more.\n\nBecause `collect()` is so general, it can cause problems with type\ninference. As such, `collect()` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which collection\nyou're trying to collect into.\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\n\nlet doubled: Vec<i32> = a.iter()\n                         .map(|&x| x * 2)\n                         .collect();\n\nassert_eq!(vec![2, 4, 6], doubled);\n```\n\nNote that we needed the `: Vec<i32>` on the left-hand side. This is because\nwe could collect into, for example, a [`VecDeque<T>`] instead:\n\n[`VecDeque<T>`]: ../../std/collections/struct.VecDeque.html\n\n```\nuse std::collections::VecDeque;\n\nlet a = [1, 2, 3];\n\nlet doubled: VecDeque<i32> = a.iter().map(|&x| x * 2).collect();\n\nassert_eq!(2, doubled[0]);\nassert_eq!(4, doubled[1]);\nassert_eq!(6, doubled[2]);\n```\n\nUsing the 'turbofish' instead of annotating `doubled`:\n\n```\nlet a = [1, 2, 3];\n\nlet doubled = a.iter().map(|x| x * 2).collect::<Vec<i32>>();\n\nassert_eq!(vec![2, 4, 6], doubled);\n```\n\nBecause `collect()` only cares about what you're collecting into, you can\nstill use a partial type hint, `_`, with the turbofish:\n\n```\nlet a = [1, 2, 3];\n\nlet doubled = a.iter().map(|x| x * 2).collect::<Vec<_>>();\n\nassert_eq!(vec![2, 4, 6], doubled);\n```\n\nUsing `collect()` to make a [`String`]:\n\n```\nlet chars = ['g', 'd', 'k', 'k', 'n'];\n\nlet hello: String = chars.iter()\n    .map(|&x| x as u8)\n    .map(|x| (x + 1) as char)\n    .collect();\n\nassert_eq!(\"hello\", hello);\n```\n\nIf you have a list of [`Result<T, E>`][`Result`]s, you can use `collect()` to\nsee if any of them failed:\n\n```\nlet results = [Ok(1), Err(\"nope\"), Ok(3), Err(\"bad\")];\n\nlet result: Result<Vec<_>, &str> = results.iter().cloned().collect();\n\n// gives us the first error\nassert_eq!(Err(\"nope\"), result);\n\nlet results = [Ok(1), Ok(3)];\n\nlet result: Result<Vec<_>, &str> = results.iter().cloned().collect();\n\n// gives us the list of answers\nassert_eq!(Ok(vec![1, 3]), result);\n```\n\n[`iter`]: Iterator::next\n[`String`]: ../../std/string/struct.String.html\n[`char`]: type@char","links":{"`Result`":"2:47934:208","Iterator::next":"2:8875:932","type@char":"1:15876:8642"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[must_use =\n\"if you really need to exhaust the iterator, consider `.for_each(drop)` instead\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"B"},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"B"},"bounds":[{"trait_bound":{"trait":{"name":"FromIterator","id":"2:8668:137","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3411:6205-0:4569:7000":{"id":"a:2:3411:6205-0:4569:7000","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:3411:6205","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextValue","id":"0:4569:7000","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:3203-0:5070:1667":{"id":"b:2:3203-0:5070:1667","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:5070:1667","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3206:2391"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4569:7000":{"id":"0:4569:7000","crate_id":0,"name":"ContextValue","span":{"filename":"src/error/context.rs","begin":[44,0],"end":[55,1]},"visibility":"public","docs":"A piece of error information","links":{},"attrs":["#[non_exhaustive]"],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:4570:177","0:4572:6576","0:4575:221","0:4578:7067","0:4581:7095"],"impls":["a:2:9533:7458-0:4569:7000","a:2:9532:7459-0:4569:7000","a:2:3382:225-0:4569:7000","a:2:3370:216-0:4569:7000","a:2:3411:6205-0:4569:7000","b:2:4104-0:4569:7000","b:2:2865-0:4569:7000","b:2:3203-0:4569:7000","b:2:3207-0:4569:7000","b:2:3218-0:4569:7000","b:2:2868-0:4569:7000","b:2:3213-0:4569:7000","b:5:848-0:4569:7000","b:23:25-0:4569:7000","0:4584","0:4586","0:4588","0:4589","0:4591","0:4592"]}},"1:6568:28909":{"id":"1:6568:28909","crate_id":1,"name":"take_pidfd","span":null,"visibility":"default","docs":"Takes ownership of the [`PidFd`] created for this [`Child`], if available.\n\nA pidfd will only be available if its creation was requested with\n[`create_pidfd`] when the corresponding [`Command`] was created.\n\nEven if requested, a pidfd may not be available due to an older\nversion of Linux being in use, or if some other error occurred.\n\n[`Command`]: process::Command\n[`create_pidfd`]: CommandExt::create_pidfd\n[`Child`]: process::Child","links":{"CommandExt::create_pidfd":"1:6570:14224","process::Command":"1:7477:1660","`PidFd`":"1:11281:11010","process::Child":"1:7415:8590"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"PidFd","id":"1:11281:11010","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"1:3803:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:4384":{"id":"0:4384","crate_id":0,"name":null,"span":{"filename":"src/builder/value_hint.rs","begin":[27,27],"end":[27,29]},"visibility":{"restricted":{"parent":"0:1272:2256","path":"::builder::value_hint"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2925:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:4351:1680","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3436:2556":{"id":"0:3436:2556","crate_id":0,"name":"DisableColoredHelp","span":{"filename":"src/builder/app_settings.rs","begin":[523,4],"end":[523,22]},"visibility":"default","docs":"Deprecated, replaced with [`Command::disable_colored_help`] and\n[`Command::is_disable_colored_help_set`]\n\nDerive: replace `#[clap(setting = DisableColoredHelp)]` with `#[clap(disable_colored_help = true)]`\n\nBuilder: replace `cmd.setting(DisableColoredHelp)` with `cmd.disable_colored_help(true)`","links":{"`Command::disable_colored_help`":"0:828:5127","`Command::is_disable_colored_help_set`":"0:1001:5937"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"0:435:3939":{"id":"0:435:3939","crate_id":0,"name":"required_unless_present_all","span":{"filename":"src/builder/arg.rs","begin":[3619,4],"end":[3626,5]},"visibility":"public","docs":"Sets this arg as [required] unless *all* of the specified arguments are present at runtime.\n\nIn other words, parsing will succeed only if user either\n* supplies the `self` arg.\n* supplies *all* of the `names` arguments.\n\n**NOTE:** If you wish for this argument to only be required unless *any of* these args are\npresent see [`Arg::required_unless_present_any`]\n\n# Examples\n\n```rust\n# use clap::Arg;\nArg::new(\"config\")\n    .required_unless_present_all(&[\"cfg\", \"dbg\"])\n# ;\n```\n\nIn the following example, the required argument is *not* provided, but it's not an error\nbecause *all* of the `names` args have been supplied.\n\n```rust\n# use clap::{Command, Arg};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .required_unless_present_all(&[\"dbg\", \"infile\"])\n        .takes_value(true)\n        .long(\"config\"))\n    .arg(Arg::new(\"dbg\")\n        .long(\"debug\"))\n    .arg(Arg::new(\"infile\")\n        .short('i')\n        .takes_value(true))\n    .try_get_matches_from(vec![\n        \"prog\", \"--debug\", \"-i\", \"file\"\n    ]);\n\nassert!(res.is_ok());\n```\n\nSetting [`Arg::required_unless_present_all(names)`] and *not* supplying\neither *all* of `unless` args or the `self` arg is an error.\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .required_unless_present_all(&[\"dbg\", \"infile\"])\n        .takes_value(true)\n        .long(\"config\"))\n    .arg(Arg::new(\"dbg\")\n        .long(\"debug\"))\n    .arg(Arg::new(\"infile\")\n        .short('i')\n        .takes_value(true))\n    .try_get_matches_from(vec![\n        \"prog\"\n    ]);\n\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind(), ErrorKind::MissingRequiredArgument);\n```\n[required]: Arg::required()\n[`Arg::required_unless_present_any`]: Arg::required_unless_present_any()\n[`Arg::required_unless_present_all(names)`]: Arg::required_unless_present_all()","links":{"Arg::required_unless_present_all()":"0:435:3939","Arg::required()":"0:337:1948","Arg::required_unless_present_any()":"0:438:3954"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["names",{"kind":"generic","inner":"I"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Key","id":"0:3239:2795","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1540:6597":{"id":"0:1540:6597","crate_id":0,"name":"Value","span":{"filename":"src/builder/value_parser.rs","begin":[1792,4],"end":[1792,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"String","id":"5:8479:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:1390:930":{"id":"0:1390:930","crate_id":0,"name":"new","span":{"filename":"src/builder/value_parser.rs","begin":[772,4],"end":[774,5]},"visibility":"public","docs":"Implementation for [`ValueParser::os_string`]","links":{"`ValueParser::os_string`":"0:1314:4240"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:964:5884":{"id":"0:964:5884","crate_id":0,"name":"get_subcommand_value_name","span":{"filename":"src/builder/command.rs","begin":[3504,4],"end":[3506,5]},"visibility":"public","docs":"Returns the subcommand value name.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5500:10973":{"id":"1:5500:10973","crate_id":1,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5501:28811","1:5502:28812","1:5503:28813","1:5504:28814"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:32178:69445":{"id":"2:32178:69445","crate_id":2,"name":"checked_ilog","span":null,"visibility":"public","docs":"Returns the logarithm of the number with respect to an arbitrary base,\nrounded down.\n\nReturns `None` if the number is zero, or if the base is not at least 2.\n\nThis method might not be optimized owing to implementation details;\n`checked_ilog2` can produce results more efficiently for base 2, and\n`checked_ilog10` can produce results more efficiently for base 10.\n\n# Examples\n\n```\n#![feature(int_log)]\nassert_eq!(5u64.checked_ilog(5), Some(1));\n```","links":{},"attrs":["#[unstable(feature = \"int_log\", issue = \"70887\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["base",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10583:8830":{"id":"2:10583:8830","crate_id":2,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10584:667"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:3382:225-0:4294:1679":{"id":"a:2:3382:225-0:4294:1679","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:4294:1679","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4426:667":{"id":"0:4426:667","crate_id":0,"name":"fmt","span":{"filename":"src/builder/value_parser.rs","begin":[1025,16],"end":[1025,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10511:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4472:5016":{"id":"1:4472:5016","crate_id":1,"name":"flush","span":null,"visibility":"default","docs":"Flush this output stream, ensuring that all intermediately buffered\ncontents reach their destination.\n\n# Errors\n\nIt is considered an error if not all bytes could be written due to\nI/O errors or EOF being reached.\n\n# Examples\n\n```no_run\nuse std::io::prelude::*;\nuse std::io::BufWriter;\nuse std::fs::File;\n\nfn main() -> std::io::Result<()> {\n    let mut buffer = BufWriter::new(File::create(\"foo.txt\")?);\n\n    buffer.write_all(b\"some bytes\")?;\n    buffer.flush()?;\n    Ok(())\n}\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"1:3803:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:4358:6527":{"id":"0:4358:6527","crate_id":0,"name":"FilePath","span":{"filename":"src/builder/value_hint.rs","begin":[38,4],"end":[38,12]},"visibility":"default","docs":"Path to a file.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"2:32215:69473":{"id":"2:32215:69473","crate_id":2,"name":"overflowing_rem_euclid","span":null,"visibility":"public","docs":"Calculates the remainder `self.rem_euclid(rhs)` as if by Euclidean division.\n\nReturns a tuple of the modulo after dividing along with a boolean\nindicating whether an arithmetic overflow would occur. Note that for\nunsigned integers overflow never occurs, so the second value is\nalways `false`.\nSince, for the positive integers, all common\ndefinitions of division are equal, this operation\nis exactly equal to `self.overflowing_rem(rhs)`.\n\n# Panics\n\nThis function will panic if `rhs` is 0.\n\n# Examples\n\nBasic usage\n\n```\nassert_eq!(5u64.overflowing_rem_euclid(2), (1, false));\n```","links":{},"attrs":["#[stable(feature = \"euclidean_division\", since = \"1.38.0\")]","#[rustc_const_stable(feature = \"const_euclidean_int_methods\", since =\n\"1.52.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"u64"},{"kind":"primitive","inner":"bool"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2868-0:4755:7386":{"id":"b:2:2868-0:4755:7386","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2862:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValuesRef","id":"0:4755:7386","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2870:27181"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4389":{"id":"0:4389","crate_id":0,"name":null,"span":{"filename":"src/builder/value_hint.rs","begin":[27,37],"end":[27,41]},"visibility":{"restricted":{"parent":"0:1272:2256","path":"::builder::value_hint"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3380:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:4351:1680","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1491":{"id":"0:1491","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1477,0],"end":[1484,1]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"std::convert::TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"2:3750:6566","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangedU64ValueParser","id":"0:4439:2262","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:1494:688"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:993:5922":{"id":"0:993:5922","crate_id":0,"name":"is_no_binary_name_set","span":{"filename":"src/builder/command.rs","begin":[3666,4],"end":[3668,5]},"visibility":"public","docs":"Report whether [`Command::no_binary_name`] is set","links":{"`Command::no_binary_name`":"0:816:5053"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2235:7586":{"id":"0:2235:7586","crate_id":0,"name":"try_remove_one","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1279,4],"end":[1292,5]},"visibility":"public","docs":"Non-panicking version of [`ArgMatches::remove_one`]","links":{"`ArgMatches::remove_one`":"0:2168:7585"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4693:7387","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Any","id":"2:4102:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3446:184":{"id":"2:3446:184","crate_id":2,"name":"Output","span":null,"visibility":"default","docs":"The resulting type after applying the `-` operator.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"0:925:5835":{"id":"0:925:5835","crate_id":0,"name":"get_version","span":{"filename":"src/builder/command.rs","begin":[3328,4],"end":[3330,5]},"visibility":"public","docs":"Get the version of the cmd.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4281":{"id":"0:4281","crate_id":0,"name":null,"span":{"filename":"src/builder/command.rs","begin":[77,16],"end":[77,21]},"visibility":{"restricted":{"parent":"0:649:1913","path":"::builder::command"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:4241:1674","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":["0:4283:415"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:2309:7848":{"id":"0:2309:7848","crate_id":0,"name":"next_back","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1675,4],"end":[1677,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:413:3781":{"id":"0:413:3781","crate_id":0,"name":"next_line_help","span":{"filename":"src/builder/arg.rs","begin":[2852,4],"end":[2858,5]},"visibility":"public","docs":"Render the [help][Arg::help] on the line after the argument.\n\nThis can be helpful for arguments with very long or complex help messages.\nThis can also be helpful for arguments with very long flag names, or many/long value names.\n\n**NOTE:** To apply this setting to all arguments and subcommands, consider using\n[`crate::Command::next_line_help`]\n\n# Examples\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"opt\")\n        .long(\"long-option-flag\")\n        .short('o')\n        .takes_value(true)\n        .next_line_help(true)\n        .value_names(&[\"value1\", \"value2\"])\n        .help(\"Some really long help and complex\\n\\\n               help that makes more sense to be\\n\\\n               on a line after the option\"))\n    .get_matches_from(vec![\n        \"prog\", \"--help\"\n    ]);\n```\n\nThe above example displays the following help message\n\n```text\nnlh\n\nUSAGE:\n    nlh [OPTIONS]\n\nOPTIONS:\n    -h, --help       Print help information\n    -V, --version    Print version information\n    -o, --long-option-flag <value1> <value2>\n        Some really long help and complex\n        help that makes more sense to be\n        on a line after the option\n```","links":{"Arg::help":"0:406:1955","`crate::Command::next_line_help`":"0:825:3781"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:850:4342":{"id":"5:850:4342","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"b:2:2868-0:4693:7387":{"id":"b:2:2868-0:4693:7387","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2862:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4693:7387","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2870:27181"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:959:5874":{"id":"0:959:5874","crate_id":0,"name":"get_subcommands_mut","span":{"filename":"src/builder/command.rs","begin":[3473,4],"end":[3475,5]},"visibility":"public","docs":"Iterate through the set of subcommands, getting a mutable reference to each.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"App","id":"0:4241:1674","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}}}}}}}]}}},"generic_params":[],"modifier":"none"}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:848-0:3818:1661":{"id":"b:5:848-0:3818:1661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:844:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3818:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":["5:850:4342","5:851:4983","5:852:9984"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:6476:15080":{"id":"1:6476:15080","crate_id":1,"name":"st_blksize","span":null,"visibility":"default","docs":"Returns the \"preferred\" block size for efficient filesystem I/O.\n\n# Examples\n\n```no_run\nuse std::fs;\nuse std::io;\nuse std::os::linux::fs::MetadataExt;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    println!(\"{}\", meta.st_blksize());\n    Ok(())\n}\n```","links":{},"attrs":["#[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:22":{"id":"0:22","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[104,0],"end":[104,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"color\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::util::color::ColorChoice","name":"ColorChoice","id":"0:5070:1667","glob":false}},"0:3424:2516":{"id":"0:3424:2516","crate_id":0,"name":"ArgsNegateSubcommands","span":{"filename":"src/builder/app_settings.rs","begin":[405,4],"end":[405,25]},"visibility":"default","docs":"Deprecated, replaced with [`Command::args_conflicts_with_subcommands`] and\n[`Command::is_args_conflicts_with_subcommands_set`]\n\nDerive: replace `#[clap(setting = ArgsNegateSubcommands)]` with `#[clap(args_conflicts_with_subcommands = true)]`\n\nBuilder: replace `cmd.setting(ArgsNegateSubcommands)` with `cmd.args_conflicts_with_subcommands(true)`","links":{"`Command::is_args_conflicts_with_subcommands_set`":"0:1018:5967","`Command::args_conflicts_with_subcommands`":"0:909:5678"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"0:136:2123":{"id":"0:136:2123","crate_id":0,"name":"update_from","span":{"filename":"src/derive.rs","begin":[130,4],"end":[143,5]},"visibility":"default","docs":"Update from iterator, exit on error","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["itr",{"kind":"generic","inner":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsString","id":"1:2651:183","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2083":{"id":"0:2083","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/any_value.rs","begin":[78,0],"end":[82,1]},"visibility":{"restricted":{"parent":"0:2060:7460","path":"::parser::matches::any_value"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10800:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AnyValueId","id":"0:4707:2393","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2084:722"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:8980:8024":{"id":"2:8980:8024","crate_id":2,"name":"fold","span":null,"visibility":"default","docs":"Folds every element into an accumulator by applying an operation,\nreturning the final result.\n\n`fold()` takes two arguments: an initial value, and a closure with two\narguments: an 'accumulator', and an element. The closure returns the value that\nthe accumulator should have for the next iteration.\n\nThe initial value is the value the accumulator will have on the first\ncall.\n\nAfter applying this closure to every element of the iterator, `fold()`\nreturns the accumulator.\n\nThis operation is sometimes called 'reduce' or 'inject'.\n\nFolding is useful whenever you have a collection of something, and want\nto produce a single value from it.\n\nNote: `fold()`, and similar methods that traverse the entire iterator,\nmight not terminate for infinite iterators, even on traits for which a\nresult is determinable in finite time.\n\nNote: [`reduce()`] can be used to use the first element as the initial\nvalue, if the accumulator type and item type is the same.\n\nNote: `fold()` combines elements in a *left-associative* fashion. For associative\noperators like `+`, the order the elements are combined in is not important, but for non-associative\noperators like `-` the order will affect the final result.\nFor a *right-associative* version of `fold()`, see [`DoubleEndedIterator::rfold()`].\n\n# Note to Implementors\n\nSeveral of the other (forward) methods have default implementations in\nterms of this one, so try to implement this explicitly if it can\ndo something better than the default `for` loop implementation.\n\nIn particular, try to have this call `fold()` on the internal parts\nfrom which this iterator is composed.\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\n\n// the sum of all of the elements of the array\nlet sum = a.iter().fold(0, |acc, x| acc + x);\n\nassert_eq!(sum, 6);\n```\n\nLet's walk through each step of the iteration here:\n\n| element | acc | x | result |\n|---------|-----|---|--------|\n|         | 0   |   |        |\n| 1       | 0   | 1 | 1      |\n| 2       | 1   | 2 | 3      |\n| 3       | 3   | 3 | 6      |\n\nAnd so, our final result, `6`.\n\nThis example demonstrates the left-associative nature of `fold()`:\nit builds a string, starting with an initial value\nand continuing with each element from the front until the back:\n\n```\nlet numbers = [1, 2, 3, 4, 5];\n\nlet zero = \"0\".to_string();\n\nlet result = numbers.iter().fold(zero, |acc, &x| {\n    format!(\"({acc} + {x})\")\n});\n\nassert_eq!(result, \"(((((0 + 1) + 2) + 3) + 4) + 5)\");\n```\nIt's common for people who haven't used iterators a lot to\nuse a `for` loop with a list of things to build up a result. Those\ncan be turned into `fold()`s:\n\n[`for`]: ../../book/ch03-05-control-flow.html#looping-through-a-collection-with-for\n\n```\nlet numbers = [1, 2, 3, 4, 5];\n\nlet mut result = 0;\n\n// for loop:\nfor i in &numbers {\n    result = result + i;\n}\n\n// fold:\nlet result2 = numbers.iter().fold(0, |acc, &x| acc + x);\n\n// they're the same\nassert_eq!(result, result2);\n```\n\n[`reduce()`]: Iterator::reduce","links":{"Iterator::reduce":"2:8983:9969","`DoubleEndedIterator::rfold()`":"2:8724:9947"},"attrs":["#[doc(alias = \"inject\", alias = \"foldl\")]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["init",{"kind":"generic","inner":"B"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"generic","inner":"B"},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3624:132","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"B"},{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"output":{"kind":"generic","inner":"B"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3207-0:4410:2272":{"id":"b:2:3207-0:4410:2272","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EnumValueParser","id":"0:4410:2272","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"items":["2:3209:688"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:8950:9966":{"id":"2:8950:9966","crate_id":2,"name":"partition_in_place","span":null,"visibility":"default","docs":"Reorders the elements of this iterator *in-place* according to the given predicate,\nsuch that all those that return `true` precede all those that return `false`.\nReturns the number of `true` elements found.\n\nThe relative order of partitioned items is not maintained.\n\n# Current implementation\n\nCurrent algorithms tries finding the first element for which the predicate evaluates\nto false, and the last element for which it evaluates to true and repeatedly swaps them.\n\nTime complexity: *O*(*n*)\n\nSee also [`is_partitioned()`] and [`partition()`].\n\n[`is_partitioned()`]: Iterator::is_partitioned\n[`partition()`]: Iterator::partition\n\n# Examples\n\n```\n#![feature(iter_partition_in_place)]\n\nlet mut a = [1, 2, 3, 4, 5, 6, 7];\n\n// Partition in-place between evens and odds\nlet i = a.iter_mut().partition_in_place(|&n| n % 2 == 0);\n\nassert_eq!(i, 3);\nassert!(a[..i].iter().all(|&n| n % 2 == 0)); // evens\nassert!(a[i..].iter().all(|&n| n % 2 == 1)); // odds\n```","links":{"Iterator::is_partitioned":"2:8965:9967","Iterator::partition":"2:8940:9965"},"attrs":["#[unstable(feature = \"iter_partition_in_place\", reason = \"new API\", issue =\n\"62543\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["predicate",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'a"}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedIterator","id":"2:8716:121","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"T"}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3624:132","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:972:5895":{"id":"0:972:5895","crate_id":0,"name":"find_subcommand_mut","span":{"filename":"src/builder/command.rs","begin":[3548,4],"end":[3553,5]},"visibility":"public","docs":"Find subcommand such that its name or one of aliases equals `name`, returning\na mutable reference to the subcommand.\n\nThis does not recurse through subcommands of subcommands.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"App","id":"0:4241:1674","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2920:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2868-0:4451:2270":{"id":"b:2:2868-0:4451:2270","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2862:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BoolValueParser","id":"0:4451:2270","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2870:27181"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3533:8793":{"id":"2:3533:8793","crate_id":2,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3535:364"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:8676-0:4755:7386":{"id":"b:2:8676-0:4755:7386","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValuesRef","id":"0:4755:7386","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:8678:2117","2:8679:7847","2:8680:777"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"a:2:3382:225-0:3904:1662":{"id":"a:2:3382:225-0:3904:1662","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3904:1662","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:6216:28875":{"id":"1:6216:28875","crate_id":1,"name":"pre_exec","span":null,"visibility":"default","docs":"Schedules a closure to be run just before the `exec` function is\ninvoked.\n\nThe closure is allowed to return an I/O error whose OS error code will\nbe communicated back to the parent and returned as an error from when\nthe spawn was requested.\n\nMultiple closures can be registered and they will be called in order of\ntheir registration. If a closure returns `Err` then no further closures\nwill be called and the spawn operation will immediately return with a\nfailure.\n\n# Notes and Safety\n\nThis closure will be run in the context of the child process after a\n`fork`. This primarily means that any modifications made to memory on\nbehalf of this closure will **not** be visible to the parent process.\nThis is often a very constrained environment where normal operations\nlike `malloc`, accessing environment variables through [`std::env`]\nor acquiring a mutex are not guaranteed to work (due to\nother threads perhaps still running when the `fork` was run).\n\nFor further details refer to the [POSIX fork() specification]\nand the equivalent documentation for any targeted\nplatform, especially the requirements around *async-signal-safety*.\n\nThis also means that all resources such as file descriptors and\nmemory-mapped regions got duplicated. It is your responsibility to make\nsure that the closure does not violate library invariants by making\ninvalid use of these duplicates.\n\nPanicking in the closure is safe only if all the format arguments for the\npanic message can be safely formatted; this is because although\n`Command` calls [`std::panic::always_abort`](crate::panic::always_abort)\nbefore calling the pre_exec hook, panic will still try to format the\npanic message.\n\nWhen this closure is run, aspects such as the stdio file descriptors and\nworking directory have successfully been changed, so output to these\nlocations might not appear where intended.\n\n[POSIX fork() specification]:\n    https://pubs.opengroup.org/onlinepubs/9699919799/functions/fork.html\n[`std::env`]: mod@crate::env","links":{"crate::panic::always_abort":"1:6917:9574","mod@crate::env":"1:2326:607"},"attrs":["#[stable(feature = \"process_pre_exec\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Command","id":"1:7477:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"FnMut","id":"2:3624:132","args":{"parenthesized":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"1:3803:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"b:2:3203-0:4457:2273":{"id":"b:2:3203-0:4457:2273","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FalseyValueParser","id":"0:4457:2273","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3206:2391"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1401:6637":{"id":"0:1401:6637","crate_id":0,"name":"parse_ref","span":{"filename":"src/builder/value_parser.rs","begin":[822,4],"end":[829,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["cmd",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Command","id":"0:755:1660","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["arg",{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Arg","id":"0:3818:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}],"bindings":[]}}}}],["value",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"std::ffi::OsStr","id":"1:2654:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Value","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:1362:2264","args":null}}}},{"type":{"kind":"resolved_path","inner":{"name":"crate::Error","id":"0:4647:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:881:5447":{"id":"0:881:5447","crate_id":0,"name":"trailing_var_arg","span":{"filename":"src/builder/command.rs","begin":[2158,4],"end":[2164,5]},"visibility":"public","docs":"Specifies that the final positional argument is a \"VarArg\" and that `clap` should not\nattempt to parse any further args.\n\nThe values of the trailing positional argument will contain all args from itself on.\n\n**NOTE:** The final positional argument **must** have [`Arg::multiple_values(true)`] or the usage\nstring equivalent.\n\n# Examples\n\n```rust\n# use clap::{Command, arg};\nlet m = Command::new(\"myprog\")\n    .trailing_var_arg(true)\n    .arg(arg!(<cmd> ... \"commands to run\"))\n    .get_matches_from(vec![\"myprog\", \"arg1\", \"-r\", \"val1\"]);\n\nlet trail: Vec<&str> = m.values_of(\"cmd\").unwrap().collect();\nassert_eq!(trail, [\"arg1\", \"-r\", \"val1\"]);\n```\n[`Arg::multiple_values(true)`]: crate::Arg::multiple_values()","links":{"crate::Arg::multiple_values()":"0:355:3240"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13735:1931":{"id":"2:13735:1931","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:15876:8642"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49760:8932","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1590:2257":{"id":"0:1590:2257","crate_id":0,"name":"value_parser","span":{"filename":"src/builder/value_parser.rs","begin":[1987,4],"end":[1991,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"qualified_path","inner":{"name":"Parser","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:1558:2266","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4637:7180":{"id":"0:4637:7180","crate_id":0,"name":"Format","span":{"filename":"src/error/kind.rs","begin":[395,4],"end":[395,10]},"visibility":"default","docs":"Represents a [Format error] (which is a part of [`Display`]).\nTypically caused by writing to `stderr` or `stdout`.\n\n[`Display`]: std::fmt::Display\n[Format error]: std::fmt::Error","links":{"std::fmt::Display":"2:10569:120","std::fmt::Error":"2:48872:128"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"0:1529:6637":{"id":"0:1529:6637","crate_id":0,"name":"parse_ref","span":{"filename":"src/builder/value_parser.rs","begin":[1713,4],"end":[1733,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["cmd",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Command","id":"0:755:1660","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["arg",{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Arg","id":"0:3818:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}],"bindings":[]}}}}],["value",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"std::ffi::OsStr","id":"1:2654:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Value","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:1362:2264","args":null}}}},{"type":{"kind":"resolved_path","inner":{"name":"crate::Error","id":"0:4647:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3240:6034":{"id":"0:3240:6034","crate_id":0,"name":"key","span":{"filename":"src/util/fnv.rs","begin":[10,4],"end":[10,25]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:23077:21818":{"id":"2:23077:21818","crate_id":2,"name":"reduce_max","span":null,"visibility":"default","docs":"Returns the maximum lane in the vector.\n\nReturns values based on equality, so a vector containing both `0.` and `-0.` may\nreturn either.\n\nThis function will not return `NaN` unless all lanes are `NaN`.\n\n# Examples\n\n```\n# #![feature(portable_simd)]\n# #[cfg(feature = \"as_crate\")] use core_simd::simd;\n# #[cfg(not(feature = \"as_crate\"))] use core::simd;\n# use simd::{f32x2, SimdFloat};\nlet v = f32x2::from_array([1., 2.]);\nassert_eq!(v.reduce_max(), 2.);\n\n// NaN values are skipped...\nlet v = f32x2::from_array([1., f32::NAN]);\nassert_eq!(v.reduce_max(), 1.);\n\n// ...unless all values are NaN\nlet v = f32x2::from_array([f32::NAN, f32::NAN]);\nassert!(v.reduce_max().is_nan());\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Scalar","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdFloat","id":"2:23053:11401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:9083:9973":{"id":"2:9083:9973","crate_id":2,"name":"unzip","span":null,"visibility":"default","docs":"Converts an iterator of pairs into a pair of containers.\n\n`unzip()` consumes an entire iterator of pairs, producing two\ncollections: one from the left elements of the pairs, and one\nfrom the right elements.\n\nThis function is, in some sense, the opposite of [`zip`].\n\n[`zip`]: Iterator::zip\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [(1, 2), (3, 4), (5, 6)];\n\nlet (left, right): (Vec<_>, Vec<_>) = a.iter().cloned().unzip();\n\nassert_eq!(left, [1, 3, 5]);\nassert_eq!(right, [2, 4, 6]);\n\n// you can also unzip multiple nested tuples at once\nlet a = [(1, (2, 3)), (4, (5, 6))];\n\nlet (x, (y, z)): (Vec<_>, (Vec<_>, Vec<_>)) = a.iter().cloned().unzip();\nassert_eq!(x, [1, 4]);\nassert_eq!(y, [2, 5]);\nassert_eq!(z, [3, 6]);\n```","links":{"Iterator::zip":"2:8890:9044"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"tuple","inner":[{"kind":"generic","inner":"FromA"},{"kind":"generic","inner":"FromB"}]},"c_variadic":false},"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"FromA","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"FromB","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"FromA"},"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"2:3254:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Extend","id":"2:8681:8737","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"FromB"},"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"2:3254:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Extend","id":"2:8681:8737","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"tuple","inner":[{"kind":"generic","inner":"A"},{"kind":"generic","inner":"B"}]}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:392:3533":{"id":"0:392:3533","crate_id":0,"name":"value_terminator","span":{"filename":"src/builder/arg.rs","begin":[2196,4],"end":[2199,5]},"visibility":"public","docs":"Sentinel to **stop** parsing multiple values of a give argument.\n\nBy default when\none sets [`multiple_values(true)`] on an argument, clap will continue parsing values for that\nargument until it reaches another valid argument, or one of the other more specific settings\nfor multiple values is used (such as [`min_values`], [`max_values`] or\n[`number_of_values`]).\n\n**NOTE:** This setting only applies to [options] and [positional arguments]\n\n**NOTE:** When the terminator is passed in on the command line, it is **not** stored as one\nof the values\n\n# Examples\n\n```rust\n# use clap::{Command, Arg};\nArg::new(\"vals\")\n    .takes_value(true)\n    .multiple_values(true)\n    .value_terminator(\";\")\n# ;\n```\n\nThe following example uses two arguments, a sequence of commands, and the location in which\nto perform them\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"cmds\")\n        .takes_value(true)\n        .multiple_values(true)\n        .allow_hyphen_values(true)\n        .value_terminator(\";\"))\n    .arg(Arg::new(\"location\"))\n    .get_matches_from(vec![\n        \"prog\", \"find\", \"-type\", \"f\", \"-name\", \"special\", \";\", \"/home/clap\"\n    ]);\nlet cmds: Vec<_> = m.values_of(\"cmds\").unwrap().collect();\nassert_eq!(&cmds, &[\"find\", \"-type\", \"f\", \"-name\", \"special\"]);\nassert_eq!(m.value_of(\"location\"), Some(\"/home/clap\"));\n```\n[options]: Arg::takes_value()\n[positional arguments]: Arg::index()\n[`multiple_values(true)`]: Arg::multiple_values()\n[`min_values`]: Arg::min_values()\n[`number_of_values`]: Arg::number_of_values()\n[`max_values`]: Arg::max_values()","links":{"Arg::number_of_values()":"0:356:3259","Arg::max_values()":"0:357:1953","Arg::takes_value()":"0:351:1949","Arg::multiple_values()":"0:355:3240","Arg::min_values()":"0:358:1952","Arg::index()":"0:335:761"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["term",{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:995:5926":{"id":"0:995:5926","crate_id":0,"name":"is_dont_delimit_trailing_values_set","span":{"filename":"src/builder/command.rs","begin":[3676,4],"end":[3678,5]},"visibility":"public","docs":"Report whether [`Command::dont_delimit_trailing_values`] is set","links":{"`Command::dont_delimit_trailing_values`":"0:819:5080"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3":{"id":"0:3","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[98,0],"end":[98,34]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::builder::ArgAction","name":"ArgAction","id":"0:3351:1659","glob":false}},"0:4374:6551":{"id":"0:4374:6551","crate_id":0,"name":"Url","span":{"filename":"src/builder/value_hint.rs","begin":[64,4],"end":[64,7]},"visibility":"default","docs":"Complete web address.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"0:4386":{"id":"0:4386","crate_id":0,"name":null,"span":{"filename":"src/builder/value_hint.rs","begin":[27,31],"end":[27,35]},"visibility":{"restricted":{"parent":"0:1272:2256","path":"::builder::value_hint"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10800:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:4351:1680","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4387:722"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4764":{"id":"0:4764","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1546,16],"end":[1546,21]},"visibility":{"restricted":{"parent":"0:2092:7461","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"2:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValuesRef","id":"0:4755:7386","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:4767:667"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:5:848-0:3968:1678":{"id":"b:5:848-0:3968:1678","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:844:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgSettings","id":"0:3968:1678","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:850:4342","5:851:4983","5:852:9984"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:3382:225-0:3818:1661":{"id":"a:2:3382:225-0:3818:1661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3818:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:5:848-0:3389:1676":{"id":"b:5:848-0:3389:1676","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:844:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:3389:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:850:4342","5:851:4983","5:852:9984"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"23:45:10421":{"id":"23:45:10421","crate_id":23,"name":"MutableKeys","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["23:46:2795","23:47:6597","23:48:28445","23:50:28446","23:52:28447"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1480:6597":{"id":"0:1480:6597","crate_id":0,"name":"Value","span":{"filename":"src/builder/value_parser.rs","begin":[1423,4],"end":[1423,19]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"0:1589:1671":{"id":"0:1589:1671","crate_id":0,"name":"Parser","span":{"filename":"src/builder/value_parser.rs","begin":[1986,4],"end":[1986,44]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:4427:2261","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i32"}}],"bindings":[]}}}}}},"2:23075:21816":{"id":"2:23075:21816","crate_id":2,"name":"reduce_sum","span":null,"visibility":"default","docs":"Returns the sum of the lanes of the vector.\n\n# Examples\n\n```\n# #![feature(portable_simd)]\n# #[cfg(feature = \"as_crate\")] use core_simd::simd;\n# #[cfg(not(feature = \"as_crate\"))] use core::simd;\n# use simd::{f32x2, SimdFloat};\nlet v = f32x2::from_array([1., 2.]);\nassert_eq!(v.reduce_sum(), 3.);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Scalar","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdFloat","id":"2:23053:11401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"a:2:3411:6205-0:4778:1685":{"id":"a:2:3411:6205-0:4778:1685","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:3411:6205","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:4778:1685","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:320:1942":{"id":"0:320:1942","crate_id":0,"name":"short","span":{"filename":"src/builder/arg.rs","begin":[180,4],"end":[185,5]},"visibility":"public","docs":"Sets the short version of the argument without the preceding `-`.\n\nBy default `V` and `h` are used by the auto-generated `version` and `help` arguments,\nrespectively. You may use the uppercase `V` or lowercase `h` for your own arguments, in\nwhich case `clap` simply will not assign those to the auto-generated\n`version` or `help` arguments.\n\n# Examples\n\nWhen calling `short`, use a single valid UTF-8 character which will allow using the\nargument via a single hyphen (`-`) such as `-c`:\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"config\")\n        .short('c')\n        .takes_value(true))\n    .get_matches_from(vec![\n        \"prog\", \"-c\", \"file.toml\"\n    ]);\n\nassert_eq!(m.get_one::<String>(\"config\").map(String::as_str), Some(\"file.toml\"));\n```","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["s",{"kind":"primitive","inner":"char"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:26":{"id":"0:26","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[109,24],"end":[109,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::derive::Args","name":"Args","id":"0:167:1668","glob":false}},"0:3404:2461":{"id":"0:3404:2461","crate_id":0,"name":"DontDelimitTrailingValues","span":{"filename":"src/builder/app_settings.rs","begin":[210,4],"end":[210,29]},"visibility":"default","docs":"Deprecated, replaced with [`Command::dont_delimit_trailing_values`] and\n[`Command::is_dont_delimit_trailing_values_set`]\n\nDerive: replace `#[clap(setting = DontDelimitTrailingValues)]` with `#[clap(dont_delimit_trailing_values = true)]`\n\nBuilder: replace `cmd.setting(DontDelimitTrailingValues)` with `cmd.dont_delimit_trailing_values(true)`","links":{"`Command::dont_delimit_trailing_values`":"0:819:5080","`Command::is_dont_delimit_trailing_values_set`":"0:995:5926"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"2:3501:358":{"id":"2:3501:358","crate_id":2,"name":"bitand","span":null,"visibility":"default","docs":"Performs the `&` operation.\n\n# Examples\n\n```\nassert_eq!(true & false, false);\nassert_eq!(true & true, true);\nassert_eq!(5u8 & 1u8, 1);\nassert_eq!(5u8 & 2u8, 0);\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"generic","inner":"Rhs"}]],"output":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"BitAnd","id":"2:3498:8786","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:6223:28879":{"id":"1:6223:28879","crate_id":1,"name":"process_group","span":null,"visibility":"default","docs":"Sets the process group ID (PGID) of the child process. Equivalent to a\n`setpgid` call in the child process, but may be more efficient.\n\nProcess groups determine which processes receive signals.\n\n# Examples\n\nPressing Ctrl-C in a terminal will send SIGINT to all processes in\nthe current foreground process group. By spawning the `sleep`\nsubprocess in a new process group, it will not receive SIGINT from the\nterminal.\n\nThe parent process could install a signal handler and manage the\nsubprocess on its own terms.\n\nA process group ID of 0 will use the process ID as the PGID.\n\n```no_run\nuse std::process::Command;\nuse std::os::unix::process::CommandExt;\n\nCommand::new(\"sleep\")\n    .arg(\"10\")\n    .process_group(0)\n    .spawn()?\n    .wait()?;\n#\n# Ok::<_, Box<dyn std::error::Error>>(())\n```","links":{},"attrs":["#[stable(feature = \"process_set_process_group\", since = \"1.64.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["pgroup",{"kind":"primitive","inner":"i32"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Command","id":"1:7477:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:23771:1284":{"id":"2:23771:1284","crate_id":2,"name":"simd_ge","span":null,"visibility":"default","docs":"Test if each lane is greater than or equal to the corresponding lane in `other`.","links":{},"attrs":["#[must_use =\n\"method returns a new mask and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Mask","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdPartialEq","id":"2:23179:11402","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"a:2:3411:6205-0:4294:1679":{"id":"a:2:3411:6205-0:4294:1679","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:3411:6205","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:4294:1679","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3390:2404":{"id":"0:3390:2404","crate_id":0,"name":"IgnoreErrors","span":{"filename":"src/builder/app_settings.rs","begin":[52,4],"end":[52,16]},"visibility":"default","docs":"Deprecated, replaced with [`Command::ignore_errors`]\n\nDerive: replace `#[clap(setting = IgnoreErrors)]` with `#[clap(ignore_errors = true)]`\n\nBuilder: replace `cmd.setting(IgnoreErrors)` with `cmd.ignore_errors = true`","links":{"`Command::ignore_errors`":"0:817:5071"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"0:1309":{"id":"0:1309","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[73,0],"end":[221,1]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1294:2265","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1310:930","0:1312:367","0:1313:1925","0:1314:4240","0:1315:6634"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1385:2102":{"id":"0:1385:2102","crate_id":0,"name":"parse","span":{"filename":"src/builder/value_parser.rs","begin":[741,4],"end":[754,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["cmd",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Command","id":"0:755:1660","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["_arg",{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Arg","id":"0:3818:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}],"bindings":[]}}}}],["value",{"kind":"resolved_path","inner":{"name":"std::ffi::OsString","id":"1:2651:183","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Value","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:1362:2264","args":null}}}},{"type":{"kind":"resolved_path","inner":{"name":"crate::Error","id":"0:4647:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:206:2198":{"id":"0:206:2198","crate_id":0,"name":"augment_args","span":{"filename":"src/derive.rs","begin":[554,4],"end":[556,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["cmd",{"kind":"resolved_path","inner":{"name":"Command","id":"0:755:1660","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Command","id":"0:755:1660","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2969:187":{"id":"2:2969:187","crate_id":2,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2971:1008","2:2972:836","2:2973:801","2:2974:720","2:2975:703"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2920:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:2345:59":{"id":"0:2345:59","crate_id":0,"name":"default","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1771,4],"end":[1777,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:946:4176":{"id":"0:946:4176","crate_id":0,"name":"get_all_aliases","span":{"filename":"src/builder/command.rs","begin":[3416,4],"end":[3418,5]},"visibility":"public","docs":"Iterate through the set of *all* the aliases for this subcommand, both visible and hidden.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}}]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'_"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3682:761":{"id":"2:3682:761","crate_id":2,"name":"index","span":null,"visibility":"default","docs":"Performs the indexing (`container[index]`) operation.\n\n# Panics\n\nMay panic if the index is out of bounds.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[track_caller]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"generic","inner":"Idx"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Index","id":"2:3679:4747","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:8631:9043":{"id":"2:8631:9043","crate_id":2,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8633:7897"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1020:5971":{"id":"0:1020:5971","crate_id":0,"name":"is_subcommand_negates_reqs_set","span":{"filename":"src/builder/command.rs","begin":[3810,4],"end":[3812,5]},"visibility":"public","docs":"Report whether [`Command::subcommand_negates_reqs`] is set","links":{"`Command::subcommand_negates_reqs`":"0:911:5720"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8920:6115":{"id":"2:8920:6115","crate_id":2,"name":"take","span":null,"visibility":"default","docs":"Creates an iterator that yields the first `n` elements, or fewer\nif the underlying iterator ends sooner.\n\n`take(n)` yields elements until `n` elements are yielded or the end of\nthe iterator is reached (whichever happens first).\nThe returned iterator is a prefix of length `n` if the original iterator\ncontains at least `n` elements, otherwise it contains all of the\n(fewer than `n`) elements of the original iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\n\nlet mut iter = a.iter().take(2);\n\nassert_eq!(iter.next(), Some(&1));\nassert_eq!(iter.next(), Some(&2));\nassert_eq!(iter.next(), None);\n```\n\n`take()` is often used with an infinite iterator, to make it finite:\n\n```\nlet mut iter = (0..).take(3);\n\nassert_eq!(iter.next(), Some(0));\nassert_eq!(iter.next(), Some(1));\nassert_eq!(iter.next(), Some(2));\nassert_eq!(iter.next(), None);\n```\n\nIf less than `n` elements are available,\n`take` will limit itself to the size of the underlying iterator:\n\n```\nlet v = [1, 2];\nlet mut iter = v.into_iter().take(5);\nassert_eq!(iter.next(), Some(1));\nassert_eq!(iter.next(), Some(2));\nassert_eq!(iter.next(), None);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Take","id":"2:47096:8991","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1448:930":{"id":"0:1448:930","crate_id":0,"name":"new","span":{"filename":"src/builder/value_parser.rs","begin":[1142,4],"end":[1144,5]},"visibility":"public","docs":"Select full range of `i64`","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:610:1941":{"id":"0:610:1941","crate_id":0,"name":"id","span":{"filename":"src/builder/arg_group.rs","begin":[125,4],"end":[129,5]},"visibility":"public","docs":"Sets the group name.\n\n# Examples\n\n```rust\n# use clap::{Command, ArgGroup};\nArgGroup::default().name(\"config\")\n# ;\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["n",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:838:4783":{"id":"0:838:4783","crate_id":0,"name":"bin_name","span":{"filename":"src/builder/command.rs","begin":[1432,4],"end":[1435,5]},"visibility":"public","docs":"Overrides the runtime-determined name of the binary for help and error messages.\n\nThis should only be used when absolutely necessary, such as when the binary name for your\napplication is misleading, or perhaps *not* how the user should invoke your program.\n\n**Pro-tip:** When building things such as third party `cargo`\nsubcommands, this setting **should** be used!\n\n**NOTE:** This *does not* change or set the name of the binary file on\ndisk. It only changes what clap thinks the name is for the purposes of\nerror or help messages.\n\n# Examples\n\n```no_run\n# use clap::Command;\nCommand::new(\"My Program\")\n     .bin_name(\"my_binary\")\n# ;\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["name",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:8479:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2165:7548":{"id":"0:2165:7548","crate_id":0,"name":"get_many","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[219,4],"end":[225,5]},"visibility":"public","docs":"Iterate over values of a specific option or positional argument.\n\ni.e. an argument that takes multiple values at runtime.\n\nReturns an error if the wrong type was used.\n\nReturns `None` if the option wasn't present.\n\n# Panic\n\nIf the argument definition and access mismatch.  To handle this case programmatically, see\n[`ArgMatches::try_get_many`].\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, value_parser, ArgAction};\nlet m = Command::new(\"myprog\")\n    .arg(Arg::new(\"ports\")\n        .action(ArgAction::Append)\n        .value_parser(value_parser!(usize))\n        .short('p')\n        .takes_value(true)\n        .required(true))\n    .get_matches_from(vec![\n        \"myprog\", \"-p\", \"22\", \"-p\", \"80\", \"-p\", \"2020\"\n    ]);\nlet vals: Vec<usize> = m.get_many(\"ports\")\n    .expect(\"`port`is required\")\n    .copied()\n    .collect();\nassert_eq!(vals, [22, 80, 2020]);\n```","links":{"`ArgMatches::try_get_many`":"0:2231:7549"},"attrs":["#[track_caller]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ValuesRef","id":"0:4755:7386","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Any","id":"2:4102:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:4106:1449":{"id":"2:4106:1449","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"2:46337:7468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8718:9944":{"id":"2:8718:9944","crate_id":2,"name":"advance_back_by","span":null,"visibility":"default","docs":"Advances the iterator from the back by `n` elements.\n\n`advance_back_by` is the reverse version of [`advance_by`]. This method will\neagerly skip `n` elements starting from the back by calling [`next_back`] up\nto `n` times until [`None`] is encountered.\n\n`advance_back_by(n)` will return [`Ok(())`] if the iterator successfully advances by\n`n` elements, or [`Err(k)`] if [`None`] is encountered, where `k` is the number of\nelements the iterator is advanced by before running out of elements (i.e. the length\nof the iterator). Note that `k` is always less than `n`.\n\nCalling `advance_back_by(0)` can do meaningful work, for example [`Flatten`] can advance its\nouter iterator until it finds an inner iterator that is not empty, which then often\nallows it to return a more accurate `size_hint()` than in its initial state.\n\n[`advance_by`]: Iterator::advance_by\n[`Flatten`]: crate::iter::Flatten\n[`next_back`]: DoubleEndedIterator::next_back\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(iter_advance_by)]\n\nlet a = [3, 4, 5, 6];\nlet mut iter = a.iter();\n\nassert_eq!(iter.advance_back_by(2), Ok(()));\nassert_eq!(iter.next_back(), Some(&4));\nassert_eq!(iter.advance_back_by(0), Ok(()));\nassert_eq!(iter.advance_back_by(100), Err(1)); // only `&3` was skipped\n```\n\n[`Ok(())`]: Ok\n[`Err(k)`]: Err","links":{"Iterator::advance_by":"2:8885:8062","DoubleEndedIterator::next_back":"2:8717:7848","Ok":"2:47937:178","Err":"2:47940:127","`None`":"2:47811:177","crate::iter::Flatten":"2:6716:7473"},"attrs":["#[unstable(feature = \"iter_advance_by\", reason = \"recently added\", issue =\n\"77404\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:880:5437":{"id":"0:880:5437","crate_id":0,"name":"allow_negative_numbers","span":{"filename":"src/builder/command.rs","begin":[2129,4],"end":[2135,5]},"visibility":"public","docs":"Allows negative numbers to pass as values.\n\nThis is similar to [`Command::allow_hyphen_values`] except that it only allows numbers,\nall other undefined leading hyphens will fail to parse.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg};\nlet res = Command::new(\"myprog\")\n    .allow_negative_numbers(true)\n    .arg(Arg::new(\"num\"))\n    .try_get_matches_from(vec![\n        \"myprog\", \"-20\"\n    ]);\nassert!(res.is_ok());\nlet m = res.unwrap();\nassert_eq!(m.value_of(\"num\").unwrap(), \"-20\");\n```","links":{"`Command::allow_hyphen_values`":"0:879:3410"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3370:216-0:3351:1659":{"id":"a:2:3370:216-0:3351:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgAction","id":"0:3351:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1591":{"id":"0:1591","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1993,0],"end":[1998,1]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ValueParserFactory","id":"0:1558:2266","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"i64"},"items":["0:1592:1671","0:1593:2257"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:32224:69481":{"id":"2:32224:69481","crate_id":2,"name":"div_ceil","span":null,"visibility":"public","docs":"Calculates the quotient of `self` and `rhs`, rounding the result towards positive infinity.\n\n# Panics\n\nThis function will panic if `rhs` is zero.\n\n## Overflow behavior\n\nOn overflow, this function will panic if overflow checks are enabled (default in debug\nmode) and wrap if overflow checks are disabled (default in release mode).\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(int_roundings)]\nassert_eq!(7_u64.div_ceil(4), 2);\n```","links":{},"attrs":["#[unstable(feature = \"int_roundings\", issue = \"88581\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10801:722":{"id":"2:10801:722","crate_id":2,"name":"hash","span":null,"visibility":"default","docs":"Feeds this value into the given [`Hasher`].\n\n# Examples\n\n```\nuse std::collections::hash_map::DefaultHasher;\nuse std::hash::{Hash, Hasher};\n\nlet mut hasher = DefaultHasher::new();\n7920.hash(&mut hasher);\nprintln!(\"Hash is {:x}!\", hasher.finish());\n```","links":{"`Hasher`":"2:10810:147"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["state",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"H","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"H"},"bounds":[{"trait_bound":{"trait":{"name":"Hasher","id":"2:10810:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:23074:21815":{"id":"2:23074:21815","crate_id":2,"name":"simd_clamp","span":null,"visibility":"default","docs":"Restrict each lane to a certain interval unless it is NaN.\n\nFor each lane in `self`, returns the corresponding lane in `max` if the lane is\ngreater than `max`, and the corresponding lane in `min` if the lane is less\nthan `min`.  Otherwise returns the lane in `self`.","links":{},"attrs":["#[must_use =\n\"method returns a new vector and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["min",{"kind":"generic","inner":"Self"}],["max",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"a:2:9533:7458-0:1294:2265":{"id":"a:2:9533:7458-0:1294:2265","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:9533:7458","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1294:2265","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"2:2957:422":{"id":"2:2957:422","crate_id":2,"name":"cmp","span":null,"visibility":"default","docs":"This method returns an [`Ordering`] between `self` and `other`.\n\nBy convention, `self.cmp(&other)` returns the ordering matching the expression\n`self <operator> other` if true.\n\n# Examples\n\n```\nuse std::cmp::Ordering;\n\nassert_eq!(5.cmp(&10), Ordering::Less);\nassert_eq!(10.cmp(&5), Ordering::Greater);\nassert_eq!(5.cmp(&5), Ordering::Equal);\n```","links":{"`Ordering`":"2:37932:181"},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Ordering","id":"2:37932:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:2172:7602":{"id":"0:2172:7602","crate_id":0,"name":"contains_id","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[379,4],"end":[382,5]},"visibility":"public","docs":"Check if values are present for the argument or group id\n\n*NOTE:* This will always return `true` if [`default_value`] has been set.\n[`ArgMatches::value_source`] can be used to check if a value is present at runtime.\n\n# Panics\n\nIf `id` is is not a valid argument or group name.  To handle this case programmatically, see\n[`ArgMatches::try_contains_id`].\n\n# Examples\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"myprog\")\n    .arg(Arg::new(\"debug\")\n        .short('d'))\n    .get_matches_from(vec![\n        \"myprog\", \"-d\"\n    ]);\n\nassert!(m.contains_id(\"debug\"));\n```\n\n[`default_value`]: crate::Arg::default_value()","links":{"`ArgMatches::value_source`":"0:2204:7462","`ArgMatches::try_contains_id`":"0:2241:7603","crate::Arg::default_value()":"0:394:2389"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5529:28824":{"id":"1:5529:28824","crate_id":1,"name":"rdev","span":null,"visibility":"default","docs":"Returns the device ID of this file (if it is a special one).\n\n# Examples\n\n```no_run\nuse std::fs;\nuse std::os::unix::fs::MetadataExt;\nuse std::io;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    let device_id = meta.rdev();\n    Ok(())\n}\n```","links":{},"attrs":["#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:2:4104-0:3389:1676":{"id":"b:2:4104-0:3389:1676","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:4102:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:3389:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:4106:1449"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:70":{"id":"0:70","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[114,34],"end":[114,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::error::Result","name":"Result","id":"0:1869:208","glob":false}},"2:3537:8794":{"id":"2:3537:8794","crate_id":2,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3539:1250"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23181:1265":{"id":"2:23181:1265","crate_id":2,"name":"simd_eq","span":null,"visibility":"default","docs":"Test if each lane is equal to the corresponding lane in `other`.","links":{},"attrs":["#[must_use =\n\"method returns a new mask and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Mask","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdPartialEq","id":"2:23179:11402","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:2:3213-0:4778:1685":{"id":"b:2:3213-0:4778:1685","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3183:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:4778:1685","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3216:128","2:3217:1436"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:3370:216-0:4404:2276":{"id":"a:2:3370:216-0:4404:2276","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PathBufValueParser","id":"0:4404:2276","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1452":{"id":"0:1452","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1220,0],"end":[1277,1]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"std::convert::TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"name":"std::convert::TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i64"}}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"},{"trait_bound":{"trait":{"name":"std::error::Error","id":"2:3278:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"ToString","id":"5:6505:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["map","parse","possible_values"],"trait":{"name":"TypedValueParser","id":"0:1362:2264","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:4427:2261","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:1454:6597","0:1455:6637"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2868-0:4647:128":{"id":"b:2:2868-0:4647:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2862:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4647:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2870:27181"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:9533:7458-0:4427:2261":{"id":"a:2:9533:7458-0:4427:2261","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:9533:7458","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:9533:7458","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:4427:2261","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4302:667":{"id":"0:4302:667","crate_id":0,"name":"fmt","span":{"filename":"src/builder/possible_value.rs","begin":[29,9],"end":[29,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10511:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:848-0:4469:2274":{"id":"b:5:848-0:4469:2274","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:844:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"NonEmptyStringValueParser","id":"0:4469:2274","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:850:4342","5:851:4983","5:852:9984"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3681:184":{"id":"2:3681:184","crate_id":2,"name":"Output","span":null,"visibility":"default","docs":"The returned type after indexing.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null}},"b:2:4104-0:4294:1679":{"id":"b:2:4104-0:4294:1679","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:4102:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:4294:1679","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":["2:4106:1449"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:924:4153":{"id":"0:924:4153","crate_id":0,"name":"get_name","span":{"filename":"src/builder/command.rs","begin":[3322,4],"end":[3324,5]},"visibility":"public","docs":"Get the name of the cmd.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:511:4249":{"id":"0:511:4249","crate_id":0,"name":"is_hide_possible_values_set","span":{"filename":"src/builder/arg.rs","begin":[4741,4],"end":[4743,5]},"visibility":"public","docs":"Report whether [`Arg::hide_possible_values`] is set","links":{"`Arg::hide_possible_values`":"0:415:3796"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:872:2845":{"id":"0:872:2845","crate_id":0,"name":"help_heading","span":{"filename":"src/builder/command.rs","begin":[1899,4],"end":[1904,5]},"visibility":"public","docs":"Deprecated, replaced with [`Command::next_help_heading`]","links":{"`Command::next_help_heading`":"0:874:5334"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["heading",{"kind":"generic","inner":"O"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"O"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:899:5585":{"id":"0:899:5585","crate_id":0,"name":"visible_long_flag_alias","span":{"filename":"src/builder/command.rs","begin":[2605,4],"end":[2608,5]},"visibility":"public","docs":"Add an alias, which functions as a \"visible\" long flag subcommand.\n\nThis will automatically dispatch as if this subcommand was used. This is more efficient,\nand easier than creating multiple hidden subcommands as one only needs to check for the\nexistence of this command, and not all variants.\n\nSee also [`Command::long_flag_alias`].\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg, };\nlet m = Command::new(\"myprog\")\n            .subcommand(Command::new(\"test\").long_flag(\"test\")\n                .visible_long_flag_alias(\"testing\"))\n            .get_matches_from(vec![\"myprog\", \"--testing\"]);\nassert_eq!(m.subcommand_name(), Some(\"test\"));\n```\n[`App::long_flag_alias`]: Command::long_flag_alias()","links":{"`Command::long_flag_alias`":"0:891:5542"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["name",{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:616:305":{"id":"0:616:305","crate_id":0,"name":"args","span":{"filename":"src/builder/arg_group.rs","begin":[196,4],"end":[201,5]},"visibility":"public","docs":"Adds multiple [arguments] to this group by name\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ArgGroup};\nlet m = Command::new(\"myprog\")\n    .arg(Arg::new(\"flag\")\n        .short('f'))\n    .arg(Arg::new(\"color\")\n        .short('c'))\n    .group(ArgGroup::new(\"req_flags\")\n        .args(&[\"flag\", \"color\"]))\n    .get_matches_from(vec![\"myprog\", \"-f\"]);\n// maybe we don't know which of the two flags was used...\nassert!(m.contains_id(\"req_flags\"));\n// but we can also check individually if needed\nassert!(m.contains_id(\"flag\"));\n```\n[arguments]: crate::Arg","links":{"crate::Arg":"0:3818:1661"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["ns",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Key","id":"0:3239:2795","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4284":{"id":"0:4284","crate_id":0,"name":null,"span":{"filename":"src/builder/command.rs","begin":[77,23],"end":[77,32]},"visibility":{"restricted":{"parent":"0:649:1913","path":"::builder::command"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:3378:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:4241:1674","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:9063:8244":{"id":"2:9063:8244","crate_id":2,"name":"min_by_key","span":null,"visibility":"default","docs":"Returns the element that gives the minimum value from the\nspecified function.\n\nIf several elements are equally minimum, the first element is\nreturned. If the iterator is empty, [`None`] is returned.\n\n# Examples\n\n```\nlet a = [-3_i32, 0, 1, 5, -10];\nassert_eq!(*a.iter().min_by_key(|x| x.abs()).unwrap(), 0);\n```","links":{"`None`":"2:47811:177"},"attrs":["#[stable(feature = \"iter_cmp_by_key\", since = \"1.6.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"B"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"2:2956:180","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3624:132","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"output":{"kind":"generic","inner":"B"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3411:6205-0:4351:1680":{"id":"a:2:3411:6205-0:4351:1680","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:3411:6205","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:4351:1680","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:362:2017":{"id":"0:362:2017","crate_id":0,"name":"validator","span":{"filename":"src/builder/arg.rs","begin":[1562,4],"end":[1571,5]},"visibility":"public","docs":"Deprecated, replaced with [`Arg::value_parser(...)`]\n\nDerive: replace `#[clap(validator = ...)]` with `#[clap(value_parser = ...)]`\n\nBuilder: replace `arg.validator(...)` with `arg.value_parser(...)` and `matches.value_of` with\n`matches.get_one::<T>` or `matches.values_of` with `matches.get_many::<T>`","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3624:132","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"O"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'help"}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:2245","args":{"angle_bracketed":{"args":[{"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"2:3278:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"2:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"2:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3370:216-0:4439:2262":{"id":"a:2:3370:216-0:4439:2262","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangedU64ValueParser","id":"0:4439:2262","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:13719:6285":{"id":"2:13719:6285","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12800:8928"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:76:12448":{"id":"22:76:12448","crate_id":22,"name":"OsStrBytes","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["22:77:69230","22:80:69231"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"22:114:10989","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"ToOwned","id":"5:844:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:1395":{"id":"0:1395","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[799,0],"end":[803,1]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:3254:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsStringValueParser","id":"0:4398:2275","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1396:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:32191:69454":{"id":"2:32191:69454","crate_id":2,"name":"saturating_div","span":null,"visibility":"public","docs":"Saturating integer division. Computes `self / rhs`, saturating at the\nnumeric bounds instead of overflowing.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(5u64.saturating_div(2), 2);\n\n```\n\n```should_panic\nlet _ = 1u64.saturating_div(0);\n\n```","links":{},"attrs":["#[stable(feature = \"saturating_div\", since = \"1.58.0\")]","#[rustc_const_stable(feature = \"saturating_div\", since = \"1.58.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:9136:11037":{"id":"1:9136:11037","crate_id":1,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9137:21756","1:9138:21757","1:9139:21758","1:9140:21759","1:9141:21760","1:9142:21761","1:9143:21762"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10409:10989","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:14461:284":{"id":"2:14461:284","crate_id":2,"name":"alloc","span":null,"visibility":"default","docs":"Allocate memory as described by the given `layout`.\n\nReturns a pointer to newly-allocated memory,\nor null to indicate allocation failure.\n\n# Safety\n\nThis function is unsafe because undefined behavior can result\nif the caller does not ensure that `layout` has non-zero size.\n\n(Extension subtraits might provide more specific bounds on\nbehavior, e.g., guarantee a sentinel address or a null pointer\nin response to a zero-size allocation request.)\n\nThe allocated block of memory may or may not be initialized.\n\n# Errors\n\nReturning a null pointer indicates that either memory is exhausted\nor `layout` does not meet this allocator's size or alignment constraints.\n\nImplementations are encouraged to return null on memory\nexhaustion rather than aborting, but this is not\na strict requirement. (Specifically: it is *legal* to\nimplement this trait atop an underlying native allocation\nlibrary that aborts on memory exhaustion.)\n\nClients wishing to abort computation in response to an\nallocation error are encouraged to call the [`handle_alloc_error`] function,\nrather than directly invoking `panic!` or similar.\n\n[`handle_alloc_error`]: ../../alloc/alloc/fn.handle_alloc_error.html","links":{},"attrs":["#[stable(feature = \"global_alloc\", since = \"1.28.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["layout",{"kind":"resolved_path","inner":{"name":"Layout","id":"2:50749:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"0:917":{"id":"0:917","crate_id":0,"name":null,"span":{"filename":"src/builder/command.rs","begin":[3297,0],"end":[3818,1]},"visibility":{"restricted":{"parent":"0:649:1913","path":"::builder::command"}},"docs":"# Reflection","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:4241:1674","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":["0:920:5829","0:921:5830","0:922:5832","0:924:4153","0:925:5835","0:926:5837","0:927:5839","0:928:5841","0:929:5843","0:930:5845","0:931:5847","0:932:4161","0:933:5850","0:934:4174","0:938:5856","0:942:5858","0:946:4176","0:949:5861","0:952:5863","0:955:2030","0:956:5869","0:957:5872","0:959:5874","0:961:5877","0:962:5879","0:963:5882","0:964:5884","0:965:5885","0:966:5886","0:967:5887","0:968:5888","0:969:5891","0:972:5895","0:975:5897","0:977:5899","0:979:5901","0:982:5903","0:985:5910","0:993:5922","0:995:5926","0:996:5928","0:997:5930","0:998:4243","0:999:5933","0:1000:5935","0:1001:5937","0:1003:5941","0:1006:5947","0:1008:5950","0:1009:5952","0:1010:5954","0:1011:4245","0:1012:5957","0:1013:5959","0:1014:5961","0:1015:5965","0:1018:5967","0:1019:5969","0:1020:5971","0:1021:5973"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4424:415":{"id":"0:4424:415","crate_id":0,"name":"clone","span":{"filename":"src/builder/value_parser.rs","begin":[1025,9],"end":[1025,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"PossibleValuesParser","id":"0:4420:2260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:23:25-0:4294:1679":{"id":"b:23:25-0:4294:1679","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.1/src/equivalent.rs","begin":[18,0],"end":[18,46]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2925:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Equivalent","id":"23:22:9122","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:4294:1679","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":["23:28:9116"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"Q"}}},"2:32147:6773":{"id":"2:32147:6773","crate_id":2,"name":"MAX","span":null,"visibility":"public","docs":"The largest value that can be represented by this integer type\n(2<sup>64</sup> &minus; 1)\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(u64::MAX, 18446744073709551615);\n```","links":{},"attrs":["#[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]"],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"primitive","inner":"u64"},"default":"!0"}},"0:403:3630":{"id":"0:403:3630","crate_id":0,"name":"default_missing_values_os","span":{"filename":"src/builder/arg.rs","begin":[2461,4],"end":[2464,5]},"visibility":"public","docs":"Value for the argument when the flag is present but no value is specified.\n\nSee [`Arg::default_missing_values`].\n\n[`Arg::default_missing_values`]: Arg::default_missing_values()\n[`OsStr`]: std::ffi::OsStr","links":{"Arg::default_missing_values()":"0:401:3634"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["vals",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"1:2654:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1545:59":{"id":"0:1545:59","crate_id":0,"name":"default","span":{"filename":"src/builder/value_parser.rs","begin":[1819,4],"end":[1821,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3354:2340":{"id":"0:3354:2340","crate_id":0,"name":"Append","span":{"filename":"src/builder/action.rs","begin":[72,4],"end":[72,10]},"visibility":"default","docs":"When encountered, store the associated value(s) in [`ArgMatches`][crate::ArgMatches]\n\n# Examples\n\n```rust\n# use clap::Command;\n# use clap::Arg;\nlet cmd = Command::new(\"mycmd\")\n    .arg(\n        Arg::new(\"flag\")\n            .long(\"flag\")\n            .action(clap::ArgAction::Append)\n    );\n\nlet matches = cmd.try_get_matches_from([\"mycmd\", \"--flag\", \"value1\", \"--flag\", \"value2\"]).unwrap();\nassert!(matches.contains_id(\"flag\"));\nassert_eq!(matches.occurrences_of(\"flag\"), 0);\nassert_eq!(\n    matches.get_many::<String>(\"flag\").unwrap_or_default().map(|v| v.as_str()).collect::<Vec<_>>(),\n    vec![\"value1\", \"value2\"]\n);\n```","links":{"crate::ArgMatches":"0:4713:1665"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"2:10513:1555":{"id":"2:10513:1555","crate_id":2,"name":"write_str","span":null,"visibility":"default","docs":"Writes a string slice into this writer, returning whether the write\nsucceeded.\n\nThis method can only succeed if the entire string slice was successfully\nwritten, and this method will not return until all data has been\nwritten or an error occurs.\n\n# Errors\n\nThis function will return an instance of [`Error`] on error.\n\nThe purpose of std::fmt::Error is to abort the formatting operation when the underlying\ndestination encounters some error preventing it from accepting more text; it should\ngenerally be propagated rather than handled, at least when implementing formatting traits.\n\n# Examples\n\n```\nuse std::fmt::{Error, Write};\n\nfn writer<W: Write>(f: &mut W, s: &str) -> Result<(), Error> {\n    f.write_str(s)\n}\n\nlet mut buf = String::new();\nwriter(&mut buf, \"hola\").unwrap();\nassert_eq!(&buf, \"hola\");\n```","links":{"`Error`":"2:48872:128"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["s",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"2:48872:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:2819":{"id":"0:2819","crate_id":0,"name":null,"span":{"filename":"src/parser/mod.rs","begin":[22,0],"end":[22,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::matches::ValuesRef","name":"ValuesRef","id":"0:4755:7386","glob":false}},"2:3510:184":{"id":"2:3510:184","crate_id":2,"name":"Output","span":null,"visibility":"default","docs":"The resulting type after applying the `^` operator.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"2:2959:8292":{"id":"2:2959:8292","crate_id":2,"name":"min","span":null,"visibility":"default","docs":"Compares and returns the minimum of two values.\n\nReturns the first argument if the comparison determines them to be equal.\n\n# Examples\n\n```\nassert_eq!(1, 1.min(2));\nassert_eq!(2, 2.min(2));\n```","links":{},"attrs":["#[stable(feature = \"ord_max_min\", since = \"1.21.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3842:8800":{"id":"2:3842:8800","crate_id":2,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3844:28246"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:32230:69487":{"id":"2:32230:69487","crate_id":2,"name":"checked_next_power_of_two","span":null,"visibility":"public","docs":"Returns the smallest power of two greater than or equal to `n`. If\nthe next power of two is greater than the type's maximum value,\n`None` is returned, otherwise the power of two is wrapped in `Some`.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(2u64.checked_next_power_of_two(), Some(2));\nassert_eq!(3u64.checked_next_power_of_two(), Some(4));\nassert_eq!(u64::MAX.checked_next_power_of_two(), None);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_int_pow\", since = \"1.50.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3207-0:4392:2263":{"id":"b:2:3207-0:4392:2263","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StringValueParser","id":"0:4392:2263","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3209:688"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:23116:21811":{"id":"2:23116:21811","crate_id":2,"name":"signum","span":null,"visibility":"default","docs":"Returns numbers representing the sign of each lane.\n* `0` if the number is zero\n* `1` if the number is positive\n* `-1` if the number is negative","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:3372":{"id":"0:3372","crate_id":0,"name":null,"span":{"filename":"src/builder/action.rs","begin":[23,16],"end":[23,21]},"visibility":{"restricted":{"parent":"0:217:2249","path":"::builder::action"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(missing_copy_implementations)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgAction","id":"0:3351:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3373:667"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3623:383":{"id":"2:3623:383","crate_id":2,"name":"call","span":null,"visibility":"default","docs":"Performs the call operation.","links":{},"attrs":["#[unstable(feature = \"fn_traits\", issue = \"29625\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["args",{"kind":"generic","inner":"Args"}]],"output":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"FnOnce","id":"2:3627:133","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":{"Other":"\"rust-call\""}},"has_body":false}},"a:2:3382:225-0:4398:2275":{"id":"a:2:3382:225-0:4398:2275","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsStringValueParser","id":"0:4398:2275","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1214":{"id":"0:1214","crate_id":0,"name":null,"span":{"filename":"src/builder/possible_value.rs","begin":[37,0],"end":[137,1]},"visibility":{"restricted":{"parent":"0:1203:2254","path":"::builder::possible_value"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:4294:1679","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":["0:1216:930","0:1217:1955","0:1218:3786","0:1219:278","0:1220:2827"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11212:4345":{"id":"2:11212:4345","crate_id":2,"name":"get","span":null,"visibility":"default","docs":"Returns a shared reference to the output at this location, if in\nbounds.","links":{},"attrs":["#[unstable(feature = \"slice_index_methods\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["slice",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SliceIndex","id":"2:11209:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:4554:4751":{"id":"0:4554:4751","crate_id":0,"name":"Usage","span":{"filename":"src/error/context.rs","begin":[36,4],"end":[36,9]},"visibility":"default","docs":"A usage string","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"0:934:4174":{"id":"0:934:4174","crate_id":0,"name":"get_visible_aliases","span":{"filename":"src/builder/command.rs","begin":[3392,4],"end":[3394,5]},"visibility":"public","docs":"Iterate through the *visible* aliases for this subcommand.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}}]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'_"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:337:1948":{"id":"0:337:1948","crate_id":0,"name":"required","span":{"filename":"src/builder/arg.rs","begin":[644,4],"end":[650,5]},"visibility":"public","docs":"Specifies that the argument must be present.\n\nRequired by default means it is required, when no other conflicting rules or overrides have\nbeen evaluated. Conflicting rules take precedence over being required.\n\n**Pro tip:** Flags (i.e. not positional, or arguments that take values) shouldn't be\nrequired by default. This is because if a flag were to be required, it should simply be\nimplied. No additional information is required from user. Flags by their very nature are\nsimply boolean on/off switches. The only time a user *should* be required to use a flag\nis if the operation is destructive in nature, and the user is essentially proving to you,\n\"Yes, I know what I'm doing.\"\n\n# Examples\n\n```rust\n# use clap::Arg;\nArg::new(\"config\")\n    .required(true)\n# ;\n```\n\nSetting required requires that the argument be used at runtime.\n\n```rust\n# use clap::{Command, Arg};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .required(true)\n        .takes_value(true)\n        .long(\"config\"))\n    .try_get_matches_from(vec![\n        \"prog\", \"--config\", \"file.conf\",\n    ]);\n\nassert!(res.is_ok());\n```\n\nSetting required and then *not* supplying that argument at runtime is an error.\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .required(true)\n        .takes_value(true)\n        .long(\"config\"))\n    .try_get_matches_from(vec![\n        \"prog\"\n    ]);\n\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind(), ErrorKind::MissingRequiredArgument);\n```","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2865-0:1294:2265":{"id":"b:2:2865-0:1294:2265","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1294:2265","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2867:2792"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:9533:7458-0:4768:7385":{"id":"a:2:9533:7458-0:4768:7385","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:9533:7458","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawValues","id":"0:4768:7385","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3915:59":{"id":"0:3915:59","crate_id":0,"name":"default","span":{"filename":"src/builder/arg_group.rs","begin":[80,9],"end":[80,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3904:1662","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1433:6637":{"id":"0:1433:6637","crate_id":0,"name":"parse_ref","span":{"filename":"src/builder/value_parser.rs","begin":[1038,4],"end":[1045,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["cmd",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Command","id":"0:755:1660","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["arg",{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Arg","id":"0:3818:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}],"bindings":[]}}}}],["value",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"std::ffi::OsStr","id":"1:2654:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Value","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:1362:2264","args":null}}}},{"type":{"kind":"resolved_path","inner":{"name":"crate::Error","id":"0:4647:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:9160:9041":{"id":"2:9160:9041","crate_id":2,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Step","id":"2:8196:9031","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:32170:1463":{"id":"2:32170:1463","crate_id":2,"name":"unchecked_mul","span":null,"visibility":"public","docs":"Unchecked integer multiplication. Computes `self * rhs`, assuming overflow\ncannot occur.\n\n# Safety\n\nThis results in undefined behavior when\n`self * rhs > u64::MAX` or `self * rhs < u64::MIN`,\ni.e. when [`checked_mul`] would return `None`.\n\n[`checked_mul`]: u64::checked_mul","links":{"u64::checked_mul":"2:32169:69437"},"attrs":["#[unstable(feature = \"unchecked_math\", reason = \"niche optimization path\",\nissue = \"85122\",)]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]","#[rustc_const_unstable(feature = \"const_inherent_unchecked_arith\", issue =\n\"85122\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:2956:180":{"id":"2:2956:180","crate_id":2,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2957:422","2:2958:4377","2:2959:8292","2:2960:9943"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2925:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"PartialOrd","id":"2:2969:187","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:4351:1680":{"id":"0:4351:1680","crate_id":0,"name":"ValueHint","span":{"filename":"src/builder/value_hint.rs","begin":[29,0],"end":[67,1]},"visibility":"public","docs":"Provide shell with hint on how to complete an argument.\n\nSee [Arg::value_hint][crate::Arg::value_hint] to set this on an argument.\n\nSee the `clap_complete` crate for completion script generation.\n\nOverview of which hints are supported by which shell:\n\n| Hint                   | zsh | fish[^1]|\n| ---------------------- | --- | ------- |\n| `AnyPath`              | Yes | Yes     |\n| `FilePath`             | Yes | Yes     |\n| `DirPath`              | Yes | Yes     |\n| `ExecutablePath`       | Yes | Partial |\n| `CommandName`          | Yes | Yes     |\n| `CommandString`        | Yes | Partial |\n| `CommandWithArguments` | Yes |         |\n| `Username`             | Yes | Yes     |\n| `Hostname`             | Yes | Yes     |\n| `Url`                  | Yes |         |\n| `EmailAddress`         | Yes |         |\n\n[^1]: fish completions currently only support named arguments (e.g. -o or --opt), not\n      positional arguments.","links":{"crate::Arg::value_hint":"0:361:2256"},"attrs":["#[non_exhaustive]"],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:4352:238","0:4354:6524","0:4356:4196","0:4358:6527","0:4360:6529","0:4362:6531","0:4364:6533","0:4366:6535","0:4368:6544","0:4370:6546","0:4372:6549","0:4374:6551","0:4376:6553"],"impls":["a:2:9533:7458-0:4351:1680","a:2:9532:7459-0:4351:1680","a:2:3382:225-0:4351:1680","a:2:3370:216-0:4351:1680","a:2:3411:6205-0:4351:1680","b:2:4104-0:4351:1680","b:2:2865-0:4351:1680","b:2:3203-0:4351:1680","b:2:3207-0:4351:1680","b:2:3218-0:4351:1680","b:2:2868-0:4351:1680","b:2:3213-0:4351:1680","b:5:848-0:4351:1680","b:23:25-0:4351:1680","0:4378","0:4380","0:4381","0:4383","0:4384","0:4386","0:4389","0:4390","0:1276","0:1278"]}},"b:2:2868-0:4398:2275":{"id":"b:2:2868-0:4398:2275","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2862:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsStringValueParser","id":"0:4398:2275","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2870:27181"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3470:8781":{"id":"2:3470:8781","crate_id":2,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3472:272"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:2218:7790":{"id":"0:2218:7790","crate_id":0,"name":"remove_subcommand","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1126,4],"end":[1128,5]},"visibility":"public","docs":"Return the name and `ArgMatches` of the current [subcommand].\n\nSubcommand values are put in a child [`ArgMatches`]\n\nReturns `None` if the subcommand wasn't present at runtime,\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg, };\n let mut app_m = Command::new(\"git\")\n     .subcommand(Command::new(\"clone\"))\n     .subcommand(Command::new(\"push\"))\n     .subcommand(Command::new(\"commit\"))\n     .subcommand_required(true)\n     .get_matches();\n\nlet (name, sub_m) = app_m.remove_subcommand().expect(\"required\");\nmatch (name.as_str(), sub_m) {\n    (\"clone\",  sub_m) => {}, // clone was used\n    (\"push\",   sub_m) => {}, // push was used\n    (\"commit\", sub_m) => {}, // commit was used\n    (name, _)         => unimplemented!(\"{}\", name),\n}\n```\n\nAnother useful scenario is when you want to support third party, or external, subcommands.\nIn these cases you can't know the subcommand name ahead of time, so use a variable instead\nwith pattern matching!\n\n```rust\n# use clap::Command;\n// Assume there is an external subcommand named \"subcmd\"\nlet mut app_m = Command::new(\"myprog\")\n    .allow_external_subcommands(true)\n    .get_matches_from(vec![\n        \"myprog\", \"subcmd\", \"--option\", \"value\", \"-fff\", \"--flag\"\n    ]);\n\n// All trailing arguments will be stored under the subcommand's sub-matches using an empty\n// string argument name\nmatch app_m.remove_subcommand() {\n    Some((external, mut sub_m)) => {\n         let ext_args: Vec<String> = sub_m.remove_many(\"\")\n            .expect(\"`file`is required\")\n            .collect();\n         assert_eq!(external, \"subcmd\");\n         assert_eq!(ext_args, [\"--option\", \"value\", \"-fff\", \"--flag\"]);\n    },\n    _ => {},\n}\n```\n[subcommand]: crate::Command::subcommand","links":{"`ArgMatches`":"0:4713:1665","crate::Command::subcommand":"0:782:2012"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"resolved_path","inner":{"name":"String","id":"5:8479:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4713:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4468:1869":{"id":"1:4468:1869","crate_id":1,"name":"write","span":null,"visibility":"default","docs":"Write a buffer into this writer, returning how many bytes were written.\n\nThis function will attempt to write the entire contents of `buf`, but\nthe entire write might not succeed, or the write may also generate an\nerror. A call to `write` represents *at most one* attempt to write to\nany wrapped object.\n\nCalls to `write` are not guaranteed to block waiting for data to be\nwritten, and a write which would otherwise block can be indicated through\nan [`Err`] variant.\n\nIf the return value is [`Ok(n)`] then it must be guaranteed that\n`n <= buf.len()`. A return value of `0` typically means that the\nunderlying object is no longer able to accept bytes and will likely not\nbe able to in the future as well, or that the buffer provided is empty.\n\n# Errors\n\nEach call to `write` may generate an I/O error indicating that the\noperation could not be completed. If an error is returned then no bytes\nin the buffer were written to this writer.\n\nIt is **not** considered an error if the entire buffer could not be\nwritten to this writer.\n\nAn error of the [`ErrorKind::Interrupted`] kind is non-fatal and the\nwrite operation should be retried if there is nothing else to do.\n\n# Examples\n\n```no_run\nuse std::io::prelude::*;\nuse std::fs::File;\n\nfn main() -> std::io::Result<()> {\n    let mut buffer = File::create(\"foo.txt\")?;\n\n    // Writes some prefix of the byte string, not necessarily all of it.\n    buffer.write(b\"some bytes\")?;\n    Ok(())\n}\n```\n\n[`Ok(n)`]: Ok","links":{"`ErrorKind::Interrupted`":"1:10863:14188","`Err`":"2:47940:127","Ok":"2:47937:178"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"1:3803:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:2194:1850":{"id":"0:2194:1850","crate_id":0,"name":"values_of_t","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[615,4],"end":[632,5]},"visibility":"public","docs":"Deprecated, replaced with [`ArgMatches::get_many()`]","links":{"`ArgMatches::get_many()`":"0:2165:7548"},"attrs":["#[track_caller]","#![allow(deprecated)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7898:240","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4647:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:13275:1861","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"R"},"trait":{"name":"FromStr","id":"2:13275:1861","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10569:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4625:7090":{"id":"0:4625:7090","crate_id":0,"name":"InvalidUtf8","span":{"filename":"src/error/kind.rs","begin":[320,4],"end":[320,15]},"visibility":"default","docs":"Occurs when the user provides a value containing invalid UTF-8.\n\nTo allow arbitrary data\n- Set [`Arg::allow_invalid_utf8`] for argument values\n- Set [`Command::allow_invalid_utf8_for_external_subcommands`] for external-subcommand\n  values\n\n# Platform Specific\n\nNon-Windows platforms only (such as Linux, Unix, OSX, etc.)\n\n# Examples\n\n ```\n# use clap::{Command, Arg, ErrorKind};\n# use std::os::unix::ffi::OsStringExt;\n# use std::ffi::OsString;\nlet result = Command::new(\"prog\")\n    .arg(Arg::new(\"utf8\")\n        .short('u')\n        .takes_value(true))\n    .try_get_matches_from(vec![OsString::from(\"myprog\"),\n                                OsString::from(\"-u\"),\n                                OsString::from_vec(vec![0xE9])]);\nassert!(result.is_err());\nassert_eq!(result.unwrap_err().kind(), ErrorKind::InvalidUtf8);\n```\n\n[`Arg::allow_invalid_utf8`]: crate::Arg::allow_invalid_utf8\n[`Command::allow_invalid_utf8_for_external_subcommands`]: crate::Command::allow_invalid_utf8_for_external_subcommands","links":{"crate::Command::allow_invalid_utf8_for_external_subcommands":"0:908:5667","crate::Arg::allow_invalid_utf8":"0:384:3418"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"0:1429:930":{"id":"0:1429:930","crate_id":0,"name":"new","span":{"filename":"src/builder/value_parser.rs","begin":[1030,4],"end":[1032,5]},"visibility":"public","docs":"Verify the value is from an enumerated set pf [`PossibleValue`][crate::PossibleValue].","links":{"crate::PossibleValue":"0:4294:1679"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["values",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"PossibleValuesParser","id":"0:4420:2260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl Into<PossibleValuesParser>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"PossibleValuesParser","id":"0:4420:2260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:23:25-0:4523:6999":{"id":"b:23:25-0:4523:6999","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.1/src/equivalent.rs","begin":[18,0],"end":[18,46]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2925:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Equivalent","id":"23:22:9122","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:4523:6999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["23:28:9116"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"Q"}}},"0:763:1932":{"id":"0:763:1932","crate_id":0,"name":"arg","span":{"filename":"src/builder/command.rs","begin":[185,4],"end":[198,5]},"visibility":"public","docs":"Adds an [argument] to the list of valid possibilities.\n\n# Examples\n\n```no_run\n# use clap::{Command, arg, Arg};\nCommand::new(\"myprog\")\n    // Adding a single \"flag\" argument with a short and help text, using Arg::new()\n    .arg(\n        Arg::new(\"debug\")\n           .short('d')\n           .help(\"turns on debugging mode\")\n    )\n    // Adding a single \"option\" argument with a short, a long, and help text using the less\n    // verbose Arg::from()\n    .arg(\n        arg!(-c --config <CONFIG> \"Optionally sets a config file to use\")\n    )\n# ;\n```\n[argument]: Arg","links":{"Arg":"0:3818:1661"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["a",{"kind":"generic","inner":"A"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3818:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3203-0:3818:1661":{"id":"b:2:3203-0:3818:1661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3818:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":["2:3206:2391"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:3382:225-0:4451:2270":{"id":"a:2:3382:225-0:4451:2270","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BoolValueParser","id":"0:4451:2270","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:3835:376":{"id":"2:3835:376","crate_id":2,"name":"branch","span":null,"visibility":"default","docs":"Used in `?` to decide whether the operator should produce a value\n(because this returned [`ControlFlow::Continue`])\nor propagate a value back to the caller\n(because this returned [`ControlFlow::Break`]).\n\n# Examples\n\n```\n#![feature(try_trait_v2)]\nuse std::ops::{ControlFlow, Try};\n\nassert_eq!(Ok::<_, String>(3).branch(), ControlFlow::Continue(3));\nassert_eq!(Err::<String, _>(3).branch(), ControlFlow::Break(Err(3)));\n\nassert_eq!(Some(3).branch(), ControlFlow::Continue(3));\nassert_eq!(None::<String>.branch(), ControlFlow::Break(None));\n\nassert_eq!(ControlFlow::<String, _>::Continue(3).branch(), ControlFlow::Continue(3));\nassert_eq!(\n    ControlFlow::<_, String>::Break(3).branch(),\n    ControlFlow::Break(ControlFlow::Break(3)),\n);\n```","links":{"`ControlFlow::Break`":"2:46104:99","`ControlFlow::Continue`":"2:46101:106"},"attrs":["#[unstable(feature = \"try_trait_v2\", issue = \"84277\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"ControlFlow","id":"2:46098:8807","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Try","id":"2:3831:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},{"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Try","id":"2:3831:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:8633:7897":{"id":"2:8633:7897","crate_id":2,"name":"sum","span":null,"visibility":"default","docs":"Method which takes an iterator and generates `Self` from the elements by\n\"summing up\" the items.","links":{},"attrs":["#[stable(feature = \"iter_arith_traits\", since = \"1.12.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["iter",{"kind":"generic","inner":"I"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"A"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:2:4104-0:4693:7387":{"id":"b:2:4104-0:4693:7387","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:4102:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4693:7387","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:4106:1449"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3207-0:4420:2260":{"id":"b:2:3207-0:4420:2260","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValuesParser","id":"0:4420:2260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3209:688"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:23:25-0:4713:1665":{"id":"b:23:25-0:4713:1665","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.1/src/equivalent.rs","begin":[18,0],"end":[18,46]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2925:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Equivalent","id":"23:22:9122","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4713:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["23:28:9116"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"Q"}}},"2:3630:385":{"id":"2:3630:385","crate_id":2,"name":"call_once","span":null,"visibility":"default","docs":"Performs the call operation.","links":{},"attrs":["#[unstable(feature = \"fn_traits\", issue = \"29625\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["args",{"kind":"generic","inner":"Args"}]],"output":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"FnOnce","id":"2:3627:133","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":{"Other":"\"rust-call\""}},"has_body":false}},"0:913:4803":{"id":"0:913:4803","crate_id":0,"name":"subcommand_value_name","span":{"filename":"src/builder/command.rs","begin":[3218,4],"end":[3224,5]},"visibility":"public","docs":"Sets the value name used for subcommands when printing usage and help.\n\nBy default, this is \"SUBCOMMAND\".\n\nSee also [`Command::subcommand_help_heading`]\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg};\nCommand::new(\"myprog\")\n    .subcommand(Command::new(\"sub1\"))\n    .print_help()\n# ;\n```\n\nwill produce\n\n```text\nmyprog\n\nUSAGE:\n    myprog [SUBCOMMAND]\n\nOPTIONS:\n    -h, --help       Print help information\n    -V, --version    Print version information\n\nSUBCOMMANDS:\n    help    Print this message or the help of the given subcommand(s)\n    sub1\n```\n\nbut usage of `subcommand_value_name`\n\n```no_run\n# use clap::{Command, Arg};\nCommand::new(\"myprog\")\n    .subcommand(Command::new(\"sub1\"))\n    .subcommand_value_name(\"THING\")\n    .print_help()\n# ;\n```\n\nwill produce\n\n```text\nmyprog\n\nUSAGE:\n    myprog [THING]\n\nOPTIONS:\n    -h, --help       Print help information\n    -V, --version    Print version information\n\nSUBCOMMANDS:\n    help    Print this message or the help of the given subcommand(s)\n    sub1\n```","links":{"`Command::subcommand_help_heading`":"0:915:5825"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["value_name",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2865-0:4241:1674":{"id":"b:2:2865-0:4241:1674","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:4241:1674","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":["2:2867:2792"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:817:5071":{"id":"0:817:5071","crate_id":0,"name":"ignore_errors","span":{"filename":"src/builder/command.rs","begin":[953,4],"end":[959,5]},"visibility":"public","docs":"Try not to fail on parse errors, like missing option values.\n\n**Note:** Make sure you apply it as `global_setting` if you want this setting\nto be propagated to subcommands and sub-subcommands!\n\n**NOTE:** This choice is propagated to all child subcommands.\n\n# Examples\n\n```rust\n# use clap::{Command, arg};\nlet cmd = Command::new(\"cmd\")\n  .ignore_errors(true)\n  .arg(arg!(-c --config <FILE> \"Sets a custom config file\").required(false))\n  .arg(arg!(-x --stuff <FILE> \"Sets a custom stuff file\").required(false))\n  .arg(arg!(f: -f \"Flag\"));\n\nlet r = cmd.try_get_matches_from(vec![\"cmd\", \"-c\", \"file\", \"-f\", \"-x\"]);\n\nassert!(r.is_ok(), \"unexpected error: {:?}\", r);\nlet m = r.unwrap();\nassert_eq!(m.value_of(\"config\"), Some(\"file\"));\nassert!(m.is_present(\"f\"));\nassert_eq!(m.value_of(\"stuff\"), None);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3914:8806":{"id":"2:3914:8806","crate_id":2,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:2304:2117":{"id":"0:2304:2117","crate_id":0,"name":"Item","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1663,4],"end":[1663,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}},"0:930:5845":{"id":"0:930:5845","crate_id":0,"name":"get_about","span":{"filename":"src/builder/command.rs","begin":[3360,4],"end":[3362,5]},"visibility":"public","docs":"Get the help message specified via [`Command::about`].\n\n[`App::about`]: Command::about()","links":{"`Command::about`":"0:844:1917"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:32209:69467":{"id":"2:32209:69467","crate_id":2,"name":"borrowing_sub","span":null,"visibility":"public","docs":"Calculates `self - rhs - borrow` without the ability to overflow.\n\nPerforms \"ternary subtraction\" which takes in an extra bit to subtract, and may return\nan additional bit of overflow. This allows for chaining together multiple subtractions\nto create \"big integers\" which represent larger values.\n\n# Examples\n\nBasic usage\n\n```\n#![feature(bigint_helper_methods)]\nassert_eq!(5u64.borrowing_sub(2, false), (3, false));\nassert_eq!(5u64.borrowing_sub(2, true), (2, false));\nassert_eq!(0u64.borrowing_sub(1, false), (u64::MAX, true));\nassert_eq!(0u64.borrowing_sub(1, true), (u64::MAX - 1, true));\n```","links":{},"attrs":["#[unstable(feature = \"bigint_helper_methods\", issue = \"85532\")]","#[rustc_const_unstable(feature = \"const_bigint_helper_methods\", issue =\n\"85532\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}],["borrow",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"u64"},{"kind":"primitive","inner":"bool"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9532:7459-0:4713:1665":{"id":"a:2:9532:7459-0:4713:1665","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:9532:7459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4713:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"2:10810:147":{"id":"2:10810:147","crate_id":2,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10811:659","2:10812:1869","2:10813:10563","2:10814:10564","2:10815:10565","2:10816:10566","2:10817:10567","2:10818:10568","2:10819:10569","2:10820:10570","2:10821:10571","2:10822:10572","2:10823:10573","2:10824:10574","2:10825:10575","2:10826:1555"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5510:28817":{"id":"1:5510:28817","crate_id":1,"name":"set_mode","span":null,"visibility":"default","docs":"Sets the underlying raw bits for this set of permissions.\n\n# Examples\n\n```no_run\nuse std::fs::File;\nuse std::os::unix::fs::PermissionsExt;\n\nfn main() -> std::io::Result<()> {\n    let f = File::create(\"foo.txt\")?;\n    let metadata = f.metadata()?;\n    let mut permissions = metadata.permissions();\n\n    permissions.set_mode(0o644); // Read/write for owner and read for others.\n    assert_eq!(permissions.mode(), 0o644);\n    Ok(())\n}\n```","links":{},"attrs":["#[stable(feature = \"fs_ext\", since = \"1.1.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mode",{"kind":"primitive","inner":"u32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:3486":{"id":"0:3486","crate_id":0,"name":null,"span":{"filename":"src/builder/app_settings.rs","begin":[32,9],"end":[32,14]},"visibility":{"restricted":{"parent":"0:227:2250","path":"::builder::app_settings"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:3389:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3487:667"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:3370:216-0:3818:1661":{"id":"a:2:3370:216-0:3818:1661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3818:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:3218-0:3904:1662":{"id":"b:2:3218-0:3904:1662","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3904:1662","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":["2:3221:128","2:3222:1435"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3218-0:4796:1683":{"id":"b:2:3218-0:4796:1683","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsValues","id":"0:4796:1683","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3221:128","2:3222:1435"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:382:2236":{"id":"0:382:2236","crate_id":0,"name":"ignore_case","span":{"filename":"src/builder/arg.rs","begin":[1741,4],"end":[1747,5]},"visibility":"public","docs":"Match values against [`Arg::possible_values`] without matching case.\n\nWhen other arguments are conditionally required based on the\nvalue of a case-insensitive argument, the equality check done\nby [`Arg::required_if_eq`], [`Arg::required_if_eq_any`], or\n[`Arg::required_if_eq_all`] is case-insensitive.\n\n\n**NOTE:** Setting this requires [`Arg::takes_value`]\n\n**NOTE:** To do unicode case folding, enable the `unicode` feature flag.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"pv\")\n    .arg(Arg::new(\"option\")\n        .long(\"option\")\n        .takes_value(true)\n        .ignore_case(true)\n        .value_parser([\"test123\"]))\n    .get_matches_from(vec![\n        \"pv\", \"--option\", \"TeSt123\",\n    ]);\n\nassert!(m.value_of(\"option\").unwrap().eq_ignore_ascii_case(\"test123\"));\n```\n\nThis setting also works when multiple values can be defined:\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"pv\")\n    .arg(Arg::new(\"option\")\n        .short('o')\n        .long(\"option\")\n        .takes_value(true)\n        .ignore_case(true)\n        .multiple_values(true)\n        .value_parser([\"test123\", \"test321\"]))\n    .get_matches_from(vec![\n        \"pv\", \"--option\", \"TeSt123\", \"teST123\", \"tESt321\"\n    ]);\n\nlet matched_vals = m.values_of(\"option\").unwrap().collect::<Vec<_>>();\nassert_eq!(&*matched_vals, &[\"TeSt123\", \"teST123\", \"tESt321\"]);\n```","links":{"`Arg::required_if_eq_any`":"0:443:3989","`Arg::required_if_eq`":"0:441:3966","`Arg::required_if_eq_all`":"0:446:3999","`Arg::takes_value`":"0:351:1949","`Arg::possible_values`":"0:378:3370"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3218-0:5070:1667":{"id":"b:2:3218-0:5070:1667","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:5070:1667","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3221:128","2:3222:1435"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3921":{"id":"0:3921","crate_id":0,"name":null,"span":{"filename":"src/builder/arg_group.rs","begin":[80,25],"end":[80,34]},"visibility":{"restricted":{"parent":"0:597:2251","path":"::builder::arg_group"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2920:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3904:1662","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3904:1662","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":["0:3923:611"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:2351:2117":{"id":"0:2351:2117","crate_id":0,"name":"Item","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1807,4],"end":[1807,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"primitive","inner":"usize"}}},"a:2:9532:7459-0:4439:2262":{"id":"a:2:9532:7459-0:4439:2262","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:9532:7459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:9532:7459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangedU64ValueParser","id":"0:4439:2262","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:24077:11341":{"id":"2:24077:11341","crate_id":2,"name":"Mask","span":null,"visibility":"default","docs":"The mask element type corresponding to this element type.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"MaskElement","id":"2:23439:11342","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null}},"0:814":{"id":"0:814","crate_id":0,"name":null,"span":{"filename":"src/builder/command.rs","begin":[899,0],"end":[1385,1]},"visibility":{"restricted":{"parent":"0:649:1913","path":"::builder::command"}},"docs":"# Application-wide Settings\n\nThese settings will apply to the top-level command and all subcommands, by default.  Some\nsettings can be overridden in subcommands.","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:4241:1674","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":["0:816:5053","0:817:5071","0:818:5072","0:819:5080","0:820:1575","0:821:5094","0:822:5099","0:823:5104","0:824:5111","0:825:3781","0:826:5117","0:827:5124","0:828:5127","0:829:5143","0:830:5146","0:831:3796","0:832:5158","0:833:5174"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13832:21134":{"id":"2:13832:21134","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3527:359":{"id":"2:3527:359","crate_id":2,"name":"bitand_assign","span":null,"visibility":"default","docs":"Performs the `&=` operation.\n\n# Examples\n\n```\nlet mut x = true;\nx &= false;\nassert_eq!(x, false);\n\nlet mut x = true;\nx &= true;\nassert_eq!(x, true);\n\nlet mut x: u8 = 5;\nx &= 1;\nassert_eq!(x, 1);\n\nlet mut x: u8 = 5;\nx &= 2;\nassert_eq!(x, 0);\n```","links":{},"attrs":["#[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["rhs",{"kind":"generic","inner":"Rhs"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:10579:192":{"id":"2:10579:192","crate_id":2,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10580:667"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:4906:4836":{"id":"2:4906:4836","crate_id":2,"name":"size_hint","span":null,"visibility":"default","docs":"Returns the bounds on the remaining length of the async iterator.\n\nSpecifically, `size_hint()` returns a tuple where the first element\nis the lower bound, and the second element is the upper bound.\n\nThe second half of the tuple that is returned is an <code>[Option]<[usize]></code>.\nA [`None`] here means that either there is no known upper bound, or the\nupper bound is larger than [`usize`].\n\n# Implementation notes\n\nIt is not enforced that an async iterator implementation yields the declared\nnumber of elements. A buggy async iterator may yield less than the lower bound\nor more than the upper bound of elements.\n\n`size_hint()` is primarily intended to be used for optimizations such as\nreserving space for the elements of the async iterator, but must not be\ntrusted to e.g., omit bounds checks in unsafe code. An incorrect\nimplementation of `size_hint()` should not lead to memory safety\nviolations.\n\nThat said, the implementation should provide a correct estimation,\nbecause otherwise it would be a violation of the trait's protocol.\n\nThe default implementation returns <code>(0, [None])</code> which is correct for any\nasync iterator.","links":{"usize":"1:15899:8662","`usize`":"1:15899:8662","`None`":"2:47811:177","None":"2:47811:177","Option":"2:47809:179"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4410:2272":{"id":"0:4410:2272","crate_id":0,"name":"EnumValueParser","span":{"filename":"src/builder/value_parser.rs","begin":[913,0],"end":[915,2]},"visibility":"public","docs":"Parse an [`ValueEnum`][crate::ValueEnum] value.\n\nSee also:\n- [`PossibleValuesParser`]\n\n# Example\n\n```rust\n# use std::ffi::OsStr;\n# use clap::builder::TypedValueParser;\n# let cmd = clap::Command::new(\"test\");\n# let arg = None;\n\n#[derive(Copy, Clone, Debug, PartialEq, Eq)]\nenum ColorChoice {\n    Always,\n    Auto,\n    Never,\n}\n\nimpl clap::ValueEnum for ColorChoice {\n    fn value_variants<'a>() -> &'a [Self] {\n        &[Self::Always, Self::Auto, Self::Never]\n    }\n\n    fn to_possible_value<'a>(&self) -> Option<clap::PossibleValue<'a>> {\n        match self {\n            Self::Always => Some(clap::PossibleValue::new(\"always\")),\n            Self::Auto => Some(clap::PossibleValue::new(\"auto\")),\n            Self::Never => Some(clap::PossibleValue::new(\"never\")),\n        }\n    }\n}\n\n// Usage\nlet mut cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"color\")\n            .value_parser(clap::builder::EnumValueParser::<ColorChoice>::new())\n            .required(true)\n    );\n\nlet m = cmd.try_get_matches_from_mut([\"cmd\", \"always\"]).unwrap();\nlet port: ColorChoice = *m.get_one(\"color\")\n    .expect(\"required\");\nassert_eq!(port, ColorChoice::Always);\n\n// Semantics\nlet value_parser = clap::builder::EnumValueParser::<ColorChoice>::new();\n// or\nlet value_parser = clap::value_parser!(ColorChoice);\nassert!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"random\")).is_err());\nassert!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"\")).is_err());\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"always\")).unwrap(), ColorChoice::Always);\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"auto\")).unwrap(), ColorChoice::Auto);\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"never\")).unwrap(), ColorChoice::Never);\n```","links":{"crate::ValueEnum":"0:174:1673","`PossibleValuesParser`":"0:4420:2260"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"tuple":[null]},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"crate::ValueEnum","id":"0:174:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:1406","a:2:9533:7458-0:4410:2272","a:2:9532:7459-0:4410:2272","a:2:3382:225-0:4410:2272","a:2:3370:216-0:4410:2272","a:2:3411:6205-0:4410:2272","b:2:4104-0:4410:2272","b:2:2865-0:4410:2272","b:2:3203-0:4410:2272","b:2:3207-0:4410:2272","b:2:3218-0:4410:2272","b:2:2868-0:4410:2272","b:2:3213-0:4410:2272","b:5:848-0:4410:2272","0:4414","0:4417","0:1409","0:1425"]}},"0:1472":{"id":"0:1472","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1338,0],"end":[1416,1]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"std::convert::TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"RangedU64ValueParser","id":"0:4439:2262","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:1474:930","0:1475:6651"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1194":{"id":"0:1194","crate_id":0,"name":null,"span":{"filename":"src/builder/command.rs","begin":[5171,0],"end":[5177,1]},"visibility":{"restricted":{"parent":"0:649:1913","path":"::builder::command"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Index","id":"2:3679:4747","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:5056:2794","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:4241:1674","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":["0:1196:184","0:1197:761"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13763:43137":{"id":"2:13763:43137","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"self::pattern":"2:13336:8923","prim@char":"1:15876:8642"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:13128:8926","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13346:8917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4300":{"id":"0:4300","crate_id":0,"name":null,"span":{"filename":"src/builder/possible_value.rs","begin":[29,9],"end":[29,14]},"visibility":{"restricted":{"parent":"0:1203:2254","path":"::builder::possible_value"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:4294:1679","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":["0:4302:667"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:9056:8814":{"id":"2:9056:8814","crate_id":2,"name":"max_by","span":null,"visibility":"default","docs":"Returns the element that gives the maximum value with respect to the\nspecified comparison function.\n\nIf several elements are equally maximum, the last element is\nreturned. If the iterator is empty, [`None`] is returned.\n\n# Examples\n\n```\nlet a = [-3_i32, 0, 1, 5, -10];\nassert_eq!(*a.iter().max_by(|x, y| x.cmp(y)).unwrap(), 5);\n```","links":{"`None`":"2:47811:177"},"attrs":["#[stable(feature = \"iter_max_by\", since = \"1.15.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["compare",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3624:132","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"output":{"kind":"resolved_path","inner":{"name":"Ordering","id":"2:37932:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2865-0:5070:1667":{"id":"b:2:2865-0:5070:1667","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:5070:1667","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2867:2792"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:334:2957":{"id":"0:334:2957","crate_id":0,"name":"visible_short_aliases","span":{"filename":"src/builder/arg.rs","begin":[438,4],"end":[444,5]},"visibility":"public","docs":"Add aliases, which function as visible short flags.\n\nLike [`Arg::short_aliases`], except that they are visible inside the help message.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ArgAction};\nlet m = Command::new(\"prog\")\n            .arg(Arg::new(\"test\")\n                .long(\"test\")\n                .action(ArgAction::SetTrue)\n                .visible_short_aliases(&['t', 'e']))\n       .get_matches_from(vec![\n            \"prog\", \"-t\"\n        ]);\nassert_eq!(*m.get_one::<bool>(\"test\").expect(\"defaulted by clap\"), true);\n```","links":{"`Arg::short_aliases`":"0:328:2828"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["names",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"char"}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:829:5143":{"id":"0:829:5143","crate_id":0,"name":"help_expected","span":{"filename":"src/builder/command.rs","begin":[1278,4],"end":[1284,5]},"visibility":"public","docs":" Panic if help descriptions are omitted.\n\n **NOTE:** When deriving [`Parser`][crate::Parser], you could instead check this at\n compile-time with `#![deny(missing_docs)]`\n\n **NOTE:** This choice is propagated to all child subcommands.\n\n # Examples\n\n ```rust\n # use clap::{Command, Arg};\n Command::new(\"myprog\")\n     .help_expected(true)\n     .arg(\n         Arg::new(\"foo\").help(\"It does foo stuff\")\n         // As required via `help_expected`, a help message was supplied\n      )\n #    .get_matches();\n ```\n\n # Panics\n\n ```rust,no_run\n # use clap::{Command, Arg};\n Command::new(\"myapp\")\n     .help_expected(true)\n     .arg(\n         Arg::new(\"foo\")\n         // Someone forgot to put .about(\"...\") here\n         // Since the setting `help_expected` is activated, this will lead to\n         // a panic (if you are in debug mode)\n     )\n #   .get_matches();\n```","links":{"crate::Parser":"0:127:1671"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3239:2795":{"id":"0:3239:2795","crate_id":0,"name":"Key","span":{"filename":"src/util/fnv.rs","begin":[9,0],"end":[11,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:3240:6034"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"2:10800:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Display","id":"2:10569:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:3241"]}},"b:2:3203-0:4768:7385":{"id":"b:2:3203-0:4768:7385","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawValues","id":"0:4768:7385","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3206:2391"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:2091:688":{"id":"0:2091:688","crate_id":0,"name":"from","span":{"filename":"src/parser/matches/any_value.rs","begin":[98,4],"end":[100,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["_",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"A"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:83":{"id":"0:83","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[116,56],"end":[116,62]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::parser::Values","name":"Values","id":"0:4778:1685","glob":false}},"0:166:2125":{"id":"0:166:2125","crate_id":0,"name":"update_from_arg_matches_mut","span":{"filename":"src/derive.rs","begin":[360,4],"end":[362,5]},"visibility":"default","docs":"Assign values from `ArgMatches` to `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["matches",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4713:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4647:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6639:28858":{"id":"1:6639:28858","crate_id":1,"name":"as_raw_fd","span":null,"visibility":"default","docs":"Extracts the raw file descriptor.\n\nThis function is typically used to **borrow** an owned file descriptor.\nWhen used in this way, this method does **not** pass ownership of the\nraw file descriptor to the caller, and the file descriptor is only\nguaranteed to be valid while the original object has not yet been\ndestroyed.\n\nHowever, borrowing is not strictly required. See [`AsFd::as_fd`]\nfor an API which strictly borrows a file descriptor.\n\n# Example\n\n```no_run\nuse std::fs::File;\n# use std::io;\n#[cfg(unix)]\nuse std::os::unix::io::{AsRawFd, RawFd};\n#[cfg(target_os = \"wasi\")]\nuse std::os::wasi::io::{AsRawFd, RawFd};\n\nlet mut f = File::open(\"foo.txt\")?;\n// Note that `raw_fd` is only valid as long as `f` exists.\n#[cfg(any(unix, target_os = \"wasi\"))]\nlet raw_fd: RawFd = f.as_raw_fd();\n# Ok::<(), io::Error>(())\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:2:3218-0:4294:1679":{"id":"b:2:3218-0:4294:1679","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:4294:1679","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":["2:3221:128","2:3222:1435"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:6193:21133":{"id":"5:6193:21133","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13832:21134"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8479:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8905:5854":{"id":"2:8905:5854","crate_id":2,"name":"filter","span":null,"visibility":"default","docs":"Creates an iterator which uses a closure to determine if an element\nshould be yielded.\n\nGiven an element the closure must return `true` or `false`. The returned\niterator will yield only the elements for which the closure returns\ntrue.\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [0i32, 1, 2];\n\nlet mut iter = a.iter().filter(|x| x.is_positive());\n\nassert_eq!(iter.next(), Some(&1));\nassert_eq!(iter.next(), Some(&2));\nassert_eq!(iter.next(), None);\n```\n\nBecause the closure passed to `filter()` takes a reference, and many\niterators iterate over references, this leads to a possibly confusing\nsituation, where the type of the closure is a double reference:\n\n```\nlet a = [0, 1, 2];\n\nlet mut iter = a.iter().filter(|x| **x > 1); // need two *s!\n\nassert_eq!(iter.next(), Some(&2));\nassert_eq!(iter.next(), None);\n```\n\nIt's common to instead use destructuring on the argument to strip away\none:\n\n```\nlet a = [0, 1, 2];\n\nlet mut iter = a.iter().filter(|&x| *x > 1); // both & and *\n\nassert_eq!(iter.next(), Some(&2));\nassert_eq!(iter.next(), None);\n```\n\nor both:\n\n```\nlet a = [0, 1, 2];\n\nlet mut iter = a.iter().filter(|&&x| x > 1); // two &s\n\nassert_eq!(iter.next(), Some(&2));\nassert_eq!(iter.next(), None);\n```\n\nof these layers.\n\nNote that `iter.filter(f).next()` is equivalent to `iter.find(f)`.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["predicate",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Filter","id":"2:46955:9055","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3624:132","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3983:3137":{"id":"0:3983:3137","crate_id":0,"name":"TakesValue","span":{"filename":"src/builder/arg_settings.rs","begin":[174,4],"end":[174,14]},"visibility":"default","docs":"Deprecated, replaced with [`Arg::takes_value`] and [`Arg::is_takes_value_set`]\n\nDerive: this setting shouldn't be needed\n\nBuilder: replace `arg.setting(TakesValue)` with `arg.takes_value(true)`","links":{"`Arg::is_takes_value_set`":"0:498:4184","`Arg::takes_value`":"0:351:1949"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"0:4710":{"id":"0:4710","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/any_value.rs","begin":[41,9],"end":[41,13]},"visibility":{"restricted":{"parent":"0:2060:7460","path":"::parser::matches::any_value"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3380:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AnyValueId","id":"0:4707:2393","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1455:6637":{"id":"0:1455:6637","crate_id":0,"name":"parse_ref","span":{"filename":"src/builder/value_parser.rs","begin":[1227,4],"end":[1276,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["cmd",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Command","id":"0:755:1660","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["arg",{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Arg","id":"0:3818:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}],"bindings":[]}}}}],["raw_value",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"std::ffi::OsStr","id":"1:2654:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Value","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:1362:2264","args":null}}}},{"type":{"kind":"resolved_path","inner":{"name":"crate::Error","id":"0:4647:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:765:305":{"id":"0:765:305","crate_id":0,"name":"args","span":{"filename":"src/builder/command.rs","begin":[215,4],"end":[228,5]},"visibility":"public","docs":"Adds multiple [arguments] to the list of valid possibilities.\n\n# Examples\n\n```no_run\n# use clap::{Command, arg, Arg};\nCommand::new(\"myprog\")\n    .args(&[\n        arg!(\"[debug] -d 'turns on debugging info'\"),\n        Arg::new(\"input\").help(\"the input file to use\")\n    ])\n# ;\n```\n[arguments]: Arg","links":{"Arg":"0:3818:1661"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["args",{"kind":"generic","inner":"I"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3818:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2868:611":{"id":"0:2868:611","crate_id":0,"name":"eq","span":{"filename":"src/mkeymap.rs","begin":[39,4],"end":[44,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["rhs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"usize"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:32221:69478":{"id":"2:32221:69478","crate_id":2,"name":"div_euclid","span":null,"visibility":"public","docs":"Performs Euclidean division.\n\nSince, for the positive integers, all common\ndefinitions of division are equal, this\nis exactly equal to `self / rhs`.\n\n# Panics\n\nThis function will panic if `rhs` is 0.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(7u64.div_euclid(4), 1); // or any other integer type\n```","links":{},"attrs":["#[stable(feature = \"euclidean_division\", since = \"1.38.0\")]","#[rustc_const_stable(feature = \"const_euclidean_int_methods\", since =\n\"1.52.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4532:7077":{"id":"0:4532:7077","crate_id":0,"name":"InvalidValue","span":{"filename":"src/error/context.rs","begin":[14,4],"end":[14,16]},"visibility":"default","docs":"Rejected values","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"0:520":{"id":"0:520","crate_id":0,"name":null,"span":{"filename":"src/builder/arg.rs","begin":[4799,0],"end":[5061,1]},"visibility":{"restricted":{"parent":"0:242:1932","path":"::builder::arg"}},"docs":"# Deprecated","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3818:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:2227":{"id":"0:2227","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1222,0],"end":[1323,1]},"visibility":{"restricted":{"parent":"0:2092:7461","path":"::parser::matches::arg_matches"}},"docs":"# Advanced","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4713:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2228:7525","0:2231:7549","0:2234:7576","0:2235:7586","0:2238:7595","0:2241:7603"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3508:8787":{"id":"2:3508:8787","crate_id":2,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3510:184","2:3511:363"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:5:848-0:4828:1684":{"id":"b:5:848-0:4828:1684","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:844:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4828:1684","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:850:4342","5:851:4983","5:852:9984"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:406:1955":{"id":"0:406:1955","crate_id":0,"name":"help","span":{"filename":"src/builder/arg.rs","begin":[2667,4],"end":[2670,5]},"visibility":"public","docs":"Sets the description of the argument for short help (`-h`).\n\nTypically, this is a short (one line) description of the arg.\n\nIf [`Arg::long_help`] is not specified, this message will be displayed for `--help`.\n\n**NOTE:** Only `Arg::help` is used in completion script generation in order to be concise\n\n# Examples\n\nAny valid UTF-8 is allowed in the help text. The one exception is when one wishes to\ninclude a newline in the help text and have the following text be properly aligned with all\nthe other help text.\n\nSetting `help` displays a short message to the side of the argument when the user passes\n`-h` or `--help` (by default).\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .long(\"config\")\n        .help(\"Some help text describing the --config arg\"))\n    .get_matches_from(vec![\n        \"prog\", \"--help\"\n    ]);\n```\n\nThe above example displays\n\n```notrust\nhelptest\n\nUSAGE:\n   helptest [OPTIONS]\n\nOPTIONS:\n    --config     Some help text describing the --config arg\n-h, --help       Print help information\n-V, --version    Print version information\n```\n[`Arg::long_help`]: Arg::long_help()","links":{"Arg::long_help()":"0:408:2818"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["h",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl Into<Option<&'help str>>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1535":{"id":"0:1535","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1742,0],"end":[1746,1]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:3254:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BoolishValueParser","id":"0:4463:2271","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1536:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1318:1449":{"id":"0:1318:1449","crate_id":0,"name":"type_id","span":{"filename":"src/builder/value_parser.rs","begin":[237,4],"end":[239,5]},"visibility":"public","docs":"Describes the content of `AnyValue`","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"AnyValueId","id":"0:4707:2393","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1600:2269":{"id":"0:1600:2269","crate_id":0,"name":"via_prelude","span":{"filename":"src/builder/value_parser.rs","begin":[2026,0],"end":[2026,19]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(hidden)]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":[],"is_stripped":true}},"0:2356:7848":{"id":"0:2356:7848","crate_id":0,"name":"next_back","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1818,4],"end":[1820,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3287:10132":{"id":"2:3287:10132","crate_id":2,"name":"provide","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["demand",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Demand","id":"2:4168:9026","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3203-0:4469:2274":{"id":"b:2:3203-0:4469:2274","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"NonEmptyStringValueParser","id":"0:4469:2274","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3206:2391"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1217:1955":{"id":"0:1217:1955","crate_id":0,"name":"help","span":{"filename":"src/builder/possible_value.rs","begin":[77,4],"end":[80,5]},"visibility":"public","docs":"Sets the help description of the value.\n\nThis is typically displayed in completions (where supported) and should be a short, one-line\ndescription.\n\n# Examples\n\n```rust\n# use clap::PossibleValue;\nPossibleValue::new(\"slow\")\n    .help(\"not fast\")\n# ;\n```","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["help",{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:821:5094":{"id":"0:821:5094","crate_id":0,"name":"term_width","span":{"filename":"src/builder/command.rs","begin":[1064,4],"end":[1067,5]},"visibility":"public","docs":"Sets the terminal width at which to wrap help messages.\n\nUsing `0` will ignore terminal widths and use source formatting.\n\nDefaults to current terminal width when `wrap_help` feature flag is enabled.  If the flag\nis disabled or it cannot be determined, the default is 100.\n\n**NOTE:** This setting applies globally and *not* on a per-command basis.\n\n# Examples\n\n```no_run\n# use clap::Command;\nCommand::new(\"myprog\")\n    .term_width(80)\n# ;\n```","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["width",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3452:902":{"id":"2:3452:902","crate_id":2,"name":"mul","span":null,"visibility":"default","docs":"Performs the `*` operation.\n\n# Example\n\n```\nassert_eq!(12 * 2, 24);\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"generic","inner":"Rhs"}]],"output":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Mul","id":"2:3449:8777","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:396:3581":{"id":"0:396:3581","crate_id":0,"name":"default_values","span":{"filename":"src/builder/arg.rs","begin":[2316,4],"end":[2319,5]},"visibility":"public","docs":"Value for the argument when not present.\n\nSee [`Arg::default_value`].\n\n[`Arg::default_value`]: Arg::default_value()","links":{"Arg::default_value()":"0:394:2389"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["vals",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1753":{"id":"0:1753","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[43,0],"end":[43,39]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"value_parser::_AutoValueParser","name":"_AutoValueParser","id":"0:4488:2268","glob":false}},"b:2:3203-0:4439:2262":{"id":"b:2:3203-0:4439:2262","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangedU64ValueParser","id":"0:4439:2262","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:3206:2391"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3498:8786":{"id":"2:3498:8786","crate_id":2,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3500:184","2:3501:358"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:4589":{"id":"0:4589","crate_id":0,"name":null,"span":{"filename":"src/error/context.rs","begin":[42,23],"end":[42,32]},"visibility":{"restricted":{"parent":"0:1854:488","path":"::error::context"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2920:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ContextValue","id":"0:4569:7000","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextValue","id":"0:4569:7000","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4590:611"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:2161:7523":{"id":"0:2161:7523","crate_id":0,"name":"get_one","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[117,4],"end":[120,5]},"visibility":"public","docs":"Gets the value of a specific option or positional argument.\n\ni.e. an argument that [takes an additional value][crate::Arg::takes_value] at runtime.\n\nReturns an error if the wrong type was used.\n\nReturns `None` if the option wasn't present.\n\n*NOTE:* This will always return `Some(value)` if [`default_value`] has been set.\n[`ArgMatches::value_source`] can be used to check if a value is present at runtime.\n\n# Panic\n\nIf the argument definition and access mismatch.  To handle this case programmatically, see\n[`ArgMatches::try_get_one`].\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, value_parser};\nlet m = Command::new(\"myapp\")\n    .arg(Arg::new(\"port\")\n        .value_parser(value_parser!(usize))\n        .takes_value(true)\n        .required(true))\n    .get_matches_from(vec![\"myapp\", \"2020\"]);\n\nlet port: usize = *m\n    .get_one(\"port\")\n    .expect(\"`port`is required\");\nassert_eq!(port, 2020);\n```\n[option]: crate::Arg::takes_value()\n[positional]: crate::Arg::index()\n[`default_value`]: crate::Arg::default_value()","links":{"`ArgMatches::value_source`":"0:2204:7462","`ArgMatches::try_get_one`":"0:2228:7525","crate::Arg::takes_value":"0:351:1949","crate::Arg::default_value()":"0:394:2389"},"attrs":["#[track_caller]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Any","id":"2:4102:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:562:611":{"id":"0:562:611","crate_id":0,"name":"eq","span":{"filename":"src/builder/arg.rs","begin":[5199,4],"end":[5201,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3818:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1720":{"id":"0:1720","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[32,0],"end":[32,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"command::Command","name":"Command","id":"0:755:1660","glob":false}},"b:2:4104-0:4647:128":{"id":"b:2:4104-0:4647:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:4102:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4647:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:4106:1449"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3183:234":{"id":"2:3183:234","crate_id":2,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3185:128","2:3186:1436"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6218:28876":{"id":"1:6218:28876","crate_id":1,"name":"before_exec","span":null,"visibility":"default","docs":"Schedules a closure to be run just before the `exec` function is\ninvoked.\n\nThis method is stable and usable, but it should be unsafe. To fix\nthat, it got deprecated in favor of the unsafe [`pre_exec`].\n\n[`pre_exec`]: CommandExt::pre_exec","links":{"CommandExt::pre_exec":"1:6216:28875"},"attrs":["#[stable(feature = \"process_exec\", since = \"1.15.0\")]","#[deprecated(since = \"1.37.0\", note =\n\"should be unsafe, use `pre_exec` instead\")]"],"deprecation":{"since":"1.37.0","note":"should be unsafe, use `pre_exec` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Command","id":"1:7477:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"FnMut","id":"2:3624:132","args":{"parenthesized":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"1:3803:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:499:4224":{"id":"0:499:4224","crate_id":0,"name":"is_allow_hyphen_values_set","span":{"filename":"src/builder/arg.rs","begin":[4665,4],"end":[4667,5]},"visibility":"public","docs":"Report whether [`Arg::allow_hyphen_values`] is set","links":{"`Arg::allow_hyphen_values`":"0:383:3410"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3207-0:5070:1667":{"id":"b:2:3207-0:5070:1667","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:5070:1667","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3209:688"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2868-0:4796:1683":{"id":"b:2:2868-0:4796:1683","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2862:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsValues","id":"0:4796:1683","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2870:27181"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:2305:932":{"id":"0:2305:932","crate_id":0,"name":"next","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1665,4],"end":[1667,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:139:2127":{"id":"0:139:2127","crate_id":0,"name":"try_update_from","span":{"filename":"src/derive.rs","begin":[146,4],"end":[155,5]},"visibility":"default","docs":"Update from iterator, return Err on error.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["itr",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4647:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsString","id":"1:2651:183","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1315:6634":{"id":"0:1315:6634","crate_id":0,"name":"path_buf","span":{"filename":"src/builder/value_parser.rs","begin":[218,4],"end":[220,5]},"visibility":"public","docs":"[`PathBuf`][std::path::PathBuf] parser for argument values\n\n# Example\n\n```rust\n# use std::path::PathBuf;\n# use std::path::Path;\nlet mut cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"output\")\n            .value_parser(clap::value_parser!(PathBuf))\n            .required(true)\n    );\n\nlet m = cmd.try_get_matches_from_mut([\"cmd\", \"hello.txt\"]).unwrap();\nlet port: &PathBuf = m.get_one(\"output\")\n    .expect(\"required\");\nassert_eq!(port, Path::new(\"hello.txt\"));\n\nassert!(cmd.try_get_matches_from_mut([\"cmd\", \"\"]).is_err());\n```","links":{"std::path::PathBuf":"1:7132:189"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6474:15086":{"id":"1:6474:15086","crate_id":1,"name":"st_ctime","span":null,"visibility":"default","docs":"Returns the last status change time of the file, in seconds since Unix Epoch.\n\n# Examples\n\n```no_run\nuse std::fs;\nuse std::io;\nuse std::os::linux::fs::MetadataExt;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    println!(\"{}\", meta.st_ctime());\n    Ok(())\n}\n```","links":{},"attrs":["#[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:418:3839":{"id":"0:418:3839","crate_id":0,"name":"hide_long_help","span":{"filename":"src/builder/arg.rs","begin":[3169,4],"end":[3175,5]},"visibility":"public","docs":"Hides an argument from long help (`--help`).\n\n**NOTE:** This does **not** hide the argument from usage strings on error\n\n**NOTE:** Setting this option will cause next-line-help output style to be used\nwhen long help (`--help`) is called.\n\n# Examples\n\nSetting `hide_long_help(true)` will hide the argument when displaying long help text\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .long(\"config\")\n        .hide_long_help(true)\n        .help(\"Some help text describing the --config arg\"))\n    .get_matches_from(vec![\n        \"prog\", \"--help\"\n    ]);\n```\n\nThe above example displays\n\n```text\nhelptest\n\nUSAGE:\n   helptest [OPTIONS]\n\nOPTIONS:\n-h, --help       Print help information\n-V, --version    Print version information\n```\n\nHowever, when -h is called\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .long(\"config\")\n        .hide_long_help(true)\n        .help(\"Some help text describing the --config arg\"))\n    .get_matches_from(vec![\n        \"prog\", \"-h\"\n    ]);\n```\n\nThen the following would be displayed\n\n```text\nhelptest\n\nUSAGE:\n   helptest [OPTIONS]\n\nOPTIONS:\n    --config     Some help text describing the --config arg\n-h, --help       Print help information\n-V, --version    Print version information\n```","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:32153:69425":{"id":"2:32153:69425","crate_id":2,"name":"trailing_zeros","span":null,"visibility":"public","docs":"Returns the number of trailing zeros in the binary representation\nof `self`.\n\n# Examples\n\nBasic usage:\n\n```\nlet n = 0b0101000u64;\n\nassert_eq!(n.trailing_zeros(), 3);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:966:5886":{"id":"0:966:5886","crate_id":0,"name":"get_before_long_help","span":{"filename":"src/builder/command.rs","begin":[3516,4],"end":[3518,5]},"visibility":"public","docs":"Returns the help heading for listing subcommands.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:9028:1025":{"id":"2:9028:1025","crate_id":2,"name":"position","span":null,"visibility":"default","docs":"Searches for an element in an iterator, returning its index.\n\n`position()` takes a closure that returns `true` or `false`. It applies\nthis closure to each element of the iterator, and if one of them\nreturns `true`, then `position()` returns [`Some(index)`]. If all of\nthem return `false`, it returns [`None`].\n\n`position()` is short-circuiting; in other words, it will stop\nprocessing as soon as it finds a `true`.\n\n# Overflow Behavior\n\nThe method does no guarding against overflows, so if there are more\nthan [`usize::MAX`] non-matching elements, it either produces the wrong\nresult or panics. If debug assertions are enabled, a panic is\nguaranteed.\n\n# Panics\n\nThis function might panic if the iterator has more than `usize::MAX`\nnon-matching elements.\n\n[`Some(index)`]: Some\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\n\nassert_eq!(a.iter().position(|&x| x == 2), Some(1));\n\nassert_eq!(a.iter().position(|&x| x == 5), None);\n```\n\nStopping at the first `true`:\n\n```\nlet a = [1, 2, 3, 4];\n\nlet mut iter = a.iter();\n\nassert_eq!(iter.position(|&x| x >= 2), Some(1));\n\n// we can still use `iter`, as there are more elements.\nassert_eq!(iter.next(), Some(&3));\n\n// The returned index depends on iterator state\nassert_eq!(iter.position(|&x| x == 4), Some(0));\n\n```","links":{"Some":"2:47813:220","`usize::MAX`":"2:32349:6773","`None`":"2:47811:177"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["predicate",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3624:132","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:429:3905":{"id":"0:429:3905","crate_id":0,"name":"default_value_ifs","span":{"filename":"src/builder/arg.rs","begin":[3469,4],"end":[3477,5]},"visibility":"public","docs":"Specifies multiple values and conditions in the same manner as [`Arg::default_value_if`].\n\nThe method takes a slice of tuples in the `(arg, Option<val>, default)` format.\n\n**NOTE**: The conditions are stored in order and evaluated in the same order. I.e. the first\nif multiple conditions are true, the first one found will be applied and the ultimate value.\n\n# Examples\n\nFirst we use the default value only if another arg is present at runtime.\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"flag\")\n        .long(\"flag\"))\n    .arg(Arg::new(\"opt\")\n        .long(\"opt\")\n        .takes_value(true))\n    .arg(Arg::new(\"other\")\n        .long(\"other\")\n        .default_value_ifs(&[\n            (\"flag\", None, Some(\"default\")),\n            (\"opt\", Some(\"channal\"), Some(\"chan\")),\n        ]))\n    .get_matches_from(vec![\n        \"prog\", \"--opt\", \"channal\"\n    ]);\n\nassert_eq!(m.value_of(\"other\"), Some(\"chan\"));\n```\n\nNext we run the same test, but without providing `--flag`.\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"flag\")\n        .long(\"flag\"))\n    .arg(Arg::new(\"other\")\n        .long(\"other\")\n        .default_value_ifs(&[\n            (\"flag\", None, Some(\"default\")),\n            (\"opt\", Some(\"channal\"), Some(\"chan\")),\n        ]))\n    .get_matches_from(vec![\n        \"prog\"\n    ]);\n\nassert_eq!(m.value_of(\"other\"), None);\n```\n\nWe can also see that these values are applied in order, and if more than one condition is\ntrue, only the first evaluated \"wins\"\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"flag\")\n        .long(\"flag\"))\n    .arg(Arg::new(\"opt\")\n        .long(\"opt\")\n        .takes_value(true))\n    .arg(Arg::new(\"other\")\n        .long(\"other\")\n        .default_value_ifs(&[\n            (\"flag\", None, Some(\"default\")),\n            (\"opt\", Some(\"channal\"), Some(\"chan\")),\n        ]))\n    .get_matches_from(vec![\n        \"prog\", \"--opt\", \"channal\", \"--flag\"\n    ]);\n\nassert_eq!(m.value_of(\"other\"), Some(\"default\"));\n```\n[`Arg::takes_value(true)`]: Arg::takes_value()\n[`Arg::default_value_if`]: Arg::default_value_if()","links":{"Arg::default_value_if()":"0:425:3887"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["ifs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"tuple","inner":[{"kind":"generic","inner":"T"},{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}}]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Key","id":"0:3239:2795","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9532:7459-0:4569:7000":{"id":"a:2:9532:7459-0:4569:7000","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:9532:7459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextValue","id":"0:4569:7000","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2865-0:4594:1681":{"id":"b:2:2865-0:4594:1681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4594:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2867:2792"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1331:688":{"id":"0:1331:688","crate_id":0,"name":"from","span":{"filename":"src/builder/value_parser.rs","begin":[384,4],"end":[387,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["value",{"kind":"resolved_path","inner":{"name":"std::ops::RangeFrom","id":"2:46212:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i64"}}],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:462:4148":{"id":"0:462:4148","crate_id":0,"name":"overrides_with_all","span":{"filename":"src/builder/arg.rs","begin":[4371,4],"end":[4374,5]},"visibility":"public","docs":"Sets multiple mutually overridable arguments by name.\n\ni.e. this argument and the following argument will override each other in POSIX style\n(whichever argument was specified at runtime **last** \"wins\")\n\n**NOTE:** When an argument is overridden it is essentially as if it never was used, any\nconflicts, requirements, etc. are evaluated **after** all \"overrides\" have been removed\n\n**NOTE:** Overriding an argument implies they [conflict][Arg::conflicts_with_all`].\n\n# Examples\n\n```rust\n# use clap::{Command, arg};\nlet m = Command::new(\"prog\")\n    .arg(arg!(-f --flag \"some flag\")\n        .conflicts_with(\"color\"))\n    .arg(arg!(-d --debug \"other flag\"))\n    .arg(arg!(-c --color \"third flag\")\n        .overrides_with_all(&[\"flag\", \"debug\"]))\n    .get_matches_from(vec![\n        \"prog\", \"-f\", \"-d\", \"-c\"]);\n            //    ^~~~~~^~~~~~~~~ flag and debug are overridden by color\n\nassert!(m.is_present(\"color\")); // even though flag conflicts with color, it's as if flag\n                                // and debug were never used because they were overridden\n                                // with color\nassert!(!m.is_present(\"debug\"));\nassert!(!m.is_present(\"flag\"));\n```","links":{"Arg::conflicts_with_all`":"0:459:4071"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["names",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Key","id":"0:3239:2795","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1736":{"id":"0:0:1736","crate_id":0,"name":"clap","span":{"filename":"src/lib.rs","begin":[6,0],"end":[232,1]},"visibility":"public","docs":"> **Command Line Argument Parser for Rust**\n\nQuick Links:\n- Derive [tutorial][_derive::_tutorial] and [reference][_derive]\n- Builder [tutorial][_tutorial] and [reference](index.html)\n- [Cookbook][_cookbook]\n- [FAQ][_faq]\n- [Discussions](https://github.com/clap-rs/clap/discussions)\n\n## Aspirations\n\n- Out of the box, users get a polished CLI experience\n  - Including common argument behavior, help generation, suggested fixes for users, colored output, [shell completions](https://github.com/clap-rs/clap/tree/master/clap_complete), etc\n- Flexible enough to port your existing CLI interface\n  - However, we won't necessarily streamline support for each use case\n- Reasonable parse performance\n- Resilient maintainership, including\n  - Willing to break compatibility rather than batching up breaking changes in large releases\n  - Leverage feature flags to keep to one active branch\n  - Being under [WG-CLI](https://github.com/rust-cli/team/) to increase the bus factor\n- We follow semver and will wait about 6-9 months between major breaking changes\n- We will support the last two minor Rust releases (MSRV, currently 1.56.1)\n\nWhile these aspirations can be at odds with fast build times and low binary\nsize, we will still strive to keep these reasonable for the flexibility you\nget.  Check out the\n[argparse-benchmarks](https://github.com/rust-cli/argparse-benchmarks-rs) for\nCLI parsers optimized for other use cases.\n\n## Example\n\nRun\n```console\n$ cargo add clap --features derive\n```\n*(See also [feature flag reference][_features])*\n\nThen define your CLI in `main.rs`:\n ```ignore\nuse clap::Parser;\n\n/// Simple program to greet a person\n#[derive(Parser, Debug)]\n#[clap(author, version, about, long_about = None)]\nstruct Args {\n    /// Name of the person to greet\n    #[clap(short, long, value_parser)]\n    name: String,\n\n    /// Number of times to greet\n    #[clap(short, long, value_parser, default_value_t = 1)]\n    count: u8,\n}\n\nfn main() {\n    let args = Args::parse();\n\n    for _ in 0..args.count {\n        println!(\"Hello {}!\", args.name)\n    }\n}\n```\n\nAnd try it out:\n```console\n$ demo --help\nclap [..]\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUSAGE:\n    demo[EXE] [OPTIONS] --name <NAME>\n\nOPTIONS:\n    -c, --count <COUNT>    Number of times to greet [default: 1]\n    -h, --help             Print help information\n    -n, --name <NAME>      Name of the person to greet\n    -V, --version          Print version information\n\n$ demo --name Me\nHello Me!\n\n```\n*(version number and `.exe` extension on windows replaced by placeholders)*\n\nSee also the derive [tutorial][_derive::_tutorial] and [reference][_derive]\n\n### Related Projects\n\nAugment clap:\n- [wild](https://crates.io/crates/wild) for supporting wildcards (`*`) on Windows like you do Linux\n- [argfile](https://crates.io/crates/argfile) for loading additional arguments from a file (aka response files)\n- [shadow-rs](https://crates.io/crates/shadow-rs) for generating `Command::long_version`\n- [clap_mangen](https://crates.io/crates/clap_mangen) for generating man page source (roff)\n- [clap_complete](https://crates.io/crates/clap_complete) for shell completion support\n\nCLI Helpers\n- [clap-verbosity-flag](https://crates.io/crates/clap-verbosity-flag)\n- [clap-cargo](https://crates.io/crates/clap-cargo)\n- [concolor-clap](https://crates.io/crates/concolor-clap)\n\nTesting\n- [`trycmd`](https://crates.io/crates/trycmd):  Bulk snapshot testing\n- [`snapbox`](https://crates.io/crates/snapbox):  Specialized snapshot testing\n- [`assert_cmd`](https://crates.io/crates/assert_cmd) and [`assert_fs`](https://crates.io/crates/assert_fs): Customized testing\n\nDocumentation:\n- [Command-line Apps for Rust](https://rust-cli.github.io/book/index.html) book\n","links":{},"attrs":["#![doc(html_logo_url =\n\"https://raw.githubusercontent.com/clap-rs/clap/master/assets/clap.png\")]","#![warn(missing_docs, missing_debug_implementations,\nmissing_copy_implementations, trivial_casts, unused_allocation,\ntrivial_numeric_casts, clippy :: single_char_pattern)]","#![forbid(unsafe_code)]","#![allow(clippy :: single_component_path_imports)]","#![allow(clippy :: branches_sharing_code)]","#![allow(clippy :: if_same_then_else)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:215:1658","0:1792:1663","0:1958:1664","0:3","0:6","0:10","0:13","0:16","0:19","0:22","0:26","0:29","0:32","0:35","0:38","0:41","0:44","0:48","0:51","0:54","0:57","0:60","0:63","0:67","0:70","0:74","0:77","0:80","0:83","0:86","0:92","0:103:1913","0:105:1932","0:1621:2257"],"is_stripped":false}},"b:2:2868-0:4241:1674":{"id":"b:2:2868-0:4241:1674","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2862:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:4241:1674","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":["2:2870:27181"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13359:28669":{"id":"2:13359:28669","crate_id":2,"name":"next_match","span":null,"visibility":"default","docs":"Finds the next [`Match`][SearchStep::Match] result. See [`next()`][Searcher::next].\n\nUnlike [`next()`][Searcher::next], there is no guarantee that the returned ranges\nof this and [`next_reject`][Searcher::next_reject] will overlap. This will return\n`(start_match, end_match)`, where start_match is the index of where\nthe match begins, and end_match is the index after the end of the match.","links":{"Searcher::next":"2:13358:932","Searcher::next_reject":"2:13360:28670","SearchStep::Match":"2:50171:10312"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"primitive","inner":"usize"}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1565:1671":{"id":"0:1565:1671","crate_id":0,"name":"Parser","span":{"filename":"src/builder/value_parser.rs","begin":[1928,4],"end":[1928,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1294:2265","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"2:32162:69432":{"id":"2:32162:69432","crate_id":2,"name":"to_be","span":null,"visibility":"public","docs":"Converts `self` to big endian from the target's endianness.\n\nOn big endian this is a no-op. On little endian the bytes are\nswapped.\n\n# Examples\n\nBasic usage:\n\n```\nlet n = 0x1Au64;\n\nif cfg!(target_endian = \"big\") {\n    assert_eq!(n.to_be(), n)\n} else {\n    assert_eq!(n.to_be(), n.swap_bytes())\n}\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:4904:2117":{"id":"2:4904:2117","crate_id":2,"name":"Item","span":null,"visibility":"default","docs":"The type of items yielded by the async iterator.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"0:86":{"id":"0:86","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[139,0],"end":[139,34]},"visibility":"public","docs":"Deprecated, replaced with [`CommandFactory`]","links":{"`CommandFactory`":"0:153:1669"},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"CommandFactory","name":"IntoApp","id":"0:153:1669","glob":false}},"0:4420:2260":{"id":"0:4420:2260","crate_id":0,"name":"PossibleValuesParser","span":{"filename":"src/builder/value_parser.rs","begin":[1026,0],"end":[1026,68]},"visibility":"public","docs":"Verify the value is from an enumerated set of [`PossibleValue`][crate::PossibleValue].\n\nSee also:\n- [`EnumValueParser`]\n\n# Example\n\nUsage:\n```rust\nlet mut cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"color\")\n            .value_parser(clap::builder::PossibleValuesParser::new([\"always\", \"auto\", \"never\"]))\n            .required(true)\n    );\n\nlet m = cmd.try_get_matches_from_mut([\"cmd\", \"always\"]).unwrap();\nlet port: &String = m.get_one(\"color\")\n    .expect(\"required\");\nassert_eq!(port, \"always\");\n```\n\nSemantics:\n```rust\n# use std::ffi::OsStr;\n# use clap::builder::TypedValueParser;\n# let cmd = clap::Command::new(\"test\");\n# let arg = None;\nlet value_parser = clap::builder::PossibleValuesParser::new([\"always\", \"auto\", \"never\"]);\nassert!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"random\")).is_err());\nassert!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"\")).is_err());\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"always\")).unwrap(), \"always\");\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"auto\")).unwrap(), \"auto\");\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"never\")).unwrap(), \"never\");\n```","links":{"`EnumValueParser`":"0:4410:2272","crate::PossibleValue":"0:4294:1679"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:1428","a:2:9533:7458-0:4420:2260","a:2:9532:7459-0:4420:2260","a:2:3382:225-0:4420:2260","a:2:3370:216-0:4420:2260","a:2:3411:6205-0:4420:2260","b:2:4104-0:4420:2260","b:2:2865-0:4420:2260","b:2:3203-0:4420:2260","b:2:3207-0:4420:2260","b:2:3218-0:4420:2260","b:2:2868-0:4420:2260","b:2:3213-0:4420:2260","b:5:848-0:4420:2260","0:4423","0:4425","0:1431","0:1441"]}},"2:32193:1549":{"id":"2:32193:1549","crate_id":2,"name":"wrapping_add","span":null,"visibility":"public","docs":"Wrapping (modular) addition. Computes `self + rhs`,\nwrapping around at the boundary of the type.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(200u64.wrapping_add(55), 255);\nassert_eq!(200u64.wrapping_add(u64::MAX), 199);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:32231:69488":{"id":"2:32231:69488","crate_id":2,"name":"wrapping_next_power_of_two","span":null,"visibility":"public","docs":"Returns the smallest power of two greater than or equal to `n`. If\nthe next power of two is greater than the type's maximum value,\nthe return value is wrapped to `0`.\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(wrapping_next_power_of_two)]\n\nassert_eq!(2u64.wrapping_next_power_of_two(), 2);\nassert_eq!(3u64.wrapping_next_power_of_two(), 4);\nassert_eq!(u64::MAX.wrapping_next_power_of_two(), 0);\n```","links":{},"attrs":["#[unstable(feature = \"wrapping_next_power_of_two\", issue = \"32463\", reason =\n\"needs decision on wrapping behaviour\")]","#[rustc_const_unstable(feature = \"wrapping_next_power_of_two\", issue =\n\"32463\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:14463:287":{"id":"2:14463:287","crate_id":2,"name":"alloc_zeroed","span":null,"visibility":"default","docs":"Behaves like `alloc`, but also ensures that the contents\nare set to zero before being returned.\n\n# Safety\n\nThis function is unsafe for the same reasons that `alloc` is.\nHowever the allocated block of memory is guaranteed to be initialized.\n\n# Errors\n\nReturning a null pointer indicates that either memory is exhausted\nor `layout` does not meet allocator's size or alignment constraints,\njust as in `alloc`.\n\nClients wishing to abort computation in response to an\nallocation error are encouraged to call the [`handle_alloc_error`] function,\nrather than directly invoking `panic!` or similar.\n\n[`handle_alloc_error`]: ../../alloc/alloc/fn.handle_alloc_error.html","links":{},"attrs":["#[stable(feature = \"global_alloc\", since = \"1.28.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["layout",{"kind":"resolved_path","inner":{"name":"Layout","id":"2:50749:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2868-0:4410:2272":{"id":"b:2:2868-0:4410:2272","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2862:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EnumValueParser","id":"0:4410:2272","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"items":["2:2870:27181"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:211:2215":{"id":"0:211:2215","crate_id":0,"name":"augment_subcommands_for_update","span":{"filename":"src/derive.rs","begin":[566,4],"end":[568,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["cmd",{"kind":"resolved_path","inner":{"name":"Command","id":"0:755:1660","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Command","id":"0:755:1660","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2868-0:3389:1676":{"id":"b:2:2868-0:3389:1676","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2862:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:3389:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2870:27181"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:9533:7458-0:4594:1681":{"id":"a:2:9533:7458-0:4594:1681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:9533:7458","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4594:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:2081":{"id":"0:2081","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/any_value.rs","begin":[72,0],"end":[76,1]},"visibility":{"restricted":{"parent":"0:2060:7460","path":"::parser::matches::any_value"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["min","max","clamp"],"trait":{"name":"Ord","id":"2:2956:180","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AnyValueId","id":"0:4707:2393","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2082:422"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:2864:27181":{"id":"2:2864:27181","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":"Mutably borrows from an owned value.\n\n# Examples\n\n```\nuse std::borrow::BorrowMut;\n\nfn check<T: BorrowMut<[i32]>>(mut v: T) {\n    assert_eq!(&mut [1, 2, 3], v.borrow_mut());\n}\n\nlet v = vec![1, 2, 3];\n\ncheck(v);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Borrowed"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:4407:415":{"id":"0:4407:415","crate_id":0,"name":"clone","span":{"filename":"src/builder/value_parser.rs","begin":[808,15],"end":[808,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"PathBufValueParser","id":"0:4404:2276","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2865-0:4778:1685":{"id":"b:2:2865-0:4778:1685","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:4778:1685","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2867:2792"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"26:33:10550":{"id":"26:33:10550","crate_id":26,"name":"is_synchronous","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/termcolor-1.1.3/src/lib.rs","begin":[170,4],"end":[170,36]},"visibility":"default","docs":"Returns true if and only if the underlying writer must synchronously\ninteract with an end user's device in order to control colors. By\ndefault, this always returns `false`.\n\nIn practice, this should return `true` if the underlying writer is\nmanipulating colors using the Windows console APIs.\n\nThis is useful for writing generic code (such as a buffered writer)\nthat can perform certain optimizations when the underlying writer\ndoesn't rely on synchronous APIs. For example, ANSI escape sequences\ncan be passed through to the end user's device as is.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11209:219":{"id":"2:11209:219","crate_id":2,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:11211:184","2:11212:4345","2:11213:7401","2:11214:27266","2:11215:27267","2:11216:761","2:11217:762"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:11200:10989","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"a:2:9532:7459-0:4693:7387":{"id":"a:2:9532:7459-0:4693:7387","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:9532:7459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4693:7387","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:23078:21819":{"id":"2:23078:21819","crate_id":2,"name":"reduce_min","span":null,"visibility":"default","docs":"Returns the minimum lane in the vector.\n\nReturns values based on equality, so a vector containing both `0.` and `-0.` may\nreturn either.\n\nThis function will not return `NaN` unless all lanes are `NaN`.\n\n# Examples\n\n```\n# #![feature(portable_simd)]\n# #[cfg(feature = \"as_crate\")] use core_simd::simd;\n# #[cfg(not(feature = \"as_crate\"))] use core::simd;\n# use simd::{f32x2, SimdFloat};\nlet v = f32x2::from_array([3., 7.]);\nassert_eq!(v.reduce_min(), 3.);\n\n// NaN values are skipped...\nlet v = f32x2::from_array([1., f32::NAN]);\nassert_eq!(v.reduce_min(), 1.);\n\n// ...unless all values are NaN\nlet v = f32x2::from_array([f32::NAN, f32::NAN]);\nassert!(v.reduce_min().is_nan());\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Scalar","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdFloat","id":"2:23053:11401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:2958:4377":{"id":"2:2958:4377","crate_id":2,"name":"max","span":null,"visibility":"default","docs":"Compares and returns the maximum of two values.\n\nReturns the second argument if the comparison determines them to be equal.\n\n# Examples\n\n```\nassert_eq!(2, 1.max(2));\nassert_eq!(2, 2.max(2));\n```","links":{},"attrs":["#[stable(feature = \"ord_max_min\", since = \"1.21.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"23:48:28445":{"id":"23:48:28445","crate_id":23,"name":"get_full_mut2","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.1/src/mutable_keys.rs","begin":[24,4],"end":[29,40]},"visibility":"default","docs":"Return item index, mutable reference to key and value","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["key",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Q"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Key","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"MutableKeys","id":"23:45:10421","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Value","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"MutableKeys","id":"23:45:10421","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"2:10800:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Equivalent","id":"23:22:9122","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Key","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"MutableKeys","id":"23:45:10421","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:5069:21436":{"id":"1:5069:21436","crate_id":1,"name":"to_socket_addrs","span":null,"visibility":"default","docs":"Converts this object to an iterator of resolved [`SocketAddr`]s.\n\nThe returned iterator might not actually yield any values depending on the\noutcome of any resolution performed.\n\nNote that this function may block the current thread while resolution is\nperformed.","links":{"`SocketAddr`":"1:11134:11018"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Iter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"ToSocketAddrs","id":"1:5067:11016","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"1:3803:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:2273":{"id":"0:2273","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1564,0],"end":[1568,1]},"visibility":{"restricted":{"parent":"0:2092:7461","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["advance_back_by","try_rfold","rfind","nth_back","rfold"],"trait":{"name":"DoubleEndedIterator","id":"2:8716:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValuesRef","id":"0:4755:7386","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:2276:7848"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2868-0:4778:1685":{"id":"b:2:2868-0:4778:1685","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2862:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:4778:1685","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2870:27181"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:360:3312":{"id":"0:360:3312","crate_id":0,"name":"value_names","span":{"filename":"src/builder/arg.rs","begin":[1501,4],"end":[1504,5]},"visibility":"public","docs":"Placeholders for the argument's values in the help message / usage.\n\nThese names are cosmetic only, used for help and usage strings only. The names are **not**\nused to access arguments. The values of the arguments are accessed in numeric order (i.e.\nif you specify two names `one` and `two` `one` will be the first matched value, `two` will\nbe the second).\n\nThis setting can be very helpful when describing the type of input the user should be\nusing, such as `FILE`, `INTERFACE`, etc. Although not required, it's somewhat convention to\nuse all capital letters for the value name.\n\n**Pro Tip:** It may help to use [`Arg::next_line_help(true)`] if there are long, or\nmultiple value names in order to not throw off the help text alignment of all options.\n\n**NOTE:** implicitly sets [`Arg::takes_value(true)`] and [`Arg::multiple_values(true)`].\n\n# Examples\n\n```rust\n# use clap::{Command, Arg};\nArg::new(\"speed\")\n    .short('s')\n    .value_names(&[\"fast\", \"slow\"]);\n```\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"io\")\n        .long(\"io-files\")\n        .value_names(&[\"INFILE\", \"OUTFILE\"]))\n    .get_matches_from(vec![\n        \"prog\", \"--help\"\n    ]);\n```\n\nRunning the above program produces the following output\n\n```text\nvalnames\n\nUSAGE:\n   valnames [OPTIONS]\n\nOPTIONS:\n    -h, --help                       Print help information\n    --io-files <INFILE> <OUTFILE>    Some help text\n    -V, --version                    Print version information\n```\n[`Arg::next_line_help(true)`]: Arg::next_line_help()\n[`Arg::number_of_values`]: Arg::number_of_values()\n[`Arg::takes_value(true)`]: Arg::takes_value()\n[`Arg::multiple_values(true)`]: Arg::multiple_values()","links":{"Arg::next_line_help()":"0:413:3781","Arg::multiple_values()":"0:355:3240","Arg::takes_value()":"0:351:1949"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["names",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8873:159":{"id":"2:8873:159","crate_id":2,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8874:2117","2:8875:932","2:8876:9951","2:8879:4836","2:8880:502","2:8882:3029","2:8885:8062","2:8886:9952","2:8887:9953","2:8888:5915","2:8890:9044","2:8892:9954","2:8893:9955","2:8895:851","2:8898:9956","2:8905:5854","2:8907:4166","2:8910:6137","2:8911:4370","2:8912:9957","2:8914:6299","2:8916:9958","2:8919:1326","2:8920:6115","2:8921:9959","2:8925:5917","2:8928:7851","2:8929:9960","2:8930:9961","2:8932:9962","2:8933:3584","2:8935:9963","2:8938:9964","2:8940:9965","2:8950:9966","2:8965:9967","2:8967:9968","2:8971:8170","2:8980:8024","2:8983:9969","2:8985:9970","2:8988:283","2:8995:301","2:9002:2237","2:9009:7059","2:9018:9971","2:9028:1025","2:9035:9972","2:9042:4377","2:9043:8292","2:9044:8815","2:9056:8814","2:9063:8244","2:9075:8813","2:9082:6960","2:9083:9973","2:9088:4072","2:9091:2240","2:9094:9974","2:9095:9975","2:9097:7897","2:9099:9976","2:9101:422","2:9104:9977","2:9107:1008","2:9110:9978","2:9113:611","2:9116:9979","2:9119:917","2:9121:836","2:9123:801","2:9125:720","2:9127:703","2:9129:9980","2:9130:9981","2:9138:9982"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1346":{"id":"0:1346","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[526,0],"end":[536,1]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1294:2265","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1347:415"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:154:1913":{"id":"0:154:1913","crate_id":0,"name":"command","span":{"filename":"src/derive.rs","begin":[254,4],"end":[257,5]},"visibility":"default","docs":"Build a [`Command`] that can instantiate `Self`.\n\nSee [`FromArgMatches::from_arg_matches_mut`] for instantiating `Self`.","links":{"`FromArgMatches::from_arg_matches_mut`":"0:164:2106","`Command`":"0:755:1660"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Command","id":"0:755:1660","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23152:21827":{"id":"2:23152:21827","crate_id":2,"name":"reduce_xor","span":null,"visibility":"default","docs":"Returns the cumulative bitwise \"xor\" across the lanes of the vector.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Scalar","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdUint","id":"2:23142:11395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:8675:777":{"id":"2:8675:777","crate_id":2,"name":"into_iter","span":null,"visibility":"default","docs":"Creates an iterator from a value.\n\nSee the [module-level documentation] for more.\n\n[module-level documentation]: crate::iter\n\n# Examples\n\nBasic usage:\n\n```\nlet v = [1, 2, 3];\nlet mut iter = v.into_iter();\n\nassert_eq!(Some(1), iter.next());\nassert_eq!(Some(2), iter.next());\nassert_eq!(Some(3), iter.next());\nassert_eq!(None, iter.next());\n```","links":{"crate::iter":"2:5752:788"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"IntoIterator","id":"2:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1582":{"id":"0:1582","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1969,0],"end":[1976,1]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ValueParserFactory","id":"0:1558:2266","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"i16"},"items":["0:1583:1671","0:1584:2257"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3832:184":{"id":"2:3832:184","crate_id":2,"name":"Output","span":null,"visibility":"default","docs":"The type of the value produced by `?` when *not* short-circuiting.","links":{},"attrs":["#[unstable(feature = \"try_trait_v2\", issue = \"84277\")]"],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"0:3432:2545":{"id":"0:3432:2545","crate_id":0,"name":"DontCollapseArgsInUsage","span":{"filename":"src/builder/app_settings.rs","begin":[484,4],"end":[484,27]},"visibility":"default","docs":"Deprecated, replaced with [`Command::dont_collapse_args_in_usage`] and\n[`Command::is_dont_collapse_args_in_usage_set`]\n\nDerive: replace `#[clap(setting = DontCollapseArgsInUsage)]` with `#[clap(dont_collapse_args_in_usage = true)]`\n\nBuilder: replace `cmd.setting(DontCollapseArgsInUsage)` with `cmd.dont_collapse_args_in_usage(true)`","links":{"`Command::dont_collapse_args_in_usage`":"0:830:5146","`Command::is_dont_collapse_args_in_usage_set`":"0:1003:5941"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"0:4240:360":{"id":"0:4240:360","crate_id":0,"name":"bitor","span":{"filename":"src/builder/arg_settings.rs","begin":[530,0],"end":[558,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"2:3503:2032","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2337:932":{"id":"0:2337:932","crate_id":0,"name":"next","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1750,4],"end":[1752,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"1:2654:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3989:3500":{"id":"0:3989:3500","crate_id":0,"name":"RequireDelimiter","span":{"filename":"src/builder/arg_settings.rs","begin":[230,4],"end":[230,20]},"visibility":"default","docs":"Deprecated, replaced with [`Arg::require_value_delimiter`] and\n[`Arg::is_require_value_delimiter_set`]\n\nDerive: replace `#[clap(setting = RequireDelimiter)]` with `#[clap(require_value_delimiter = true)]`\n\nBuilder: replace `arg.setting(RequireDelimiter)` with `arg.require_value_delimiter(true)`","links":{"`Arg::require_value_delimiter`":"0:390:3499","`Arg::is_require_value_delimiter_set`":"0:515:4261"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"0:4597:7110":{"id":"0:4597:7110","crate_id":0,"name":"UnknownArgument","span":{"filename":"src/error/kind.rs","begin":[33,4],"end":[33,19]},"visibility":"default","docs":"Occurs when a user provides a flag, option, argument or subcommand which isn't defined.\n\n# Examples\n\n```rust\n# use clap::{Command, arg, ErrorKind};\nlet result = Command::new(\"prog\")\n    .arg(arg!(--flag \"some flag\"))\n    .try_get_matches_from(vec![\"prog\", \"--other\"]);\nassert!(result.is_err());\nassert_eq!(result.unwrap_err().kind(), ErrorKind::UnknownArgument);\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"2:3255:59":{"id":"2:3255:59","crate_id":2,"name":"default","span":null,"visibility":"default","docs":"Returns the \"default value\" for a type.\n\nDefault values are often some kind of initial value, identity value, or anything else that\nmay make sense as a default.\n\n# Examples\n\nUsing built-in default values:\n\n```\nlet i: i8 = Default::default();\nlet (x, y): (Option<String>, f64) = Default::default();\nlet (a, b, (c, d)): (i32, u32, (bool, bool)) = Default::default();\n```\n\nMaking your own:\n\n```\n# #[allow(dead_code)]\nenum Kind {\n    A,\n    B,\n    C,\n}\n\nimpl Default for Kind {\n    fn default() -> Self { Kind::A }\n}\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1522":{"id":"0:1522","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1695,0],"end":[1708,1]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"BoolishValueParser","id":"0:4463:2271","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1523:930"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1428":{"id":"0:1428","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1028,0],"end":[1033,1]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"PossibleValuesParser","id":"0:4420:2260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1429:930"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3218-0:4768:7385":{"id":"b:2:3218-0:4768:7385","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawValues","id":"0:4768:7385","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3221:128","2:3222:1435"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:192":{"id":"0:192","crate_id":0,"name":null,"span":{"filename":"src/derive.rs","begin":[529,0],"end":[536,1]},"visibility":{"restricted":{"parent":"0:110:554","path":"::derive"}},"docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"CommandFactory","id":"0:153:1669","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["command_for_update","command"],"trait":{"name":"CommandFactory","id":"0:153:1669","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:2245","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:194:2151","0:196:2156"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11214:27266":{"id":"2:11214:27266","crate_id":2,"name":"get_unchecked","span":null,"visibility":"default","docs":"Returns a shared reference to the output at this location, without\nperforming any bounds checking.\nCalling this method with an out-of-bounds index or a dangling `slice` pointer\nis *[undefined behavior]* even if the resulting reference is not used.\n\n[undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html","links":{},"attrs":["#[unstable(feature = \"slice_index_methods\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["slice",{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"generic","inner":"T"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SliceIndex","id":"2:11209:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"0:566":{"id":"0:566","crate_id":0,"name":null,"span":{"filename":"src/builder/arg.rs","begin":[5210,0],"end":[5214,1]},"visibility":{"restricted":{"parent":"0:242:1932","path":"::builder::arg"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["min","max","clamp"],"trait":{"name":"Ord","id":"2:2956:180","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3818:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":["0:568:422"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:903:5602":{"id":"0:903:5602","crate_id":0,"name":"visible_long_flag_aliases","span":{"filename":"src/builder/command.rs","begin":[2683,4],"end":[2688,5]},"visibility":"public","docs":"Add aliases, which function as *visible* long flag subcommands.\n\nSee [`Command::long_flag_aliases`].\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg, };\nlet m = Command::new(\"myprog\")\n            .subcommand(Command::new(\"test\").long_flag(\"test\")\n                .visible_long_flag_aliases(&[\"testing\", \"testall\", \"test_all\"]))\n            .get_matches_from(vec![\"myprog\", \"--testing\"]);\nassert_eq!(m.subcommand_name(), Some(\"test\"));\n```\n[`App::long_flag_aliases`]: Command::long_flag_aliases()","links":{"`Command::long_flag_aliases`":"0:895:4791"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["names",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:793:2112":{"id":"0:793:2112","crate_id":0,"name":"try_get_matches","span":{"filename":"src/builder/command.rs","begin":[568,4],"end":[571,5]},"visibility":"public","docs":"Parse [`env::args_os`], returning a [`clap::Result`] on failure.\n\n**NOTE:** This method WILL NOT exit when `--help` or `--version` (or short versions) are\nused. It will return a [`clap::Error`], where the [`kind`] is a\n[`ErrorKind::DisplayHelp`] or [`ErrorKind::DisplayVersion`] respectively. You must call\n[`Error::exit`] or perform a [`std::process::exit`].\n\n# Panics\n\nIf contradictory arguments or settings exist.\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg};\nlet matches = Command::new(\"myprog\")\n    // Args and options go here...\n    .try_get_matches()\n    .unwrap_or_else(|e| e.exit());\n```\n[`env::args_os`]: std::env::args_os()\n[`Error::exit`]: crate::Error::exit()\n[`std::process::exit`]: std::process::exit()\n[`clap::Result`]: Result\n[`clap::Error`]: crate::Error\n[`kind`]: crate::Error\n[`ErrorKind::DisplayHelp`]: crate::ErrorKind::DisplayHelp\n[`ErrorKind::DisplayVersion`]: crate::ErrorKind::DisplayVersion","links":{"crate::ErrorKind::DisplayHelp":"0:4627:7029","std::env::args_os()":"1:2425:4939","crate::Error":"0:4647:128","crate::ErrorKind::DisplayVersion":"0:4631:7030","std::process::exit()":"1:7592:2109","crate::Error::exit()":"0:1882:2109","Result":"2:47934:208"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"ClapResult","id":"0:1869:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4713:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9532:7459-0:4404:2276":{"id":"a:2:9532:7459-0:4404:2276","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:9532:7459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PathBufValueParser","id":"0:4404:2276","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4588":{"id":"0:4588","crate_id":0,"name":null,"span":{"filename":"src/error/context.rs","begin":[42,23],"end":[42,32]},"visibility":{"restricted":{"parent":"0:1854:488","path":"::error::context"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:3378:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextValue","id":"0:4569:7000","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3203-0:4420:2260":{"id":"b:2:3203-0:4420:2260","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValuesParser","id":"0:4420:2260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3206:2391"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:858:4784":{"id":"0:858:4784","crate_id":0,"name":"long_version","span":{"filename":"src/builder/command.rs","begin":[1652,4],"end":[1655,5]},"visibility":"public","docs":"Sets the version for the long version (`--version`) and help messages.\n\nIf [`Command::version`] is not specified, this message will be displayed for `-V`.\n\n**Pro-tip:** Use `clap`s convenience macro [`crate_version!`] to\nautomatically set your application's version to the same thing as your\ncrate at compile time.\n\n# Examples\n\n```no_run\n# use clap::Command;\nCommand::new(\"myprog\")\n    .long_version(\n\"v0.1.24\n commit: abcdef89726d\n revision: 123\n release: 2\n binary: myprog\")\n# ;\n```\n[`crate_version!`]: ./macro.crate_version!.html","links":{"`Command::version`":"0:856:1526"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["ver",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:4903:10142":{"id":"2:4903:10142","crate_id":2,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4904:2117","2:4905:27338","2:4906:4836"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:2277":{"id":"0:2277","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1570,0],"end":[1570,57]},"visibility":{"restricted":{"parent":"0:2092:7461","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"2:8741:7849","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValuesRef","id":"0:4755:7386","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4556:7214":{"id":"0:4556:7214","crate_id":0,"name":"Custom","span":{"filename":"src/error/context.rs","begin":[38,4],"end":[38,10]},"visibility":"default","docs":"An opaque message to the user","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"0:38":{"id":"0:38","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[109,70],"end":[109,80]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::derive::Subcommand","name":"Subcommand","id":"0:170:1672","glob":false}},"0:3991:2589":{"id":"0:3991:2589","crate_id":0,"name":"HidePossibleValues","span":{"filename":"src/builder/arg_settings.rs","begin":[249,4],"end":[249,22]},"visibility":"default","docs":"Deprecated, replaced with [`Arg::hide_possible_values`] and\n[`Arg::is_hide_possible_values_set`]\n\nDerive: replace `#[clap(setting = HidePossibleValues)]` with `#[clap(hide_possible_values = true)]`\n\nBuilder: replace `arg.setting(HidePossibleValues)` with `arg.hide_possible_values(true)`","links":{"`Arg::hide_possible_values`":"0:415:3796","`Arg::is_hide_possible_values_set`":"0:511:4249"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"2:3216:128":{"id":"2:3216:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"a:2:9533:7458-0:4828:1684":{"id":"a:2:9533:7458-0:4828:1684","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:9533:7458","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4828:1684","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:5511:28818":{"id":"1:5511:28818","crate_id":1,"name":"from_mode","span":null,"visibility":"default","docs":"Creates a new instance of `Permissions` from the given set of Unix\npermission bits.\n\n# Examples\n\n```\nuse std::fs::Permissions;\nuse std::os::unix::fs::PermissionsExt;\n\n// Read/write for owner and read for others.\nlet permissions = Permissions::from_mode(0o644);\nassert_eq!(permissions.mode(), 0o644);\n```","links":{},"attrs":["#[stable(feature = \"fs_ext\", since = \"1.1.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["mode",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:965:5885":{"id":"0:965:5885","crate_id":0,"name":"get_before_help","span":{"filename":"src/builder/command.rs","begin":[3510,4],"end":[3512,5]},"visibility":"public","docs":"Returns the help heading for listing subcommands.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:493:4209":{"id":"0:493:4209","crate_id":0,"name":"get_default_values","span":{"filename":"src/builder/arg.rs","begin":[4620,4],"end":[4622,5]},"visibility":"public","docs":"Get the default values specified for this argument, if any\n\n# Examples\n\n```rust\n# use clap::Arg;\nlet arg = Arg::new(\"foo\").default_value(\"default value\");\nassert_eq!(&[\"default value\"], arg.get_default_values());\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"1:2654:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:871:5055":{"id":"0:871:5055","crate_id":0,"name":"unset_global_setting","span":{"filename":"src/builder/command.rs","begin":[1886,4],"end":[1890,5]},"visibility":"public","docs":"Remove a setting and stop propagating down to subcommands.\n\nSee [`AppSettings`] for a full list of possibilities and examples.\n\n# Examples\n\n```no_run\n# use clap::{Command, AppSettings};\nCommand::new(\"myprog\")\n    .unset_global_setting(AppSettings::AllowNegativeNumbers)\n# ;\n```\n[global]: Command::global_setting()","links":{"`AppSettings`":"0:3389:1676"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["setting",{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:3389:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:172:2215":{"id":"0:172:2215","crate_id":0,"name":"augment_subcommands_for_update","span":{"filename":"src/derive.rs","begin":[445,4],"end":[445,71]},"visibility":"default","docs":"Append to [`Command`] so it can update `self`.\n\nThis is used to implement `#[clap(flatten)]`\n\nSee also [`CommandFactory`].","links":{"`Command`":"0:755:1660","`CommandFactory`":"0:153:1669"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["cmd",{"kind":"resolved_path","inner":{"name":"Command","id":"0:755:1660","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Command","id":"0:755:1660","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:2:4104-0:4410:2272":{"id":"b:2:4104-0:4410:2272","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:4102:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EnumValueParser","id":"0:4410:2272","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"items":["2:4106:1449"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3516:1249":{"id":"2:3516:1249","crate_id":2,"name":"shl","span":null,"visibility":"default","docs":"Performs the `<<` operation.\n\n# Examples\n\n```\nassert_eq!(5u8 << 1, 10);\nassert_eq!(1u8 << 1, 2);\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"generic","inner":"Rhs"}]],"output":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Shl","id":"2:3513:8789","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:4566":{"id":"0:4566","crate_id":0,"name":null,"span":{"filename":"src/error/context.rs","begin":[2,40],"end":[2,42]},"visibility":{"restricted":{"parent":"0:1854:488","path":"::error::context"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:3379:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:4523:6999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:464":{"id":"0:464","crate_id":0,"name":null,"span":{"filename":"src/builder/arg.rs","begin":[4378,0],"end":[4796,1]},"visibility":{"restricted":{"parent":"0:242:1932","path":"::builder::arg"}},"docs":"# Reflection","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3818:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":["0:466:1940","0:467:4153","0:468:4155","0:469:4159","0:470:4161","0:471:1951","0:472:4165","0:474:4168","0:476:4170","0:477:1943","0:478:4174","0:480:4176","0:482:4178","0:483:4182","0:486:1935","0:487:4189","0:488:4191","0:489:4193","0:490:4195","0:492:4199","0:493:4209","0:494:4215","0:495:4217","0:496:4219","0:497:1938","0:498:4184","0:499:4224","0:500:4227","0:501:4229","0:502:4231","0:504:4186","0:507:4200","0:508:4243","0:509:4245","0:510:4247","0:511:4249","0:512:4255","0:513:4257","0:514:4259","0:515:4261","0:516:4263","0:517:4265","0:518:4267","0:519:4269"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1370":{"id":"0:1370","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[686,0],"end":[713,1]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Fn","id":"2:3621:131","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:2245","args":{"angle_bracketed":{"args":[{"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"std::error::Error","id":"2:3278:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"2:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"2:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["map","parse","possible_values"],"trait":{"name":"TypedValueParser","id":"0:1362:2264","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"generic","inner":"F"},"items":["0:1374:6597","0:1375:6637"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4574:1564":{"id":"0:4574:1564","crate_id":0,"name":"0","span":{"filename":"src/error/context.rs","begin":[48,9],"end":[48,13]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"primitive","inner":"bool"}},"b:2:8676-0:4768:7385":{"id":"b:2:8676-0:4768:7385","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawValues","id":"0:4768:7385","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:8678:2117","2:8679:7847","2:8680:777"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"0:559:688":{"id":"0:559:688","crate_id":0,"name":"from","span":{"filename":"src/builder/arg.rs","begin":[5193,4],"end":[5195,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["a",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3818:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:466:1940":{"id":"0:466:1940","crate_id":0,"name":"get_id","span":{"filename":"src/builder/arg.rs","begin":[4381,4],"end":[4383,5]},"visibility":"public","docs":"Get the name of the argument","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10814:10564":{"id":"2:10814:10564","crate_id":2,"name":"write_u16","span":null,"visibility":"default","docs":"Writes a single `u16` into this hasher.","links":{},"attrs":["#[stable(feature = \"hasher_write\", since = \"1.3.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"primitive","inner":"u16"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1863":{"id":"0:1863","crate_id":0,"name":null,"span":{"filename":"src/error/mod.rs","begin":[26,0],"end":[26,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"context::ContextValue","name":"ContextValue","id":"0:4569:7000","glob":false}},"0:1544":{"id":"0:1544","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1818,0],"end":[1822,1]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:3254:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"NonEmptyStringValueParser","id":"0:4469:2274","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1545:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:631":{"id":"0:631","crate_id":0,"name":null,"span":{"filename":"src/builder/arg_group.rs","begin":[629,0],"end":[641,1]},"visibility":{"restricted":{"parent":"0:597:2251","path":"::builder::arg_group"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3904:1662","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"items":["0:632:415"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:9533:7458-0:5070:1667":{"id":"a:2:9533:7458-0:5070:1667","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:9533:7458","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:5070:1667","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1573":{"id":"0:1573","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1945,0],"end":[1952,1]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ValueParserFactory","id":"0:1558:2266","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"u8"},"items":["0:1574:1671","0:1575:2257"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:5534:28828":{"id":"1:5534:28828","crate_id":1,"name":"mtime_nsec","span":null,"visibility":"default","docs":"Returns the last modification time of the file, in nanoseconds since [`mtime`].\n\n[`mtime`]: MetadataExt::mtime\n\n# Examples\n\n```no_run\nuse std::fs;\nuse std::os::unix::fs::MetadataExt;\nuse std::io;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    let nano_last_modification_time = meta.mtime_nsec();\n    Ok(())\n}\n```","links":{"MetadataExt::mtime":"1:5533:28827"},"attrs":["#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"25:107:28460":{"id":"25:107:28460","crate_id":25,"name":"penalty_width","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.15.1/src/core.rs","begin":[207,4],"end":[207,35]},"visibility":"default","docs":"Displayed width of the penalty that must be inserted if the\nword falls at the end of a line.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:926:5837":{"id":"0:926:5837","crate_id":0,"name":"get_long_version","span":{"filename":"src/builder/command.rs","begin":[3334,4],"end":[3336,5]},"visibility":"public","docs":"Get the long version of the cmd.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:32168:1467":{"id":"2:32168:1467","crate_id":2,"name":"unchecked_sub","span":null,"visibility":"public","docs":"Unchecked integer subtraction. Computes `self - rhs`, assuming overflow\ncannot occur.\n\n# Safety\n\nThis results in undefined behavior when\n`self - rhs > u64::MAX` or `self - rhs < u64::MIN`,\ni.e. when [`checked_sub`] would return `None`.\n\n[`checked_sub`]: u64::checked_sub","links":{"u64::checked_sub":"2:32167:69436"},"attrs":["#[unstable(feature = \"unchecked_math\", reason = \"niche optimization path\",\nissue = \"85122\",)]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]","#[rustc_const_unstable(feature = \"const_inherent_unchecked_arith\", issue =\n\"85122\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:1729":{"id":"0:1729","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[35,0],"end":[35,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"value_parser::PossibleValuesParser","name":"PossibleValuesParser","id":"0:4420:2260","glob":false}},"0:2312":{"id":"0:2312","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1685,0],"end":[1693,1]},"visibility":{"restricted":{"parent":"0:2092:7461","path":"::parser::matches::arg_matches"}},"docs":"Creates an empty iterator.","links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:3254:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:4778:1685","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:2314:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3993:2433":{"id":"0:3993:2433","crate_id":0,"name":"AllowHyphenValues","span":{"filename":"src/builder/arg_settings.rs","begin":[268,4],"end":[268,21]},"visibility":"default","docs":"Deprecated, replaced with [`Arg::allow_hyphen_values`] and\n[`Arg::is_allow_hyphen_values_set`]\n\nDerive: replace `#[clap(setting = AllowHyphenValues)]` with `#[clap(allow_hyphen_values = true)]`\n\nBuilder: replace `arg.setting(AllowHyphenValues)` with `arg.allow_hyphen_values(true)`","links":{"`Arg::allow_hyphen_values`":"0:383:3410","`Arg::is_allow_hyphen_values_set`":"0:499:4224"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"b:2:3218-0:4828:1684":{"id":"b:2:3218-0:4828:1684","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4828:1684","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3221:128","2:3222:1435"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:2204:7462":{"id":"0:2204:7462","crate_id":0,"name":"value_source","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[709,4],"end":[715,5]},"visibility":"public","docs":"Report where argument value came from\n\n# Panics\n\nIf `id` is is not a valid argument or group id.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ValueSource};\nlet m = Command::new(\"myprog\")\n    .arg(Arg::new(\"debug\")\n        .short('d'))\n    .get_matches_from(vec![\n        \"myprog\", \"-d\"\n    ]);\n\nassert_eq!(m.value_source(\"debug\"), Some(ValueSource::CommandLine));\n```\n\n[`default_value`]: crate::Arg::default_value()","links":{},"attrs":["#[track_caller]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4828:1684","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Key","id":"0:3239:2795","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1937:667":{"id":"0:1937:667","crate_id":0,"name":"fmt","span":{"filename":"src/error/mod.rs","begin":[1008,4],"end":[1017,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Formatter","id":"2:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:10511:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3480:903":{"id":"2:3480:903","crate_id":2,"name":"mul_assign","span":null,"visibility":"default","docs":"Performs the `*=` operation.\n\n# Example\n\n```\nlet mut x: u32 = 12;\nx *= 2;\nassert_eq!(x, 24);\n```","links":{},"attrs":["#[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["rhs",{"kind":"generic","inner":"Rhs"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:312":{"id":"0:312","crate_id":0,"name":null,"span":{"filename":"src/builder/arg.rs","begin":[104,0],"end":[912,1]},"visibility":{"restricted":{"parent":"0:242:1932","path":"::builder::arg"}},"docs":"# Basic API","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3818:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":["0:314:930","0:316:1941","0:318:909","0:320:1942","0:321:1933","0:323:278","0:325:2912","0:326:2827","0:328:2828","0:329:2940","0:331:2945","0:332:2952","0:334:2957","0:335:761","0:336:3029","0:337:1948","0:338:2822","0:340:3077","0:341:3097","0:342:1954","0:343:3106","0:344:2030","0:345:2010","0:347:3032"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:32192:69455":{"id":"2:32192:69455","crate_id":2,"name":"saturating_pow","span":null,"visibility":"public","docs":"Saturating integer exponentiation. Computes `self.pow(exp)`,\nsaturating at the numeric bounds instead of overflowing.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(4u64.saturating_pow(3), 64);\nassert_eq!(u64::MAX.saturating_pow(2), u64::MAX);\n```","links":{},"attrs":["#[stable(feature = \"no_panic_pow\", since = \"1.34.0\")]","#[rustc_const_stable(feature = \"const_int_pow\", since = \"1.50.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["exp",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2234:7576":{"id":"0:2234:7576","crate_id":0,"name":"try_get_raw","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1263,4],"end":[1276,5]},"visibility":"public","docs":"Non-panicking version of [`ArgMatches::get_raw`]","links":{"`ArgMatches::get_raw`":"0:2167:7575"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"RawValues","id":"0:4768:7385","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4693:7387","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4631:7030":{"id":"0:4631:7030","crate_id":0,"name":"DisplayVersion","span":{"filename":"src/error/kind.rs","begin":[375,4],"end":[375,18]},"visibility":"default","docs":"Not a true \"error\" as it means `--version` or similar was used.\nThe message will be sent to `stdout`.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet result = Command::new(\"prog\")\n    .version(\"3.0\")\n    .try_get_matches_from(vec![\"prog\", \"--version\"]);\nassert!(result.is_err());\nassert_eq!(result.unwrap_err().kind(), ErrorKind::DisplayVersion);\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"b:2:3207-0:4768:7385":{"id":"b:2:3207-0:4768:7385","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawValues","id":"0:4768:7385","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3209:688"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:10":{"id":"0:10","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[100,25],"end":[100,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::builder::Arg","name":"Arg","id":"0:3818:1661","glob":false}},"0:1866":{"id":"0:1866","crate_id":0,"name":null,"span":{"filename":"src/error/mod.rs","begin":[27,0],"end":[27,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"kind::ErrorKind","name":"ErrorKind","id":"0:4594:1681","glob":false}},"0:4719":{"id":"0:4719","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[67,9],"end":[67,14]},"visibility":{"restricted":{"parent":"0:2092:7461","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4713:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4720:667"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:2354":{"id":"0:2354","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1817,0],"end":[1821,1]},"visibility":{"restricted":{"parent":"0:2092:7461","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["advance_back_by","try_rfold","rfind","nth_back","rfold"],"trait":{"name":"DoubleEndedIterator","id":"2:8716:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:4806:1682","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:2356:7848"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:345:2010":{"id":"0:345:2010","crate_id":0,"name":"setting","span":{"filename":"src/builder/arg.rs","begin":[875,4],"end":[881,5]},"visibility":"public","docs":"Apply a setting to the argument.\n\nSee [`ArgSettings`] for a full list of possibilities and examples.\n\n# Examples\n\n```no_run\n# use clap::{Arg, ArgSettings};\nArg::new(\"config\")\n    .setting(ArgSettings::Required)\n    .setting(ArgSettings::TakesValue)\n# ;\n```\n\n```no_run\n# use clap::{Arg, ArgSettings};\nArg::new(\"config\")\n    .setting(ArgSettings::Required | ArgSettings::TakesValue)\n# ;\n```","links":{"`ArgSettings`":"0:3968:1678"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["setting",{"kind":"generic","inner":"F"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ArgFlags","id":"0:3954:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:571":{"id":"0:571","crate_id":0,"name":null,"span":{"filename":"src/builder/arg.rs","begin":[5218,0],"end":[5253,1]},"visibility":{"restricted":{"parent":"0:242:1932","path":"::builder::arg"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10569:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3818:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":["0:573:667"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13711:802":{"id":"2:13711:802","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:15876:8642"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2868-0:3904:1662":{"id":"b:2:2868-0:3904:1662","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2862:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3904:1662","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":["2:2870:27181"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:9127:703":{"id":"2:9127:703","crate_id":2,"name":"ge","span":null,"visibility":"default","docs":"Determines if the elements of this [`Iterator`] are [lexicographically](Ord#lexicographical-comparison)\ngreater than or equal to those of another.\n\n# Examples\n\n```\nassert_eq!([1].iter().ge([1].iter()), true);\nassert_eq!([1].iter().ge([1, 2].iter()), false);\nassert_eq!([1, 2].iter().ge([1].iter()), true);\nassert_eq!([1, 2].iter().ge([1, 2].iter()), true);\n```","links":{"`Iterator`":"2:8873:159","Ord#lexicographical-comparison":"2:2956:180"},"attrs":["#[stable(feature = \"iter_order\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"I"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"PartialOrd","id":"2:2969:187","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"IntoIterator","id":"2:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4828:1684":{"id":"0:4828:1684","crate_id":0,"name":"ValueSource","span":{"filename":"src/parser/matches/value_source.rs","begin":[4,0],"end":[11,1]},"visibility":"public","docs":"Origin of the argument's value","links":{},"attrs":["#[non_exhaustive]"],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:4829:7900","0:4831:7921","0:4833:7421"],"impls":["a:2:9533:7458-0:4828:1684","a:2:9532:7459-0:4828:1684","a:2:3382:225-0:4828:1684","a:2:3370:216-0:4828:1684","a:2:3411:6205-0:4828:1684","b:2:4104-0:4828:1684","b:2:2865-0:4828:1684","b:2:3203-0:4828:1684","b:2:3207-0:4828:1684","b:2:3218-0:4828:1684","b:2:2868-0:4828:1684","b:2:3213-0:4828:1684","b:5:848-0:4828:1684","b:23:25-0:4828:1684","0:4835","0:4837","0:4839","0:4840","0:4841","0:4843","0:4844","0:4846","0:4848"]}},"1:4421:9962":{"id":"1:4421:9962","crate_id":1,"name":"by_ref","span":null,"visibility":"default","docs":"Creates a \"by reference\" adaptor for this instance of `Read`.\n\nThe returned adapter also implements `Read` and will simply borrow this\ncurrent reader.\n\n# Examples\n\n[`File`]s implement `Read`:\n\n[`File`]: crate::fs::File\n\n```no_run\nuse std::io;\nuse std::io::Read;\nuse std::fs::File;\n\nfn main() -> io::Result<()> {\n    let mut f = File::open(\"foo.txt\")?;\n    let mut buffer = Vec::new();\n    let mut other_buffer = Vec::new();\n\n    {\n        let reference = f.by_ref();\n\n        // read at most 5 bytes\n        reference.take(5).read_to_end(&mut buffer)?;\n\n    } // drop our &mut reference so we can use f again\n\n    // original file still usable, read the rest\n    f.read_to_end(&mut other_buffer)?;\n    Ok(())\n}\n```","links":{"crate::fs::File":"1:2909:129"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2876:611":{"id":"0:2876:611","crate_id":0,"name":"eq","span":{"filename":"src/mkeymap.rs","begin":[75,4],"end":[80,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["rhs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"char"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:32206:69464":{"id":"2:32206:69464","crate_id":2,"name":"carrying_add","span":null,"visibility":"public","docs":"Calculates `self + rhs + carry` without the ability to overflow.\n\nPerforms \"ternary addition\" which takes in an extra bit to add, and may return an\nadditional bit of overflow. This allows for chaining together multiple additions\nto create \"big integers\" which represent larger values.\n\nThis can be thought of as a 64-bit \"full adder\", in the electronics sense.\n\n# Examples\n\nBasic usage\n\n```\n#![feature(bigint_helper_methods)]\nassert_eq!(5u64.carrying_add(2, false), (7, false));\nassert_eq!(5u64.carrying_add(2, true), (8, false));\nassert_eq!(u64::MAX.carrying_add(1, false), (0, true));\nassert_eq!(u64::MAX.carrying_add(0, true), (0, true));\nassert_eq!(u64::MAX.carrying_add(1, true), (1, true));\nassert_eq!(u64::MAX.carrying_add(u64::MAX, true), (u64::MAX, true));\n```\n\nIf `carry` is false, this method is equivalent to [`overflowing_add`](Self::overflowing_add):\n\n```\n#![feature(bigint_helper_methods)]\nassert_eq!(5_u64.carrying_add(2, false), 5_u64.overflowing_add(2));\nassert_eq!(u64::MAX.carrying_add(1, false), u64::MAX.overflowing_add(1));\n```","links":{"Self::overflowing_add":"2:32205:69463"},"attrs":["#[unstable(feature = \"bigint_helper_methods\", issue = \"85532\")]","#[rustc_const_unstable(feature = \"const_bigint_helper_methods\", issue =\n\"85532\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}],["carry",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"u64"},{"kind":"primitive","inner":"bool"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1568:1671":{"id":"0:1568:1671","crate_id":0,"name":"Parser","span":{"filename":"src/builder/value_parser.rs","begin":[1934,4],"end":[1934,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1294:2265","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"5:6175:68478":{"id":"5:6175:68478","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8479:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8479:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13346:8917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3411:6205-0:4420:2260":{"id":"a:2:3411:6205-0:4420:2260","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:3411:6205","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValuesParser","id":"0:4420:2260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:13837:67842":{"id":"2:13837:67842","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:5450:67842"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:50107:8938","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:509:4245":{"id":"0:509:4245","crate_id":0,"name":"is_hide_set","span":{"filename":"src/builder/arg.rs","begin":[4731,4],"end":[4733,5]},"visibility":"public","docs":"Report whether [`Arg::hide`] is set","links":{"`Arg::hide`":"0:414:3786"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:32240:69493":{"id":"2:32240:69493","crate_id":2,"name":"from_le_bytes","span":null,"visibility":"public","docs":"Create a native endian integer value from its representation\nas a byte array in little endian.\n\n\n\n# Examples\n\n```\nlet value = u64::from_le_bytes([0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]);\nassert_eq!(value, 0x1234567890123456);\n```\n\nWhen starting from a slice rather than an array, fallible conversion APIs can be used:\n\n```\nfn read_le_u64(input: &mut &[u8]) -> u64 {\n    let (int_bytes, rest) = input.split_at(std::mem::size_of::<u64>());\n    *input = rest;\n    u64::from_le_bytes(int_bytes.try_into().unwrap())\n}\n```","links":{},"attrs":["#[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]","#[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["bytes",{"kind":"array","inner":{"type":{"kind":"primitive","inner":"u8"},"len":"8"}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:4104-0:3351:1659":{"id":"b:2:4104-0:3351:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:4102:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgAction","id":"0:3351:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:4106:1449"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4001:3806":{"id":"0:4001:3806","crate_id":0,"name":"HideDefaultValue","span":{"filename":"src/builder/arg_settings.rs","begin":[342,4],"end":[342,20]},"visibility":"default","docs":"Deprecated, replaced with [`Arg::hide_default_value`] and [`Arg::is_hide_default_value_set`]\n\nDerive: replace `#[clap(setting = HideDefaultValue)]` with `#[clap(hide_default_value = true)]`\n\nBuilder: replace `arg.setting(HideDefaultValue)` with `arg.hide_default_value(true)`","links":{"`Arg::hide_default_value`":"0:416:3805","`Arg::is_hide_default_value_set`":"0:510:4247"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"0:507:4200":{"id":"0:507:4200","crate_id":0,"name":"is_global_set","span":{"filename":"src/builder/arg.rs","begin":[4721,4],"end":[4723,5]},"visibility":"public","docs":"Report whether [`Arg::global`] is set","links":{"`Arg::global`":"0:341:3097"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4546:7082":{"id":"0:4546:7082","crate_id":0,"name":"SuggestedSubcommand","span":{"filename":"src/error/context.rs","begin":[28,4],"end":[28,23]},"visibility":"default","docs":"Potential fix for the user","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"2:13752:2237":{"id":"2:13752:2237","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"self::pattern":"2:13336:8923","`None`":"2:47811:177","prim@char":"1:15876:8642"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13346:8917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:164:2106":{"id":"0:164:2106","crate_id":0,"name":"from_arg_matches_mut","span":{"filename":"src/derive.rs","begin":[352,4],"end":[354,5]},"visibility":"default","docs":"Instantiate `Self` from [`ArgMatches`], parsing the arguments as needed.\n\nMotivation: If our application had two CLI options, `--name\n<STRING>` and the flag `--debug`, we may create a struct as follows:\n\n ```ignore\nstruct Context {\n    name: String,\n    debug: bool\n}\n```\n\nWe then need to convert the `ArgMatches` that `clap` generated into our struct.\n`from_arg_matches_mut` serves as the equivalent of:\n\n ```ignore\n# use clap::ArgMatches;\n# struct Context {\n#   name: String,\n#   debug: bool\n# }\nimpl From<ArgMatches> for Context {\n   fn from(m: ArgMatches) -> Self {\n       Context {\n           name: m.get_one::<String>(\"name\").unwrap().to_string(),\n           debug: *m.get_one::<bool>(\"debug\").expect(\"defaulted by clap\"),\n       }\n   }\n}\n```","links":{"`ArgMatches`":"0:4713:1665"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["matches",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4713:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4647:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6463:15073":{"id":"1:6463:15073","crate_id":1,"name":"st_ino","span":null,"visibility":"default","docs":"Returns the inode number.\n\n# Examples\n\n```no_run\nuse std::fs;\nuse std::io;\nuse std::os::linux::fs::MetadataExt;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    println!(\"{}\", meta.st_ino());\n    Ok(())\n}\n```","links":{},"attrs":["#[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:4423:5915":{"id":"1:4423:5915","crate_id":1,"name":"chain","span":null,"visibility":"default","docs":"Creates an adapter which will chain this stream with another.\n\nThe returned `Read` instance will first read all bytes from this object\nuntil EOF is encountered. Afterwards the output is equivalent to the\noutput of `next`.\n\n# Examples\n\n[`File`]s implement `Read`:\n\n[`File`]: crate::fs::File\n\n```no_run\nuse std::io;\nuse std::io::prelude::*;\nuse std::fs::File;\n\nfn main() -> io::Result<()> {\n    let f1 = File::open(\"foo.txt\")?;\n    let f2 = File::open(\"bar.txt\")?;\n\n    let mut handle = f1.chain(f2);\n    let mut buffer = String::new();\n\n    // read the value into a String. We could use any Read method here,\n    // this is just one example.\n    handle.read_to_string(&mut buffer)?;\n    Ok(())\n}\n```","links":{"crate::fs::File":"1:2909:129"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["next",{"kind":"generic","inner":"R"}]],"output":{"kind":"resolved_path","inner":{"name":"Chain","id":"1:10956:8990","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Read","id":"1:4410:8984","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1882:2109":{"id":"0:1882:2109","crate_id":0,"name":"exit","span":{"filename":"src/error/mod.rs","begin":[119,4],"end":[137,5]},"visibility":"public","docs":"Prints the error and exits.\n\nDepending on the error kind, this either prints to `stderr` and exits with a status of `2`\nor prints to `stdout` and exits with a status of `0`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"never"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23060:21801":{"id":"2:23060:21801","crate_id":2,"name":"recip","span":null,"visibility":"default","docs":"Takes the reciprocal (inverse) of each lane, `1/x`.","links":{},"attrs":["#[must_use =\n\"method returns a new vector and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:4837":{"id":"0:4837","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/value_source.rs","begin":[2,16],"end":[2,21]},"visibility":{"restricted":{"parent":"0:2440:7462","path":"::parser::matches::value_source"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4828:1684","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4838:415"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:32198:69457":{"id":"2:32198:69457","crate_id":2,"name":"wrapping_div_euclid","span":null,"visibility":"public","docs":"Wrapping Euclidean division. Computes `self.div_euclid(rhs)`.\nWrapped division on unsigned types is just normal division.\nThere's no way wrapping could ever happen.\nThis function exists, so that all operations\nare accounted for in the wrapping operations.\nSince, for the positive integers, all common\ndefinitions of division are equal, this\nis exactly equal to `self.wrapping_div(rhs)`.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(100u64.wrapping_div_euclid(10), 10);\n```","links":{},"attrs":["#[stable(feature = \"euclidean_division\", since = \"1.38.0\")]","#[rustc_const_stable(feature = \"const_euclidean_int_methods\", since =\n\"1.52.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4635:7179":{"id":"0:4635:7179","crate_id":0,"name":"Io","span":{"filename":"src/error/kind.rs","begin":[388,4],"end":[388,6]},"visibility":"default","docs":"Represents an [I/O error].\nCan occur when writing to `stderr` or `stdout` or reading a configuration file.\n\n[I/O error]: std::io::Error","links":{"std::io::Error":"1:3803:128"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"2:13734:64104":{"id":"2:13734:64104","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:13733:64103"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3218-0:1294:2265":{"id":"b:2:3218-0:1294:2265","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1294:2265","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3221:128","2:3222:1435"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3213-0:4294:1679":{"id":"b:2:3213-0:4294:1679","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3183:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:4294:1679","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":["2:3216:128","2:3217:1436"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:9110:9978":{"id":"2:9110:9978","crate_id":2,"name":"partial_cmp_by","span":null,"visibility":"default","docs":"[Lexicographically](Ord#lexicographical-comparison) compares the elements of this [`Iterator`] with those\nof another with respect to the specified comparison function.\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(iter_order_by)]\n\nuse std::cmp::Ordering;\n\nlet xs = [1.0, 2.0, 3.0, 4.0];\nlet ys = [1.0, 4.0, 9.0, 16.0];\n\nassert_eq!(\n    xs.iter().partial_cmp_by(&ys, |&x, &y| x.partial_cmp(&y)),\n    Some(Ordering::Less)\n);\nassert_eq!(\n    xs.iter().partial_cmp_by(&ys, |&x, &y| (x * x).partial_cmp(&y)),\n    Some(Ordering::Equal)\n);\nassert_eq!(\n    xs.iter().partial_cmp_by(&ys, |&x, &y| (2.0 * x).partial_cmp(&y)),\n    Some(Ordering::Greater)\n);\n```","links":{"`Iterator`":"2:8873:159","Ord#lexicographical-comparison":"2:2956:180"},"attrs":["#[unstable(feature = \"iter_order_by\", issue = \"64295\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"I"}],["partial_cmp",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Ordering","id":"2:37932:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3624:132","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"IntoIterator","id":"2:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Ordering","id":"2:37932:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"26:30:10549":{"id":"26:30:10549","crate_id":26,"name":"supports_color","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/termcolor-1.1.3/src/lib.rs","begin":[142,4],"end":[142,37]},"visibility":"default","docs":"Returns true if and only if the underlying writer supports colors.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:8983:9969":{"id":"2:8983:9969","crate_id":2,"name":"reduce","span":null,"visibility":"default","docs":"Reduces the elements to a single one, by repeatedly applying a reducing\noperation.\n\nIf the iterator is empty, returns [`None`]; otherwise, returns the\nresult of the reduction.\n\nThe reducing function is a closure with two arguments: an 'accumulator', and an element.\nFor iterators with at least one element, this is the same as [`fold()`]\nwith the first element of the iterator as the initial accumulator value, folding\nevery subsequent element into it.\n\n[`fold()`]: Iterator::fold\n\n# Example\n\nFind the maximum value:\n\n```\nfn find_max<I>(iter: I) -> Option<I::Item>\n    where I: Iterator,\n          I::Item: Ord,\n{\n    iter.reduce(|accum, item| {\n        if accum >= item { accum } else { item }\n    })\n}\nlet a = [10, 20, 5, -23, 0];\nlet b: [u32; 0] = [];\n\nassert_eq!(find_max(a.iter()), Some(&20));\nassert_eq!(find_max(b.iter()), None);\n```","links":{"Iterator::fold":"2:8980:8024","`None`":"2:47811:177"},"attrs":["#[stable(feature = \"iterator_fold_self\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3624:132","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"output":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3213-0:1294:2265":{"id":"b:2:3213-0:1294:2265","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3183:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1294:2265","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3216:128","2:3217:1436"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:5:848-0:4294:1679":{"id":"b:5:848-0:4294:1679","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:844:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:4294:1679","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":["5:850:4342","5:851:4983","5:852:9984"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1580:1671":{"id":"0:1580:1671","crate_id":0,"name":"Parser","span":{"filename":"src/builder/value_parser.rs","begin":[1962,4],"end":[1962,44]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:4427:2261","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u16"}}],"bindings":[]}}}}}},"0:3816:184":{"id":"0:3816:184","crate_id":0,"name":"Output","span":{"filename":"src/builder/app_settings.rs","begin":[1019,0],"end":[1115,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"AppFlags","id":"0:3375:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:2451":{"id":"0:2451","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/mod.rs","begin":[9,22],"end":[9,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"arg_matches::ArgMatches","name":"ArgMatches","id":"0:4713:1665","glob":false}},"2:8724:9947":{"id":"2:8724:9947","crate_id":2,"name":"rfold","span":null,"visibility":"default","docs":"An iterator method that reduces the iterator's elements to a single,\nfinal value, starting from the back.\n\nThis is the reverse version of [`Iterator::fold()`]: it takes elements\nstarting from the back of the iterator.\n\n`rfold()` takes two arguments: an initial value, and a closure with two\narguments: an 'accumulator', and an element. The closure returns the value that\nthe accumulator should have for the next iteration.\n\nThe initial value is the value the accumulator will have on the first\ncall.\n\nAfter applying this closure to every element of the iterator, `rfold()`\nreturns the accumulator.\n\nThis operation is sometimes called 'reduce' or 'inject'.\n\nFolding is useful whenever you have a collection of something, and want\nto produce a single value from it.\n\nNote: `rfold()` combines elements in a *right-associative* fashion. For associative\noperators like `+`, the order the elements are combined in is not important, but for non-associative\noperators like `-` the order will affect the final result.\nFor a *left-associative* version of `rfold()`, see [`Iterator::fold()`].\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\n\n// the sum of all of the elements of a\nlet sum = a.iter()\n           .rfold(0, |acc, &x| acc + x);\n\nassert_eq!(sum, 6);\n```\n\nThis example demonstrates the right-associative nature of `rfold()`:\nit builds a string, starting with an initial value\nand continuing with each element from the back until the front:\n\n```\nlet numbers = [1, 2, 3, 4, 5];\n\nlet zero = \"0\".to_string();\n\nlet result = numbers.iter().rfold(zero, |acc, &x| {\n    format!(\"({x} + {acc})\")\n});\n\nassert_eq!(result, \"(1 + (2 + (3 + (4 + (5 + 0)))))\");\n```","links":{"`Iterator::fold()`":"2:8980:8024"},"attrs":["#[doc(alias = \"foldr\")]","#[stable(feature = \"iter_rfold\", since = \"1.27.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["init",{"kind":"generic","inner":"B"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"generic","inner":"B"},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3624:132","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"B"},{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"output":{"kind":"generic","inner":"B"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1400:6597":{"id":"0:1400:6597","crate_id":0,"name":"Value","span":{"filename":"src/builder/value_parser.rs","begin":[820,4],"end":[820,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"PathBuf","id":"1:7132:189","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"2:3665:28257":{"id":"2:3665:28257","crate_id":2,"name":"resume","span":null,"visibility":"default","docs":"Resumes the execution of this generator.\n\nThis function will resume execution of the generator or start execution\nif it hasn't already. This call will return back into the generator's\nlast suspension point, resuming execution from the latest `yield`. The\ngenerator will continue executing until it either yields or returns, at\nwhich point this function will return.\n\n# Return value\n\nThe `GeneratorState` enum returned from this function indicates what\nstate the generator is in upon returning. If the `Yielded` variant is\nreturned then the generator has reached a suspension point and a value\nhas been yielded out. Generators in this state are available for\nresumption at a later point.\n\nIf `Complete` is returned then the generator has completely finished\nwith the value provided. It is invalid for the generator to be resumed\nagain.\n\n# Panics\n\nThis function may panic if it is called after the `Complete` variant has\nbeen returned previously. While generator literals in the language are\nguaranteed to panic on resuming after `Complete`, this is not guaranteed\nfor all implementations of the `Generator` trait.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47926:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["arg",{"kind":"generic","inner":"R"}]],"output":{"kind":"resolved_path","inner":{"name":"GeneratorState","id":"2:46125:8804","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Yield","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Generator","id":"2:3661:8803","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}}}},{"type":{"kind":"qualified_path","inner":{"name":"Return","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Generator","id":"2:3661:8803","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:4774:415":{"id":"0:4774:415","crate_id":0,"name":"clone","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1607,9],"end":[1607,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"RawValues","id":"0:4768:7385","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3218-0:4693:7387":{"id":"b:2:3218-0:4693:7387","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4693:7387","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3221:128","2:3222:1435"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4627:7029":{"id":"0:4627:7029","crate_id":0,"name":"DisplayHelp","span":{"filename":"src/error/kind.rs","begin":[337,4],"end":[337,15]},"visibility":"default","docs":"Not a true \"error\" as it means `--help` or similar was used.\nThe help message will be sent to `stdout`.\n\n**Note**: If the help is displayed due to an error (such as missing subcommands) it will\nbe sent to `stderr` instead of `stdout`.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet result = Command::new(\"prog\")\n    .try_get_matches_from(vec![\"prog\", \"--help\"]);\nassert!(result.is_err());\nassert_eq!(result.unwrap_err().kind(), ErrorKind::DisplayHelp);\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"a:2:3370:216-0:4241:1674":{"id":"a:2:3370:216-0:4241:1674","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:4241:1674","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"23:47:6597":{"id":"23:47:6597","crate_id":23,"name":"Value","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.1/src/mutable_keys.rs","begin":[21,4],"end":[21,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"2:3626:384":{"id":"2:3626:384","crate_id":2,"name":"call_mut","span":null,"visibility":"default","docs":"Performs the call operation.","links":{},"attrs":["#[unstable(feature = \"fn_traits\", issue = \"29625\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["args",{"kind":"generic","inner":"Args"}]],"output":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"FnOnce","id":"2:3627:133","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":{"Other":"\"rust-call\""}},"has_body":false}},"a:2:3411:6205-0:1294:2265":{"id":"a:2:3411:6205-0:1294:2265","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:3411:6205","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1294:2265","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:4104-0:4523:6999":{"id":"b:2:4104-0:4523:6999","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:4102:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:4523:6999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:4106:1449"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4007:3834":{"id":"0:4007:3834","crate_id":0,"name":"HiddenShortHelp","span":{"filename":"src/builder/arg_settings.rs","begin":[435,4],"end":[435,19]},"visibility":"default","docs":"Deprecated, replaced with [`Arg::hide_short_help`] and [`Arg::is_hide_short_help_set`]\n\nDerive: replace `#[clap(setting = HiddenShortHelp)]` with `#[clap(hide_short_help = true)]`\n\nBuilder: replace `arg.setting(HiddenShortHelp)` with `arg.hide_short_help(true)`","links":{"`Arg::is_hide_short_help_set`":"0:512:4255","`Arg::hide_short_help`":"0:417:3833"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"b:2:3203-0:4707:2393":{"id":"b:2:3203-0:4707:2393","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AnyValueId","id":"0:4707:2393","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3206:2391"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:3382:225-0:4796:1683":{"id":"a:2:3382:225-0:4796:1683","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsValues","id":"0:4796:1683","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:3203-0:4410:2272":{"id":"b:2:3203-0:4410:2272","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EnumValueParser","id":"0:4410:2272","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"items":["2:3206:2391"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4015":{"id":"0:4015","crate_id":0,"name":null,"span":{"filename":"src/builder/arg_settings.rs","begin":[32,9],"end":[32,14]},"visibility":{"restricted":{"parent":"0:637:2253","path":"::builder::arg_settings"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgSettings","id":"0:3968:1678","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4016:667"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3916":{"id":"0:3916","crate_id":0,"name":null,"span":{"filename":"src/builder/arg_group.rs","begin":[80,18],"end":[80,23]},"visibility":{"restricted":{"parent":"0:597:2251","path":"::builder::arg_group"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3904:1662","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":["0:3918:667"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:80":{"id":"0:80","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[116,43],"end":[116,54]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::parser::ValueSource","name":"ValueSource","id":"0:4828:1684","glob":false}},"2:23062:21803":{"id":"2:23062:21803","crate_id":2,"name":"to_radians","span":null,"visibility":"default","docs":"Converts each lane from degrees to radians.","links":{},"attrs":["#[must_use =\n\"method returns a new vector and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1328":{"id":"0:1328","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[353,0],"end":[358,1]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":"Create an `i64` [`ValueParser`] from a `N..=M` range\n\nSee [`RangedI64ValueParser`] for more control over the output type.\n\nSee also [`RangedU64ValueParser`]\n\n# Examples\n\n```rust\nlet mut cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"port\")\n            .long(\"port\")\n            .value_parser(3000..=4000)\n            .takes_value(true)\n            .required(true)\n    );\n\nlet m = cmd.try_get_matches_from_mut([\"cmd\", \"--port\", \"3001\"]).unwrap();\nlet port: i64 = *m.get_one(\"port\")\n    .expect(\"required\");\nassert_eq!(port, 3001);\n```","links":{"`ValueParser`":"0:1294:2265","`RangedU64ValueParser`":"0:4439:2262","`RangedI64ValueParser`":"0:4427:2261"},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"RangeInclusive","id":"2:46254:200","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i64"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1294:2265","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1329:688"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:982:5903":{"id":"0:982:5903","crate_id":0,"name":"get_opts","span":{"filename":"src/builder/command.rs","begin":[3574,4],"end":[3577,5]},"visibility":"public","docs":"Iterate through the *options*.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3818:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}}}}}}}]}}},"generic_params":[],"modifier":"none"}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1465":{"id":"0:1465","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1279,0],"end":[1288,1]},"visibility":{"restricted":{"parent":"0:1281:2257","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"std::convert::TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"2:3750:6566","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:4427:2261","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:1468:688"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:6214:11213":{"id":"1:6214:11213","crate_id":1,"name":"gid","span":null,"visibility":"default","docs":"Similar to `uid`, but sets the group ID of the child process. This has\nthe same semantics as the `uid` field.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Command","id":"1:7477:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:10562:110":{"id":"2:10562:110","crate_id":2,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10563:667"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:7596:21580":{"id":"1:7596:21580","crate_id":1,"name":"report","span":null,"visibility":"default","docs":"Is called to get the representation of the value as status code.\nThis status code is returned to the operating system.","links":{},"attrs":["#[stable(feature = \"termination_trait_lib\", since = \"1.61.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"ExitCode","id":"1:11875:10588","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:4011:3419":{"id":"0:4011:3419","crate_id":0,"name":"AllowInvalidUtf8","span":{"filename":"src/builder/arg_settings.rs","begin":[477,4],"end":[477,20]},"visibility":"default","docs":"Deprecated, replaced with [`Arg::value_parser`]\n\nDerive: replace `#[clap(setting = AllowInvalidUtf8)]` with `#[clap(action)]` (which opts-in to the\nnew clap v4 behavior which gets the type via `value_parser!`)\n\nBuilder: replace `arg.setting(AllowInvalidUtf8)` with `arg.value_parser(value_parser!(T))` where\n`T` is the type of interest, like `OsString` or `PathBuf`, and `matches.value_of_os` with\n`matches.get_one::<T>` or `matches.values_of_os` with `matches.get_many::<T>`","links":{"`Arg::value_parser`":"0:353:2257"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"2:32208:69466":{"id":"2:32208:69466","crate_id":2,"name":"overflowing_sub","span":null,"visibility":"public","docs":"Calculates `self` - `rhs`\n\nReturns a tuple of the subtraction along with a boolean indicating\nwhether an arithmetic overflow would occur. If an overflow would\nhave occurred then the wrapped value is returned.\n\n# Examples\n\nBasic usage\n\n```\n\nassert_eq!(5u64.overflowing_sub(2), (3, false));\nassert_eq!(0u64.overflowing_sub(1), (u64::MAX, true));\n```","links":{},"attrs":["#[stable(feature = \"wrapping\", since = \"1.7.0\")]","#[rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"u64"},{"kind":"primitive","inner":"bool"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:4104-0:5070:1667":{"id":"b:2:4104-0:5070:1667","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:4102:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:5070:1667","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:4106:1449"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:2199:1853":{"id":"0:2199:1853","crate_id":0,"name":"values_of_t_or_exit","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[640,4],"end":[647,5]},"visibility":"public","docs":"Deprecated, replaced with [`ArgMatches::get_many()`]","links":{"`ArgMatches::get_many()`":"0:2165:7548"},"attrs":["#[track_caller]","#![allow(deprecated)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7898:240","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:13275:1861","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"R"},"trait":{"name":"FromStr","id":"2:13275:1861","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10569:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3370:216-0:4410:2272":{"id":"a:2:3370:216-0:4410:2272","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EnumValueParser","id":"0:4410:2272","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2868-0:3818:1661":{"id":"b:2:2868-0:3818:1661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2862:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3818:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":["2:2870:27181"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2865-0:4523:6999":{"id":"b:2:2865-0:4523:6999","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:4523:6999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2867:2792"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:12776:11654":{"id":"2:12776:11654","crate_id":2,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12777:2117","2:12778:28794"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:2823":{"id":"0:2823","crate_id":0,"name":null,"span":{"filename":"src/parser/mod.rs","begin":[23,24],"end":[23,34]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::matches::ArgMatches","name":"ArgMatches","id":"0:4713:1665","glob":false}},"0:932:4161":{"id":"0:932:4161","crate_id":0,"name":"get_help_heading","span":{"filename":"src/builder/command.rs","begin":[3378,4],"end":[3380,5]},"visibility":"public","docs":"Deprecated, replaced with [`Command::get_next_help_heading`]","links":{"`Command::get_next_help_heading`":"0:933:5850"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:515:4261":{"id":"0:515:4261","crate_id":0,"name":"is_require_value_delimiter_set","span":{"filename":"src/builder/arg.rs","begin":[4773,4],"end":[4775,5]},"visibility":"public","docs":"Report whether [`Arg::require_value_delimiter`] is set","links":{"`Arg::require_value_delimiter`":"0:390:3499"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3207-0:1294:2265":{"id":"b:2:3207-0:1294:2265","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1294:2265","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3209:688"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1504:6637":{"id":"0:1504:6637","crate_id":0,"name":"parse_ref","span":{"filename":"src/builder/value_parser.rs","begin":[1516,4],"end":[1541,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["cmd",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Command","id":"0:755:1660","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["arg",{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Arg","id":"0:3818:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}],"bindings":[]}}}}],["value",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"std::ffi::OsStr","id":"1:2654:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Value","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:1362:2264","args":null}}}},{"type":{"kind":"resolved_path","inner":{"name":"crate::Error","id":"0:4647:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5428:10993":{"id":"1:5428:10993","crate_id":1,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5429:28809","1:5430:9512"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10409:10989","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:4397:667":{"id":"0:4397:667","crate_id":0,"name":"fmt","span":{"filename":"src/builder/value_parser.rs","begin":[718,22],"end":[718,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10511:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10816:10566":{"id":"2:10816:10566","crate_id":2,"name":"write_u64","span":null,"visibility":"default","docs":"Writes a single `u64` into this hasher.","links":{},"attrs":["#[stable(feature = \"hasher_write\", since = \"1.3.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"primitive","inner":"u64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:94:69106":{"id":"22:94:69106","crate_id":22,"name":"into_raw_vec","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/os_str_bytes-6.0.0/src/lib.rs","begin":[391,4],"end":[391,37]},"visibility":"default","docs":"Converts a platform-native string into an equivalent byte vector.\n\nThe returned byte string will use an [unspecified encoding].\n\n# Examples\n\n```\nuse std::env;\n# use std::io;\n\nuse os_str_bytes::OsStringBytes;\n\nlet os_string = env::current_exe()?;\nprintln!(\"{:?}\", os_string.into_raw_vec());\n#\n# Ok::<_, io::Error>(())\n```\n\n[unspecified encoding]: self#encoding","links":{"self#encoding":"22:0:8965"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7898:240","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8224:3098","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:2267":{"id":"0:2267","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1553,0],"end":[1562,1]},"visibility":{"restricted":{"parent":"0:2092:7461","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["collect","find","partial_cmp_by","rposition","partition_in_place","flatten","fuse","max_by","intersperse","copied","max","find_map","gt","lt","position","eq_by","unzip","is_partitioned","max_by_key","inspect","cmp","take","intersperse_with","eq","ge","is_sorted","count","cycle","try_fold","any","by_ref","try_for_each","min","size_hint","for_each","chain","filter","take_while","fold","all","partial_cmp","ne","filter_map","le","cloned","is_sorted_by","array_chunks","min_by_key","reduce","skip","try_collect","skip_while","next_chunk","sum","map","advance_by","is_sorted_by_key","product","try_reduce","collect_into","map_while","nth","flat_map","zip","__iterator_get_unchecked","enumerate","cmp_by","try_find","rev","min_by","partition","scan","step_by","last","peekable"],"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValuesRef","id":"0:4755:7386","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:2270:2117","0:2271:932","0:2272:4836"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13348:8919":{"id":"2:13348:8919","crate_id":2,"name":"Searcher","span":null,"visibility":"default","docs":"Associated searcher for this pattern","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Searcher","id":"2:13355:8919","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null}},"0:4644":{"id":"0:4644","crate_id":0,"name":null,"span":{"filename":"src/error/kind.rs","begin":[2,29],"end":[2,38]},"visibility":{"restricted":{"parent":"0:1855:791","path":"::error::kind"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:3378:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4594:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3607:8796":{"id":"2:3607:8796","crate_id":2,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3608:552"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Deref","id":"2:3594:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3451:184":{"id":"2:3451:184","crate_id":2,"name":"Output","span":null,"visibility":"default","docs":"The resulting type after applying the `*` operator.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"1:4471:10376":{"id":"1:4471:10376","crate_id":1,"name":"is_write_vectored","span":null,"visibility":"default","docs":"Determines if this `Write`r has an efficient [`write_vectored`]\nimplementation.\n\nIf a `Write`r does not override the default [`write_vectored`]\nimplementation, code using it may want to avoid the method all together\nand coalesce writes into a single buffer for higher performance.\n\nThe default implementation returns `false`.\n\n[`write_vectored`]: Write::write_vectored","links":{"Write::write_vectored":"1:4469:10375"},"attrs":["#[unstable(feature = \"can_vector\", issue = \"69941\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3370:216-0:4768:7385":{"id":"a:2:3370:216-0:4768:7385","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawValues","id":"0:4768:7385","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:32236:69491":{"id":"2:32236:69491","crate_id":2,"name":"to_ne_bytes","span":null,"visibility":"public","docs":"Return the memory representation of this integer as a byte array in\nnative byte order.\n\nAs the target platform's native endianness is used, portable code\nshould use [`to_be_bytes`] or [`to_le_bytes`], as appropriate,\ninstead.\n\n\n\n[`to_be_bytes`]: Self::to_be_bytes\n[`to_le_bytes`]: Self::to_le_bytes\n\n# Examples\n\n```\nlet bytes = 0x1234567890123456u64.to_ne_bytes();\nassert_eq!(\n    bytes,\n    if cfg!(target_endian = \"big\") {\n        [0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\n    } else {\n        [0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\n    }\n);\n```","links":{"Self::to_le_bytes":"2:32234:69490","Self::to_be_bytes":"2:32232:69489"},"attrs":["#[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]","#[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"array","inner":{"type":{"kind":"primitive","inner":"u8"},"len":"8"}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4370:6546":{"id":"0:4370:6546","crate_id":0,"name":"Username","span":{"filename":"src/builder/value_hint.rs","begin":[59,4],"end":[59,12]},"visibility":"default","docs":"Name of a local operating system user.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"2:13756:9948":{"id":"2:13756:9948","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"self::pattern":"2:13336:8923","prim@char":"1:15876:8642","`None`":"2:47811:177"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13346:8917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13346:8917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13361:8918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8890:9044":{"id":"2:8890:9044","crate_id":2,"name":"zip","span":null,"visibility":"default","docs":"'Zips up' two iterators into a single iterator of pairs.\n\n`zip()` returns a new iterator that will iterate over two other\niterators, returning a tuple where the first element comes from the\nfirst iterator, and the second element comes from the second iterator.\n\nIn other words, it zips two iterators together, into a single one.\n\nIf either iterator returns [`None`], [`next`] from the zipped iterator\nwill return [`None`].\nIf the zipped iterator has no more elements to return then each further attempt to advance\nit will first try to advance the first iterator at most one time and if it still yielded an item\ntry to advance the second iterator at most one time.\n\nTo 'undo' the result of zipping up two iterators, see [`unzip`].\n\n[`unzip`]: Iterator::unzip\n\n# Examples\n\nBasic usage:\n\n```\nlet a1 = [1, 2, 3];\nlet a2 = [4, 5, 6];\n\nlet mut iter = a1.iter().zip(a2.iter());\n\nassert_eq!(iter.next(), Some((&1, &4)));\nassert_eq!(iter.next(), Some((&2, &5)));\nassert_eq!(iter.next(), Some((&3, &6)));\nassert_eq!(iter.next(), None);\n```\n\nSince the argument to `zip()` uses [`IntoIterator`], we can pass\nanything that can be converted into an [`Iterator`], not just an\n[`Iterator`] itself. For example, slices (`&[T]`) implement\n[`IntoIterator`], and so can be passed to `zip()` directly:\n\n```\nlet s1 = &[1, 2, 3];\nlet s2 = &[4, 5, 6];\n\nlet mut iter = s1.iter().zip(s2);\n\nassert_eq!(iter.next(), Some((&1, &4)));\nassert_eq!(iter.next(), Some((&2, &5)));\nassert_eq!(iter.next(), Some((&3, &6)));\nassert_eq!(iter.next(), None);\n```\n\n`zip()` is often used to zip an infinite iterator to a finite one.\nThis works because the finite iterator will eventually return [`None`],\nending the zipper. Zipping with `(0..)` can look a lot like [`enumerate`]:\n\n```\nlet enumerate: Vec<_> = \"foo\".chars().enumerate().collect();\n\nlet zipper: Vec<_> = (0..).zip(\"foo\".chars()).collect();\n\nassert_eq!((0, 'f'), enumerate[0]);\nassert_eq!((0, 'f'), zipper[0]);\n\nassert_eq!((1, 'o'), enumerate[1]);\nassert_eq!((1, 'o'), zipper[1]);\n\nassert_eq!((2, 'o'), enumerate[2]);\nassert_eq!((2, 'o'), zipper[2]);\n```\n\nIf both iterators have roughly equivalent syntax, it may be more readable to use [`zip`]:\n\n```\nuse std::iter::zip;\n\nlet a = [1, 2, 3];\nlet b = [2, 3, 4];\n\nlet mut zipped = zip(\n    a.into_iter().map(|x| x * 2).skip(1),\n    b.into_iter().map(|x| x * 2).skip(1),\n);\n\nassert_eq!(zipped.next(), Some((4, 6)));\nassert_eq!(zipped.next(), Some((6, 8)));\nassert_eq!(zipped.next(), None);\n```\n\ncompared to:\n\n```\n# let a = [1, 2, 3];\n# let b = [2, 3, 4];\n#\nlet mut zipped = a\n    .into_iter()\n    .map(|x| x * 2)\n    .skip(1)\n    .zip(b.into_iter().map(|x| x * 2).skip(1));\n#\n# assert_eq!(zipped.next(), Some((4, 6)));\n# assert_eq!(zipped.next(), Some((6, 8)));\n# assert_eq!(zipped.next(), None);\n```\n\n[`enumerate`]: Iterator::enumerate\n[`next`]: Iterator::next\n[`zip`]: crate::iter::zip","links":{"`IntoIterator`":"2:8672:152","`Iterator`":"2:8873:159","`None`":"2:47811:177","Iterator::enumerate":"2:8910:6137","crate::iter::zip":"2:7935:9044","Iterator::unzip":"2:9083:9973","Iterator::next":"2:8875:932"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Zip","id":"2:47116:9066","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"qualified_path","inner":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"IntoIterator","id":"2:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:848-0:3904:1662":{"id":"b:5:848-0:3904:1662","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:844:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3904:1662","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":["5:850:4342","5:851:4983","5:852:9984"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3515:184":{"id":"2:3515:184","crate_id":2,"name":"Output","span":null,"visibility":"default","docs":"The resulting type after applying the `<<` operator.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"2:3482:8782":{"id":"2:3482:8782","crate_id":2,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3484:566"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:4833:7421":{"id":"0:4833:7421","crate_id":0,"name":"CommandLine","span":{"filename":"src/parser/matches/value_source.rs","begin":[10,4],"end":[10,15]},"visibility":"default","docs":"Value was passed in on the command-line","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"0:3420:2504":{"id":"0:3420:2504","crate_id":0,"name":"UseLongFormatForHelpSubcommand","span":{"filename":"src/builder/app_settings.rs","begin":[365,4],"end":[365,34]},"visibility":"default","docs":"Deprecated, this is now the default\n\nDerive: remove `#[clap(setting = UseLongFormatForHelpSubcommand)]`\n\nBuilder: remove `cmd.setting(UseLongFormatForHelpSubcommand)`","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"0:1732":{"id":"0:1732","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[36,0],"end":[36,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"value_parser::RangedI64ValueParser","name":"RangedI64ValueParser","id":"0:4427:2261","glob":false}},"5:5913:8921":{"id":"5:5913:8921","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5915:184","5:5916:440"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:2088":{"id":"0:2088","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/any_value.rs","begin":[97,0],"end":[101,1]},"visibility":{"restricted":{"parent":"0:2060:7460","path":"::parser::matches::any_value"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'static"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"A"}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AnyValueId","id":"0:4707:2393","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2091:688"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:516:4263":{"id":"0:516:4263","crate_id":0,"name":"is_require_equals_set","span":{"filename":"src/builder/arg.rs","begin":[4778,4],"end":[4780,5]},"visibility":"public","docs":"Report whether [`Arg::require_equals`] is set","links":{"`Arg::require_equals`":"0:386:3435"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13796:67832":{"id":"2:13796:67832","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:13336:8923","prim@char":"1:15876:8642","str::match_indices":"2:13793:67831","`DoubleEndedIterator`":"2:8716:121"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:49958:8943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13346:8917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13346:8917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13361:8918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4559":{"id":"0:4559","crate_id":0,"name":null,"span":{"filename":"src/error/context.rs","begin":[2,15],"end":[2,20]},"visibility":{"restricted":{"parent":"0:1854:488","path":"::error::context"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:4523:6999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4560:415"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3441:184":{"id":"2:3441:184","crate_id":2,"name":"Output","span":null,"visibility":"default","docs":"The resulting type after applying the `+` operator.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"b:2:4104-0:4828:1684":{"id":"b:2:4104-0:4828:1684","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:4102:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4828:1684","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:4106:1449"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3619:585":{"id":"2:3619:585","crate_id":2,"name":"drop","span":null,"visibility":"default","docs":"Executes the destructor for this type.\n\nThis method is called implicitly when the value goes out of scope,\nand cannot be called explicitly (this is compiler error [E0040]).\nHowever, the [`mem::drop`] function in the prelude can be\nused to call the argument's `Drop` implementation.\n\nWhen this method has been called, `self` has not yet been deallocated.\nThat only happens after the method is over.\nIf this wasn't the case, `self` would be a dangling reference.\n\n# Panics\n\nGiven that a [`panic!`] will call `drop` as it unwinds, any [`panic!`]\nin a `drop` implementation will likely abort.\n\nNote that even if this panics, the value is considered to be dropped;\nyou must not cause `drop` to be called again. This is normally automatically\nhandled by the compiler, but when using unsafe code, can sometimes occur\nunintentionally, particularly when using [`ptr::drop_in_place`].\n\n[E0040]: ../../error_codes/E0040.html\n[`panic!`]: crate::panic!\n[`mem::drop`]: drop\n[`ptr::drop_in_place`]: crate::ptr::drop_in_place","links":{"crate::ptr::drop_in_place":"2:2765:586","crate::panic!":"2:4:989","drop":"2:2181:585"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1241:688":{"id":"0:1241:688","crate_id":0,"name":"from","span":{"filename":"src/builder/possible_value.rs","begin":[256,4],"end":[258,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["s",{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:32150:69423":{"id":"2:32150:69423","crate_id":2,"name":"count_ones","span":null,"visibility":"public","docs":"Returns the number of ones in the binary representation of `self`.\n\n# Examples\n\nBasic usage:\n\n```\nlet n = 0b01001100u64;\n\nassert_eq!(n.count_ones(), 3);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]","#[doc(alias = \"popcount\")]","#[doc(alias = \"popcnt\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3535:364":{"id":"2:3535:364","crate_id":2,"name":"bitxor_assign","span":null,"visibility":"default","docs":"Performs the `^=` operation.\n\n# Examples\n\n```\nlet mut x = true;\nx ^= false;\nassert_eq!(x, true);\n\nlet mut x = true;\nx ^= true;\nassert_eq!(x, false);\n\nlet mut x: u8 = 5;\nx ^= 1;\nassert_eq!(x, 4);\n\nlet mut x: u8 = 5;\nx ^= 2;\nassert_eq!(x, 7);\n```","links":{},"attrs":["#[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["rhs",{"kind":"generic","inner":"Rhs"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:809:5020":{"id":"0:809:5020","crate_id":0,"name":"write_long_help","span":{"filename":"src/builder/command.rs","begin":[820,4],"end":[826,5]},"visibility":"public","docs":"Writes the long help message (`--help`) to a [`io::Write`] object.\n\nSee also [`Command::write_help`].\n\n# Examples\n\n```rust\n# use clap::Command;\nuse std::io;\nlet mut cmd = Command::new(\"myprog\");\nlet mut out = io::stdout();\ncmd.write_long_help(&mut out).expect(\"failed to write to stdout\");\n```\n[`io::Write`]: std::io::Write\n[`-h` (short)]: Arg::help()\n[`--help` (long)]: Arg::long_help()","links":{"`Command::write_help`":"0:807:5000","std::io::Write":"1:4467:2035"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["w",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"W"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3801:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"W","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"io::Write","id":"1:4467:2035","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8876:9951":{"id":"2:8876:9951","crate_id":2,"name":"next_chunk","span":null,"visibility":"default","docs":"Advances the iterator and returns an array containing the next `N` values.\n\nIf there are not enough elements to fill the array then `Err` is returned\ncontaining an iterator over the remaining elements.\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(iter_next_chunk)]\n\nlet mut iter = \"lorem\".chars();\n\nassert_eq!(iter.next_chunk().unwrap(), ['l', 'o']);              // N is inferred as 2\nassert_eq!(iter.next_chunk().unwrap(), ['r', 'e', 'm']);         // N is inferred as 3\nassert_eq!(iter.next_chunk::<4>().unwrap_err().as_slice(), &[]); // N is explicitly 4\n```\n\nSplit a string and get the first three items.\n\n```\n#![feature(iter_next_chunk)]\n\nlet quote = \"not all those who wander are lost\";\nlet [first, second, third] = quote.split_whitespace().next_chunk().unwrap();\nassert_eq!(first, \"not\");\nassert_eq!(second, \"all\");\nassert_eq!(third, \"those\");\n```","links":{},"attrs":["#[unstable(feature = \"iter_next_chunk\", reason = \"recently added\", issue =\n\"98326\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"array","inner":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"len":"N"}}},{"type":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"2:4496:7847","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},{"const":{"type":{"kind":"primitive","inner":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"N","kind":{"const":{"type":{"kind":"primitive","inner":"usize"},"default":null}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8882:3029":{"id":"2:8882:3029","crate_id":2,"name":"last","span":null,"visibility":"default","docs":"Consumes the iterator, returning the last element.\n\nThis method will evaluate the iterator until it returns [`None`]. While\ndoing so, it keeps track of the current element. After [`None`] is\nreturned, `last()` will then return the last element it saw.\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\nassert_eq!(a.iter().last(), Some(&3));\n\nlet a = [1, 2, 3, 4, 5];\nassert_eq!(a.iter().last(), Some(&5));\n```","links":{"`None`":"2:47811:177"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3491":{"id":"0:3491","crate_id":0,"name":null,"span":{"filename":"src/builder/app_settings.rs","begin":[32,27],"end":[32,31]},"visibility":{"restricted":{"parent":"0:227:2250","path":"::builder::app_settings"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3380:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:3389:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4427:2261":{"id":"0:4427:2261","crate_id":0,"name":"RangedI64ValueParser","span":{"filename":"src/builder/value_parser.rs","begin":[1135,0],"end":[1138,1]},"visibility":"public","docs":"Parse number that fall within a range of values\n\n# Example\n\nUsage:\n```rust\nlet mut cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"port\")\n            .long(\"port\")\n            .value_parser(clap::value_parser!(u16).range(3000..))\n            .takes_value(true)\n            .required(true)\n    );\n\nlet m = cmd.try_get_matches_from_mut([\"cmd\", \"--port\", \"3001\"]).unwrap();\nlet port: u16 = *m.get_one(\"port\")\n    .expect(\"required\");\nassert_eq!(port, 3001);\n```\n\nSemantics:\n```rust\n# use std::ffi::OsStr;\n# use clap::builder::TypedValueParser;\n# let cmd = clap::Command::new(\"test\");\n# let arg = None;\nlet value_parser = clap::builder::RangedI64ValueParser::<i32>::new().range(-1..200);\nassert!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"random\")).is_err());\nassert!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"\")).is_err());\nassert!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"-200\")).is_err());\nassert!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"300\")).is_err());\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"-1\")).unwrap(), -1);\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"0\")).unwrap(), 0);\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"50\")).unwrap(), 50);\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"std::convert::TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"kind":"primitive","inner":"i64"},"synthetic":false}}}],"where_predicates":[]},"impls":["0:1446","a:2:9533:7458-0:4427:2261","a:2:9532:7459-0:4427:2261","a:2:3382:225-0:4427:2261","a:2:3370:216-0:4427:2261","a:2:3411:6205-0:4427:2261","b:2:4104-0:4427:2261","b:2:2865-0:4427:2261","b:2:3203-0:4427:2261","b:2:3207-0:4427:2261","b:2:3218-0:4427:2261","b:2:2868-0:4427:2261","b:2:3213-0:4427:2261","b:5:848-0:4427:2261","0:4431","0:4433","0:4436","0:1452","0:1465","0:1469"]}},"0:922:5832":{"id":"0:922:5832","crate_id":0,"name":"set_bin_name","span":{"filename":"src/builder/command.rs","begin":[3316,4],"end":[3318,5]},"visibility":"public","docs":"Set binary name. Uses `&mut self` instead of `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["name",{"kind":"generic","inner":"S"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:8479:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8985:9970":{"id":"2:8985:9970","crate_id":2,"name":"try_reduce","span":null,"visibility":"default","docs":"Reduces the elements to a single one by repeatedly applying a reducing operation. If the\nclosure returns a failure, the failure is propagated back to the caller immediately.\n\nThe return type of this method depends on the return type of the closure. If the closure\nreturns `Result<Self::Item, E>`, then this function will return `Result<Option<Self::Item>,\nE>`. If the closure returns `Option<Self::Item>`, then this function will return\n`Option<Option<Self::Item>>`.\n\nWhen called on an empty iterator, this function will return either `Some(None)` or\n`Ok(None)` depending on the type of the provided closure.\n\nFor iterators with at least one element, this is essentially the same as calling\n[`try_fold()`] with the first element of the iterator as the initial accumulator value.\n\n[`try_fold()`]: Iterator::try_fold\n\n# Examples\n\nSafely calculate the sum of a series of numbers:\n\n```\n#![feature(iterator_try_reduce)]\n\nlet numbers: Vec<usize> = vec![10, 20, 5, 23, 0];\nlet sum = numbers.into_iter().try_reduce(|x, y| x.checked_add(y));\nassert_eq!(sum, Some(Some(58)));\n```\n\nDetermine when a reduction short circuited:\n\n```\n#![feature(iterator_try_reduce)]\n\nlet numbers = vec![1, 2, 3, usize::MAX, 4, 5];\nlet sum = numbers.into_iter().try_reduce(|x, y| x.checked_add(y));\nassert_eq!(sum, None);\n```\n\nDetermine when a reduction was not performed because there are no elements:\n\n```\n#![feature(iterator_try_reduce)]\n\nlet numbers: Vec<usize> = Vec::new();\nlet sum = numbers.into_iter().try_reduce(|x, y| x.checked_add(y));\nassert_eq!(sum, Some(None));\n```\n\nUse a [`Result`] instead of an [`Option`]:\n\n```\n#![feature(iterator_try_reduce)]\n\nlet numbers = vec![\"1\", \"2\", \"3\", \"4\", \"5\"];\nlet max: Result<Option<_>, <usize as std::str::FromStr>::Err> =\n    numbers.into_iter().try_reduce(|x, y| {\n        if x.parse::<usize>()? > y.parse::<usize>()? { Ok(x) } else { Ok(y) }\n    });\nassert_eq!(max, Ok(Some(\"5\")));\n```","links":{"`Option`":"2:47809:179","Iterator::try_fold":"2:8967:9968","`Result`":"2:47934:208"},"attrs":["#[unstable(feature = \"iterator_try_reduce\", reason = \"new API\", issue =\n\"87053\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"qualified_path","inner":{"name":"TryType","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"R"},"trait":{"name":"Try","id":"2:3831:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"trait":{"name":"Residual","id":"2:3842:8800","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"R"},"trait":{"name":"Try","id":"2:3831:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}}}],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3624:132","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"output":{"kind":"generic","inner":"R"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Try","id":"2:3831:230","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"R"},"trait":{"name":"Try","id":"2:3831:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Residual","id":"2:3842:8800","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"2:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:560":{"id":"0:560","crate_id":0,"name":null,"span":{"filename":"src/builder/arg.rs","begin":[5198,0],"end":[5202,1]},"visibility":{"restricted":{"parent":"0:242:1932","path":"::builder::arg"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2920:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3818:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3818:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}}}},"items":["0:562:611"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:2872:611":{"id":"0:2872:611","crate_id":0,"name":"eq","span":{"filename":"src/mkeymap.rs","begin":[57,4],"end":[62,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["rhs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1859:667":{"id":"0:1859:667","crate_id":0,"name":"fmt","span":{"filename":"src/error/kind.rs","begin":[437,4],"end":[439,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"std::fmt::Formatter","id":"2:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"std::fmt::Result","id":"2:10511:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4722:415":{"id":"0:4722:415","crate_id":0,"name":"clone","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[67,16],"end":[67,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4713:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13361:8918":{"id":"2:13361:8918","crate_id":2,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13363:7848","2:13364:28680","2:13365:28681"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Searcher","id":"2:13355:8919","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3379:222":{"id":"2:3379:222","crate_id":2,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5558:28835":{"id":"1:5558:28835","crate_id":1,"name":"is_char_device","span":null,"visibility":"default","docs":"Returns `true` if this file type is a char device.\n\n# Examples\n\n```no_run\nuse std::fs;\nuse std::os::unix::fs::FileTypeExt;\nuse std::io;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"char_device_file\")?;\n    let file_type = meta.file_type();\n    assert!(file_type.is_char_device());\n    Ok(())\n}\n```","links":{},"attrs":["#[stable(feature = \"file_type_ext\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:2:3218-0:4713:1665":{"id":"b:2:3218-0:4713:1665","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4713:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3221:128","2:3222:1435"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:326:2827":{"id":"0:326:2827","crate_id":0,"name":"aliases","span":{"filename":"src/builder/arg.rs","begin":[306,4],"end":[309,5]},"visibility":"public","docs":"Add aliases, which function as hidden long flags.\n\nThis is more efficient, and easier than creating multiple hidden subcommands as one only\nneeds to check for the existence of this command, and not all variants.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ArgAction};\nlet m = Command::new(\"prog\")\n            .arg(Arg::new(\"test\")\n                    .long(\"test\")\n                    .aliases(&[\"do-stuff\", \"do-tests\", \"tests\"])\n                    .action(ArgAction::SetTrue)\n                    .help(\"the file to add\")\n                    .required(false))\n            .get_matches_from(vec![\n                \"prog\", \"--do-tests\"\n            ]);\nassert_eq!(*m.get_one::<bool>(\"test\").expect(\"defaulted by clap\"), true);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["names",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2220:7804":{"id":"0:2220:7804","crate_id":0,"name":"subcommand_matches","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1169,4],"end":[1171,5]},"visibility":"public","docs":"The `ArgMatches` for the current [subcommand].\n\nSubcommand values are put in a child [`ArgMatches`]\n\nReturns `None` if the subcommand wasn't present at runtime,\n\n# Panics\n\nIf `id` is is not a valid subcommand.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ArgAction};\nlet app_m = Command::new(\"myprog\")\n    .arg(Arg::new(\"debug\")\n        .short('d')\n        .action(ArgAction::SetTrue)\n    )\n    .subcommand(Command::new(\"test\")\n        .arg(Arg::new(\"opt\")\n            .long(\"option\")\n            .takes_value(true)))\n    .get_matches_from(vec![\n        \"myprog\", \"-d\", \"test\", \"--option\", \"val\"\n    ]);\n\n// Both parent commands, and child subcommands can have arguments present at the same times\nassert!(*app_m.get_one::<bool>(\"debug\").expect(\"defaulted by clap\"));\n\n// Get the subcommand's ArgMatches instance\nif let Some(sub_m) = app_m.subcommand_matches(\"test\") {\n    // Use the struct like normal\n    assert_eq!(sub_m.get_one::<String>(\"opt\").map(|s| s.as_str()), Some(\"val\"));\n}\n```\n\n[subcommand]: crate::Command::subcommand\n[`Command`]: crate::Command","links":{"crate::Command::subcommand":"0:782:2012","`ArgMatches`":"0:4713:1665"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47809:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4713:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Key","id":"0:3239:2795","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:868:3032":{"id":"0:868:3032","crate_id":0,"name":"unset_setting","span":{"filename":"src/builder/command.rs","begin":[1841,4],"end":[1847,5]},"visibility":"public","docs":"Remove a setting for the current command or subcommand.\n\nSee [`AppSettings`] for a full list of possibilities and examples.\n\n# Examples\n\n```no_run\n# use clap::{Command, AppSettings};\nCommand::new(\"myprog\")\n    .unset_setting(AppSettings::SubcommandRequired)\n    .setting(AppSettings::AllowLeadingHyphen)\n# ;\n```\nor\n```no_run\n# use clap::{Command, AppSettings};\nCommand::new(\"myprog\")\n    .unset_setting(AppSettings::SubcommandRequired | AppSettings::AllowLeadingHyphen)\n# ;\n```","links":{"`AppSettings`":"0:3389:1676"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["setting",{"kind":"generic","inner":"F"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"AppFlags","id":"0:3375:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10516:9564":{"id":"2:10516:9564","crate_id":2,"name":"write_fmt","span":null,"visibility":"default","docs":"Glue for usage of the [`write!`] macro with implementors of this trait.\n\nThis method should generally not be invoked manually, but rather through\nthe [`write!`] macro itself.\n\n# Examples\n\n```\nuse std::fmt::{Error, Write};\n\nfn writer<W: Write>(f: &mut W, s: &str) -> Result<(), Error> {\n    f.write_fmt(format_args!(\"{s}\"))\n}\n\nlet mut buf = String::new();\nwriter(&mut buf, \"world\").unwrap();\nassert_eq!(&buf, \"world\");\n```","links":{"`write!`":"2:14:1869"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["args",{"kind":"resolved_path","inner":{"name":"Arguments","id":"2:48946:73","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47934:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"2:48872:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13733:64103":{"id":"2:13733:64103","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:13734:64104"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:801:4945":{"id":"0:801:4945","crate_id":0,"name":"try_get_matches_from_mut","span":{"filename":"src/builder/command.rs","begin":[680,4],"end":[731,5]},"visibility":"public","docs":"Parse the specified arguments, returning a [`clap::Result`] on failure.\n\nLike [`App::try_get_matches_from`] but doesn't consume the `Command`.\n\n**NOTE:** This method WILL NOT exit when `--help` or `--version` (or short versions) are\nused. It will return a [`clap::Error`], where the [`kind`] is a [`ErrorKind::DisplayHelp`]\nor [`ErrorKind::DisplayVersion`] respectively. You must call [`Error::exit`] or\nperform a [`std::process::exit`] yourself.\n\n**NOTE:** The first argument will be parsed as the binary name unless\n[`Command::no_binary_name`] is used.\n\n# Panics\n\nIf contradictory arguments or settings exist.\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg};\nlet arg_vec = vec![\"my_prog\", \"some\", \"args\", \"to\", \"parse\"];\n\nlet mut cmd = Command::new(\"myprog\");\n    // Args and options go here...\nlet matches = cmd.try_get_matches_from_mut(arg_vec)\n    .unwrap_or_else(|e| e.exit());\n```\n[`App::try_get_matches_from`]: Command::try_get_matches_from()\n[`clap::Result`]: Result\n[`clap::Error`]: crate::Error\n[`kind`]: crate::Error","links":{"`Error::exit`":"0:1882:2109","`std::process::exit`":"1:7592:2109","Command::try_get_matches_from()":"0:798:2121","`ErrorKind::DisplayVersion`":"0:4631:7030","Result":"2:47934:208","`ErrorKind::DisplayHelp`":"0:4627:7029","`Command::no_binary_name`":"0:816:5053","crate::Error":"0:4647:128"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["itr",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"ClapResult","id":"0:1869:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4713:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsString","id":"1:2651:183","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8880:502":{"id":"2:8880:502","crate_id":2,"name":"count","span":null,"visibility":"default","docs":"Consumes the iterator, counting the number of iterations and returning it.\n\nThis method will call [`next`] repeatedly until [`None`] is encountered,\nreturning the number of times it saw [`Some`]. Note that [`next`] has to be\ncalled at least once even if the iterator does not have any elements.\n\n[`next`]: Iterator::next\n\n# Overflow Behavior\n\nThe method does no guarding against overflows, so counting elements of\nan iterator with more than [`usize::MAX`] elements either produces the\nwrong result or panics. If debug assertions are enabled, a panic is\nguaranteed.\n\n# Panics\n\nThis function might panic if the iterator has more than [`usize::MAX`]\nelements.\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\nassert_eq!(a.iter().count(), 3);\n\nlet a = [1, 2, 3, 4, 5];\nassert_eq!(a.iter().count(), 5);\n```","links":{"`Some`":"2:47813:220","`usize::MAX`":"2:32349:6773","Iterator::next":"2:8875:932","`None`":"2:47811:177"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3283:10132":{"id":"2:3283:10132","crate_id":2,"name":"provide","span":null,"visibility":"default","docs":"Provides type based access to context intended for error reports.\n\nUsed in conjunction with [`Demand::provide_value`] and [`Demand::provide_ref`] to extract\nreferences to member variables from `dyn Error` trait objects.\n\n# Example\n\n```rust\n#![feature(provide_any)]\n#![feature(error_generic_member_access)]\nuse core::fmt;\nuse core::any::Demand;\n\n#[derive(Debug)]\nstruct MyBacktrace {\n    // ...\n}\n\nimpl MyBacktrace {\n    fn new() -> MyBacktrace {\n        // ...\n        # MyBacktrace {}\n    }\n}\n\n#[derive(Debug)]\nstruct SourceError {\n    // ...\n}\n\nimpl fmt::Display for SourceError {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        write!(f, \"Example Source Error\")\n    }\n}\n\nimpl std::error::Error for SourceError {}\n\n#[derive(Debug)]\nstruct Error {\n    source: SourceError,\n    backtrace: MyBacktrace,\n}\n\nimpl fmt::Display for Error {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        write!(f, \"Example Error\")\n    }\n}\n\nimpl std::error::Error for Error {\n    fn provide<'a>(&'a self, demand: &mut Demand<'a>) {\n        demand\n            .provide_ref::<MyBacktrace>(&self.backtrace)\n            .provide_ref::<dyn std::error::Error + 'static>(&self.source);\n    }\n}\n\nfn main() {\n    let backtrace = MyBacktrace::new();\n    let source = SourceError {};\n    let error = Error { source, backtrace };\n    let dyn_error = &error as &dyn std::error::Error;\n    let backtrace_ref = dyn_error.request_ref::<MyBacktrace>().unwrap();\n\n    assert!(core::ptr::eq(&error.backtrace, backtrace_ref));\n}\n```","links":{"`Demand::provide_ref`":"2:4181:76760","`Demand::provide_value`":"2:4176:76757"},"attrs":["#[unstable(feature = \"error_generic_member_access\", issue = \"99301\")]","#[allow(unused_variables)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["demand",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Demand","id":"2:4168:9026","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3416:2494":{"id":"0:3416:2494","crate_id":0,"name":"Multicall","span":{"filename":"src/builder/app_settings.rs","begin":[327,4],"end":[327,13]},"visibility":"default","docs":"Deprecated, replaced with [`Command::multicall`] and [`Command::is_multicall_set`]\n\nDerive: replace `#[clap(setting = Multicall)]` with `#[clap(multicall = true)]`\n\nBuilder: replace `cmd.setting(Multicall)` with `cmd.multicall(true)`","links":{"`Command::multicall`":"0:912:5805","`Command::is_multicall_set`":"0:1021:5973"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"b:2:2865-0:4392:2263":{"id":"b:2:2865-0:4392:2263","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3375:2100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StringValueParser","id":"0:4392:2263","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2867:2792"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}}},"paths":{"2:3877:8805":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"16:7184:12276":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:49700:9106":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"24:77:9087":{"crate_id":24,"path":["hashbrown","raw","inner","alloc","inner","Allocator"],"kind":"trait"},"17:11922:13089":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"18:136:29298":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:14392:15405":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"6:1544:14406":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"16:2905:12228":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:1610:11090":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:12620:13229":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:15046:11074":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:5731:11247":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:1456:10420":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:10671:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:51756:11389":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:50736:11564":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:13180:13418":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"25:206:12458":{"crate_id":25,"path":["textwrap","line_ending","NonEmptyLines"],"kind":"struct"},"24:1184:11878":{"crate_id":24,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:4860:11266":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"6:4098:14668":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:1460:11085":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:11335:12302":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"6:5301:14909":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"26:90:9174":{"crate_id":26,"path":["termcolor","StandardStream"],"kind":"struct"},"1:7241:188":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"5:1502:7407":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:46646:10366":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"18:801:12417":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"16:2813:12245":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"29:6892:15197":{"crate_id":29,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"29:5262:14903":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:13331:13453":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"6:565:14357":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:9131:54356":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"29:1683:14508":{"crate_id":29,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:3180:136":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"5:853:109":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"29:6117:15113":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:24531:11593":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:7307:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"5:1533:10427":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:8432:29305":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"24:1125:7407":{"crate_id":24,"path":["hashbrown","map","Entry"],"kind":"enum"},"29:5379:14966":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:53731:14118":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"5:383:10149":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"16:6949:12275":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:49790:8947":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"1:8932:8858":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"29:4186:14702":{"crate_id":29,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"6:6184:15137":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:0:1349":{"crate_id":1,"path":["std"],"kind":"module"},"1:10409:10989":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"24:891:10175":{"crate_id":24,"path":["hashbrown","map","Drain"],"kind":"struct"},"9:1056:11810":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:46632:10364":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:10028:12882":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"16:6141:12106":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:3743:12294":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:12023:11061":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"6:4454:14791":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:10895:9011":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"12:2032:7409":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:5434:10992":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:13094:13401":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"12:2398:15207":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"5:1152:12547":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:51469:11355":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:10266:12361":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"16:4975:13682":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"22:76:12448":{"crate_id":22,"path":["os_str_bytes","OsStrBytes"],"kind":"trait"},"17:11956:13099":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:11442:8895":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"5:7319:10175":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:5570:10978":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:3371:8998":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:3187:233":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"5:1751:197":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:11263:11211":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:14544:9087":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:47908:9472":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:4146:11178":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:4219:9005":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:14061:139":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:11861:10587":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:13754:63365":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"2:32596:10171":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:1374:7409":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:47809:179":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:32644:66458":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"2:22904:66975":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"6:6688:15185":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:50398:8952":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"5:4036:12547":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:294:12778":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:11991:11059":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:11689:13041":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:3860:11403":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"26:237:9181":{"crate_id":26,"path":["termcolor","Ansi"],"kind":"struct"},"17:12455:13196":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:51553:11380":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"0:1869:208":{"crate_id":0,"path":["clap","error","Result"],"kind":"typedef"},"16:6190:12108":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:46364:11424":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"2:25023:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"29:4234:14706":{"crate_id":29,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"29:4248:11210":{"crate_id":29,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:10658:10986":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:9160:9041":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"28:0:1574":{"crate_id":28,"path":["atty"],"kind":"module"},"16:5998:11947":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:13529:13503":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:39185:9939":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"6:4332:14735":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"16:7208:12133":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"12:869:10175":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"16:3770:13658":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"9:686:11748":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"1:6569:10998":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:7158:9068":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"12:1103:7407":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"29:5962:15055":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"16:5530:11968":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"29:6928:15204":{"crate_id":29,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:50044:8940":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:47034:9060":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"12:2040:10175":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:12099:11097":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"16:4840:13678":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:5726:11415":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"6:1712:14515":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"29:3959:14611":{"crate_id":29,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:2152:11045":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:10223:12329":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:9275:12863":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:1601:10428":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:13602:13520":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"18:651:12426":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:5005:9140":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"29:4516:14824":{"crate_id":29,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:3491:8788":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:15225:11190":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:0:8627":{"crate_id":17,"path":["object"],"kind":"module"},"1:8439:8847":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:2188:10277":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"6:1721:14521":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:12607:13228":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:53658:11351":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"6:6034:15071":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:3174:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"29:4006:14633":{"crate_id":29,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:50350:11295":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:51832:11381":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:23155:10989":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"17:13515:13501":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"5:7898:240":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"5:6569:10175":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:13167:13413":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:15626:12598":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"29:1722:11203":{"crate_id":29,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"12:940:11086":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:23179:11402":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"2:49671:9104":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"16:3029:12231":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"6:6665:15183":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"6:4218:14703":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:510:12780":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:10093:12399":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:11425:8894":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"12:353:15394":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:23053:11401":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"2:9654:8917":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:10899:12946":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:2884:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"1:10547:11721":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"2:53685:14114":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"18:744:69104":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:3370:216":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"5:6766:8846":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"16:5745:11980":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"14:244:13939":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"5:5616:8846":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:11409:12977":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:46676:10358":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"1:4223:8561":{"crate_id":1,"path":["std","io","stdio","stdout"],"kind":"function"},"6:533:14335":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"18:849:12421":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"16:3461:12239":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:46802:11601":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"16:3686:13656":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"16:4743:13675":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"5:8556:10173":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"2:52046:11349":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:3470:8781":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"23:700:9019":{"crate_id":23,"path":["indexmap","map","IterMut"],"kind":"struct"},"29:5980:15062":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:4446:14786":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:6967:15202":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"12:933:11085":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"18:829:12420":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"24:902:10173":{"crate_id":24,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"17:13196:13421":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"24:1891:10175":{"crate_id":24,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:13293:13440":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:9930:69093":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"29:592:14377":{"crate_id":29,"path":["libc","unix","linger"],"kind":"struct"},"6:1626:14455":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:23142:11395":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"29:1729:14527":{"crate_id":29,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:13776:10585":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"26:105:9178":{"crate_id":26,"path":["termcolor","WriterInnerLock"],"kind":"enum"},"2:49608:9099":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"29:6061:15092":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:15889:8652":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"1:15875:8641":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"16:3478:12238":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:8853:8855":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:46786:11600":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:39145:11721":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"23:1230:11044":{"crate_id":23,"path":["indexmap","set","SymmetricDifference"],"kind":"struct"},"1:7827:11136":{"crate_id":1,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"1:1489:11089":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"5:4287:10175":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:10913:12950":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:10688:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"6:5229:14872":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:50778:10147":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:3254:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"9:996:11816":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"29:5541:15020":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"29:5340:14952":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"29:4066:14661":{"crate_id":29,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:11438:8947":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"29:3983:14624":{"crate_id":29,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"16:2733:7180":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"16:6277:12109":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:9153:8903":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:11189:11192":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"16:7090:12126":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"18:837:8919":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"6:1680:14497":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"6:1764:14536":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:3624:132":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"23:650:10420":{"crate_id":23,"path":["indexmap","map","IntoValues"],"kind":"struct"},"1:10410:11111":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:15882:8647":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"16:5698:11978":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:12716:13239":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"5:7942:12560":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"9:963:11815":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"5:0:284":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:15880:8645":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"6:4179:14700":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:11098:11238":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"17:12262:13146":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:1926:6114":{"crate_id":2,"path":["core","mem"],"kind":"module"},"5:2619:11718":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:23391:18217":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"16:6433:12113":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"24:1169:10428":{"crate_id":24,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:8188:8893":{"crate_id":1,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"17:13539:13506":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"23:1096:10175":{"crate_id":23,"path":["indexmap","set","Drain"],"kind":"struct"},"29:4113:14686":{"crate_id":29,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"5:2266:12548":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"6:5974:15038":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:11168:12965":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:51978:11361":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"16:3155:12232":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:9533:7458":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:10431:11119":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"1:6332:11006":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:12348:13177":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:10660:54542":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:11615:13027":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:8873:159":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"6:5204:14867":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:11500:8898":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"6:4148:14690":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:14057:4997":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"5:444:2245":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:12065:8852":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"16:3743:13657":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"24:1143:10427":{"crate_id":24,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:13660:13562":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:9517:8930":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"17:10198:12890":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:23430:10989":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:11381:12975":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"5:5917:8922":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"24:2120:10427":{"crate_id":24,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"16:4316:13662":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"6:3960:14603":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:783:2795":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"2:50238:11292":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:5971:11208":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:47312:9008":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:46416:11489":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"12:787:10418":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:15886:8649":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"5:844:228":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"16:7281:12063":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:5508:10974":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"25:0:1735":{"crate_id":25,"path":["textwrap"],"kind":"module"},"6:1727:14524":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:49680:9107":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:10962:12954":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:46668:8938":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:48195:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"16:5374:11957":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:3842:8800":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"16:4775:13676":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"8:0:8619":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"16:5498:11966":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:2512:12350":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"5:3814:162":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:14640:63379":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:49357:9090":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"6:4386:14763":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"23:269:7407":{"crate_id":23,"path":["indexmap","map","core","Entry"],"kind":"enum"},"17:11603:13024":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"29:4380:14769":{"crate_id":29,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"5:6347:10179":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"5:1276:11712":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:8448:6173":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"29:5998:15071":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:49106:9200":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:7477:1660":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"17:13763:13582":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"9:722:11751":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"2:46276:202":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"18:611:12427":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"6:5390:14964":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:46879:9045":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"5:1710:1685":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"25:242:8461":{"crate_id":25,"path":["textwrap","Options"],"kind":"struct"},"17:13584:13517":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:14373:11565":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"5:4379:9019":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"26:189:4999":{"crate_id":26,"path":["termcolor","Buffer"],"kind":"struct"},"16:6468:12114":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"12:971:11088":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"18:621:12754":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:10364:12353":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"6:4127:14681":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:24543:11592":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:14794:12597":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:2510:8821":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:52726:11347":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"17:11810:13074":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"16:7741:12136":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:4:989":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"16:7155:12132":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:11700:9110":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"24:878:1685":{"crate_id":24,"path":["hashbrown","map","Values"],"kind":"struct"},"29:1589:14439":{"crate_id":29,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"24:1903:11042":{"crate_id":24,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:12560:12593":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"18:790:12416":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:11653:13031":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:5067:11016":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"5:1626:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"18:169:29302":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"17:11017:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:542:11997":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:2286:11408":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:1441:10173":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"17:13147:13407":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"5:7214:12560":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"17:9920:12875":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"9:692:11750":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"16:5605:11970":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"5:4672:12549":{"crate_id":5,"path":["alloc","collections","vec_deque","spec_extend","spec_extend","WrapAddOnDrop"],"kind":"struct"},"16:6381:12071":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:49940:8942":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:2654:182":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"16:7110:12128":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"29:4076:14668":{"crate_id":29,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:51632:11356":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:12360:13179":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:8635:9042":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:3466:8778":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:3382:225":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"12:815:10420":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"7:38:52027":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:15381:11907":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"6:5288:14903":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:49690:9105":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"16:4495:13668":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"6:5186:14854":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"6:5398:14965":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:15332:15358":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:52070:11350":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:49858:8950":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"29:5946:15043":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"16:6679:12267":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"29:5234:14891":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"12:2036:7847":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:12199:9102":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"26:97:9177":{"crate_id":26,"path":["termcolor","WriterInner"],"kind":"enum"},"16:7169:12074":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:12585:13217":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:7532:10585":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"1:2361:10195":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:11713:13045":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"16:5902:12099":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:1466:11086":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:6212:10998":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"9:603:15835":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:47303:9035":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:9786:12873":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:46895:9046":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:10166:12888":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:10271:12589":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:13215:13422":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"29:4255:14707":{"crate_id":29,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"16:7079:12125":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:48590:8832":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:15879:8644":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"1:15308:14234":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:15890:8653":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:46917:7472":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:9326:12385":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:10489:17393":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"16:6286:11896":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:10390:12359":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:10704:8999":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:13840:13603":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"9:0:8620":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"6:5433:14979":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:4485:8988":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"1:2397:10205":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"26:59:9172":{"crate_id":26,"path":["termcolor","IoStandardStream"],"kind":"enum"},"0:1958:1664":{"crate_id":0,"path":["clap","parser"],"kind":"module"},"17:8929:54351":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"5:8321:7847":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"16:6089:12103":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:607:12782":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"6:1748:14531":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:47294:8851":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"16:7637:12134":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:50574:11610":{"crate_id":2,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"15:248:11899":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:3474:8785":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:12209:13139":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:11714:9109":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:24924:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"2:8631:9043":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:51501:11388":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:53705:14116":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:8490:8849":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:3085:2034":{"crate_id":1,"path":["std","io"],"kind":"module"},"6:521:14329":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:23106:11397":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"16:5326:11954":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:3537:8794":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"0:103:1913":{"crate_id":0,"path":["clap","command"],"kind":"macro"},"5:8239:11672":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:8668:137":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"29:1520:14400":{"crate_id":29,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:859:11115":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:3750:6566":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:9420:65961":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"17:12237:13144":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:49153:14079":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"6:593:14372":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:11234:12338":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"15:0:8625":{"crate_id":15,"path":["addr2line"],"kind":"module"},"17:2543:12387":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:10489:12894":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"5:2843:11717":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"29:1547:14411":{"crate_id":29,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"5:984:11670":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:3381:12570":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"6:4315:14727":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:5752:788":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:3478:8783":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:13336:8923":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:53696:14115":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:1991:146":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:14460:142":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"18:694:12432":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:9534:9473":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:10907:9007":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:14135:11121":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:48363:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:12731:13243":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"18:754:69101":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:10575:8831":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:10253:12327":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:12075:215":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:46337:7468":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"5:3106:15277":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:9873:12874":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"6:5547:15006":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"16:3103:12242":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:5085:7924":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:48860:108":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"17:13549:13509":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:11968:13101":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"22:434:8967":{"crate_id":22,"path":["os_str_bytes","raw_str","RawOsString"],"kind":"struct"},"12:750:7409":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"14:56:12992":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"13:0:8617":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:11243:11248":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:3819:8798":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:14453:8987":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"6:4135:14686":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"29:5285:14916":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:10038:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"22:190:12449":{"crate_id":22,"path":["os_str_bytes","pattern","Encoded"],"kind":"trait"},"17:10445:12824":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"6:6954:15201":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:2956:180":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"1:11898:63396":{"crate_id":1,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"25:103:8279":{"crate_id":25,"path":["textwrap","core","display_width"],"kind":"function"},"17:10545:12899":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:51654:11360":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:1031:1864":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:11285:15071":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"29:4418:14783":{"crate_id":29,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"12:0:8623":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"2:3449:8777":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:11847:10586":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"1:2359:10194":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1:11238:11245":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:49776:8930":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"26:0:1578":{"crate_id":26,"path":["termcolor"],"kind":"module"},"2:3503:2032":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"12:2392:15206":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:12060:165":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"16:6099:12104":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"5:8233:7847":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"12:979:11089":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"17:12130:13129":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"16:5923:12100":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"29:5393:14977":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:47850:7409":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"5:8473:15278":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"29:6916:15202":{"crate_id":29,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"6:3981:14611":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"5:8256:11673":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:53474:11383":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:12674:13235":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:11305:12971":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"15:230:11898":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"12:1256:11090":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"16:3177:12233":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:13600:10591":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"24:1001:11089":{"crate_id":24,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:15031:11073":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"6:5426:14978":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"29:571:14366":{"crate_id":29,"path":["libc","unix","iovec"],"kind":"struct"},"16:7782:12066":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"16:5948:12225":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:14187:14027":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"16:4467:13667":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"29:4340:14750":{"crate_id":29,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"6:5439:14982":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:7727:11135":{"crate_id":1,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"5:4772:12551":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"16:6595:12072":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:22906:66970":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"6:1588:14431":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"29:1615:14455":{"crate_id":29,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:11797:13073":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:10845:9197":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:11725:13046":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"16:2792:11991":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"25:190:9156":{"crate_id":25,"path":["textwrap","line_ending","LineEnding"],"kind":"enum"},"1:8210:11728":{"crate_id":1,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"17:11530:13012":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:3405:8993":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"12:1238:11881":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"5:8368:8877":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:15883:8648":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"6:4526:14819":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:8708:8851":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:13852:10584":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:13247:13434":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"29:4196:14703":{"crate_id":29,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"29:1556:14416":{"crate_id":29,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:24392:11475":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:11905:15355":{"crate_id":1,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"1:15897:8660":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"1:4258:9002":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"12:928:10419":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:4428:8986":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:12143:12913":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"16:6907:12121":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:1105:14134":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"23:44:12454":{"crate_id":23,"path":["indexmap","mutable_keys","PrivateMarker"],"kind":"struct"},"24:362:15394":{"crate_id":24,"path":["hashbrown","raw","inner","RawIterRange"],"kind":"struct"},"16:5460:11964":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:49958:8943":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:53620:11386":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"16:5649:11973":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"29:6099:15103":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:2422:10212":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:1578:7407":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"6:4296:14719":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"18:896:12425":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"16:6518:12073":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:6917:9574":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"17:10571:12310":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:53810:14123":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:49808:8946":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:48930:10000":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"12:1183:11879":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:9636:12870":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:1387:9019":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:46935:9053":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:11563:13019":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"22:196:8917":{"crate_id":22,"path":["os_str_bytes","pattern","Pattern"],"kind":"trait"},"23:724:7847":{"crate_id":23,"path":["indexmap","map","IntoIter"],"kind":"struct"},"2:13346:8917":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:3529:8792":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:11835:184":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"5:8479:221":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"16:5443:11963":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:9432:65959":{"crate_id":1,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"2:47116:9066":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:5556:10977":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:46604:10365":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:22866:66918":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"2:49161:14080":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:47985:9019":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"17:12660:13232":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:24076:11337":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:47934:208":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:5705:8762":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"6:1912:48474":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:14463:66022":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:13908:13623":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:9716:69096":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:14953:14232":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:8681:8737":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:47917:9609":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"9:809:8893":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"16:4942:13681":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:48583:8831":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"24:1887:7847":{"crate_id":24,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:2126:10175":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:3177:150":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"6:5311:14916":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"29:4424:14786":{"crate_id":29,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:11015:11022":{"crate_id":1,"path":["std","net","ip_addr","Ipv4Addr"],"kind":"struct"},"29:6148:15137":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"29:663:47500":{"crate_id":29,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"1:7132:189":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"16:0:8626":{"crate_id":16,"path":["gimli"],"kind":"module"},"6:5274:14902":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"0:105:1932":{"crate_id":0,"path":["clap","arg"],"kind":"macro"},"29:4045:14650":{"crate_id":29,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:15896:8659":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"17:9466:12776":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:24990:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:23772:18236":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"12:162:9119":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:14961:10593":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"29:4310:14735":{"crate_id":29,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:14363:10144":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"17:12573:13215":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"6:6129:15102":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"29:6207:15170":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"6:4048:14642":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:10503:12391":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:12892:13255":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:11281:11010":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"29:1901:48474":{"crate_id":29,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:13306:13445":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:47332:9039":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"17:11212:12340":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:3848:8802":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:10562:110":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"6:4509:14811":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"5:8490:10952":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:50089:8936":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"12:777:7847":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:23767:11343":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"6:6896:15187":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:13938:13628":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:2123:7847":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"29:4033:14645":{"crate_id":29,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:11481:8926":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:15898:8661":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"29:625:14395":{"crate_id":29,"path":["libc","unix","protoent"],"kind":"struct"},"1:9260:29048":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:10800:143":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:10583:8830":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:10717:14025":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"6:4208:14702":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"12:764:9019":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:7463:10583":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:51401:11387":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"29:5452:14992":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:11671:13040":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"16:6026:12054":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:13735:13575":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:4008:12787":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:10240:12324":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:46371:9132":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"23:312:10428":{"crate_id":23,"path":["indexmap","map","core","VacantEntry"],"kind":"struct"},"1:11049:11096":{"crate_id":1,"path":["std","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:50375:11297":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:48809:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"29:1651:14485":{"crate_id":29,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"9:1020:11817":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:11142:12964":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:8672:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:9291:12772":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:2141:11043":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"5:1760:11710":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"16:7051:12123":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:14788:12596":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"6:4038:14639":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:25155:11579":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"29:1716:14524":{"crate_id":29,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:4440:14783":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"6:5366:14952":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"5:8264:67637":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"5:7365:12547":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:3836:138":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"16:5869:192":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:11591:13023":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:23439:11342":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:11314:12386":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:57953:14132":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"6:5260:14891":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"5:1729:10418":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:49994:8944":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"16:5685:11977":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:15064:11081":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"23:927:8278":{"crate_id":23,"path":["indexmap","set","IndexSet"],"kind":"struct"},"23:409:7475":{"crate_id":23,"path":["indexmap","map","IndexMap"],"kind":"struct"},"16:6604:12118":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:4476:65732":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"17:13257:13435":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"29:5521:15006":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"16:6858:12271":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:10622:12907":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"5:3825:7409":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"12:472:29294":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:11134:11018":{"crate_id":1,"path":["std","net","socket_addr","SocketAddr"],"kind":"enum"},"1:4383:8976":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"5:3554:10173":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"26:29:8559":{"crate_id":26,"path":["termcolor","WriteColor"],"kind":"trait"},"16:7792:12094":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:12527:13208":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:10211:12891":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"5:3960:11729":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"26:92:9175":{"crate_id":26,"path":["termcolor","StandardStreamLock"],"kind":"struct"},"1:15016:11072":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:2859:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"29:3971:14615":{"crate_id":29,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:32630:10172":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"6:1531:14400":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"16:5303:11953":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"16:6075:12058":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:48405:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:8954:12308":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"6:6925:15194":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"24:1923:11045":{"crate_id":24,"path":["hashbrown","set","Union"],"kind":"struct"},"6:6243:15170":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:52000:11364":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:13421:13472":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:10801:12297":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:11672:8949":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"6:5216:14871":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"29:6851:15188":{"crate_id":29,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:8375:9007":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"29:5407:14979":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:24173:11575":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:12221:1668":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"6:6057:15089":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:12282:13152":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:11282:54360":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:49519:11543":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"5:8278:7847":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"16:6407:12112":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:56678:242":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:24315:14029":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"6:527:14332":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:53582:11366":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"16:6331:11895":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"14:47:13934":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"23:194:10425":{"crate_id":23,"path":["indexmap","map","core","IndexMapCore"],"kind":"struct"},"1:4217:4997":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:13887:13617":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:49619:9089":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"5:5395:203":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:47993:7847":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"1:15895:8658":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"23:1174:11043":{"crate_id":23,"path":["indexmap","set","Difference"],"kind":"struct"},"1:7086:14143":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:49570:9097":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"29:1610:14453":{"crate_id":29,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"9:469:15825":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"6:1733:11203":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"9:41:11800":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"6:586:14369":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:49748:8935":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:11945:13096":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"16:4573:13669":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"29:3938:14603":{"crate_id":29,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:49645:9045":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:7449:10582":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"29:1710:14521":{"crate_id":29,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:8021:9052":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:46729:10361":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:10436:11134":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"6:4379:14761":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"21:105:8016":{"crate_id":21,"path":["clap_lex","ParsedArg"],"kind":"struct"},"2:14152:190":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"23:116:12750":{"crate_id":23,"path":["indexmap","map","core","raw","DebugIndices"],"kind":"struct"},"1:3284:8997":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:9136:11037":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:11701:13044":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"12:2404:69089":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"18:811:12418":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"18:774:12755":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"29:3950:14606":{"crate_id":29,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:11249:11202":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"6:1694:14508":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"6:6205:15151":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"6:4055:14645":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"18:720:12756":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"16:6012:12056":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:3627:133":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:10187:12889":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"16:7141:12131":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:11628:13029":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:10522:135":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:49122:9199":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"16:2959:12229":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:52426:11382":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:13016:13358":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:5231:9132":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"29:4094:14677":{"crate_id":29,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:3542:8795":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:4178:9003":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:11389:7409":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"12:1881:146":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"6:618:14385":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:12646:13231":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"6:4110:14674":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"5:5495:8976":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"0:215:1658":{"crate_id":0,"path":["clap","builder"],"kind":"module"},"2:47321:9037":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"14:250:13941":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:50513:11557":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:56639:242":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:6474:15086":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:10571:8825":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"6:4425:14776":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"6:607:14380":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:11769:13063":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:12007:11060":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"29:5267:14904":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"5:777:14010":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"24:1639:12545":{"crate_id":24,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:22851:66918":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"24:837:10420":{"crate_id":24,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:13387:10205":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"1:2917:8985":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"17:13271:13436":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:7592:2109":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"6:5293:14904":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:3525:8791":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:9427:12586":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"17:11784:13069":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"29:4138:14699":{"crate_id":29,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:4485:14804":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:39149:11394":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"1:4036:9010":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"24:809:10418":{"crate_id":24,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:51447:11367":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:11194:11193":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"6:601:14377":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"24:2131:10428":{"crate_id":24,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"24:2242:15206":{"crate_id":24,"path":["hashbrown","raw","inner","sse2","Group"],"kind":"struct"},"2:23232:10989":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"24:1910:11043":{"crate_id":24,"path":["hashbrown","set","Difference"],"kind":"struct"},"6:4256:14706":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:56652:242":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"29:1565:14422":{"crate_id":29,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:14076:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:6638:10988":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:11474:12997":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:12776:11654":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:50505:11552":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"1:11157:11019":{"crate_id":1,"path":["std","net","socket_addr","SocketAddrV4"],"kind":"struct"},"5:4516:7409":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"29:4394:14773":{"crate_id":29,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:50313:11294":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:49353:11656":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:10147:12887":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:12093:13124":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"6:3877:14542":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:0:495":{"crate_id":2,"path":["core"],"kind":"module"},"17:13557:13510":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"12:2066:11044":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"29:4494:14814":{"crate_id":29,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:12003:13105":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:10949:12953":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"5:2376:11734":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"16:4689:13673":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:9064:54354":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1:10504:17395":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"5:6858:8976":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"29:6193:15161":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:5305:9135":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:46769:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:10641:10985":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:28334:11321":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"29:6903:15201":{"crate_id":29,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:46736:10362":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"6:4061:14647":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:47075:9064":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:11200:10989":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"24:974:11087":{"crate_id":24,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"6:4410:14772":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:50207:11288":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"16:547:11975":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"6:6908:15189":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"16:4599:13670":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:2466:1663":{"crate_id":1,"path":["std","error"],"kind":"module"},"29:1526:14403":{"crate_id":29,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"6:634:14395":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"6:6135:15103":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:47977:7409":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"5:5868:12547":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:11907:13085":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:12070:214":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"29:4126:14690":{"crate_id":29,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"9:157:11767":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"16:3265:12237":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"29:4208:14704":{"crate_id":29,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:50529:11559":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:10787:7214":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"1:15874:8640":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:49766:8931":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:853:11114":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"16:5887:11986":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:12496:13202":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"16:5668:11974":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"6:1551:14408":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:24517:11627":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"5:7558:12547":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:10648:11148":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"17:10814:12298":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:8089:11136":{"crate_id":1,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"6:3972:14606":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:15894:8657":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"16:7684:12069":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"16:5362:11956":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:6234:10995":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:53224:11359":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:15887:8650":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:50286:11293":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:2911:11147":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:46926:9047":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"16:6060:12097":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:49143:8893":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"1:14623:10207":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"12:183:11885":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"24:799:7847":{"crate_id":24,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"16:6159:12061":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"24:1260:11881":{"crate_id":24,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:5041:9141":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"5:3407:11665":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"29:6874:15194":{"crate_id":29,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"5:4317:12547":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:46996:9059":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:299:12779":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"18:729:69103":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:11558:9111":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"6:4340:14739":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"6:5447:14984":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:51571:14087":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"29:4318:14739":{"crate_id":29,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:10579:192":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:10573:8824":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"17:9948:12876":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:50509:11555":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"29:6607:15182":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:13369:13460":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:13975:13635":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:13921:12594":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"29:6863:15190":{"crate_id":29,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:52538:11370":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:9551:12587":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"2:46955:9055":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"24:574:144":{"crate_id":24,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:2765:586":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:14060:2046":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"6:1621:14453":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:11640:13030":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"16:5176:13683":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"6:4160:14699":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:13859:13608":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:12318:13158":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"16:6717:12120":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:13323:13450":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:13155:13408":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:10516:12895":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"16:3129:12241":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"6:1662:14485":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"16:7768:12065":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:5154:9125":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"5:3104:4342":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"6:5541:15005":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:10304:12351":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"29:562:14360":{"crate_id":29,"path":["libc","unix","hostent"],"kind":"struct"},"6:4532:14821":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:46656:10367":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"6:5488:14994":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:10986:8940":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:2969:187":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"5:4588:11700":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"5:3838:9019":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"29:5248:14902":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"16:7659:12135":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:50562:11100":{"crate_id":2,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"1:15317:63376":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"29:3885:14560":{"crate_id":29,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:2263:11404":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:8725:11224":{"crate_id":1,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"29:6232:15176":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"6:1606:14441":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:15899:8662":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:3594:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:13377:13462":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"16:5238:52778":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:46125:8804":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"29:150:47168":{"crate_id":29,"path":["libc","unix","FILE"],"kind":"enum"},"2:50533:11553":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:52024:11346":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"29:5178:14867":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:52199:14092":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:10210:12783":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:9646:69099":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:12551:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"6:5240:14880":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:612:14382":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"29:6629:15183":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"16:4660:13672":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:5281:11197":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:56243:11418":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"29:4370:14766":{"crate_id":29,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"16:6691:12119":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:46945:9054":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:13522:13502":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:5536:10352":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"5:8427:11600":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"23:1075:7409":{"crate_id":23,"path":["indexmap","set","Iter"],"kind":"struct"},"17:10291:12352":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"29:4299:14730":{"crate_id":29,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:12512:13204":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"12:1203:11880":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"24:187:11885":{"crate_id":24,"path":["hashbrown","raw","inner","RawTable"],"kind":"struct"},"17:13440:13479":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:25524:11457":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"27:93:10436":{"crate_id":27,"path":["strsim","StrSimError"],"kind":"enum"},"29:1658:14489":{"crate_id":29,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:6834:11035":{"crate_id":1,"path":["std","os","net","tcp","TcpStreamExt"],"kind":"trait"},"21:0:1733":{"crate_id":21,"path":["clap_lex"],"kind":"module"},"17:12758:13246":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"0:4647:128":{"crate_id":0,"path":["clap","error","Error"],"kind":"struct"},"1:10221:14235":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:7775:12571":{"crate_id":1,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"29:5462:14994":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:13073:13396":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"6:6931:15195":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"29:4265:14714":{"crate_id":29,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:6027:15067":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"16:3051:12288":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"29:6880:15195":{"crate_id":29,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:14410:14230":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"6:6979:15204":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:10696:11170":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:48447:3078":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"15:269:11903":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:10979:8947":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"29:4176:14701":{"crate_id":29,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"29:4059:14658":{"crate_id":29,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"18:637:12755":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:11593:8946":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"29:4452:14798":{"crate_id":29,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:11686:8948":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"5:1518:10428":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"6:1600:14439":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"16:6980:12122":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"6:3933:14580":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:3831:230":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"16:7754:12137":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:3607:8796":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:11032:11023":{"crate_id":1,"path":["std","net","ip_addr","Ipv6Addr"],"kind":"struct"},"6:4402:14769":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:9676:69094":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:15163:11024":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"24:444:11882":{"crate_id":24,"path":["hashbrown","raw","inner","RawDrain"],"kind":"struct"},"2:5221:9131":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"26:217:9180":{"crate_id":26,"path":["termcolor","NoColor"],"kind":"struct"},"24:2259:69089":{"crate_id":24,"path":["hashbrown","raw","inner","Fallibility"],"kind":"enum"},"1:13737:1660":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"16:7100:12127":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"5:3110:67636":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:48321:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"12:1121:10427":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:48576:8825":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:32636:10279":{"crate_id":2,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"1:3058:11157":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"18:857:12422":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:13366:8916":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"5:8248:10175":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"23:1202:11042":{"crate_id":23,"path":["indexmap","set","Intersection"],"kind":"struct"},"2:13412:11287":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"6:6943:15197":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:50541:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:37953:8812":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:12332:12568":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"29:512:14329":{"crate_id":29,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:52456:11385":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"6:5149:14828":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:23966:11039":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"5:1256:29304":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:12589:14218":{"crate_id":1,"path":["std","sys","unix","fs","TimespecDebugAdapter"],"kind":"struct"},"5:1701:7405":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:51691:11345":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:12482:13199":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:1483:11088":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"19:0:1004":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"18:0:8628":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:47025:9048":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"29:0:807":{"crate_id":29,"path":["libc"],"kind":"module"},"6:6268:15176":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:2277:11407":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:10249:11530":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"29:4504:14819":{"crate_id":29,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"16:3908:13659":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"16:3576:12793":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"29:3965:14612":{"crate_id":29,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"16:7355:12059":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"6:6671:15268":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"12:2045:10173":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"2:49734:8939":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"9:27:11799":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"1:4143:11177":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:7595:10589":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"29:5221:14882":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"24:1917:11044":{"crate_id":24,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:5159:9126":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"29:4220:14705":{"crate_id":29,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:1088:7018":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:10127:12363":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"5:8501:10953":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"6:6114:15097":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:13017:11545":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"21:135:8055":{"crate_id":21,"path":["clap_lex","ShortFlags"],"kind":"struct"},"1:4140:11176":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"5:3402:11043":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:11402:8893":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"16:3077:12289":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:11413:9019":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:53716:14117":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"16:7702:12068":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"11:54:11870":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"25:177:9155":{"crate_id":25,"path":["textwrap","wrap_algorithms","WrapAlgorithm"],"kind":"enum"},"5:5913:8921":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:10806:143":{"crate_id":2,"path":["core","hash","macros","Hash"],"kind":"proc_derive"},"17:12222:13141":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:46987:9058":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"6:4392:14766":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"24:2248:3098":{"crate_id":24,"path":["hashbrown","raw","inner","alloc","inner","Global"],"kind":"struct"},"16:6557:12117":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"6:6643:15182":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"6:5331:14932":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"16:5941:12101":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"29:5429:14986":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:11433:12991":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"16:3366:12243":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"6:4020:14630":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:9539:12337":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"16:6035:12096":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"16:4903:13680":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:24:607":{"crate_id":2,"path":["core","env"],"kind":"macro"},"16:4271:13661":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"16:2772:12252":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:9556:12588":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"1:3044:11153":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:47065:9063":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:48842:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"5:3462:11045":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:11945:11054":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:3755:11106":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"29:6857:15189":{"crate_id":29,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:6642:11002":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"6:3987:14612":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"5:2328:11715":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"23:1469:9118":{"crate_id":23,"path":["indexmap","HashValue"],"kind":"struct"},"12:2419:8877":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:10421:63375":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"2:49894:8949":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"6:6902:15188":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"29:6845:15187":{"crate_id":29,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"6:4005:14624":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:11937:7409":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:49912:8948":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"6:4270:11210":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:6093:11209":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:5500:10973":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:51602:11368":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"16:7247:12091":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:12170:13134":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:3679:4747":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"1:14879:66020":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"6:5419:14977":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:15877:8643":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"5:1663:7409":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"18:678:143":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"23:22:9122":{"crate_id":23,"path":["indexmap","equivalent","Equivalent"],"kind":"trait"},"2:51902:11369":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"9:234:11775":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"2:49598:9098":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"12:1162:11878":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"29:4120:14688":{"crate_id":29,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:3411:6205":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"16:4411:13665":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"12:379:11884":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"29:5372:14965":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"24:1278:11090":{"crate_id":24,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:15893:8656":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"18:866:12423":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:46699:10359":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"5:6746:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:13573:13513":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"6:6097:15092":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:13428:13473":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"23:1480:9119":{"crate_id":23,"path":["indexmap","Bucket"],"kind":"struct"},"29:6637:15185":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"16:6173:12107":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"16:6549:12075":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:53795:14122":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"16:4716:13674":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:3439:8775":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:47287:9033":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"26:95:9176":{"crate_id":26,"path":["termcolor","BufferedStandardStream"],"kind":"struct"},"2:50054:8941":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:6639:9057":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:5285:9134":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:4496:7847":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"16:6504:12116":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:3183:234":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"16:5516:11967":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"16:7309:12062":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"26:357:8558":{"crate_id":26,"path":["termcolor","ColorSpec"],"kind":"struct"},"17:10464:12388":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"29:4324:14741":{"crate_id":29,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"5:7484:7847":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:11031:54358":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:52662:11362":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:47016:7474":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:4790:8976":{"crate_id":2,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"6:626:14390":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"5:4017:10173":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"1:7429:10581":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:3109:8964":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"16:7323:12079":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"2:50064:8927":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:10033:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:12800:8928":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:13452:13480":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"5:8315:7847":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"24:478:29293":{"crate_id":24,"path":["hashbrown","raw","inner","RawIterHash"],"kind":"struct"},"16:6873:9471":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"12:1666:11889":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:23384:10989":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:10973:8930":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:24510:7190":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"12:1784:12545":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:10527:10200":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"0:1621:2257":{"crate_id":0,"path":["clap","value_parser"],"kind":"macro"},"2:13128:8926":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:2147:11044":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"16:4439:13666":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"16:3007:12230":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"6:3920:14570":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:10318:12363":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:3060:11158":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"29:1623:14460":{"crate_id":29,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:13352:13457":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:9033:54353":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"29:4157:14700":{"crate_id":29,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:10586:12904":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:1113:17396":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:11257:11191":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"29:556:14357":{"crate_id":29,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:1108:14136":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:15876:8642":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"1:1452:10418":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:48894:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"2:13054:11546":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"24:786:9019":{"crate_id":24,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:56665:242":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:1431:10175":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"23:576:10418":{"crate_id":23,"path":["indexmap","map","IntoKeys"],"kind":"struct"},"12:856:1685":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"2:4872:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"29:5214:14880":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:48002:181":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:11078:15353":{"crate_id":1,"path":["std","net","ip_addr","fmt","Span"],"kind":"struct"},"1:2420:1668":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"29:4293:14727":{"crate_id":29,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"6:1537:14403":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:14887:11097":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"2:50073:8925":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"5:2005:10173":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"6:4075:14655":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:46859:8763":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"12:952:11087":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"29:1737:14531":{"crate_id":29,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"6:5982:15043":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"29:4334:14747":{"crate_id":29,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"6:1558:14411":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"29:4432:14791":{"crate_id":29,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:11494:7409":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"17:9579:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"29:81:47102":{"crate_id":29,"path":["libc","unix","DIR"],"kind":"enum"},"17:10340:12355":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:25089:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"17:9756:69091":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"16:7449:12067":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:52168:14091":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"5:1719:10419":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"0:0:1736":{"crate_id":0,"path":["clap"],"kind":"module"},"1:8180:11136":{"crate_id":1,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"16:2754:11990":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:13474:11101":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"2:57974:14133":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"12:2052:11042":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:11352:8883":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"5:8286:197":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"24:2274:8877":{"crate_id":24,"path":["hashbrown","TryReserveError"],"kind":"enum"},"5:6782:11690":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"29:6169:15151":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:53412:11363":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"3:0:438":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"6:4028:14633":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"23:0:1734":{"crate_id":23,"path":["indexmap"],"kind":"module"},"29:4364:14763":{"crate_id":29,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"29:3874:14552":{"crate_id":29,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"23:548:7405":{"crate_id":23,"path":["indexmap","map","Keys"],"kind":"struct"},"27:52:10441":{"crate_id":27,"path":["strsim","StringWrapper"],"kind":"struct"},"2:46212:198":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"16:3340:11989":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:9958:69098":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"24:917:11872":{"crate_id":24,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"1:6460:10976":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"16:6643:12264":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"14:231:10955":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:51357:14085":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"6:6856:15186":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:46330:8799":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"29:4487:14811":{"crate_id":29,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:11181:12967":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"6:539:14337":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:1405:7405":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"5:5983:1358":{"crate_id":5,"path":["alloc","str"],"kind":"module"},"17:13747:13578":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:22838:8812":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"29:4274:14719":{"crate_id":29,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:7055:14143":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:3519:8790":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"29:5275:14909":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:48569:8824":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"6:4373:14758":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:4153:9022":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"1:15891:8654":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:23236:11038":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"29:3911:14580":{"crate_id":29,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:10810:147":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:46254:200":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:10543:10207":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:10530:12896":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:53780:14121":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"3:321:208":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"7:85:52034":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"0:1792:1663":{"crate_id":0,"path":["clap","error"],"kind":"module"},"2:50675:204":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:3661:8803":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"16:5639:11971":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"2:46973:14069":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"6:5582:15031":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:14054:9003":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:22885:66972":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:15246:11197":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"5:8413:8747":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:2909:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"6:161:47169":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"17:12070:13118":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:10422:12893":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:46098:8807":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"16:6630:12263":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"18:885:12424":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:4180:9004":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:2481:8820":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"1:15901:8664":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"17:11013:12958":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:10874:12944":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:14387:15403":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"2:50012:8945":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:10115:12401":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"6:4116:14677":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:12157:13133":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:6470:15082":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"17:10988:12956":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"18:766:12766":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:4410:8984":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"29:530:14337":{"crate_id":29,"path":["libc","unix","rlimit"],"kind":"struct"},"2:13275:1861":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:50525:11558":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:13794:13589":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:5578:10980":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"29:603:14382":{"crate_id":29,"path":["libc","unix","itimerval"],"kind":"struct"},"29:4053:14655":{"crate_id":29,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:46232:201":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:48237:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"16:3494:12789":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:46715:8936":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:47096:8991":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:51672:14088":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:11883:15402":{"crate_id":1,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"16:2937:12251":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:9160:12339":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:23242:11040":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:8639:14145":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"16:6533:12258":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:2181:585":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"1:7415:8590":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:32696:66454":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"14:216:52707":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"26:78:9173":{"crate_id":26,"path":["termcolor","IoStandardStreamLock"],"kind":"enum"},"2:46595:14058":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"16:3314:11988":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:11547:13014":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:6640:11001":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"24:1205:11879":{"crate_id":24,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:5154:11189":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:13037:13367":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:48872:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:8716:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:3444:8780":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"6:3993:14615":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:50098:8937":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"16:7471:12055":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"5:8380:8878":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"29:536:14340":{"crate_id":29,"path":["libc","unix","rusage"],"kind":"struct"},"6:4230:14704":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"6:1567:14416":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"5:1296:11713":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:5752:11250":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:49658:9088":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:11978:11058":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"5:3441:11666":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"16:7264:197":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"14:189:13934":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"17:13345:13455":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"5:8456:8746":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"12:432:11882":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:3070:11163":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"29:3855:14542":{"crate_id":29,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:13785:13587":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:21:679":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"24:962:11086":{"crate_id":24,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:13404:13465":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:5276:9133":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:4102:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"23:1269:11045":{"crate_id":23,"path":["indexmap","set","Union"],"kind":"struct"},"10:0:8621":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"5:3428:11044":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:11354:12301":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:9156:9020":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"12:880:10173":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"26:427:9183":{"crate_id":26,"path":["termcolor","ParseColorErrorKind"],"kind":"enum"},"17:10476:12390":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:2044:8976":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:47085:9050":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:11484:8896":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"6:1576:14422":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:48111:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:48279:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"16:6342:12111":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:25056:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"2:3376:9138":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:3486:8784":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:3042:11152":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"29:3998:14630":{"crate_id":29,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:39109:8026":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:3513:8789":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:973:11136":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"16:7868:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:9988:54404":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"5:1072:7409":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:8538:8859":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"6:672:47500":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:47866:7847":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"6:4081:14658":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:12117:13126":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:12557:13211":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"6:88:47102":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:50693:193":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:50766:11400":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:11887:63434":{"crate_id":1,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"17:12431:13193":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:49114:14074":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"5:1547:11090":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:11754:13057":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"5:5955:12555":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"1:11307:11000":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:11514:13008":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:24465:28764":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"6:4277:14707":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:11121:11239":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"5:3948:9001":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"5:7055:11663":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:13873:13610":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"29:6093:15102":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"5:7760:10180":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"17:10598:12905":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:50170:11284":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"5:3114:67634":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:24444:28772":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"16:7826:6597":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:1146:17397":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"29:5123:14828":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"6:1669:14489":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"24:1883:7409":{"crate_id":24,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:46589:8937":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:3278:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:24419:14035":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:3171:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"1:14372:11012":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"6:4067:14650":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:9387:12585":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:6899:66417":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"2:8741:7849":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"29:1693:14514":{"crate_id":29,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:47875:9471":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"5:8396:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"16:5217:11994":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:13233:13430":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:1397:7847":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"29:4286:14726":{"crate_id":29,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:2391:9139":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"29:1701:14515":{"crate_id":29,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"29:5991:15067":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:5478:14992":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"6:6229:15161":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:5405:14966":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:50517:11556":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"5:6505:229":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"29:5400:14978":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"12:2280:10428":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"29:4088:14674":{"crate_id":29,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:1447:10419":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:49840:8951":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:2651:183":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"16:3402:11992":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"12:2072:11045":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"17:10455:12389":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:15888:8651":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:52380:11378":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"5:8443:8745":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:46722:10360":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"6:6016:15062":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:15892:8655":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:12543:13209":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"28:8:2045":{"crate_id":28,"path":["atty","Stream"],"kind":"enum"},"6:4464:14797":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"16:5566:11969":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:13953:13629":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"6:5178:14852":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"12:559:144":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:6566:11011":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"29:5152:14852":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"29:1515:14398":{"crate_id":29,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"6:4308:14726":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"12:466:29293":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"29:504:2011":{"crate_id":29,"path":["libc","unix","group"],"kind":"struct"},"17:8902:54350":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:15900:8663":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"11:0:8622":{"crate_id":11,"path":["adler"],"kind":"module"},"29:4016:14639":{"crate_id":29,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"16:5959:11995":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"29:1533:14406":{"crate_id":29,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:9532:7459":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:10512:2035":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1:5853:11199":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:997:11009":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"22:114:10989":{"crate_id":22,"path":["os_str_bytes","private","Sealed"],"kind":"trait"},"29:4388:14772":{"crate_id":29,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"16:5855:11984":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"6:5567:15020":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"5:4701:241":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:49579:9096":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:13029:13365":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"16:5427:11962":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:13472:13487":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:12687:13236":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"27:0:1576":{"crate_id":27,"path":["strsim"],"kind":"module"},"12:895:11872":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"29:4463:14804":{"crate_id":29,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:32992:10280":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:11742:13054":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:10136:12874":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"6:4538:14824":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:11494:13007":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"29:524:14335":{"crate_id":29,"path":["libc","unix","timespec"],"kind":"struct"},"17:9087:54355":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"16:4628:13671":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"29:5971:15061":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"6:3966:14604":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:14111:67369":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:9183:12306":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:47053:9062":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:7932:11136":{"crate_id":1,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"16:5348:11955":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:3498:8786":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:9396:12774":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:12921:13275":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"5:1909:12547":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"12:2412:15209":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"29:154:47169":{"crate_id":29,"path":["libc","unix","fpos_t"],"kind":"enum"},"24:0:8623":{"crate_id":24,"path":["hashbrown"],"kind":"module"},"2:51948:11357":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:1236:12784":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:3380:107":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"1:11183:11191":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:3803:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"1:1261:144":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:46755:10363":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:3459:9000":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"6:4434:14782":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:11511:8899":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:13077:11547":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:1477:11087":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:10792:1681":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:12558:11146":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"17:9206:54357":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:14772:12595":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:46849:8764":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"5:1055:11671":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"29:617:14390":{"crate_id":29,"path":["libc","unix","servent"],"kind":"struct"},"6:6120:15099":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:12046:8850":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:11169:11020":{"crate_id":1,"path":["std","net","socket_addr","SocketAddrV6"],"kind":"struct"},"17:10407:12348":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:9361:12773":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:11822:13077":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:2502:10143":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:2484:54442":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:14855:10586":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:50082:8924":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:13129:13402":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:24957:11139":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:2135:11042":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"18:820:12419":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"16:6656:12265":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"16:6931:12274":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:10636:11146":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:11256:12968":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:50364:11296":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"5:1673:9019":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"29:6214:15173":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:12118:11098":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:24481:28773":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1:8770:8860":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:23978:66922":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:5723:11246":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"13:121:52673":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:50521:11560":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:3379:222":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"16:4871:13679":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"12:1147:10428":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"16:5412:11961":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:52692:11365":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"6:4088:14661":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:15842:15843":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"23:746:10175":{"crate_id":23,"path":["indexmap","map","Drain"],"kind":"struct"},"2:23441:11341":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:14905:15357":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"2:3533:8793":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:15058:11080":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"24:165:9119":{"crate_id":24,"path":["hashbrown","raw","inner","Bucket"],"kind":"struct"},"17:10058:12404":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:50107:8938":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:3454:8776":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"17:13774:13586":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:11937:13094":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:10966:8991":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1:14627:10994":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"24:1896:10173":{"crate_id":24,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"6:4321:14730":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:24404:11476":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"5:7967:12564":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"24:950:10419":{"crate_id":24,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"5:3105:67635":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"29:6044:15090":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:5739:11249":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"16:7721:12070":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:3801:208":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"6:157:47168":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"17:10048:12884":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:3618:8736":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:9004:54352":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"18:645:12429":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"5:981:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:49588:9100":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"5:2396:11714":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:4492:6993":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"17:10925:12951":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"5:5969:12558":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"17:10643:12909":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"18:668:12431":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"6:0:807":{"crate_id":6,"path":["libc"],"kind":"module"},"6:571:14360":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:681:12783":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"6:1704:14514":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:53334:11379":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"29:6021:15089":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"5:1740:10420":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:14924:11066":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"17:12183:13136":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:5428:10993":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:12015:13107":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:10782:11104":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:12232:9103":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"6:4346:14741":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:51854:11384":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:13708:13563":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"26:414:9182":{"crate_id":26,"path":["termcolor","ParseColorError"],"kind":"struct"},"1:5522:10976":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:46357:6597":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"17:10851:12943":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:49131:147":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:8446:8848":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:6472:15084":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:50728:11563":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"18:661:12430":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:51709:14089":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"25:167:8464":{"crate_id":25,"path":["textwrap","word_splitters","WordSplitter"],"kind":"enum"},"2:8196:9031":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"29:5203:14872":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"26:376:8565":{"crate_id":26,"path":["termcolor","Color"],"kind":"enum"},"29:609:14385":{"crate_id":29,"path":["libc","unix","tms"],"kind":"struct"},"1:1418:1685":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:2213:1061":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"16:7295:12064":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"6:4242:14705":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:14430:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"17:12417:13191":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:10435:12331":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"29:1540:14408":{"crate_id":29,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"6:545:14340":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"5:3905:12547":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:1634:14460":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:11102:54359":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"29:5515:15005":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"18:739:12761":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:8288:11056":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"23:598:1685":{"crate_id":23,"path":["indexmap","map","Values"],"kind":"struct"},"17:12250:13145":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:8274:205":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:11334:9575":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:10394:12349":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"7:0:1502":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:11002:12957":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:48946:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"17:11890:13079":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:50418:8953":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:12957:13306":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"24:955:11085":{"crate_id":24,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:46172:199":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"29:5364:14964":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:24336:11480":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"22:400:6884":{"crate_id":22,"path":["os_str_bytes","raw_str","RawOsStr"],"kind":"struct"},"2:13355:8919":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"14:0:8624":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"16:5273:12863":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"29:6886:15196":{"crate_id":29,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:13481:13488":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"29:5305:14932":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"29:4105:14681":{"crate_id":29,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"5:2284:11668":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:53536:11348":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"29:3944:14604":{"crate_id":29,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"16:6482:12260":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"24:2267:15209":{"crate_id":24,"path":["hashbrown","raw","inner","TableLayout"],"kind":"struct"},"6:3896:14552":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"5:3366:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:37932:181":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"17:11457:12992":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:10631:11034":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:2925:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"6:4474:14798":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:5328:9136":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"29:4412:14782":{"crate_id":29,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:50537:11554":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"23:626:10419":{"crate_id":23,"path":["indexmap","map","ValuesMut"],"kind":"struct"},"1:4351:9008":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"17:13138:13406":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:10914:9009":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"20:5:1732":{"crate_id":20,"path":["bitflags","bitflags"],"kind":"macro"},"29:5352:14957":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:11875:10588":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"17:12442:13194":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"6:4362:14750":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:11520:9101":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:47926:191":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"6:5455:14986":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"29:6078:15097":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:49760:8932":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"29:4039:14647":{"crate_id":29,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:10520:11091":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"2:52876:11371":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:24072:10989":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"23:672:7409":{"crate_id":23,"path":["indexmap","map","Iter"],"kind":"struct"},"24:411:11883":{"crate_id":24,"path":["hashbrown","raw","inner","RawIntoIter"],"kind":"struct"},"17:11068:12307":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:11130:12963":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:14:1869":{"crate_id":2,"path":["core","write"],"kind":"macro"},"24:865:7405":{"crate_id":24,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:15370:11907":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:10577:8832":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"6:6080:15090":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"6:4493:14806":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:56626:242":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:4467:2035":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"29:3861:14543":{"crate_id":29,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:10244:11529":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"18:712:8812":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:24427:14036":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:10937:12952":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:10992:155":{"crate_id":1,"path":["std","net","ip_addr","IpAddr"],"kind":"enum"},"2:10581:8829":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:4903:10142":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"16:6130:12105":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"16:7369:12060":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:53742:14119":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"4:0:8618":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:2119:7409":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"24:1736:146":{"crate_id":24,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:10082:12398":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:10610:12906":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:5566:10972":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"6:5247:14882":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"16:6490:12115":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:13817:13602":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:13406:29306":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"2:8126:11283":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"18:704:12755":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:52121:14090":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:9836:69092":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"29:1753:14536":{"crate_id":29,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:9431:12775":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:24368:7095":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"6:1740:14527":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"24:121:29292":{"crate_id":24,"path":["hashbrown","raw","inner","bitmask","BitMaskIter"],"kind":"struct"},"1:5701:11244":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:10296:12591":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"17:13507:13498":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:6716:7473":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:1311:12405":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:5150:9124":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"29:584:14372":{"crate_id":29,"path":["libc","unix","winsize"],"kind":"struct"},"16:3199:12234":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:9746:12872":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"16:5784:11981":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:2912:422":{"crate_id":2,"path":["core","cmp"],"kind":"module"},"2:50385:11298":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:11985:13104":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"5:7738:10179":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:46774:8748":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:11959:11057":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"12:2253:7407":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"16:3221:12235":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:2130:10173":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"17:13612:13525":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"6:6937:15196":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:7935:9044":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:5157:11190":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:32450:11622":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:56613:242":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:6250:15173":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:9587:69100":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"16:2981:12240":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"12:2269:10427":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"21:75:4977":{"crate_id":21,"path":["clap_lex","RawArgs"],"kind":"struct"},"1:11953:7847":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:8856:8856":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:7993:12571":{"crate_id":1,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"2:3108:10989":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:3914:8806":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:9259:12862":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:9796:69095":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:10788:12942":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"16:7379:12080":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"6:4356:14747":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:10511:208":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"29:598:14380":{"crate_id":29,"path":["libc","unix","sigval"],"kind":"struct"},"29:3990:14628":{"crate_id":29,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:3398:9938":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"26:329:1667":{"crate_id":26,"path":["termcolor","ColorChoice"],"kind":"enum"},"2:10565:110":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"29:5184:14870":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"5:4716:12551":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"14:194:52701":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:14867:10587":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:10831:12363":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:2920:186":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"22:394:12450":{"crate_id":22,"path":["os_str_bytes","pattern","EncodedChar"],"kind":"struct"},"2:46964:9056":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"6:5998:15055":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"25:218:9167":{"crate_id":25,"path":["textwrap","core","Word"],"kind":"struct"},"1:10712:9001":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:9240:12299":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"16:2839:12226":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:7732:63367":{"crate_id":1,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"2:53833:14124":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:8967:14145":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"2:48833:134":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"17:9826:12363":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:53757:14120":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:9883:69097":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"16:4381:13664":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"22:373:4999":{"crate_id":22,"path":["os_str_bytes","raw_str","Buffer"],"kind":"struct"},"23:45:10421":{"crate_id":23,"path":["indexmap","mutable_keys","MutableKeys"],"kind":"trait"},"1:5516:10975":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"12:2059:11043":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:3621:131":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:14257:66604":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"9:927:52131":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"9:776:11797":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"2:3508:8787":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:10558:12902":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:10039:12883":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"22:92:12444":{"crate_id":22,"path":["os_str_bytes","OsStringBytes"],"kind":"trait"},"29:1595:14441":{"crate_id":29,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:11231:11018":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"29:6084:15099":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:46693:8937":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:14397:10985":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"17:11579:13020":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"12:1703:11891":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:13595:13518":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"24:2104:7407":{"crate_id":24,"path":["hashbrown","set","Entry"],"kind":"enum"},"29:6805:15186":{"crate_id":29,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:12302:13153":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:10975:12955":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:13755:13581":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:50221:11291":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"6:6214:15154":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"22:508:12447":{"crate_id":22,"path":["os_str_bytes","EncodingError"],"kind":"struct"},"2:24891:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"17:13961:13632":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"24:993:11088":{"crate_id":24,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"6:6007:15061":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:51423:11375":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:77:1512":{"crate_id":2,"path":["core","usize"],"kind":"module"},"2:50192:11285":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:2914:11149":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"24:772:7409":{"crate_id":24,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:10935:7987":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"29:1669:14497":{"crate_id":29,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:48827:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"17:13463:13484":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:46188:197":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"16:7415:12078":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"6:5210:14870":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:2425:4939":{"crate_id":1,"path":["std","env","args_os"],"kind":"function"},"16:4803:13677":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:9519:11186":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"1:9505:11185":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"6:4516:14814":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"16:6310:12110":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:51531:11376":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:51802:11377":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"24:2253:15207":{"crate_id":24,"path":["hashbrown","raw","inner","bitmask","BitMask"],"kind":"struct"},"17:12406:13189":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:4256:2046":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:3460:8779":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:3378:223":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"6:1526:14398":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:47005:9067":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"16:7063:12124":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:10510:10424":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"2:24792:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"29:4357:14761":{"crate_id":29,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"16:5721:11979":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"29:6178:15154":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:4157:12311":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:32796:66457":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"6:4287:14714":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:10569:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"20:0:1732":{"crate_id":20,"path":["bitflags"],"kind":"module"},"2:14424:204":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"6:3907:14560":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"6:513:2011":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"16:5289:12057":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"6:4012:14628":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"26:310:9184":{"crate_id":26,"path":["termcolor","LossyStandardStream"],"kind":"struct"},"9:900:15257":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:13238:11204":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"17:10104:12400":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:6716:11003":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:24352:15398":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"5:69:10148":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"16:7131:12130":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"29:4351:14758":{"crate_id":29,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:12383:13188":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:52616:11358":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:13361:8918":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:10068:12361":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"14:11:13934":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"5:5173:667":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"2:11209:219":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:47106:9065":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"29:5938:15038":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"23:134:10427":{"crate_id":23,"path":["indexmap","map","core","raw","OccupiedEntry"],"kind":"struct"},"16:5257:12862":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:3482:8782":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:13565:13512":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"29:5421:14984":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:52222:14093":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:10015:12881":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:15185:11189":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:22883:66974":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"29:5190:14871":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:12746:12971":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:12196:13137":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"17:8849:12336":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:48069:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"21:89:6041":{"crate_id":21,"path":["clap_lex","ArgCursor"],"kind":"struct"},"17:12026:13108":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:13281:13437":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:24244:11576":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:12770:13253":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:53676:14113":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"16:4351:13663":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"17:13917:13625":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"29:5413:14982":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:12634:13230":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"18:782:12755":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:46616:11496":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:46904:8990":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:50685:14084":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"29:4510:14821":{"crate_id":29,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:13361:13458":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:13495:13495":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"5:8294:11662":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"29:5160:14854":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:47044:9061":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"16:6050:12102":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:2326:607":{"crate_id":1,"path":["std","env"],"kind":"module"},"25:158:9154":{"crate_id":25,"path":["textwrap","word_separators","WordSeparator"],"kind":"enum"},"29:4471:14806":{"crate_id":29,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:10923:8987":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:9646:2795":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"16:7121:12129":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"5:8224:3098":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"29:3898:14570":{"crate_id":29,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:24825:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"6:4198:14701":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:48153:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:6738:10987":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:13564:110":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:12048:13117":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"5:8573:10174":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:2314:12354":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"6:4142:14688":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:52302:11390":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:11085:12343":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"16:7238:12077":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:15881:8646":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"17:12469:13198":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:4848:11265":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"29:4403:14776":{"crate_id":29,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"24:484:29294":{"crate_id":24,"path":["hashbrown","raw","inner","RawIterHashInner"],"kind":"struct"},"12:1682:11890":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:23295:11341":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"16:5396:11958":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:3388:6735":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"12:843:7405":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:13721:13569":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:50749:160":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:696:11110":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"25:104:9166":{"crate_id":25,"path":["textwrap","core","Fragment"],"kind":"trait"},"12:399:11883":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"6:6153:15113":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:15858:63384":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"29:518:14332":{"crate_id":29,"path":["libc","unix","timeval"],"kind":"struct"},"12:114:29292":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:10461:11121":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:53872:14125":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"29:577:14369":{"crate_id":29,"path":["libc","unix","pollfd"],"kind":"struct"},"6:6914:15190":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"23:1059:7847":{"crate_id":23,"path":["indexmap","set","IntoIter"],"kind":"struct"},"11:46:15256":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"2:2862:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:12700:13237":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"16:7025:11996":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"6:3883:14543":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"6:4416:14773":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"9:749:11752":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"1:14422:11148":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"2:51377:14086":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"24:388:11884":{"crate_id":24,"path":["hashbrown","raw","inner","RawIter"],"kind":"struct"},"16:2883:12246":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:11829:10584":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"29:4442:14797":{"crate_id":29,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:1592:10427":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:47841:2117":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:48027:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"29:1577:14431":{"crate_id":29,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"13:233:15255":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"6:580:14366":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"16:4198:13660":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:3683:8797":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"5:3395:7409":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:9561:12342":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:11631:9108":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"5:1684:7847":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:10775:12940":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:3375:2100":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:47858:9019":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"1:10956:8990":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"1:12080:11066":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:10850:9198":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"16:7200:12076":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:14446:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"16:2861:12227":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:13899:13619":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"18:152:29299":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"29:5556:15031":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:4168:9026":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"2:56600:242":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:8281:11055":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"6:5378:14957":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:9706:12871":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:13093:11548":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"9:1075:11818":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"24:1225:11880":{"crate_id":24,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"16:3243:12236":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:2961:180":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"proc_derive"},"29:4026:14642":{"crate_id":29,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:25122:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"5:3436:11042":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:53082:11391":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:46298:6761":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"1:14658:10588":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:24858:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"16:3297:12290":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"22:159:8947":{"crate_id":22,"path":["os_str_bytes","iter","Split"],"kind":"struct"},"22:0:8965":{"crate_id":22,"path":["os_str_bytes"],"kind":"module"},"16:3521:13655":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:8603:164":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:15847:17398":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:4638:11025":{"crate_id":1,"path":["std","net","display_buffer","DisplayBuffer"],"kind":"struct"}},"external_crates":{"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"26":{"name":"termcolor","html_root_url":null},"24":{"name":"hashbrown","html_root_url":null},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"29":{"name":"libc","html_root_url":null},"28":{"name":"atty","html_root_url":null},"20":{"name":"bitflags","html_root_url":"https://docs.rs/bitflags/1.3.2/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"21":{"name":"clap_lex","html_root_url":null},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"25":{"name":"textwrap","html_root_url":"https://docs.rs/textwrap/0.15.1/"},"27":{"name":"strsim","html_root_url":null},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"23":{"name":"indexmap","html_root_url":"https://docs.rs/indexmap/1/"},"22":{"name":"os_str_bytes","html_root_url":null}},"format_version":21}