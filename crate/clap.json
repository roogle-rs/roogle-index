{"root":"0:0:1712","crate_version":"4.3.4","includes_private":false,"index":{"2:12111:34504":{"id":"2:12111:34504","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11716:7872"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7868","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:7868","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11741:7867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12014":{"id":"2:12014","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12015:812","2:12016:25331","2:12017:34485","2:12018:34486","2:12020:34487","2:12023:25340","2:12024:34488","2:12025:314","2:12026:26363","2:12027:26359","2:12029:26360","2:12031:26361","2:12033:26362","2:12035:34489","2:12036:34490","2:12037:26387","2:12038:26388","2:12039:31766","2:12040:31674","2:12041:23984","2:12042:31689","2:12043:31688","2:12044:24348","2:12045:34491","2:12046:31767","2:12047:26404","2:12050:26405","2:12053:26406","2:12056:19642","2:12060:19643","2:12064:24347","2:12067:26396","2:12070:26398","2:12073:34492","2:12076:34493","2:12079:26400","2:12082:26402","2:12085:34494","2:12088:34495","2:12091:1936","2:12094:34496","2:12097:34497","2:12100:34498","2:12103:34499","2:12105:34500","2:12107:34501","2:12109:34502","2:12110:34503","2:12111:34504","2:12114:34505","2:12117:23970","2:12120:26407","2:12123:34506","2:12126:34507","2:12129:34508","2:12132:34509","2:12134:26287","2:12135:26288","2:12136:26290","2:12137:26291","2:12138:26292","2:12139:34510","2:12141:2127","2:12142:34511"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12105:34500":{"id":"2:12105:34500","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12117:23970":{"id":"2:12117:23970","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11716:7872"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41402:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7868","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12088:34495":{"id":"2:12088:34495","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41402:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7868","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:7868","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:7869","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12142:34511":{"id":"2:12142:34511","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4537:34511"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43688:7884","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12053:26406":{"id":"2:12053:26406","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11716:7872"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7868","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:7868","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:7869","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12094:34496":{"id":"2:12094:34496","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11716:7872","`DoubleEndedIterator`":"2:7244:121","prim@char":"1:11917:418","str::matches":"2:12091:1936"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43593:7890","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7868","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:7868","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:7869","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12025:314":{"id":"2:12025:314","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12026:26363","`u8`":"1:11934:1501"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12126:34507":{"id":"2:12126:34507","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11716:7872"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7868","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12029:26360":{"id":"2:12029:26360","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41404:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41402:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12114:34505":{"id":"2:12114:34505","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11716:7872"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7868","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12134:26287":{"id":"2:12134:26287","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12137:26291":{"id":"2:12137:26291","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5408:8216":{"id":"5:5408:8216","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7254:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7254:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7868","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5424:2350":{"id":"5:5424:2350","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7254:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7254:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12103:34499":{"id":"2:12103:34499","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12018:34486":{"id":"2:12018:34486","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12020:34487":{"id":"2:12020:34487","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12018:34486"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12056:19642":{"id":"2:12056:19642","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41404:179","prim@char":"1:11917:418","self::pattern":"2:11716:7872"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41402:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7868","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12135:26288":{"id":"2:12135:26288","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39560:26283","Self::is_ascii":"2:12134:26287"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41402:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39560:26283","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5407:35162":{"id":"5:5407:35162","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:273:2030","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:6994:2190","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:273:2030","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:6994:2190","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12138:26292":{"id":"2:12138:26292","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12024:34488":{"id":"2:12024:34488","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5411:35163":{"id":"5:5411:35163","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7254:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7254:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7868","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12026:26363":{"id":"2:12026:26363","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11934:1501"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12045:34491":{"id":"2:12045:34491","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43635:7886","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12044:24348":{"id":"2:12044:24348","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43625:2322","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12097:34497":{"id":"2:12097:34497","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11716:7872","`DoubleEndedIterator`":"2:7244:121","prim@char":"1:11917:418","str::rmatch_indices":"2:12100:34498"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43521:7887","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7868","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12141:2127":{"id":"2:12141:2127","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4540:2127"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43679:2128","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12040:31674":{"id":"2:12040:31674","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11917:418"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43347:7878","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12043:31688":{"id":"2:12043:31688","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12042:31689"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43654:7874","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12046:31767":{"id":"2:12046:31767","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43663:7873","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1712":{"id":"0:0:1712","crate_id":0,"name":"clap","span":{"filename":"src/lib.rs","begin":[6,0],"end":[119,1]},"visibility":"public","docs":"> **Command Line Argument Parser for Rust**\n\nQuick Links:\n- Derive [tutorial][_derive::_tutorial] and [reference][_derive]\n- Builder [tutorial][_tutorial] and [reference](index.html)\n- [Cookbook][_cookbook]\n- [FAQ][_faq]\n- [Discussions](https://github.com/clap-rs/clap/discussions)\n\n## Aspirations\n\n- Out of the box, users get a polished CLI experience\n  - Including common argument behavior, help generation, suggested fixes for users, colored output, [shell completions](https://github.com/clap-rs/clap/tree/master/clap_complete), etc\n- Flexible enough to port your existing CLI interface\n  - However, we won't necessarily streamline support for each use case\n- Reasonable parse performance\n- Resilient maintainership, including\n  - Willing to break compatibility rather than batching up breaking changes in large releases\n  - Leverage feature flags to keep to one active branch\n  - Being under [WG-CLI](https://github.com/rust-cli/team/) to increase the bus factor\n- We follow semver and will wait about 6-9 months between major breaking changes\n- We will support the last two minor Rust releases (MSRV, currently 1.64.0)\n\nWhile these aspirations can be at odds with fast build times and low binary\nsize, we will still strive to keep these reasonable for the flexibility you\nget.  Check out the\n[argparse-benchmarks](https://github.com/rust-cli/argparse-benchmarks-rs) for\nCLI parsers optimized for other use cases.\n\n## Example\n\nRun\n```console\n$ cargo add clap --features derive\n```\n*(See also [feature flag reference][_features])*\n\nThen define your CLI in `main.rs`:\n```rust\n# #[cfg(feature = \"derive\")] {\nuse clap::Parser;\n\n/// Simple program to greet a person\n#[derive(Parser, Debug)]\n#[command(author, version, about, long_about = None)]\nstruct Args {\n    /// Name of the person to greet\n    #[arg(short, long)]\n    name: String,\n\n    /// Number of times to greet\n    #[arg(short, long, default_value_t = 1)]\n    count: u8,\n}\n\nfn main() {\n    let args = Args::parse();\n\n    for _ in 0..args.count {\n        println!(\"Hello {}!\", args.name)\n    }\n}\n# }\n```\n\nAnd try it out:\n```console\n$ demo --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: demo[EXE] [OPTIONS] --name <NAME>\n\nOptions:\n  -n, --name <NAME>    Name of the person to greet\n  -c, --count <COUNT>  Number of times to greet [default: 1]\n  -h, --help           Print help\n  -V, --version        Print version\n\n$ demo --name Me\nHello Me!\n\n```\n*(version number and `.exe` extension on windows replaced by placeholders)*\n\nSee also the derive [tutorial][_derive::_tutorial] and [reference][_derive]\n\n### Related Projects\n\nAugment clap:\n- [wild](https://crates.io/crates/wild) for supporting wildcards (`*`) on Windows like you do Linux\n- [argfile](https://crates.io/crates/argfile) for loading additional arguments from a file (aka response files)\n- [shadow-rs](https://crates.io/crates/shadow-rs) for generating `Command::long_version`\n- [clap_mangen](https://crates.io/crates/clap_mangen) for generating man page source (roff)\n- [clap_complete](https://crates.io/crates/clap_complete) for shell completion support\n\nCLI Helpers\n- [clap-verbosity-flag](https://crates.io/crates/clap-verbosity-flag)\n- [clap-cargo](https://crates.io/crates/clap-cargo)\n- [concolor-clap](https://crates.io/crates/concolor-clap)\n\nTesting\n- [`trycmd`](https://crates.io/crates/trycmd):  Bulk snapshot testing\n- [`snapbox`](https://crates.io/crates/snapbox):  Specialized snapshot testing\n- [`assert_cmd`](https://crates.io/crates/assert_cmd) and [`assert_fs`](https://crates.io/crates/assert_fs): Customized testing\n\nDocumentation:\n- [Command-line Apps for Rust](https://rust-cli.github.io/book/index.html) book\n","links":{},"attrs":["#![doc(html_logo_url =\n\"https://raw.githubusercontent.com/clap-rs/clap/master/assets/clap.png\")]","#![warn(missing_docs, missing_debug_implementations,\nmissing_copy_implementations, trivial_casts, unused_allocation,\ntrivial_numeric_casts, clippy :: single_char_pattern)]","#![forbid(unsafe_code)]","#![allow(clippy :: single_component_path_imports)]","#![allow(clippy :: branches_sharing_code)]","#![allow(clippy :: if_same_then_else)]","#![allow(clippy :: collapsible_else_if)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:3-20:0:1702"],"is_stripped":false}}},"2:12079:26400":{"id":"2:12079:26400","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11716:7872","str::rsplitn":"2:12082:26402"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43475:7861","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7868","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5414:35164":{"id":"5:5414:35164","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7254:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7254:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12136:26290":{"id":"2:12136:26290","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12035:34489":{"id":"2:12035:34489","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11923:1399","str::slice_mut_unchecked":"2:12036:34490","crate::ops::Index":"2:2981:2209"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12036:34490":{"id":"2:12036:34490","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11923:1399","crate::ops::IndexMut":"2:2985:2210","str::slice_unchecked":"2:12035:34489"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12076:34493":{"id":"2:12076:34493","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11716:7872","str::split":"2:12064:24347","prim@char":"1:11917:418","str::split_terminator":"2:12073:34492"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43439:7891","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7868","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:7868","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:7869","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12070:26398":{"id":"2:12070:26398","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11716:7872","`DoubleEndedIterator`":"2:7244:121","prim@char":"1:11917:418","str::split":"2:12064:24347"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43389:7857","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7868","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:7868","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:7869","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12067:26396":{"id":"2:12067:26396","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11716:7872"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11539:7863","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7868","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5426:27620":{"id":"5:5426:27620","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12138:26292"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7254:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12033:26362":{"id":"2:12033:26362","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12132:34509":{"id":"2:12132:34509","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11677:127","`FromStr`":"2:11676:2494"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41546:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:11676:2494","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11676:2494","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12091:1936":{"id":"2:12091:1936","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11716:7872","`DoubleEndedIterator`":"2:7244:121","prim@char":"1:11917:418","str::matches":"2:12091:1936"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43575:7889","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7868","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12042:31689":{"id":"2:12042:31689","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12043:31688"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43645:7875","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12109:34502":{"id":"2:12109:34502","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12060:19643":{"id":"2:12060:19643","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41404:179","prim@char":"1:11917:418","self::pattern":"2:11716:7872"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41402:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7868","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:7868","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:7869","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12110:34503":{"id":"2:12110:34503","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5422:35165":{"id":"5:5422:35165","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7254:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7254:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12050:26405":{"id":"2:12050:26405","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11716:7872"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7868","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5423:35166":{"id":"5:5423:35166","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:273:2030","`String`":"5:7254:224"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:273:2030","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:6994:2190","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7254:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12041:23984":{"id":"2:12041:23984","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43357:2325","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3-20:0:1702":{"id":"0:3-20:0:1702","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[98,0],"end":[98,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"clap_builder","name":"clap_builder","id":"20:0:1702","glob":true}}},"2:12064:24347":{"id":"2:12064:24347","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11716:7872","`DoubleEndedIterator`":"2:7244:121","prim@char":"1:11917:418","str::split_whitespace":"2:12042:31689","str::rsplit":"2:12070:26398"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43371:2326","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7868","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12023:25340":{"id":"2:12023:25340","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11283:7876"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12085:34494":{"id":"2:12085:34494","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41402:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7868","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12107:34501":{"id":"2:12107:34501","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12120:26407":{"id":"2:12120:26407","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11716:7872"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41402:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7868","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:7868","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:7869","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12123:34506":{"id":"2:12123:34506","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11716:7872"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7868","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:7868","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:7869","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5406":{"id":"5:5406","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5407:35162","5:5408:8216","5:5411:35163","5:5414:35164","5:5422:35165","5:5423:35166","5:5424:2350","5:5425:27619","5:5426:27620"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12037:26387":{"id":"2:12037:26387","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12038:26388"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12031:26361":{"id":"2:12031:26361","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12027:26359":{"id":"2:12027:26359","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41404:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41402:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12038:26388":{"id":"2:12038:26388","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12037:26387"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12129:34508":{"id":"2:12129:34508","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11716:7872"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7868","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:7868","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:7869","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12047:26404":{"id":"2:12047:26404","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11716:7872"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7868","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12017:34485":{"id":"2:12017:34485","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5425:27619":{"id":"5:5425:27619","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12137:26291"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7254:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12016:25331":{"id":"2:12016:25331","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12139:34510":{"id":"2:12139:34510","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4539:34510"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43670:7883","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12039:31766":{"id":"2:12039:31766","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11917:418"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43341:7879","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12073:34492":{"id":"2:12073:34492","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11716:7872","str::split":"2:12064:24347","prim@char":"1:11917:418","`DoubleEndedIterator`":"2:7244:121","str::rsplit_terminator":"2:12076:34493"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43421:7892","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7868","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12015:812":{"id":"2:12015:812","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11917:418"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12100:34498":{"id":"2:12100:34498","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11716:7872","`DoubleEndedIterator`":"2:7244:121","prim@char":"1:11917:418","str::match_indices":"2:12097:34497"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43539:7888","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7868","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:7868","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:7869","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12082:26402":{"id":"2:12082:26402","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11917:418","str::splitn":"2:12079:26400","self::pattern":"2:11716:7872"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43493:7859","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7868","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:7868","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:7869","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"2:7322:159":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"32:6034:8996":{"crate_id":32,"path":["linux_raw_sys","general","rlimit"],"kind":"struct"},"20:4321:37707":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrenceValuesRef"],"kind":"struct"},"32:7930:21497":{"crate_id":32,"path":["linux_raw_sys","general","kernel_sigaction"],"kind":"struct"},"17:9683:15576":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:8153:2323":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"1:8867:2549":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"21:0:1958":{"crate_id":21,"path":["bitflags"],"kind":"module"},"1:10876:24076":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:39086:7961":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:45636:2623":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"16:2319:14407":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:41879:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:46004:2636":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"30:9701:14161":{"crate_id":30,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:7688:2137":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:11163:15740":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"32:7526:21472":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_files_update"],"kind":"struct"},"32:5284:21367":{"crate_id":32,"path":["linux_raw_sys","general","ip_msfilter__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"29:152:19822":{"crate_id":29,"path":["io_lifetimes","raw","FromRawSocketlike"],"kind":"trait"},"30:5339:12466":{"crate_id":30,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"10:36:36464":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"17:13443:19587":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"31:0:1967":{"crate_id":31,"path":["rustix"],"kind":"module"},"17:13821:19613":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:2788:2588":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:5716:2529":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"6:6647:10032":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:21963:2382":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:8753:15507":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"16:2616:14420":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"16:7519:15402":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:30477:31030":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"2:40495:8198":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:46226:31144":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:41376:2368":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"32:5889:9001":{"crate_id":32,"path":["linux_raw_sys","general","pollfd"],"kind":"struct"},"22:0:1959":{"crate_id":22,"path":["clap_lex"],"kind":"module"},"2:21:682":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"17:9478:15564":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"5:1099:35569":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"20:2876:1978":{"crate_id":20,"path":["clap_builder","builder","action","ArgAction"],"kind":"enum"},"32:7634:21483":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_buf_ring__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"1:4459:2430":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"31:4454:38583":{"crate_id":31,"path":["rustix","process","prctl","TimeStampCounterReadability"],"kind":"enum"},"5:258:34165":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:11044:2509":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"31:4289:38436":{"crate_id":31,"path":["rustix","process","prctl","FloatingPointExceptionMode"],"kind":"struct"},"1:11272:24599":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:7694:2171":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"16:4757:15050":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:2589:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"1:4597:24918":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:47709:7765":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"11:2201:2150":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"30:9631:12684":{"crate_id":30,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:12510:18833":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"6:7528:12684":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:2348:182":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"6:4523:12464":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:911:2158":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"31:2721:19846":{"crate_id":31,"path":["rustix","backend","io","types","ReadWriteFlags"],"kind":"struct"},"3:229:210":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:2151:588":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:5525:2506":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"32:6478:21427":{"crate_id":32,"path":["linux_raw_sys","general","tcp_info"],"kind":"struct"},"30:543:8996":{"crate_id":30,"path":["libc","unix","rlimit"],"kind":"struct"},"1:2544:2336":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:12085:18806":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"20:4271:19732":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawValues"],"kind":"struct"},"6:4894:12502":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"32:7787:21493":{"crate_id":32,"path":["linux_raw_sys","general","__old_kernel_stat"],"kind":"struct"},"2:20547:8015":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"23:301:19758":{"crate_id":23,"path":["anstream","adapter","strip","StripBytesIter"],"kind":"struct"},"17:13332:19576":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"18:599:37666":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"30:4934:12446":{"crate_id":30,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:41605:2154":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"1:8289:2457":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:40707:2353":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"16:3030:14435":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:11918:1517":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"17:9734:15574":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:4264:7968":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"5:5930:2311":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"31:2827:19841":{"crate_id":31,"path":["rustix","backend","io","types","SpliceFlags"],"kind":"struct"},"2:3386:7945":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"16:7467:15397":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"11:1852:2175":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:40065:7996":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:9121:132":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"17:12894:19545":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"17:10743:15520":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:12646:18842":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"29:132:19818":{"crate_id":29,"path":["io_lifetimes","raw","AsRawSocketlike"],"kind":"trait"},"17:11282:18281":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"6:4427:12452":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:42682:8027":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"20:4483:26052":{"crate_id":20,"path":["clap_builder","mkeymap","Key"],"kind":"struct"},"6:1505:9889":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"18:609:37688":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:44145:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"5:682:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"16:6474:15369":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"32:7111:21462":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_7"],"kind":"enum"},"23:170:2300":{"crate_id":23,"path":["anstream","raw","private","Sealed"],"kind":"trait"},"31:4198:38437":{"crate_id":31,"path":["rustix","process","prctl","FloatingPointEmulationControl"],"kind":"struct"},"32:5403:21378":{"crate_id":32,"path":["linux_raw_sys","general","ip_comp_hdr"],"kind":"struct"},"20:4117:2339":{"crate_id":20,"path":["clap_builder","error","kind","ErrorKind"],"kind":"enum"},"32:4815:21339":{"crate_id":32,"path":["linux_raw_sys","general","vfs_ns_cap_data"],"kind":"struct"},"32:5380:21375":{"crate_id":32,"path":["linux_raw_sys","general","iphdr__bindgen_ty_1__bindgen_ty_2"],"kind":"struct"},"17:1919:15613":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:10428:15722":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"32:5059:21356":{"crate_id":32,"path":["linux_raw_sys","general","file_dedupe_range"],"kind":"struct"},"17:13211:19565":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:5742:2530":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:13865:19616":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"27:0:1964":{"crate_id":27,"path":["anstyle"],"kind":"module"},"11:817:2164":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"6:5774:13159":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"31:3480:14246":{"crate_id":31,"path":["rustix","backend","termios","types","Action"],"kind":"enum"},"16:4568:14981":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:6772:8164":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"6:7598:14161":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"30:6097:12501":{"crate_id":30,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"17:13367:19579":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"30:4973:12448":{"crate_id":30,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:4046:7793":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:12334:32277":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"30:9653:12685":{"crate_id":30,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:20560:31681":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"30:699:9004":{"crate_id":30,"path":["libc","unix","sigval"],"kind":"struct"},"6:7608:14162":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:2839:8239":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:20993:2300":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"11:332:36465":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:7202:134":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"6:4739:12483":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:10626:15728":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"2:9146:112":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:43593:7890":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"18:515:19657":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"5:0:286":{"crate_id":5,"path":["alloc"],"kind":"module"},"32:4771:21334":{"crate_id":32,"path":["linux_raw_sys","general","__kernel_fsid_t"],"kind":"struct"},"32:7655:21486":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_buf_reg"],"kind":"struct"},"17:13194:19564":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"6:4567:12469":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:40678:8166":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"11:760:2158":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"17:8683:15481":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"5:4347:245":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:9057:167":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"14:215:14345":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"11:447:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"16:2879:14431":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"30:5374:12468":{"crate_id":30,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:562:15495":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:39366:15430":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"6:1910:10074":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"6:4847:12497":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"16:3063:14437":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"30:8505:10017":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"11:986:2168":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:7285:23176":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:7961:26043":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"30:5297:12464":{"crate_id":30,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:7488:15495":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"30:1859:9895":{"crate_id":30,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"5:6298:34165":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:1982:185":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"32:7535:21473":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_rsrc_register"],"kind":"struct"},"2:8842:33678":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"5:7043:34285":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:4145:7980":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:9596:15558":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"6:5993:13175":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"16:6506:15371":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"20:4300:37712":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrenceValues"],"kind":"struct"},"17:12522:18834":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"16:3225:14438":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"30:6060:12500":{"crate_id":30,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:43970:7912":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:242:37585":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"5:5215:34165":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"16:8129:15425":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:12536:18835":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"27:305:33676":{"crate_id":27,"path":["anstyle","color","DisplayBuffer"],"kind":"struct"},"1:10731:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"18:719:19644":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:40692:2139":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"27:127:38276":{"crate_id":27,"path":["anstyle","reset","ResetDisplay"],"kind":"struct"},"5:2963:34067":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"16:6904:15385":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"20:1107:19697":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParser"],"kind":"struct"},"16:7498:15400":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:30371:31099":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"17:11391:18287":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"0:0:1712":{"crate_id":0,"path":["clap"],"kind":"module"},"2:9414:8026":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"30:9665:12687":{"crate_id":30,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"32:6042:12508":{"crate_id":32,"path":["linux_raw_sys","general","rlimit64"],"kind":"struct"},"31:5167:38588":{"crate_id":31,"path":["rustix","process","wait","WaitidStatus"],"kind":"struct"},"30:5597:2387":{"crate_id":30,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:10142:15681":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:22601:2383":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:7600:2125":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"5:6994:2190":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"30:7542:13172":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"32:6945:21444":{"crate_id":32,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_3"],"kind":"struct"},"32:7546:21474":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_rsrc_update"],"kind":"struct"},"16:7411:15394":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"6:6588:8877":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"30:9559:12680":{"crate_id":30,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"32:5980:8994":{"crate_id":32,"path":["linux_raw_sys","general","timeval"],"kind":"struct"},"1:8366:2487":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"16:0:1827":{"crate_id":16,"path":["gimli"],"kind":"module"},"20:3891:19692":{"crate_id":20,"path":["clap_builder","builder","value_parser","PossibleValuesParser"],"kind":"struct"},"30:5836:12488":{"crate_id":30,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"34:0:1970":{"crate_id":34,"path":["strsim"],"kind":"module"},"16:2830:14429":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"20:916:19679":{"crate_id":20,"path":["clap_builder","builder","resettable","IntoResettable"],"kind":"trait"},"23:319:19773":{"crate_id":23,"path":["anstream","adapter","strip","Utf8Parser"],"kind":"struct"},"1:8120:2295":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:7706:2235":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"6:4615:12472":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:2558:25319":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"5:1669:34165":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:9108:37521":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:8835:2548":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"31:3658:38586":{"crate_id":31,"path":["rustix","backend","time","types","TimerfdTimerFlags"],"kind":"struct"},"6:5966:13172":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"16:6327:15359":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"32:5661:21391":{"crate_id":32,"path":["linux_raw_sys","general","ipv6hdr__bindgen_ty_1__bindgen_ty_2"],"kind":"struct"},"28:5:2332":{"crate_id":28,"path":["is_terminal","IsTerminal"],"kind":"trait"},"17:12433:18828":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:530:2104":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"20:3585:1979":{"crate_id":20,"path":["clap_builder","builder","command","Command"],"kind":"struct"},"2:47478:2666":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:10354:15645":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"16:2786:14427":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"25:23:14246":{"crate_id":25,"path":["utf8parse","types","Action"],"kind":"enum"},"30:9722:14162":{"crate_id":30,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"20:4631:1985":{"crate_id":20,"path":["clap_builder","util","id","Id"],"kind":"struct"},"16:7669:15410":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"30:2181:9911":{"crate_id":30,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"31:3857:38587":{"crate_id":31,"path":["rustix","process","id","Cpuid"],"kind":"struct"},"2:2753:2585":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"5:4001:2157":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"32:203:19900":{"crate_id":32,"path":["linux_raw_sys","general","__BindgenUnionField"],"kind":"struct"},"2:42161:7803":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"30:2019:9902":{"crate_id":30,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"30:0:817":{"crate_id":30,"path":["libc"],"kind":"module"},"17:13612:19597":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"6:1544:9894":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"30:645:9001":{"crate_id":30,"path":["libc","unix","pollfd"],"kind":"struct"},"17:12622:15533":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"5:6252:2157":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"6:5848:13124":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:47338:2660":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"16:6535:36864":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"32:6448:21426":{"crate_id":32,"path":["linux_raw_sys","general","tcp_ca_state"],"kind":"enum"},"16:5386:14375":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:4127:2421":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"30:2127:9907":{"crate_id":30,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"30:7744:13181":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:40285:8178":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"6:1701:2415":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"11:1663:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"6:573:9005":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"30:8435:2459":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"18:491:37655":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"16:3585:14441":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"20:4166:19706":{"crate_id":20,"path":["clap_builder","error","ErrorInner"],"kind":"struct"},"6:4703:12479":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"16:7683:15411":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"16:2594:14419":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"11:0:1823":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"17:0:1828":{"crate_id":17,"path":["object"],"kind":"module"},"32:6926:21441":{"crate_id":32,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"17:10015:15676":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:47814:7772":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:21850:31044":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:9696:15561":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"20:3918:19694":{"crate_id":20,"path":["clap_builder","builder","value_parser","RangedU64ValueParser"],"kind":"struct"},"31:3507:38536":{"crate_id":31,"path":["rustix","backend","time","types","ClockId"],"kind":"enum"},"20:4550:19709":{"crate_id":20,"path":["clap_builder","output","fmt","Colorizer"],"kind":"struct"},"32:4826:21340":{"crate_id":32,"path":["linux_raw_sys","general","vfs_ns_cap_data__bindgen_ty_1"],"kind":"struct"},"16:6544:15373":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"16:6919:36979":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:42921:31206":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"30:732:9006":{"crate_id":30,"path":["libc","unix","tms"],"kind":"struct"},"32:7358:21467":{"crate_id":32,"path":["linux_raw_sys","general","io_sqring_offsets"],"kind":"struct"},"14:202:7913":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"32:4873:9908":{"crate_id":32,"path":["linux_raw_sys","general","epoll_event"],"kind":"struct"},"17:12634:18841":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"20:1653:128":{"crate_id":20,"path":["clap_builder","error","Error"],"kind":"struct"},"2:43158:7845":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"32:5554:9893":{"crate_id":32,"path":["linux_raw_sys","general","sockaddr_in6"],"kind":"struct"},"2:42691:145":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:13499:19593":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"5:7268:7914":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:11299:18282":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:14:1939":{"crate_id":2,"path":["core","write"],"kind":"macro"},"32:6818:21436":{"crate_id":32,"path":["linux_raw_sys","general","new_utsname"],"kind":"struct"},"2:40304:8185":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:11915:371":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:46384:2659":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:10670:15720":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"6:1512:9890":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"5:7177:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"6:653:9055":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:12959:19549":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:45658:2629":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:12576:18838":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:43187:7848":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"6:4684:12477":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:12483:18831":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"32:5539:14162":{"crate_id":32,"path":["linux_raw_sys","general","in6_addr"],"kind":"struct"},"31:4107:38530":{"crate_id":31,"path":["rustix","process","prctl","UnalignedAccessControl"],"kind":"struct"},"1:355:2123":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"6:5986:13174":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:47876:7774":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"6:5881:13167":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:40364:8199":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:6211:2542":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"17:12592:18839":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"11:1538:14330":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"32:6702:14133":{"crate_id":32,"path":["linux_raw_sys","general","termios2"],"kind":"struct"},"6:6833:13600":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"16:3815:14468":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:8310:15497":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:8256:15476":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:3197:7796":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"16:7767:15416":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"23:208:19762":{"crate_id":23,"path":["anstream","adapter","strip","StrippedStr"],"kind":"struct"},"29:142:19820":{"crate_id":29,"path":["io_lifetimes","raw","IntoRawSocketlike"],"kind":"trait"},"31:4615:38537":{"crate_id":31,"path":["rustix","process","prctl","SpeculationFeatureControl"],"kind":"struct"},"1:4018:2398":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"31:4941:38543":{"crate_id":31,"path":["rustix","process","sched","CpuSet"],"kind":"struct"},"1:11032:2508":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"16:2905:14432":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:10491:2109":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"6:4886:12501":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"18:707:7870":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:1787:15579":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:1756:8269":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:40294:8184":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:11921:312":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"5:1461:2155":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:11920:1050":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"1:6865:25312":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"2:40042:7884":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"29:127:19817":{"crate_id":29,"path":["io_lifetimes","raw","AsRawFilelike"],"kind":"trait"},"20:3899:19693":{"crate_id":20,"path":["clap_builder","builder","value_parser","RangedI64ValueParser"],"kind":"struct"},"17:9409:15543":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"32:6152:21409":{"crate_id":32,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"6:5798:13161":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"27:182:19791":{"crate_id":27,"path":["anstyle","color","Color"],"kind":"enum"},"2:40124:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"18:481:19655":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:22436:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:40446:8196":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:9312:15518":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"16:8170:15428":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"16:5571:15329":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:44106:8380":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"6:554:9002":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:8936:23190":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:4812:796":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:40416:8194":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:4187:7825":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"1:1583:2174":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:21094:2300":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"2:4255:207":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"6:4948:12508":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"16:5104:15133":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:43960:7911":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:39125:7799":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"20:36:1989":{"crate_id":20,"path":["clap_builder","derive","Parser"],"kind":"trait"},"11:644:2153":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"16:5944:15345":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"6:4861:12499":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"6:4763:12486":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"31:3806:38520":{"crate_id":31,"path":["rustix","process","id","Uid"],"kind":"struct"},"32:5569:21382":{"crate_id":32,"path":["linux_raw_sys","general","in6_flowlabel_req"],"kind":"struct"},"20:1605:19714":{"crate_id":20,"path":["clap_builder","error","format","ErrorFormatter"],"kind":"trait"},"17:13721:19606":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:9424:15544":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:20575:31681":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"2:20779:32092":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"16:6254:15355":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:30847:183":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"17:10516:15689":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"17:1978:15597":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"32:7101:21461":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_sqe__bindgen_ty_6__bindgen_ty_1"],"kind":"struct"},"6:4549:12467":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"6:500:8996":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"18:624:37672":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:43439:7891":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:1637:8155":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"16:5693:15336":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"5:2967:34066":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:9091:2304":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"6:7249:8953":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"20:3980:37719":{"crate_id":20,"path":["clap_builder","builder","value_parser","TryMapValueParser"],"kind":"struct"},"2:10169:7857":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"16:7652:198":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"16:5346:15327":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"5:273:2030":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"6:4663:12476":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:11888:2138":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"20:4248:2156":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Values"],"kind":"struct"},"6:506:8997":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"6:5024:12516":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:2744:7794":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"17:12403:18826":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"5:1285:2168":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"27:334:19796":{"crate_id":27,"path":["anstyle","effect","EffectIter"],"kind":"struct"},"5:875:2179":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"6:4972:12511":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"6:5014:12515":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"6:6129:13209":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"5:5736:2157":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"32:5029:12498":{"crate_id":32,"path":["linux_raw_sys","general","file_clone_range"],"kind":"struct"},"17:12419:18827":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"32:6997:21450":{"crate_id":32,"path":["linux_raw_sys","general","uffdio_copy"],"kind":"struct"},"17:9138:15514":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"32:6137:21407":{"crate_id":32,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5"],"kind":"struct"},"9:352:14223":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:45557:2663":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:30299:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"17:11136:15739":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"32:7624:21482":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_buf"],"kind":"struct"},"30:560:8997":{"crate_id":30,"path":["libc","unix","rusage"],"kind":"struct"},"11:2060:2169":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:10589:15727":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:9155:7803":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"5:7161:2151":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"31:2928:19842":{"crate_id":31,"path":["rustix","backend","io","types","DupFlags"],"kind":"struct"},"17:9670:15577":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"32:6962:21446":{"crate_id":32,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_5"],"kind":"struct"},"1:947:2164":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"23:163:19751":{"crate_id":23,"path":["anstream","raw","RawStream"],"kind":"trait"},"1:2350:2276":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:11497:25761":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"7:0:1545":{"crate_id":7,"path":["unwind"],"kind":"module"},"24:26:19776":{"crate_id":24,"path":["anstyle_parse","params","ParamsIter"],"kind":"struct"},"1:7624:2112":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"17:10840:15524":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"31:3413:38447":{"crate_id":31,"path":["rustix","backend","process","types","RawCpuSet"],"kind":"struct"},"1:3233:2348":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"16:8109:15424":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"16:5811:15341":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"30:4830:12442":{"crate_id":30,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"18:755:19653":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"18:564:19660":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"11:1826:2157":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:21570:2300":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"9:0:1821":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:2981:2209":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"6:5817:13163":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:3083:2355":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"17:10334:15516":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"30:5797:12486":{"crate_id":30,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:12158:18811":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"31:5053:38514":{"crate_id":31,"path":["rustix","process","wait","WaitidOptions"],"kind":"struct"},"5:7003:2154":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:11471:18293":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"16:8047:15421":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"5:3593:2153":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"5:1773:2158":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"5:2458:34059":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:20590:31900":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:926:2161":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"6:5073:12521":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"32:7340:21466":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_9"],"kind":"enum"},"2:2792:8231":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"32:6286:12357":{"crate_id":32,"path":["linux_raw_sys","general","sysinfo"],"kind":"struct"},"1:8759:2507":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:3231:2347":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"6:7574:12690":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:8765:186":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"17:11446:18291":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"5:7023:2157":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:6392:2139":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:9275:37492":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"13:0:1818":{"crate_id":13,"path":["std_detect"],"kind":"module"},"30:8840:13602":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:40384:8180":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:9653:15591":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"16:4789:15058":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"16:2720:14424":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:12923:19548":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:1565:2154":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"16:4540:14977":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:8315:2406":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"20:1607:19715":{"crate_id":20,"path":["clap_builder","error","format","KindFormatter"],"kind":"struct"},"2:43475:7861":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:4381:7975":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:9617:15553":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:12059:18804":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"32:5048:21355":{"crate_id":32,"path":["linux_raw_sys","general","file_dedupe_range_info"],"kind":"struct"},"6:4817:12493":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"6:526:8998":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"18:736:19645":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"20:4624:37846":{"crate_id":20,"path":["clap_builder","util","graph","ChildGraph"],"kind":"struct"},"20:3646:37856":{"crate_id":20,"path":["clap_builder","builder","ext","Extensions"],"kind":"struct"},"2:1747:31561":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:3904:2388":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:4786:32874":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"30:5524:12474":{"crate_id":30,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"32:7055:21457":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_sqe__bindgen_ty_3"],"kind":"union"},"1:5709:2528":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"6:1662:9904":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:731:142":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"5:2240:34012":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"31:4433:38516":{"crate_id":31,"path":["rustix","process","prctl","EndianMode"],"kind":"enum"},"1:6396:2532":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"20:54:1988":{"crate_id":20,"path":["clap_builder","derive","FromArgMatches"],"kind":"trait"},"2:9817:222":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"16:4969:15094":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:10615:15718":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"30:6116:12502":{"crate_id":30,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"6:7510:12681":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:10255:23614":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"30:2150:2415":{"crate_id":30,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:12980:19550":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:6678:8183":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"6:5889:13168":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"30:9325:13974":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"20:4239:19731":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","IdsRef"],"kind":"struct"},"16:5418:36776":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"32:5544:21381":{"crate_id":32,"path":["linux_raw_sys","general","in6_addr__bindgen_ty_1"],"kind":"union"},"5:5820:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"30:7246:13162":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"11:736:2156":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"2:45427:2656":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:11716:7872":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:953:2165":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:10798:15522":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"16:6400:15365":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:39978:8001":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"15:219:14359":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"31:4557:38566":{"crate_id":31,"path":["rustix","process","prctl","PTracer"],"kind":"enum"},"6:5835:13165":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:9299:31818":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"31:4576:38440":{"crate_id":31,"path":["rustix","process","prctl","FloatingPointMode"],"kind":"enum"},"5:6699:244":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"17:13292:19572":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:10167:2513":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"6:119:8675":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"6:482:8993":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:9512:15557":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:41919:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:8674:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"32:5133:21364":{"crate_id":32,"path":["linux_raw_sys","general","__kernel_sockaddr_storage__bindgen_ty_1"],"kind":"union"},"20:4086:19717":{"crate_id":20,"path":["clap_builder","error","context","ContextValue"],"kind":"enum"},"1:11928:643":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:45676:2635":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"6:4505:12462":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:13240:19568":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:11770:18788":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:6644:26021":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"14:7:14336":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:45695:2684":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"30:1901:9897":{"crate_id":30,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"16:3872:14501":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:7206:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:40006:8000":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:7815:2292":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:41999:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"30:9577:12681":{"crate_id":30,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:9822:15585":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"30:5008:12449":{"crate_id":30,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:21865:31556":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"23:333:19763":{"crate_id":23,"path":["anstream","adapter","wincon","WinconBytes"],"kind":"struct"},"6:1526:9892":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:13233:19567":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:4877:2455":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:47086:2654":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"16:5367:14377":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:39227:199":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"30:1701:9055":{"crate_id":30,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"6:5978:13173":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"16:55:14374":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"18:766:19646":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:42703:2488":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"20:4564:37721":{"crate_id":20,"path":["clap_builder","util","any_value","AnyValueId"],"kind":"struct"},"18:113:19631":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"17:11355:18285":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:46880:2620":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"32:7644:21484":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_buf_ring__bindgen_ty_1__bindgen_ty_2"],"kind":"struct"},"17:13469:19590":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:43949:7910":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:10808:7852":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"30:6355:12521":{"crate_id":30,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"20:3943:19687":{"crate_id":20,"path":["clap_builder","builder","value_parser","FalseyValueParser"],"kind":"struct"},"18:644:37657":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:2696:109":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"5:3668:34165":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"32:4762:19899":{"crate_id":32,"path":["linux_raw_sys","general","__kernel_fd_set"],"kind":"struct"},"2:42411:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"32:5563:8998":{"crate_id":32,"path":["linux_raw_sys","general","ipv6_mreq"],"kind":"struct"},"2:2805:8236":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"31:3543:38446":{"crate_id":31,"path":["rustix","backend","time","types","DynamicClockId"],"kind":"enum"},"5:4392:2311":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"6:4841:12496":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:39247:202":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"30:4991:12292":{"crate_id":30,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"16:2572:14418":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"16:7317:36678":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"30:2066:9904":{"crate_id":30,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:39387:7958":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:2892:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"5:4163:2311":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"32:5068:21357":{"crate_id":32,"path":["linux_raw_sys","general","files_stat_struct"],"kind":"struct"},"30:5909:12492":{"crate_id":30,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:20920:2609":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"1:2890:210":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"2:10262:7859":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:2509:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"17:12461:18830":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:10402:15709":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:1947:15573":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"30:6039:12499":{"crate_id":30,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"29:137:19819":{"crate_id":29,"path":["io_lifetimes","raw","IntoRawFilelike"],"kind":"trait"},"18:96:19630":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"20:4351:19734":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Indices"],"kind":"struct"},"1:4531:2447":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:875:2155":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:8416:2488":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:41597:2153":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:39963:2128":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:40214:2268":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"1:10721:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"2:43347:7878":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:22271:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"32:5340:12483":{"crate_id":32,"path":["linux_raw_sys","general","inotify_event"],"kind":"struct"},"2:40030:8003":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:487:15494":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:13053:19555":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"16:4904:15077":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"32:7607:21480":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_restriction"],"kind":"struct"},"30:9677:12689":{"crate_id":30,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"20:3720:19680":{"crate_id":20,"path":["clap_builder","builder","resettable","Resettable"],"kind":"enum"},"11:97:36473":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:32071:8292":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"1:3272:2344":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:40467:2324":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"32:7034:21454":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_sqe__bindgen_ty_1"],"kind":"union"},"6:5043:12517":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:43983:7893":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:5949:206":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"16:5847:15342":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:8953:15511":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"6:4722:12481":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"30:9505:14133":{"crate_id":30,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"6:4694:12478":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"29:181:19823":{"crate_id":29,"path":["io_lifetimes","views","FilelikeViewType"],"kind":"trait"},"16:6022:15349":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:643:2134":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:12312:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"6:4799:12491":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"6:6704:13591":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:12138:18810":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"16:7697:15412":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:32031:2511":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"1:11940:1555":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:47761:7769":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"5:1254:2167":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:9098:15513":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:8829:2154":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"32:7373:21468":{"crate_id":32,"path":["linux_raw_sys","general","io_cqring_offsets"],"kind":"struct"},"32:5128:21363":{"crate_id":32,"path":["linux_raw_sys","general","__kernel_sockaddr_storage"],"kind":"struct"},"32:6383:21423":{"crate_id":32,"path":["linux_raw_sys","general","tcp_repair_window"],"kind":"struct"},"30:591:8998":{"crate_id":30,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:2926:2025":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"5:5840:2526":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"6:6725:13594":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"6:5954:13171":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:2215:2271":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"32:5618:21386":{"crate_id":32,"path":["linux_raw_sys","general","rt2_hdr"],"kind":"struct"},"17:9322:37504":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"16:6132:15350":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"11:365:36469":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"11:2033:2167":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"5:7351:7933":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"32:5372:21374":{"crate_id":32,"path":["linux_raw_sys","general","iphdr__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"1:8508:2152":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:2758:2587":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"32:7921:21496":{"crate_id":32,"path":["linux_raw_sys","general","kernel_sigset_t"],"kind":"struct"},"1:6432:2539":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:40346:8189":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"32:7577:21477":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_notification_register"],"kind":"struct"},"30:2001:9901":{"crate_id":30,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"18:582:8015":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"14:40:18281":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:8847:33519":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"9:325:14262":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:13678:19603":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"6:1594:9899":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:10721:15697":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"11:667:2160":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:11193:15741":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"11:805:2163":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:8237:2367":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:11730:7870":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:5590:8179":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:8997:15391":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"17:10735:15734":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"23:402:19753":{"crate_id":23,"path":["anstream","buffer","Buffer"],"kind":"struct"},"20:4281:37709":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","GroupedValues"],"kind":"struct"},"17:13257:19570":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:12019:18801":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"5:2956:7788":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:2481:2335":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"30:7292:13164":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"20:3779:19681":{"crate_id":20,"path":["clap_builder","builder","styled_str","StyledStr"],"kind":"struct"},"5:6119:2735":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"30:1740:9889":{"crate_id":30,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:13376:19580":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:4097:30409":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"32:7147:21463":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_op"],"kind":"enum"},"16:3640:14442":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:10971:25338":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"30:1776:9891":{"crate_id":30,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"16:6218:15353":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:9265:15517":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:2796:8230":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:8883:2547":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:30313:31150":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"32:5956:21400":{"crate_id":32,"path":["linux_raw_sys","general","__kernel_old_itimerval"],"kind":"struct"},"5:3799:2158":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"6:5804:13162":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:6561:2540":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"1:3315:2332":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"16:6460:15368":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"16:7626:15408":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:46696:2637":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:10989:15531":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"16:4845:15066":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:2929:2026":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"6:4517:12463":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:13426:19585":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"32:6235:21418":{"crate_id":32,"path":["linux_raw_sys","general","sigevent__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"16:7103:15391":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"31:3110:19838":{"crate_id":31,"path":["rustix","backend","io","types","EventfdFlags"],"kind":"struct"},"11:1121:2170":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:10923:15528":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:21814:31085":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"29:69:19804":{"crate_id":29,"path":["io_lifetimes","traits","FromFd"],"kind":"trait"},"6:4983:12512":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"32:7708:21489":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_sync_cancel_reg"],"kind":"struct"},"2:22535:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"6:4809:12492":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"16:5677:15335":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:2522:237":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"1:11239:23983":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"30:7182:13159":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"30:628:9000":{"crate_id":30,"path":["libc","unix","iovec"],"kind":"struct"},"6:6687:10015":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:12388:18825":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:43341:7879":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"32:7091:21460":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_sqe__bindgen_ty_5__bindgen_ty_1"],"kind":"struct"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:11922:1369":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"30:682:9003":{"crate_id":30,"path":["libc","unix","linger"],"kind":"struct"},"30:6349:12520":{"crate_id":30,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"32:6067:9043":{"crate_id":32,"path":["linux_raw_sys","general","sigaction"],"kind":"struct"},"11:311:36467":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:13879:19617":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"32:4753:21333":{"crate_id":32,"path":["linux_raw_sys","general","__IncompleteArrayField"],"kind":"struct"},"2:1733:8270":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"30:8751:13598":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"5:2957:34063":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"30:7664:13178":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"18:507:37657":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:11422:18289":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"30:9688:12690":{"crate_id":30,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"13:110:36537":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"6:4937:12506":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"32:4807:21338":{"crate_id":32,"path":["linux_raw_sys","general","vfs_cap_data__bindgen_ty_1"],"kind":"struct"},"6:568:9004":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"30:5130:12455":{"crate_id":30,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:20588:31902":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"18:538:19659":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:43679:2128":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:8667:14373":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"31:3779:2299":{"crate_id":31,"path":["rustix","io","seek_from","SeekFrom"],"kind":"enum"},"20:4342:37714":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawOccurrenceValues"],"kind":"struct"},"16:4624:14989":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:11891:18794":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"16:2337:14408":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"16:8256:15431":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"5:6743:34205":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:8679:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:11254:24172":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:11927:641":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"16:6854:15382":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:9796:15578":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:11556:18299":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:3406:2297":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"30:4808:12441":{"crate_id":30,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:13659:19601":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:21890:31128":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"10:44:14315":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"6:6597:13588":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"6:6076:13182":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"32:6643:21429":{"crate_id":32,"path":["linux_raw_sys","general","tcp_md5sig"],"kind":"struct"},"17:12307:18819":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:42175:7812":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:10527:15725":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"2:4023:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:21118:2300":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:8805:2510":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:7244:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"20:3967:19688":{"crate_id":20,"path":["clap_builder","builder","value_parser","MapValueParser"],"kind":"struct"},"2:40355:8190":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"11:1818:2152":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"20:4411:37884":{"crate_id":20,"path":["clap_builder","parser","parser","ParseResult"],"kind":"enum"},"6:7277:13973":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"16:7803:15417":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:40397:8192":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:46730:2686":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"22:5:2388":{"crate_id":22,"path":["clap_lex","ext","OsStrExt"],"kind":"trait"},"2:46074:2692":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"6:6670:10017":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:10257:15642":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:11934:1501":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"32:6219:9911":{"crate_id":32,"path":["linux_raw_sys","general","sigevent"],"kind":"struct"},"17:10026:15677":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"30:6316:12516":{"crate_id":30,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"30:5739:12483":{"crate_id":30,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"20:1359:19698":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParserFactory"],"kind":"trait"},"17:13344:19577":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"30:5108:12454":{"crate_id":30,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:42401:31558":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"32:6971:21447":{"crate_id":32,"path":["linux_raw_sys","general","uffdio_api"],"kind":"struct"},"30:8653:13595":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:638:2133":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:11090:15535":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"5:819:2178":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"6:5828:13164":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"16:8025:15420":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"5:7279:7915":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:41453:8249":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:41529:8321":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:3157:135":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"6:4555:12468":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"5:5509:7936":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"16:7743:15414":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"32:6004:9055":{"crate_id":32,"path":["linux_raw_sys","general","timezone"],"kind":"struct"},"17:9443:15545":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"31:3305:38513":{"crate_id":31,"path":["rustix","backend","process","types","Signal"],"kind":"enum"},"17:9148:37592":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:13564:19596":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:40050:2128":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:11861:18792":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"5:3201:2175":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"32:5996:9005":{"crate_id":32,"path":["linux_raw_sys","general","itimerval"],"kind":"struct"},"1:1895:2247":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"32:6126:21406":{"crate_id":32,"path":["linux_raw_sys","general","__sifields__bindgen_ty_4"],"kind":"struct"},"32:5266:9889":{"crate_id":32,"path":["linux_raw_sys","general","ip_mreqn"],"kind":"struct"},"2:41317:30965":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"26:21:1984":{"crate_id":26,"path":["colorchoice","ColorChoice"],"kind":"enum"},"29:183:19825":{"crate_id":29,"path":["io_lifetimes","views","FilelikeView"],"kind":"struct"},"2:43329:7882":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"32:6304:21419":{"crate_id":32,"path":["linux_raw_sys","general","tcphdr"],"kind":"struct"},"2:21927:31130":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:11502:18295":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:9772:15580":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"20:4617:2499":{"crate_id":20,"path":["clap_builder","util","graph","Child"],"kind":"struct"},"2:2898:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:1931:654":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"5:2220:35264":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:361:2124":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:12361:192":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"17:10316:15638":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"11:399:36490":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:20753:2605":{"crate_id":2,"path":["core","core_simd","cast","SimdCastPtr"],"kind":"trait"},"2:42713:31417":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"32:6330:21421":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_4"],"kind":"enum"},"2:2768:8226":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"30:8373:13588":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:8947:2103":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:554:2106":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:42168:7804":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"17:13159:19561":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:45760:2593":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:45575:2669":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"30:8563:13591":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:3270:2343":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"6:1568:9896":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:1594:2176":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"6:4534:12465":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"30:5657:12479":{"crate_id":30,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:11504:8385":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"11:285:36474":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:5472:2311":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"32:7721:21490":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_file_index_range"],"kind":"struct"},"5:7033:2181":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:13689:19604":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"5:4425:34164":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"30:7645:13177":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:7636:33676":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:7971:2339":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"32:6103:21403":{"crate_id":32,"path":["linux_raw_sys","general","__sifields__bindgen_ty_1"],"kind":"struct"},"2:47746:7768":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"16:6717:14351":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:3152:234":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:40234:7836":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"16:5724:15338":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"30:6264:12511":{"crate_id":30,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"5:7208:31147":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:2515:133":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"1:2364:2280":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"17:11069:15534":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"27:210:19792":{"crate_id":27,"path":["anstyle","color","AnsiColor"],"kind":"enum"},"6:4379:12447":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:10068:15678":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"30:8534:10015":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:844:2152":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:42925:7839":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:43635:7886":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"6:7462:14133":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"16:4702:15043":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:11401:2373":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"23:423:38210":{"crate_id":23,"path":["anstream","auto","StreamInner"],"kind":"enum"},"5:2687:34235":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"16:8180:15429":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:10894:2510":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"17:11821:15682":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:12282:18817":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"5:1511:198":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"32:5948:21399":{"crate_id":32,"path":["linux_raw_sys","general","__kernel_old_timespec"],"kind":"struct"},"2:42441:31574":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:41268:2366":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:45381:2615":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"5:2046:2194":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"30:5049:12451":{"crate_id":30,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"16:6558:15374":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"5:775:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:3703:2373":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:4706:2408":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:32158:8207":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"16:6868:36656":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"32:7844:21494":{"crate_id":32,"path":["linux_raw_sys","general","compat_statfs64"],"kind":"struct"},"1:3378:2311":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"6:587:9007":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:21798:32886":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"16:6061:14378":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:8195:15478":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"16:5643:15333":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"25:53:2488":{"crate_id":25,"path":["utf8parse","types","State"],"kind":"enum"},"1:8170:2325":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"20:63:1990":{"crate_id":20,"path":["clap_builder","derive","Subcommand"],"kind":"trait"},"2:7215:2029":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"11:403:36485":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:11832:15683":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:2847:8241":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"20:4291:37713":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Occurrences"],"kind":"struct"},"16:2470:14414":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"16:6351:15361":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"11:1012:2169":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:13516:19595":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"24:255:1989":{"crate_id":24,"path":["anstyle_parse","Parser"],"kind":"struct"},"16:6390:15364":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:9839:15571":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:8777:2508":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"32:6394:21424":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_5"],"kind":"enum"},"6:6572:9847":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"30:8777:13599":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:8821:2551":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:4:1015":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"20:1178:19696":{"crate_id":20,"path":["clap_builder","builder","value_parser","TypedValueParser"],"kind":"trait"},"6:4907:12503":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"17:13698:19605":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:3193:2346":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:9415:23612":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"20:4511:37717":{"crate_id":20,"path":["clap_builder","mkeymap","KeyType"],"kind":"enum"},"30:7212:13160":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:4926:2464":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"16:4445:14954":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:5522:2504":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"30:5428:12470":{"crate_id":30,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:2391:1836":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:43935:7909":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"6:4954:12509":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"16:3300:14439":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"30:5218:12460":{"crate_id":30,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"32:5964:21401":{"crate_id":32,"path":["linux_raw_sys","general","__kernel_sock_timeval"],"kind":"struct"},"6:7585:12691":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"17:10857:15525":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:12046:18803":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"32:5295:21369":{"crate_id":32,"path":["linux_raw_sys","general","group_req"],"kind":"struct"},"1:10864:2503":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"17:9641:15565":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:13145:19560":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:11520:18296":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"6:4991:12513":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"16:6520:15372":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"32:6119:21405":{"crate_id":32,"path":["linux_raw_sys","general","__sifields__bindgen_ty_3"],"kind":"struct"},"2:30277:7932":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:47799:7771":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"30:2144:9908":{"crate_id":30,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"16:5594:15330":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"16:7543:15404":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"6:4728:12482":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:7867:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"30:7681:13179":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"30:467:8621":{"crate_id":30,"path":["libc","unix","DIR"],"kind":"enum"},"17:13082:19557":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:8922:2531":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"20:3937:19684":{"crate_id":20,"path":["clap_builder","builder","value_parser","BoolValueParser"],"kind":"struct"},"29:19:19800":{"crate_id":29,"path":["io_lifetimes","portability","AsFilelike"],"kind":"trait"},"16:4400:14933":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"20:3344:19702":{"crate_id":20,"path":["clap_builder","builder","arg_settings","ArgFlags"],"kind":"struct"},"5:1489:2160":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:10238:1979":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"23:417:19749":{"crate_id":23,"path":["anstream","auto","AutoStream"],"kind":"struct"},"2:40323:8187":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:8498:2491":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"16:8142:15426":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"22:28:2300":{"crate_id":22,"path":["clap_lex","ext","private","Sealed"],"kind":"trait"},"2:21911:31047":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"30:5501:12473":{"crate_id":30,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:8791:2509":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"27:347:19797":{"crate_id":27,"path":["anstyle","effect","EffectIndexIter"],"kind":"struct"},"30:5397:12469":{"crate_id":30,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:1544:2311":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"32:6544:21428":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_6"],"kind":"enum"},"32:0:1968":{"crate_id":32,"path":["linux_raw_sys"],"kind":"module"},"2:40726:8170":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:3948:2391":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"16:6671:14352":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:959:2166":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"5:3214:34291":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"16:7757:15415":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:11465:8386":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:8931:15479":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"6:4462:12456":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:8490:15502":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:13651:19600":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"20:51:1987":{"crate_id":20,"path":["clap_builder","derive","CommandFactory"],"kind":"trait"},"20:2697:2152":{"crate_id":20,"path":["clap_builder","util","flat_map","Iter"],"kind":"struct"},"6:4823:12494":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"32:4834:21341":{"crate_id":32,"path":["linux_raw_sys","general","f_owner_ex"],"kind":"struct"},"2:2741:2023":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1:7966:23175":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"32:4788:21336":{"crate_id":32,"path":["linux_raw_sys","general","__user_cap_data_struct"],"kind":"struct"},"6:532:8999":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:12113:18808":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"32:5412:21379":{"crate_id":32,"path":["linux_raw_sys","general","ip_beet_phdr"],"kind":"struct"},"2:2817:8234":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"32:6323:21420":{"crate_id":32,"path":["linux_raw_sys","general","tcp_word_hdr"],"kind":"union"},"16:5741:15339":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:2933:15639":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:5384:2311":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"32:6086:9004":{"crate_id":32,"path":["linux_raw_sys","general","sigval"],"kind":"union"},"17:11372:18286":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"30:4784:12440":{"crate_id":30,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"6:5079:12522":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:44178:8393":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"23:63:19770":{"crate_id":23,"path":["anstream","adapter","strip","VtUtf8Receiver"],"kind":"struct"},"32:7761:2459":{"crate_id":32,"path":["linux_raw_sys","general","stat"],"kind":"struct"},"32:7904:2387":{"crate_id":32,"path":["linux_raw_sys","general","ucred"],"kind":"struct"},"11:1103:14327":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"32:4934:21347":{"crate_id":32,"path":["linux_raw_sys","general","fscrypt_key_specifier"],"kind":"struct"},"1:1433:144":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"6:6804:13598":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"30:8603:13593":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:42182:7813":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"32:7882:13163":{"crate_id":32,"path":["linux_raw_sys","general","msghdr"],"kind":"struct"},"1:6124:25330":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:41402:181":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"16:6336:15360":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:12299:136":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"16:5976:15347":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"30:6342:12518":{"crate_id":30,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"6:7557:12688":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"17:9748:15516":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"5:3209:2173":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"5:2128:2099":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"6:4747:12484":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:4199:2424":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"6:4388:12448":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:20605:31898":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:46306:2653":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:9111:2249":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1:2366:2281":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:3962:2393":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:47416:2632":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:2470:8019":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:11319:18283":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"16:7016:36564":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"31:5173:38568":{"crate_id":31,"path":["rustix","process","wait","WaitId"],"kind":"enum"},"1:7537:25332":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"5:5856:8595":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"24:89:19768":{"crate_id":24,"path":["anstyle_parse","CharAccumulator"],"kind":"trait"},"17:8420:15500":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"6:7522:12683":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"1:10977:25339":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"6:4290:12440":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"32:6252:13096":{"crate_id":32,"path":["linux_raw_sys","general","statx"],"kind":"struct"},"2:2822:8235":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:8598:15506":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:43755:7902":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:10416:15721":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"20:67:1991":{"crate_id":20,"path":["clap_builder","derive","ValueEnum"],"kind":"trait"},"2:40685:31769":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"6:6155:13210":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"32:6908:21439":{"crate_id":32,"path":["linux_raw_sys","general","uffd_msg"],"kind":"struct"},"20:2719:2153":{"crate_id":20,"path":["clap_builder","util","flat_map","IterMut"],"kind":"struct"},"32:5610:21385":{"crate_id":32,"path":["linux_raw_sys","general","ipv6_opt_hdr"],"kind":"struct"},"6:4780:12488":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"16:6575:15375":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:2963:7798":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"6:4769:12487":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:10545:15531":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:44122:8374":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:3234:7797":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"6:6027:13179":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"23:0:1960":{"crate_id":23,"path":["anstream"],"kind":"module"},"6:5057:12519":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"30:5928:12493":{"crate_id":30,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:9613:25319":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"17:13477:19591":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:46028:2685":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"5:7194:2253":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:8348:2468":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"16:6179:15351":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"32:4842:8877":{"crate_id":32,"path":["linux_raw_sys","general","flock"],"kind":"struct"},"32:5149:21366":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_1"],"kind":"enum"},"27:113:38277":{"crate_id":27,"path":["anstyle","effect","EffectsDisplay"],"kind":"struct"},"30:1758:9890":{"crate_id":30,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"20:4394:19728":{"crate_id":20,"path":["clap_builder","parser","parser","ParseState"],"kind":"enum"},"17:12496:18832":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"16:4596:14985":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:43149:7846":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:10505:15724":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:8263:2372":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:9566:15517":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:43269:7854":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"30:6306:12515":{"crate_id":30,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"32:5587:21383":{"crate_id":32,"path":["linux_raw_sys","general","ip6_mtuinfo"],"kind":"struct"},"17:10377:15643":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:44110:8378":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:3463:2249":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:21001:2598":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"30:2157:9909":{"crate_id":30,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"30:7335:13124":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:43777:7903":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:7850:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"5:626:34082":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:6609:217":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:44003:7894":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:11539:7863":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"6:1602:9900":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"5:3734:2194":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"32:5397:21377":{"crate_id":32,"path":["linux_raw_sys","general","ip_esp_hdr"],"kind":"struct"},"2:41546:210":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"20:3309:1982":{"crate_id":20,"path":["clap_builder","builder","arg_group","ArgGroup"],"kind":"struct"},"1:8984:23183":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:10207:7858":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:8195:2371":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:30243:2188":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:45451:2616":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"16:7366:15393":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:40432:8195":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:5579:206":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"30:5201:12459":{"crate_id":30,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"9:234:2488":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:10751:24099":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"32:6243:13158":{"crate_id":32,"path":["linux_raw_sys","general","statx_timestamp"],"kind":"struct"},"2:10290:7860":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:6780:2590":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"18:531:19658":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"31:3014:19845":{"crate_id":31,"path":["rustix","backend","io","types","PipeFlags"],"kind":"struct"},"17:12770:19542":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:2855:23616":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:6725:31825":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:8632:15477":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"6:4394:12292":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:23048:2377":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:2312:188":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"6:6007:13176":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"5:4073:2153":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:0:496":{"crate_id":2,"path":["core"],"kind":"module"},"1:10855:24755":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"18:590:31764":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"6:6014:13177":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:9409:8025":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:3142:15644":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"29:67:19805":{"crate_id":29,"path":["io_lifetimes","traits","IntoFd"],"kind":"trait"},"5:7073:33981":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:21572:2597":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:10711:2293":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"6:4488:12460":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:43575:7889":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"27:261:19793":{"crate_id":27,"path":["anstyle","color","Ansi256Color"],"kind":"struct"},"30:5986:12496":{"crate_id":30,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"30:1836:9894":{"crate_id":30,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"16:154:14384":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:43670:7883":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"16:7293:15392":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:3374:7941":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"30:2107:9906":{"crate_id":30,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"32:6182:21412":{"crate_id":32,"path":["linux_raw_sys","general","__sifields__bindgen_ty_6"],"kind":"struct"},"16:7859:15419":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:8788:15508":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"6:7545:12686":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:2706:2114":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"6:494:8995":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"32:5988:12445":{"crate_id":32,"path":["linux_raw_sys","general","itimerspec"],"kind":"struct"},"2:40263:2323":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:44102:8376":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:922:2160":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:11174:25326":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"2:41297:31560":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"17:9028:15512":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"23:262:19761":{"crate_id":23,"path":["anstream","adapter","strip","StrippedBytes"],"kind":"struct"},"2:40734:8172":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:21343:2600":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"32:7745:9003":{"crate_id":32,"path":["linux_raw_sys","general","linger"],"kind":"struct"},"20:4372:19735":{"crate_id":20,"path":["clap_builder","parser","matches","value_source","ValueSource"],"kind":"enum"},"30:7162:13158":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:10465:15695":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:8183:2322":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"16:7077:15390":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:2774:8229":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"32:5422:21380":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_2"],"kind":"enum"},"32:5932:21397":{"crate_id":32,"path":["linux_raw_sys","general","__kernel_itimerspec"],"kind":"struct"},"31:2317:19873":{"crate_id":31,"path":["rustix","backend","io","epoll","EventFlags"],"kind":"struct"},"1:11923:1399":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"5:5666:232":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"32:5088:21359":{"crate_id":32,"path":["linux_raw_sys","general","fsxattr"],"kind":"struct"},"20:3864:19690":{"crate_id":20,"path":["clap_builder","builder","value_parser","OsStringValueParser"],"kind":"struct"},"24:304:19773":{"crate_id":24,"path":["anstyle_parse","Utf8Parser"],"kind":"struct"},"32:6842:21437":{"crate_id":32,"path":["linux_raw_sys","general","membarrier_cmd"],"kind":"enum"},"5:5259:7829":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"6:1556:9895":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"30:5257:12462":{"crate_id":30,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:1783:2216":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:22370:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:11529:14363":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"9:421:14209":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:41639:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"16:6201:15352":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"5:204:7802":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:3700:2374":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:2512:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:2746:106":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"17:13135:19559":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"6:6035:13180":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:888:2156":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:40058:7883":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:39172:8244":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:1572:2158":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"25:89:1989":{"crate_id":25,"path":["utf8parse","Parser"],"kind":"struct"},"1:11056:24182":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"16:7259:2472":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"31:4716:38435":{"crate_id":31,"path":["rustix","process","prctl","SpeculationFeatureState"],"kind":"struct"},"5:2138:34283":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:10699:24118":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"1:11942:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:10657:2458":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"11:749:2157":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:9032:23177":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"6:1695:9908":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:13356:19578":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:7043:30406":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"28:0:1965":{"crate_id":28,"path":["is_terminal"],"kind":"module"},"17:8573:15505":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"30:7602:13175":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"31:4086:38524":{"crate_id":31,"path":["rustix","process","prctl","DumpableBehavior"],"kind":"enum"},"10:0:1822":{"crate_id":10,"path":["adler"],"kind":"module"},"1:413:165":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:3481:2298":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"17:8283:15496":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:9989:2153":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:8899:2550":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"30:751:9007":{"crate_id":30,"path":["libc","unix","servent"],"kind":"struct"},"32:4941:21348":{"crate_id":32,"path":["linux_raw_sys","general","fscrypt_key_specifier__bindgen_ty_1"],"kind":"union"},"17:10478:15694":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"30:5945:12494":{"crate_id":30,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"31:2229:19872":{"crate_id":31,"path":["rustix","backend","io","epoll","CreateFlags"],"kind":"struct"},"32:4927:21346":{"crate_id":32,"path":["linux_raw_sys","general","fscrypt_get_policy_ex_arg__bindgen_ty_1"],"kind":"union"},"17:11459:18292":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:8254:2475":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:39203:198":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"16:2298:14379":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"6:4793:12490":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"6:5050:12518":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"2:42506:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"6:595:9008":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:13639:19599":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"32:6890:21438":{"crate_id":32,"path":["linux_raw_sys","general","membarrier_cmd_flag"],"kind":"enum"},"30:5853:12489":{"crate_id":30,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"32:7598:21479":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_probe"],"kind":"struct"},"17:13024:19552":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"16:5000:15101":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"20:3664:184":{"crate_id":20,"path":["clap_builder","builder","os_str","OsStr"],"kind":"struct"},"17:13249:19569":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:12902:19546":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:21127:2599":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"11:1517:14329":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"16:2642:14421":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"30:5357:12467":{"crate_id":30,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:9110:2584":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"16:5797:36975":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"32:6375:21422":{"crate_id":32,"path":["linux_raw_sys","general","tcp_repair_opt"],"kind":"struct"},"9:481:14206":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:9876:15626":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"32:4797:21337":{"crate_id":32,"path":["linux_raw_sys","general","vfs_cap_data"],"kind":"struct"},"1:618:2130":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"6:6849:13602":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"32:4864:14161":{"crate_id":32,"path":["linux_raw_sys","general","open_how"],"kind":"struct"},"1:11938:1497":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"20:3950:19685":{"crate_id":20,"path":["clap_builder","builder","value_parser","BoolishValueParser"],"kind":"struct"},"23:231:19759":{"crate_id":23,"path":["anstream","adapter","strip","StripStr"],"kind":"struct"},"2:46666:2631":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:8132:2299":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"1:917:2159":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:21729:31502":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"31:3749:38519":{"crate_id":31,"path":["rustix","backend","time","types","TimerfdClockId"],"kind":"enum"},"30:526:8995":{"crate_id":30,"path":["libc","unix","timespec"],"kind":"struct"},"2:20607:31903":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"16:2426:14412":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:13812:19612":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"20:4200:19736":{"crate_id":20,"path":["clap_builder","parser","error","MatchesError"],"kind":"enum"},"16:6935:15386":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:11937:1500":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"17:247:37538":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:11844:18791":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:1062:2168":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:8360:15498":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:10705:15732":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"20:4258:19733":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","ValuesRef"],"kind":"struct"},"5:4842:204":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:2518:238":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"17:8651:14375":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:43521:7887":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"32:4881:21342":{"crate_id":32,"path":["linux_raw_sys","general","fscrypt_policy_v1"],"kind":"struct"},"17:11813:15684":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"32:7804:9847":{"crate_id":32,"path":["linux_raw_sys","general","statfs"],"kind":"struct"},"20:3857:19695":{"crate_id":20,"path":["clap_builder","builder","value_parser","StringValueParser"],"kind":"struct"},"17:13433:19586":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:2242:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"5:6582:7936":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"22:112:19742":{"crate_id":22,"path":["clap_lex","ArgCursor"],"kind":"struct"},"17:10649:15729":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:10092:15680":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:5787:2538":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"6:7516:12682":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:12006:18800":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:13169:19562":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"31:477:19871":{"crate_id":31,"path":["rustix","backend","io","epoll","EventVec"],"kind":"struct"},"17:9973:15601":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"32:6190:21413":{"crate_id":32,"path":["linux_raw_sys","general","__sifields__bindgen_ty_7"],"kind":"struct"},"2:22337:177":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"20:3774:2103":{"crate_id":20,"path":["clap_builder","builder","str","inner","Inner"],"kind":"struct"},"31:5159:38541":{"crate_id":31,"path":["rustix","process","wait","WaitStatus"],"kind":"struct"},"31:3567:38558":{"crate_id":31,"path":["rustix","backend","time","types","TimerfdFlags"],"kind":"struct"},"30:8729:13597":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"26:41:19785":{"crate_id":26,"path":["colorchoice","AtomicChoice"],"kind":"struct"},"2:41234:2364":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"30:5165:12457":{"crate_id":30,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:8971:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"2:42666:8028":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:44361:161":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:11522:14363":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:2695:225":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"18:652:37657":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:10491:15693":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"16:7635:15409":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:6589:8176":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:11866:24113":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:6575:2541":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"6:6719:13593":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:9218:15516":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"20:4226:19725":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","SubCommand"],"kind":"struct"},"16:2448:14413":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"18:521:19654":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"16:7488:15399":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:42039:2527":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:43279:7855":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"11:836:2165":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:2694:226":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"30:5459:12471":{"crate_id":30,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"6:6819:13599":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:3169:7962":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"27:360:19798":{"crate_id":27,"path":["anstyle","reset","Reset"],"kind":"struct"},"2:21348:2610":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"2:43625:2322":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"32:6734:9002":{"crate_id":32,"path":["linux_raw_sys","general","winsize"],"kind":"struct"},"2:11269:8337":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:43898:7908":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:7595:2186":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:6508:2536":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:9886:15599":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"30:8858:13603":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"32:7895:13164":{"crate_id":32,"path":["linux_raw_sys","general","cmsghdr"],"kind":"struct"},"1:8176:2326":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"32:5625:21387":{"crate_id":32,"path":["linux_raw_sys","general","ipv6_destopt_hao"],"kind":"struct"},"5:4362:34164":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"30:6283:12513":{"crate_id":30,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"16:4872:15069":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"16:7065:36567":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:5593:2543":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:420:14381":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"30:7565:13173":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"30:7420:13168":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"32:5119:21362":{"crate_id":32,"path":["linux_raw_sys","general","robust_list_head"],"kind":"struct"},"2:41478:2154":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"17:12259:18816":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"30:6140:12503":{"crate_id":30,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"16:2668:14422":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:9488:15562":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"32:6173:21411":{"crate_id":32,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3"],"kind":"struct"},"17:9350:37522":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"5:6768:34167":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:6319:166":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"30:2165:9910":{"crate_id":30,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"32:7084:21459":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_sqe__bindgen_ty_5"],"kind":"union"},"17:11484:18294":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:13265:19571":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:9068:37598":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:41589:2152":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"16:4327:14884":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:7673:2136":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"5:7094:2154":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:11011:15480":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"32:5593:12500":{"crate_id":32,"path":["linux_raw_sys","general","in6_ifreq"],"kind":"struct"},"17:12358:18823":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"18:0:1829":{"crate_id":18,"path":["memchr"],"kind":"module"},"17:9188:37571":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:46430:2665":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:9959:15628":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:9380:15542":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:2985:2210":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"31:3874:38479":{"crate_id":31,"path":["rustix","process","membarrier","MembarrierQuery"],"kind":"struct"},"17:10681:15730":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"15:180:14354":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"20:4534:19710":{"crate_id":20,"path":["clap_builder","output","fmt","Stream"],"kind":"enum"},"20:4456:19726":{"crate_id":20,"path":["clap_builder","parser","parser","Identifier"],"kind":"enum"},"2:20771:2601":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"27:282:19794":{"crate_id":27,"path":["anstyle","color","RgbColor"],"kind":"struct"},"1:1785:2217":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"1:8439:2489":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"32:7555:21475":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_rsrc_update2"],"kind":"struct"},"2:44094:8375":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"30:8417:13590":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:21015:2599":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:10303:15637":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:9986:15629":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"32:5319:9901":{"crate_id":32,"path":["linux_raw_sys","general","in_pktinfo"],"kind":"struct"},"17:13803:19611":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:7165:8175":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"6:1519:9891":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:4011:31824":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:20933:2300":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"30:9257:8953":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:12194:18813":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:6108:2733":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"6:4412:12450":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:9721:15575":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"6:1689:9907":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"29:147:19821":{"crate_id":29,"path":["io_lifetimes","raw","FromRawFilelike"],"kind":"trait"},"2:47228:2626":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"30:9659:12686":{"crate_id":30,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"16:6981:15388":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"32:6988:21449":{"crate_id":32,"path":["linux_raw_sys","general","uffdio_register"],"kind":"struct"},"1:7891:2193":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"16:2764:14426":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:10691:15731":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"5:3168:2152":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:40481:8197":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"32:7078:21458":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_sqe__bindgen_ty_4"],"kind":"union"},"2:43259:7856":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"30:5182:12458":{"crate_id":30,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:13857:19615":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:5090:191":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"5:7065:198":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"16:2742:14425":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"20:4189:2130":{"crate_id":20,"path":["clap_builder","error","Backtrace"],"kind":"struct"},"17:10885:15526":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"6:474:8992":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:6921:2352":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:12550:18836":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"34:32:22973":{"crate_id":34,"path":["strsim","StringWrapper"],"kind":"struct"},"17:10967:15530":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"30:4854:12443":{"crate_id":30,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"5:7334:2158":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"2:25858:2378":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:46050:2691":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"24:290:19772":{"crate_id":24,"path":["anstyle_parse","AsciiParser"],"kind":"struct"},"32:6776:21434":{"crate_id":32,"path":["linux_raw_sys","general","oldold_utsname"],"kind":"struct"},"6:4373:12446":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:11434:18290":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"31:3823:38542":{"crate_id":31,"path":["rustix","process","id","Gid"],"kind":"struct"},"1:11101:24108":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"16:2378:14410":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"30:6361:12522":{"crate_id":30,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"18:80:19629":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"32:6933:21442":{"crate_id":32,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"],"kind":"union"},"2:11253:8335":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:45858:2670":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"6:1648:9903":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"30:6254:12519":{"crate_id":30,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"23:382:2488":{"crate_id":23,"path":["anstream","adapter","wincon","State"],"kind":"enum"},"16:2694:14423":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:11060:15533":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"6:4400:12449":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:10276:7862":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:7726:23907":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"20:3688:19677":{"crate_id":20,"path":["clap_builder","builder","possible_value","PossibleValue"],"kind":"struct"},"32:6204:21415":{"crate_id":32,"path":["linux_raw_sys","general","siginfo__bindgen_ty_1"],"kind":"union"},"2:12554:140":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:13744:19607":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"29:37:19811":{"crate_id":29,"path":["io_lifetimes","portability","IntoFilelike"],"kind":"trait"},"14:160:14336":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"15:198:14355":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"32:6954:21445":{"crate_id":32,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_4"],"kind":"struct"},"17:10823:15523":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:11942:112":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:44390:7784":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"20:4011:31574":{"crate_id":20,"path":["clap_builder","builder","debug_asserts","Flag"],"kind":"enum"},"2:11488:8383":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"5:1408:2152":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:4135:2422":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:11924:1483":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"31:4472:38483":{"crate_id":31,"path":["rustix","process","prctl","MachineCheckMemoryCorruptionKillPolicy"],"kind":"enum"},"1:1561:2152":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"16:3749:14450":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:7722:2236":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:857:2153":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"6:579:9006":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"30:7584:13174":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"6:4586:12470":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:46460:2671":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"5:1479:2159":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"22:98:19741":{"crate_id":22,"path":["clap_lex","RawArgs"],"kind":"struct"},"2:39373:31785":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"11:657:2154":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"32:7017:21452":{"crate_id":32,"path":["linux_raw_sys","general","uffdio_writeprotect"],"kind":"struct"},"1:5586:2542":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"25:0:1962":{"crate_id":25,"path":["utf8parse"],"kind":"module"},"6:4482:12459":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"22:32:2326":{"crate_id":22,"path":["clap_lex","ext","Split"],"kind":"struct"},"6:4435:12453":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"32:6980:21448":{"crate_id":32,"path":["linux_raw_sys","general","uffdio_range"],"kind":"struct"},"16:6943:15387":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:11360:2374":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"6:6617:13590":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:8249:2427":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:8163:2324":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:10014:2326":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"17:11641:18305":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"5:3235:2176":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:9149:25758":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"2:2812:8233":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"18:660:19647":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:7619:2110":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"20:3659:37953":{"crate_id":20,"path":["clap_builder","builder","ext","BoxedEntry"],"kind":"struct"},"16:6293:15356":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"27:313:19795":{"crate_id":27,"path":["anstyle","effect","Effects"],"kind":"struct"},"17:11258:18280":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:3155:23873":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"9:445:14207":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:1768:609":{"crate_id":1,"path":["std","env"],"kind":"module"},"32:7388:21469":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_params"],"kind":"struct"},"2:20740:2604":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:5357:2500":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"30:1707:9887":{"crate_id":30,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"30:5888:12491":{"crate_id":30,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"16:7837:15418":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"16:4480:14965":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"5:3139:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:6156:23209":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:2163:8259":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"32:7312:21464":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_8"],"kind":"enum"},"32:4921:21345":{"crate_id":32,"path":["linux_raw_sys","general","fscrypt_get_policy_ex_arg"],"kind":"struct"},"32:5632:21388":{"crate_id":32,"path":["linux_raw_sys","general","ipv6hdr"],"kind":"struct"},"2:39345:8246":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:9153:7804":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:9534:15555":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:10039:15635":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"32:7649:21485":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_buf_ring__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1"],"kind":"struct"},"2:2932:2027":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:3424:2296":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"5:4938:2311":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"5:2167:34017":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"14:187:14344":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:41959:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"11:1838:2173":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:40157:8312":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"16:7244:36910":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"5:2959:34073":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"31:4957:38564":{"crate_id":31,"path":["rustix","process","wait","WaitOptions"],"kind":"struct"},"6:4878:1002":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:11191:23156":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"5:7254:224":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"32:7913:9907":{"crate_id":32,"path":["linux_raw_sys","general","mmsghdr"],"kind":"struct"},"2:21454:31679":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:9453:15546":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"2:43654:7874":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"30:4767:12508":{"crate_id":30,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"4:0:1819":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:1844:1986":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"14:0:1825":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:13411:19583":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:43315:7885":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:10440:15723":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:5462:2503":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"17:13791:19610":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"5:1008:34165":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:4410:2113":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"16:6728:15378":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:13667:19602":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"32:7049:21456":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_sqe__bindgen_ty_2"],"kind":"union"},"1:11490:26050":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"5:35:2212":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"5:6601:7937":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"29:42:19812":{"crate_id":29,"path":["io_lifetimes","portability","IntoSocketlike"],"kind":"trait"},"17:13399:19582":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"18:574:37657":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"16:2502:14415":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"32:6143:21408":{"crate_id":32,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5__bindgen_ty_1"],"kind":"union"},"16:8072:15422":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:41538:193":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:46125:30951":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"20:4193:19723":{"crate_id":20,"path":["clap_builder","parser","arg_matcher","ArgMatcher"],"kind":"struct"},"20:4361:19724":{"crate_id":20,"path":["clap_builder","parser","matches","matched_arg","MatchedArg"],"kind":"struct"},"17:12236:18815":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"16:6793:15380":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"30:6335:12517":{"crate_id":30,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:21989:2384":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:43250:7853":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"6:6743:13595":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"32:6670:21431":{"crate_id":32,"path":["linux_raw_sys","general","tcp_zerocopy_receive"],"kind":"struct"},"1:0:1391":{"crate_id":1,"path":["std"],"kind":"module"},"17:13842:19614":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:40276:8177":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"20:3328:19676":{"crate_id":20,"path":["clap_builder","builder","arg_predicate","ArgPredicate"],"kind":"enum"},"1:11931:744":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:9530:8348":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"2:12386:8023":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"5:6611:7938":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"6:4605:12471":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:3266:15662":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"29:56:19810":{"crate_id":29,"path":["io_lifetimes","portability","FromSocketlike"],"kind":"trait"},"2:11283:7876":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"6:4314:12442":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"6:4715:12480":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:8979:37556":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"17:13453:19588":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"30:7270:13163":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"16:5557:15328":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:13041:19554":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:11120:2552":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"6:6021:13178":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:11266:28155":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"6:4871:12500":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"6:1708:9909":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"30:770:9008":{"crate_id":30,"path":["libc","unix","protoent"],"kind":"struct"},"17:9907:15627":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"20:3960:19689":{"crate_id":20,"path":["clap_builder","builder","value_parser","NonEmptyStringValueParser"],"kind":"struct"},"16:7042:36669":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"16:7449:15396":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:11339:18284":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"16:2357:14409":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"32:7333:21465":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_cqe"],"kind":"struct"},"6:4495:12461":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"30:8325:9847":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:10283:15641":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"30:1962:9900":{"crate_id":30,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"11:1611:36483":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"18:690:19650":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"30:5547:12475":{"crate_id":30,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"32:4905:21344":{"crate_id":32,"path":["linux_raw_sys","general","fscrypt_policy_v2"],"kind":"struct"},"6:562:9003":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"16:5402:14373":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:2469:2300":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:3142:8245":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:8244:2426":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:11628:18304":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:3805:2375":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"6:1630:9901":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:11721:18787":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:9469:15547":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:4702:2404":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"5:1439:2154":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:43389:7857":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"20:3654:37786":{"crate_id":20,"path":["clap_builder","builder","ext","BoxedExtension"],"kind":"struct"},"20:2981:37850":{"crate_id":20,"path":["clap_builder","builder","app_settings","Flags"],"kind":"struct"},"31:3206:38580":{"crate_id":31,"path":["rustix","backend","process","types","MembarrierCommand"],"kind":"enum"},"1:11899:24097":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:2219:2272":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"17:10080:15679":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:40716:8169":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"30:8470:10032":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:8548:15504":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"30:492:8993":{"crate_id":30,"path":["libc","unix","utimbuf"],"kind":"struct"},"11:2049:2168":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"5:1470:2156":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"6:4625:12473":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"16:2967:14434":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:30283:8219":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"5:3327:2158":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"30:6183:12505":{"crate_id":30,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:21442:2591":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:13101:19541":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"6:6795:13597":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:3318:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:4606:7989":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"32:5328:9892":{"crate_id":32,"path":["linux_raw_sys","general","sockaddr_in"],"kind":"struct"},"32:6766:2415":{"crate_id":32,"path":["linux_raw_sys","general","sockaddr_un"],"kind":"struct"},"17:9340:15519":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:7837:2290":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"30:5775:12485":{"crate_id":30,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:8255:2474":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:1577:2173":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:21099:2595":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:8525:2493":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:11902:18795":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:10775:7851":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"29:182:19824":{"crate_id":29,"path":["io_lifetimes","views","SocketlikeViewType"],"kind":"trait"},"2:5991:8200":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:47689:7763":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"30:5716:12482":{"crate_id":30,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"5:3580:2152":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"32:5918:21395":{"crate_id":32,"path":["linux_raw_sys","general","rand_pool_info"],"kind":"struct"},"31:4822:38584":{"crate_id":31,"path":["rustix","process","prctl","PointerAuthenticationKeys"],"kind":"struct"},"30:9613:12683":{"crate_id":30,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"9:174:14310":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:3472:23060":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"6:5876:13166":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"6:4916:12504":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"32:6758:9000":{"crate_id":32,"path":["linux_raw_sys","general","iovec"],"kind":"struct"},"5:5059:2526":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:43645:7875":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:10052:15657":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"26:0:1963":{"crate_id":26,"path":["colorchoice"],"kind":"module"},"2:11428:8384":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:43493:7859":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:40314:8186":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:2911:2189":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:12799:19543":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"23:434:19752":{"crate_id":23,"path":["anstream","strip","StripStream"],"kind":"struct"},"17:10125:15656":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:10555:15690":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"16:7711:15413":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"6:5862:13125":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"5:6371:2154":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"16:6990:15389":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:43792:7904":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:22403:2115":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"6:1716:9910":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:13625:19598":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:46172:31149":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:2210:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"6:4637:12474":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"9:52:14226":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:6935:24032":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"32:5275:9890":{"crate_id":32,"path":["linux_raw_sys","general","ip_mreq_source"],"kind":"struct"},"30:2041:9903":{"crate_id":30,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"30:5681:12480":{"crate_id":30,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"16:7335:36974":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:44118:8373":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:11785:18789":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"5:5263:7830":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:44090:8372":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"29:0:1966":{"crate_id":29,"path":["io_lifetimes"],"kind":"module"},"30:1723:9888":{"crate_id":30,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"6:6867:13603":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"32:4966:21351":{"crate_id":32,"path":["linux_raw_sys","general","fscrypt_get_key_status_arg"],"kind":"struct"},"20:1631:26182":{"crate_id":20,"path":["clap_builder","error","format","Escape"],"kind":"struct"},"31:2635:19843":{"crate_id":31,"path":["rustix","backend","io","types","FdFlags"],"kind":"struct"},"1:2376:2286":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"16:535:36612":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:11064:8392":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"31:2473:19837":{"crate_id":31,"path":["rustix","backend","io","errno","Errno"],"kind":"struct"},"32:5649:21389":{"crate_id":32,"path":["linux_raw_sys","general","ipv6hdr__bindgen_ty_1"],"kind":"union"},"23:245:19760":{"crate_id":23,"path":["anstream","adapter","strip","StripStrIter"],"kind":"struct"},"31:4000:38559":{"crate_id":31,"path":["rustix","process","pidfd","PidfdFlags"],"kind":"struct"},"2:4326:7973":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"19:0:1032":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:9062:218":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:4760:2409":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"30:7901:13211":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:5343:2499":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:45535:2657":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"30:7627:13176":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"5:779:2177":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"20:0:1702":{"crate_id":20,"path":["clap_builder"],"kind":"module"},"6:4677:2387":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:47662:2693":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"16:2862:14430":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:11585:18301":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"30:805:8675":{"crate_id":30,"path":["libc","unix","FILE"],"kind":"enum"},"30:5280:12463":{"crate_id":30,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:2506:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"17:12331:18821":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:47720:7766":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"5:7102:2154":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"32:6092:21402":{"crate_id":32,"path":["linux_raw_sys","general","__sifields"],"kind":"union"},"2:40254:2207":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:2161:8258":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"11:2180:36477":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:12293:18818":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:30875:8015":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"16:6361:15362":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"24:0:1961":{"crate_id":24,"path":["anstyle_parse"],"kind":"module"},"18:614:37679":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:11478:7780":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"6:6606:13589":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:4662:2456":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:1048:2167":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"5:3567:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"32:4980:21352":{"crate_id":32,"path":["linux_raw_sys","general","fsconfig_command"],"kind":"enum"},"17:13385:19581":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"32:5112:21361":{"crate_id":32,"path":["linux_raw_sys","general","robust_list"],"kind":"struct"},"16:7588:15406":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"24:96:19770":{"crate_id":24,"path":["anstyle_parse","VtUtf8Receiver"],"kind":"struct"},"2:2856:8243":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:11037:15532":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"16:3899:14504":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"32:7864:21495":{"crate_id":32,"path":["linux_raw_sys","general","user_desc"],"kind":"struct"},"17:9178:15515":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"30:4952:12447":{"crate_id":30,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:21977:2381":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:40701:8168":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"30:6220:12507":{"crate_id":30,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"6:1732:9911":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:46620:2625":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:47680:7762":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"20:4474:37851":{"crate_id":20,"path":["clap_builder","parser","validator","Conflicts"],"kind":"struct"},"1:635:2132":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"6:7551:12687":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:1846:2233":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"30:9297:13973":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:2691:2022":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"1:7499:25054":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:6981:2521":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"32:5388:21376":{"crate_id":32,"path":["linux_raw_sys","general","ip_auth_hdr"],"kind":"struct"},"31:3840:38538":{"crate_id":31,"path":["rustix","process","id","Pid"],"kind":"struct"},"2:40375:8191":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"30:7473:13170":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"30:1927:9898":{"crate_id":30,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:20890:8258":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"11:2186:36479":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:45361:2650":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"16:4728:15045":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"22:157:19744":{"crate_id":22,"path":["clap_lex","ShortFlags"],"kind":"struct"},"20:3626:37889":{"crate_id":20,"path":["clap_builder","builder","command","TermWidth"],"kind":"struct"},"5:1299:2170":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"32:4719:21332":{"crate_id":32,"path":["linux_raw_sys","general","__BindgenBitfieldUnit"],"kind":"struct"},"23:348:19764":{"crate_id":23,"path":["anstream","adapter","wincon","WinconBytesIter"],"kind":"struct"},"30:5480:12472":{"crate_id":30,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"32:5019:21353":{"crate_id":32,"path":["linux_raw_sys","general","mount_attr"],"kind":"struct"},"30:6236:12509":{"crate_id":30,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"32:5940:21398":{"crate_id":32,"path":["linux_raw_sys","general","__kernel_old_timeval"],"kind":"struct"},"1:11197:2514":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:41340:2376":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:4390:7976":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:45952:2624":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"30:7310:13165":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:9557:15516":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"11:1858:2176":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"2:2843:8240":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:11933:741":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"20:2896:37718":{"crate_id":20,"path":["clap_builder","builder","app_settings","AppFlags"],"kind":"struct"},"1:9403:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"6:1499:9888":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:9826:15572":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:2264:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:41719:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"30:7360:13125":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:10104:15636":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:3648:2154":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"14:165:14337":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"5:7149:2150":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:11969:18798":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"32:6688:13165":{"crate_id":32,"path":["linux_raw_sys","general","termios"],"kind":"struct"},"2:9163:7810":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:3152:28741":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:43871:7907":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:10000:15675":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:1667:1088":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"8:0:1820":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"30:6160:12504":{"crate_id":30,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"6:1680:9906":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:5933:2542":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:13033:19553":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:9157:7812":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"32:6211:21416":{"crate_id":32,"path":["linux_raw_sys","general","siginfo__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"17:10761:15521":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:9498:15561":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"5:1371:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"5:4193:2311":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"14:31:14336":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"5:7224:2251":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"32:5139:21365":{"crate_id":32,"path":["linux_raw_sys","general","__kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"18:671:19648":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:41470:2153":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:45473:2622":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"16:8269:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"32:6744:21433":{"crate_id":32,"path":["linux_raw_sys","general","termio"],"kind":"struct"},"18:727:19652":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"20:3683:2103":{"crate_id":20,"path":["clap_builder","builder","os_str","inner","Inner"],"kind":"struct"},"20:4598:37802":{"crate_id":20,"path":["clap_builder","util","flat_set","FlatSet"],"kind":"struct"},"32:5600:21384":{"crate_id":32,"path":["linux_raw_sys","general","ipv6_rt_hdr"],"kind":"struct"},"30:5148:12456":{"crate_id":30,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"32:7740:9891":{"crate_id":32,"path":["linux_raw_sys","general","sockaddr"],"kind":"struct"},"11:1845:2174":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:20852:2608":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:501:2099":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:40204:2269":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"30:663:9002":{"crate_id":30,"path":["libc","unix","winsize"],"kind":"struct"},"31:4415:38529":{"crate_id":31,"path":["rustix","process","prctl","TimingMethod"],"kind":"enum"},"2:43688:7884":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:9410:2292":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"32:4957:21350":{"crate_id":32,"path":["linux_raw_sys","general","fscrypt_remove_key_arg"],"kind":"struct"},"2:41679:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:4868:2454":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:39313:2144":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"16:5886:15343":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:9866:15592":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"31:4493:38459":{"crate_id":31,"path":["rustix","process","prctl","VirtualMemoryMapAddress"],"kind":"enum"},"17:12098:18807":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"6:1535:9893":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"32:5924:21396":{"crate_id":32,"path":["linux_raw_sys","general","__kernel_timespec"],"kind":"struct"},"1:1568:2157":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"20:3876:19686":{"crate_id":20,"path":["clap_builder","builder","value_parser","EnumValueParser"],"kind":"struct"},"16:6164:36623":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:13419:19584":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"20:735:38148":{"crate_id":20,"path":["clap_builder","builder","ext","Extension"],"kind":"trait"},"17:10598:15530":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"6:4327:12443":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:47735:7767":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"20:3996:19682":{"crate_id":20,"path":["clap_builder","builder","value_parser","_AutoValueParser"],"kind":"struct"},"9:502:14210":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:47700:7764":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"30:6203:12506":{"crate_id":30,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"17:11532:18297":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"11:2174:31718":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"16:8214:15430":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"31:2179:38585":{"crate_id":31,"path":["rustix","process","uname","Uname"],"kind":"struct"},"6:4786:12489":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:10343:2507":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"30:6244:12510":{"crate_id":30,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:9011:23109":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"24:132:2488":{"crate_id":24,"path":["anstyle_parse","state","definitions","State"],"kind":"enum"},"6:1637:9902":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:10936:15529":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"30:7385:13166":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:3956:2392":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"16:5998:15348":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:11916:937":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:41388:2369":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"11:844:2166":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:2317:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"1:10079:24895":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"30:1883:9896":{"crate_id":30,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"30:7701:13180":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:11337:23618":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:20949:2594":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"2:11787:7896":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:8111:2354":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"6:6170:13211":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:12607:18840":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:4351:2419":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:30052:2379":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"31:3245:38474":{"crate_id":31,"path":["rustix","backend","process","types","Resource"],"kind":"enum"},"11:630:2152":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:4783:2403":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"5:4031:34165":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"30:715:9005":{"crate_id":30,"path":["libc","unix","itimerval"],"kind":"struct"},"17:9038:37597":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:8104:2352":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:3898:2389":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"23:153:19750":{"crate_id":23,"path":["anstream","lockable","Lockable"],"kind":"trait"},"30:2088:9905":{"crate_id":30,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:12915:19547":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:39560:26283":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:7820:2289":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:10580:15726":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:44340:2731":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"11:1831:2158":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"17:11573:18300":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:43177:7847":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:3999:31814":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"6:4928:12505":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:11083:2304":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"16:4037:14618":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"30:608:8999":{"crate_id":30,"path":["libc","unix","hostent"],"kind":"struct"},"11:2168:36482":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"32:5251:9887":{"crate_id":32,"path":["linux_raw_sys","general","in_addr"],"kind":"struct"},"2:12609:2182":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"16:6236:15354":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:2833:8238":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:43663:7873":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:13015:19551":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:1630:587":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"32:6797:21435":{"crate_id":32,"path":["linux_raw_sys","general","old_utsname"],"kind":"struct"},"2:46542:2619":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:42484:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"20:1360:1989":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParserFactory","Parser"],"kind":"foreign_type"},"1:3934:2390":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:44348:2732":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:8854:2546":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"32:7008:21451":{"crate_id":32,"path":["linux_raw_sys","general","uffdio_zeropage"],"kind":"struct"},"6:4542:12466":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"16:2404:14411":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"32:5667:21392":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_3"],"kind":"enum"},"17:8823:15509":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:11932:745":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"20:3798:19705":{"crate_id":20,"path":["clap_builder","builder","styled_str","Styles"],"kind":"struct"},"1:10681:28156":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"1:9213:1986":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"32:6111:21404":{"crate_id":32,"path":["linux_raw_sys","general","__sifields__bindgen_ty_2"],"kind":"struct"},"2:44305:195":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"1:7827:2293":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"16:5630:15332":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"2:49682:2613":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"30:6020:12498":{"crate_id":30,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"16:6890:15384":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"11:2194:36480":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"18:681:19649":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"6:7504:12680":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:44297:211":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"30:4917:12445":{"crate_id":30,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"5:7011:2180":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:8200:2363":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"1:8989:23200":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"30:8820:13601":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"16:6767:15379":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"29:189:19826":{"crate_id":29,"path":["io_lifetimes","views","SocketlikeView"],"kind":"struct"},"2:2780:8228":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:4599:24920":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"6:6710:13592":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"32:5655:21390":{"crate_id":32,"path":["linux_raw_sys","general","ipv6hdr__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"32:7041:21455":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_sqe__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"2:43198:7838":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:7883:2337":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:22238:178":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:4119:2420":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:9151:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"30:8802:13600":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"17:12449:18829":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"16:2931:14433":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:9159:7813":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"32:7567:21476":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_notification_slot"],"kind":"struct"},"2:2827:8237":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"6:4649:12475":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:45505:2652":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:43224:7836":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:45405:2651":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"31:393:38589":{"crate_id":31,"path":["rustix","backend","reg","ArgReg"],"kind":"struct"},"1:11936:1499":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"5:892:2152":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"11:798:2162":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"33:0:1969":{"crate_id":33,"path":["anstyle_query"],"kind":"module"},"1:4601:24922":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"1:867:2154":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:5044:26015":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:10057:7863":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"5:4233:2152":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:43539:7888":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"16:5071:15124":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"32:6199:21414":{"crate_id":32,"path":["linux_raw_sys","general","siginfo"],"kind":"struct"},"31:3456:19880":{"crate_id":31,"path":["rustix","backend","termios","types","QueueSelector"],"kind":"enum"},"32:7588:21478":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_probe_op"],"kind":"struct"},"1:9127:26052":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"15:0:1826":{"crate_id":15,"path":["addr2line"],"kind":"module"},"17:386:15493":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"11:793:2159":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"23:286:19757":{"crate_id":23,"path":["anstream","adapter","strip","StripBytes"],"kind":"struct"},"1:6355:26021":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"1:10686:2289":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"2:43371:2326":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:43421:7892":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:2800:8232":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"32:7617:21481":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_restriction__bindgen_ty_1"],"kind":"union"},"2:42457:71":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"17:13219:19566":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"20:4651:1984":{"crate_id":20,"path":["clap_builder","util","color","ColorChoice"],"kind":"enum"},"2:20815:2607":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"2:41487:2472":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"17:12033:18802":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:12126:18809":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:8813:2152":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:3163:7963":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:43357:2325":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:9577:15560":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:8909:2325":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"17:11924:18796":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"30:7754:13182":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"5:7057:2154":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:40456:8181":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:8858:15510":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"24:113:19775":{"crate_id":24,"path":["anstyle_parse","params","Params"],"kind":"struct"},"16:5963:15346":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"20:3397:37850":{"crate_id":20,"path":["clap_builder","builder","arg_settings","Flags"],"kind":"struct"},"2:40129:2254":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:20880:2602":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"16:6442:15367":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"30:7401:13167":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:10029:23624":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"6:541:9000":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"16:6431:15366":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"16:7029:36911":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:42906:8365":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"34:72:22987":{"crate_id":34,"path":["strsim","StrSimError"],"kind":"enum"},"1:930:2162":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:13506:19594":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:21125:2603":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:901:2157":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"30:7824:13209":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:11741:7867":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"24:192:14246":{"crate_id":24,"path":["anstyle_parse","state","definitions","Action"],"kind":"enum"},"5:3180:34282":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:3079:2211":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"6:4445:12454":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"16:7437:15395":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"16:5708:15337":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:11930:743":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"1:11883:23202":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:40020:8002":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:11410:18288":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"30:7721:36266":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:11615:18303":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"32:5366:21373":{"crate_id":32,"path":["linux_raw_sys","general","iphdr__bindgen_ty_1"],"kind":"union"},"32:5301:21370":{"crate_id":32,"path":["linux_raw_sys","general","group_source_req"],"kind":"struct"},"1:4665:2429":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:1985:184":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:41211:155":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"16:8156:15427":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"6:4474:12458":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"16:3782:14459":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"32:4853:13588":{"crate_id":32,"path":["linux_raw_sys","general","flock64"],"kind":"struct"},"6:547:9001":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:13121:19558":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:12835:19544":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:47540:2687":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"16:2524:14416":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"31:4594:38478":{"crate_id":31,"path":["rustix","process","prctl","SpeculationFeature"],"kind":"enum"},"20:4003:19699":{"crate_id":20,"path":["clap_builder","builder","value_parser","_AnonymousValueParser"],"kind":"struct"},"20:4496:37858":{"crate_id":20,"path":["clap_builder","mkeymap","MKeyMap"],"kind":"struct"},"1:10741:2295":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"1:4704:2407":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:11993:18799":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:10451:2343":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"5:1520:2192":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"16:6876:15383":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:6032:25314":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:3638:2370":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"30:473:8992":{"crate_id":30,"path":["libc","unix","group"],"kind":"struct"},"16:6696:15377":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:42429:110":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"30:7441:13169":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"20:59:1986":{"crate_id":20,"path":["clap_builder","derive","Args"],"kind":"trait"},"2:9807:2300":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:44098:8377":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:1071:2169":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:10635:15719":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"32:5102:21360":{"crate_id":32,"path":["linux_raw_sys","general","futex_waitv"],"kind":"struct"},"1:2620:2338":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"11:723:2155":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:45806:2658":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"30:5699:12481":{"crate_id":30,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:10569:15692":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1:8271:2428":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"27:382:19799":{"crate_id":27,"path":["anstyle","style","Style"],"kind":"struct"},"1:4587:2393":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:3996:2394":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"16:8090:15423":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:6893:25021":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"5:6450:34165":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:11422:2375":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"30:7229:13161":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:45906:2618":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"6:4943:12507":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:43823:7906":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:11935:1498":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"17:12372:18824":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"32:4894:21343":{"crate_id":32,"path":["linux_raw_sys","general","fscrypt_key"],"kind":"struct"},"16:4818:15063":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:2354:189":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:585:2126":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"17:11800:18790":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"17:9895:15598":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:40077:7997":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"30:5087:12453":{"crate_id":30,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:6043:36266":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:5377:2501":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"5:3719:2193":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"6:1494:9887":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:44287:205":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:13066:19556":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:10851:2236":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"18:699:19651":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:11879:18793":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:9906:23465":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"2:43167:7849":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:4148:2423":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"6:7539:12685":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"30:808:8676":{"crate_id":30,"path":["libc","unix","fpos_t"],"kind":"enum"},"30:8581:13592":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:11941:1128":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"6:5067:12520":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:44166:2589":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"17:13461:19589":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"30:6275:12512":{"crate_id":30,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"30:5814:12487":{"crate_id":30,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:9545:15554":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:7169:8174":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"30:7842:12357":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:6505:2535":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:47784:7770":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:2580:2328":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:44126:8392":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:975:15559":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"30:8393:13589":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:21676:31504":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"31:2488:19840":{"crate_id":31,"path":["rustix","backend","io","poll_fd","PollFlags"],"kind":"struct"},"2:9161:194":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:1916:2198":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"16:6307:15357":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"32:7753:21492":{"crate_id":32,"path":["linux_raw_sys","general","linux_dirent64"],"kind":"struct"},"2:43806:7905":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"20:4570:8188":{"crate_id":20,"path":["clap_builder","util","flat_map","FlatMap"],"kind":"struct"},"30:5031:12450":{"crate_id":30,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:2348:2275":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:8360:7868":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"30:5636:12478":{"crate_id":30,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:13316:19574":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"20:4209:1983":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","ArgMatches"],"kind":"struct"},"32:6050:13973":{"crate_id":32,"path":["linux_raw_sys","general","clone_args"],"kind":"struct"},"32:6718:21432":{"crate_id":32,"path":["linux_raw_sys","general","ktermios"],"kind":"struct"},"5:7237:2252":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:10134:7864":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:8521:15503":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:9965:2152":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:47624:2672":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"30:7519:13171":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:9853:15625":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"22:128:19743":{"crate_id":22,"path":["clap_lex","ParsedArg"],"kind":"struct"},"6:4962:12510":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:11653:18306":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:9628:31232":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:10676:24897":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"2:42674:31770":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"30:5320:12465":{"crate_id":30,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"6:4853:12498":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"16:6146:194":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"20:3705:19678":{"crate_id":20,"path":["clap_builder","builder","range","ValueRange"],"kind":"struct"},"17:10747:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:3488:2320":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"5:1500:2161":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:7645:2109":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"30:7119:13096":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"30:8695:13596":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:9072:2552":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"5:1270:2169":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"6:0:817":{"crate_id":6,"path":["libc"],"kind":"module"},"17:12072:18805":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:39380:7974":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"6:123:8676":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:40084:7998":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:4336:7974":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"1:1821:2227":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"17:12345:18822":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"16:2808:14428":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"16:6376:15363":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"16:6321:15358":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"17:13763:19608":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"32:7025:21453":{"crate_id":32,"path":["linux_raw_sys","general","uffdio_continue"],"kind":"struct"},"6:5899:13169":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"6:6564:9043":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"6:4455:12455":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"30:5966:12495":{"crate_id":30,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:10386:25336":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"6:4753:12485":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:8718:15482":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"30:5236:12461":{"crate_id":30,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:20995:2596":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"16:3047:14436":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"16:7557:15405":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"16:2546:14417":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"6:7563:12689":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"6:5766:13158":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"30:9671:12688":{"crate_id":30,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"6:6774:13596":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"30:6003:12497":{"crate_id":30,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"30:8353:8877":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"16:5305:15310":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:12318:18820":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:41353:2367":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"30:5758:12484":{"crate_id":30,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:7556:25334":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"17:10270:15640":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:7810:2291":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"11:968:2167":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"30:1795:9892":{"crate_id":30,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"32:6227:21417":{"crate_id":32,"path":["linux_raw_sys","general","sigevent__bindgen_ty_1"],"kind":"union"},"32:7668:21487":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_12"],"kind":"enum"},"2:45713:2690":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"6:4832:12495":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"30:6299:12514":{"crate_id":30,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"6:62:8621":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:21873:31109":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:39969:7965":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"6:4303:12441":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:11736:7869":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"6:488:8994":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"32:7824:10017":{"crate_id":32,"path":["linux_raw_sys","general","statfs64"],"kind":"struct"},"17:13488:19592":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"16:7529:15403":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:43237:7837":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:1589:2175":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"16:7572:36643":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"30:8306:9043":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:9228:37572":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"6:4468:12457":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:13324:19575":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"11:1027:14325":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"30:509:8994":{"crate_id":30,"path":["libc","unix","timeval"],"kind":"struct"},"18:636:37662":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:42721:31418":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:8389:15499":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:8941:107":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:4259:7967":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"20:4309:37711":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrencesRef"],"kind":"struct"},"5:2032:2193":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:2922:2024":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"6:4340:12444":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:4010:2396":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:3514:2157":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"32:7406:21470":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_10"],"kind":"enum"},"32:6163:21410":{"crate_id":32,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2"],"kind":"struct"},"5:1423:2153":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:39269:201":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:1080:2170":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"6:4419:12451":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:11224:24179":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:4006:2395":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"5:1135:35570":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:41759:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"6:5007:12514":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:41520:2473":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:2763:8227":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"30:8621:13594":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"32:6421:21425":{"crate_id":32,"path":["linux_raw_sys","general","tcp_fastopen_client_fail"],"kind":"enum"},"20:3636:37782":{"crate_id":20,"path":["clap_builder","builder","command","MaxTermWidth"],"kind":"struct"},"2:44114:8379":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"6:7294:13974":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:40407:8193":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:45982:2630":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"16:5032:15109":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:7699:2172":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"1:8954:23979":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"16:7596:15407":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:43098:31765":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"31:3432:19879":{"crate_id":31,"path":["rustix","backend","termios","types","OptionalActions"],"kind":"enum"},"9:388:14208":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:10445:2345":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:41251:2365":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:11220:15742":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:5408:1979":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"17:8443:15501":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"30:5068:12452":{"crate_id":30,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"6:6066:13181":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"20:3275:1981":{"crate_id":20,"path":["clap_builder","builder","arg","Arg"],"kind":"struct"},"2:41462:2152":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"31:4538:38546":{"crate_id":31,"path":["rustix","process","prctl","PrctlMmMap"],"kind":"struct"},"6:5792:13160":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"5:1115:34074":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:40141:31147":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:9374:145":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"11:119:36472":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"6:7271:13972":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"11:1048:36491":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:3191:2345":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:22502:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"30:1943:9899":{"crate_id":30,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"16:5655:15334":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:39990:31161":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:3935:2311":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"32:6917:21440":{"crate_id":32,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1"],"kind":"union"},"16:4932:15081":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:11676:2494":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"32:7730:21491":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_recvmsg_out"],"kind":"struct"},"32:5581:12481":{"crate_id":32,"path":["linux_raw_sys","general","in6_pktinfo"],"kind":"struct"},"31:2624:19839":{"crate_id":31,"path":["rustix","backend","io","poll_fd","PollFd"],"kind":"struct"},"16:7478:15398":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"7:32:14178":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:10248:7861":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"6:6624:2459":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"11:1068:14326":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:7599:2300":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"20:1612:19718":{"crate_id":20,"path":["clap_builder","error","format","RichFormatter"],"kind":"struct"},"16:7509:15401":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"20:3810:1980":{"crate_id":20,"path":["clap_builder","builder","value_hint","ValueHint"],"kind":"enum"},"2:42466:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"1:5202:190":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"30:5615:12477":{"crate_id":30,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:11939:790":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"30:9291:13972":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"20:4178:19707":{"crate_id":20,"path":["clap_builder","error","Message"],"kind":"enum"},"2:2245:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:20781:8258":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"2:10096:7850":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:12517:2733":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"17:10897:15527":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"14:221:14346":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"30:4878:12444":{"crate_id":30,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:9165:7811":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"16:3446:14440":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:22304:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:44378:7786":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:11929:746":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"32:4780:21335":{"crate_id":32,"path":["linux_raw_sys","general","__user_cap_header_struct"],"kind":"struct"},"20:4333:37710":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawOccurrences"],"kind":"struct"},"2:41799:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"6:1574:9897":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"30:5572:12476":{"crate_id":30,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:676:2135":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"17:9933:15602":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:4437:7977":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:1034:15563":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:4279:2425":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:8293:2459":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"20:2910:37838":{"crate_id":20,"path":["clap_builder","builder","app_settings","AppSettings"],"kind":"enum"},"2:47586:2638":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:2684:220":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"17:10712:15733":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:11946:18797":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:13777:19609":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:21956:32883":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"32:5289:21368":{"crate_id":32,"path":["linux_raw_sys","general","ip_msfilter__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"32:7698:21488":{"crate_id":32,"path":["linux_raw_sys","general","io_uring_getevents_arg"],"kind":"struct"},"11:1822:2154":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:7599:8173":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:11721:7868":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:12224:18814":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:11717:25329":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"31:466:2152":{"crate_id":31,"path":["rustix","backend","io","epoll","Iter"],"kind":"struct"},"2:40332:31712":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:12178:18812":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"16:5616:15331":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"5:3175:2174":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:1924:2248":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:46203:31136":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"16:5920:15344":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"30:9595:12682":{"crate_id":30,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:9946:15600":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"20:3870:19691":{"crate_id":20,"path":["clap_builder","builder","value_parser","PathBufValueParser"],"kind":"struct"},"6:5919:13170":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"30:4761:10074":{"crate_id":30,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"23:366:38211":{"crate_id":23,"path":["anstream","adapter","wincon","WinconCapture"],"kind":"struct"},"20:4441:19727":{"crate_id":20,"path":["clap_builder","parser","parser","PendingArg"],"kind":"struct"},"17:9628:15552":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:21782:31148":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:13309:19573":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"32:6938:21443":{"crate_id":32,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_2"],"kind":"struct"},"2:40171:2255":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"2:3182:33749":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:39352:7949":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"30:7875:13210":{"crate_id":30,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:32067:23907":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"1:11917:418":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:45606:2617":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"32:5898:21394":{"crate_id":32,"path":["linux_raw_sys","general","prctl_mm_map"],"kind":"struct"},"2:12506:107":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:41614:183":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:47837:7773":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:9067:219":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"16:4510:14971":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"6:1672:9905":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"20:3358:19703":{"crate_id":20,"path":["clap_builder","builder","arg_settings","ArgSettings"],"kind":"enum"},"1:10010:2227":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"32:5348:21372":{"crate_id":32,"path":["linux_raw_sys","general","iphdr"],"kind":"struct"},"2:22568:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:2701:228":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"1:7875:23876":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:5270:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"17:13181:19563":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:11600:18302":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:6259:206":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:2603:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"6:6840:13601":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"32:5972:8995":{"crate_id":32,"path":["linux_raw_sys","general","timespec"],"kind":"struct"},"1:5013:26015":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:6135:12357":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"32:6655:21430":{"crate_id":32,"path":["linux_raw_sys","general","tcp_diag_md5sig"],"kind":"struct"},"6:5736:13096":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:8076:2294":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"2:2851:8242":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"7:79:14185":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"29:47:19809":{"crate_id":29,"path":["io_lifetimes","portability","FromFilelike"],"kind":"trait"},"16:5779:15340":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:8253:2476":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:41839:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"32:7505:21471":{"crate_id":32,"path":["linux_raw_sys","general","_bindgen_ty_11"],"kind":"enum"},"11:1501:14328":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:9523:15556":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:3348:2353":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:9366:141":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:4765:388":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"13:226:36538":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:40091:7999":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"17:10660:15533":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"2:4114:7979":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"30:5871:12490":{"crate_id":30,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:1821:2197":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:2784:2586":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:8456:2490":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"16:6662:15376":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"32:5077:21358":{"crate_id":32,"path":["linux_raw_sys","general","inodes_stat_t"],"kind":"struct"},"30:6078:1002":{"crate_id":30,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:2212:2270":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"5:673:231":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:44403:31780":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"2:2749:8206":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"2:22469:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"32:6077:12365":{"crate_id":32,"path":["linux_raw_sys","general","sigaltstack"],"kind":"struct"},"1:8189:2372":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"20:4037:19716":{"crate_id":20,"path":["clap_builder","error","context","ContextKind"],"kind":"enum"},"32:5258:9888":{"crate_id":32,"path":["linux_raw_sys","general","ip_mreq"],"kind":"struct"},"20:4558:37806":{"crate_id":20,"path":["clap_builder","util","any_value","AnyValue"],"kind":"struct"},"1:10448:2347":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"29:28:19806":{"crate_id":29,"path":["io_lifetimes","portability","AsSocketlike"],"kind":"trait"},"1:8255:2418":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"6:4367:12445":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"20:3755:19675":{"crate_id":20,"path":["clap_builder","builder","str","Str"],"kind":"struct"},"1:10960:19798":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:21838:2380":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"32:5308:21371":{"crate_id":32,"path":["linux_raw_sys","general","group_filter__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"32:6012:8997":{"crate_id":32,"path":["linux_raw_sys","general","rusage"],"kind":"struct"},"2:5532:8188":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:45836:2664":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:936:2163":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"17:10452:15696":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:12563:18837":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"16:6243:36654":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:480:25317":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:8514:2492":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"16:6488:15370":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"32:4951:21349":{"crate_id":32,"path":["linux_raw_sys","general","fscrypt_provisioning_key_payload"],"kind":"struct"},"17:11544:18298":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"3:0:442":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"32:5859:21393":{"crate_id":32,"path":["linux_raw_sys","general","socket_state"],"kind":"enum"},"31:4928:38526":{"crate_id":31,"path":["rustix","process","rlimit","Rlimit"],"kind":"struct"},"32:5039:21354":{"crate_id":32,"path":["linux_raw_sys","general","fstrim_range"],"kind":"struct"},"27:173:38275":{"crate_id":27,"path":["anstyle","style","StyleDisplay"],"kind":"struct"},"17:9917:15624":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:7267:2028":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"12:0:1824":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"6:1589:9898":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"16:6819:15381":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"17:11109:15536":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:5393:2502":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:7592:2183":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:9596:32836":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"2:39291:203":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:3158:23864":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:39187:200":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"11:695:2161":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:40110:7995":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:11234:18279":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"30:1816:9893":{"crate_id":30,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:4437:2429":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:8977:26054":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:2692:7795":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"}},"external_crates":{"34":{"name":"strsim","html_root_url":null},"31":{"name":"rustix","html_root_url":null},"28":{"name":"is_terminal","html_root_url":null},"25":{"name":"utf8parse","html_root_url":null},"22":{"name":"clap_lex","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"32":{"name":"linux_raw_sys","html_root_url":null},"29":{"name":"io_lifetimes","html_root_url":null},"26":{"name":"colorchoice","html_root_url":null},"23":{"name":"anstream","html_root_url":null},"20":{"name":"clap_builder","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"33":{"name":"anstyle_query","html_root_url":null},"30":{"name":"libc","html_root_url":null},"27":{"name":"anstyle","html_root_url":null},"24":{"name":"anstyle_parse","html_root_url":null},"21":{"name":"bitflags","html_root_url":"https://docs.rs/bitflags/1.3.2/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":26}