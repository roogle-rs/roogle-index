{"root":"0:0:2406","crate_version":"4.5.7","includes_private":false,"index":{"2:13353:30516":{"id":"2:13353:30516","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12960:8701","`DoubleEndedIterator`":"2:8333:130","prim@char":"1:12389:476","str::matches":"2:13350:2699"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44259:8719","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:8697","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:8697","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:8698","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13293:23083":{"id":"2:13293:23083","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:13295:23087","str::split_at_mut":"2:13294:23084"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13279:22407":{"id":"2:13279:22407","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12507:8705"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13291:30511":{"id":"2:13291:30511","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12395:1739","str::slice_mut_unchecked":"2:13292:30512","crate::ops::Index":"2:39712:3011"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13292:30512":{"id":"2:13292:30512","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12395:1739","crate::ops::IndexMut":"2:3490:3012","str::slice_unchecked":"2:13291:30511"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13281:336":{"id":"2:13281:336","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13282:23059","`u8`":"1:12408:1869"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13395:21942":{"id":"2:13395:21942","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13400:22835":{"id":"2:13400:22835","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1066:37510"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13302:28212":{"id":"2:13302:28212","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13301:28228"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44320:8703","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13401:30530":{"id":"2:13401:30530","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:5017:30530"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44336:8712","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5731:21940":{"id":"5:5731:21940","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13396:21943"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13274:30508":{"id":"2:13274:30508","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13397:21944":{"id":"2:13397:21944","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13335:30515":{"id":"2:13335:30515","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12960:8701","str::split":"2:13323:23089","prim@char":"1:12389:476","str::split_terminator":"2:13332:30514"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44105:8720","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:8697","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:8697","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:8698","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13272:22053":{"id":"2:13272:22053","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13326:23091":{"id":"2:13326:23091","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12389:476","self::pattern":"2:12960:8701"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12775:8692","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:8697","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13376:21750":{"id":"2:13376:21750","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12389:476","self::pattern":"2:12960:8701"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42166:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:8697","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13329:23093":{"id":"2:13329:23093","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12960:8701","`DoubleEndedIterator`":"2:8333:130","prim@char":"1:12389:476","str::split":"2:13323:23089"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44055:8686","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:8697","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:8697","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:8698","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2406":{"id":"0:0:2406","crate_id":0,"name":"clap","span":{"filename":"src/lib.rs","begin":[6,0],"end":[102,18]},"visibility":"public","docs":"> **Command Line Argument Parser for Rust**\n\nQuick Links:\n- Derive [tutorial][_derive::_tutorial::chapter_0] and [reference][_derive]\n- Builder [tutorial][_tutorial::chapter_0] and [reference](index.html)\n- [Cookbook][_cookbook]\n- [FAQ][_faq]\n- [Discussions](https://github.com/clap-rs/clap/discussions)\n- [CHANGELOG](https://github.com/clap-rs/clap/blob/v4.5.7/CHANGELOG.md) (includes major version migration\n  guides)\n\n## Aspirations\n\n- Out of the box, users get a polished CLI experience\n  - Including common argument behavior, help generation, suggested fixes for users, colored output, [shell completions](https://github.com/clap-rs/clap/tree/master/clap_complete), etc\n- Flexible enough to port your existing CLI interface\n  - However, we won't necessarily streamline support for each use case\n- Reasonable parse performance\n- Resilient maintainership, including\n  - Willing to break compatibility rather than batching up breaking changes in large releases\n  - Leverage feature flags to keep to one active branch\n  - Being under [WG-CLI](https://github.com/rust-cli/team/) to increase the bus factor\n- We follow semver and will wait about 6-9 months between major breaking changes\n- We will support the last two minor Rust releases (MSRV, currently 1.74)\n\nWhile these aspirations can be at odds with fast build times and low binary\nsize, we will still strive to keep these reasonable for the flexibility you\nget.  Check out the\n[argparse-benchmarks](https://github.com/rust-cli/argparse-benchmarks-rs) for\nCLI parsers optimized for other use cases.\n\n## Example\n\nRun\n```console\n$ cargo add clap --features derive\n```\n*(See also [feature flag reference][_features])*\n\nThen define your CLI in `main.rs`:\n```rust\n# #[cfg(feature = \"derive\")] {\nuse clap::Parser;\n\n/// Simple program to greet a person\n#[derive(Parser, Debug)]\n#[command(version, about, long_about = None)]\nstruct Args {\n    /// Name of the person to greet\n    #[arg(short, long)]\n    name: String,\n\n    /// Number of times to greet\n    #[arg(short, long, default_value_t = 1)]\n    count: u8,\n}\n\nfn main() {\n    let args = Args::parse();\n\n    for _ in 0..args.count {\n        println!(\"Hello {}!\", args.name);\n    }\n}\n# }\n```\n\nAnd try it out:\n```console\n$ demo --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: demo[EXE] [OPTIONS] --name <NAME>\n\nOptions:\n  -n, --name <NAME>    Name of the person to greet\n  -c, --count <COUNT>  Number of times to greet [default: 1]\n  -h, --help           Print help\n  -V, --version        Print version\n\n$ demo --name Me\nHello Me!\n\n```\n*(version number and `.exe` extension on windows replaced by placeholders)*\n\nSee also the derive [tutorial][_derive::_tutorial] and [reference][_derive]\n\n### Related Projects\n\nAugment clap:\n- [wild](https://crates.io/crates/wild) for supporting wildcards (`*`) on Windows like you do Linux\n- [argfile](https://crates.io/crates/argfile) for loading additional arguments from a file (aka response files)\n- [shadow-rs](https://crates.io/crates/shadow-rs) for generating `Command::long_version`\n- [clap_mangen](https://crates.io/crates/clap_mangen) for generating man page source (roff)\n- [clap_complete](https://crates.io/crates/clap_complete) for shell completion support\n\nCLI Helpers\n- [cio](https://crates.io/crates/clio) for reading/writing to files specified as arguments\n- [clap-verbosity-flag](https://crates.io/crates/clap-verbosity-flag)\n- [clap-cargo](https://crates.io/crates/clap-cargo)\n- [concolor-clap](https://crates.io/crates/concolor-clap)\n\nTesting\n- [`trycmd`](https://crates.io/crates/trycmd):  Bulk snapshot testing\n- [`snapbox`](https://crates.io/crates/snapbox):  Specialized snapshot testing\n- [`assert_cmd`](https://crates.io/crates/assert_cmd) and [`assert_fs`](https://crates.io/crates/assert_fs): Customized testing\n\nDocumentation:\n- [Command-line Apps for Rust](https://rust-cli.github.io/book/index.html) book\n","links":{},"attrs":["#![doc(html_logo_url =\n\"https://raw.githubusercontent.com/clap-rs/clap/master/assets/clap.png\")]","#![forbid(unsafe_code)]","#![warn(missing_docs)]","#![warn(clippy::print_stderr)]","#![warn(clippy::print_stdout)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:3-20:0:2399"],"is_stripped":false}}},"2:13280:30510":{"id":"2:13280:30510","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13370:30524":{"id":"2:13370:30524","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12389:476","self::pattern":"2:12960:8701"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:8697","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:8697","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12986:8696","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13388:30528":{"id":"2:13388:30528","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12389:476","self::pattern":"2:12960:8701"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:8697","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:8697","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:8698","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13312:23103":{"id":"2:13312:23103","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12389:476","self::pattern":"2:12960:8701"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:8697","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:8697","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:8698","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13385:30527":{"id":"2:13385:30527","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12389:476","self::pattern":"2:12960:8701"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:8697","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5728:31229":{"id":"5:5728:31229","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7774:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5720:31228":{"id":"5:5720:31228","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7774:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13298:28638":{"id":"2:13298:28638","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12389:476"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44007:8708","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13344:23099":{"id":"2:13344:23099","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42166:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:8697","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13319:21497":{"id":"2:13319:21497","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42168:191","prim@char":"1:12389:476","self::pattern":"2:12960:8701"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42166:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:8697","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:8697","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:8698","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5714:9050":{"id":"5:5714:9050","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7774:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:8697","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13303:24904":{"id":"2:13303:24904","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44291:3138","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13338:23095":{"id":"2:13338:23095","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12389:476","self::pattern":"2:12960:8701","str::rsplitn":"2:13341:23097"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44141:8690","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:8697","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13396:21943":{"id":"2:13396:21943","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13283:23055":{"id":"2:13283:23055","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42168:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42166:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13404:30531":{"id":"2:13404:30531","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:5015:30531"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44354:8713","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13373:30525":{"id":"2:13373:30525","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12389:476","self::pattern":"2:12960:8701"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:8697","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13399:22834":{"id":"2:13399:22834","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1066:37510"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13296:23088":{"id":"2:13296:23088","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13295:23087"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42166:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3-20:0:2399":{"id":"0:3-20:0:2399","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[88,0],"end":[88,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"clap_builder","name":"clap_builder","id":"20:0:2399","glob":true}}},"2:13287:23057":{"id":"2:13287:23057","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13295:23087":{"id":"2:13295:23087","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13296:23088"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42166:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13394:22830":{"id":"2:13394:22830","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40067:8847","Self::is_ascii":"2:13393:21938"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42166:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40067:8847","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5729:31230":{"id":"5:5729:31230","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:306:2789","`String`":"5:7774:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:306:2789","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13359:30518":{"id":"2:13359:30518","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12960:8701","`DoubleEndedIterator`":"2:8333:130","prim@char":"1:12389:476","str::match_indices":"2:13356:30517"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44205:8717","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:8697","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:8697","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:8698","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13393:21938":{"id":"2:13393:21938","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13362:30519":{"id":"2:13362:30519","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13299:28653":{"id":"2:13299:28653","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12389:476"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44013:8707","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13309:23102":{"id":"2:13309:23102","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12389:476","self::pattern":"2:12960:8701"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:8697","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13315:21496":{"id":"2:13315:21496","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42168:191","prim@char":"1:12389:476","self::pattern":"2:12960:8701"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42166:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:8697","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13403:2926":{"id":"2:13403:2926","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:5018:2926"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44345:2927","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13341:23097":{"id":"2:13341:23097","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12389:476","str::splitn":"2:13338:23095","self::pattern":"2:12960:8701"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44159:8688","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:8697","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:8697","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:8698","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13289:23058":{"id":"2:13289:23058","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5732:21941":{"id":"5:5732:21941","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13397:21944"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13356:30517":{"id":"2:13356:30517","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12960:8701","`DoubleEndedIterator`":"2:8333:130","prim@char":"1:12389:476","str::rmatch_indices":"2:13359:30518"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44187:8716","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:8697","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5712":{"id":"5:5712","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5713:31226","5:5714:9050","5:5717:31227","5:5720:31228","5:5728:31229","5:5729:31230","5:5730:3167","5:5731:21940","5:5732:21941"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13301:28228":{"id":"2:13301:28228","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13302:28212"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44311:8704","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5713:31226":{"id":"5:5713:31226","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:306:2789","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:306:2789","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13276:30509":{"id":"2:13276:30509","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:13274:30508"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13382:30526":{"id":"2:13382:30526","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12389:476","self::pattern":"2:12960:8701"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:8697","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:8697","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:8698","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13369:30523":{"id":"2:13369:30523","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13364:30520":{"id":"2:13364:30520","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13350:2699":{"id":"2:13350:2699","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12960:8701","`DoubleEndedIterator`":"2:8333:130","prim@char":"1:12389:476","str::rmatches":"2:13353:30516"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44241:8718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:8697","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13271:1008":{"id":"2:13271:1008","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12389:476"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13270":{"id":"2:13270","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13271:1008","2:13272:22053","2:13273:30507","2:13274:30508","2:13276:30509","2:13279:22407","2:13280:30510","2:13281:336","2:13282:23059","2:13283:23055","2:13285:23056","2:13287:23057","2:13289:23058","2:13291:30511","2:13292:30512","2:13293:23083","2:13294:23084","2:13295:23087","2:13296:23088","2:13298:28638","2:13299:28653","2:13300:21717","2:13301:28228","2:13302:28212","2:13303:24904","2:13304:30513","2:13305:28639","2:13306:23101","2:13309:23102","2:13312:23103","2:13315:21496","2:13319:21497","2:13323:23089","2:13326:23091","2:13329:23093","2:13332:30514","2:13335:30515","2:13338:23095","2:13341:23097","2:13344:23099","2:13347:23100","2:13350:2699","2:13353:30516","2:13356:30517","2:13359:30518","2:13362:30519","2:13364:30520","2:13366:30521","2:13368:30522","2:13369:30523","2:13370:30524","2:13373:30525","2:13376:21750","2:13379:23104","2:13382:30526","2:13385:30527","2:13388:30528","2:13391:30529","2:13393:21938","2:13394:22830","2:13395:21942","2:13396:21943","2:13397:21944","2:13398:22833","2:13399:22834","2:13400:22835","2:13401:30530","2:13403:2926","2:13404:30531"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5717:31227":{"id":"5:5717:31227","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7774:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7774:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:8697","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13300:21717":{"id":"2:13300:21717","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44023:3141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13306:23101":{"id":"2:13306:23101","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12389:476","self::pattern":"2:12960:8701"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:8697","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13304:30513":{"id":"2:13304:30513","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44301:8715","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13332:30514":{"id":"2:13332:30514","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12960:8701","str::split":"2:13323:23089","prim@char":"1:12389:476","`DoubleEndedIterator`":"2:8333:130","str::rsplit_terminator":"2:13335:30515"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44087:8721","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:8697","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13273:30507":{"id":"2:13273:30507","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13282:23059":{"id":"2:13282:23059","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12408:1869"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13305:28639":{"id":"2:13305:28639","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44329:8702","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13323:23089":{"id":"2:13323:23089","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12960:8701","`DoubleEndedIterator`":"2:8333:130","prim@char":"1:12389:476","str::split_whitespace":"2:13301:28228","str::rsplit":"2:13329:23093"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44037:3142","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:8697","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13347:23100":{"id":"2:13347:23100","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42166:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:8697","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:8697","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:8698","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13398:22833":{"id":"2:13398:22833","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1066:37510"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13391:30529":{"id":"2:13391:30529","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12921:137","`FromStr`":"2:12920:3074"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42298:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12920:3074","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12920:3074","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13285:23056":{"id":"2:13285:23056","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42168:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42166:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13379:23104":{"id":"2:13379:23104","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12389:476","self::pattern":"2:12960:8701"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42166:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:8697","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:8697","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:8698","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5730:3167":{"id":"5:5730:3167","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7774:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7774:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13366:30521":{"id":"2:13366:30521","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13294:23084":{"id":"2:13294:23084","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:13293:23083","str::split_at_mut_checked":"2:13296:23088"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13368:30522":{"id":"2:13368:30522","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"17:12306:17182":{"crate_id":17,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"2:47343:8590":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"6:8199:15558":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"6:5224:13843":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:42106:3184":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"20:3533:21545":{"crate_id":20,"path":["clap_builder","builder","value_parser","NonEmptyStringValueParser"],"kind":"struct"},"16:5144:16506":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:8093:3036":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"5:3318:30247":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:40770:3073":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:44455:8733":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"6:523:9844":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:8613:3184":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:13451:16994":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:46325:3429":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:4015:3192":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:4501:8785":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"6:1597:10751":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"16:7495:33210":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"16:6111:16784":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"6:1507:10741":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:44419:8731":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"16:8105:16865":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:11523:8689":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:15641:17035":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:14483:20479":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:43834:8677":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:13266:16985":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"6:5622:13887":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"6:5462:13871":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:47396:8593":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:12408:1869":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"6:7316:10694":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:11759:21735":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"28:69:21677":{"crate_id":28,"path":["strsim","GrowingHashmapChar"],"kind":"struct"},"1:3665:22805":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"11:299:32746":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"6:5395:13865":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"11:1920:2979":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"2:42646:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:41030:9021":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:10670:25779":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"17:11617:16980":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"5:7692:2913":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:43843:8676":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:44840:9236":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:41421:9010":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:42194:2957":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"6:8014:15396":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:2332:3080":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"6:5562:13882":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"5:5518:31406":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:9141:199":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"6:1569:10748":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:46004:3461":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:12028:17121":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"16:6421:16798":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"6:5635:13889":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"17:13983:19972":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:38364:9074":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:12392:1328":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"6:5265:13848":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"18:765:21500":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:46695:3436":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"8:0:2583":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2:10766:9187":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"17:14405:20475":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:22969:28611":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:30785:8980":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:11509:8691":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:661:2929":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:16283:21293":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:10778:16971":{"crate_id":17,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"2:40990:9031":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:39824:216":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"23:466:21620":{"crate_id":23,"path":["anstream","buffer","Buffer"],"kind":"struct"},"17:14460:20478":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"5:4142:2962":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"5:1625:2966":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"5:5150:3122":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:5672:114":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:40877:134":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:10627:3329":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:22244:29947":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:46019:3421":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:40742:3141":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"6:1696:3242":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:923:2961":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:8555:3142":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"5:7736:3057":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"6:5107:13833":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:7715:8830":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"5:3347:2976":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:13055:17036":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"16:6588:16802":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"2:2766:201":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:39668:8622":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"16:3987:15888":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"1:11691:3311":{"crate_id":1,"path":["std","sys","thread_local","fast_local","eager","State"],"kind":"enum"},"2:40905:28207":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:8251:2956":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"2:10832:29335":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"5:6117:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:46716:3442":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"16:6904:16820":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:2052:8990":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:47201:3477":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:15753:21252":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:44141:8690":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"16:908:33212":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"18:491:34013":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:32375:29737":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"16:5757:32904":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:14586:20486":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:38419:9075":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:14738:20495":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"21:0:2725":{"crate_id":21,"path":["anstyle"],"kind":"module"},"6:6876:14636":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:957:2965":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"5:5006:217":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"16:8233:16872":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:12175:24387":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:4716:221":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"10:0:2585":{"crate_id":10,"path":["adler"],"kind":"module"},"2:8748:150":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:11757:17057":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"5:3105:30129":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:10696:16969":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:11290:21751":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"1:4699:3258":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"6:5570:13883":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"6:4805:13803":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:14872:20504":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"23:244:22805":{"crate_id":23,"path":["anstream","fmt","Adapter"],"kind":"struct"},"5:3716:2957":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:3349:3163":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"16:2860:15870":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:1106:2974":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"6:5117:13834":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:45054:180":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:12711:17228":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:21755:3415":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:10250:22149":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"2:5319:3172":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"24:285:21641":{"crate_id":24,"path":["anstyle_parse","AsciiParser"],"kind":"struct"},"17:15905:21266":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"5:7094:8767":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"2:10864:28850":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:11236:3331":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:22577:3547":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"2:7831:9002":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:22991:28419":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:40849:9016":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:16750:21468":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"17:15010:20513":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:7487:15019":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"5:3352:30251":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:8441:178":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"5:994:2982":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:2937:8846":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"11:785:2961":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1:8006:3108":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:12920:17234":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:40598:8818":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:22685:3538":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"6:4947:13816":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:2328:3079":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:3263:3403":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:8574:3188":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"16:8014:16860":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"11:809:2963":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"1:4411:3253":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:32389:9137":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"1:12411:1863":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"17:11985:17118":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:5656:3324":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:11447:3075":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"17:15785:21256":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:12737:9224":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:15351:21231":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"11:328:32736":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:41155:3140":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:573:2901":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:44623:8740":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:12394:1705":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"28:34:21667":{"crate_id":28,"path":["strsim","StringWrapper"],"kind":"struct"},"1:11702:21805":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"16:6696:16806":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:22671:3108":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"2:43387:3116":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:41906:170":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"17:11788:17084":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:39894:8778":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"20:3780:21589":{"crate_id":20,"path":["clap_builder","parser","arg_matcher","ArgMatcher"],"kind":"struct"},"5:7748:3058":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"16:5172:16511":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:9252:3371":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"28:130:21686":{"crate_id":28,"path":["strsim","GrowingHashmapMapElemChar"],"kind":"struct"},"2:43152:28563":{"crate_id":2,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"16:2880:15871":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"11:854:2969":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"20:65:2751":{"crate_id":20,"path":["clap_builder","derive","ValueEnum"],"kind":"trait"},"17:5305:17255":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"2:12966:8697":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:10928:16975":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:11539:17036":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:46410:3497":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"16:6914:16821":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:13169:17278":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"2:23731:236":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"5:1239:30145":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"6:5676:13894":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:12372:21774":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"16:8565:16880":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:1928:2746":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"23:389:21642":{"crate_id":23,"path":["anstream","adapter","strip","Utf8Parser"],"kind":"struct"},"17:13757:19958":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:3343:9070":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"20:3139:21561":{"crate_id":20,"path":["clap_builder","builder","arg_settings","ArgSettings"],"kind":"enum"},"2:23042:28609":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"20:3275:2900":{"crate_id":20,"path":["clap_builder","builder","os_str","inner","Inner"],"kind":"struct"},"2:42424:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:41403:9007":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:43426:28641":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"20:4135:34287":{"crate_id":20,"path":["clap_builder","util","any_value","AnyValue"],"kind":"struct"},"18:623:34003":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:10296:16957":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"6:6777:14607":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"2:22628:3548":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:12986:8696":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:9194:3375":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"6:7463:15017":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:15896:21265":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"6:5319:13855":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:22205:3108":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"1:7809:22152":{"crate_id":1,"path":["std","panicking","begin_panic_handler","StaticStrPayload"],"kind":"struct"},"1:936:2962":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"20:3472:21549":{"crate_id":20,"path":["clap_builder","builder","value_parser","RangedI64ValueParser"],"kind":"struct"},"17:14886:20505":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"5:6149:3348":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:5976:3350":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"5:7797:8744":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:42210:2959":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:42260:3299":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:1339:17041":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:1083:2972":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"23:288:21629":{"crate_id":23,"path":["anstream","adapter","strip","StrippedStr"],"kind":"struct"},"6:4937:13815":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:23069:28574":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:13570:17000":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:8247:9013":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:10376:22296":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"2:44241:8718":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:14997:20512":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"16:6337:16794":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"16:8320:16875":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"11:1005:2972":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:46089:3468":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:8087:2936":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:9186:2957":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:11338:21855":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:16656:21461":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"20:4112:21576":{"crate_id":20,"path":["clap_builder","output","fmt","Stream"],"kind":"enum"},"20:3833:2961":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Values"],"kind":"struct"},"2:9417:3298":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:8639:3189":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"20:4147:9025":{"crate_id":20,"path":["clap_builder","util","flat_map","FlatMap"],"kind":"struct"},"17:12762:17198":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:667:16948":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:44329:8702":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"6:1494:10739":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:46477:28560":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"15:306:15800":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"5:3313:2977":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:4168:3218":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:12897:17233":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1:5855:220":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:43944:8685":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:12860:17232":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"16:7168:15794":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:1852:703":{"crate_id":1,"path":["std","env"],"kind":"module"},"17:1220:17033":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:317:33196":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:2081:198":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:16798:21472":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"1:9474:3111":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"1:4338:3250":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:14299:20470":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"20:4172:34247":{"crate_id":20,"path":["clap_builder","util","flat_set","FlatSet"],"kind":"struct"},"6:7341:15012":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:3041:124":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"17:11926:17071":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"6:4792:13802":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"6:7563:15023":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"5:3095:31798":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"6:4957:13817":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:12008:8674":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"2:13953:152":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"21:341:21608":{"crate_id":21,"path":["anstyle","effect","EffectIndexIter"],"kind":"struct"},"2:10337:3049":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"5:3703:182":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:946:2963":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"1:971:2968":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"17:11163:16979":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:10408:8638":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:10970:3101":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"2:4908:8800":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"16:6269:16792":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:46118:3422":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:21723:29940":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"6:7604:15026":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:3039:22292":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"20:3894:34161":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrencesRef"],"kind":"struct"},"1:2018:794":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"17:13592:17001":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"20:3247:34291":{"crate_id":20,"path":["clap_builder","builder","ext","BoxedExtension"],"kind":"struct"},"1:4930:3233":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"5:6812:2959":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"12:0:2587":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:6300:25776":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:44664:8723":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"20:4203:2745":{"crate_id":20,"path":["clap_builder","util","id","Id"],"kind":"struct"},"1:8620:3255":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:11247:3142":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"16:7765:16848":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:4404:16065":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"20:1676:22863":{"crate_id":20,"path":["clap_builder","error","format","Escape"],"kind":"struct"},"5:5309:3348":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"16:896:33206":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"16:5709:16776":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:47003:3431":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"18:608:34012":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"11:2137:2973":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"16:7731:3297":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:46264:3469":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:14055:19977":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"16:2900:15872":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"16:7949:16854":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:2146:9103":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"11:2349:2974":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"18:735:21499":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:506:15823":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:40981:9030":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"16:7554:16846":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:42259:2938":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:21808:3410":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"6:5405:13866":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:9855:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"6:4896:13642":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:46378:3490":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:12851:17231":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:2378:17106":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:46554:3464":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:11027:3037":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"18:643:34007":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:44159:8688":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"21:301:29346":{"crate_id":21,"path":["anstyle","color","DisplayBuffer"],"kind":"struct"},"1:11728:21896":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:505:25771":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"16:2684:15862":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:9429:3122":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"17:15475:21236":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"6:564:9850":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"6:4990:13822":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"5:3101:30128":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"6:5593:13885":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"6:6564:14585":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:15:2702":{"crate_id":2,"path":["core","write"],"kind":"macro"},"17:10823:16973":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"16:4810:16402":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"5:306:2789":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"25:23:15679":{"crate_id":25,"path":["utf8parse","types","Action"],"kind":"enum"},"2:47093:3437":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:47305:8588":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:42072:28436":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"16:8151:16867":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:8485:3169":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:8231:140":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"17:10784:33978":{"crate_id":17,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"6:5179:3241":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"20:3437:21546":{"crate_id":20,"path":["clap_builder","builder","value_parser","OsStringValueParser"],"kind":"struct"},"16:7192:16833":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:40971:9029":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:13585:29574":{"crate_id":2,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"7:32:15611":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:14902:20506":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:6424:22459":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"6:1551:10746":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"16:7282:16836":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:13781:19959":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"20:3776:2929":{"crate_id":20,"path":["clap_builder","error","Backtrace"],"kind":"struct"},"17:12018:17120":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"2:21814:3414":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:16323:21296":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"16:6440:16799":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:11971:17064":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"16:7969:16856":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:13222:16984":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:11964:8600":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:11329:8681":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:40067:8847":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"16:8711:16887":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:11319:33983":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:47151:3492":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:8751:2989":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"6:7469:15018":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:40836:3139":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:40637:8819":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:2732:113":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"16:3889:15887":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:8875:3314":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"1:10921:3281":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"17:16008:21277":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"11:1140:15764":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:597:2903":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"20:3787:21602":{"crate_id":20,"path":["clap_builder","parser","error","MatchesError"],"kind":"enum"},"14:40:19959":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"17:10630:16967":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:5274:22733":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"18:573:34007":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:12176:17126":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"17:13537:16998":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:12648:17146":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:39729:213":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"20:3615:21537":{"crate_id":20,"path":["clap_builder","builder","styling","Styles"],"kind":"struct"},"2:5088:8811":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"16:8528:16878":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"9:390:15641":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"22:30:3142":{"crate_id":22,"path":["clap_lex","ext","Split"],"kind":"struct"},"1:9319:21895":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:4777:3275":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"16:5113:16498":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"20:3510:21540":{"crate_id":20,"path":["clap_builder","builder","value_parser","BoolValueParser"],"kind":"struct"},"17:11475:17018":{"crate_id":17,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"11:2148:2974":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:7490:27148":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"25:88:2749":{"crate_id":25,"path":["utf8parse","Parser"],"kind":"struct"},"2:40807:8663":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:11308:162":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"20:3765:21573":{"crate_id":20,"path":["clap_builder","error","Message"],"kind":"enum"},"16:6866:16817":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"16:6984:16825":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:22935:28581":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"20:1652:21581":{"crate_id":20,"path":["clap_builder","error","format","KindFormatter"],"kind":"struct"},"5:7619:2959":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:43211:8630":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"17:13119:17248":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"16:7508:33159":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:2493:3088":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:13690:29573":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"16:6389:16796":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:12359:17185":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"6:5044:13828":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:40686:8817":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:12507:8705":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:44759:9216":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"20:3866:34156":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","GroupedValues"],"kind":"struct"},"16:5348:16549":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:16595:19960":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"2:4799:8797":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"17:10368:16959":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:13361:16990":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"23:359:21624":{"crate_id":23,"path":["anstream","adapter","strip","StripBytes"],"kind":"struct"},"17:14393:20474":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"20:3219:34193":{"crate_id":20,"path":["clap_builder","builder","command","TermWidth"],"kind":"struct"},"2:8063:3343":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"16:7075:16831":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:16036:21280":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:13958:19970":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:11606:16979":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"18:531:21512":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"5:7575:2959":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:3455:141":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:40515:8823":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:39632:8781":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:10218:16954":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"16:6084:16782":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"6:5334:13857":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"2:11041:3108":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:23246:28564":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"1:12007:25787":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"17:12931:16998":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:6201:3366":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"16:6953:16823":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"16:3834:15886":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:4812:3219":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:1489:156":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"15:0:2589":{"crate_id":15,"path":["addr2line"],"kind":"module"},"5:4582:31435":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:41372:9004":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:14652:20491":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:2612:9093":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"1:9421:3353":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"2:22589:28697":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"17:15844:21260":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:12356:22444":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:13070:16979":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"2:44633:8741":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"6:4984:13821":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"6:1632:10753":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:21932:3412":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:43909:8663":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"6:5357:13860":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"17:15876:21263":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:44486:8735":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:9438:235":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:23202:28437":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"5:3339:2978":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"6:6534:14583":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"20:1368:2749":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParserFactory","Parser"],"kind":"assoc_type"},"2:44612:8739":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:14335:17187":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:44767:9219":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:9237:3373":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"6:1584:10749":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"5:7502:2993":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:13719:17286":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:10961:21886":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"1:8503:3103":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:5260:438":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"17:10246:16955":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:16786:21471":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"1:8568:3189":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:43173:8628":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"17:14560:20484":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:8264:22762":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"3:0:510":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"20:2764:2957":{"crate_id":20,"path":["clap_builder","util","flat_map","Iter"],"kind":"struct"},"1:12340:22724":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"2:3093:3052":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"2:42535:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"5:1595:2961":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"6:5533:13879":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:23027:28614":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"6:6770:14606":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"2:43630:8666":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"5:1395:2974":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:2242:129":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"10:36:32722":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"17:12869:16994":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"17:12293:17138":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:12661:9223":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:6696:3354":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:15531:21238":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:16714:21465":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"1:12406:914":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"1:8732:3291":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"16:6144:16786":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:6010:3293":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:11448:17015":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:22718:3537":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"2:32458:9043":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:5794:3326":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:47279:8586":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:21706:29938":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"5:3306:2957":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"6:8031:15397":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"6:5682:13895":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:31158:196":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"17:16399:21302":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:41006:9032":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"6:6758:14604":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"1:532:2895":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:8272:3154":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:13349:16989":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:9202:2959":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:2713:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:4677:3257":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"28:87:21678":{"crate_id":28,"path":["strsim","HybridGrowingHashmapChar"],"kind":"struct"},"6:4890:13810":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"6:5186:13839":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:11358:17010":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:44646:8722":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"16:6188:16789":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"11:2323:2973":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"2:13602:8853":{"crate_id":2,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"20:57:2746":{"crate_id":20,"path":["clap_builder","derive","Args"],"kind":"trait"},"2:44440:8732":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:43783:29723":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:9312:2900":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:44829:3405":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:22363:3108":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"20:4141:34196":{"crate_id":20,"path":["clap_builder","util","any_value","AnyValueId"],"kind":"struct"},"2:8284:146":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"5:898:2980":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:42202:2958":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"1:685:2933":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:15997:21276":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"14:214:15784":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"5:5566:8658":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:902:2959":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"5:1011:2957":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:16264:21292":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:5606:3321":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:43852:8680":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"21:113:34446":{"crate_id":21,"path":["anstyle","effect","EffectsDisplay"],"kind":"struct"},"16:7980:16857":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"16:4120:15896":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:40867:9022":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:14043:19976":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"18:706:8699":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"6:6740:14602":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"22:125:21613":{"crate_id":22,"path":["clap_lex","ParsedArg"],"kind":"struct"},"24:26:21645":{"crate_id":24,"path":["anstyle_parse","params","ParamsIter"],"kind":"struct"},"6:8255:14054":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:13662:17284":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"1:3443:3160":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:15573:21241":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:3347:3162":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:11016:25515":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:10534:16777":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:34211:9068":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"11:2533:32741":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:4066:2959":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"16:8058:16862":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:9225:3370":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"16:0:2590":{"crate_id":16,"path":["gimli"],"kind":"module"},"17:16187:21287":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"6:5325:13856":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"16:8626:16884":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:11026:33980":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"5:3277:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:13427:16993":{"crate_id":17,"path":["object","read","ObjectMapFile"],"kind":"struct"},"17:11902:17073":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"6:6449:14577":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:43862:8678":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:8549:3141":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:3933:2962":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:10398:8631":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:2960:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"1:8749:3310":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"1:7343:25793":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"16:6942:16822":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"20:3675:21583":{"crate_id":20,"path":["clap_builder","error","context","ContextValue"],"kind":"enum"},"27:0:2731":{"crate_id":27,"path":["anstyle_query"],"kind":"module"},"16:6749:16809":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"5:2157:2996":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"4:0:2582":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"20:3946:21590":{"crate_id":20,"path":["clap_builder","parser","matches","matched_arg","MatchedArg"],"kind":"struct"},"17:13733:19957":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:4116:3214":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"6:5255:13847":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"16:8612:16883":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"20:4064:34259":{"crate_id":20,"path":["clap_builder","mkeymap","Key"],"kind":"struct"},"17:16832:19970":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"1:2751:3144":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"6:7332:9719":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"20:3812:21591":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","SubCommand"],"kind":"struct"},"17:15586:21242":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:8359:22440":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"6:1667:10756":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"6:5341:13858":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"17:15812:21257":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:9747:22295":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"2:12698:9225":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"6:6652:14591":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:4888:3279":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:10741:3162":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"2:10404:206":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"1:11976:22747":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"16:7883:16850":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:4822:21790":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"11:1725:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:6076:3122":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"17:14845:20502":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"6:7548:15022":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"5:1604:2964":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:41944:3182":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:40928:9027":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:13933:19968":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:10357:3028":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"20:52:2748":{"crate_id":20,"path":["clap_builder","derive","FromArgMatches"],"kind":"trait"},"2:22365:3413":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:6885:3365":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"1:12361:2937":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"11:873:2970":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"11:102:32749":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:40704:3054":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"6:5641:13890":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"18:507:34007":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"20:49:2747":{"crate_id":20,"path":["clap_builder","derive","CommandFactory"],"kind":"trait"},"17:15953:21271":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:5351:204":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:42354:2959":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:4359:3122":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"20:1367:21556":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParserFactory"],"kind":"trait"},"1:1645:2978":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:1650:2979":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"6:5450:13870":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"5:1132:31406":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"6:5036:13827":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"16:8121:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:16385:21301":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"5:4569:3122":{"crate_id":5,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"1:10987:21850":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"6:1703:10760":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:14140:19983":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"11:1158:2975":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"16:7016:16827":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"20:4222:2744":{"crate_id":20,"path":["clap_builder","util","color","ColorChoice"],"kind":"enum"},"20:3906:34160":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrenceValuesRef"],"kind":"struct"},"17:12723:17201":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"6:6659:14592":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"20:3936:21600":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Indices"],"kind":"struct"},"24:89:21637":{"crate_id":24,"path":["anstyle_parse","CharAccumulator"],"kind":"trait"},"16:4956:16433":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:40671:8820":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"17:16761:21469":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"16:3695:15885":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:4826:21794":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"2:44291:3138":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:13742:8851":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:10389:120":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"17:12537:17143":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:2155:9102":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"16:8636:16885":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"6:5551:13881":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"24:190:15679":{"crate_id":24,"path":["anstyle_parse","state","definitions","Action"],"kind":"enum"},"20:3796:2743":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","ArgMatches"],"kind":"struct"},"2:41020:9033":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"11:798:2962":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:14008:2985":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:8192:3099":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"16:2590:15858":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:14612:20488":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:2084:197":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:15036:20515":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"16:8223:16871":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:12056:17122":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:12416:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:40949:9028":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:22539:3544":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"5:1496:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:32929:9061":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:4230:3224":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:10400:8639":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:13916:3550":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"1:3913:3190":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"15:327:15804":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"25:0:2729":{"crate_id":25,"path":["utf8parse"],"kind":"module"},"2:44311:8704":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"16:5060:16491":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"5:7511:2959":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:3566:3122":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"14:187:15783":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"16:5417:16572":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"20:933:21534":{"crate_id":20,"path":["clap_builder","builder","resettable","IntoResettable"],"kind":"trait"},"6:1563:10747":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"6:6443:14576":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:3288:8618":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"2:11440:8687":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:22210:3417":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"2:33625:3402":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:1633:2976":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:6217:220":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:46296:3423":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:21689:29935":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"2:6267:9018":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"11:1601:15767":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"6:6723:14600":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"1:5862:3366":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:42572:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:40752:3059":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"26:40:21653":{"crate_id":26,"path":["colorchoice","AtomicChoice"],"kind":"struct"},"17:13398:16992":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"20:3229:34231":{"crate_id":20,"path":["clap_builder","builder","command","MaxTermWidth"],"kind":"struct"},"2:42290:2915":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"16:6123:16785":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:10115:16951":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:961:2966":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:44013:8707":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"16:5649:16758":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:8797:3311":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"5:7531:2962":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"6:6526:14582":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:40730:3055":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"20:3516:21543":{"crate_id":20,"path":["clap_builder","builder","value_parser","FalseyValueParser"],"kind":"struct"},"17:12749:17199":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:43379:28607":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:12347:17184":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:22563:3108":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"17:12319:17160":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"16:6852:16816":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:4789:8796":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:47180:3443":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:8003:3169":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:11998:17085":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:13157:17242":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"16:2620:15859":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"5:894:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:40575:8713":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"6:7586:15025":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:46621:3424":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:10977:33987":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"20:3957:21601":{"crate_id":20,"path":["clap_builder","parser","matches","value_source","ValueSource"],"kind":"enum"},"16:6205:16790":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"16:7386:16841":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:15931:21268":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:44783:9213":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"16:6064:16781":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:15549:21240":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"5:7084:8766":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"5:7856:2963":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"2:46072:3462":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"16:6738:33164":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:5094:3276":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"17:16297:21294":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:14708:20494":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"5:7233:31449":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"6:5271:13849":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:3445:3161":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"6:5007:13824":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:1838:8959":{"crate_id":2,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"1:8542:3140":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:46104:3474":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:11742:22651":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"6:7518:15020":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"16:5255:16525":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"24:113:21644":{"crate_id":24,"path":["anstyle_parse","params","Params"],"kind":"struct"},"17:11065:16977":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:9456:162":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"6:6631:14589":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"26:21:2744":{"crate_id":26,"path":["colorchoice","ColorChoice"],"kind":"enum"},"2:41388:9006":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:8386:2785":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"16:3587:15884":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"21:182:21563":{"crate_id":21,"path":["anstyle","color","Color"],"kind":"enum"},"17:12280:17181":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"6:5057:13830":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:46583:3470":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:16642:21460":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"16:546:33102":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:16145:21283":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:3304:25362":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:23180:28333":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"2:41928:3181":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:952:2964":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:6817:3359":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:45972:3420":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:9288:3352":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"16:7838:16849":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"23:0:2727":{"crate_id":23,"path":["anstream"],"kind":"module"},"1:1624:2962":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"11:835:2967":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"16:6658:16804":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:5103:3277":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"21:374:21570":{"crate_id":21,"path":["anstyle","style","Style"],"kind":"struct"},"1:7892:16948":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"22:110:21612":{"crate_id":22,"path":["clap_lex","ArgCursor"],"kind":"struct"},"1:8645:3248":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"11:1023:2973":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:5983:3351":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:46395:3496":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:13028:17245":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"1:1617:2957":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:879:2957":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:41165:9034":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:7609:9015":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"5:1223:31467":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"5:798:119":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:40919:9026":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:21753:3108":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"11:2545:32738":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:11112:21569":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:994:2971":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:3684:3133":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"1:7947:25784":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:43097:28302":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:14152:19984":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:1969:3122":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"23:402:21630":{"crate_id":23,"path":["anstream","adapter","wincon","WinconBytes"],"kind":"struct"},"17:12983:17238":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:7821:22153":{"crate_id":1,"path":["std","panicking","begin_panic","Payload"],"kind":"struct"},"5:1898:2963":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"16:7212:15793":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:3052:138":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"20:4189:3321":{"crate_id":20,"path":["clap_builder","util","graph","Child"],"kind":"struct"},"20:2786:2958":{"crate_id":20,"path":["clap_builder","util","flat_map","IterMut"],"kind":"struct"},"1:4932:3234":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"16:6256:33118":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:44755:9214":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:44949:28428":{"crate_id":2,"path":["core","future","async_drop","Noop"],"kind":"struct"},"1:2505:3094":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:32364:25543":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"17:12249:17179":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:322:33212":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:9850:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:11878:16979":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"6:6748:14603":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"17:16084:21281":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"11:2551:32743":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:8280:2996":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:46156:3434":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:14627:20489":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:43107:8628":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"17:14375:20473":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"5:7760:8652":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"2:2710:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"20:3239:34292":{"crate_id":20,"path":["clap_builder","builder","ext","Extensions"],"kind":"struct"},"16:2820:15868":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:7796:22154":{"crate_id":1,"path":["std","panicking","begin_panic_handler","FormatStringPayload"],"kind":"struct"},"5:7258:31412":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:10097:16950":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"17:16132:21282":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:12699:17227":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:13306:16987":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:680:2932":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"20:2984:34230":{"crate_id":20,"path":["clap_builder","builder","app_settings","AppSettings"],"kind":"enum"},"17:15739:21251":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:11432:17014":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"6:4970:13819":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:6411:14573":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:11831:17036":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"11:2400:2958":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"1:5620:3322":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"10:44:15750":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"1:1097:2973":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:42387:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:4725:8789":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:14284:20469":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"16:6640:16803":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"23:497:21619":{"crate_id":23,"path":["anstream","strip","StripStream"],"kind":"struct"},"16:7990:16858":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:16198:21288":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"5:1410:2973":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"16:7907:16851":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"6:8008:15395":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"5:7561:30265":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:7738:22441":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:43964:8684":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:11630:17034":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"20:3856:21598":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawValues"],"kind":"struct"},"17:13515:16997":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:8304:2786":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:42146:3186":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:12403:920":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"15:394:15811":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"0:0:2406":{"crate_id":0,"path":["clap"],"kind":"module"},"1:3074:138":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"24:0:2728":{"crate_id":24,"path":["anstyle_parse"],"kind":"module"},"2:23158:28591":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"20:3384:2740":{"crate_id":20,"path":["clap_builder","builder","value_hint","ValueHint"],"kind":"enum"},"17:13554:17006":{"crate_id":17,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"6:6731:14601":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"1:2323:139":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:44007:8708":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"23:61:21639":{"crate_id":23,"path":["anstream","adapter","strip","VtUtf8Receiver"],"kind":"struct"},"11:1674:32723":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:12225:17130":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"16:2966:15875":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"16:3014:15877":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:8197:3100":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"20:1650:21580":{"crate_id":20,"path":["clap_builder","error","format","ErrorFormatter"],"kind":"trait"},"2:7714:8829":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"16:6098:16783":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"2:44301:8715":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:43872:8679":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:26131:267":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"20:3583:21557":{"crate_id":20,"path":["clap_builder","builder","value_parser","_AnonymousValueParser"],"kind":"struct"},"1:8245:128":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"20:3057:2741":{"crate_id":20,"path":["clap_builder","builder","arg","Arg"],"kind":"struct"},"1:2645:3152":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:11952:17078":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:3493:3147":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"6:6765:14605":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"1:4146:3216":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:42094:3193":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"17:12335:17183":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:9347:22437":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:2477:3083":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"11:1105:15763":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"16:2840:15869":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"16:4983:16437":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:13838:19962":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"6:4914:13812":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"16:6502:15820":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"16:2748:15865":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:40958:9019":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:3420:125":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:2957:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:32382:8797":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"6:6666:14593":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:44779:9212":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:2045:678":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"17:10487:16963":{"crate_id":17,"path":["object","common","RelocationFlags"],"kind":"enum"},"20:4055:34280":{"crate_id":20,"path":["clap_builder","parser","validator","Conflicts"],"kind":"struct"},"11:685:2958":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:15829:21258":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:9152:3330":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:22983:28353":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:1628:2963":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"2:45033:29727":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"17:16494:19957":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"17:14072:19978":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"6:5488:13875":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"2:33353:9063":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"20:3885:34162":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrenceValues"],"kind":"struct"},"2:13196:120":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:9208:3372":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:3684:28672":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"6:8308:14062":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"6:1514:10742":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:14692:20493":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:44805:131":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"1:4986:3235":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:10607:153":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:4855:8799":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"6:6691:14596":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"2:12920:3074":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"23:322:21627":{"crate_id":23,"path":["anstream","adapter","strip","StripStrIter"],"kind":"struct"},"6:4869:13807":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:44055:8686":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:15557:21228":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:11714:21862":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"5:7774:243":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:46171:3440":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:13095:17250":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"1:2495:3089":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"6:8273:14057":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"21:309:21567":{"crate_id":21,"path":["anstyle","effect","Effects"],"kind":"struct"},"2:47048:3465":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:22904:28570":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:2343:8624":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"11:123:32748":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:22591:9092":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"2:2969:258":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"6:5241:13845":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:12975:8699":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:11691:17026":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"21:173:34448":{"crate_id":21,"path":["anstyle","style","StyleDisplay"],"kind":"struct"},"2:41394:3170":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:7372:27830":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:21667:8842":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"6:5541:13880":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"5:3940:2963":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"5:1645:2995":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:12413:977":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"17:15714:21249":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:2011:3048":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"17:12840:17197":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:16209:21289":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"5:2377:30213":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:472:16946":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"5:2275:30267":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"16:7416:16842":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:0:568":{"crate_id":2,"path":["core"],"kind":"module"},"17:11720:17055":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"2:39844:2947":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:46849:3425":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:44771:9217":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:44345:2927":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:46185:3489":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:22232:3407":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:13322:16988":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"5:6275:3122":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:5797:3328":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:31185:8842":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"18:726:21506":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:14547:20483":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:44775:9218":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:13873:116":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"9:0:2584":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"6:1690:10759":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:15106:20520":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"6:4976:13820":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"16:3141:15881":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:6700:3355":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"5:221:8627":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:15939:21269":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"16:4184:15914":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:9393:21889":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:11887:3190":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:46214:3409":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:8532:3139":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"16:7401:32851":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:11402:8686":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:44979:207":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"11:708:2965":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:33141:9060":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"17:12962:17236":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"18:515:21511":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:378:2922":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"11:1884:2959":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:583:16947":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:21826:3411":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:12041:8675":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"11:2228:15758":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"6:4816:13804":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:34557:9071":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"6:5196:13840":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:9735:139":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"17:14031:19975":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:23224:28425":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"17:12625:17148":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"18:613:34006":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:11386:17011":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"24:298:21642":{"crate_id":24,"path":["anstyle_parse","Utf8Parser"],"kind":"struct"},"1:9416:187":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"20:3994:34271":{"crate_id":20,"path":["clap_builder","parser","parser","ParseResult"],"kind":"enum"},"1:2715:3153":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"5:2357:31804":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:44336:8712":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"20:3109:21531":{"crate_id":20,"path":["clap_builder","builder","arg_predicate","ArgPredicate"],"kind":"enum"},"17:16179:21286":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:16632:21459":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"1:9267:3374":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:12776:17229":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"16:2990:15876":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:9577:2746":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"2:39784:215":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:15919:21267":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"5:3097:30127":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:10938:33977":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"16:8209:16870":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:12401:763":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"23:309:21626":{"crate_id":23,"path":["anstream","adapter","strip","StripStr"],"kind":"struct"},"16:7372:16840":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"20:754:34297":{"crate_id":20,"path":["clap_builder","builder","ext","Extension"],"kind":"trait"},"17:10597:16966":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"5:1794:31406":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:44957:164":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"5:6533:3555":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:11273:3111":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"6:5249:13846":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:8562:3138":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"6:6790:31870":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:46509:3458":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:12410:1857":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"6:6882:13717":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:22919:28597":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"17:16171:21285":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"5:4307:3122":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"17:13491:16996":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:11050:21757":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"17:13205:16983":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"9:236:3311":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"16:7305:16837":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:5533:129":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"17:11958:17065":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"14:202:8742":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:32322:3333":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"6:1711:10761":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"20:4196:34278":{"crate_id":20,"path":["clap_builder","util","graph","ChildGraph"],"kind":"struct"},"1:982:2969":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"17:15621:21227":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"5:2594:30141":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:10167:16953":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:8108:3037":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:32400:244":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:14438:20477":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:8631:3245":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:10402:8640":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"6:7431:10866":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"5:1259:31461":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:11008:25512":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"2:22958:3195":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:21922:3108":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"6:5670:13893":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:10843:16974":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:1982:3047":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"17:13547:16999":{"crate_id":17,"path":["object","read","RelocationMap"],"kind":"struct"},"16:2950:15874":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:11527:17040":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"6:5230:13844":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"20:3091:2742":{"crate_id":20,"path":["clap_builder","builder","arg_group","ArgGroup"],"kind":"struct"},"17:16507:19958":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"17:14796:20498":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"16:6028:16779":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"16:8298:16874":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"5:2265:2895":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:13909:19966":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"6:8249:14053":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:16026:21279":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:4824:21792":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"16:6731:16808":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:14773:20497":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:21721:29946":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"20:3124:21560":{"crate_id":20,"path":["clap_builder","builder","arg_settings","ArgFlags"],"kind":"struct"},"1:12400:747":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"5:4172:31406":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:2936:3108":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"18:635:34010":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:12044:17092":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:8251:9012":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"16:8066:16863":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:13854:19963":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"14:165:15776":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:10950:3097":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"1:10940:21739":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"6:1589:10750":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"7:0:1921":{"crate_id":7,"path":["unwind"],"kind":"module"},"16:2920:15873":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:15148:20522":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:1930:3034":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"17:13041:17244":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"1:11824:21976":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"22:5:3214":{"crate_id":22,"path":["clap_lex","ext","OsStrExt"],"kind":"trait"},"20:3705:3156":{"crate_id":20,"path":["clap_builder","error","kind","ErrorKind"],"kind":"enum"},"18:538:21513":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"16:5198:16514":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:13818:19961":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:1639:2977":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:2222:189":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:12605:16979":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:43922:8664":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"13:229:32763":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:4222:3222":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"6:7308:9890":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:42128:3185":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"6:465:9837":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:2771:135":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"5:1636:210":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:15410:21232":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"17:12066:17117":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:8219:3098":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"6:6480:14580":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:46456:28442":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:4646:8653":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"24:131:3311":{"crate_id":24,"path":["anstyle_parse","state","definitions","State"],"kind":"enum"},"1:12396:1829":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"17:12409:17186":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"16:7223:16834":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:9742:3100":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"16:2506:15854":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"16:5689:16775":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"20:4127:21575":{"crate_id":20,"path":["clap_builder","output","fmt","Colorizer"],"kind":"struct"},"11:2121:2972":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:3617:3104":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:11222:16980":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"16:6302:16793":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:44037:3142":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"17:15701:21248":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:14821:20500":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:15024:20514":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"6:4929:13814":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:4208:3220":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:13717:205":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:3293:8619":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"11:430:32754":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:14933:20508":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:12216:17129":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"17:15064:20517":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"5:5963:251":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:14807:20499":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:12234:17178":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"6:5301:13853":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:21934:3411":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:10394:129":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"16:2550:15856":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:22642:9092":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"6:5477:13873":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"5:7666:2953":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:2437:17091":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:12787:17194":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"17:14346:17188":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"6:6419:14574":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:12095:17093":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:910:2960":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:12475:9175":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:16159:21284":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"6:5217:13842":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"7:79:15618":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"6:5375:13862":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:10999:3103":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"5:6552:3556":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"2:40937:9036":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:7780:28298":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"5:3860:2996":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:13209:138":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:16218:21290":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:11173:33974":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"6:6507:14540":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:4566:3246":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"18:670:21502":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"6:6672:14594":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:44259:8719":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"11:488:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:16377:21300":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:3490:3012":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"17:12906:17224":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"11:2539:29342":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"6:5311:13854":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"6:532:9845":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:42219:3297":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:44023:3141":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"20:3569:21554":{"crate_id":20,"path":["clap_builder","builder","value_parser","UnknownArgumentValueParser"],"kind":"struct"},"11:434:32750":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:5361:988":{"crate_id":2,"path":["core","iter"],"kind":"module"},"6:559:9849":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"5:4337:3122":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"2:4846:8798":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"16:7578:16847":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:16728:21466":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"17:15887:21264":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:12395:1739":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"17:15136:16998":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:11035:3325":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"20:0:2399":{"crate_id":20,"path":["clap_builder"],"kind":"module"},"16:4241:15948":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"11:1064:15762":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:6479:3366":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"11:2566:2953":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"11:1893:2963":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"9:500:15643":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:21704:29942":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:44787:9235":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:12149:17090":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"17:13385:16991":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"23:480:21618":{"crate_id":23,"path":["anstream","auto","AutoStream"],"kind":"struct"},"18:651:34007":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"20:1175:21553":{"crate_id":20,"path":["clap_builder","builder","value_parser","TypedValueParser"],"kind":"trait"},"2:3581:211":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"16:6239:16791":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"20:1104:21555":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParser"],"kind":"struct"},"1:11223:3330":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:46828:28465":{"crate_id":2,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"6:5088:13832":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"20:4090:34258":{"crate_id":20,"path":["clap_builder","mkeymap","KeyType"],"kind":"enum"},"17:12583:17141":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:44763:9215":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:2966:145":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:34038:9067":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:8902:3316":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:11051:239":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:14019:19974":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:46036:3427":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"6:7986:9797":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:10378:22678":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"20:3178:114":{"crate_id":20,"path":["clap_builder","builder","command","Command"],"kind":"struct"},"6:586:9853":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"23:114:3147":{"crate_id":23,"path":["anstream","stream","IsTerminal"],"kind":"trait"},"11:364:32729":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"23:144:21633":{"crate_id":23,"path":["anstream","stream","AsLockedWrite"],"kind":"trait"},"2:46363:3441":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"16:6822:16813":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"2:3254:9042":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"17:10274:16956":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:2596:679":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"19:0:1305":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"6:8267:14056":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"5:0:309":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:13625:9026":{"crate_id":2,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"1:8820:3312":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:11708:3336":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:13193:17246":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"17:15963:21272":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"6:8330:14064":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"2:42609:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:5281:29380":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"5:5562:8657":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"16:2570:15857":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"16:7716:33142":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:10747:3160":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"17:10564:16965":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:42281:9160":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:14327:17189":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:2479:3084":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:3433:2992":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"11:0:2586":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"16:2435:15850":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"2:23089:3196":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:15769:21254":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:21735:29943":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"17:14358:20472":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:3205:8616":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"1:3072:226":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"1:11255:9235":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"1:8494:3171":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"11:1888:2962":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"9:422:15642":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"16:6462:16800":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:12941:17225":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:43124:28562":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"9:480:15639":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:10663:16968":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"16:8267:16873":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:32399:2787":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:6776:9037":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:15431:21234":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:45020:3552":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:10332:16958":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:8668:3282":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:6055:2939":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:7170:3406":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:16019:21278":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"20:3918:34159":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawOccurrences"],"kind":"struct"},"11:1049:2974":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:11864:17067":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:3536:3170":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:4459:110":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"20:3523:21541":{"crate_id":20,"path":["clap_builder","builder","value_parser","BoolishValueParser"],"kind":"struct"},"1:7835:22151":{"crate_id":1,"path":["std","panicking","rust_panic_without_hook","RewrapBox"],"kind":"struct"},"18:113:21486":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"16:7919:16852":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"6:545:9847":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:8885:2957":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"16:8669:16886":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"17:14750:20496":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"6:7454:15016":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"16:2772:15866":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"16:4929:16429":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:3273:9062":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"16:8179:16869":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:4447:29344":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:43935:8682":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"21:209:21564":{"crate_id":21,"path":["anstyle","color","AnsiColor"],"kind":"enum"},"11:396:32727":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:4877:2912":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:15077:20518":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:6871:3364":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"2:38474:9076":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:12960:8701":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:36433:9072":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:11421:17013":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:12414:1931":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"1:4891:3257":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"5:3729:2958":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:3438:8607":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"1:2325:3078":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:12163:17125":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"17:11653:17032":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:6814:3358":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"6:6716:14599":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"2:42498:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:4218:3221":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:8835:3313":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"1:3310:27426":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:11222:2958":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"6:1675:10757":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"11:1580:15766":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:11232:17018":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:40858:9017":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:10655:3115":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:42250:3284":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:16241:21291":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:6965:9020":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"17:12886:17223":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:41413:9008":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:3699:8620":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"20:3257:197":{"crate_id":20,"path":["clap_builder","builder","os_str","OsStr"],"kind":"struct"},"17:15090:20519":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:3826:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"17:13692:17285":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:3217:2914":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"11:2440:2962":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"17:15540:21239":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:12260:17180":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"6:8290:14059":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:41379:3354":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"5:1533:2957":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"6:6381:14511":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:32368:16886":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"6:4902:13811":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"16:5449:16581":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:44320:8703":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"20:3927:34158":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawOccurrenceValues"],"kind":"struct"},"2:11495:8688":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:10793:16972":{"crate_id":17,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"2:4482:8614":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:16341:21298":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:11537:25790":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"6:1727:10762":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:46666:3430":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"6:517:9843":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:10355:144":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"17:11805:17070":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:33826:9064":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"16:7058:16830":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"5:1614:2965":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:6527:220":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:1869:3018":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"16:4152:15905":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:32487:8615":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"1:9352:22452":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:32398:237":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"17:16332:21297":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:10036:29347":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:10650:3113":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:2148:9104":{"crate_id":2,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"2:46494:28595":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"5:6170:9436":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:5009:3229":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:3854:17165":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"16:4902:16425":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"6:8319:14063":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"5:7872:8762":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:11247:25518":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:46799:28650":{"crate_id":2,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"17:12122:17094":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"6:8296:14060":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"5:4377:2957":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"9:328:15696":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:40715:9147":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:11114:16978":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:14099:19980":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"11:2466:2963":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"2:11290:8692":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"16:2530:15855":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"20:3343:21530":{"crate_id":20,"path":["clap_builder","builder","str","Str"],"kind":"struct"},"14:31:15775":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:13014:17254":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"5:735:30270":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:15689:21247":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:43136:28550":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"17:12798:17230":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"2:44561:8737":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:5640:3323":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:44534:8736":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:40887:9023":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"5:789:250":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:15989:21275":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:13921:19967":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:13945:19969":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"16:5742:16778":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"16:7789:33213":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"16:2796:15867":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:11075:33972":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:8295:165":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:824:190":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"2:40780:3072":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"17:15852:21261":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:10549:16778":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:46051:3457":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"16:6713:16807":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"6:5629:13888":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"1:5869:3367":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:46139:3428":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"16:6408:16797":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"18:521:21508":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:11198:2957":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"16:7521:33119":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:23100:3211":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:33893:9066":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"16:6794:16811":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"16:4873:16419":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:15655:21244":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"11:772:2960":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"16:8546:16879":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"6:7577:15024":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"6:1684:10758":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:628:2925":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"18:589:28579":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"5:4536:3122":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:23007:28568":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:22713:3539":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"17:13082:16980":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"17:3503:17142":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:42185:173":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"6:570:9851":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"16:7462:16844":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:9165:3331":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:6376:3553":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:15315:21230":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:5117:3278":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:8723:3292":{"crate_id":1,"path":["std","panic","PanicHookInfo"],"kind":"struct"},"1:11382:3076":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"6:4829:13805":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:7902:22750":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:44469:8734":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"6:7448:15015":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:22:826":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"25:53:3311":{"crate_id":25,"path":["utf8parse","types","State"],"kind":"enum"},"1:3400:3164":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"20:34:2749":{"crate_id":20,"path":["clap_builder","derive","Parser"],"kind":"trait"},"1:6736:3363":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"5:6033:2962":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:8891:3315":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:33692:3404":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:22798:28640":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:44187:8716":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"16:6876:16818":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"5:5826:8765":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:40896:9024":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"20:4076:34100":{"crate_id":20,"path":["clap_builder","mkeymap","MKeyMap"],"kind":"struct"},"17:11309:16982":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"5:7721:9147":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:15731:21250":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:40554:8824":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"6:5420:13867":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"6:7368:3282":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:11753:21716":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:8512:3107":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:30800:8628":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"28:112:21684":{"crate_id":28,"path":["strsim","StrSimError"],"kind":"enum"},"11:842:2968":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"5:4506:31435":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:8073:2935":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:10980:140":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"17:11851:17068":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:3458:142":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"6:5494:13876":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"20:3824:21597":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","IdsRef"],"kind":"struct"},"16:3126:15880":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"16:6781:16810":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"6:8353:15595":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"6:8261:14055":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:38309:9073":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:14947:20509":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:43983:8714":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:11553:17031":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"20:3553:21552":{"crate_id":20,"path":["clap_builder","builder","value_parser","TryMapValueParser"],"kind":"struct"},"2:23235:28592":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"2:45093:28299":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"17:5131:17249":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"2:43418:28464":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"6:5127:13835":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"20:3361:2900":{"crate_id":20,"path":["clap_builder","builder","str","inner","Inner"],"kind":"struct"},"17:14859:20503":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:11130:25770":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:14963:20510":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:16613:19961":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"2:43190:138":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:43996:8711":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:6971:28328":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"6:6708:14598":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"1:677:2931":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"16:2415:15821":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:3665:8783":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:8256:2955":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"1:8354:22744":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:44598:8738":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:3307:27554":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"6:6638:14590":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"6:5586:13884":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"5:1379:2972":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:11990:15808":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:12415:1434":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"17:14599:20487":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"6:6599:14586":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:39712:3011":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"5:7519:2983":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"16:8096:16864":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"6:8343:15594":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"11:2366:15768":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"18:96:21485":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:10787:2906":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"1:6392:25744":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:10615:157":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"20:4038:21592":{"crate_id":20,"path":["clap_builder","parser","parser","Identifier"],"kind":"enum"},"2:46200:3495":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"6:6917:14638":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:40800:3102":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"1:8202:3097":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:12404:902":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"1:4330:3249":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:30811:28542":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"6:5139:13836":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:9433:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:15286:21229":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"18:718:21498":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:12687:17226":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"16:7938:16853":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:44961:219":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:46604:3476":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:14312:20471":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"17:15496:21237":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:4567:8802":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"5:4217:2958":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:11847:3191":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"20:3491:21550":{"crate_id":20,"path":["clap_builder","builder","value_parser","RangedU64ValueParser"],"kind":"struct"},"2:44354:8713":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"16:6808:16812":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:45044:3549":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"2:32457:2788":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"17:13798:19960":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"16:2660:15861":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:892:2958":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:16555:21458":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"2:3247:9040":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"16:7337:16838":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:15946:21270":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"5:2825:30271":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"6:6623:14588":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:13145:17243":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"6:6902:14637":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"6:6521:14581":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"16:6573:16801":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"20:4024:21593":{"crate_id":20,"path":["clap_builder","parser","parser","PendingArg"],"kind":"struct"},"17:14220:20467":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:3402:3165":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:23213:28330":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"17:15602:21243":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"14:160:15775":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"5:1548:2958":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:3212:247":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"6:6437:14575":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:11706:17054":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:11465:17017":{"crate_id":17,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"5:1564:2959":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"6:4875:13808":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:45957:3455":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"16:8165:16868":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:22851:28572":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:10394:16960":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"1:3910:3191":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"16:2486:15853":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:10336:226":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"11:351:32731":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"2:42363:196":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:10803:3141":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"17:10861:139":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"5:6731:31406":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"22:0:2726":{"crate_id":22,"path":["clap_lex"],"kind":"module"},"5:6685:2962":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:5184:3287":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"16:5085:16493":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"5:2304:30179":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"6:6700:14597":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"16:3441:15883":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"2:42346:2958":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"5:40:3013":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:44205:8717":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:6942:233":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:6590:186":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:12673:17214":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:3402:8621":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"2:46733:3491":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"16:8137:16866":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"16:3308:15882":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"5:3094:8609":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"5:1586:2960":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"23:432:34508":{"crate_id":23,"path":["anstream","adapter","wincon","WinconCapture"],"kind":"struct"},"2:46346:3435":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:47122:3471":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:12191:17127":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"11:1907:2977":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"9:355:15656":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:45012:3551":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"16:8723:138":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"22:97:21611":{"crate_id":22,"path":["clap_lex","RawArgs"],"kind":"struct"},"21:127:34447":{"crate_id":21,"path":["anstyle","reset","ResetDisplay"],"kind":"struct"},"6:497:9842":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:437:185":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:47320:8589":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:42166:194":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"23:373:21625":{"crate_id":23,"path":["anstream","adapter","strip","StripBytesIter"],"kind":"struct"},"17:14573:20485":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:22501:3543":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"2:5980:3122":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"2:9529:8697":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:12775:8692":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"23:447:3311":{"crate_id":23,"path":["anstream","adapter","wincon","State"],"kind":"enum"},"2:12721:9222":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:13871:19964":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"6:6823:14609":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:3449:2784":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"16:6159:16787":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"5:4491:265":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"6:578:9852":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"16:7259:16835":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:42871:8639":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:47294:8587":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"16:3048:15878":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:8757:9011":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:15418:21233":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"16:8028:16861":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"16:7424:16843":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:9135:3329":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"16:7807:33187":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:40678:8821":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"5:6901:31406":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"6:1625:10752":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:41179:9035":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"23:337:21628":{"crate_id":23,"path":["anstream","adapter","strip","StrippedBytes"],"kind":"struct"},"18:659:21501":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:39716:9078":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:3258:3401":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:47222:3498":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:12389:476":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"1:4160:3217":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"20:3843:21599":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","ValuesRef"],"kind":"struct"},"6:7350:15013":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:11818:17069":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"6:5428:13868":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"6:5520:13878":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"18:689:21504":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"5:3875:2997":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:4346:3251":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:1867:3017":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1:3848:3187":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"16:5282:16529":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"20:3876:34157":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Occurrences"],"kind":"struct"},"2:43371:3114":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"11:881:2971":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:9306:116":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:5465:203":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"16:4267:15951":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:16812:21473":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"2:10406:8637":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"14:220:15785":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:2551:2599":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:44751:9211":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"5:7591:30131":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"6:4921:13813":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:12952:17235":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"6:6544:14584":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:41960:3183":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:10444:3335":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"11:740:2966":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:965:2967":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"15:288:15799":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:15864:21262":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:11481:8690":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"6:5441:13869":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:11983:15808":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"18:680:21503":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:14416:20476":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:39053:9077":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"11:1914:2978":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"20:3576:21538":{"crate_id":20,"path":["clap_builder","builder","value_parser","_AutoValueParser"],"kind":"struct"},"23:99:21632":{"crate_id":23,"path":["anstream","stream","RawStream"],"kind":"trait"},"17:14975:20511":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"5:291:31406":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"11:830:2964":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"16:5727:16777":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:16701:21464":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"2:43611:9204":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"6:5282:13850":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:9448:3362":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"17:11678:17027":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:34384:9069":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"16:6680:16805":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"1:10945:21865":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"16:8598:16882":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"6:491:9841":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"20:2945:2739":{"crate_id":20,"path":["clap_builder","builder","action","ArgAction"],"kind":"enum"},"5:7060:8765":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"14:7:15775":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"6:5603:13886":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"18:698:21505":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:3659:147":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:47435:8594":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:22457:3542":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"16:8503:16877":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:10744:3164":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"17:10729:16970":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:23076:3197":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:13034:8725":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:46427:28415":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:23191:28553":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"1:5305:22733":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:2973:257":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"16:2704:15863":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:12405:908":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"1:4492:3254":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"20:2969:34064":{"crate_id":20,"path":["clap_builder","builder","app_settings","AppFlags"],"kind":"struct"},"6:8284:14058":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:13290:16986":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"5:938:2981":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"5:7541:2984":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:2610:9092":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"11:698:2959":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:11515:17046":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:11733:17056":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"5:7583:210":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:4598:2911":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:13890:19965":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:3671:8782":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"16:7350:32914":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"23:416:21631":{"crate_id":23,"path":["anstream","adapter","wincon","WinconBytesIter"],"kind":"struct"},"2:45081:8604":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"17:14114:19981":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"5:7551:2999":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"2:44105:8720":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"6:6493:14539":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:5387:13864":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"9:53:15659":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"20:3366:21536":{"crate_id":20,"path":["clap_builder","builder","styled_str","StyledStr"],"kind":"struct"},"17:12204:17128":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"21:353:21569":{"crate_id":21,"path":["anstyle","reset","Reset"],"kind":"struct"},"1:7415:21905":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:9340:22717":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"24:96:21639":{"crate_id":24,"path":["anstyle_parse","VtUtf8Receiver"],"kind":"struct"},"2:2808:202":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:9492:3400":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"18:598:34018":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"17:12135:17124":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:39881:8770":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"17:14917:20507":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:32489:115":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:43165:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"17:16311:21295":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:10141:16952":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"18:80:21484":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:11281:16981":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"16:7959:16855":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"6:7391:10883":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:42864:8632":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"9:445:15640":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"5:7677:2954":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:30779:8761":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:10396:8632":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:44971:227":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"1:0:1731":{"crate_id":1,"path":["std"],"kind":"module"},"16:7542:33207":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:23279:28416":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"20:3464:21548":{"crate_id":20,"path":["clap_builder","builder","value_parser","PossibleValuesParser"],"kind":"struct"},"2:6153:9025":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:14832:20501":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"20:3296:21533":{"crate_id":20,"path":["clap_builder","builder","range","ValueRange"],"kind":"struct"},"20:3978:21594":{"crate_id":20,"path":["clap_builder","parser","parser","ParseState"],"kind":"enum"},"2:43396:157":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:14269:20468":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:10518:114":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"1:3599:3105":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:3656:3049":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"16:7358:16839":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:46281:3475":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"9:176:15745":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"11:671:2957":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:21677:29935":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"1:8209:3101":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"1:9764:128":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"2:47373:8592":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:13635:17283":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:384:2923":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:14640:20490":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:39744:210":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"6:6813:14608":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:12008:17119":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:40541:8822":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:12392:17159":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:12371:17139":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:3644:9079":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:44087:8721":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"16:7471:16845":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"20:1698:138":{"crate_id":20,"path":["clap_builder","error","Error"],"kind":"struct"},"17:12736:17200":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:40827:3009":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"11:1564:15765":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:15121:20521":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:12407:895":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:42338:2957":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:6976:21620":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"6:473:9838":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:3720:17147":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"16:8000:16859":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:4435:29351":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:11291:33988":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"28:0:2732":{"crate_id":28,"path":["strsim"],"kind":"module"},"6:6611:14587":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:12992:17202":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"6:5482:13874":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:43883:8665":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:12570:17140":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:23121:3108":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"16:6843:16815":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:10181:8629":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"5:3373:2979":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"6:0:1013":{"crate_id":6,"path":["libc"],"kind":"module"},"2:45987:3456":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"16:5318:16542":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:14127:19982":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:40479:2927":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"16:3110:15879":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:12826:17195":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"6:4964:13818":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"16:6625:33143":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:11566:17030":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:11016:16976":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"20:3449:21542":{"crate_id":20,"path":["clap_builder","builder","value_parser","EnumValueParser"],"kind":"struct"},"16:4766:16381":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:15760:21253":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:14001:19973":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"16:2450:15851":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"16:903:33196":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"16:2467:15852":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:15777:21255":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"6:5471:13872":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"3:234:226":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:8364:3156":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"6:1521:10743":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:3736:8623":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"6:5288:13851":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:41365:28551":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"2:39766:212":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:10849:25773":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"6:6462:14578":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"6:1500:10740":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"6:5507:13877":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"6:7361:15014":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:12976:17237":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:2790:3155":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"6:5069:13831":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:1539:10745":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:30521:3194":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:0:2591":{"crate_id":17,"path":["object"],"kind":"module"},"2:33759:9065":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:46926:3459":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:47239:8582":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"6:4997:13823":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:14520:20481":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"22:28:3108":{"crate_id":22,"path":["clap_lex","ext","private","Sealed"],"kind":"trait"},"17:16668:21462":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"26:0:2730":{"crate_id":26,"path":["colorchoice"],"kind":"module"},"21:329:21568":{"crate_id":21,"path":["anstyle","effect","EffectIter"],"kind":"struct"},"5:2171:2997":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"17:13006:17239":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"6:5165:13838":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"5:7708:3056":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:42722:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:40699:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:3285:8617":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"17:15439:21235":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"6:485:9840":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"23:181:3108":{"crate_id":23,"path":["anstream","stream","private","Sealed"],"kind":"trait"},"2:3461:143":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:2963:163":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"1:4174:3219":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"6:1657:10755":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"13:110:32762":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:47268:8585":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:2729:25773":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:11401:17012":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"6:5019:13825":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:15679:21246":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:41988:28454":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"28:120:21685":{"crate_id":28,"path":["strsim","RowId"],"kind":"struct"},"2:10041:30010":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:2227:17072":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:42461:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:3207:118":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"6:5381:13863":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:11367:8693":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"6:6473:14579":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:12981:8698":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:42685:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:13471:16995":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"24:252:2749":{"crate_id":24,"path":["anstyle_parse","Parser"],"kind":"struct"},"20:3591:28550":{"crate_id":20,"path":["clap_builder","builder","debug_asserts","Flag"],"kind":"enum"},"6:479:9839":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"20:3753:21572":{"crate_id":20,"path":["clap_builder","error","ErrorInner"],"kind":"struct"},"2:46754:28476":{"crate_id":2,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"1:8690:3232":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:5726:3325":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"6:5658:13892":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"2:42857:8631":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"5:3465:2963":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"16:6608:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:8007:2924":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"16:6998:16826":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"16:6368:16795":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"6:1489:10738":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"6:538:9846":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:821:3198":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"1:1115:2975":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:13181:17247":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"1:11908:3192":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"17:14084:19979":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"11:2420:2959":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"17:16520:21457":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"23:486:34518":{"crate_id":23,"path":["anstream","auto","StreamInner"],"kind":"enum"},"2:23169:28552":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"18:0:2592":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:13896:3553":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"13:0:2581":{"crate_id":13,"path":["std_detect"],"kind":"module"},"21:279:21566":{"crate_id":21,"path":["anstyle","color","RgbColor"],"kind":"struct"},"17:12035:15758":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"6:5051:13829":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:40591:8712":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:40526:28364":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"16:2724:15864":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"6:5025:13826":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"6:7414:10868":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:9301:22448":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"6:1643:10754":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"11:1085:32726":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"20:3627:21582":{"crate_id":20,"path":["clap_builder","error","context","ContextKind"],"kind":"enum"},"17:12082:17095":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:16362:21299":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:2802:195":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"16:7159:16832":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"6:553:9848":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"11:1900:2976":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"17:11503:17019":{"crate_id":17,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"16:7030:16828":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:766:154":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:12079:8671":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"2:40583:2927":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"20:3252:34296":{"crate_id":20,"path":["clap_builder","builder","ext","BoxedEntry"],"kind":"struct"},"16:5224:16517":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:8022:2907":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"6:8302:14061":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"6:5205:13841":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"6:5412:1257":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:16684:21463":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"1:1905:3028":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"6:5648:13891":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:9373:21762":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:44954:151":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:11124:25789":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:4928:3230":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"16:6837:16814":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"11:1880:2957":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:43954:8683":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"20:3540:21544":{"crate_id":20,"path":["clap_builder","builder","value_parser","MapValueParser"],"kind":"struct"},"5:7787:8743":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:12393:335":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"6:7539:15021":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"5:2182:2998":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"17:14507:20480":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"18:563:21514":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"5:7611:2959":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:12390:1891":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:47358:8591":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"6:1530:10744":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:10031:16949":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:12402:742":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"17:10418:16961":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:2406:17066":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:43408:3311":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:39804:214":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:11457:17016":{"crate_id":17,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"1:12388:1187":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:12491:9177":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"22:152:21614":{"crate_id":22,"path":["clap_lex","ShortFlags"],"kind":"struct"},"11:2301:2972":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"2:40485:8786":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:15665:21245":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:3674:3106":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"1:4110:3215":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"20:1657:21584":{"crate_id":20,"path":["clap_builder","error","format","RichFormatter"],"kind":"struct"},"11:2559:32739":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"5:3809:31406":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:1621:2959":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"16:155:15826":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:4359:3252":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:9360:16847":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"20:3443:21547":{"crate_id":20,"path":["clap_builder","builder","value_parser","PathBufValueParser"],"kind":"struct"},"16:6173:16788":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"6:6680:14595":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:16739:21467":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"2:2082:1372":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"17:10516:16964":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:10535:22297":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"2:30747:2991":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:8795:29346":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"17:12550:17144":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"16:8043:32961":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"16:8483:16876":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:23257:28417":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"6:4842:13806":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:42298:226":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"5:7185:264":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"16:4694:16332":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:42759:3349":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"17:11124:33973":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:12399:744":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"17:12108:17123":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:15050:20516":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:21806:3108":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"6:5295:13852":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:8664:3280":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:11777:17058":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"17:13610:17002":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:11592:17028":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:8625:3256":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"18:581:8842":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:9443:3361":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"2:4720:8788":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"17:10442:16962":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:47259:8584":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:16822:19968":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"17:12524:17145":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:45070:8606":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:15981:21274":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"14:0:2588":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"21:259:21565":{"crate_id":21,"path":["anstyle","color","Ansi256Color"],"kind":"struct"},"17:15836:21259":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:15973:21273":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"6:5366:13861":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:46243:3463":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:8579:3180":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"1:9178:3332":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"1:12387:420":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:47248:8583":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"5:1424:2975":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"16:8585:16881":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:39874:9080":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"16:6042:16780":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"20:3430:21551":{"crate_id":20,"path":["clap_builder","builder","value_parser","StringValueParser"],"kind":"struct"},"1:8045:2906":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"17:13970:19971":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:4:1270":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"1:12409:1851":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"20:61:2750":{"crate_id":20,"path":["clap_builder","derive","Subcommand"],"kind":"trait"},"1:4308:27151":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:12816:16995":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"16:2640:15860":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"16:6970:16824":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:40564:8825":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:16775:21470":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"18:481:21509":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:8333:130":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:5349:13859":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"17:15160:20523":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:11579:17029":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:8027:2909":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"16:4844:16413":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:42878:8640":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"20:3280:21532":{"crate_id":20,"path":["clap_builder","builder","possible_value","PossibleValue"],"kind":"struct"},"16:5379:16557":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:43626:28569":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:14533:20482":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"16:6890:16819":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"6:4881:13809":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:3654:254":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"16:7044:16829":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"20:3310:21535":{"crate_id":20,"path":["clap_builder","builder","resettable","Resettable"],"kind":"enum"},"2:23268:28426":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"1:11067:3332":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"6:5151:13837":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:12412:1845":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"11:2380:2957":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"1:988:2970":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"18:754:21507":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:14672:20492":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"}},"external_crates":{"26":{"name":"colorchoice","html_root_url":null},"23":{"name":"anstream","html_root_url":null},"20":{"name":"clap_builder","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"28":{"name":"strsim","html_root_url":null},"25":{"name":"utf8parse","html_root_url":null},"22":{"name":"clap_lex","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"27":{"name":"anstyle_query","html_root_url":null},"24":{"name":"anstyle_parse","html_root_url":null},"21":{"name":"anstyle","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":30}