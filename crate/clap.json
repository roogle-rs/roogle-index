{"root":"0:0:1824","crate_version":"4.4.7","includes_private":false,"index":{"2:12477:21686":{"id":"2:12477:21686","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:196","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:7999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12110:7999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12125:8000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12430:20399":{"id":"2:12430:20399","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43537:2468","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12409:28665":{"id":"2:12409:28665","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:12407:28664"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12486:28673":{"id":"2:12486:28673","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12105:8003","`DoubleEndedIterator`":"2:7517:125","prim@char":"1:12066:447","str::rmatch_indices":"2:12489:28674"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43701:8018","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:7999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12456:21677":{"id":"2:12456:21677","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12066:447","self::pattern":"2:12105:8003"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11921:7994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:7999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12524:22846":{"id":"2:12524:22846","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39545:22983","Self::is_ascii":"2:12523:22845"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39545:22983","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12422:21643":{"id":"2:12422:21643","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10195:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10195:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12431:26441":{"id":"2:12431:26441","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12432:26455"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43825:8006","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12436:21687":{"id":"2:12436:21687","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12066:447","self::pattern":"2:12105:8003"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:7999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5521:29347":{"id":"5:5521:29347","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7487:246"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7487:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:7999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12521:28685":{"id":"2:12521:28685","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12066:131","`FromStr`":"2:12065:2633"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41734:229","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12065:2633","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12065:2633","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12494:28676":{"id":"2:12494:28676","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12465:28671":{"id":"2:12465:28671","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12105:8003","str::split":"2:12453:21675","prim@char":"1:12066:447","str::split_terminator":"2:12462:28670"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43619:8022","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:7999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12110:7999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12125:8000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12439:21688":{"id":"2:12439:21688","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12066:447","self::pattern":"2:12105:8003"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:7999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12425:28668":{"id":"2:12425:28668","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12072:1502","crate::ops::IndexMut":"2:3076:2347","str::slice_unchecked":"2:12424:28667"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12499:28679":{"id":"2:12499:28679","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12503:28681":{"id":"2:12503:28681","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12066:447","self::pattern":"2:12105:8003"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:7999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12426:21667":{"id":"2:12426:21667","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_mut":"2:12427:21668"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5518:8345":{"id":"5:5518:8345","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7487:246"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7487:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:7999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12442:21689":{"id":"2:12442:21689","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12066:447","self::pattern":"2:12105:8003"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:7999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12110:7999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12125:8000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12449:19934":{"id":"2:12449:19934","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41591:194","prim@char":"1:12066:447","self::pattern":"2:12105:8003"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:196","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:7999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12110:7999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12125:8000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12435:26434":{"id":"2:12435:26434","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43843:8004","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12445:19933":{"id":"2:12445:19933","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41591:194","prim@char":"1:12066:447","self::pattern":"2:12105:8003"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:196","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:7999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12525:22848":{"id":"2:12525:22848","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12509:21690":{"id":"2:12509:21690","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12066:447","self::pattern":"2:12105:8003"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:7999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12110:7999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12125:8000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5534:2493":{"id":"5:5534:2493","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7487:246"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7487:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12424:28667":{"id":"2:12424:28667","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12072:1502","str::slice_mut_unchecked":"2:12425:28668","crate::ops::Index":"2:3072:2346"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12434:28669":{"id":"2:12434:28669","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43815:8017","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12418:21641":{"id":"2:12418:21641","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41591:194"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10195:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10195:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12433:23936":{"id":"2:12433:23936","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43805:2465","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5535:23149":{"id":"5:5535:23149","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12526:22849"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7487:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5516":{"id":"5:5516","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5517:29346","5:5518:8345","5:5521:29347","5:5524:29348","5:5532:29349","5:5533:29350","5:5534:2493","5:5535:23149","5:5536:23150"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12506:20253":{"id":"2:12506:20253","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12066:447","self::pattern":"2:12105:8003"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:7999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12527:22850":{"id":"2:12527:22850","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12462:28670":{"id":"2:12462:28670","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12105:8003","str::split":"2:12453:21675","prim@char":"1:12066:447","`DoubleEndedIterator`":"2:7517:125","str::rsplit_terminator":"2:12465:28671"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43601:8023","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:7999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12492:28675":{"id":"2:12492:28675","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12498:28678":{"id":"2:12498:28678","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5532:29349":{"id":"5:5532:29349","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7487:246"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7487:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12530:2265":{"id":"2:12530:2265","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4573:2265"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43859:2266","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12413:28666":{"id":"2:12413:28666","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5524:29348":{"id":"5:5524:29348","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7487:246"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7487:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12496:28677":{"id":"2:12496:28677","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5517:29346":{"id":"5:5517:29346","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2138","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7220:2330","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2138","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7220:2330","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5536:23150":{"id":"5:5536:23150","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12527:22850"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7487:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3-20:0:1816":{"id":"0:3-20:0:1816","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[99,0],"end":[99,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"clap_builder","name":"clap_builder","id":"20:0:1816","glob":true}}},"2:12404:868":{"id":"2:12404:868","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12066:447"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12531:28687":{"id":"2:12531:28687","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4570:28687"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43868:8015","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12407:28664":{"id":"2:12407:28664","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1824":{"id":"0:0:1824","crate_id":0,"name":"clap","span":{"filename":"src/lib.rs","begin":[6,0],"end":[113,18]},"visibility":"public","docs":"> **Command Line Argument Parser for Rust**\n\nQuick Links:\n- Derive [tutorial][_derive::_tutorial::chapter_0] and [reference][_derive]\n- Builder [tutorial][_tutorial::chapter_0] and [reference](index.html)\n- [Cookbook][_cookbook]\n- [FAQ][_faq]\n- [Discussions](https://github.com/clap-rs/clap/discussions)\n\n## Aspirations\n\n- Out of the box, users get a polished CLI experience\n  - Including common argument behavior, help generation, suggested fixes for users, colored output, [shell completions](https://github.com/clap-rs/clap/tree/master/clap_complete), etc\n- Flexible enough to port your existing CLI interface\n  - However, we won't necessarily streamline support for each use case\n- Reasonable parse performance\n- Resilient maintainership, including\n  - Willing to break compatibility rather than batching up breaking changes in large releases\n  - Leverage feature flags to keep to one active branch\n  - Being under [WG-CLI](https://github.com/rust-cli/team/) to increase the bus factor\n- We follow semver and will wait about 6-9 months between major breaking changes\n- We will support the last two minor Rust releases (MSRV, currently 1.70.0)\n\nWhile these aspirations can be at odds with fast build times and low binary\nsize, we will still strive to keep these reasonable for the flexibility you\nget.  Check out the\n[argparse-benchmarks](https://github.com/rust-cli/argparse-benchmarks-rs) for\nCLI parsers optimized for other use cases.\n\n## Example\n\nRun\n```console\n$ cargo add clap --features derive\n```\n*(See also [feature flag reference][_features])*\n\nThen define your CLI in `main.rs`:\n```rust\n# #[cfg(feature = \"derive\")] {\nuse clap::Parser;\n\n/// Simple program to greet a person\n#[derive(Parser, Debug)]\n#[command(author, version, about, long_about = None)]\nstruct Args {\n    /// Name of the person to greet\n    #[arg(short, long)]\n    name: String,\n\n    /// Number of times to greet\n    #[arg(short, long, default_value_t = 1)]\n    count: u8,\n}\n\nfn main() {\n    let args = Args::parse();\n\n    for _ in 0..args.count {\n        println!(\"Hello {}!\", args.name)\n    }\n}\n# }\n```\n\nAnd try it out:\n```console\n$ demo --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: demo[EXE] [OPTIONS] --name <NAME>\n\nOptions:\n  -n, --name <NAME>    Name of the person to greet\n  -c, --count <COUNT>  Number of times to greet [default: 1]\n  -h, --help           Print help\n  -V, --version        Print version\n\n$ demo --name Me\nHello Me!\n\n```\n*(version number and `.exe` extension on windows replaced by placeholders)*\n\nSee also the derive [tutorial][_derive::_tutorial] and [reference][_derive]\n\n### Related Projects\n\nAugment clap:\n- [wild](https://crates.io/crates/wild) for supporting wildcards (`*`) on Windows like you do Linux\n- [argfile](https://crates.io/crates/argfile) for loading additional arguments from a file (aka response files)\n- [shadow-rs](https://crates.io/crates/shadow-rs) for generating `Command::long_version`\n- [clap_mangen](https://crates.io/crates/clap_mangen) for generating man page source (roff)\n- [clap_complete](https://crates.io/crates/clap_complete) for shell completion support\n\nCLI Helpers\n- [cio](https://crates.io/crates/clio) for reading/writing to files specified as arguments\n- [clap-verbosity-flag](https://crates.io/crates/clap-verbosity-flag)\n- [clap-cargo](https://crates.io/crates/clap-cargo)\n- [concolor-clap](https://crates.io/crates/concolor-clap)\n\nTesting\n- [`trycmd`](https://crates.io/crates/trycmd):  Bulk snapshot testing\n- [`snapbox`](https://crates.io/crates/snapbox):  Specialized snapshot testing\n- [`assert_cmd`](https://crates.io/crates/assert_cmd) and [`assert_fs`](https://crates.io/crates/assert_fs): Customized testing\n\nDocumentation:\n- [Command-line Apps for Rust](https://rust-cli.github.io/book/index.html) book\n","links":{},"attrs":["#![doc(html_logo_url =\n\"https://raw.githubusercontent.com/clap-rs/clap/master/assets/clap.png\")]","#![warn(missing_docs, missing_debug_implementations,\nmissing_copy_implementations, trivial_casts, unused_allocation,\ntrivial_numeric_casts, clippy :: single_char_pattern)]","#![forbid(unsafe_code)]","#![allow(clippy :: single_component_path_imports)]","#![allow(clippy :: branches_sharing_code)]","#![allow(clippy :: if_same_then_else)]","#![allow(clippy :: collapsible_else_if)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:3-20:0:1816"],"is_stripped":false}}},"2:12526:22849":{"id":"2:12526:22849","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12432:26455":{"id":"2:12432:26455","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12431:26441"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43834:8005","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12474:21685":{"id":"2:12474:21685","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:196","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:7999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12528:28686":{"id":"2:12528:28686","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4572:28686"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43850:8014","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12403":{"id":"2:12403","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12404:868","2:12405:20805","2:12406:28663","2:12407:28664","2:12409:28665","2:12412:21281","2:12413:28666","2:12414:339","2:12415:338","2:12416:21640","2:12418:21641","2:12420:21642","2:12422:21643","2:12424:28667","2:12425:28668","2:12426:21667","2:12427:21668","2:12428:26433","2:12429:26317","2:12430:20399","2:12431:26441","2:12432:26455","2:12433:23936","2:12434:28669","2:12435:26434","2:12436:21687","2:12439:21688","2:12442:21689","2:12445:19933","2:12449:19934","2:12453:21675","2:12456:21677","2:12459:21679","2:12462:28670","2:12465:28671","2:12468:21681","2:12471:21683","2:12474:21685","2:12477:21686","2:12480:2050","2:12483:28672","2:12486:28673","2:12489:28674","2:12492:28675","2:12494:28676","2:12496:28677","2:12498:28678","2:12499:28679","2:12500:28680","2:12503:28681","2:12506:20253","2:12509:21690","2:12512:28682","2:12515:28683","2:12518:28684","2:12521:28685","2:12523:22845","2:12524:22846","2:12525:22848","2:12526:22849","2:12527:22850","2:12528:28686","2:12530:2265","2:12531:28687"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12428:26433":{"id":"2:12428:26433","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12066:447"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43521:8010","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5533:29350":{"id":"5:5533:29350","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2138","`String`":"5:7487:246"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2138","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7220:2330","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7487:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12518:28684":{"id":"2:12518:28684","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12066:447","self::pattern":"2:12105:8003"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:7999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12110:7999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12125:8000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12415:338":{"id":"2:12415:338","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12083:1608"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12420:21642":{"id":"2:12420:21642","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10195:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10195:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12405:20805":{"id":"2:12405:20805","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12429:26317":{"id":"2:12429:26317","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12066:447"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43527:8009","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12483:28672":{"id":"2:12483:28672","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12105:8003","`DoubleEndedIterator`":"2:7517:125","prim@char":"1:12066:447","str::matches":"2:12480:2050"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43773:8021","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:7999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12110:7999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12125:8000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12453:21675":{"id":"2:12453:21675","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12105:8003","`DoubleEndedIterator`":"2:7517:125","prim@char":"1:12066:447","str::split_whitespace":"2:12431:26441","str::rsplit":"2:12459:21679"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43551:2469","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:7999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12468:21681":{"id":"2:12468:21681","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12066:447","self::pattern":"2:12105:8003","str::rsplitn":"2:12471:21683"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43655:7992","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:7999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12512:28682":{"id":"2:12512:28682","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12066:447","self::pattern":"2:12105:8003"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:7999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12110:7999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12125:8000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12500:28680":{"id":"2:12500:28680","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12066:447","self::pattern":"2:12105:8003"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:7999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12110:7999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12130:7998","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12523:22845":{"id":"2:12523:22845","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12459:21679":{"id":"2:12459:21679","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12105:8003","`DoubleEndedIterator`":"2:7517:125","prim@char":"1:12066:447","str::split":"2:12453:21675"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43569:7988","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:7999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12110:7999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12125:8000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12515:28683":{"id":"2:12515:28683","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12066:447","self::pattern":"2:12105:8003"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:7999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12406:28663":{"id":"2:12406:28663","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12412:21281":{"id":"2:12412:21281","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11665:8007"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12471:21683":{"id":"2:12471:21683","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12066:447","str::splitn":"2:12468:21681","self::pattern":"2:12105:8003"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43673:7990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:7999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12110:7999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12125:8000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12427:21668":{"id":"2:12427:21668","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:12426:21667"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12489:28674":{"id":"2:12489:28674","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12105:8003","`DoubleEndedIterator`":"2:7517:125","prim@char":"1:12066:447","str::match_indices":"2:12486:28673"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43719:8019","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:7999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12110:7999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12125:8000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12416:21640":{"id":"2:12416:21640","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41591:194"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10195:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10195:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12414:339":{"id":"2:12414:339","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12415:338","`u8`":"1:12083:1608"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12480:2050":{"id":"2:12480:2050","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12105:8003","`DoubleEndedIterator`":"2:7517:125","prim@char":"1:12066:447","str::rmatches":"2:12483:28672"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43755:8020","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:7999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"1:9312:2094":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"16:5634:15497":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:9242:15675":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"11:2286:2309":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"20:52:2096":{"crate_id":20,"path":["clap_builder","derive","FromArgMatches"],"kind":"trait"},"21:305:27925":{"crate_id":21,"path":["anstyle","color","DisplayBuffer"],"kind":"struct"},"6:7544:12825":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:4772:2548":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:12645:19086":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:11654:14525":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:12531:19080":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:13567:19839":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:3325:7929":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:22934:185":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"2:40259:8305":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:4800:416":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"6:4775:12628":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:9505:136":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"8:0:1936":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"20:4190:32100":{"crate_id":20,"path":["clap_builder","util","flat_set","FlatSet"],"kind":"struct"},"11:1882:2316":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"17:9137:15648":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:22388:2524":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:43329:7977":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:12043:18574":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:9701:15683":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:534:2243":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"1:10982:20871":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"16:5384:15491":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"5:7434:27693":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:10685:15828":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:7758:2276":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"16:6352:15525":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:7920:134":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"17:14145:19882":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:12032:20454":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:11261:15911":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"16:5322:15473":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:4361:8098":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"1:4497:2569":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:1779:2352":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:44574:7914":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"6:4913:12644":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:45657:2752":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:43701:8018":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"16:6792:15545":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:3276:2491":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"16:6844:15547":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:39351:8375":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"6:5049:12658":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:40197:2408":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"1:840:2292":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:40808:2496":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:12790:19097":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:12237:18588":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:46020:2794":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:11048:15902":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:11507:15691":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"16:8294:132":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"23:474:20054":{"crate_id":23,"path":["anstream","auto","AutoStream"],"kind":"struct"},"1:5474:108":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:43404:7967":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"6:1496:10023":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:10367:2293":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"11:759:2295":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"20:3080:2090":{"crate_id":20,"path":["clap_builder","builder","arg_group","ArgGroup"],"kind":"struct"},"17:11358:15926":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"5:2035:2333":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"11:483:148":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:12089:1664":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"20:3617:19974":{"crate_id":20,"path":["clap_builder","builder","styling","Styles"],"kind":"struct"},"1:11082:25817":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"14:215:14501":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:9505:133":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"5:7269:29663":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:4770:2547":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"6:4669:12617":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:7555:12826":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"6:6883:13754":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"16:6041:15515":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:11213:8526":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"2:45565:2745":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:42893:27081":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:9445:15678":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"26:21:2092":{"crate_id":26,"path":["colorchoice","ColorChoice"],"kind":"enum"},"2:22:728":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:1737:8398":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"6:4922:12645":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"16:7708:15577":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:11991:18571":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"6:6633:13741":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:2216:2410":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"11:2368:2297":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"16:2339:14569":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:13949:19862":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"20:3510:19977":{"crate_id":20,"path":["clap_builder","builder","value_parser","BoolValueParser"],"kind":"struct"},"22:129:20049":{"crate_id":22,"path":["clap_lex","ParsedArg"],"kind":"struct"},"2:42591:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:22376:2522":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:11342:20430":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:11535:15692":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:13286:19128":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:10818:20761":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"5:6795:8067":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:8318:2566":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:46136:2754":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"5:7299:28237":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:2209:15783":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:30013:2520":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:9972:15722":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"16:3764:14611":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:9136:237":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"16:5982:15512":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"16:5419:15493":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"5:0:310":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:400:15659":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"20:3472:19986":{"crate_id":20,"path":["clap_builder","builder","value_parser","RangedI64ValueParser"],"kind":"struct"},"5:895:2292":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"16:7582:15571":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:45689:2782":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:12208:18586":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:4282:8089":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"5:676:253":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"16:6376:15527":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"11:2085:2309":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"16:2504:14576":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:30356:26822":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"6:5808:13311":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"5:2223:29710":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:42581:26869":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:10573:2490":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"2:11847:8520":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"20:4156:31938":{"crate_id":20,"path":["clap_builder","util","any_value","AnyValueId"],"kind":"struct"},"2:39989:8125":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:40786:8294":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"16:7568:15570":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"14:160:14492":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"16:6893:31060":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"5:7259:2321":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:11193:2648":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"16:7544:15568":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"11:1092:14481":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:9106:20427":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:46726:2749":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:2178:15758":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:10668:7991":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:913:2299":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"16:2321:14568":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:10962:15831":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:12701:158":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:10547:15816":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"5:3238:2316":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:13554:19838":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"18:727:19943":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:12876:19101":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"16:7792:15582":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:14221:19886":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"6:6059:30064":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:2366:204":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:1579:2314":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:13274:15699":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"6:4683:2527":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:9823:15708":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"16:4344:15047":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:0:1944":{"crate_id":17,"path":["object"],"kind":"module"},"6:6002:13325":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"5:3217:29661":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"6:4997:12654":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:12373:19074":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:43378:7969":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:9233:25680":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:12906:2863":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:2497:2440":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"16:2933:14594":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:8146:2434":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"1:10978:2372":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"6:5020:12656":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:3248:139":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"20:3340:19967":{"crate_id":20,"path":["clap_builder","builder","str","Str"],"kind":"struct"},"1:1842:2369":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:9223:25678":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"20:1660:20020":{"crate_id":20,"path":["clap_builder","error","format","RichFormatter"],"kind":"struct"},"20:3443:19984":{"crate_id":20,"path":["clap_builder","builder","value_parser","PathBufValueParser"],"kind":"struct"},"1:8250:2469":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:4287:8090":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"16:5588:15495":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:10285:2652":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"17:11098:15889":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"5:3171:2292":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:12079:791":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"1:3865:2518":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:8244:2468":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"16:7391:15559":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"16:2359:14570":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"16:5612:15496":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:12943:146":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"6:7579:12830":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:10561:15782":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"6:4621:12613":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"11:992:2307":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"17:11235:15920":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"17:12830:19099":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"6:7526:12822":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:10097:15718":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:10420:15811":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:10585:7989":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:3234:2488":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"6:4394:12589":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:42846:8156":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"5:2141:29655":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"18:491:31866":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:12267:18590":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"16:7041:31126":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"6:507:9132":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:2934:8369":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"5:35:2348":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"6:4555:12608":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:30228:2328":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:43986:8036":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:8329:2558":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"6:4333:12584":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:5073:12661":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:7670:2263":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:10800:25685":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"17:14134:19881":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:12086:18577":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:3698:2513":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:11886:8519":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"6:4759:12626":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"20:3305:19972":{"crate_id":20,"path":["clap_builder","builder","resettable","Resettable"],"kind":"enum"},"6:4934:12646":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:40338:8319":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:2170:8387":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"2:21125:2734":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"2:46188:2766":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"11:1127:14482":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"6:501:9131":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:1895:2383":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:22802:193":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"16:6346:15524":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"1:11405:20760":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"5:1011:29743":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:12110:7999":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:7194:2495":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:9222:27070":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:3518:2297":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"17:14536:19907":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:3233:8374":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:4597:2587":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:22249:27701":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:6385:178":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:8227:2466":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"1:8996:2670":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:22075:26432":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"5:1257:2307":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:13868:19855":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"16:3830:14629":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:41526:2510":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"20:1701:132":{"crate_id":20,"path":["clap_builder","error","Error"],"kind":"struct"},"20:61:2098":{"crate_id":20,"path":["clap_builder","derive","Subcommand"],"kind":"trait"},"1:558:2245":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:14269:19887":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"6:1664:10040":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"16:7651:15574":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:41649:2292":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"1:8237:2467":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"18:681:19940":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:45790:2747":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:11348:2653":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:11647:14525":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:11306:15699":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"20:3758:20008":{"crate_id":20,"path":["clap_builder","error","ErrorInner"],"kind":"struct"},"2:43569:7988":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:43805:2465":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:39297:219":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:2918:8366":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:5156:206":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:2498:8147":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"6:5782:13309":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"20:3540:19981":{"crate_id":20,"path":["clap_builder","builder","value_parser","MapValueParser"],"kind":"struct"},"20:4003:32099":{"crate_id":20,"path":["clap_builder","parser","parser","ParseResult"],"kind":"enum"},"1:8513:2628":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"23:101:20068":{"crate_id":23,"path":["anstream","stream","RawStream"],"kind":"trait"},"17:10139:15748":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"17:9488:31822":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:7938:8301":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"6:1576:10033":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"6:4954:12649":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"21:282:20003":{"crate_id":21,"path":["anstyle","color","RgbColor"],"kind":"struct"},"2:21847:27729":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"5:7403:104":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"16:2284:14539":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:2360:197":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:22289:26787":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:8605:2278":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:4167:8105":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:9051:15643":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"16:2864:14591":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"9:52:14377":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"24:0:2076":{"crate_id":24,"path":["anstyle_parse"],"kind":"module"},"5:3178:2314":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"11:2473:30649":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"20:3818:20027":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","SubCommand"],"kind":"struct"},"1:853:2293":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:12071:1470":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"27:0:2079":{"crate_id":27,"path":["anstyle_query"],"kind":"module"},"23:376:20078":{"crate_id":23,"path":["anstream","adapter","strip","Utf8Parser"],"kind":"struct"},"17:11137:15886":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:39193:216":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"11:1850:2297":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:48060:7904":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:13202:19123":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"16:2450:14574":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"14:7:14492":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:41944:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"9:237:2627":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:41360:2508":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:3072:2346":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:1548:2451":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"17:14001:19867":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"16:6279:15521":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:40835:8300":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"5:2049:2334":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"2:12065:2633":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:42621:26777":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:2883:8360":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:7953:2480":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"16:6485:15534":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:21513:2440":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:40074:8124":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:22237:2521":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:46644:2801":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"11:1876:2315":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:22272:26829":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:14478:19903":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"6:4309:12582":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:10278:15759":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:3236:2489":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:42646:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:1671:1151":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:11511:2517":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"22:0:2074":{"crate_id":22,"path":["clap_lex"],"kind":"module"},"1:4195:2562":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:10850:123":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:44183:8025":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:1986:199":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:11337:15924":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:41905:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"6:6865:13753":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:13851:19854":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:10135:24098":{"crate_id":1,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"2:32164:8336":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:10520:15815":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:8263:2515":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:13816:19851":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"5:3142:97":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"6:5079:12662":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:44274:8509":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:8794:15665":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:22670:189":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"16:4889:15232":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:40140:2393":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:2150:15798":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:11573:15694":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:9512:2432":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"17:14033:19870":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:10494:15787":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:8686:15662":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:41777:2292":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:44298:8507":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:8978:15671":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:11191:15697":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:8973:2689":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:22362:2523":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"6:6759:13746":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:21137:27550":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"1:8599:2632":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:7715:2248":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"17:12888:19102":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"6:6735:13744":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:7590:12831":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"16:5830:15507":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"9:450:14358":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:21272:8387":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"2:42355:7942":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:40329:8318":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:12934:19104":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"16:2380:14571":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"16:5403:15492":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"6:6037:13329":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:2568:2479":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:6571:2676":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"5:2690:28281":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"20:3244:32242":{"crate_id":20,"path":["clap_builder","builder","ext","BoxedEntry"],"kind":"struct"},"5:6098:2451":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"20:3953:20026":{"crate_id":20,"path":["clap_builder","parser","matches","matched_arg","MatchedArg"],"kind":"struct"},"24:89:20073":{"crate_id":24,"path":["anstyle_parse","CharAccumulator"],"kind":"trait"},"11:427:30664":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:2930:8368":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:43551:2469":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:11153:7982":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:13174:19121":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:3315:2487":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:40297:8315":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:5459:2641":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"24:113:20080":{"crate_id":24,"path":["anstyle_parse","params","Params"],"kind":"struct"},"2:45860:2765":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:12091:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:10570:2488":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"17:9852:15709":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"20:3678:20019":{"crate_id":20,"path":["clap_builder","error","context","ContextValue"],"kind":"enum"},"17:582:15661":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:11719:15700":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"20:49:2095":{"crate_id":20,"path":["clap_builder","derive","CommandFactory"],"kind":"trait"},"6:7478:14284":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"6:6588:9983":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:10383:15756":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"16:7015:15555":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"13:110:30715":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:7011:21441":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:9487:2385":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"11:2074:2308":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"6:4346:12585":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"16:7474:15562":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:42609:113":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"17:11389:15686":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"6:5814:13312":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:10949:15830":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:10637:15822":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"1:11088:25814":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:12473:15875":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:8879:2649":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"16:4921:15240":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"5:7587:8064":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"20:3709:2482":{"crate_id":20,"path":["clap_builder","error","kind","ErrorKind"],"kind":"enum"},"2:44286:8514":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"20:3913:32081":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrenceValuesRef"],"kind":"struct"},"18:736:19936":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"6:495:9130":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:9547:7940":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:10474:7981":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"16:6261:15520":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:12172:18583":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:8440:2626":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"10:36:30636":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"20:2776:2293":{"crate_id":20,"path":["clap_builder","util","flat_map","IterMut"],"kind":"struct"},"17:14100:19877":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"11:796:2298":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"2:11227:7975":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"2:43755:8020":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"5:276:2138":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:13101:19116":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:11071:20006":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:44481:230":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"6:1596:10035":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:11639:15697":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:7669:2440":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:14068:19873":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:1924:2384":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"20:3449:19979":{"crate_id":20,"path":["clap_builder","builder","value_parser","EnumValueParser"],"kind":"struct"},"2:7479:159":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"5:2959:7918":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"17:11815:15933":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"2:39209:213":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"17:14296:19889":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:2214:133":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:10435:7994":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:2501:2478":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"18:96:19921":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:22637:192":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"2:43527:8009":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"5:1138:29665":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:12125:8000":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:12067:1624":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"17:12810:19098":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:9574:31821":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:3260:8084":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:39131:7928":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"1:932:2303":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:41549:2511":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"6:4441:12594":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"5:1514:213":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:955:2306":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:15:2053":{"crate_id":2,"path":["core","write"],"kind":"macro"},"17:14110:19878":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:5781:2668":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:43935:8033":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:43601:8023":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:2534:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"1:8909:2687":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"20:3211:31955":{"crate_id":20,"path":["clap_builder","builder","command","TermWidth"],"kind":"struct"},"16:8205:15595":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:2942:8371":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"16:5363:15490":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:10840:134":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"22:158:20050":{"crate_id":22,"path":["clap_lex","ShortFlags"],"kind":"struct"},"17:13148:19119":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:6820:13749":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:9172:15673":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:10626:7992":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:47770:2768":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"20:65:2099":{"crate_id":20,"path":["clap_builder","derive","ValueEnum"],"kind":"trait"},"6:6009:13326":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:40124:27693":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:7517:125":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"12:0:1940":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:13826:19852":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:30832:198":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"1:1840:2094":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"17:9867:15710":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"6:1546:10030":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:0:528":{"crate_id":2,"path":["core"],"kind":"module"},"2:22703:190":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"24:192:14397":{"crate_id":24,"path":["anstyle_parse","state","definitions","Action"],"kind":"enum"},"2:43347:7980":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"16:7862:15584":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:1573:2313":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"5:1473:2296":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:11886:18566":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:49866:2743":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"6:4474:12598":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:10534:15786":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:44078:8039":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"6:6622:13740":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:6580:9178":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"6:4734:12623":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"16:6243:15519":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"20:3892:32088":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrenceValues"],"kind":"struct"},"2:9754:151":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"6:123:8810":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"17:13914:19860":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"20:1655:20017":{"crate_id":20,"path":["clap_builder","error","format","KindFormatter"],"kind":"struct"},"17:10265:15760":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"6:6790:13747":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"20:4103:32043":{"crate_id":20,"path":["clap_builder","mkeymap","KeyType"],"kind":"enum"},"2:7475:138":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"16:5905:15509":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"23:319:20064":{"crate_id":23,"path":["anstream","adapter","strip","StrippedBytes"],"kind":"struct"},"1:6839:2721":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:21396:2729":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:47968:7900":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:10009:20915":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"2:43655:7992":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"6:5820:13313":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"5:3330:2298":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"14:40:18568":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:7438:8303":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:4826:2549":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"14:31:14492":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:41726:208":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"1:5653:223":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:46258:2822":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:10776:2598":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:47873:7893":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"18:609:31880":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:11111:15888":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:897:2297":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"6:6741:13745":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:9976:27447":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"2:41866:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:11226:15919":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"11:1635:30655":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:2257:100":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:1557:2292":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:3429:2451":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"17:10714:15871":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"6:1639:10038":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"6:6686:10153":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:4:1075":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"20:3290:19970":{"crate_id":20,"path":["clap_builder","builder","range","ValueRange"],"kind":"struct"},"20:2975:32014":{"crate_id":20,"path":["clap_builder","builder","app_settings","AppSettings"],"kind":"enum"},"6:5915:13320":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:40429:8325":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"13:0:1934":{"crate_id":13,"path":["std_detect"],"kind":"module"},"6:527:9133":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"16:5712:15502":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"23:288:20062":{"crate_id":23,"path":["anstream","adapter","strip","StripStr"],"kind":"struct"},"6:119:8809":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"17:10126:15747":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"2:21089:2732":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"20:3533:19982":{"crate_id":20,"path":["clap_builder","builder","value_parser","NonEmptyStringValueParser"],"kind":"struct"},"23:343:20060":{"crate_id":23,"path":["anstream","adapter","strip","StripBytes"],"kind":"struct"},"16:7768:15580":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"20:3569:19991":{"crate_id":20,"path":["clap_builder","builder","value_parser","UnknownArgumentValueParser"],"kind":"struct"},"5:878:2319":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:8194:2435":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"20:3239:32044":{"crate_id":20,"path":["clap_builder","builder","ext","BoxedExtension"],"kind":"struct"},"1:6098:25842":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"6:4461:12596":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:11488:20385":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:7254:2660":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"20:57:2094":{"crate_id":20,"path":["clap_builder","derive","Args"],"kind":"trait"},"2:4639:8114":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:9071:15557":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:43850:8014":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"16:3065:14598":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:13693:19833":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"9:507:14361":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"6:7561:12827":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:6277:2681":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:44129:8041":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:9207:15674":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"16:5673:15500":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"23:358:20061":{"crate_id":23,"path":["anstream","adapter","strip","StripBytesIter"],"kind":"struct"},"2:5508:2451":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"2:3040:2134":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:4768:2544":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"26:41:20089":{"crate_id":26,"path":["colorchoice","AtomicChoice"],"kind":"struct"},"1:0:1494":{"crate_id":1,"path":["std"],"kind":"module"},"20:4048:20028":{"crate_id":20,"path":["clap_builder","parser","parser","Identifier"],"kind":"enum"},"24:26:20081":{"crate_id":24,"path":["anstyle_parse","params","ParamsIter"],"kind":"struct"},"18:707:8001":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:10576:2486":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"5:7501:8045":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"18:644:31848":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:10008:26264":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"28:32:20103":{"crate_id":28,"path":["strsim","StringWrapper"],"kind":"struct"},"21:113:32308":{"crate_id":21,"path":["anstyle","effect","EffectsDisplay"],"kind":"struct"},"1:9146:155":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"1:3532:2438":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"5:5373:7961":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:8490:2627":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:8607:2614":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:11201:15883":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:12496:19078":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:3565:15855":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:39253:218":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:6174:2863":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:11586:15695":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"5:2960:29633":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:43459:7986":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"11:2479:30653":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:5626:8307":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"6:4960:12650":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:4892:12642":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"22:99:20047":{"crate_id":22,"path":["clap_lex","RawArgs"],"kind":"struct"},"5:1288:2308":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:11381:15927":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:39952:8087":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:8367:2599":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"18:0:1945":{"crate_id":18,"path":["memchr"],"kind":"module"},"5:1482:2299":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:12465:15877":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:10628:15821":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"2:41589:196":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"6:5897:13318":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:4425:12592":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:10991:2642":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"16:6171:209":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"16:6268:31132":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:3022:2329":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:11024:2649":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"1:12080:792":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:2546:260":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"17:12062:18575":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"16:6944:30899":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:11062:15914":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:11351:15925":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:4943:2595":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:20951:27938":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:10588:15818":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"16:8181:15593":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"11:822:2302":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:13685:19845":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"21:127:32309":{"crate_id":21,"path":["anstyle","reset","ResetDisplay"],"kind":"struct"},"1:5808:2669":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"5:778:98":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:4032:27953":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:9896:15712":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"1:9141:238":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:46850:2761":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"6:4655:12616":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:13778:15727":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:8848:15667":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:9564:15680":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:12176:8027":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:13546:19837":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"6:5833:13314":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"6:62:8755":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"17:10440:15813":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"1:7945:23767":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:12084:1605":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"1:10468:2646":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"6:4468:12597":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:43086:8499":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"17:10366:15770":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:42854:27077":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:44051:8038":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:40367:8308":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:3763:2516":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:4187:2561":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"11:772:2296":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"2:6973:27715":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:11687:15698":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:12024:18573":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:40003:8127":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"6:5851:13316":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"22:32:2469":{"crate_id":22,"path":["clap_lex","ext","Split"],"kind":"struct"},"2:4067:7923":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:10410:15777":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"5:4846:220":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:43815:8017":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:12074:18576":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"20:3491:19987":{"crate_id":20,"path":["clap_builder","builder","value_parser","RangedU64ValueParser"],"kind":"struct"},"17:11742:15701":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:4849:2543":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:11269:155":{"crate_id":1,"path":["std","sys","unix","time","Instant"],"kind":"struct"},"2:43338:7976":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"11:1869:2314":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:9051:24114":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:42637:72":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:8257:2465":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"17:13676:19844":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"5:629:28145":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"2:9543:7943":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:39092:8083":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:505:2238":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"6:6726:13743":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:4823:12634":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:6672:236":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:11934:18568":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:10640:7990":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"20:3576:19975":{"crate_id":20,"path":["clap_builder","builder","value_parser","_AutoValueParser"],"kind":"struct"},"2:47864:7892":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:40569:2467":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"5:7387:2291":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:3232:15832":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:5443:2640":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"1:9021:2242":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"17:12484:15876":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"25:89:2097":{"crate_id":25,"path":["utf8parse","Parser"],"kind":"struct"},"1:7053:21396":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:13451:19835":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:9650:15682":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:14316:19891":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:8895:2690":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:11850:23643":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"16:4745:15208":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"6:4690:12618":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"16:2596:14580":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"16:8050:15586":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:47522:2790":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"5:7249:2297":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:14514:19905":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"6:580:9141":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:41377:2509":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:6027:8329":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:7162:25596":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:3273:28128":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"5:5369:7960":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"16:6499:15535":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:42686:74":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:42901:27059":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:8851:2647":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"11:860:2305":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"5:3720:2333":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:12723:28000":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"20:4162:8317":{"crate_id":20,"path":["clap_builder","util","flat_map","FlatMap"],"kind":"struct"},"2:44306:8526":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:41343:2507":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:2837:109":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"6:4548:12607":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:12136:18581":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:4259:2564":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:40013:8128":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"11:1541:14484":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"20:744:32270":{"crate_id":20,"path":["clap_builder","builder","ext","Extension"],"kind":"trait"},"20:3383:2088":{"crate_id":20,"path":["clap_builder","builder","value_hint","ValueHint"],"kind":"enum"},"2:43773:8021":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"14:165:14493":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:47945:7899":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:9535:124":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"17:261:31838":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"6:4769:12627":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:44290:8512":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:43868:8015":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:12088:843":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"6:4433:12593":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:13055:19113":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:5596:2643":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:41793:2294":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:7570:2136":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:3948:2451":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"1:8389:2546":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:8594:15645":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:5999:2681":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:13632:19842":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"16:8281:15597":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:2844:2716":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:12959:19106":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"6:475:9127":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"16:6600:15541":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:14126:19880":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"20:4142:20011":{"crate_id":20,"path":["clap_builder","output","fmt","Colorizer"],"kind":"struct"},"2:47412:2756":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"11:841:2304":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:1781:2353":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"1:6638:2680":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"17:11407:15687":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:9010:20422":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:47662:2796":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:40217:7967":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:2879:2719":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:43825:8006":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"16:6156:15516":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"21:360:20006":{"crate_id":21,"path":["anstyle","reset","Reset"],"kind":"struct"},"1:1067:2309":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"5:3800:2298":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"6:1703:2555":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"23:480:32368":{"crate_id":23,"path":["anstream","auto","StreamInner"],"kind":"enum"},"2:7024:8292":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"1:12090:1211":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:12077:689":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"1:949:2305":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:11810:8518":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:42664:132":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"5:7320:2294":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"5:7476:7955":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"16:5017:15264":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:40107:103":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"6:5878:13274":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"16:6915:15550":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:8572:2630":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"20:3925:32040":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawOccurrences"],"kind":"struct"},"17:10698:15850":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"6:6613:13739":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:39372:8080":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"18:671:19939":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"20:3964:20037":{"crate_id":20,"path":["clap_builder","parser","matches","value_source","ValueSource"],"kind":"enum"},"6:6811:13748":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:10023:15683":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:9921:15738":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"6:7265:9088":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:2219:2411":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"17:9752:15684":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:13487:19836":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"16:7660:15575":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"16:6696:14511":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:13024:19111":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:11665:8007":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:13611:19841":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:41827:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:14156:19883":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"16:5866:15508":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:22213:26875":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"6:596:9143":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"6:7624:14313":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"23:0:2075":{"crate_id":23,"path":["anstream"],"kind":"module"},"20:4088:32067":{"crate_id":20,"path":["clap_builder","mkeymap","MKeyMap"],"kind":"struct"},"2:2797:2253":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:12154:18582":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"11:389:30642":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:10359:108":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"1:10193:20983":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"2:47724:2817":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"6:4968:12651":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:6604:9011":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:21390:2727":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:14448:19900":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:5420:2451":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"2:41406:26868":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"20:3792:20038":{"crate_id":20,"path":["clap_builder","parser","error","MatchesError"],"kind":"enum"},"1:2394:2426":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:2409:1952":{"crate_id":1,"path":["std","io"],"kind":"module"},"6:6835:13750":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:41640:8378":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"5:1672:29743":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"5:1523:2332":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:40268:8306":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"5:6584:2294":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:5528:2642":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"11:2238:2307":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"5:2970:29634":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:5660:2681":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:44325:126":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:32063:27410":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"2:21328:2440":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"20:3364:19973":{"crate_id":20,"path":["clap_builder","builder","styled_str","StyledStr"],"kind":"struct"},"11:344:30659":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"5:7220:2330":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:40347:8328":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:2782:2130":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"1:10795:20958":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"5:2966:29632":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:12775:8151":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"16:2406:14572":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:2384:2421":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:2835:7924":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"17:13215:19124":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"20:3591:26777":{"crate_id":20,"path":["clap_builder","builder","debug_asserts","Flag"],"kind":"enum"},"16:7677:213":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:40415:8324":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"16:7782:15581":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:11872:15935":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"17:9959:15723":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"6:1514:10026":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"9:357:14374":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:8041:2482":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:14420:19898":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:2172:8388":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"1:8274:2506":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"3:0:472":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"28:0:2080":{"crate_id":28,"path":["strsim"],"kind":"module"},"2:21489:2440":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"6:6720:13742":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:5110:24101":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:21410:2730":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:21520:2736":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:9998:15720":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:12598:19084":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:14308:19890":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:10185:2440":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"6:7601:12832":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"17:11124:15887":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"16:7360:31077":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"16:5743:15504":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"10:0:1938":{"crate_id":10,"path":["adler"],"kind":"module"},"20:4066:32051":{"crate_id":20,"path":["clap_builder","parser","validator","Conflicts"],"kind":"struct"},"1:2929:132":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:46568:2789":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:11023:15836":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"11:2303:14486":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"2:20953:27936":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:13758:19832":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:11635:8469":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:45589:2781":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:9165:2444":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"5:6814:8068":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:45842:2759":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"16:8239:15596":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"20:3934:32046":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawOccurrenceValues"],"kind":"struct"},"1:7880:2431":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"6:4385:12588":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:22868:183":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"17:12765:19095":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"20:3099:19968":{"crate_id":20,"path":["clap_builder","builder","arg_predicate","ArgPredicate"],"kind":"enum"},"17:10012:15682":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"16:6467:15533":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"5:1492:2300":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"6:588:9142":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:13802:19850":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"5:7328:2294":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:12331:115":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:12078:794":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:42061:85":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:14056:19872":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"16:5727:15503":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:3409:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"17:9328:2468":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"21:0:2073":{"crate_id":21,"path":["anstyle"],"kind":"module"},"11:2494:2290":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:9746:147":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"6:6171:13361":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:2254:99":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"6:7573:12829":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"16:5963:15511":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:40793:2671":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"20:4216:32085":{"crate_id":20,"path":["clap_builder","util","graph","ChildGraph"],"kind":"struct"},"20:3781:2268":{"crate_id":20,"path":["clap_builder","error","Backtrace"],"kind":"struct"},"2:2537:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"17:13228:19125":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"16:6687:15542":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"11:423:30663":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:47930:7898":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"11:1010:2308":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:46614:2795":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:12724:19092":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"16:3655:14603":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:14355:19895":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:7931:2323":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"5:1776:2298":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"2:44278:8511":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:9933:15732":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"16:7054:31115":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:42022:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"20:3115:19997":{"crate_id":20,"path":["clap_builder","builder","arg_settings","ArgFlags"],"kind":"struct"},"6:5892:13317":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"5:4002:2297":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:41657:2293":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:9030:81":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:43357:7978":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:3288:7926":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:2859:8355":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:46804:2755":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"16:6569:15539":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:13966:19863":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"20:0:1816":{"crate_id":20,"path":["clap_builder"],"kind":"module"},"2:47808:2802":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:12554:19082":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"15:327:14521":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:45741:2793":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:12970:19107":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"5:1118:29626":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"6:5056:12659":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"5:5325:29743":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:21522:2730":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"5:3735:2334":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:5568:8317":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:3441:15837":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"11:817:2299":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:4462:8101":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:10214:15762":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:4179:2560":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:46166:2760":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:5063:12660":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:14378:19896":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"16:7513:15565":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:646:2272":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:5599:2645":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"16:6960:15552":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"11:829:2303":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:42219:2666":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:21743:2741":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"2:43101:27362":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"9:330:14414":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"5:4363:29746":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:10392:2469":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:46234:2821":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:21181:2739":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"16:7006:15554":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"11:1072:30662":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"16:5088:15287":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:3313:2486":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:926:2302":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"6:6051:13331":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:2849:2718":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"11:2260:2308":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"2:9541:7942":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"6:7614:14312":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"20:3249:199":{"crate_id":20,"path":["clap_builder","builder","os_str","OsStr"],"kind":"struct"},"1:8833:2646":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"17:14282:19888":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:7961:2333":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"16:4053:14780":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:7694:2251":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:21311:2731":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"1:12073:1589":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:42883:2627":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:2865:8358":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:44282:8510":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:9910:8482":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"2:47270:2784":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:40093:8120":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"5:1273:2309":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:3457:2437":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"16:7090:31110":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:13259:19127":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:13890:19857":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:12750:19094":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"6:6030:13328":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:43509:8013":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"6:533:9134":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"20:3840:2296":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Values"],"kind":"struct"},"1:7764:2311":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"1:2582:25845":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:3201:23758":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"11:2058:2307":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:22326:26783":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:11971:18570":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"11:357:30645":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"16:4557:15140":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:11151:15917":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"25:0:2077":{"crate_id":25,"path":["utf8parse"],"kind":"module"},"2:21225:2740":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"2:40237:2344":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:40579:8326":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"20:1364:19993":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParserFactory"],"kind":"trait"},"2:32056:15596":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"2:42362:7943":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:44489:210":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"16:5760:15505":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"11:785:2297":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"20:2959:31988":{"crate_id":20,"path":["clap_builder","builder","app_settings","AppFlags"],"kind":"struct"},"1:1585:2315":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"16:4949:15244":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:5423:2639":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"20:3131:19998":{"crate_id":20,"path":["clap_builder","builder","arg_settings","ArgSettings"],"kind":"enum"},"17:11448:15688":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:504:15660":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:2947:8372":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:6216:20056":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"17:10316:15765":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:41734:229":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"20:3523:19978":{"crate_id":20,"path":["clap_builder","builder","value_parser","BoolishValueParser"],"kind":"struct"},"2:47893:7895":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"11:2487:30650":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:45611:2786":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"5:782:2317":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"16:3797:14620":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:12688:142":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"17:8765:15664":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"18:564:19951":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:12087:1604":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:43972:8035":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"11:1562:14485":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"6:4494:12601":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"5:7512:8046":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:2927:229":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"2:2628:132":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"16:6425:15531":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:10133:21458":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"5:2170:28210":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"18:574:31848":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:11417:25600":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:41320:164":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"2:41717:8455":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:3043:2135":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"6:6849:13751":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"16:6742:14510":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"5:5788:254":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"16:4585:15144":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:41568:2512":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:7769:2312":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"20:3863:20034":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawValues"],"kind":"struct"},"5:7237:2320":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:23000:187":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"16:8154:15591":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"11:2461:30648":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:14163:19884":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:14076:19874":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:1764:654":{"crate_id":1,"path":["std","env"],"kind":"module"},"20:3273:19969":{"crate_id":20,"path":["clap_builder","builder","possible_value","PossibleValue"],"kind":"struct"},"2:40380:8321":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"6:4900:12643":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"6:4451:12595":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"16:6968:15553":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:12196:18585":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"6:6703:10151":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:30268:8348":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:40154:2395":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"1:1931:700":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"2:9789:8153":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:8206:2439":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:21957:2440":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:10980:15682":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"6:4745:12624":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:1632:10037":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"20:3268:2242":{"crate_id":20,"path":["clap_builder","builder","os_str","inner","Inner"],"kind":"struct"},"16:6415:15530":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"20:3221:31921":{"crate_id":20,"path":["clap_builder","builder","command","MaxTermWidth"],"kind":"struct"},"2:47064:2750":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:10112:15746":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:44524:2861":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"5:1411:2292":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:11490:15690":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"6:5905:13319":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:22967:182":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:9131:179":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:9102:15647":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:7555:15661":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:44150:8043":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"5:7571:2298":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"1:943:2304":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"16:3915:14666":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:2382:2420":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"16:8097:15588":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:1075:15725":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"6:5935:13321":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:47998:7902":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:14346:19894":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"6:654:9190":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"5:3183:29649":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:14083:19875":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:10197:15776":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:22355:27902":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:13135:19118":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:21388:2440":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:40048:8121":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:9539:7934":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"17:10507:15785":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"16:5049:15272":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"24:132:2627":{"crate_id":24,"path":["anstyle_parse","state","definitions","State"],"kind":"enum"},"17:11074:15915":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"6:1570:10032":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:40067:8123":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"20:3170:108":{"crate_id":20,"path":["clap_builder","builder","command","Command"],"kind":"struct"},"20:4209:2638":{"crate_id":20,"path":["clap_builder","util","graph","Child"],"kind":"struct"},"17:11173:15918":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:12082:789":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"16:3461:14601":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:12064:398":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:43834:8005":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"17:8895:15668":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:39973:26926":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:14499:19904":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:14522:19906":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"6:5844:13315":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:2324:203":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:45635:2746":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:10646:15868":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:3523:20300":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"16:6929:15551":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:14469:19902":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:4847:849":{"crate_id":2,"path":["core","iter"],"kind":"module"},"1:1044:2307":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:11473:15689":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:12911:19103":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:4663:20971":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:2908:8363":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:9945:15728":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"20:34:2097":{"crate_id":20,"path":["clap_builder","derive","Parser"],"kind":"trait"},"2:12998:2322":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:1590:2316":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"5:5942:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:7625:25850":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:10195:242":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"25:53:2627":{"crate_id":25,"path":["utf8parse","types","State"],"kind":"enum"},"16:7462:15561":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:2669:2388":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"1:6924:25852":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"16:7597:30927":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:11845:15934":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"1:4016:2532":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"16:8115:15589":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:4519:2570":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:2875:2717":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:43278:27717":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:7792:2372":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:43521:8010":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"16:4862:15229":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:44163:8024":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:2540:156":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"17:13897:19858":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"5:2461:28284":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:46490:2783":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:45897:2820":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"6:7310:14125":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:8887:2292":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:40246:2466":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"5:685:114":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"5:3594:2293":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:2991:7927":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"16:2810:14589":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:589:2264":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"23:302:20063":{"crate_id":23,"path":["anstream","adapter","strip","StripStrIter"],"kind":"struct"},"17:10903:15835":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:41674:2612":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"17:12293:18592":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:2223:2412":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"14:187:14500":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"6:4320:12583":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:39545:22983":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"6:4943:12647":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:39178:8373":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:46212:2815":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:3125:2498":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"2:21139:8387":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"16:7884:15585":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:42180:94":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:47846:2823":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:10805:2429":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"6:4815:12633":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:2854:8356":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:32052:20186":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"17:14118:19879":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"16:2526:14577":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:13188:19122":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:9531:31807":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:364:2262":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"5:822:2318":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"20:2935:2087":{"crate_id":20,"path":["clap_builder","builder","action","ArgAction"],"kind":"enum"},"6:563:9138":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"24:255:2097":{"crate_id":24,"path":["anstyle_parse","Parser"],"kind":"struct"},"16:7492:15563":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:5336:124":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"11:1862:2313":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"6:6151:12498":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:46880:2767":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:43619:8022":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"16:4641:15152":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"16:5435:31063":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:4008:2531":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"16:5798:15506":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"21:182:20000":{"crate_id":21,"path":["anstyle","color","Color"],"kind":"enum"},"2:42100:92":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"6:1697:10044":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:13922:19861":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:40390:8322":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:9607:15681":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:10661:15869":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:3274:2490":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"5:1102:29664":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"5:4393:2451":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:25849:269":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:2329:129":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"6:4511:12603":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"16:3049:14597":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"9:177:14463":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:14460:19901":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:9455:31827":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"16:5696:15501":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:13071:19114":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:12945:19105":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"16:6386:15528":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"6:4523:12604":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"16:2428:14573":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"4:0:1935":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"18:652:31848":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:6909:8312":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:9063:20403":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"11:0:1939":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"2:39961:8126":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:9537:7935":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:32077:8424":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"7:0:1654":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:39275:217":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"11:2165:14476":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"1:5079:24101":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:12184:18584":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:2785:248":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:10478:15809":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"6:4296:12581":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"16:6083:14538":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:1922:7930":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"11:324:30657":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"20:1172:19990":{"crate_id":20,"path":["clap_builder","builder","value_parser","TypedValueParser"],"kind":"trait"},"1:9015:110":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:11628:7910":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:4411:2559":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"18:531:19949":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:1760:8397":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"9:426:14360":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:12225:18587":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:2604:2471":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:3033:2132":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:11162:15882":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"16:2618:14581":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"6:7293:14124":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:6624:2679":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"2:45545:2780":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"6:4561:12609":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:2543:137":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"16:5939:15510":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:6222:20429":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:40827:8298":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"20:3873:32086":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","GroupedValues"],"kind":"struct"},"1:10830:2433":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"11:1846:2294":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:6568:2675":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:12280:18591":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"7:31:14329":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:2896:8365":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:1076:2310":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"5:6663:29743":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"6:4853:12638":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"20:3629:20018":{"crate_id":20,"path":["clap_builder","error","context","ContextKind"],"kind":"enum"},"17:14090:19876":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"5:5994:8729":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"18:548:147":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:12111:18579":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:13085:19115":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:12685:19089":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"23:423:32362":{"crate_id":23,"path":["anstream","adapter","wincon","WinconCapture"],"kind":"struct"},"1:483:25862":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"21:347:20044":{"crate_id":21,"path":["anstyle","effect","EffectIndexIter"],"kind":"struct"},"1:3958:2529":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:41490:27686":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:9390:133":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"6:1674:10041":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:12119:8001":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:1561:2294":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:4136:8104":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:41707:2613":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:8903:2294":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"6:4573:12610":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:2550:259":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"17:11215:15885":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1:4056:2534":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:6808:8304":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:8036:20437":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"6:4847:12637":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"16:2744:14586":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:4351:8097":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:3514:2385":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"1:9184:2715":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:10603:15819":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"16:0:1943":{"crate_id":16,"path":["gimli"],"kind":"module"},"6:4611:12612":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"5:6824:8069":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"2:45944:2724":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:2938:8370":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:11617:15696":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"20:3785:20025":{"crate_id":20,"path":["clap_builder","parser","arg_matcher","ArgMatcher"],"kind":"struct"},"11:731:2301":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"20:1679:22882":{"crate_id":20,"path":["clap_builder","error","format","Escape"],"kind":"struct"},"2:21494:2726":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"2:39319:2284":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"17:12737:19093":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:48021:7903":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"17:9070:15492":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"16:5995:15513":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:14335:19893":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:13244:19126":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"5:7463:2391":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:884:2296":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:45879:2814":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"6:1537:10029":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"16:2907:14593":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"16:6818:15546":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:40187:2409":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"18:538:19950":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"20:3883:32087":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Occurrences"],"kind":"struct"},"2:39946:2266":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:9035:88":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:40399:8323":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:46387:26866":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:3475:2436":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:10878:20750":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:10512:7995":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:12130:7998":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"5:3204:2315":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:11423:21088":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:10227:15761":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:21835:2722":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"6:4978:12652":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:2366:2415":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"17:9711:31809":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"6:6092:13333":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:13739:19848":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:4066:2535":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"6:1650:10039":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:3760:2517":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:44545:173":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:46410:26823":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:40358:8320":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"24:96:20075":{"crate_id":24,"path":["anstyle_parse","VtUtf8Receiver"],"kind":"struct"},"17:11281:15912":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"22:5:2528":{"crate_id":22,"path":["clap_lex","ext","OsStrExt"],"kind":"trait"},"1:8839:201":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"17:13973:19864":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:8422:2608":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:13723:19847":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"16:7534:15567":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"5:6511:29743":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"23:63:20075":{"crate_id":23,"path":["anstream","adapter","strip","VtUtf8Receiver"],"kind":"struct"},"17:2012:15764":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"16:2305:14567":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"6:4786:12629":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:3994:2530":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"16:4719:15206":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"6:4799:12631":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:42341:7934":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:23447:239":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:9521:15679":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:4078:2538":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:44532:2862":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:11788:15932":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"6:4643:12615":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"11:1525:14483":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"11:2467:26960":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:10575:15817":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"11:2317:2292":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"6:5752:13245":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"6:6856:13752":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"18:515:19948":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:8345:2568":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:40025:8015":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"16:5816:30917":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:11651:8471":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"17:14434:19899":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"6:6640:2599":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:10916:15833":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"11:1036:2309":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:8928:2685":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"20:3801:2091":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","ArgMatches"],"kind":"struct"},"17:10726:15872":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:42141:87":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"6:4805:12632":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"16:5648:15498":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"3:234:229":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:8269:2514":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:4728:2596":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"14:0:1941":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:10114:2363":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"20:4126:20012":{"crate_id":20,"path":["clap_builder","output","fmt","Stream"],"kind":"enum"},"2:47983:7901":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"16:6361:15526":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"16:6531:15537":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"5:1503:2301":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:40306:8316":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:358:2261":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:10654:7993":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:11661:15646":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:2160:631":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:10771:15849":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:3037:2133":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:8715:7999":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:20906:27726":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"5:4164:2451":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"17:13906:19859":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:12252:18589":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:46090:2748":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"5:5631:8067":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:4208:2563":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:12698:19090":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:39358:8072":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:43367:7979":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"20:3850:20035":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","ValuesRef"],"kind":"struct"},"11:703:2300":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:2924:8367":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"16:2788:14588":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:12015:20700":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:3195:20667":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"5:7420:2392":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:2887:8359":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"14:202:8044":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:20921:27726":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"17:9790:31806":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"5:4985:2451":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:8363:2597":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:40439:8310":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"18:719:19935":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"6:569:9139":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"6:4859:12639":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:5409:2638":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"17:11393:132":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"16:6560:31118":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"6:5864:13273":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:32070:8098":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"16:7736:15579":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"6:1710:10045":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"16:2881:14592":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:4821:27471":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:12452:19077":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"17:14173:19885":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:22310:26826":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:44587:27894":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"2:12750:207":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"5:7283:2294":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:47600:2762":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"6:6043:13330":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"5:1426:2293":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:7442:8302":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:30860:8143":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:6211:27904":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:11375:20401":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:4435:2252":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:8530:2629":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"1:12072:1502":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"1:9201:24127":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"16:2722:14585":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:9549:7941":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:11710:15699":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"6:5790:13310":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"16:7318:15558":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:12621:19085":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:7776:2371":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"16:6753:15544":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"5:1464:2295":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:12076:687":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:41802:198":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"16:149:14544":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"16:6401:15529":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:13575:19840":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"5:4234:2292":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:12305:18593":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:4339:2565":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:9277:15676":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:11367:15890":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"6:1604:10036":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:2903:8362":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:3653:2294":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"5:7450:2390":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"11:122:30644":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"5:5135:2665":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:3358:2475":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:12065:995":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:39233:215":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:47884:7894":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:11272:15921":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"17:9780:15685":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:46309:26922":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:12846:19100":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"22:28:2440":{"crate_id":22,"path":["clap_lex","ext","private","Sealed"],"kind":"trait"},"16:7342:31136":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:5853:2279":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:1641:8282":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"1:4070:2536":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"16:6583:15540":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:11232:2444":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"20:1097:19992":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParser"],"kind":"struct"},"6:7287:14123":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:9086:15493":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:8926:15669":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:6454:2671":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"16:5661:15499":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"16:7503:15564":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:11910:18567":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"16:7554:15569":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:3170:214":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:10616:15820":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"6:548:9136":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"6:0:873":{"crate_id":6,"path":["libc"],"kind":"module"},"16:7269:31138":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"23:459:20056":{"crate_id":23,"path":["anstream","buffer","Buffer"],"kind":"struct"},"1:12066:447":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:22181:26874":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:1825:181":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:21738:2733":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"20:2754:2292":{"crate_id":20,"path":["clap_builder","util","flat_map","Iter"],"kind":"struct"},"16:3600:14602":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:641:2271":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"6:4418:12591":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"20:3986:20030":{"crate_id":20,"path":["clap_builder","parser","parser","ParseState"],"kind":"enum"},"20:4075:24127":{"crate_id":20,"path":["clap_builder","mkeymap","Key"],"kind":"struct"},"1:11572:2518":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:43495:8016":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"6:1501:10024":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"16:4497:15128":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:22835:186":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"6:6145:13360":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"6:574:9140":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:30462:26918":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"6:7520:12821":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:12081:793":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"11:1051:14480":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:9372:15677":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:45719:2787":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"6:4949:12648":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"6:4829:12635":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:9794:8154":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"21:313:20004":{"crate_id":21,"path":["anstyle","effect","Effects"],"kind":"struct"},"2:44471:222":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"9:486:14357":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"20:4223:2093":{"crate_id":20,"path":["clap_builder","util","id","Id"],"kind":"struct"},"2:4210:7956":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:2871:8357":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:7566:21434":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:11551:2516":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"5:3669:29743":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:2644:2481":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:8311:2510":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:918:2300":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"6:4379:12587":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"20:4243:2092":{"crate_id":20,"path":["clap_builder","util","color","ColorChoice"],"kind":"enum"},"1:871:2295":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:3254:8085":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:21258:2735":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:3964:2528":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:11006:20783":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"17:9617:31839":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"23:163:2440":{"crate_id":23,"path":["anstream","stream","private","Sealed"],"kind":"trait"},"2:20934:27941":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"23:265:20065":{"crate_id":23,"path":["anstream","adapter","strip","StrippedStr"],"kind":"struct"},"16:6332:15523":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"11:2351:2294":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"2:22736:191":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"5:4194:2451":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"17:13667:19843":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:4934:2594":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"17:9762:31814":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"5:4074:2293":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:41983:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:47904:7896":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:45990:2788":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"6:4501:12602":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"21:173:32310":{"crate_id":21,"path":["anstyle","style","StyleDisplay"],"kind":"struct"},"6:4838:12636":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:10165:15749":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"11:680:2293":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"11:2334:2293":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"2:10547:7988":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:13298:19129":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:11640:24108":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"9:0:1937":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"20:3430:19988":{"crate_id":20,"path":["clap_builder","builder","value_parser","StringValueParser"],"kind":"struct"},"5:207:7933":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:11870:8517":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:8713:15663":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:12778:19096":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"16:4527:15134":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:6325:223":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"0:0:1824":{"crate_id":0,"path":["clap"],"kind":"module"},"5:6981:29770":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:12671:19088":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:9085:20767":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"5:2243:28188":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:40033:2266":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"20:3516:19980":{"crate_id":20,"path":["clap_builder","builder","value_parser","FalseyValueParser"],"kind":"struct"},"16:8195:15594":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:10343:2292":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:14042:19871":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"20:1365:2097":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParserFactory","Parser"],"kind":"foreign_type"},"6:6023:13327":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:11244:15696":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"6:4753:12625":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"20:3583:19994":{"crate_id":20,"path":["clap_builder","builder","value_parser","_AnonymousValueParser"],"kind":"struct"},"5:5973:2665":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:4992:2604":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:43537:2468":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:12070:336":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"6:4700:12619":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:5982:13323":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:10447:14476":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:13113:19117":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:10084:15719":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:13792:19849":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:21087:2440":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"16:6721:15543":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"18:755:19944":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"18:636:31859":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:30284:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"17:8825:15666":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"16:7067:31053":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:12105:8003":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"16:8167:15592":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:10511:25848":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"20:3359:2242":{"crate_id":20,"path":["clap_builder","builder","str","inner","Inner"],"kind":"struct"},"5:7487:246":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:14024:19869":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:7488:2137":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"16:2766:14587":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:9993:25845":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"17:9350:15644":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:638:2270":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"6:4728:12622":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"20:3831:20033":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","IdsRef"],"kind":"struct"},"18:481:19946":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:7406:20438":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"17:11951:18569":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"20:4033:20029":{"crate_id":20,"path":["clap_builder","parser","parser","PendingArg"],"kind":"struct"},"6:483:9128":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:8031:24100":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:2891:8361":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"6:1912:10210":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:12658:19087":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:1184:15733":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"23:112:2475":{"crate_id":23,"path":["anstream","stream","IsTerminal"],"kind":"trait"},"17:12711:19091":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"20:925:19971":{"crate_id":20,"path":["clap_builder","builder","resettable","IntoResettable"],"kind":"trait"},"17:11086:15916":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:7890:2429":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"6:4373:12586":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:45820:2753":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:2775:240":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"6:5970:13322":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:13710:19846":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:13838:19853":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"16:6901:15549":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:2792:250":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"17:10036:15726":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"9:393:14359":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"16:2696:14584":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"11:2394:2298":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"2:44294:8513":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"6:1591:10034":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:40277:8313":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"16:4774:15213":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:7937:123":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:10370:15757":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:11179:2647":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"6:4400:12431":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:44350:2720":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:43430:7984":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"16:2548:14578":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"18:590:27912":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"16:6879:15548":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"16:8134:15590":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:44362:8527":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"20:3901:32047":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrencesRef"],"kind":"struct"},"16:2644:14582":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"18:582:8143":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:10860:2435":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"2:43439:7987":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:907:2298":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"20:3770:20009":{"crate_id":20,"path":["clap_builder","error","Message"],"kind":"enum"},"1:6458:2672":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:6190:25860":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:9217:27924":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:727:148":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"16:6017:15514":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:12037:2277":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"5:7229:2294":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:44270:8506":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"2:40593:8327":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"11:101:30647":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:8865:2648":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:2368:2416":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:13981:19865":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:4665:20973":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"16:6513:15536":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"15:306:14517":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:42871:151":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"16:5574:15494":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:3198:23771":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"11:1687:150":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:40802:8296":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:30298:26870":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"21:382:20007":{"crate_id":21,"path":["anstyle","style","Style"],"kind":"struct"},"1:7897:2433":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"6:1521:10027":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"20:1653:20016":{"crate_id":20,"path":["clap_builder","error","format","ErrorFormatter"],"kind":"trait"},"17:13876:19856":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:1058:2308":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:11000:15838":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:44302:8508":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"22:113:20048":{"crate_id":22,"path":["clap_lex","ArgCursor"],"kind":"struct"},"1:9028:20249":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"7:78:14336":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:12576:19083":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:4157:25599":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"23:221:20300":{"crate_id":23,"path":["anstream","fmt","Adapter"],"kind":"struct"},"2:7934:2326":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:3401:2496":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"16:4986:15257":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"16:7722:15578":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"18:521:19945":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"5:4032:29743":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"16:8072:15587":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:10468:15814":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"6:4989:12653":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:12086:1607":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:2840:8335":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"2:46356:26871":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"6:4480:12599":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:10456:15784":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:11186:7983":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"16:3315:14600":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"16:7284:2612":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"18:699:19942":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"16:7128:15557":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"6:6663:10168":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"24:290:20077":{"crate_id":24,"path":["anstyle_parse","AsciiParser"],"kind":"struct"},"2:22264:26884":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:9530:115":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"18:614:31857":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"6:5994:13324":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:10240:15728":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"11:1855:2298":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"17:256:31818":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"18:507:31848":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:41785:2293":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"17:10929:15834":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:44003:8037":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"18:624:31870":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:416:177":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:42862:8155":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"5:6912:266":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"21:210:20001":{"crate_id":21,"path":["anstyle","color","AnsiColor"],"kind":"enum"},"17:12437:19076":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"20:3437:19983":{"crate_id":20,"path":["clap_builder","builder","value_parser","OsStringValueParser"],"kind":"struct"},"17:12997:19109":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:44562:7916":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"23:134:20069":{"crate_id":23,"path":["anstream","stream","AsLockedWrite"],"kind":"trait"},"17:10397:15810":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"18:599:31852":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:10616:2248":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"6:4540:12606":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:6205:8309":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"1:622:2268":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"18:766:19937":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"11:868:2306":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:4653:2533":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:1817:2363":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:1751:26920":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"17:10292:15682":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:4020:27954":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:2894:21460":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"20:3464:19985":{"crate_id":20,"path":["clap_builder","builder","value_parser","PossibleValuesParser"],"kind":"struct"},"6:4488:12600":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"23:439:2627":{"crate_id":23,"path":["anstream","adapter","wincon","State"],"kind":"enum"},"16:4417:15096":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"11:693:2294":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:1634:630":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"17:12007:18572":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:9003:15672":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"23:405:20067":{"crate_id":23,"path":["anstream","adapter","wincon","WinconBytesIter"],"kind":"struct"},"23:390:20066":{"crate_id":23,"path":["anstream","adapter","wincon","WinconBytes"],"kind":"struct"},"1:8588:2631":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"17:12098:18578":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"5:3581:2292":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"28:72:20117":{"crate_id":28,"path":["strsim","StrSimError"],"kind":"enum"},"16:7828:15583":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:10376:21465":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"6:4867:12640":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"6:4709:12620":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:44115:8040":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:8582:2292":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"18:660:19938":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:40315:27004":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"24:304:20078":{"crate_id":24,"path":["anstyle_parse","Utf8Parser"],"kind":"struct"},"1:4731:2569":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:22901:184":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"2:30262:8063":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:2783:7925":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:43957:8034":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"6:1734:10047":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:1564:2297":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"16:5121:15296":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:40041:8014":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:3539:2460":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"5:5858:2297":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:11325:25857":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"13:226:30668":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"20:4150:32080":{"crate_id":20,"path":["clap_builder","util","any_value","AnyValue"],"kind":"struct"},"1:11250:20762":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"2:43843:8004":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:40287:8314":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:5667:2682":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:10738:15873":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"6:4884:1061":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:12085:1606":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"14:221:14502":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:46042:2800":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"5:6956:29754":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"6:6082:13332":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"5:6332:2865":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:4278:224":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:7975:27925":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"6:1691:10043":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"16:3888:14663":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"16:7621:15573":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"6:5030:12657":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:12069:1112":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"1:12083:1608":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:4415:8100":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:21959:2728":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:4406:8099":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"18:113:19922":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:2832:2131":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"20:3046:2089":{"crate_id":20,"path":["clap_builder","builder","arg","Arg"],"kind":"struct"},"17:10186:15750":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"2:40112:2394":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:10869:20773":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"17:9912:15713":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"20:3553:19989":{"crate_id":20,"path":["clap_builder","builder","value_parser","TryMapValueParser"],"kind":"struct"},"1:8941:2688":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"6:1528:10028":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:11205:20692":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:7626:171":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:3076:2347":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:45759:2799":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"16:4613:15148":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:11761:15702":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:13010:19110":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:1983:200":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"16:6545:15538":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:2787:112":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"6:4721:12621":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:555:9137":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"6:7538:12824":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:22197:27054":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"5:3568:175":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:12123:18580":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:42348:7935":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:7796:20186":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"10:44:14468":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"17:8953:15670":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"6:4592:12611":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:43673:7990":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"16:7613:15572":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"6:1558:10031":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"16:7694:15576":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:10340:15763":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"6:4529:12605":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:43105:7970":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"5:1442:2294":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:43719:8019":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:2617:120":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"17:14401:19897":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:3009:121":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"6:542:9135":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"16:7436:15560":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"16:7523:15566":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:46914:2816":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:4667:20975":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"5:4348:267":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"11:298:30638":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:32016:2650":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:22128:26430":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:13040:19112":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:43417:7968":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"26:0:2078":{"crate_id":26,"path":["colorchoice"],"kind":"module"},"6:1718:10046":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:40817:8297":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:9545:209":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"17:9660:31841":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"16:536:30815":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:10059:15724":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"16:2832:14590":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"16:6204:15517":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:41665:2294":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:3243:256":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"15:0:1942":{"crate_id":15,"path":["addr2line"],"kind":"module"},"25:23:14397":{"crate_id":25,"path":["utf8parse","types","Action"],"kind":"enum"},"16:4835:15226":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:10672:15870":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:40060:8122":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"16:6318:15522":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:10430:15812":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"2:2913:8364":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:11390:20398":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"11:1145:2310":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:12422:19075":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:922:2301":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"17:8659:15642":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"6:5085:12663":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:10788:15874":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:9886:15711":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"5:7291:213":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"5:4426:29746":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:7907:2430":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:1429:150":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:20893:8143":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"21:261:20002":{"crate_id":21,"path":["anstyle","color","Ansi256Color"],"kind":"struct"},"17:11316:15913":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"15:394:14528":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"15:288:14516":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"16:2670:14583":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"5:261:29743":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:8183:2497":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"5:7375:2290":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:9517:21459":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"1:7743:2275":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"20:3231:32041":{"crate_id":20,"path":["clap_builder","builder","ext","Extensions"],"kind":"struct"},"17:13422:19834":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"5:2131:2238":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"21:334:20005":{"crate_id":21,"path":["anstyle","effect","EffectIter"],"kind":"struct"},"17:11547:15693":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"19:0:1092":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"16:2969:14595":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"5:2962:29630":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"6:4792:12630":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:5774:2667":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:12048:20789":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:8323:2567":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:8606:2615":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:5268:205":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:44140:8042":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:9058:20426":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:40779:27718":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"1:6015:223":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"6:6186:13362":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"5:6465:2297":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:2786:247":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"6:4631:12614":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:11327:15923":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"18:690:19941":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:863:2294":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:1568:2298":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"16:4806:15221":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"20:3943:20036":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Indices"],"kind":"struct"},"1:7885:2432":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:11295:15922":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"6:1507:10025":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:41513:2519":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:43859:2266":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:12983:19108":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:13162:19120":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"16:2574:14579":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"11:666:2292":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:14324:19892":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:7606:25815":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"11:1842:2292":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"16:3032:14596":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:12543:19081":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"16:6189:31111":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:12895:110":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"6:7567:12828":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:8337:2515":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:8174:2495":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:6494:2678":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:13989:19866":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:434:14541":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"5:1302:2310":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:11921:7994":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:2276:107":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"5:3212:2313":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"6:1682:10042":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"6:7532:12823":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"6:4877:12641":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"16:4462:15117":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:20936:27939":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"16:3232:14599":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"23:491:20055":{"crate_id":23,"path":["anstream","strip","StripStream"],"kind":"struct"},"6:4406:12590":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:12513:19079":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"6:5013:12655":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:47919:7897":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:9985:15721":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:14013:19868":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"18:80:19920":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"16:7102:15556":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"16:6226:15518":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:43449:7985":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"16:6456:15532":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:21344:2725":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"2:4044:105":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"1:8957:2686":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"6:489:9129":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:4022:2533":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"16:2472:14575":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:7689:2249":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"5:1374:96":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:10750:15829":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:22769:188":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"}},"external_crates":{"26":{"name":"colorchoice","html_root_url":null},"23":{"name":"anstream","html_root_url":null},"20":{"name":"clap_builder","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"28":{"name":"strsim","html_root_url":null},"25":{"name":"utf8parse","html_root_url":null},"22":{"name":"clap_lex","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"27":{"name":"anstyle_query","html_root_url":null},"24":{"name":"anstyle_parse","html_root_url":null},"21":{"name":"anstyle","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}