{"root":"0:0:1713","crate_version":"3.2.16","includes_private":false,"index":{"0:3392:2426":{"id":"0:3392:2426","crate_id":0,"name":"InferSubcommands","span":{"filename":"src/builder/app_settings.rs","begin":[155,4],"end":[155,20]},"visibility":"default","docs":"Deprecated, replaced with [`Command::infer_subcommands`]","links":{"`Command::infer_subcommands`":"0:4231:1651"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:217:2226":{"id":"0:217:2226","crate_id":0,"name":"action","span":{"filename":"src/builder/action.rs","begin":[1,0],"end":[325,31]},"visibility":{"restricted":{"parent":"0:215:1635","path":"::builder"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:3334:1636"],"is_stripped":true}},"2:3346:8527":{"id":"2:3346:8527","crate_id":2,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3348:181","2:3349:892"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:31879:69521":{"id":"2:31879:69521","crate_id":2,"name":"checked_rem","span":null,"visibility":"public","docs":"Checked integer remainder. Computes `self % rhs`, returning `None`\nif `rhs == 0`.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(5u64.checked_rem(2), Some(1));\nassert_eq!(5u64.checked_rem(0), None);\n```","links":{},"attrs":["#[stable(feature = \"wrapping\", since = \"1.7.0\")]","#[rustc_const_stable(feature = \"const_checked_int_div\", since = \"1.52.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13766:138":{"id":"2:13766:138","crate_id":2,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13767:181","2:13768:1013"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:31923:69555":{"id":"2:31923:69555","crate_id":2,"name":"overflowing_shl","span":null,"visibility":"public","docs":"Shifts self left by `rhs` bits.\n\nReturns a tuple of the shifted version of self along with a boolean\nindicating whether the shift value was larger than or equal to the\nnumber of bits. If the shift value is too large, then value is\nmasked (N-1) where N is the number of bits, and this value is then\nused to perform the shift.\n\n# Examples\n\nBasic usage\n\n```\nassert_eq!(0x1u64.overflowing_shl(4), (0x10, false));\nassert_eq!(0x1u64.overflowing_shl(132), (0x10, true));\n```","links":{},"attrs":["#[stable(feature = \"wrapping\", since = \"1.7.0\")]","#[rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"u64"},{"kind":"primitive","inner":"bool"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4231:1651":{"id":"0:4231:1651","crate_id":0,"name":"App","span":{"filename":"src/builder/command.rs","begin":[78,0],"end":[114,1]},"visibility":"public","docs":"Deprecated, replaced with [`Command`]","links":{"`Command`":"0:755:1637"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"1:5731:10729":{"id":"1:5731:10729","crate_id":1,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5732:6220","1:5733:28694","1:5734:28695"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:4603:6884":{"id":"0:4603:6884","crate_id":0,"name":"UnexpectedMultipleUsage","span":{"filename":"src/error/kind.rs","begin":[287,4],"end":[287,27]},"visibility":"default","docs":"Occurs when the user provides multiple values to an argument which doesn't allow that.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet result = Command::new(\"prog\")\n    .arg(Arg::new(\"debug\")\n        .long(\"debug\")\n        .multiple_occurrences(false))\n    .try_get_matches_from(vec![\"prog\", \"--debug\", \"--debug\"]);\nassert!(result.is_err());\nassert_eq!(result.unwrap_err().kind(), ErrorKind::UnexpectedMultipleUsage);\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:3960:3112":{"id":"0:3960:3112","crate_id":0,"name":"MultipleValues","span":{"filename":"src/builder/arg_settings.rs","begin":[52,4],"end":[52,18]},"visibility":"default","docs":"Deprecated, replaced with [`Arg::multiple_values`] and [`Arg::is_multiple_values_set`]","links":{"`Arg::is_multiple_values_set`":"0:3803:1638","`Arg::multiple_values`":"0:3803:1638"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:4503:6857":{"id":"0:4503:6857","crate_id":0,"name":"InvalidSubcommand","span":{"filename":"src/error/context.rs","begin":[6,4],"end":[6,21]},"visibility":"default","docs":"The cause of the error","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:3992:3249":{"id":"0:3992:3249","crate_id":0,"name":"IgnoreCase","span":{"filename":"src/builder/arg_settings.rs","begin":[201,4],"end":[201,14]},"visibility":"default","docs":"Deprecated, replaced with [`Arg::ignore_case`] and [`Arg::is_ignore_case_set`]","links":{"`Arg::ignore_case`":"0:3803:1638","`Arg::is_ignore_case_set`":"0:3803:1638"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:12992:1837":{"id":"2:12992:1837","crate_id":2,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12993:126","2:12994:1838"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:4343:1657":{"id":"0:4343:1657","crate_id":0,"name":"ValueHint","span":{"filename":"src/builder/value_hint.rs","begin":[29,0],"end":[67,1]},"visibility":"public","docs":"Provide shell with hint on how to complete an argument.\n\nSee [Arg::value_hint][crate::Arg::value_hint] to set this on an argument.\n\nSee the `clap_complete` crate for completion script generation.\n\nOverview of which hints are supported by which shell:\n\n| Hint                   | zsh | fish[^1]|\n| ---------------------- | --- | ------- |\n| `AnyPath`              | Yes | Yes     |\n| `FilePath`             | Yes | Yes     |\n| `DirPath`              | Yes | Yes     |\n| `ExecutablePath`       | Yes | Partial |\n| `CommandName`          | Yes | Yes     |\n| `CommandString`        | Yes | Partial |\n| `CommandWithArguments` | Yes |         |\n| `Username`             | Yes | Yes     |\n| `Hostname`             | Yes | Yes     |\n| `Url`                  | Yes |         |\n| `EmailAddress`         | Yes |         |\n\n[^1]: fish completions currently only support named arguments (e.g. -o or --opt), not\n      positional arguments.","links":{"crate::Arg::value_hint":"0:3803:1638"},"attrs":["#[non_exhaustive]"],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:4344:232","0:4346:6315","0:4348:4045","0:4350:6318","0:4352:6320","0:4354:6322","0:4356:6324","0:4358:6326","0:4360:6335","0:4362:6337","0:4364:6340","0:4366:6342","0:4368:6344"],"impls":[]}},"0:1848":{"id":"0:1848","crate_id":0,"name":null,"span":{"filename":"src/error/mod.rs","begin":[26,0],"end":[26,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"context::ContextValue","name":"ContextValue","id":"0:4548:6776","glob":false}},"2:14239:8837":{"id":"2:14239:8837","crate_id":2,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14240:26783","2:14241:26784","2:14242:26785","2:14243:26786","2:14244:26787","2:14245:26788","2:14246:9705"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:31861:69509":{"id":"2:31861:69509","crate_id":2,"name":"trailing_ones","span":null,"visibility":"public","docs":"Returns the number of trailing ones in the binary representation\nof `self`.\n\n# Examples\n\nBasic usage:\n\n```\nlet n = 0b1010111u64;\n\nassert_eq!(n.trailing_ones(), 3);\n```","links":{},"attrs":["#[stable(feature = \"leading_trailing_ones\", since = \"1.46.0\")]","#[rustc_const_stable(feature = \"leading_trailing_ones\", since = \"1.46.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:31859:69507":{"id":"2:31859:69507","crate_id":2,"name":"trailing_zeros","span":null,"visibility":"public","docs":"Returns the number of trailing zeros in the binary representation\nof `self`.\n\n# Examples\n\nBasic usage:\n\n```\nlet n = 0b0101000u64;\n\nassert_eq!(n.trailing_zeros(), 3);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2434":{"id":"0:2434","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/mod.rs","begin":[9,22],"end":[9,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"arg_matches::ArgMatches","name":"ArgMatches","id":"0:4693:1642","glob":false}},"0:44":{"id":"0:44","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[112,0],"end":[112,28]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::builder::App","name":"App","id":"0:4231:1651","glob":false}},"0:3388:2420":{"id":"0:3388:2420","crate_id":0,"name":"DontDelimitTrailingValues","span":{"filename":"src/builder/app_settings.rs","begin":[141,4],"end":[141,29]},"visibility":"default","docs":"Deprecated, replaced with [`Command::dont_delimit_trailing_values`] and\n[`Command::is_dont_delimit_trailing_values_set`]","links":{"`Command::dont_delimit_trailing_values`":"0:4231:1651","`Command::is_dont_delimit_trailing_values_set`":"0:4231:1651"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:3404:2447":{"id":"0:3404:2447","crate_id":0,"name":"UseLongFormatForHelpSubcommand","span":{"filename":"src/builder/app_settings.rs","begin":[215,4],"end":[215,34]},"visibility":"default","docs":"Deprecated, this is now the default","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:2453":{"id":"0:2453","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/mod.rs","begin":[17,22],"end":[17,30]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"import","inner":{"source":"arg_matches::OsValues","name":"OsValues","id":"0:4778:1660","glob":false}},"0:215:1635":{"id":"0:215:1635","crate_id":0,"name":"builder","span":{"filename":"src/builder/mod.rs","begin":[1,0],"end":[61,43]},"visibility":"public","docs":"Define [`Command`] line [arguments][`Arg`]","links":{"`Command`":"0:755:1637","`Arg`":"0:3803:1638"},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1682","0:1686","0:1689","0:1692","0:1695","0:1699","0:1702","0:1705","0:1708","0:1711","0:1714","0:1717","0:1720","0:1723","0:1726","0:1729","0:1732","0:1735","0:1738","0:1741","0:1744","0:1747","0:1750","0:1753","0:1756","0:1759","0:1762","0:1765"],"is_stripped":false}},"0:4527:6887":{"id":"0:4527:6887","crate_id":0,"name":"SuggestedArg","span":{"filename":"src/error/context.rs","begin":[30,4],"end":[30,16]},"visibility":"default","docs":"Potential fix for the user","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:13458:2214":{"id":"2:13458:2214","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"prim@char":"1:16005:8392","`None`":"2:47492:176","self::pattern":"2:13053:8682"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:8676","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:158:2101":{"id":"0:158:2101","crate_id":0,"name":"command_for_update","span":{"filename":"src/derive.rs","begin":[267,4],"end":[270,5]},"visibility":"default","docs":"Build a [`Command`] that can update `self`.\n\nSee [`FromArgMatches::update_from_arg_matches_mut`] for updating `self`.","links":{"`FromArgMatches::update_from_arg_matches_mut`":"0:162:1647","`Command`":"0:755:1637"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Command","id":"0:755:1637","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3335:2313":{"id":"0:3335:2313","crate_id":0,"name":"Set","span":{"filename":"src/builder/action.rs","begin":[49,4],"end":[49,7]},"visibility":"default","docs":"When encountered, store the associated value(s) in [`ArgMatches`][crate::ArgMatches]\n\n# Examples\n\n```rust\n# use clap::Command;\n# use clap::Arg;\nlet cmd = Command::new(\"mycmd\")\n    .arg(\n        Arg::new(\"flag\")\n            .long(\"flag\")\n            .action(clap::ArgAction::Set)\n    );\n\nlet matches = cmd.try_get_matches_from([\"mycmd\", \"--flag\", \"value\"]).unwrap();\nassert!(matches.contains_id(\"flag\"));\nassert_eq!(matches.occurrences_of(\"flag\"), 0);\nassert_eq!(\n    matches.get_many::<String>(\"flag\").unwrap_or_default().map(|v| v.as_str()).collect::<Vec<_>>(),\n    vec![\"value\"]\n);\n```","links":{"crate::ArgMatches":"0:4693:1642"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:2812":{"id":"0:2812","crate_id":0,"name":null,"span":{"filename":"src/parser/mod.rs","begin":[23,45],"end":[23,56]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::matches::ValueSource","name":"ValueSource","id":"0:4810:1661","glob":false}},"2:2862:97":{"id":"2:2862:97","crate_id":2,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2864:2666"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2076","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:1723":{"id":"0:1723","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[38,0],"end":[38,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"value_parser::StringValueParser","name":"StringValueParser","id":"0:4384:2240","glob":false}},"0:86":{"id":"0:86","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[139,0],"end":[139,34]},"visibility":"public","docs":"Deprecated, replaced with [`CommandFactory`]","links":{"`CommandFactory`":"0:153:1646"},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"CommandFactory","name":"IntoApp","id":"0:153:1646","glob":false}},"b:5:6413-0:4627:127":{"id":"b:5:6413-0:4627:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10298:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2076","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"ToString","id":"5:6411:223","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4627:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:6415:1396"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1692":{"id":"0:1692","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[29,0],"end":[29,17]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"arg::Arg","name":"Arg","id":"0:3803:1638","glob":false}},"2:3367:8531":{"id":"2:3367:8531","crate_id":2,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3369:266"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6689:10730":{"id":"1:6689:10730","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6690:28779","1:6691:14819","1:6692:14820","1:6693:14822","1:6694:14821","1:6695:14823","1:6696:14824","1:6697:14826","1:6698:12761","1:6699:14829","1:6700:14830","1:6701:14831","1:6702:14832","1:6703:14833","1:6704:14834","1:6705:14827","1:6706:14828"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13481:64425":{"id":"2:13481:64425","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"self::pattern":"2:13053:8682","prim@char":"1:16005:8392","str::rsplitn":"1:16011:8397"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:49563:8708","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:8676","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:169:2178":{"id":"0:169:2178","crate_id":0,"name":"augment_args_for_update","span":{"filename":"src/derive.rs","begin":[403,4],"end":[403,64]},"visibility":"default","docs":"Append to [`Command`] so it can update `self`.\n\nThis is used to implement `#[clap(flatten)]`\n\nSee also [`CommandFactory`].","links":{"`CommandFactory`":"0:153:1646","`Command`":"0:755:1637"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["cmd",{"kind":"resolved_path","inner":{"name":"Command","id":"0:755:1637","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Command","id":"0:755:1637","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1756":{"id":"0:1756","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[49,0],"end":[49,48]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"value_parser::NonEmptyStringValueParser","name":"NonEmptyStringValueParser","id":"0:4461:2251","glob":false}},"2:10529:142":{"id":"2:10529:142","crate_id":2,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10530:715","2:10532:9882"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:7927:8783":{"id":"2:7927:8783","crate_id":2,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7928:27496","2:7929:27497","2:7930:27498","2:7931:27499","2:7932:27500","2:7933:27501","2:7934:27502"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2887:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2966:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:4677:6886":{"id":"0:4677:6886","crate_id":0,"name":"UnknownArgument","span":{"filename":"src/parser/error.rs","begin":[18,4],"end":[20,5]},"visibility":"default","docs":"Argument not defined in [`Command`][crate::Command]","links":{"crate::Command":"0:755:1637"},"attrs":["#[non_exhaustive]"],"deprecation":null,"kind":"variant","inner":{"variant_kind":"struct","variant_inner":[]}},"0:2802":{"id":"0:2802","crate_id":0,"name":null,"span":{"filename":"src/parser/mod.rs","begin":[22,0],"end":[22,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::matches::ValuesRef","name":"ValuesRef","id":"0:4737:7162","glob":false}},"b:2:3201-0:4627:127":{"id":"b:2:3201-0:4627:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3174:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4627:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3203:681"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:31862:1119":{"id":"2:31862:1119","crate_id":2,"name":"rotate_left","span":null,"visibility":"public","docs":"Shifts the bits to the left by a specified amount, `n`,\nwrapping the truncated bits to the end of the resulting integer.\n\nPlease note this isn't the same operation as the `<<` shifting operator!\n\n# Examples\n\nBasic usage:\n\n```\nlet n = 0xaa00000000006e1u64;\nlet m = 0x6e10aa;\n\nassert_eq!(n.rotate_left(12), m);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["n",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3434:8544":{"id":"2:3434:8544","crate_id":2,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3436:1233"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:3386:2416":{"id":"0:3386:2416","crate_id":0,"name":"TrailingVarArg","span":{"filename":"src/builder/app_settings.rs","begin":[130,4],"end":[130,18]},"visibility":"default","docs":"Deprecated, replaced with [`Command::trailing_var_arg`] and [`Command::is_trailing_var_arg_set`]","links":{"`Command::trailing_var_arg`":"0:4231:1651","`Command::is_trailing_var_arg_set`":"0:4231:1651"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:4630:6787":{"id":"0:4630:6787","crate_id":0,"name":"info","span":{"filename":"src/error/mod.rs","begin":[53,4],"end":[53,25]},"visibility":"public","docs":"Deprecated, replaced with [`Error::context()`]","links":{"`Error::context()`":"0:4627:127"},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7780:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}},"0:3376:2398":{"id":"0:3376:2398","crate_id":0,"name":"WaitOnError","span":{"filename":"src/builder/app_settings.rs","begin":[80,4],"end":[80,15]},"visibility":"default","docs":"Deprecated, replace\n```rust,no_run\nlet cmd = clap::Command::new(\"cmd\")\n    .global_setting(clap::AppSettings::WaitOnError)\n    .arg(clap::arg!(--flag));\nlet m = cmd.get_matches();\n```\nwith\n```rust\nlet cmd = clap::Command::new(\"cmd\")\n    .arg(clap::arg!(--flag));\nlet m = match cmd.try_get_matches() {\n    Ok(m) => m,\n    Err(err) => {\n        if err.use_stderr() {\n            let _ = err.print();\n\n            eprintln!(\"\\nPress [ENTER] / [RETURN] to continue...\");\n            use std::io::BufRead;\n            let mut s = String::new();\n            let i = std::io::stdin();\n            i.lock().read_line(&mut s).unwrap();\n\n            std::process::exit(2);\n        } else {\n            let _ = err.print();\n            std::process::exit(0);\n        }\n    }\n};\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:3412:2463":{"id":"0:3412:2463","crate_id":0,"name":"ArgRequiredElseHelp","span":{"filename":"src/builder/app_settings.rs","begin":[259,4],"end":[259,23]},"visibility":"default","docs":"Deprecated, replaced with [`Command::arg_required_else_help`] and\n[`Command::is_arg_required_else_help_set`]","links":{"`Command::arg_required_else_help`":"0:4231:1651","`Command::is_arg_required_else_help_set`":"0:4231:1651"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:13433:27145":{"id":"2:13433:27145","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10933:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10933:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:31890:69531":{"id":"2:31890:69531","crate_id":2,"name":"checked_shr","span":null,"visibility":"public","docs":"Checked shift right. Computes `self >> rhs`, returning `None`\nif `rhs` is larger than or equal to the number of bits in `self`.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(0x10u64.checked_shr(4), Some(0x1));\nassert_eq!(0x10u64.checked_shr(129), None);\n```","links":{},"attrs":["#[stable(feature = \"wrapping\", since = \"1.7.0\")]","#[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.47.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1545:2234":{"id":"0:1545:2234","crate_id":0,"name":"value_parser","span":{"filename":"src/builder/value_parser.rs","begin":[1822,4],"end":[1822,38]},"visibility":"default","docs":"Create the specified [`Self::Parser`]","links":{"`Self::Parser`":"0:1544:1648"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"qualified_path","inner":{"name":"Parser","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:1543:2243","args":null,"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:4556:1541":{"id":"0:4556:1541","crate_id":0,"name":"0","span":{"filename":"src/error/context.rs","begin":[50,11],"end":[50,17]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"2:2887:104":{"id":"2:2887:104","crate_id":2,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2888:408","2:2889:410"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10933:214":{"id":"2:10933:214","crate_id":2,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:10935:181","2:10936:4194","2:10937:7177","2:10938:27145","2:10939:27146","2:10940:753","2:10941:754"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2076","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:10924:10744","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:1854:205":{"id":"0:1854:205","crate_id":0,"name":"Result","span":{"filename":"src/error/mod.rs","begin":[32,0],"end":[32,48]},"visibility":"public","docs":"Short hand for [`Result`] type\n\n[`Result`]: std::result::Result","links":{"std::result::Result":"2:47619:205"},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"StdResult","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4627:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"synthetic":false}}}],"where_predicates":[]}}},"0:1765":{"id":"0:1765","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[54,0],"end":[54,21]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"import","inner":{"source":"command::App","name":"App","id":"0:4231:1651","glob":false}},"2:3416:8540":{"id":"2:3416:8540","crate_id":2,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3418:181","2:3419:1235"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13525:68132":{"id":"2:13525:68132","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:13053:8682","prim@char":"1:16005:8392"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:8676","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:8676","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:8677","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:4003:1428":{"id":"2:4003:1428","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"2:46028:7244","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:4050:8577":{"id":"2:4050:8577","crate_id":2,"name":"Provider","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4051:9884"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1741":{"id":"0:1741","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[44,0],"end":[44,34]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"value_parser::via_prelude","name":"via_prelude","id":"0:1585:2246","glob":false}},"2:31938:69568":{"id":"2:31938:69568","crate_id":2,"name":"to_be_bytes","span":null,"visibility":"public","docs":"Return the memory representation of this integer as a byte array in\nbig-endian (network) byte order.\n\n\n\n# Examples\n\n```\nlet bytes = 0x1234567890123456u64.to_be_bytes();\nassert_eq!(bytes, [0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]);\n```","links":{},"attrs":["#[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]","#[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"array","inner":{"type":{"kind":"primitive","inner":"u8"},"len":"8"}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2576:127":{"id":"1:2576:127","crate_id":1,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2577:6789","1:2579:6823","1:2580:9883","1:2581:9884"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10291:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10298:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:1916":{"id":"0:1916","crate_id":0,"name":null,"span":{"filename":"src/error/mod.rs","begin":[994,0],"end":[998,1]},"visibility":{"restricted":{"parent":"0:1777:1640","path":"::error"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3174:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"2:48558:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4627:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:1917:681"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4431:2239":{"id":"0:4431:2239","crate_id":0,"name":"RangedU64ValueParser","span":{"filename":"src/builder/value_parser.rs","begin":[1289,0],"end":[1292,1]},"visibility":"public","docs":"Parse number that fall within a range of values\n\n# Example\n\nUsage:\n```rust\nlet mut cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"port\")\n            .long(\"port\")\n            .value_parser(clap::value_parser!(u64).range(3000..))\n            .takes_value(true)\n            .required(true)\n    );\n\nlet m = cmd.try_get_matches_from_mut([\"cmd\", \"--port\", \"3001\"]).unwrap();\nlet port: u64 = *m.get_one(\"port\")\n    .expect(\"required\");\nassert_eq!(port, 3001);\n```\n\nSemantics:\n```rust\n# use std::ffi::OsStr;\n# use clap::builder::TypedValueParser;\n# let cmd = clap::Command::new(\"test\");\n# let arg = None;\nlet value_parser = clap::builder::RangedU64ValueParser::<u32>::new().range(0..200);\nassert!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"random\")).is_err());\nassert!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"\")).is_err());\nassert!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"-200\")).is_err());\nassert!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"300\")).is_err());\nassert!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"-1\")).is_err());\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"0\")).unwrap(), 0);\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"50\")).unwrap(), 50);\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"std::convert::TryFrom","id":"2:3181:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":{"kind":"primitive","inner":"u64"},"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:2045:7236":{"id":"0:2045:7236","crate_id":0,"name":"any_value","span":{"filename":"src/parser/matches/any_value.rs","begin":[1,0],"end":[112,1]},"visibility":{"restricted":{"parent":"0:2044:2079","path":"::parser::matches"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:4687:2366"],"is_stripped":true}},"5:6083":{"id":"5:6083","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5903:1339","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:6084:68760","5:6085:1873","5:6088:68761","5:6091:8358","5:6103:68762","5:6104:6475","5:6105:8060","5:6106:21010","5:6107:2614"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:31930:69561":{"id":"2:31930:69561","crate_id":2,"name":"div_ceil","span":null,"visibility":"public","docs":"Calculates the quotient of `self` and `rhs`, rounding the result towards positive infinity.\n\n# Panics\n\nThis function will panic if `rhs` is zero.\n\n## Overflow behavior\n\nOn overflow, this function will panic if overflow checks are enabled (default in debug\nmode) and wrap if overflow checks are disabled (default in release mode).\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(int_roundings)]\nassert_eq!(7_u64.div_ceil(4), 2);\n```","links":{},"attrs":["#[unstable(feature = \"int_roundings\", issue = \"88581\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3958:2923":{"id":"0:3958:2923","crate_id":0,"name":"Required","span":{"filename":"src/builder/arg_settings.rs","begin":[43,4],"end":[43,12]},"visibility":"default","docs":"Deprecated, replaced with [`Arg::required`] and [`Arg::is_required_set`]","links":{"`Arg::is_required_set`":"0:3803:1638","`Arg::required`":"0:3803:1638"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:1705":{"id":"0:1705","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[32,0],"end":[32,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"command::Command","name":"Command","id":"0:755:1637","glob":false}},"5:6106:21010":{"id":"5:6106:21010","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:16011:8397"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6963:10742":{"id":"1:6963:10742","crate_id":1,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6964:28728"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1860:671":{"id":"0:1860:671","crate_id":0,"name":"format","span":{"filename":"src/error/mod.rs","begin":[83,4],"end":[90,5]},"visibility":"public","docs":"Format the existing message with the Command's context","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["cmd",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Command","id":"0:755:1637","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5061:4888":{"id":"0:5061:4888","crate_id":0,"name":"Always","span":{"filename":"src/util/color.rs","begin":[38,4],"end":[38,10]},"visibility":"default","docs":"Enables colored output regardless of whether or not the output is going to a terminal/TTY.\n\n# Platform Specific\n\nThis setting only applies to Unix, Linux, and macOS (i.e. non-Windows platforms).\n\n# Examples\n\n ```no_run\n# use clap::{Command, ColorChoice};\nCommand::new(\"myprog\")\n    .color(ColorChoice::Always)\n    .get_matches();\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:3277:217":{"id":"2:3277:217","crate_id":2,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:2437":{"id":"0:2437","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/mod.rs","begin":[9,34],"end":[9,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"arg_matches::Indices","name":"Indices","id":"0:4788:1659","glob":false}},"0:41":{"id":"0:41","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[109,82],"end":[109,91]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::derive::ValueEnum","name":"ValueEnum","id":"0:174:1650","glob":false}},"0:3408:2455":{"id":"0:3408:2455","crate_id":0,"name":"ArgsNegateSubcommands","span":{"filename":"src/builder/app_settings.rs","begin":[237,4],"end":[237,25]},"visibility":"default","docs":"Deprecated, replaced with [`Command::args_conflicts_with_subcommands`] and\n[`Command::is_args_conflicts_with_subcommands_set`]","links":{"`Command::args_conflicts_with_subcommands`":"0:4231:1651","`Command::is_args_conflicts_with_subcommands_set`":"0:4231:1651"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:2809":{"id":"0:2809","crate_id":0,"name":null,"span":{"filename":"src/parser/mod.rs","begin":[23,36],"end":[23,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::matches::Indices","name":"Indices","id":"0:4788:1659","glob":false}},"2:13478:68121":{"id":"2:13478:68121","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:13053:8682","str::split_terminator":"1:16011:8397","prim@char":"1:16005:8392","str::split":"1:16011:8397"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:49527:8709","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:8676","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:8676","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:8677","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:76:12196":{"id":"22:76:12196","crate_id":22,"name":"OsStrBytes","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["22:77:69313","22:80:69314"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"22:114:10744","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:783:222","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:9259:7234":{"id":"2:9259:7234","crate_id":2,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:3426:2496":{"id":"0:3426:2496","crate_id":0,"name":"DisableVersionFlag","span":{"filename":"src/builder/app_settings.rs","begin":[342,4],"end":[342,22]},"visibility":"default","docs":"Deprecated, replaced with [`Command::disable_version_flag`] and\n[`Command::is_disable_version_flag_set`]","links":{"`Command::disable_version_flag`":"0:4231:1651","`Command::is_disable_version_flag_set`":"0:4231:1651"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:3739:8550":{"id":"2:3739:8550","crate_id":2,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3741:28126"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:3966:3278":{"id":"0:3966:3278","crate_id":0,"name":"ForbidEmptyValues","span":{"filename":"src/builder/arg_settings.rs","begin":[78,4],"end":[78,21]},"visibility":"default","docs":"Deprecated, replaced with [`Arg::value_parser(NonEmptyStringValueParser::new())`]","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:31914:69546":{"id":"2:31914:69546","crate_id":2,"name":"overflowing_sub","span":null,"visibility":"public","docs":"Calculates `self` - `rhs`\n\nReturns a tuple of the subtraction along with a boolean indicating\nwhether an arithmetic overflow would occur. If an overflow would\nhave occurred then the wrapped value is returned.\n\n# Examples\n\nBasic usage\n\n```\n\nassert_eq!(5u64.overflowing_sub(2), (3, false));\nassert_eq!(0u64.overflowing_sub(1), (u64::MAX, true));\n```","links":{},"attrs":["#[stable(feature = \"wrapping\", since = \"1.7.0\")]","#[rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"u64"},{"kind":"primitive","inner":"bool"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:31919:69551":{"id":"2:31919:69551","crate_id":2,"name":"overflowing_div_euclid","span":null,"visibility":"public","docs":"Calculates the quotient of Euclidean division `self.div_euclid(rhs)`.\n\nReturns a tuple of the divisor along with a boolean indicating\nwhether an arithmetic overflow would occur. Note that for unsigned\nintegers overflow never occurs, so the second value is always\n`false`.\nSince, for the positive integers, all common\ndefinitions of division are equal, this\nis exactly equal to `self.overflowing_div(rhs)`.\n\n# Panics\n\nThis function will panic if `rhs` is 0.\n\n# Examples\n\nBasic usage\n\n```\nassert_eq!(5u64.overflowing_div_euclid(2), (2, false));\n```","links":{},"attrs":["#[stable(feature = \"euclidean_division\", since = \"1.38.0\")]","#[rustc_const_stable(feature = \"const_euclidean_int_methods\", since =\n\"1.52.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"u64"},{"kind":"primitive","inner":"bool"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13490:68123":{"id":"2:13490:68123","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:8676","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:8676","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:8677","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:172:2192":{"id":"0:172:2192","crate_id":0,"name":"augment_subcommands_for_update","span":{"filename":"src/derive.rs","begin":[445,4],"end":[445,71]},"visibility":"default","docs":"Append to [`Command`] so it can update `self`.\n\nThis is used to implement `#[clap(flatten)]`\n\nSee also [`CommandFactory`].","links":{"`Command`":"0:755:1637","`CommandFactory`":"0:153:1646"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["cmd",{"kind":"resolved_path","inner":{"name":"Command","id":"0:755:1637","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Command","id":"0:755:1637","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:3986:3289":{"id":"0:3986:3289","crate_id":0,"name":"RequireEquals","span":{"filename":"src/builder/arg_settings.rs","begin":[174,4],"end":[174,17]},"visibility":"default","docs":"Deprecated, replaced with [`Arg::require_equals`] and [`Arg::is_require_equals_set`]","links":{"`Arg::is_require_equals_set`":"0:3803:1638","`Arg::require_equals`":"0:3803:1638"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:10574:8947":{"id":"2:10574:8947","crate_id":2,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10575:146","2:10576:27478","2:10577:27479"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1865:6804":{"id":"0:1865:6804","crate_id":0,"name":"use_stderr","span":{"filename":"src/error/mod.rs","begin":[104,4],"end":[106,5]},"visibility":"public","docs":"Should the message be written to `stdout` or not?","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13428:64394":{"id":"2:13428:64394","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:16022:8406"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1686":{"id":"0:1686","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[28,23],"end":[28,31]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"app_settings::AppFlags","name":"AppFlags","id":"0:3358:1652","glob":false}},"2:31920:69552":{"id":"2:31920:69552","crate_id":2,"name":"overflowing_rem","span":null,"visibility":"public","docs":"Calculates the remainder when `self` is divided by `rhs`.\n\nReturns a tuple of the remainder after dividing along with a boolean\nindicating whether an arithmetic overflow would occur. Note that for\nunsigned integers overflow never occurs, so the second value is\nalways `false`.\n\n# Panics\n\nThis function will panic if `rhs` is 0.\n\n# Examples\n\nBasic usage\n\n```\nassert_eq!(5u64.overflowing_rem(2), (1, false));\n```","links":{},"attrs":["#[stable(feature = \"wrapping\", since = \"1.7.0\")]","#[rustc_const_stable(feature = \"const_overflowing_int_methods\", since =\n\"1.52.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"u64"},{"kind":"primitive","inner":"bool"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:180:2215":{"id":"0:180:2215","crate_id":0,"name":"to_possible_value","span":{"filename":"src/derive.rs","begin":[499,4],"end":[499,65]},"visibility":"default","docs":"The canonical argument value.\n\nThe value is `None` for skipped variants.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:4285:1656","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:3430:8543":{"id":"2:3430:8543","crate_id":2,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3432:357"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:31891:1445":{"id":"2:31891:1445","crate_id":2,"name":"unchecked_shr","span":null,"visibility":"public","docs":"Unchecked shift right. Computes `self >> rhs`, assuming that\n`rhs` is less than the number of bits in `self`.\n\n# Safety\n\nThis results in undefined behavior if `rhs` is larger than\nor equal to the number of bits in `self`,\ni.e. when [`checked_shr`] would return `None`.\n\n[`checked_shr`]: u64::checked_shr","links":{"u64::checked_shr":"1:16025:8409"},"attrs":["#[unstable(feature = \"unchecked_math\", reason = \"niche optimization path\",\nissue = \"85122\",)]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]","#[rustc_const_unstable(feature = \"const_inherent_unchecked_arith\", issue =\n\"85122\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:4607:6805":{"id":"0:4607:6805","crate_id":0,"name":"DisplayHelp","span":{"filename":"src/error/kind.rs","begin":[337,4],"end":[337,15]},"visibility":"default","docs":"Not a true \"error\" as it means `--help` or similar was used.\nThe help message will be sent to `stdout`.\n\n**Note**: If the help is displayed due to an error (such as missing subcommands) it will\nbe sent to `stderr` instead of `stdout`.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet result = Command::new(\"prog\")\n    .try_get_matches_from(vec![\"prog\", \"--help\"]);\nassert!(result.is_err());\nassert_eq!(result.unwrap_err().kind(), ErrorKind::DisplayHelp);\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:13499:68125":{"id":"2:13499:68125","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"prim@char":"1:16005:8392","`DoubleEndedIterator`":"2:8447:120","self::pattern":"2:13053:8682","str::rmatch_indices":"1:16011:8397"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:49609:8701","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:8676","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3212-0:4627:127":{"id":"b:2:3212-0:4627:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3171:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3181:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4627:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3215:127","2:3216:1415"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4577:6886":{"id":"0:4577:6886","crate_id":0,"name":"UnknownArgument","span":{"filename":"src/error/kind.rs","begin":[33,4],"end":[33,19]},"visibility":"default","docs":"Occurs when a user provides a flag, option, argument or subcommand which isn't defined.\n\n# Examples\n\n```rust\n# use clap::{Command, arg, ErrorKind};\nlet result = Command::new(\"prog\")\n    .arg(arg!(--flag \"some flag\"))\n    .try_get_matches_from(vec![\"prog\", \"--other\"]);\nassert!(result.is_err());\nassert_eq!(result.unwrap_err().kind(), ErrorKind::UnknownArgument);\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:13537:1841":{"id":"2:13537:1841","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3380:2406":{"id":"0:3380:2406","crate_id":0,"name":"AllowNegativeNumbers","span":{"filename":"src/builder/app_settings.rs","begin":[102,4],"end":[102,24]},"visibility":"default","docs":"Deprecated, replaced with [`Command::allow_negative_numbers`] and\n[`Command::is_allow_negative_numbers_set`]","links":{"`Command::allow_negative_numbers`":"0:4231:1651","`Command::is_allow_negative_numbers_set`":"0:4231:1651"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:8399:136":{"id":"2:8399:136","crate_id":2,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8401:684"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"25:90:8916":{"id":"25:90:8916","crate_id":25,"name":"Fragment","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["25:91:1522","25:92:28338","25:93:28339"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10291:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:1364:6428":{"id":"0:1364:6428","crate_id":0,"name":"parse_ref","span":{"filename":"src/builder/value_parser.rs","begin":[612,4],"end":[617,43]},"visibility":"default","docs":"Parse the argument value\n\nWhen `arg` is `None`, an external subcommand value is being parsed.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["cmd",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Command","id":"0:755:1637","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}],["arg",{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Arg","id":"0:3803:1638","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["value",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"std::ffi::OsStr","id":"1:2941:179","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Value","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:1362:2241","args":null,"param_names":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"crate::Error","id":"0:4627:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:3439:8545":{"id":"2:3439:8545","crate_id":2,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3441:1236"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:4461:2251":{"id":"0:4461:2251","crate_id":0,"name":"NonEmptyStringValueParser","span":{"filename":"src/builder/value_parser.rs","begin":[1738,0],"end":[1738,39]},"visibility":"public","docs":"Parse non-empty string values\n\nSee also:\n- [`ValueParser::string`]\n\n# Example\n\nUsage:\n```rust\nlet mut cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"append\")\n            .value_parser(clap::builder::NonEmptyStringValueParser::new())\n            .required(true)\n    );\n\nlet m = cmd.try_get_matches_from_mut([\"cmd\", \"true\"]).unwrap();\nlet port: &String = m.get_one(\"append\")\n    .expect(\"required\");\nassert_eq!(port, \"true\");\n```\n\nSemantics:\n```rust\n# use std::ffi::OsStr;\n# use clap::builder::TypedValueParser;\n# let cmd = clap::Command::new(\"test\");\n# let arg = None;\nlet value_parser = clap::builder::NonEmptyStringValueParser::new();\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"random\")).unwrap(), \"random\");\nassert!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"\")).is_err());\n```","links":{"`ValueParser::string`":"0:1294:2242"},"attrs":["#[non_exhaustive]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":false,"fields":[],"impls":[]}},"2:31874:1446":{"id":"2:31874:1446","crate_id":2,"name":"unchecked_sub","span":null,"visibility":"public","docs":"Unchecked integer subtraction. Computes `self - rhs`, assuming overflow\ncannot occur.\n\n# Safety\n\nThis results in undefined behavior when\n`self - rhs > u64::MAX` or `self - rhs < u64::MIN`,\ni.e. when [`checked_sub`] would return `None`.\n\n[`checked_sub`]: u64::checked_sub","links":{"u64::checked_sub":"1:16025:8409"},"attrs":["#[unstable(feature = \"unchecked_math\", reason = \"niche optimization path\",\nissue = \"85122\",)]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]","#[rustc_const_unstable(feature = \"const_inherent_unchecked_arith\", issue =\n\"85122\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:6463:10770":{"id":"1:6463:10770","crate_id":1,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6464:28758","1:6465:14893","1:6466:28759","1:6467:28760","1:6468:28761","1:6469:28762"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10569:10744","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:31854:69504":{"id":"2:31854:69504","crate_id":2,"name":"BITS","span":null,"visibility":"public","docs":"The size of this integer type in bits.\n\n# Examples\n\n```\nassert_eq!(u64::BITS, 64);\n```","links":{},"attrs":["#[stable(feature = \"int_bits_const\", since = \"1.53.0\")]"],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"primitive","inner":"u32"},"default":"64"}},"0:3402:2444":{"id":"0:3402:2444","crate_id":0,"name":"AllowInvalidUtf8ForExternalSubcommands","span":{"filename":"src/builder/app_settings.rs","begin":[208,4],"end":[208,42]},"visibility":"default","docs":"Deprecated, replaced with [`Command::allow_invalid_utf8_for_external_subcommands`] and [`Command::is_allow_invalid_utf8_for_external_subcommands_set`]","links":{"`Command::is_allow_invalid_utf8_for_external_subcommands_set`":"0:4231:1651","`Command::allow_invalid_utf8_for_external_subcommands`":"0:4231:1651"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:4350:6318":{"id":"0:4350:6318","crate_id":0,"name":"FilePath","span":{"filename":"src/builder/value_hint.rs","begin":[38,4],"end":[38,12]},"visibility":"default","docs":"Path to a file.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:31865:29849":{"id":"2:31865:29849","crate_id":2,"name":"reverse_bits","span":null,"visibility":"public","docs":"Reverses the order of bits in the integer. The least significant bit becomes the most significant bit,\n                second least-significant bit becomes second most-significant bit, etc.\n\n# Examples\n\nBasic usage:\n\n```\nlet n = 0x1234567890123456u64;\nlet m = n.reverse_bits();\n\nassert_eq!(m, 0x6a2c48091e6a2c48);\nassert_eq!(0, 0u64.reverse_bits());\n```","links":{},"attrs":["#[stable(feature = \"reverse_bits\", since = \"1.37.0\")]","#[rustc_const_stable(feature = \"reverse_bits\", since = \"1.37.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:167:1645":{"id":"0:167:1645","crate_id":0,"name":"Args","span":{"filename":"src/derive.rs","begin":[393,0],"end":[404,1]},"visibility":"public","docs":"Parse a set of arguments into a user-defined container.\n\nImplementing this trait lets a parent container delegate argument parsing behavior to `Self`.\nwith:\n- `#[clap(flatten)] args: ChildArgs`: Attribute can only be used with struct fields that impl\n  `Args`.\n- `Variant(ChildArgs)`: No attribute is used with enum variants that impl `Args`.\n\nSee the [derive reference](crate::_derive) for attributes and best practices.\n\n**NOTE:** Deriving requires the [`derive` feature flag][crate::_features]\n\n# Example\n\n ```ignore\n#[derive(clap::Parser)]\nstruct Args {\n    #[clap(flatten)]\n    logging: LogArgs,\n}\n\n#[derive(clap::Args)]\nstruct LogArgs {\n    #[clap(long, short = 'v', parse(from_occurrences))]\n    verbose: i8,\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:168:2175","0:169:2178"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromArgMatches","id":"0:162:1647","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2076","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:1366:3229":{"id":"0:1366:3229","crate_id":0,"name":"possible_values","span":{"filename":"src/builder/value_parser.rs","begin":[635,4],"end":[639,5]},"visibility":"default","docs":"Reflect on enumerated value properties\n\nError checking should not be done with this; it is mostly targeted at user-facing\napplications like errors and completion.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2222","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"resolved_path","inner":{"name":"crate::PossibleValue","id":"0:4285:1656","args":{"angle_bracketed":{"args":[{"lifetime":"'static"}],"bindings":[]}},"param_names":[]}}}}}]}},"param_names":[{"outlives":"'_"}]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:139:2104":{"id":"0:139:2104","crate_id":0,"name":"try_update_from","span":{"filename":"src/derive.rs","begin":[146,4],"end":[155,5]},"visibility":"default","docs":"Update from iterator, return Err on error.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["itr",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4627:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"T"}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3171:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsString","id":"1:2938:180","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2887:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3280:220":{"id":"2:3280:220","crate_id":2,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:31852:6549":{"id":"2:31852:6549","crate_id":2,"name":"MIN","span":null,"visibility":"public","docs":"The smallest value that can be represented by this integer type.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(u64::MIN, 0);\n```","links":{},"attrs":["#[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]"],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"primitive","inner":"u64"},"default":"0"}},"2:3518:130":{"id":"2:3518:130","crate_id":2,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3520:376"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3521:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:77":{"id":"0:77","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[116,33],"end":[116,41]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::parser::OsValues","name":"OsValues","id":"0:4778:1660","glob":false}},"0:3300":{"id":"0:3300","crate_id":0,"name":null,"span":{"filename":"src/util/mod.rs","begin":[8,0],"end":[8,23]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::fnv::Key","name":"Key","id":"0:3222:2669","glob":false}},"0:129:2087":{"id":"0:129:2087","crate_id":0,"name":"try_parse","span":{"filename":"src/derive.rs","begin":[95,4],"end":[98,5]},"visibility":"default","docs":"Parse from `std::env::args_os()`, return Err on error.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4627:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3420:2485":{"id":"0:3420:2485","crate_id":0,"name":"DisableColoredHelp","span":{"filename":"src/builder/app_settings.rs","begin":[310,4],"end":[310,22]},"visibility":"default","docs":"Deprecated, replaced with [`Command::disable_colored_help`] and\n[`Command::is_disable_colored_help_set`]","links":{"`Command::disable_colored_help`":"0:4231:1651","`Command::is_disable_colored_help_set`":"0:4231:1651"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"22:196:8676":{"id":"22:196:8676","crate_id":22,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"22:114:10744","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6107:2614":{"id":"5:6107:2614","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:16011:8397"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13447:68119":{"id":"2:13447:68119","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:49723:8700","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13438:68118":{"id":"2:13438:68118","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"crate::ops::IndexMut":"2:3580:8547","str::slice_unchecked":"1:16011:8397","`str`":"1:16011:8397"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:1729":{"id":"0:1729","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[40,0],"end":[40,34]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"value_parser::ValueParser","name":"ValueParser","id":"0:1294:2242","glob":false}},"2:31942:69570":{"id":"2:31942:69570","crate_id":2,"name":"to_ne_bytes","span":null,"visibility":"public","docs":"Return the memory representation of this integer as a byte array in\nnative byte order.\n\nAs the target platform's native endianness is used, portable code\nshould use [`to_be_bytes`] or [`to_le_bytes`], as appropriate,\ninstead.\n\n\n\n[`to_be_bytes`]: Self::to_be_bytes\n[`to_le_bytes`]: Self::to_le_bytes\n\n# Examples\n\n```\nlet bytes = 0x1234567890123456u64.to_ne_bytes();\nassert_eq!(\n    bytes,\n    if cfg!(target_endian = \"big\") {\n        [0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\n    } else {\n        [0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\n    }\n);\n```","links":{"Self::to_be_bytes":"1:16025:8409","Self::to_le_bytes":"1:16025:8409"},"attrs":["#[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]","#[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"array","inner":{"type":{"kind":"primitive","inner":"u8"},"len":"8"}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3273:2076":{"id":"2:3273:2076","crate_id":2,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2925:124":{"id":"2:2925:124","crate_id":2,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2920:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3246:115":{"id":"2:3246:115","crate_id":2,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3247:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"23:22:8873":{"id":"23:22:8873","crate_id":23,"name":"Equivalent","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["23:24:8867"],"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2076","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:1750":{"id":"0:1750","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[47,0],"end":[47,38]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"value_parser::EnumValueParser","name":"EnumValueParser","id":"0:4402:2249","glob":false}},"2:13469:29891":{"id":"2:13469:29891","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"self::pattern":"2:13053:8682","prim@char":"1:16005:8392"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:12845:8685","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:8676","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3400:2008":{"id":"2:3400:2008","crate_id":2,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3402:181","2:3403:353"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1762":{"id":"0:1762","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[51,0],"end":[51,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"value_parser::PathBufValueParser","name":"PathBufValueParser","id":"0:4396:2253","glob":false}},"0:4562:1541":{"id":"0:4562:1541","crate_id":0,"name":"0","span":{"filename":"src/error/context.rs","begin":[54,11],"end":[54,16]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"primitive","inner":"isize"}},"0:70":{"id":"0:70","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[114,34],"end":[114,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::error::Result","name":"Result","id":"0:1854:205","glob":false}},"0:3428:2499":{"id":"0:3428:2499","crate_id":0,"name":"PropagateVersion","span":{"filename":"src/builder/app_settings.rs","begin":[352,4],"end":[352,20]},"visibility":"default","docs":"Deprecated, replaced with [`Command::propagate_version`] and [`Command::is_propagate_version_set`]","links":{"`Command::is_propagate_version_set`":"0:4231:1651","`Command::propagate_version`":"0:4231:1651"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:4737:7162":{"id":"0:4737:7162","crate_id":0,"name":"ValuesRef","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1400,0],"end":[1404,1]},"visibility":"public","docs":"Iterate over multiple values for an argument via [`ArgMatches::get_many`].\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ArgAction};\nlet m = Command::new(\"myapp\")\n    .arg(Arg::new(\"output\")\n        .short('o')\n        .action(ArgAction::Append)\n        .takes_value(true))\n    .get_matches_from(vec![\"myapp\", \"-o\", \"val1\", \"-o\", \"val2\"]);\n\nlet mut values = m.get_many::<String>(\"output\")\n    .unwrap()\n    .map(|s| s.as_str());\n\nassert_eq!(values.next(), Some(\"val1\"));\nassert_eq!(values.next(), Some(\"val2\"));\nassert_eq!(values.next(), None);\n```","links":{"`ArgMatches::get_many`":"0:4693:1642"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"2:13420:68115":{"id":"2:13420:68115","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:31953:69577":{"id":"2:31953:69577","crate_id":2,"name":"carrying_mul","span":null,"visibility":"public","docs":"Calculates the \"full multiplication\" `self * rhs + carry`\nwithout the possibility to overflow.\n\nThis returns the low-order (wrapping) bits and the high-order (overflow) bits\nof the result as two separate values, in that order.\n\nPerforms \"long multiplication\" which takes in an extra amount to add, and may return an\nadditional amount of overflow. This allows for chaining together multiple\nmultiplications to create \"big integers\" which represent larger values.\n\n# Examples\n\nBasic usage:\n\nPlease note that this example is shared between integer types.\nWhich explains why `u32` is used here.\n\n```\n#![feature(bigint_helper_methods)]\nassert_eq!(5u32.carrying_mul(2, 0), (10, 0));\nassert_eq!(5u32.carrying_mul(2, 10), (20, 0));\nassert_eq!(1_000_000_000u32.carrying_mul(10, 0), (1410065408, 2));\nassert_eq!(1_000_000_000u32.carrying_mul(10, 10), (1410065418, 2));\nassert_eq!(u64::MAX.carrying_mul(u64::MAX, u64::MAX), (0, u64::MAX));\n```\n\nIf `carry` is zero, this is similar to [`overflowing_mul`](Self::overflowing_mul),\nexcept that it gives the value of the overflow instead of just whether one happened:\n\n```\n#![feature(bigint_helper_methods)]\nlet r = u8::carrying_mul(7, 13, 0);\nassert_eq!((r.0, r.1 != 0), u8::overflowing_mul(7, 13));\nlet r = u8::carrying_mul(13, 42, 0);\nassert_eq!((r.0, r.1 != 0), u8::overflowing_mul(13, 42));\n```\n\nThe value of the first field in the returned tuple matches what you'd get\nby combining the [`wrapping_mul`](Self::wrapping_mul) and\n[`wrapping_add`](Self::wrapping_add) methods:\n\n```\n#![feature(bigint_helper_methods)]\nassert_eq!(\n    789_u16.carrying_mul(456, 123).0,\n    789_u16.wrapping_mul(456).wrapping_add(123),\n);\n```","links":{"Self::overflowing_mul":"1:16025:8409","Self::wrapping_mul":"1:16025:8409","Self::wrapping_add":"1:16025:8409"},"attrs":["#[unstable(feature = \"bigint_helper_methods\", issue = \"85532\")]","#[rustc_const_unstable(feature = \"bigint_helper_methods\", issue = \"85532\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}],["carry",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"u64"},{"kind":"primitive","inner":"u64"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3438:2515":{"id":"0:3438:2515","crate_id":0,"name":"NoAutoHelp","span":{"filename":"src/builder/app_settings.rs","begin":[394,4],"end":[394,14]},"visibility":"default","docs":"Deprecated, replaced with [`Arg::action`][super::Arg::action]","links":{"super::Arg::action":"0:3803:1638"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:1708":{"id":"0:1708","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[33,0],"end":[33,38]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"possible_value::PossibleValue","name":"PossibleValue","id":"0:4285:1656","glob":false}},"0:4523:6859":{"id":"0:4523:6859","crate_id":0,"name":"SuggestedCommand","span":{"filename":"src/error/context.rs","begin":[26,4],"end":[26,20]},"visibility":"default","docs":"Potential fix for the user","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:4674:7226":{"id":"0:4674:7226","crate_id":0,"name":"Downcast","span":{"filename":"src/parser/error.rs","begin":[10,4],"end":[15,5]},"visibility":"default","docs":"Failed to downcast `AnyValue` to the specified type","links":{},"attrs":["#[non_exhaustive]"],"deprecation":null,"kind":"variant","inner":{"variant_kind":"struct","variant_inner":["0:4675:7228","0:4676:616"]}},"1:5789:10732":{"id":"1:5789:10732","crate_id":1,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5790:28699"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:4609:6839":{"id":"0:4609:6839","crate_id":0,"name":"DisplayHelpOnMissingArgumentOrSubcommand","span":{"filename":"src/error/kind.rs","begin":[360,4],"end":[360,44]},"visibility":"default","docs":"Occurs when either an argument or a [`Subcommand`] is required, as defined by\n[`Command::arg_required_else_help`] , but the user did not provide\none.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ErrorKind, };\nlet result = Command::new(\"prog\")\n    .arg_required_else_help(true)\n    .subcommand(Command::new(\"config\")\n        .about(\"Used for configuration\")\n        .arg(Arg::new(\"config_file\")\n            .help(\"The configuration file to use\")))\n    .try_get_matches_from(vec![\"prog\"]);\nassert!(result.is_err());\nassert_eq!(result.unwrap_err().kind(), ErrorKind::DisplayHelpOnMissingArgumentOrSubcommand);\n```\n\n[`Subcommand`]: crate::Subcommand\n[`Command::arg_required_else_help`]: crate::Command::arg_required_else_help","links":{"crate::Command::arg_required_else_help":"0:4231:1651","crate::Subcommand":"0:170:1649"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:31897:29853":{"id":"2:31897:29853","crate_id":2,"name":"saturating_div","span":null,"visibility":"public","docs":"Saturating integer division. Computes `self / rhs`, saturating at the\nnumeric bounds instead of overflowing.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(5u64.saturating_div(2), 2);\n\n```\n\n```should_panic\nlet _ = 1u64.saturating_div(0);\n\n```","links":{},"attrs":["#[stable(feature = \"saturating_div\", since = \"1.58.0\")]","#[rustc_const_stable(feature = \"saturating_div\", since = \"1.58.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3398:2438":{"id":"0:3398:2438","crate_id":0,"name":"AllowExternalSubcommands","span":{"filename":"src/builder/app_settings.rs","begin":[188,4],"end":[188,28]},"visibility":"default","docs":"Deprecated, replaced with [`Command::allow_external_subcommands`] and\n[`Command::is_allow_external_subcommands_set`]","links":{"`Command::allow_external_subcommands`":"0:4231:1651","`Command::is_allow_external_subcommands_set`":"0:4231:1651"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:3515:8486":{"id":"2:3515:8486","crate_id":2,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3516:578"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:31912:69544":{"id":"2:31912:69544","crate_id":2,"name":"carrying_add","span":null,"visibility":"public","docs":"Calculates `self + rhs + carry` without the ability to overflow.\n\nPerforms \"ternary addition\" which takes in an extra bit to add, and may return an\nadditional bit of overflow. This allows for chaining together multiple additions\nto create \"big integers\" which represent larger values.\n\nThis can be thought of as a 64-bit \"full adder\", in the electronics sense.\n\n# Examples\n\nBasic usage\n\n```\n#![feature(bigint_helper_methods)]\nassert_eq!(5u64.carrying_add(2, false), (7, false));\nassert_eq!(5u64.carrying_add(2, true), (8, false));\nassert_eq!(u64::MAX.carrying_add(1, false), (0, true));\nassert_eq!(u64::MAX.carrying_add(0, true), (0, true));\nassert_eq!(u64::MAX.carrying_add(1, true), (1, true));\nassert_eq!(u64::MAX.carrying_add(u64::MAX, true), (u64::MAX, true));\n```\n\nIf `carry` is false, this method is equivalent to [`overflowing_add`](Self::overflowing_add):\n\n```\n#![feature(bigint_helper_methods)]\nassert_eq!(5_u64.carrying_add(2, false), 5_u64.overflowing_add(2));\nassert_eq!(u64::MAX.carrying_add(1, false), u64::MAX.overflowing_add(1));\n```","links":{"Self::overflowing_add":"1:16025:8409"},"attrs":["#[unstable(feature = \"bigint_helper_methods\", issue = \"85532\")]","#[rustc_const_unstable(feature = \"const_bigint_helper_methods\", issue =\n\"85532\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}],["carry",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"u64"},{"kind":"primitive","inner":"bool"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1943:1641":{"id":"0:1943:1641","crate_id":0,"name":"parser","span":{"filename":"src/parser/mod.rs","begin":[1,0],"end":[27,42]},"visibility":"public","docs":"[`Command`][crate::Command] line argument parser","links":{"crate::Command":"0:755:1637"},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:2799","0:2802","0:2806","0:2809","0:2812","0:2815","0:2819","0:2822"],"is_stripped":false}},"0:4000:3274":{"id":"0:4000:3274","crate_id":0,"name":"AllowInvalidUtf8","span":{"filename":"src/builder/arg_settings.rs","begin":[258,4],"end":[258,20]},"visibility":"default","docs":"Deprecated, replaced with [`Arg::allow_invalid_utf8`] and [`Arg::is_allow_invalid_utf8_set`]","links":{"`Arg::is_allow_invalid_utf8_set`":"0:3803:1638","`Arg::allow_invalid_utf8`":"0:3803:1638"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:10312:8586":{"id":"2:10312:8586","crate_id":2,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10313:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13427:304":{"id":"2:13427:304","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:16011:8397","`u8`":"1:16022:8406"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1612:6621":{"id":"0:1612:6621","crate_id":0,"name":"_ValueParserViaFactorySealed","span":{"filename":"src/builder/value_parser.rs","begin":[2057,4],"end":[2057,45]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:4548:6776":{"id":"0:4548:6776","crate_id":0,"name":"ContextValue","span":{"filename":"src/error/context.rs","begin":[44,0],"end":[55,1]},"visibility":"public","docs":"A piece of error information","links":{},"attrs":["#[non_exhaustive]"],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:4549:174","0:4551:6367","0:4554:216","0:4557:6843","0:4560:6871"],"impls":[]}},"2:13487:68122":{"id":"2:13487:68122","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:8676","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4579:6857":{"id":"0:4579:6857","crate_id":0,"name":"InvalidSubcommand","span":{"filename":"src/error/kind.rs","begin":[57,4],"end":[57,21]},"visibility":"default","docs":"Occurs when the user provides an unrecognized [`Subcommand`] which meets the threshold for\nbeing similar enough to an existing subcommand.\nIf it doesn't meet the threshold, or the 'suggestions' feature is disabled,\nthe more general [`UnknownArgument`] error is returned.\n\n# Examples\n\n ```\n# use clap::{Command, Arg, ErrorKind, };\nlet result = Command::new(\"prog\")\n    .subcommand(Command::new(\"config\")\n        .about(\"Used for configuration\")\n        .arg(Arg::new(\"config_file\")\n            .help(\"The configuration file to use\")))\n    .try_get_matches_from(vec![\"prog\", \"confi\"]);\nassert!(result.is_err());\nassert_eq!(result.unwrap_err().kind(), ErrorKind::InvalidSubcommand);\n```\n\n[`Subcommand`]: crate::Subcommand\n[`UnknownArgument`]: ErrorKind::UnknownArgument","links":{"crate::Subcommand":"0:170:1649","ErrorKind::UnknownArgument":"0:4574:1658"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:3341:8530":{"id":"2:3341:8530","crate_id":2,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3343:181","2:3344:1354"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1862:481":{"id":"0:1862:481","crate_id":0,"name":"context","span":{"filename":"src/error/mod.rs","begin":[98,4],"end":[100,5]},"visibility":"public","docs":"Additional information to further qualify the error","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"tuple","inner":[{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:4502:6775","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ContextValue","id":"0:4548:6776","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:31916:69548":{"id":"2:31916:69548","crate_id":2,"name":"abs_diff","span":null,"visibility":"public","docs":"Computes the absolute difference between `self` and `other`.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(100u64.abs_diff(80), 20u64);\nassert_eq!(100u64.abs_diff(110), 10u64);\n```","links":{},"attrs":["#[stable(feature = \"int_abs_diff\", since = \"1.60.0\")]","#[rustc_const_stable(feature = \"int_abs_diff\", since = \"1.60.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3418:2481":{"id":"0:3418:2481","crate_id":0,"name":"NextLineHelp","span":{"filename":"src/builder/app_settings.rs","begin":[299,4],"end":[299,16]},"visibility":"default","docs":"Deprecated, replaced with [`Command::next_line_help`] and [`Command::is_next_line_help_set`]","links":{"`Command::is_next_line_help_set`":"0:4231:1651","`Command::next_line_help`":"0:4231:1651"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"1:1079:1840":{"id":"1:1079:1840","crate_id":1,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:1080:4191","1:1081:11406","1:1082:21010","1:1083:2614","1:1084:1841","1:1085:21011","1:1086:21012"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:4348:4045":{"id":"0:4348:4045","crate_id":0,"name":"AnyPath","span":{"filename":"src/builder/value_hint.rs","begin":[36,4],"end":[36,11]},"visibility":"default","docs":"Any existing path.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:1735":{"id":"0:1735","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[42,0],"end":[42,44]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"value_parser::_AnonymousValueParser","name":"_AnonymousValueParser","id":"0:4474:2244","glob":false}},"0:4002:2951":{"id":"0:4002:2951","crate_id":0,"name":"Exclusive","span":{"filename":"src/builder/arg_settings.rs","begin":[267,4],"end":[267,13]},"visibility":"default","docs":"Deprecated, replaced with [`Arg::exclusive`] and [`Arg::is_exclusive_set`]","links":{"`Arg::exclusive`":"0:3803:1638","`Arg::is_exclusive_set`":"0:3803:1638"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"1:6794:10759":{"id":"1:6794:10759","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6795:13972"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10569:10744","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:3374:2375":{"id":"0:3374:2375","crate_id":0,"name":"IgnoreErrors","span":{"filename":"src/builder/app_settings.rs","begin":[40,4],"end":[40,16]},"visibility":"default","docs":"Deprecated, replaced with [`Command::ignore_errors`]","links":{"`Command::ignore_errors`":"0:4231:1651"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:31864:69510":{"id":"2:31864:69510","crate_id":2,"name":"swap_bytes","span":null,"visibility":"public","docs":"Reverses the byte order of the integer.\n\n# Examples\n\nBasic usage:\n\n```\nlet n = 0x1234567890123456u64;\nlet m = n.swap_bytes();\n\nassert_eq!(m, 0x5634129078563412);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8601:157":{"id":"2:8601:157","crate_id":2,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8602:2094","2:8603:922","2:8604:9694","2:8607:4636","2:8608:495","2:8610:2902","2:8613:7813","2:8614:9695","2:8615:9696","2:8616:5705","2:8618:8796","2:8620:9697","2:8621:9698","2:8623:841","2:8626:9699","2:8633:5645","2:8635:4015","2:8638:5927","2:8639:4219","2:8640:9700","2:8642:6090","2:8644:9701","2:8647:1307","2:8648:5905","2:8649:9702","2:8653:5707","2:8656:7602","2:8657:9703","2:8658:9704","2:8660:9705","2:8661:3433","2:8663:9706","2:8666:9707","2:8668:9708","2:8678:9709","2:8693:9710","2:8695:9711","2:8699:7921","2:8708:7775","2:8711:9712","2:8713:9713","2:8716:276","2:8723:294","2:8730:2214","2:8737:6835","2:8746:9714","2:8756:1014","2:8763:9715","2:8770:4226","2:8771:8043","2:8772:8566","2:8784:8565","2:8791:7995","2:8803:8564","2:8810:6736","2:8811:9716","2:8816:3921","2:8819:2217","2:8822:9717","2:8823:7648","2:8825:9718","2:8827:415","2:8830:9719","2:8833:997","2:8836:9720","2:8839:604","2:8842:9721","2:8845:907","2:8847:826","2:8849:792","2:8851:713","2:8853:696","2:8855:9722","2:8856:9723","2:8864:9724"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:4589:6874":{"id":"0:4589:6874","crate_id":0,"name":"TooManyValues","span":{"filename":"src/error/kind.rs","begin":[158,4],"end":[158,17]},"visibility":"default","docs":"Occurs when a user provides more values for an argument than were defined by setting\n[`Arg::max_values`].\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet result = Command::new(\"prog\")\n    .arg(Arg::new(\"arg\")\n        .max_values(2))\n    .try_get_matches_from(vec![\"prog\", \"too\", \"many\", \"values\"]);\nassert!(result.is_err());\nassert_eq!(result.unwrap_err().kind(), ErrorKind::TooManyValues);\n```\n[`Arg::max_values`]: crate::Arg::max_values()","links":{"crate::Arg::max_values()":"0:3803:1638"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:4557:6843":{"id":"0:4557:6843","crate_id":0,"name":"Strings","span":{"filename":"src/error/context.rs","begin":[52,4],"end":[52,24]},"visibility":"default","docs":"Many values","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7780:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]}},"0:4601:6865":{"id":"0:4601:6865","crate_id":0,"name":"MissingSubcommand","span":{"filename":"src/error/kind.rs","begin":[271,4],"end":[271,21]},"visibility":"default","docs":"Occurs when a subcommand is required (as defined by [`Command::subcommand_required`]),\nbut the user does not provide one.\n\n# Examples\n\n```rust\n# use clap::{Command, ErrorKind};\nlet err = Command::new(\"prog\")\n    .subcommand_required(true)\n    .subcommand(Command::new(\"test\"))\n    .try_get_matches_from(vec![\n        \"myprog\",\n    ]);\nassert!(err.is_err());\nassert_eq!(err.unwrap_err().kind(), ErrorKind::MissingSubcommand);\n# ;\n```\n\n[`Command::subcommand_required`]: crate::Command::subcommand_required","links":{"crate::Command::subcommand_required":"0:4231:1651"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:8886:8793":{"id":"2:8886:8793","crate_id":2,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Step","id":"2:7927:8783","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:31907:29943":{"id":"2:31907:29943","crate_id":2,"name":"wrapping_neg","span":null,"visibility":"public","docs":"Wrapping (modular) negation. Computes `-self`,\nwrapping around at the boundary of the type.\n\nSince unsigned types do not have negative equivalents\nall applications of this function will wrap (except for `-0`).\nFor values smaller than the corresponding signed type's maximum\nthe result is the same as casting the corresponding signed value.\nAny larger values are equivalent to `MAX + 1 - (val - MAX - 1)` where\n`MAX` is the corresponding signed type's maximum.\n\n# Examples\n\nBasic usage:\n\nPlease note that this example is shared between integer types.\nWhich explains why `i8` is used here.\n\n```\nassert_eq!(100i8.wrapping_neg(), -100);\nassert_eq!((-128i8).wrapping_neg(), -128);\n```","links":{},"attrs":["#[stable(feature = \"num_wrapping\", since = \"1.2.0\")]","#[rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4352:6320":{"id":"0:4352:6320","crate_id":0,"name":"DirPath","span":{"filename":"src/builder/value_hint.rs","begin":[40,4],"end":[40,11]},"visibility":"default","docs":"Path to a directory.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:4629:782":{"id":"0:4629:782","crate_id":0,"name":"kind","span":{"filename":"src/error/mod.rs","begin":[47,4],"end":[47,23]},"visibility":"public","docs":"Deprecated, replaced with [`Error::kind()`]","links":{"`Error::kind()`":"0:4627:127"},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4574:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"2:3216:1415":{"id":"2:3216:1415","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3181:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4511:6853":{"id":"0:4511:6853","crate_id":0,"name":"InvalidValue","span":{"filename":"src/error/context.rs","begin":[14,4],"end":[14,16]},"visibility":"default","docs":"Rejected values","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:31868:69513":{"id":"2:31868:69513","crate_id":2,"name":"to_be","span":null,"visibility":"public","docs":"Converts `self` to big endian from the target's endianness.\n\nOn big endian this is a no-op. On little endian the bytes are\nswapped.\n\n# Examples\n\nBasic usage:\n\n```\nlet n = 0x1Au64;\n\nif cfg!(target_endian = \"big\") {\n    assert_eq!(n.to_be(), n)\n} else {\n    assert_eq!(n.to_be(), n.swap_bytes())\n}\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1922:660":{"id":"0:1922:660","crate_id":0,"name":"fmt","span":{"filename":"src/error/mod.rs","begin":[1008,4],"end":[1017,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Formatter","id":"2:10251:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:10240:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4344:232":{"id":"0:4344:232","crate_id":0,"name":"Unknown","span":{"filename":"src/builder/value_hint.rs","begin":[32,4],"end":[32,11]},"visibility":"default","docs":"Default value if hint is not specified. Follows shell default behavior, which is usually\nauto-completing filenames.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:3349:2347":{"id":"0:3349:2347","crate_id":0,"name":"Help","span":{"filename":"src/builder/action.rs","begin":[223,4],"end":[223,8]},"visibility":"default","docs":"When encountered, display [`Command::print_help`][super::App::print_help]\n\nDepending on the flag, [`Command::print_long_help`][super::App::print_long_help] may be shown\n\n# Examples\n\n```rust\n# use clap::Command;\n# use clap::Arg;\nlet cmd = Command::new(\"mycmd\")\n    .arg(\n        Arg::new(\"special-help\")\n            .short('?')\n            .action(clap::ArgAction::Help)\n    );\n\n// Existing help still exists\nlet err = cmd.clone().try_get_matches_from([\"mycmd\", \"-h\"]).unwrap_err();\nassert_eq!(err.kind(), clap::error::ErrorKind::DisplayHelp);\n\n// New help available\nlet err = cmd.try_get_matches_from([\"mycmd\", \"-?\"]).unwrap_err();\nassert_eq!(err.kind(), clap::error::ErrorKind::DisplayHelp);\n```","links":{"super::App::print_help":"0:4231:1651","super::App::print_long_help":"0:4231:1651"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:4390:2252":{"id":"0:4390:2252","crate_id":0,"name":"OsStringValueParser","span":{"filename":"src/builder/value_parser.rs","begin":[724,0],"end":[724,33]},"visibility":"public","docs":"Implementation for [`ValueParser::os_string`]\n\nUseful for composing new [`TypedValueParser`]s","links":{"`ValueParser::os_string`":"0:1294:2242","`TypedValueParser`":"0:1362:2241"},"attrs":["#[non_exhaustive]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":false,"fields":[],"impls":[]}},"2:13543:68136":{"id":"2:13543:68136","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:16005:8392"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:49776:8697","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:31881:69523":{"id":"2:31881:69523","crate_id":2,"name":"log","span":null,"visibility":"public","docs":"Returns the logarithm of the number with respect to an arbitrary base,\nrounded down.\n\nThis method might not be optimized owing to implementation details;\n`log2` can produce results more efficiently for base 2, and `log10`\ncan produce results more efficiently for base 10.\n\n# Panics\n\nWhen the number is zero, or if the base is not at least 2;\nit panics in debug mode and the return value is 0 in release mode.\n\n# Examples\n\n```\n#![feature(int_log)]\nassert_eq!(5u64.log(5), 1);\n```","links":{},"attrs":["#[unstable(feature = \"int_log\", issue = \"70887\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]","#[track_caller]","#[allow(arithmetic_overflow)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["base",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"primitive","inner":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1867:2085":{"id":"0:1867:2085","crate_id":0,"name":"exit","span":{"filename":"src/error/mod.rs","begin":[119,4],"end":[137,5]},"visibility":"public","docs":"Prints the error and exits.\n\nDepending on the error kind, this either prints to `stderr` and exits with a status of `2`\nor prints to `stdout` and exits with a status of `0`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"never"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1362:2241":{"id":"0:1362:2241","crate_id":0,"name":"TypedValueParser","span":{"filename":"src/builder/value_parser.rs","begin":[605,0],"end":[640,1]},"visibility":"public","docs":"Parse/validate argument values","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:1363:6388","0:1364:6428","0:1365:2078","0:1366:3229"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2887:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3268:211","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3280:220","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"implementations":[]}},"2:13441:1907":{"id":"2:13441:1907","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:16005:8392"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49429:8691","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2423:7238":{"id":"0:2423:7238","crate_id":0,"name":"value_source","span":{"filename":"src/parser/matches/value_source.rs","begin":[1,0],"end":[11,1]},"visibility":{"restricted":{"parent":"0:2044:2079","path":"::parser::matches"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:4810:1661"],"is_stripped":true}},"2:10306:8588":{"id":"2:10306:8588","crate_id":2,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10307:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5739:10727":{"id":"1:5739:10727","crate_id":1,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5740:6220","1:5741:13977"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:3974:3312":{"id":"0:3974:3312","crate_id":0,"name":"UseValueDelimiter","span":{"filename":"src/builder/arg_settings.rs","begin":[115,4],"end":[115,21]},"visibility":"default","docs":"Deprecated, replaced with [`Arg::use_value_delimiter`] and\n[`Arg::is_use_value_delimiter_set`]","links":{"`Arg::use_value_delimiter`":"0:3803:1638","`Arg::is_use_value_delimiter_set`":"0:3803:1638"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:1711":{"id":"0:1711","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[34,0],"end":[34,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"value_hint::ValueHint","name":"ValueHint","id":"0:4343:1657","glob":false}},"1:5657:10748":{"id":"1:5657:10748","crate_id":1,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5658:12137","1:5659:6076"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10569:10744","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3405:8537":{"id":"2:3405:8537","crate_id":2,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3407:181","2:3408:356"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13528:68133":{"id":"2:13528:68133","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:13053:8682","prim@char":"1:16005:8392"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:8676","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:173:2194":{"id":"0:173:2194","crate_id":0,"name":"has_subcommand","span":{"filename":"src/derive.rs","begin":[447,4],"end":[447,42]},"visibility":"default","docs":"Test whether `Self` can parse a specific subcommand","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:3388:8538":{"id":"2:3388:8538","crate_id":2,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3389:181","2:3390:952"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13538:21011":{"id":"2:13538:21011","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:38":{"id":"0:38","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[109,70],"end":[109,80]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::derive::Subcommand","name":"Subcommand","id":"0:170:1649","glob":false}},"2:13505:5801":{"id":"2:13505:5801","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3434:2509":{"id":"0:3434:2509","crate_id":0,"name":"HelpExpected","span":{"filename":"src/builder/app_settings.rs","begin":[380,4],"end":[380,16]},"visibility":"default","docs":"Deprecated, replaced with [`Command::help_expected`]","links":{"`Command::help_expected`":"0:4231:1651"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:3416:2478":{"id":"0:3416:2478","crate_id":0,"name":"DontCollapseArgsInUsage","span":{"filename":"src/builder/app_settings.rs","begin":[289,4],"end":[289,27]},"visibility":"default","docs":"Deprecated, replaced with [`Command::dont_collapse_args_in_usage`] and\n[`Command::is_dont_collapse_args_in_usage_set`]","links":{"`Command::is_dont_collapse_args_in_usage_set`":"0:4231:1651","`Command::dont_collapse_args_in_usage`":"0:4231:1651"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:31877:69519":{"id":"2:31877:69519","crate_id":2,"name":"checked_div","span":null,"visibility":"public","docs":"Checked integer division. Computes `self / rhs`, returning `None`\nif `rhs == 0`.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(128u64.checked_div(2), Some(64));\nassert_eq!(1u64.checked_div(0), None);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_checked_int_div\", since = \"1.52.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:26":{"id":"0:26","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[109,24],"end":[109,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::derive::Args","name":"Args","id":"0:167:1645","glob":false}},"0:3406:2451":{"id":"0:3406:2451","crate_id":0,"name":"SubcommandsNegateReqs","span":{"filename":"src/builder/app_settings.rs","begin":[226,4],"end":[226,25]},"visibility":"default","docs":"Deprecated, replaced with [`Command::subcommand_negates_reqs`] and\n[`Command::is_subcommand_negates_reqs_set`]","links":{"`Command::subcommand_negates_reqs`":"0:4231:1651","`Command::is_subcommand_negates_reqs_set`":"0:4231:1651"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:13445:29890":{"id":"2:13445:29890","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"1:16011:8397"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:49742:8684","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4778:1660":{"id":"0:4778:1660","crate_id":0,"name":"OsValues","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1593,0],"end":[1597,1]},"visibility":"public","docs":"Deprecated, replaced with [`ArgMatches::get_many()`]","links":{"`ArgMatches::get_many()`":"0:4693:1642"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"2:31871:1440":{"id":"2:31871:1440","crate_id":2,"name":"unchecked_add","span":null,"visibility":"public","docs":"Unchecked integer addition. Computes `self + rhs`, assuming overflow\ncannot occur.\n\n# Safety\n\nThis results in undefined behavior when\n`self + rhs > u64::MAX` or `self + rhs < u64::MIN`,\ni.e. when [`checked_add`] would return `None`.\n\n[`checked_add`]: u64::checked_add","links":{"u64::checked_add":"1:16025:8409"},"attrs":["#[unstable(feature = \"unchecked_math\", reason = \"niche optimization path\",\nissue = \"85122\",)]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]","#[rustc_const_unstable(feature = \"const_inherent_unchecked_arith\", issue =\n\"85122\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:4551:6367":{"id":"0:4551:6367","crate_id":0,"name":"Bool","span":{"filename":"src/error/context.rs","begin":[48,4],"end":[48,14]},"visibility":"default","docs":"A single value","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"primitive","inner":"bool"}]}},"2:3168:74":{"id":"2:3168:74","crate_id":2,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3170:4628"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2076","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13078:8677":{"id":"2:13078:8677","crate_id":2,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13080:7599","2:13081:28556","2:13082:28557"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Searcher","id":"2:13072:8678","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13539:21012":{"id":"2:13539:21012","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13502:68126":{"id":"2:13502:68126","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:13053:8682","prim@char":"1:16005:8392","str::match_indices":"1:16011:8397","`DoubleEndedIterator`":"2:8447:120"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:49627:8702","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:8676","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:8676","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:8677","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:31908:69540":{"id":"2:31908:69540","crate_id":2,"name":"wrapping_shl","span":null,"visibility":"public","docs":"Panic-free bitwise shift-left; yields `self << mask(rhs)`,\nwhere `mask` removes any high-order bits of `rhs` that\nwould cause the shift to exceed the bitwidth of the type.\n\nNote that this is *not* the same as a rotate-left; the\nRHS of a wrapping shift-left is restricted to the range\nof the type, rather than the bits shifted out of the LHS\nbeing returned to the other end. The primitive integer\ntypes all implement a [`rotate_left`](Self::rotate_left) function,\nwhich may be what you want instead.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(1u64.wrapping_shl(7), 128);\nassert_eq!(1u64.wrapping_shl(128), 1);\n```","links":{"Self::rotate_left":"1:16025:8409"},"attrs":["#[stable(feature = \"num_wrapping\", since = \"1.2.0\")]","#[rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13435:27146":{"id":"2:13435:27146","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10933:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10933:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:2806":{"id":"0:2806","crate_id":0,"name":null,"span":{"filename":"src/parser/mod.rs","begin":[23,24],"end":[23,34]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::matches::ArgMatches","name":"ArgMatches","id":"0:4693:1642","glob":false}},"0:4595:6881":{"id":"0:4595:6881","crate_id":0,"name":"WrongNumberOfValues","span":{"filename":"src/error/kind.rs","begin":[216,4],"end":[216,23]},"visibility":"default","docs":"Occurs when the user provides a different number of values for an argument than what's\nbeen defined by setting [`Arg::number_of_values`] or than was implicitly set by\n[`Arg::value_names`].\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet result = Command::new(\"prog\")\n    .arg(Arg::new(\"some_opt\")\n        .long(\"opt\")\n        .takes_value(true)\n        .number_of_values(2))\n    .try_get_matches_from(vec![\"prog\", \"--opt\", \"wrong\"]);\nassert!(result.is_err());\nassert_eq!(result.unwrap_err().kind(), ErrorKind::WrongNumberOfValues);\n```\n\n[`Arg::number_of_values`]: crate::Arg::number_of_values()\n[`Arg::value_names`]: crate::Arg::value_names()","links":{"crate::Arg::value_names()":"0:3803:1638","crate::Arg::number_of_values()":"0:3803:1638"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:13426:68117":{"id":"2:13426:68117","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:2870:2666":{"id":"2:2870:2666","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4693:1642":{"id":"0:4693:1642","crate_id":0,"name":"ArgMatches","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[68,0],"end":[77,1]},"visibility":"public","docs":"Container for parse results.\n\nUsed to get information about the arguments that were supplied to the program at runtime by\nthe user. New instances of this struct are obtained by using the [`Command::get_matches`] family of\nmethods.\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg, ValueSource};\nlet matches = Command::new(\"MyApp\")\n    .arg(Arg::new(\"out\")\n        .long(\"output\")\n        .required(true)\n        .takes_value(true)\n        .default_value(\"-\"))\n    .arg(Arg::new(\"cfg\")\n        .short('c')\n        .takes_value(true))\n    .get_matches(); // builds the instance of ArgMatches\n\n// to get information about the \"cfg\" argument we created, such as the value supplied we use\n// various ArgMatches methods, such as [ArgMatches::get_one]\nif let Some(c) = matches.get_one::<String>(\"cfg\") {\n    println!(\"Value for -c: {}\", c);\n}\n\n// The ArgMatches::get_one method returns an Option because the user may not have supplied\n// that argument at runtime. But if we specified that the argument was \"required\" as we did\n// with the \"out\" argument, we can safely unwrap because `clap` verifies that was actually\n// used at runtime.\nprintln!(\"Value for --output: {}\", matches.get_one::<String>(\"out\").unwrap());\n\n// You can check the presence of an argument's values\nif matches.contains_id(\"out\") {\n    // However, if you want to know where the value came from\n    if matches.value_source(\"out\").expect(\"checked contains_id\") == ValueSource::CommandLine {\n        println!(\"`out` set by user\");\n    } else {\n        println!(\"`out` is defaulted\");\n    }\n}\n```\n[`Command::get_matches`]: crate::Command::get_matches()","links":{"crate::Command::get_matches()":"0:4231:1651"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:3345:2338":{"id":"0:3345:2338","crate_id":0,"name":"SetFalse","span":{"filename":"src/builder/action.rs","begin":[162,4],"end":[162,12]},"visibility":"default","docs":"When encountered, act as if `\"false\"` was encountered on the command-line\n\nIf no [`default_value`][super::Arg::default_value] is set, it will be `true`.\n\nNo value is allowed. To optionally accept a value, see\n[`Arg::default_missing_value`][super::Arg::default_missing_value]\n\n# Examples\n\n```rust\n# use clap::Command;\n# use clap::Arg;\nlet cmd = Command::new(\"mycmd\")\n    .arg(\n        Arg::new(\"flag\")\n            .long(\"flag\")\n            .action(clap::ArgAction::SetFalse)\n    );\n\nlet matches = cmd.clone().try_get_matches_from([\"mycmd\", \"--flag\", \"--flag\"]).unwrap();\nassert!(matches.contains_id(\"flag\"));\nassert_eq!(matches.occurrences_of(\"flag\"), 0);\nassert_eq!(\n    matches.get_one::<bool>(\"flag\").copied(),\n    Some(false)\n);\n\nlet matches = cmd.try_get_matches_from([\"mycmd\"]).unwrap();\nassert!(matches.contains_id(\"flag\"));\nassert_eq!(matches.occurrences_of(\"flag\"), 0);\nassert_eq!(\n    matches.get_one::<bool>(\"flag\").copied(),\n    Some(true)\n);\n```","links":{"super::Arg::default_value":"0:3803:1638","super::Arg::default_missing_value":"0:3803:1638"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:13449:2007":{"id":"2:13449:2007","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"self::pattern":"2:13053:8682","prim@char":"1:16005:8392"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:8676","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:31855:11339":{"id":"2:31855:11339","crate_id":2,"name":"from_str_radix","span":null,"visibility":"public","docs":"Converts a string slice in a given base to an integer.\n\nThe string is expected to be an optional `+` sign\nfollowed by digits.\nLeading and trailing whitespace represent an error.\nDigits are a subset of these characters, depending on `radix`:\n\n* `0-9`\n* `a-z`\n* `A-Z`\n\n# Panics\n\nThis function panics if `radix` is not in the range from 2 to 36.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(u64::from_str_radix(\"A\", 16), Ok(10));\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["radix",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}},{"type":{"kind":"resolved_path","inner":{"name":"ParseIntError","id":"2:24234:11341","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3890:1639":{"id":"0:3890:1639","crate_id":0,"name":"ArgGroup","span":{"filename":"src/builder/arg_group.rs","begin":[81,0],"end":[89,1]},"visibility":"public","docs":"Family of related [arguments].\n\nBy placing arguments in a logical group, you can create easier requirement and\nexclusion rules instead of having to list each argument individually, or when you want a rule\nto apply \"any but not all\" arguments.\n\nFor instance, you can make an entire `ArgGroup` required. If [`ArgGroup::multiple(true)`] is\nset, this means that at least one argument from that group must be present. If\n[`ArgGroup::multiple(false)`] is set (the default), one and *only* one must be present.\n\nYou can also do things such as name an entire `ArgGroup` as a [conflict] or [requirement] for\nanother argument, meaning any of the arguments that belong to that group will cause a failure\nif present, or must be present respectively.\n\nPerhaps the most common use of `ArgGroup`s is to require one and *only* one argument to be\npresent out of a given set. Imagine that you had multiple arguments, and you want one of them\nto be required, but making all of them required isn't feasible because perhaps they conflict\nwith each other. For example, lets say that you were building an application where one could\nset a given version number by supplying a string with an option argument, i.e.\n`--set-ver v1.2.3`, you also wanted to support automatically using a previous version number\nand simply incrementing one of the three numbers. So you create three flags `--major`,\n`--minor`, and `--patch`. All of these arguments shouldn't be used at one time but you want to\nspecify that *at least one* of them is used. For this, you can create a group.\n\nFinally, you may use `ArgGroup`s to pull a value from a group of arguments when you don't care\nexactly which argument was actually used at runtime.\n\n# Examples\n\nThe following example demonstrates using an `ArgGroup` to ensure that one, and only one, of\nthe arguments from the specified group is present at runtime.\n\n```rust\n# use clap::{Command, arg, ArgGroup, ErrorKind};\nlet result = Command::new(\"cmd\")\n    .arg(arg!(--\"set-ver\" <ver> \"set the version manually\").required(false))\n    .arg(arg!(--major           \"auto increase major\"))\n    .arg(arg!(--minor           \"auto increase minor\"))\n    .arg(arg!(--patch           \"auto increase patch\"))\n    .group(ArgGroup::new(\"vers\")\n         .args(&[\"set-ver\", \"major\", \"minor\", \"patch\"])\n         .required(true))\n    .try_get_matches_from(vec![\"cmd\", \"--major\", \"--patch\"]);\n// Because we used two args in the group it's an error\nassert!(result.is_err());\nlet err = result.unwrap_err();\nassert_eq!(err.kind(), ErrorKind::ArgumentConflict);\n```\nThis next example shows a passing parse of the same scenario\n\n```rust\n# use clap::{Command, arg, ArgGroup};\nlet result = Command::new(\"cmd\")\n    .arg(arg!(--\"set-ver\" <ver> \"set the version manually\").required(false))\n    .arg(arg!(--major           \"auto increase major\"))\n    .arg(arg!(--minor           \"auto increase minor\"))\n    .arg(arg!(--patch           \"auto increase patch\"))\n    .group(ArgGroup::new(\"vers\")\n         .args(&[\"set-ver\", \"major\", \"minor\",\"patch\"])\n         .required(true))\n    .try_get_matches_from(vec![\"cmd\", \"--major\"]);\nassert!(result.is_ok());\nlet matches = result.unwrap();\n// We may not know which of the args was used, so we can test for the group...\nassert!(matches.contains_id(\"vers\"));\n// we could also alternatively check each arg individually (not shown here)\n```\n[`ArgGroup::multiple(true)`]: ArgGroup::multiple()\n\n[`ArgGroup::multiple(false)`]: ArgGroup::multiple()\n[arguments]: crate::Arg\n[conflict]: crate::Arg::conflicts_with()\n[requirement]: crate::Arg::requires()","links":{"crate::Arg":"0:3803:1638","crate::Arg::conflicts_with()":"0:3803:1638","crate::Arg::requires()":"0:3803:1638","ArgGroup::multiple()":"0:3890:1639"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:3424:2492":{"id":"0:3424:2492","crate_id":0,"name":"DisableHelpSubcommand","span":{"filename":"src/builder/app_settings.rs","begin":[331,4],"end":[331,25]},"visibility":"default","docs":"Deprecated, replaced with [`Command::disable_help_subcommand`] and\n[`Command::is_disable_help_subcommand_set`]","links":{"`Command::is_disable_help_subcommand_set`":"0:4231:1651","`Command::disable_help_subcommand`":"0:4231:1651"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:4507:6846":{"id":"0:4507:6846","crate_id":0,"name":"PriorArg","span":{"filename":"src/error/context.rs","begin":[10,4],"end":[10,12]},"visibility":"default","docs":"Existing arguments","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:13542:10767":{"id":"2:13542:10767","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:16005:8392"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:49767:8696","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5058:1644":{"id":"0:5058:1644","crate_id":0,"name":"ColorChoice","span":{"filename":"src/util/color.rs","begin":[3,0],"end":[56,1]},"visibility":"public","docs":"Represents the color preferences for program output","links":{},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:5059:2023","0:5061:4888","0:5063:4889"],"impls":[]}},"a:2:3268:211-0:4627:127":{"id":"a:2:3268:211-0:4627:127","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3268:211","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4627:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3337:2317":{"id":"0:3337:2317","crate_id":0,"name":"Append","span":{"filename":"src/builder/action.rs","begin":[72,4],"end":[72,10]},"visibility":"default","docs":"When encountered, store the associated value(s) in [`ArgMatches`][crate::ArgMatches]\n\n# Examples\n\n```rust\n# use clap::Command;\n# use clap::Arg;\nlet cmd = Command::new(\"mycmd\")\n    .arg(\n        Arg::new(\"flag\")\n            .long(\"flag\")\n            .action(clap::ArgAction::Append)\n    );\n\nlet matches = cmd.try_get_matches_from([\"mycmd\", \"--flag\", \"value1\", \"--flag\", \"value2\"]).unwrap();\nassert!(matches.contains_id(\"flag\"));\nassert_eq!(matches.occurrences_of(\"flag\"), 0);\nassert_eq!(\n    matches.get_many::<String>(\"flag\").unwrap_or_default().map(|v| v.as_str()).collect::<Vec<_>>(),\n    vec![\"value1\", \"value2\"]\n);\n```","links":{"crate::ArgMatches":"0:4693:1642"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:2956:177":{"id":"2:2956:177","crate_id":2,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2957:415","2:2958:4226","2:2959:8043","2:2960:9686"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2925:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2966:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:92":{"id":"0:92","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[152,0],"end":[152,29]},"visibility":"public","docs":"Deprecated, replaced with [`ValueEnum`]","links":{"`ValueEnum`":"0:174:1650"},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"ValueEnum","name":"ArgEnum","id":"0:174:1650","glob":false}},"5:6105:8060":{"id":"5:6105:8060","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4673:7163":{"id":"0:4673:7163","crate_id":0,"name":"MatchesError","span":{"filename":"src/parser/error.rs","begin":[7,0],"end":[21,1]},"visibility":"public","docs":"Violation of [`ArgMatches`][crate::ArgMatches] assumptions","links":{"crate::ArgMatches":"0:4693:1642"},"attrs":["#[allow(missing_copy_implementations)]","#[non_exhaustive]"],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:4674:7226","0:4677:6886"],"impls":[]}},"2:8366:8794":{"id":"2:8366:8794","crate_id":2,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8368:9718"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:2868-0:4627:127":{"id":"b:2:2868-0:4627:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2076","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2862:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4627:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2870:2666"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4396:2253":{"id":"0:4396:2253","crate_id":0,"name":"PathBufValueParser","span":{"filename":"src/builder/value_parser.rs","begin":[766,0],"end":[766,32]},"visibility":"public","docs":"Implementation for [`ValueParser::path_buf`]\n\nUseful for composing new [`TypedValueParser`]s","links":{"`TypedValueParser`":"0:1362:2241","`ValueParser::path_buf`":"0:1294:2242"},"attrs":["#[non_exhaustive]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":false,"fields":[],"impls":[]}},"2:13484:64427":{"id":"2:13484:64427","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"str::splitn":"1:16011:8397","prim@char":"1:16005:8392","self::pattern":"2:13053:8682"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:49581:8707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:8676","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:8676","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:8677","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2440":{"id":"0:2440","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/mod.rs","begin":[10,0],"end":[10,34]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"value_source::ValueSource","name":"ValueSource","id":"0:4810:1661","glob":false}},"0:177:1838":{"id":"0:177:1838","crate_id":0,"name":"from_str","span":{"filename":"src/derive.rs","begin":[484,4],"end":[494,5]},"visibility":"default","docs":"Parse an argument into `Self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["input",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["ignore_case",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1919:6789":{"id":"0:1919:6789","crate_id":0,"name":"source","span":{"filename":"src/error/mod.rs","begin":[1002,4],"end":[1004,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(trivial_casts)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"error::Error","id":"1:2576:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[{"outlives":"'static"}]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4455:2248":{"id":"0:4455:2248","crate_id":0,"name":"BoolishValueParser","span":{"filename":"src/builder/value_parser.rs","begin":[1649,0],"end":[1649,32]},"visibility":"public","docs":"Parse bool-like string values, everything else is `true`\n\nSee also:\n- [`ValueParser::bool`] for different human readable bool representations\n- [`FalseyValueParser`] for assuming non-false is true\n\n# Example\n\nUsage:\n```rust\nlet mut cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"append\")\n            .value_parser(clap::builder::BoolishValueParser::new())\n            .required(true)\n    );\n\nlet m = cmd.try_get_matches_from_mut([\"cmd\", \"true\"]).unwrap();\nlet port: bool = *m.get_one(\"append\")\n    .expect(\"required\");\nassert_eq!(port, true);\n```\n\nSemantics:\n```rust\n# use std::ffi::OsStr;\n# use clap::builder::TypedValueParser;\n# let cmd = clap::Command::new(\"test\");\n# let arg = None;\nlet value_parser = clap::builder::BoolishValueParser::new();\nassert!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"random\")).is_err());\nassert!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"\")).is_err());\nassert!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"100\")).is_err());\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"true\")).unwrap(), true);\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"Yes\")).unwrap(), true);\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"oN\")).unwrap(), true);\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"1\")).unwrap(), true);\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"false\")).unwrap(), false);\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"No\")).unwrap(), false);\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"oFF\")).unwrap(), false);\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"0\")).unwrap(), false);\n```","links":{"`ValueParser::bool`":"0:1294:2242","`FalseyValueParser`":"0:4449:2250"},"attrs":["#[non_exhaustive]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":false,"fields":[],"impls":[]}},"0:4517:6878":{"id":"0:4517:6878","crate_id":0,"name":"MinValues","span":{"filename":"src/error/context.rs","begin":[20,4],"end":[20,13]},"visibility":"default","docs":"Minimum number of allowed values","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:13418:1892":{"id":"2:13418:1892","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3222:2669":{"id":"0:3222:2669","crate_id":0,"name":"Key","span":{"filename":"src/util/fnv.rs","begin":[9,0],"end":[11,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:3223:5824"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Hash","id":"2:10529:142","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10298:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:160:2133":{"id":"0:160:2133","crate_id":0,"name":"into_app_for_update","span":{"filename":"src/derive.rs","begin":[279,4],"end":[279,54]},"visibility":"default","docs":"Deprecated, replaced with `CommandFactory::command_for_update`","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Command","id":"0:755:1637","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:10302:8580":{"id":"2:10302:8580","crate_id":2,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10303:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:2424":{"id":"0:2424","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/mod.rs","begin":[6,0],"end":[6,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"any_value::AnyValueId","name":"AnyValueId","id":"0:4687:2366","glob":false}},"0:3390:2423":{"id":"0:3390:2423","crate_id":0,"name":"InferLongArgs","span":{"filename":"src/builder/app_settings.rs","begin":[148,4],"end":[148,17]},"visibility":"default","docs":"Deprecated, replaced with [`Command::infer_long_args`]","links":{"`Command::infer_long_args`":"0:4231:1651"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:1732":{"id":"0:1732","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[41,0],"end":[41,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"value_parser::ValueParserFactory","name":"ValueParserFactory","id":"0:1543:2243","glob":false}},"0:2738:6771":{"id":"0:2738:6771","crate_id":0,"name":"features","span":{"filename":"src/parser/features/mod.rs","begin":[1,0],"end":[1,27]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":[],"is_stripped":true}},"2:31946:69572":{"id":"2:31946:69572","crate_id":2,"name":"from_le_bytes","span":null,"visibility":"public","docs":"Create a native endian integer value from its representation\nas a byte array in little endian.\n\n\n\n# Examples\n\n```\nlet value = u64::from_le_bytes([0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]);\nassert_eq!(value, 0x1234567890123456);\n```\n\nWhen starting from a slice rather than an array, fallible conversion APIs can be used:\n\n```\nfn read_le_u64(input: &mut &[u8]) -> u64 {\n    let (int_bytes, rest) = input.split_at(std::mem::size_of::<u64>());\n    *input = rest;\n    u64::from_le_bytes(int_bytes.try_into().unwrap())\n}\n```","links":{},"attrs":["#[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]","#[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["bytes",{"kind":"array","inner":{"type":{"kind":"primitive","inner":"u8"},"len":"8"}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4627:127":{"id":"0:4627:127","crate_id":0,"name":"Error","span":{"filename":"src/error/mod.rs","begin":[40,0],"end":[54,1]},"visibility":"public","docs":"Command Line Argument Parser Error\n\nSee [`Command::error`] to create an error.\n\n[`Command::error`]: crate::Command::error","links":{"crate::Command::error":"0:4231:1651"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":["0:4629:782","0:4630:6787"],"impls":["0:1857","a:2:3268:211-0:4627:127","a:2:3309:5996-0:4627:127","a:2:9258:7235-0:4627:127","a:2:3280:220-0:4627:127","a:2:9259:7234-0:4627:127","b:2:3212-0:4627:127","b:2:3207-0:4627:127","b:2:2871-0:4627:127","b:2:4001-0:4627:127","b:2:2868-0:4627:127","b:2:3197-0:4627:127","b:2:3201-0:4627:127","b:5:6413-0:4627:127","0:4631","0:1914","0:1916","0:1918","0:1921"]}},"0:1606:2234":{"id":"0:1606:2234","crate_id":0,"name":"value_parser","span":{"filename":"src/builder/value_parser.rs","begin":[2043,0],"end":[2049,1]},"visibility":"public","docs":"Select a [`ValueParser`] implementation from the intended type\n\nTo register a custom type with this macro, implement [`ValueParserFactory`].\n\n# Example\n\nUsage:\n```rust\n# use std::path::PathBuf;\n# use std::path::Path;\nlet mut cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"output\")\n            .value_parser(clap::value_parser!(PathBuf))\n            .required(true)\n    );\n\nlet m = cmd.try_get_matches_from_mut([\"cmd\", \"file.txt\"]).unwrap();\nlet port: &PathBuf = m.get_one(\"output\")\n    .expect(\"required\");\nassert_eq!(port, Path::new(\"file.txt\"));\n```\n\nSupported types:\n```rust\n// Built-in types\nlet parser = clap::value_parser!(String);\nassert_eq!(format!(\"{:?}\", parser), \"ValueParser::string\");\nlet parser = clap::value_parser!(std::ffi::OsString);\nassert_eq!(format!(\"{:?}\", parser), \"ValueParser::os_string\");\nlet parser = clap::value_parser!(std::path::PathBuf);\nassert_eq!(format!(\"{:?}\", parser), \"ValueParser::path_buf\");\nlet parser = clap::value_parser!(u16).range(3000..);\nassert_eq!(format!(\"{:?}\", parser), \"RangedI64ValueParser { bounds: (Included(3000), Included(65535)), target: PhantomData }\");\nlet parser = clap::value_parser!(u64).range(3000..);\nassert_eq!(format!(\"{:?}\", parser), \"RangedU64ValueParser { bounds: (Included(3000), Unbounded), target: PhantomData }\");\n\n// FromStr types\nlet parser = clap::value_parser!(usize);\nassert_eq!(format!(\"{:?}\", parser), \"_AnonymousValueParser(ValueParser::other(usize))\");\n\n// ValueEnum types\n#[derive(Copy, Clone, Debug, PartialEq, Eq)]\nenum ColorChoice {\n    Always,\n    Auto,\n    Never,\n}\nimpl clap::ValueEnum for ColorChoice {\n    // ...\n#     fn value_variants<'a>() -> &'a [Self] {\n#         &[Self::Always, Self::Auto, Self::Never]\n#     }\n#     fn to_possible_value<'a>(&self) -> Option<clap::PossibleValue<'a>> {\n#         match self {\n#             Self::Always => Some(clap::PossibleValue::new(\"always\")),\n#             Self::Auto => Some(clap::PossibleValue::new(\"auto\")),\n#             Self::Never => Some(clap::PossibleValue::new(\"never\")),\n#         }\n#     }\n}\nlet parser = clap::value_parser!(ColorChoice);\nassert_eq!(format!(\"{:?}\", parser), \"EnumValueParser(PhantomData)\");\n```","links":{"`ValueParserFactory`":"0:1543:2243","`ValueParser`":"0:1294:2242"},"attrs":["#[macro_export]"],"deprecation":null,"kind":"macro","inner":"macro_rules! value_parser {\n    ($name:ty) => { ... };\n}"},"0:2430":{"id":"0:2430","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/mod.rs","begin":[8,0],"end":[8,31]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"arg_matches::ValuesRef","name":"ValuesRef","id":"0:4737:7162","glob":false}},"2:2873:27060":{"id":"2:2873:27060","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:31892:69532":{"id":"2:31892:69532","crate_id":2,"name":"checked_pow","span":null,"visibility":"public","docs":"Checked exponentiation. Computes `self.pow(exp)`, returning `None` if\noverflow occurred.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(2u64.checked_pow(5), Some(32));\nassert_eq!(u64::MAX.checked_pow(2), None);\n```","links":{},"attrs":["#[stable(feature = \"no_panic_pow\", since = \"1.34.0\")]","#[rustc_const_stable(feature = \"const_int_pow\", since = \"1.50.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["exp",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:31882:69524":{"id":"2:31882:69524","crate_id":2,"name":"log2","span":null,"visibility":"public","docs":"Returns the base 2 logarithm of the number, rounded down.\n\n# Panics\n\nWhen the number is zero it panics in debug mode and\nthe return value is 0 in release mode.\n\n# Examples\n\n```\n#![feature(int_log)]\nassert_eq!(2u64.log2(), 1);\n```","links":{},"attrs":["#[unstable(feature = \"int_log\", issue = \"70887\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]","#[track_caller]","#[allow(arithmetic_overflow)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3207-0:4627:127":{"id":"b:2:3207-0:4627:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3181:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3177:228","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4627:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3210:127","2:3211:1416"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1702":{"id":"0:1702","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[31,33],"end":[31,44]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"arg_settings::ArgSettings","name":"ArgSettings","id":"0:3957:1655","glob":false}},"1:6791:10757":{"id":"1:6791:10757","crate_id":1,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6792:28782","1:6793:28783"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10569:10744","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:1851":{"id":"0:1851","crate_id":0,"name":null,"span":{"filename":"src/error/mod.rs","begin":[27,0],"end":[27,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"kind::ErrorKind","name":"ErrorKind","id":"0:4574:1658","glob":false}},"2:31888:69530":{"id":"2:31888:69530","crate_id":2,"name":"checked_shl","span":null,"visibility":"public","docs":"Checked shift left. Computes `self << rhs`, returning `None`\nif `rhs` is larger than or equal to the number of bits in `self`.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(0x1u64.checked_shl(4), Some(0x10));\nassert_eq!(0x10u64.checked_shl(129), None);\n```","links":{},"attrs":["#[stable(feature = \"wrapping\", since = \"1.7.0\")]","#[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.47.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1744":{"id":"0:1744","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[45,0],"end":[45,38]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"value_parser::BoolValueParser","name":"BoolValueParser","id":"0:4443:2247","glob":false}},"2:3375:8533":{"id":"2:3375:8533","crate_id":2,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3377:893"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3165:75":{"id":"2:3165:75","crate_id":2,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3167:305"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2076","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:80":{"id":"0:80","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[116,43],"end":[116,54]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::parser::ValueSource","name":"ValueSource","id":"0:4810:1661","glob":false}},"2:13475:68120":{"id":"2:13475:68120","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"str::split":"1:16011:8397","self::pattern":"2:13053:8682","`DoubleEndedIterator`":"2:8447:120","str::rsplit_terminator":"1:16011:8397","prim@char":"1:16005:8392"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:49509:8710","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:8676","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:31894:69533":{"id":"2:31894:69533","crate_id":2,"name":"saturating_add_signed","span":null,"visibility":"public","docs":"Saturating addition with a signed integer. Computes `self + rhs`,\nsaturating at the numeric bounds instead of overflowing.\n\n# Examples\n\nBasic usage:\n\n```\n# #![feature(mixed_integer_ops)]\nassert_eq!(1u64.saturating_add_signed(2), 3);\nassert_eq!(1u64.saturating_add_signed(-2), 0);\nassert_eq!((u64::MAX - 2).saturating_add_signed(4), u64::MAX);\n```","links":{},"attrs":["#[unstable(feature = \"mixed_integer_ops\", issue = \"87840\")]","#[rustc_const_unstable(feature = \"mixed_integer_ops\", issue = \"87840\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"i64"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3336:8525":{"id":"2:3336:8525","crate_id":2,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3338:181","2:3339:265"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:3351:2357":{"id":"0:3351:2357","crate_id":0,"name":"Version","span":{"filename":"src/builder/action.rs","begin":[249,4],"end":[249,11]},"visibility":"default","docs":"When encountered, display [`Command::version`][super::App::version]\n\nDepending on the flag, [`Command::long_version`][super::App::long_version] may be shown\n\n# Examples\n\n```rust\n# use clap::Command;\n# use clap::Arg;\nlet cmd = Command::new(\"mycmd\")\n    .version(\"1.0.0\")\n    .arg(\n        Arg::new(\"special-version\")\n            .long(\"special-version\")\n            .action(clap::ArgAction::Version)\n    );\n\n// Existing help still exists\nlet err = cmd.clone().try_get_matches_from([\"mycmd\", \"--version\"]).unwrap_err();\nassert_eq!(err.kind(), clap::error::ErrorKind::DisplayVersion);\n\n// New help available\nlet err = cmd.try_get_matches_from([\"mycmd\", \"--special-version\"]).unwrap_err();\nassert_eq!(err.kind(), clap::error::ErrorKind::DisplayVersion);\n```","links":{"super::App::version":"0:4231:1651","super::App::long_version":"0:4231:1651"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:31903:29938":{"id":"2:31903:29938","crate_id":2,"name":"wrapping_div","span":null,"visibility":"public","docs":"Wrapping (modular) division. Computes `self / rhs`.\nWrapped division on unsigned types is just normal division.\nThere's no way wrapping could ever happen.\nThis function exists, so that all operations\nare accounted for in the wrapping operations.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(100u64.wrapping_div(10), 10);\n```","links":{},"attrs":["#[stable(feature = \"num_wrapping\", since = \"1.2.0\")]","#[rustc_const_stable(feature = \"const_wrapping_int_methods\", since =\n\"1.52.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8412:8487":{"id":"2:8412:8487","crate_id":2,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8414:2799","2:8416:9692","2:8417:9693"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:156:2128":{"id":"0:156:2128","crate_id":0,"name":"into_app","span":{"filename":"src/derive.rs","begin":[263,4],"end":[263,43]},"visibility":"default","docs":"Deprecated, replaced with `CommandFactory::command`","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Command","id":"0:755:1637","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:31886:69528":{"id":"2:31886:69528","crate_id":2,"name":"checked_log10","span":null,"visibility":"public","docs":"Returns the base 10 logarithm of the number, rounded down.\n\nReturns `None` if the number is zero.\n\n# Examples\n\n```\n#![feature(int_log)]\nassert_eq!(10u64.checked_log10(), Some(1));\n```","links":{},"attrs":["#[unstable(feature = \"int_log\", issue = \"70887\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u32"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3999:68":{"id":"2:3999:68","crate_id":2,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4000:1428"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"2:3491:116":{"id":"2:3491:116","crate_id":2,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3492:221","2:3493:543"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1915:681":{"id":"0:1915:681","crate_id":0,"name":"from","span":{"filename":"src/error/mod.rs","begin":[989,4],"end":[991,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["e",{"kind":"resolved_path","inner":{"name":"io::Error","id":"1:4084:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3200:2364":{"id":"2:3200:2364","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:3174:135"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:31909:69541":{"id":"2:31909:69541","crate_id":2,"name":"wrapping_shr","span":null,"visibility":"public","docs":"Panic-free bitwise shift-right; yields `self >> mask(rhs)`,\nwhere `mask` removes any high-order bits of `rhs` that\nwould cause the shift to exceed the bitwidth of the type.\n\nNote that this is *not* the same as a rotate-right; the\nRHS of a wrapping shift-right is restricted to the range\nof the type, rather than the bits shifted out of the LHS\nbeing returned to the other end. The primitive integer\ntypes all implement a [`rotate_right`](Self::rotate_right) function,\nwhich may be what you want instead.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(128u64.wrapping_shr(7), 1);\nassert_eq!(128u64.wrapping_shr(128), 128);\n```","links":{"Self::rotate_right":"1:16025:8409"},"attrs":["#[stable(feature = \"num_wrapping\", since = \"1.2.0\")]","#[rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:31853:6550":{"id":"2:31853:6550","crate_id":2,"name":"MAX","span":null,"visibility":"public","docs":"The largest value that can be represented by this integer type\n(2<sup>64</sup> &minus; 1)\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(u64::MAX, 18446744073709551615);\n```","links":{},"attrs":["#[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]"],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"primitive","inner":"u64"},"default":"!0"}},"0:5063:4889":{"id":"0:5063:4889","crate_id":0,"name":"Never","span":{"filename":"src/util/color.rs","begin":[55,4],"end":[55,9]},"visibility":"default","docs":"Disables colored output no matter if the output is going to a terminal/TTY, or not.\n\n# Platform Specific\n\nThis setting only applies to Unix, Linux, and macOS (i.e. non-Windows platforms)\n\n# Examples\n\n ```no_run\n# use clap::{Command, ColorChoice};\nCommand::new(\"myprog\")\n    .color(ColorChoice::Never)\n    .get_matches();\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:67":{"id":"0:67","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[114,23],"end":[114,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::error::ErrorKind","name":"ErrorKind","id":"0:4574:1658","glob":false}},"2:22837:11132":{"id":"2:22837:11132","crate_id":2,"name":"SimdUint","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22838:21676","2:22839:1226","2:22840:1227","2:22841:21695","2:22842:21696","2:22843:21697","2:22844:21698","2:22845:21704","2:22846:21705","2:22847:21706"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3278:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22850:10744","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3647:6357":{"id":"2:3647:6357","crate_id":2,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3649:6542","2:3650:6547","2:3651:2007"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2076","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"b:2:2871-0:4627:127":{"id":"b:2:2871-0:4627:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2076","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2865:8562","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4627:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2873:27060"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3378:2402":{"id":"0:3378:2402","crate_id":0,"name":"AllowHyphenValues","span":{"filename":"src/builder/app_settings.rs","begin":[91,4],"end":[91,21]},"visibility":"default","docs":"Deprecated, replaced with [`Command::allow_hyphen_values`] and\n[`Arg::is_allow_hyphen_values_set`]","links":{"`Arg::is_allow_hyphen_values_set`":"0:3803:1638","`Command::allow_hyphen_values`":"0:4231:1651"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:1618:6625":{"id":"0:1618:6625","crate_id":0,"name":"_ValueParserViaFromStrSealed","span":{"filename":"src/builder/value_parser.rs","begin":[2063,4],"end":[2063,45]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:4384:2240":{"id":"0:4384:2240","crate_id":0,"name":"StringValueParser","span":{"filename":"src/builder/value_parser.rs","begin":[676,0],"end":[676,31]},"visibility":"public","docs":"Implementation for [`ValueParser::string`]\n\nUseful for composing new [`TypedValueParser`]s","links":{"`TypedValueParser`":"0:1362:2241","`ValueParser::string`":"0:1294:2242"},"attrs":["#[non_exhaustive]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":false,"fields":[],"impls":[]}},"2:31915:69547":{"id":"2:31915:69547","crate_id":2,"name":"borrowing_sub","span":null,"visibility":"public","docs":"Calculates `self - rhs - borrow` without the ability to overflow.\n\nPerforms \"ternary subtraction\" which takes in an extra bit to subtract, and may return\nan additional bit of overflow. This allows for chaining together multiple subtractions\nto create \"big integers\" which represent larger values.\n\n# Examples\n\nBasic usage\n\n```\n#![feature(bigint_helper_methods)]\nassert_eq!(5u64.borrowing_sub(2, false), (3, false));\nassert_eq!(5u64.borrowing_sub(2, true), (2, false));\nassert_eq!(0u64.borrowing_sub(1, false), (u64::MAX, true));\nassert_eq!(0u64.borrowing_sub(1, true), (u64::MAX - 1, true));\n```","links":{},"attrs":["#[unstable(feature = \"bigint_helper_methods\", issue = \"85532\")]","#[rustc_const_unstable(feature = \"const_bigint_helper_methods\", issue =\n\"85532\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}],["borrow",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"u64"},{"kind":"primitive","inner":"bool"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3177:228":{"id":"2:3177:228","crate_id":2,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3179:127","2:3180:1416"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13446:5800":{"id":"2:13446:5800","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:49713:8699","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13448:29669":{"id":"2:13448:29669","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:49751:8683","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13781:150":{"id":"2:13781:150","crate_id":2,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13782:181","2:13783:150","2:13784:767"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:4531:6889":{"id":"0:4531:6889","crate_id":0,"name":"TrailingArg","span":{"filename":"src/error/context.rs","begin":[34,4],"end":[34,15]},"visibility":"default","docs":"Trailing argument","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"a:2:9258:7235-0:4627:127":{"id":"a:2:9258:7235-0:4627:127","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9258:7235","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4627:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"0:2456":{"id":"0:2456","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/mod.rs","begin":[17,32],"end":[17,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"import","inner":{"source":"arg_matches::Values","name":"Values","id":"0:4760:1662","glob":false}},"2:31913:69545":{"id":"2:31913:69545","crate_id":2,"name":"overflowing_add_signed","span":null,"visibility":"public","docs":"Calculates `self` + `rhs` with a signed `rhs`\n\nReturns a tuple of the addition along with a boolean indicating\nwhether an arithmetic overflow would occur. If an overflow would\nhave occurred then the wrapped value is returned.\n\n# Examples\n\nBasic usage:\n\n```\n# #![feature(mixed_integer_ops)]\nassert_eq!(1u64.overflowing_add_signed(2), (3, false));\nassert_eq!(1u64.overflowing_add_signed(-2), (u64::MAX, true));\nassert_eq!((u64::MAX - 2).overflowing_add_signed(4), (1, true));\n```","links":{},"attrs":["#[unstable(feature = \"mixed_integer_ops\", issue = \"87840\")]","#[rustc_const_unstable(feature = \"mixed_integer_ops\", issue = \"87840\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"i64"}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"u64"},{"kind":"primitive","inner":"bool"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4632:660":{"id":"0:4632:660","crate_id":0,"name":"fmt","span":{"filename":"src/error/mod.rs","begin":[39,9],"end":[39,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10251:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10240:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1861:782":{"id":"0:1861:782","crate_id":0,"name":"kind","span":{"filename":"src/error/mod.rs","begin":[93,4],"end":[95,5]},"visibility":"public","docs":"Type of error for programmatic processing","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4574:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13516:2767":{"id":"2:13516:2767","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:16005:8392","self::pattern":"2:13053:8682"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:8676","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1917:681":{"id":"0:1917:681","crate_id":0,"name":"from","span":{"filename":"src/error/mod.rs","begin":[995,4],"end":[997,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["e",{"kind":"resolved_path","inner":{"name":"fmt::Error","id":"2:48558:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13425:6076":{"id":"2:13425:6076","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12524:8687"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:31948:69573":{"id":"2:31948:69573","crate_id":2,"name":"from_ne_bytes","span":null,"visibility":"public","docs":"Create a native endian integer value from its memory representation\nas a byte array in native endianness.\n\nAs the target platform's native endianness is used, portable code\nlikely wants to use [`from_be_bytes`] or [`from_le_bytes`], as\nappropriate instead.\n\n[`from_be_bytes`]: Self::from_be_bytes\n[`from_le_bytes`]: Self::from_le_bytes\n\n\n\n# Examples\n\n```\nlet value = u64::from_ne_bytes(if cfg!(target_endian = \"big\") {\n    [0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\n} else {\n    [0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\n});\nassert_eq!(value, 0x1234567890123456);\n```\n\nWhen starting from a slice rather than an array, fallible conversion APIs can be used:\n\n```\nfn read_ne_u64(input: &mut &[u8]) -> u64 {\n    let (int_bytes, rest) = input.split_at(std::mem::size_of::<u64>());\n    *input = rest;\n    u64::from_ne_bytes(int_bytes.try_into().unwrap())\n}\n```","links":{"Self::from_be_bytes":"1:16025:8409","Self::from_le_bytes":"1:16025:8409"},"attrs":["#[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]","#[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["bytes",{"kind":"array","inner":{"type":{"kind":"primitive","inner":"u8"},"len":"8"}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3970:2502":{"id":"0:3970:2502","crate_id":0,"name":"Hidden","span":{"filename":"src/builder/arg_settings.rs","begin":[96,4],"end":[96,10]},"visibility":"default","docs":"Deprecated, replaced with [`Arg::hide`] and [`Arg::is_hide_set`]","links":{"`Arg::is_hide_set`":"0:3803:1638","`Arg::hide`":"0:3803:1638"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:4356:6324":{"id":"0:4356:6324","crate_id":0,"name":"CommandName","span":{"filename":"src/builder/value_hint.rs","begin":[44,4],"end":[44,15]},"visibility":"default","docs":"Name of a command, without arguments. May be relative to PATH, or full path to executable.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:1726":{"id":"0:1726","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[39,0],"end":[39,39]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"value_parser::TypedValueParser","name":"TypedValueParser","id":"0:1362:2241","glob":false}},"2:3363:8528":{"id":"2:3363:8528","crate_id":2,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3364:181","2:3365:913"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6085:1873":{"id":"5:6085:1873","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:8676","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3357:8529":{"id":"2:3357:8529","crate_id":2,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3359:181","2:3360:1102"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8882:8774":{"id":"2:8882:8774","crate_id":2,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"a:2:9259:7234-0:4627:127":{"id":"a:2:9259:7234-0:4627:127","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9259:7234","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4627:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"0:3988:2904":{"id":"0:3988:2904","crate_id":0,"name":"Last","span":{"filename":"src/builder/arg_settings.rs","begin":[183,4],"end":[183,8]},"visibility":"default","docs":"Deprecated, replaced with [`Arg::last`] and [`Arg::is_last_set`]","links":{"`Arg::last`":"0:3803:1638","`Arg::is_last_set`":"0:3803:1638"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:13417:793":{"id":"2:13417:793","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:16005:8392"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:13":{"id":"0:13","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[100,30],"end":[100,38]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::builder::ArgGroup","name":"ArgGroup","id":"0:3890:1639","glob":false}},"2:31929:69560":{"id":"2:31929:69560","crate_id":2,"name":"div_floor","span":null,"visibility":"public","docs":"Calculates the quotient of `self` and `rhs`, rounding the result towards negative infinity.\n\nThis is the same as performing `self / rhs` for all unsigned integers.\n\n# Panics\n\nThis function will panic if `rhs` is zero.\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(int_roundings)]\nassert_eq!(7_u64.div_floor(4), 1);\n```","links":{},"attrs":["#[unstable(feature = \"int_roundings\", issue = \"88581\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4811:7651":{"id":"0:4811:7651","crate_id":0,"name":"DefaultValue","span":{"filename":"src/parser/matches/value_source.rs","begin":[6,4],"end":[6,16]},"visibility":"default","docs":"Value came [`Arg::default_value`][crate::Arg::default_value]","links":{"crate::Arg::default_value":"0:3803:1638"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:1839:481":{"id":"0:1839:481","crate_id":0,"name":"context","span":{"filename":"src/error/context.rs","begin":[1,0],"end":[55,1]},"visibility":{"restricted":{"parent":"0:1777:1640","path":"::error"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:4502:6775","0:4548:6776"],"is_stripped":true}},"2:31935:69566":{"id":"2:31935:69566","crate_id":2,"name":"next_power_of_two","span":null,"visibility":"public","docs":"Returns the smallest power of two greater than or equal to `self`.\n\nWhen return value overflows (i.e., `self > (1 << (N-1))` for type\n`uN`), it panics in debug mode and the return value is wrapped to 0 in\nrelease mode (the only situation in which method can return 0).\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(2u64.next_power_of_two(), 2);\nassert_eq!(3u64.next_power_of_two(), 4);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_int_pow\", since = \"1.50.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3982:2402":{"id":"0:3982:2402","crate_id":0,"name":"AllowHyphenValues","span":{"filename":"src/builder/arg_settings.rs","begin":[154,4],"end":[154,21]},"visibility":"default","docs":"Deprecated, replaced with [`Arg::allow_hyphen_values`] and\n[`Arg::is_allow_hyphen_values_set`]","links":{"`Arg::allow_hyphen_values`":"0:3803:1638","`Arg::is_allow_hyphen_values_set`":"0:3803:1638"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:4402:2249":{"id":"0:4402:2249","crate_id":0,"name":"EnumValueParser","span":{"filename":"src/builder/value_parser.rs","begin":[869,0],"end":[871,2]},"visibility":"public","docs":"Parse an [`ValueEnum`][crate::ValueEnum] value.\n\nSee also:\n- [`PossibleValuesParser`]\n\n# Example\n\n```rust\n# use std::ffi::OsStr;\n# use clap::builder::TypedValueParser;\n# let cmd = clap::Command::new(\"test\");\n# let arg = None;\n\n#[derive(Copy, Clone, Debug, PartialEq, Eq)]\nenum ColorChoice {\n    Always,\n    Auto,\n    Never,\n}\n\nimpl clap::ValueEnum for ColorChoice {\n    fn value_variants<'a>() -> &'a [Self] {\n        &[Self::Always, Self::Auto, Self::Never]\n    }\n\n    fn to_possible_value<'a>(&self) -> Option<clap::PossibleValue<'a>> {\n        match self {\n            Self::Always => Some(clap::PossibleValue::new(\"always\")),\n            Self::Auto => Some(clap::PossibleValue::new(\"auto\")),\n            Self::Never => Some(clap::PossibleValue::new(\"never\")),\n        }\n    }\n}\n\n// Usage\nlet mut cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"color\")\n            .value_parser(clap::builder::EnumValueParser::<ColorChoice>::new())\n            .required(true)\n    );\n\nlet m = cmd.try_get_matches_from_mut([\"cmd\", \"always\"]).unwrap();\nlet port: ColorChoice = *m.get_one(\"color\")\n    .expect(\"required\");\nassert_eq!(port, ColorChoice::Always);\n\n// Semantics\nlet value_parser = clap::builder::EnumValueParser::<ColorChoice>::new();\n// or\nlet value_parser = clap::value_parser!(ColorChoice);\nassert!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"random\")).is_err());\nassert!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"\")).is_err());\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"always\")).unwrap(), ColorChoice::Always);\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"auto\")).unwrap(), ColorChoice::Auto);\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"never\")).unwrap(), ColorChoice::Never);\n```","links":{"`PossibleValuesParser`":"0:4412:2237","crate::ValueEnum":"0:174:1650"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"tuple","generics":{"params":[{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"crate::ValueEnum","id":"0:174:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2887:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3268:211","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3280:220","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:4513:6872":{"id":"0:4513:6872","crate_id":0,"name":"ActualNumValues","span":{"filename":"src/error/context.rs","begin":[16,4],"end":[16,19]},"visibility":"default","docs":"Number of values present","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:51":{"id":"0:51","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[113,35],"end":[113,46]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::builder::AppSettings","name":"AppSettings","id":"0:3373:1653","glob":false}},"22:92:12199":{"id":"22:92:12199","crate_id":22,"name":"OsStringBytes","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["22:93:69297","22:94:69298"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"22:114:10744","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:31876:1442":{"id":"2:31876:1442","crate_id":2,"name":"unchecked_mul","span":null,"visibility":"public","docs":"Unchecked integer multiplication. Computes `self * rhs`, assuming overflow\ncannot occur.\n\n# Safety\n\nThis results in undefined behavior when\n`self * rhs > u64::MAX` or `self * rhs < u64::MIN`,\ni.e. when [`checked_mul`] would return `None`.\n\n[`checked_mul`]: u64::checked_mul","links":{"u64::checked_mul":"1:16025:8409"},"attrs":["#[unstable(feature = \"unchecked_math\", reason = \"niche optimization path\",\nissue = \"85122\",)]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]","#[rustc_const_unstable(feature = \"const_inherent_unchecked_arith\", issue =\n\"85122\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:3334:1636":{"id":"0:3334:1636","crate_id":0,"name":"ArgAction","span":{"filename":"src/builder/action.rs","begin":[26,0],"end":[250,1]},"visibility":"public","docs":"Behavior of arguments when they are encountered while parsing\n\n# Examples\n\n```rust\n# use clap::Command;\n# use clap::Arg;\nlet cmd = Command::new(\"mycmd\")\n    .arg(\n        Arg::new(\"special-help\")\n            .short('?')\n            .action(clap::ArgAction::Help)\n    );\n\n// Existing help still exists\nlet err = cmd.clone().try_get_matches_from([\"mycmd\", \"-h\"]).unwrap_err();\nassert_eq!(err.kind(), clap::error::ErrorKind::DisplayHelp);\n\n// New help available\nlet err = cmd.try_get_matches_from([\"mycmd\", \"-?\"]).unwrap_err();\nassert_eq!(err.kind(), clap::error::ErrorKind::DisplayHelp);\n```","links":{},"attrs":["#[non_exhaustive]","#[allow(missing_copy_implementations)]"],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:3335:2313","0:3337:2317","0:3339:2320","0:3341:2323","0:3343:2334","0:3345:2338","0:3347:107","0:3349:2347","0:3351:2357"],"impls":[]}},"0:3432:2506":{"id":"0:3432:2506","crate_id":0,"name":"HidePossibleValues","span":{"filename":"src/builder/app_settings.rs","begin":[373,4],"end":[373,22]},"visibility":"default","docs":"Deprecated, replaced with [`Command::hide_possible_values`] and\n[`Arg::is_hide_possible_values_set`]","links":{"`Command::hide_possible_values`":"0:4231:1651","`Arg::is_hide_possible_values_set`":"0:3803:1638"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:3":{"id":"0:3","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[98,0],"end":[98,34]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::builder::ArgAction","name":"ArgAction","id":"0:3334:1636","glob":false}},"0:4419:2238":{"id":"0:4419:2238","crate_id":0,"name":"RangedI64ValueParser","span":{"filename":"src/builder/value_parser.rs","begin":[1091,0],"end":[1094,1]},"visibility":"public","docs":"Parse number that fall within a range of values\n\n# Example\n\nUsage:\n```rust\nlet mut cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"port\")\n            .long(\"port\")\n            .value_parser(clap::value_parser!(u16).range(3000..))\n            .takes_value(true)\n            .required(true)\n    );\n\nlet m = cmd.try_get_matches_from_mut([\"cmd\", \"--port\", \"3001\"]).unwrap();\nlet port: u16 = *m.get_one(\"port\")\n    .expect(\"required\");\nassert_eq!(port, 3001);\n```\n\nSemantics:\n```rust\n# use std::ffi::OsStr;\n# use clap::builder::TypedValueParser;\n# let cmd = clap::Command::new(\"test\");\n# let arg = None;\nlet value_parser = clap::builder::RangedI64ValueParser::<i32>::new().range(-1..200);\nassert!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"random\")).is_err());\nassert!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"\")).is_err());\nassert!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"-200\")).is_err());\nassert!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"300\")).is_err());\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"-1\")).unwrap(), -1);\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"0\")).unwrap(), 0);\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"50\")).unwrap(), 50);\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"std::convert::TryFrom","id":"2:3181:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i64"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2887:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3268:211","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3280:220","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":{"kind":"primitive","inner":"i64"},"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:166:2102":{"id":"0:166:2102","crate_id":0,"name":"update_from_arg_matches_mut","span":{"filename":"src/derive.rs","begin":[360,4],"end":[362,5]},"visibility":"default","docs":"Assign values from `ArgMatches` to `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["matches",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4693:1642","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4627:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1607:6620":{"id":"0:1607:6620","crate_id":0,"name":"private","span":{"filename":"src/builder/value_parser.rs","begin":[2051,0],"end":[2051,11]},"visibility":{"restricted":{"parent":"0:1281:2234","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1612:6621","0:1615:6623","0:1618:6625"],"is_stripped":true}},"2:31927:69558":{"id":"2:31927:69558","crate_id":2,"name":"div_euclid","span":null,"visibility":"public","docs":"Performs Euclidean division.\n\nSince, for the positive integers, all common\ndefinitions of division are equal, this\nis exactly equal to `self / rhs`.\n\n# Panics\n\nThis function will panic if `rhs` is 0.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(7u64.div_euclid(4), 1); // or any other integer type\n```","links":{},"attrs":["#[stable(feature = \"euclidean_division\", since = \"1.38.0\")]","#[rustc_const_stable(feature = \"const_euclidean_int_methods\", since =\n\"1.52.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3395:8536":{"id":"2:3395:8536","crate_id":2,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3397:181","2:3398:351"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:2819":{"id":"0:2819","crate_id":0,"name":null,"span":{"filename":"src/parser/mod.rs","begin":[27,24],"end":[27,32]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"import","inner":{"source":"self::matches::OsValues","name":"OsValues","id":"0:4778:1660","glob":false}},"2:3103:8719":{"id":"2:3103:8719","crate_id":2,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:3102:10744","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:2815":{"id":"0:2815","crate_id":0,"name":null,"span":{"filename":"src/parser/mod.rs","begin":[24,0],"end":[24,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"error::MatchesError","name":"MatchesError","id":"0:4673:7163","glob":false}},"2:31867:69512":{"id":"2:31867:69512","crate_id":2,"name":"from_le","span":null,"visibility":"public","docs":"Converts an integer from little endian to the target's endianness.\n\nOn little endian this is a no-op. On big endian the bytes are\nswapped.\n\n# Examples\n\nBasic usage:\n\n```\nlet n = 0x1Au64;\n\nif cfg!(target_endian = \"little\") {\n    assert_eq!(u64::from_le(n), n)\n} else {\n    assert_eq!(u64::from_le(n), n.swap_bytes())\n}\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["x",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1921":{"id":"0:1921","crate_id":0,"name":null,"span":{"filename":"src/error/mod.rs","begin":[1007,0],"end":[1018,1]},"visibility":{"restricted":{"parent":"0:1777:1640","path":"::error"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10298:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4627:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:1922:660"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:2799":{"id":"0:2799","crate_id":0,"name":null,"span":{"filename":"src/parser/mod.rs","begin":[21,0],"end":[21,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::matches::RawValues","name":"RawValues","id":"0:4750:7161","glob":false}},"0:163:2111":{"id":"0:163:2111","crate_id":0,"name":"from_arg_matches","span":{"filename":"src/derive.rs","begin":[318,4],"end":[318,69]},"visibility":"default","docs":"Instantiate `Self` from [`ArgMatches`], parsing the arguments as needed.\n\nMotivation: If our application had two CLI options, `--name\n<STRING>` and the flag `--debug`, we may create a struct as follows:\n\n ```ignore\nstruct Context {\n    name: String,\n    debug: bool\n}\n```\n\nWe then need to convert the `ArgMatches` that `clap` generated into our struct.\n`from_arg_matches` serves as the equivalent of:\n\n ```ignore\n# use clap::ArgMatches;\n# struct Context {\n#   name: String,\n#   debug: bool\n# }\nimpl From<ArgMatches> for Context {\n   fn from(m: ArgMatches) -> Self {\n       Context {\n           name: m.get_one::<String>(\"name\").unwrap().clone(),\n           debug: *m.get_one::<bool>(\"debug\").expect(\"defaulted by clap\"),\n       }\n   }\n}\n```","links":{"`ArgMatches`":"0:4693:1642"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["matches",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4693:1642","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4627:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:3774:8555":{"id":"2:3774:8555","crate_id":2,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2076","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:4505:6845":{"id":"0:4505:6845","crate_id":0,"name":"InvalidArg","span":{"filename":"src/error/context.rs","begin":[8,4],"end":[8,14]},"visibility":"default","docs":"The cause of the error","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:3373:1653":{"id":"0:3373:1653","crate_id":0,"name":"AppSettings","span":{"filename":"src/builder/app_settings.rs","begin":[34,0],"end":[523,1]},"visibility":"public","docs":"Application level settings, which affect how [`Command`] operates\n\n**NOTE:** When these settings are used, they apply only to current command, and are *not*\npropagated down or up through child or parent subcommands\n\n[`Command`]: crate::Command","links":{"crate::Command":"0:755:1637"},"attrs":["#[non_exhaustive]"],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":true,"variants":["0:3374:2375","0:3376:2398","0:3378:2402","0:3380:2406","0:3382:2409","0:3384:2413","0:3386:2416","0:3388:2420","0:3390:2423","0:3392:2426","0:3394:2430","0:3396:2434","0:3398:2438","0:3400:2441","0:3402:2444","0:3404:2447","0:3406:2451","0:3408:2455","0:3410:2459","0:3412:2463","0:3414:2474","0:3416:2478","0:3418:2481","0:3420:2485","0:3422:2488","0:3424:2492","0:3426:2496","0:3428:2499","0:3430:2502","0:3432:2506","0:3434:2509","0:3436:2512","0:3438:2515","0:3440:2516"],"impls":[]}},"0:3996:3683":{"id":"0:3996:3683","crate_id":0,"name":"HiddenShortHelp","span":{"filename":"src/builder/arg_settings.rs","begin":[240,4],"end":[240,19]},"visibility":"default","docs":"Deprecated, replaced with [`Arg::hide_short_help`] and [`Arg::is_hide_short_help_set`]","links":{"`Arg::is_hide_short_help_set`":"0:3803:1638","`Arg::hide_short_help`":"0:3803:1638"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:31904:69537":{"id":"2:31904:69537","crate_id":2,"name":"wrapping_div_euclid","span":null,"visibility":"public","docs":"Wrapping Euclidean division. Computes `self.div_euclid(rhs)`.\nWrapped division on unsigned types is just normal division.\nThere's no way wrapping could ever happen.\nThis function exists, so that all operations\nare accounted for in the wrapping operations.\nSince, for the positive integers, all common\ndefinitions of division are equal, this\nis exactly equal to `self.wrapping_div(rhs)`.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(100u64.wrapping_div_euclid(10), 10);\n```","links":{},"attrs":["#[stable(feature = \"euclidean_division\", since = \"1.38.0\")]","#[rustc_const_stable(feature = \"const_euclidean_int_methods\", since =\n\"1.52.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3414:2474":{"id":"0:3414:2474","crate_id":0,"name":"DeriveDisplayOrder","span":{"filename":"src/builder/app_settings.rs","begin":[278,4],"end":[278,22]},"visibility":"default","docs":"Displays the arguments and [`subcommands`] in the help message in the order that they were\ndeclared in, and not alphabetically which is the default.\n\nTo override the declaration order, see [`Arg::display_order`] and [`Command::display_order`].\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg, AppSettings};\nCommand::new(\"myprog\")\n    .global_setting(AppSettings::DeriveDisplayOrder)\n    .get_matches();\n```\n\n[`subcommands`]: crate::Command::subcommand()\n[`Arg::display_order`]: crate::Arg::display_order\n[`Command::display_order`]: crate::Command::display_order","links":{"crate::Command::display_order":"0:4231:1651","crate::Command::subcommand()":"0:4231:1651","crate::Arg::display_order":"0:3803:1638"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:1857":{"id":"0:1857","crate_id":0,"name":null,"span":{"filename":"src/error/mod.rs","begin":[68,0],"end":[986,1]},"visibility":{"restricted":{"parent":"0:1777:1640","path":"::error"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4627:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:1858:61","0:1860:671","0:1861:782","0:1862:481","0:1865:6804","0:1867:2085","0:1868:2027"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:10539:146":{"id":"2:10539:146","crate_id":2,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10540:652","2:10541:1845","2:10542:10318","2:10543:10319","2:10544:10320","2:10545:10321","2:10546:10322","2:10547:10323","2:10548:10324","2:10549:10325","2:10550:10326","2:10551:10327","2:10552:10328","2:10553:10329","2:10554:10330","2:10555:1532"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:4554:216":{"id":"0:4554:216","crate_id":0,"name":"String","span":{"filename":"src/error/context.rs","begin":[50,4],"end":[50,18]},"visibility":"default","docs":"A single value","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]}},"0:1759":{"id":"0:1759","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[50,0],"end":[50,42]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"value_parser::OsStringValueParser","name":"OsStringValueParser","id":"0:4390:2252","glob":false}},"0:4360:6335":{"id":"0:4360:6335","crate_id":0,"name":"CommandWithArguments","span":{"filename":"src/builder/value_hint.rs","begin":[57,4],"end":[57,24]},"visibility":"default","docs":"Capture the remaining arguments as a command name and arguments for that command. This is\ncommon when writing shell wrappers that execute anther command, for example `sudo` or `env`.\n\nThis hint is special, the argument must be a positional argument and have\n[`.multiple_values(true)`] and Command must use [`Command::trailing_var_arg(true)`]. The result is that the\ncommand line `my_app ls -la /` will be parsed as `[\"ls\", \"-la\", \"/\"]` and clap won't try to\nparse the `-la` argument itself.\n\n[`Command::trailing_var_arg(true)`]: crate::Command::trailing_var_arg\n[`.multiple_values(true)`]: crate::Arg::multiple_values()","links":{"crate::Arg::multiple_values()":"0:3803:1638","crate::Command::trailing_var_arg":"0:4231:1651"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:4358:6326":{"id":"0:4358:6326","crate_id":0,"name":"CommandString","span":{"filename":"src/builder/value_hint.rs","begin":[46,4],"end":[46,17]},"visibility":"default","docs":"A single string containing a command and its arguments.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:4362:6337":{"id":"0:4362:6337","crate_id":0,"name":"Username","span":{"filename":"src/builder/value_hint.rs","begin":[59,4],"end":[59,12]},"visibility":"default","docs":"Name of a local operating system user.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:29":{"id":"0:29","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[109,30],"end":[109,44]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::derive::CommandFactory","name":"CommandFactory","id":"0:153:1646","glob":false}},"2:13439:64413":{"id":"2:13439:64413","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:16011:8397"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4354:6322":{"id":"0:4354:6322","crate_id":0,"name":"ExecutablePath","span":{"filename":"src/builder/value_hint.rs","begin":[42,4],"end":[42,18]},"visibility":"default","docs":"Path to an executable file.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:1689":{"id":"0:1689","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[28,33],"end":[28,44]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"app_settings::AppSettings","name":"AppSettings","id":"0:3373:1653","glob":false}},"0:4611:6806":{"id":"0:4611:6806","crate_id":0,"name":"DisplayVersion","span":{"filename":"src/error/kind.rs","begin":[375,4],"end":[375,18]},"visibility":"default","docs":"Not a true \"error\" as it means `--version` or similar was used.\nThe message will be sent to `stdout`.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet result = Command::new(\"prog\")\n    .version(\"3.0\")\n    .try_get_matches_from(vec![\"prog\", \"--version\"]);\nassert!(result.is_err());\nassert_eq!(result.unwrap_err().kind(), ErrorKind::DisplayVersion);\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:31932:69563":{"id":"2:31932:69563","crate_id":2,"name":"checked_next_multiple_of","span":null,"visibility":"public","docs":"Calculates the smallest value greater than or equal to `self` that\nis a multiple of `rhs`. Returns `None` if `rhs` is zero or the\noperation would result in overflow.\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(int_roundings)]\nassert_eq!(16_u64.checked_next_multiple_of(8), Some(16));\nassert_eq!(23_u64.checked_next_multiple_of(8), Some(24));\nassert_eq!(1_u64.checked_next_multiple_of(0), None);\nassert_eq!(u64::MAX.checked_next_multiple_of(2), None);\n```","links":{},"attrs":["#[unstable(feature = \"int_roundings\", issue = \"88581\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1281:2234":{"id":"0:1281:2234","crate_id":0,"name":"value_parser","span":{"filename":"src/builder/value_parser.rs","begin":[1,0],"end":[2089,1]},"visibility":{"restricted":{"parent":"0:215:1635","path":"::builder"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1294:2242","0:1362:2241","0:4384:2240","0:4390:2252","0:4396:2253","0:4402:2249","0:4412:2237","0:4419:2238","0:4431:2239","0:4443:2247","0:4449:2250","0:4455:2248","0:4461:2251","0:1543:2243"],"is_stripped":true}},"0:4285:1656":{"id":"0:4285:1656","crate_id":0,"name":"PossibleValue","span":{"filename":"src/builder/possible_value.rs","begin":[30,0],"end":[35,1]},"visibility":"public","docs":"A possible value of an argument.\n\nThis is used for specifying [possible values] of [Args].\n\n**NOTE:** This struct is likely not needed for most usecases as it is only required to\n[hide] single values from help messages and shell completions or to attach [help] to possible values.\n\n# Examples\n\n```rust\n# use clap::{Arg, PossibleValue};\nlet cfg = Arg::new(\"config\")\n    .takes_value(true)\n    .value_name(\"FILE\")\n    .value_parser([\n        PossibleValue::new(\"fast\"),\n        PossibleValue::new(\"slow\").help(\"slower than fast\"),\n        PossibleValue::new(\"secret speed\").hide(true)\n    ]);\n```\n[Args]: crate::Arg\n[possible values]: crate::builder::ValueParser::possible_values\n[hide]: PossibleValue::hide()\n[help]: PossibleValue::help()","links":{"crate::Arg":"0:3803:1638","crate::builder::ValueParser::possible_values":"0:1294:2242","PossibleValue::help()":"0:4285:1656","PossibleValue::hide()":"0:4285:1656"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:105:1908":{"id":"0:105:1908","crate_id":0,"name":"arg","span":{"filename":"src/macros.rs","begin":[761,0],"end":[774,1]},"visibility":"public","docs":"Create an [`Arg`] from a usage string.\n\nAllows creation of basic settings for the [`Arg`].\n\n**NOTE**: Not all settings may be set using the usage string method. Some properties are\nonly available via the builder pattern.\n\n# Syntax\n\nUsage strings typically following the form:\n\n```notrust\n[explicit name] [short] [long] [value names] [...] [help string]\n```\n\n### Explicit Name\n\nThe name may be either a bare-word or a string, followed by a `:`, like `name:` or\n`\"name\":`.\n\n*Note:* This is an optional field, if it's omitted the argument will use one of the additional\nfields as the name using the following priority order:\n\n 1. Explicit Name\n 2. Long\n 3. Value Name\n\nSee [`Arg::name`][crate::Arg::name].\n\n### Short\n\nA short flag is a `-` followed by either a bare-character or quoted character, like `-f` or\n`-'f'`.\n\nSee [`Arg::short`][crate::Arg::short].\n\n### Long\n\nA long flag is a `--` followed by either a bare-word or a string, like `--foo` or\n`--\"foo\"`.\n\nSee [`Arg::long`][crate::Arg::long].\n\n### Values (Value Notation)\n\nThis is set by placing bare-word between:\n- `[]` like `[FOO]`\n  - Positional argument: optional\n  - Named argument: optional value\n- `<>` like `<FOO>`: required\n\nSee [`Arg::value_name`][crate::Arg::value_name].\n\n### `...`\n\n`...` (three consecutive dots/periods) specifies that this argument may occur multiple\ntimes (not to be confused with multiple values per occurrence).\n\nSee [`Arg::multiple_occurrences`][crate::Arg::multiple_occurrences].\n\n### Help String\n\nThe help string is denoted between a pair of double quotes `\"\"` and may contain any\ncharacters.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, arg};\nCommand::new(\"prog\")\n    .args(&[\n        arg!(--config <FILE> \"a required file for the configuration and no short\"),\n        arg!(-d --debug ... \"turns on debugging information and allows multiples\"),\n        arg!([input] \"an optional input file to use\")\n])\n# ;\n```\n[`Arg`]: ./struct.Arg.html","links":{"crate::Arg::short":"0:3803:1638","crate::Arg::value_name":"0:3803:1638","crate::Arg::name":"0:3803:1638","crate::Arg::multiple_occurrences":"0:3803:1638","crate::Arg::long":"0:3803:1638"},"attrs":["#[macro_export]"],"deprecation":null,"kind":"macro","inner":"macro_rules! arg {\n    ( $name:ident: $($tail:tt)+ ) => { ... };\n    ( $($tail:tt)+ ) => { ... };\n}"},"2:3215:127":{"id":"2:3215:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:38805:7777","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"0:4515:6882":{"id":"0:4515:6882","crate_id":0,"name":"ExpectedNumValues","span":{"filename":"src/error/context.rs","begin":[18,4],"end":[18,21]},"visibility":"default","docs":"Number of allowed values","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:4631":{"id":"0:4631","crate_id":0,"name":null,"span":{"filename":"src/error/mod.rs","begin":[39,9],"end":[39,14]},"visibility":{"restricted":{"parent":"0:1777:1640","path":"::error"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10291:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4627:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:4632:660"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3410:2459":{"id":"0:3410:2459","crate_id":0,"name":"SubcommandPrecedenceOverArg","span":{"filename":"src/builder/app_settings.rs","begin":[248,4],"end":[248,31]},"visibility":"default","docs":"Deprecated, replaced with [`Command::subcommand_precedence_over_arg`] and\n[`Command::is_subcommand_precedence_over_arg_set`]","links":{"`Command::subcommand_precedence_over_arg`":"0:4231:1651","`Command::is_subcommand_precedence_over_arg_set`":"0:4231:1651"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:4368:6344":{"id":"0:4368:6344","crate_id":0,"name":"EmailAddress","span":{"filename":"src/builder/value_hint.rs","begin":[66,4],"end":[66,16]},"visibility":"default","docs":"Email address.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"1:4752:6769":{"id":"1:4752:6769","crate_id":1,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4753:10127","1:4754:10128","1:4755:10129","1:4757:8744","1:4758:6812","1:4760:6759","1:4761:5800"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Read","id":"1:4670:8739","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3576:4547":{"id":"2:3576:4547","crate_id":2,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3578:181","2:3579:753"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2076","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:171:2191":{"id":"0:171:2191","crate_id":0,"name":"augment_subcommands","span":{"filename":"src/derive.rs","begin":[439,4],"end":[439,60]},"visibility":"default","docs":"Append to [`Command`] so it can instantiate `Self`.\n\nSee also [`CommandFactory`].","links":{"`Command`":"0:755:1637","`CommandFactory`":"0:153:1646"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["cmd",{"kind":"resolved_path","inner":{"name":"Command","id":"0:755:1637","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Command","id":"0:755:1637","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1747":{"id":"0:1747","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[46,0],"end":[46,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"value_parser::BoolishValueParser","name":"BoolishValueParser","id":"0:4455:2248","glob":false}},"0:170:1649":{"id":"0:170:1649","crate_id":0,"name":"Subcommand","span":{"filename":"src/derive.rs","begin":[435,0],"end":[448,1]},"visibility":"public","docs":"Parse a sub-command into a user-defined enum.\n\nImplementing this trait lets a parent container delegate subcommand behavior to `Self`.\nwith:\n- `#[clap(subcommand)] field: SubCmd`: Attribute can be used with either struct fields or enum\n  variants that impl `Subcommand`.\n- `#[clap(flatten)] Variant(SubCmd)`: Attribute can only be used with enum variants that impl\n  `Subcommand`.\n\nSee the [derive reference](crate::_derive) for attributes and best practices.\n\n**NOTE:** Deriving requires the [`derive` feature flag][crate::_features]\n\n# Example\n\n ```ignore\n#[derive(clap::Parser)]\nstruct Args {\n    #[clap(subcommand)]\n    action: Action,\n}\n\n#[derive(clap::Subcommand)]\nenum Action {\n    Add,\n    Remove,\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:171:2191","0:172:2192","0:173:2194"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromArgMatches","id":"0:162:1647","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2076","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6867:10753":{"id":"1:6867:10753","crate_id":1,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6868:28744"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13493:2079":{"id":"2:13493:2079","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:13053:8682","`DoubleEndedIterator`":"2:8447:120","prim@char":"1:16005:8392","str::matches":"1:16011:8397"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:49663:8703","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:8676","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:103:1889":{"id":"0:103:1889","crate_id":0,"name":"command","span":{"filename":"src/macros.rs","begin":[353,0],"end":[360,1]},"visibility":"public","docs":"Requires `cargo` feature flag to be enabled.","links":{},"attrs":["#[cfg(not(feature = \"cargo\"))]","#[macro_export]"],"deprecation":null,"kind":"macro","inner":"macro_rules! command {\n    () => { ... };\n    ($name:expr) => { ... };\n}"},"2:31880:69522":{"id":"2:31880:69522","crate_id":2,"name":"checked_rem_euclid","span":null,"visibility":"public","docs":"Checked Euclidean modulo. Computes `self.rem_euclid(rhs)`, returning `None`\nif `rhs == 0`.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(5u64.checked_rem_euclid(2), Some(1));\nassert_eq!(5u64.checked_rem_euclid(0), None);\n```","links":{},"attrs":["#[stable(feature = \"euclidean_division\", since = \"1.38.0\")]","#[rustc_const_stable(feature = \"const_euclidean_int_methods\", since =\n\"1.52.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:10":{"id":"0:10","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[100,25],"end":[100,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::builder::Arg","name":"Arg","id":"0:3803:1638","glob":false}},"a:2:3309:5996-0:4627:127":{"id":"a:2:3309:5996-0:4627:127","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3309:5996","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4627:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:3383:8534":{"id":"2:3383:8534","crate_id":2,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3385:1103"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13455:64429":{"id":"2:13455:64429","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:16005:8392","self::pattern":"2:13053:8682"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:8676","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:8676","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:8677","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10241:2011":{"id":"2:10241:2011","crate_id":2,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10242:1532","2:10243:10016","2:10245:9305"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:3998:3689":{"id":"0:3998:3689","crate_id":0,"name":"HiddenLongHelp","span":{"filename":"src/builder/arg_settings.rs","begin":[249,4],"end":[249,18]},"visibility":"default","docs":"Deprecated, replaced with [`Arg::hide_long_help`] and [`Arg::is_hide_long_help_set`]","links":{"`Arg::is_hide_long_help_set`":"0:3803:1638","`Arg::hide_long_help`":"0:3803:1638"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:31885:69527":{"id":"2:31885:69527","crate_id":2,"name":"checked_log2","span":null,"visibility":"public","docs":"Returns the base 2 logarithm of the number, rounded down.\n\nReturns `None` if the number is zero.\n\n# Examples\n\n```\n#![feature(int_log)]\nassert_eq!(2u64.checked_log2(), Some(1));\n```","links":{},"attrs":["#[unstable(feature = \"int_log\", issue = \"70887\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u32"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4813:7672":{"id":"0:4813:7672","crate_id":0,"name":"EnvVariable","span":{"filename":"src/parser/matches/value_source.rs","begin":[8,4],"end":[8,15]},"visibility":"default","docs":"Value came [`Arg::env`][crate::Arg::env]","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:31925:69557":{"id":"2:31925:69557","crate_id":2,"name":"overflowing_pow","span":null,"visibility":"public","docs":"Raises self to the power of `exp`, using exponentiation by squaring.\n\nReturns a tuple of the exponentiation along with a bool indicating\nwhether an overflow happened.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(3u64.overflowing_pow(5), (243, false));\nassert_eq!(3u8.overflowing_pow(6), (217, true));\n```","links":{},"attrs":["#[stable(feature = \"no_panic_pow\", since = \"1.34.0\")]","#[rustc_const_stable(feature = \"const_int_pow\", since = \"1.50.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["exp",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"u64"},{"kind":"primitive","inner":"bool"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:31878:69520":{"id":"2:31878:69520","crate_id":2,"name":"checked_div_euclid","span":null,"visibility":"public","docs":"Checked Euclidean division. Computes `self.div_euclid(rhs)`, returning `None`\nif `rhs == 0`.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(128u64.checked_div_euclid(2), Some(64));\nassert_eq!(1u64.checked_div_euclid(0), None);\n```","links":{},"attrs":["#[stable(feature = \"euclidean_division\", since = \"1.38.0\")]","#[rustc_const_stable(feature = \"const_euclidean_int_methods\", since =\n\"1.52.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:74":{"id":"0:74","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[116,24],"end":[116,31]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::parser::Indices","name":"Indices","id":"0:4788:1659","glob":false}},"0:174:1650":{"id":"0:174:1650","crate_id":0,"name":"ValueEnum","span":{"filename":"src/derive.rs","begin":[479,0],"end":[500,1]},"visibility":"public","docs":"Parse arguments into enums.\n\nWhen deriving [`Parser`], a field whose type implements `ValueEnum` can have the attribute\n`#[clap(value_enum)]` which will\n- Call [`Arg::possible_values`][crate::Arg::possible_values]\n- Allowing using the `#[clap(default_value_t)]` attribute without implementing `Display`.\n\nSee the [derive reference](crate::_derive) for attributes and best practices.\n\n**NOTE:** Deriving requires the [`derive` feature flag][crate::_features]\n\n# Example\n\n ```ignore\n#[derive(clap::Parser)]\nstruct Args {\n    #[clap(value_enum)]\n    level: Level,\n}\n\n#[derive(clap::ValueEnum, Clone)]\nenum Level {\n    Debug,\n    Info,\n    Warning,\n    Error,\n}\n```","links":{"`Parser`":"0:127:1648","crate::Arg::possible_values":"0:3803:1638"},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:175:2209","0:177:1838","0:180:2215"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2076","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2887:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:3343:2334":{"id":"0:3343:2334","crate_id":0,"name":"SetTrue","span":{"filename":"src/builder/action.rs","begin":[126,4],"end":[126,11]},"visibility":"default","docs":"When encountered, act as if `\"true\"` was encountered on the command-line\n\nIf no [`default_value`][super::Arg::default_value] is set, it will be `false`.\n\nNo value is allowed. To optionally accept a value, see\n[`Arg::default_missing_value`][super::Arg::default_missing_value]\n\n# Examples\n\n```rust\n# use clap::Command;\n# use clap::Arg;\nlet cmd = Command::new(\"mycmd\")\n    .arg(\n        Arg::new(\"flag\")\n            .long(\"flag\")\n            .action(clap::ArgAction::SetTrue)\n    );\n\nlet matches = cmd.clone().try_get_matches_from([\"mycmd\", \"--flag\", \"--flag\"]).unwrap();\nassert!(matches.contains_id(\"flag\"));\nassert_eq!(matches.occurrences_of(\"flag\"), 0);\nassert_eq!(\n    matches.get_one::<bool>(\"flag\").copied(),\n    Some(true)\n);\n\nlet matches = cmd.try_get_matches_from([\"mycmd\"]).unwrap();\nassert!(matches.contains_id(\"flag\"));\nassert_eq!(matches.occurrences_of(\"flag\"), 0);\nassert_eq!(\n    matches.get_one::<bool>(\"flag\").copied(),\n    Some(false)\n);\n```","links":{"super::Arg::default_value":"0:3803:1638","super::Arg::default_missing_value":"0:3803:1638"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"1:4727:2011":{"id":"1:4727:2011","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4728:1845","1:4729:10130","1:4731:10131","1:4732:4816","1:4733:8056","1:4734:10132","1:4735:9305","1:4744:9705"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6091:8358":{"id":"5:6091:8358","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5012:10777":{"id":"1:5012:10777","crate_id":1,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5013:7185","1:5014:21279"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4670:8739":{"id":"1:4670:8739","crate_id":1,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4671:10902","1:4672:21190","1:4674:21191","1:4675:21192","1:4676:8740","1:4677:21193","1:4678:21194","1:4680:21195","1:4681:9705","1:4682:6089","1:4683:5705","1:4685:5905"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3210:127":{"id":"2:3210:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3181:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}}}}},"b:2:4001-0:4627:127":{"id":"b:2:4001-0:4627:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2076","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3999:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4627:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:4003:1428"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3558:8553":{"id":"2:3558:8553","crate_id":2,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3560:237","2:3561:206","2:3562:28137"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:31858:47443":{"id":"2:31858:47443","crate_id":2,"name":"leading_zeros","span":null,"visibility":"public","docs":"Returns the number of leading zeros in the binary representation of `self`.\n\n# Examples\n\nBasic usage:\n\n```\nlet n = u64::MAX >> 2;\n\nassert_eq!(n.leading_zeros(), 2);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4605:6866":{"id":"0:4605:6866","crate_id":0,"name":"InvalidUtf8","span":{"filename":"src/error/kind.rs","begin":[320,4],"end":[320,15]},"visibility":"default","docs":"Occurs when the user provides a value containing invalid UTF-8.\n\nTo allow arbitrary data\n- Set [`Arg::allow_invalid_utf8`] for argument values\n- Set [`Command::allow_invalid_utf8_for_external_subcommands`] for external-subcommand\n  values\n\n# Platform Specific\n\nNon-Windows platforms only (such as Linux, Unix, OSX, etc.)\n\n# Examples\n\n ```\n# use clap::{Command, Arg, ErrorKind};\n# use std::os::unix::ffi::OsStringExt;\n# use std::ffi::OsString;\nlet result = Command::new(\"prog\")\n    .arg(Arg::new(\"utf8\")\n        .short('u')\n        .takes_value(true))\n    .try_get_matches_from(vec![OsString::from(\"myprog\"),\n                                OsString::from(\"-u\"),\n                                OsString::from_vec(vec![0xE9])]);\nassert!(result.is_err());\nassert_eq!(result.unwrap_err().kind(), ErrorKind::InvalidUtf8);\n```\n\n[`Arg::allow_invalid_utf8`]: crate::Arg::allow_invalid_utf8\n[`Command::allow_invalid_utf8_for_external_subcommands`]: crate::Command::allow_invalid_utf8_for_external_subcommands","links":{"crate::Arg::allow_invalid_utf8":"0:3803:1638","crate::Command::allow_invalid_utf8_for_external_subcommands":"0:4231:1651"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:4782:9894":{"id":"2:4782:9894","crate_id":2,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4783:2094","2:4784:27217","2:4785:4636"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:4760:1662":{"id":"0:4760:1662","crate_id":0,"name":"Values","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1508,0],"end":[1512,1]},"visibility":"public","docs":"Deprecated, replaced with [`ArgMatches::get_many()`]","links":{"`ArgMatches::get_many()`":"0:4693:1642"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:5059:2023":{"id":"0:5059:2023","crate_id":0,"name":"Auto","span":{"filename":"src/util/color.rs","begin":[21,4],"end":[21,8]},"visibility":"default","docs":"Enables colored output only when the output is going to a terminal or TTY.\n\n**NOTE:** This is the default behavior of `clap`.\n\n# Platform Specific\n\nThis setting only applies to Unix, Linux, and macOS (i.e. non-Windows platforms).\n\n# Examples\n\n ```no_run\n# use clap::{Command, ColorChoice};\nCommand::new(\"myprog\")\n    .color(ColorChoice::Auto)\n    .get_matches();\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:1777:1640":{"id":"0:1777:1640","crate_id":0,"name":"error","span":{"filename":"src/error/mod.rs","begin":[1,0],"end":[1153,1]},"visibility":"public","docs":"Error reporting","links":{},"attrs":["#![allow(deprecated)]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1854:205","0:4627:127","0:1845","0:1848","0:1851"],"is_stripped":false}},"1:6441:10759":{"id":"1:6441:10759","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6442:10966","1:6443:10967","1:6444:2695","1:6445:28752","1:6447:28753","1:6449:28754","1:6450:28755","1:6452:28756"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10569:10744","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10310:8585":{"id":"2:10310:8585","crate_id":2,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10311:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:1209":{"id":"2:1209","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:293:7216","path":"::num"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"u64"},"items":["2:31852:6549","2:31853:6550","2:31854:69504","2:31855:11339","2:31856:69505","2:31857:69506","2:31858:47443","2:31859:69507","2:31860:69508","2:31861:69509","2:31862:1119","2:31863:1120","2:31864:69510","2:31865:29849","2:31866:69511","2:31867:69512","2:31868:69513","2:31869:69514","2:31870:69515","2:31871:1440","2:31872:69516","2:31873:69517","2:31874:1446","2:31875:69518","2:31876:1442","2:31877:69519","2:31878:69520","2:31879:69521","2:31880:69522","2:31881:69523","2:31882:69524","2:31883:69525","2:31884:69526","2:31885:69527","2:31886:69528","2:31887:69529","2:31888:69530","2:31889:1444","2:31890:69531","2:31891:1445","2:31892:69532","2:31893:1226","2:31894:69533","2:31895:1227","2:31896:69534","2:31897:29853","2:31898:69535","2:31899:1526","2:31900:69536","2:31901:1528","2:31902:1527","2:31903:29938","2:31904:69537","2:31905:69538","2:31906:69539","2:31907:29943","2:31908:69540","2:31909:69541","2:31910:69542","2:31911:69543","2:31912:69544","2:31913:69545","2:31914:69546","2:31915:69547","2:31916:69548","2:31917:69549","2:31918:69550","2:31919:69551","2:31920:69552","2:31921:69553","2:31922:69554","2:31923:69555","2:31924:69556","2:31925:69557","2:31926:47368","2:31927:69558","2:31928:69559","2:31929:69560","2:31930:69561","2:31931:69562","2:31932:69563","2:31933:69564","2:31935:69566","2:31936:69567","2:31937:29944","2:31938:69568","2:31940:69569","2:31942:69570","2:31944:69571","2:31946:69572","2:31948:69573","2:31950:69574","2:31951:69575","2:31952:69576","2:31953:69577"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1840:782":{"id":"0:1840:782","crate_id":0,"name":"kind","span":{"filename":"src/error/kind.rs","begin":[1,0],"end":[440,1]},"visibility":{"restricted":{"parent":"0:1777:1640","path":"::error"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:4574:1658"],"is_stripped":true}},"2:31910:69542":{"id":"2:31910:69542","crate_id":2,"name":"wrapping_pow","span":null,"visibility":"public","docs":"Wrapping (modular) exponentiation. Computes `self.pow(exp)`,\nwrapping around at the boundary of the type.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(3u64.wrapping_pow(5), 243);\nassert_eq!(3u8.wrapping_pow(6), 217);\n```","links":{},"attrs":["#[stable(feature = \"no_panic_pow\", since = \"1.34.0\")]","#[rustc_const_stable(feature = \"const_int_pow\", since = \"1.50.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["exp",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2077:7237":{"id":"0:2077:7237","crate_id":0,"name":"arg_matches","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[2,0],"end":[1833,1]},"visibility":{"restricted":{"parent":"0:2044:2079","path":"::parser::matches"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:4693:1642","0:4727:7360","0:4737:7162","0:4750:7161","0:4760:1662","0:4778:1660","0:4788:1659"],"is_stripped":true}},"0:755:1637":{"id":"0:755:1637","crate_id":0,"name":"Command","span":{"filename":"src/builder/command.rs","begin":[70,0],"end":[70,37]},"visibility":"public","docs":"Build a command-line interface.\n\nThis includes defining arguments, subcommands, parser behavior, and help output.\nOnce all configuration is complete,\nthe [`Command::get_matches`] family of methods starts the runtime-parsing\nprocess. These methods then return information about the user supplied\narguments (or lack thereof).\n\nWhen deriving a [`Parser`][crate::Parser], you can use\n[`CommandFactory::command`][crate::CommandFactory::command] to access the\n`Command`.\n\n- [Basic API][crate::App#basic-api]\n- [Application-wide Settings][crate::App#application-wide-settings]\n- [Command-specific Settings][crate::App#command-specific-settings]\n- [Subcommand-specific Settings][crate::App#subcommand-specific-settings]\n- [Reflection][crate::App#reflection]\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg};\nlet m = Command::new(\"My Program\")\n    .author(\"Me, me@mail.com\")\n    .version(\"1.0.2\")\n    .about(\"Explains in brief what the program does\")\n    .arg(\n        Arg::new(\"in_file\")\n    )\n    .after_help(\"Longer explanation to appear after the options when \\\n                 displaying the help information from --help or -h\")\n    .get_matches();\n\n// Your program logic starts here...\n```\n[`App::get_matches`]: Command::get_matches()","links":{"crate::App#subcommand-specific-settings":"0:4231:1651","crate::App#application-wide-settings":"0:4231:1651","crate::App#command-specific-settings":"0:4231:1651","`Command::get_matches`":"0:4231:1651","crate::App#reflection":"0:4231:1651","crate::Parser":"0:127:1648","crate::App#basic-api":"0:4231:1651","crate::CommandFactory::command":"0:153:1646"},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"App","id":"0:4231:1651","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]}}},"0:83":{"id":"0:83","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[116,56],"end":[116,62]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::parser::Values","name":"Values","id":"0:4760:1662","glob":false}},"2:3716:8548":{"id":"2:3716:8548","crate_id":2,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2076","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RangeBounds","id":"2:3647:6357","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10308:189":{"id":"2:10308:189","crate_id":2,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10309:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:31905:69538":{"id":"2:31905:69538","crate_id":2,"name":"wrapping_rem","span":null,"visibility":"public","docs":"Wrapping (modular) remainder. Computes `self % rhs`.\nWrapped remainder calculation on unsigned types is\njust the regular remainder calculation.\nThere's no way wrapping could ever happen.\nThis function exists, so that all operations\nare accounted for in the wrapping operations.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(100u64.wrapping_rem(10), 0);\n```","links":{},"attrs":["#[stable(feature = \"num_wrapping\", since = \"1.2.0\")]","#[rustc_const_stable(feature = \"const_wrapping_int_methods\", since =\n\"1.52.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:31870:69515":{"id":"2:31870:69515","crate_id":2,"name":"checked_add","span":null,"visibility":"public","docs":"Checked integer addition. Computes `self + rhs`, returning `None`\nif overflow occurred.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!((u64::MAX - 2).checked_add(1), Some(u64::MAX - 1));\nassert_eq!((u64::MAX - 2).checked_add(3), None);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.47.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13416":{"id":"2:13416","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:12513:1339","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:13417:793","2:13418:1892","2:13419:29707","2:13420:68115","2:13422:68116","2:13425:6076","2:13426:68117","2:13427:304","2:13428:64394","2:13429:4194","2:13431:7177","2:13433:27145","2:13435:27146","2:13437:10808","2:13438:68118","2:13439:64413","2:13440:64414","2:13441:1907","2:13442:11104","2:13443:6089","2:13444:29892","2:13445:29890","2:13446:5800","2:13447:68119","2:13448:29669","2:13449:2007","2:13452:6671","2:13455:64429","2:13458:2214","2:13462:9691","2:13466:6759","2:13469:29891","2:13472:64423","2:13475:68120","2:13478:68121","2:13481:64425","2:13484:64427","2:13487:68122","2:13490:68123","2:13493:2079","2:13496:68124","2:13499:68125","2:13502:68126","2:13505:5801","2:13507:68127","2:13509:68128","2:13511:68129","2:13512:68130","2:13513:68131","2:13516:2767","2:13519:7820","2:13522:64430","2:13525:68132","2:13528:68133","2:13531:68134","2:13534:2078","2:13536:11406","2:13537:1841","2:13538:21011","2:13539:21012","2:13540:68135","2:13542:10767","2:13543:68136"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1203:2231":{"id":"0:1203:2231","crate_id":0,"name":"possible_value","span":{"filename":"src/builder/possible_value.rs","begin":[1,0],"end":[259,1]},"visibility":{"restricted":{"parent":"0:215:1635","path":"::builder"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:4285:1656"],"is_stripped":true}},"2:31898:69535":{"id":"2:31898:69535","crate_id":2,"name":"saturating_pow","span":null,"visibility":"public","docs":"Saturating integer exponentiation. Computes `self.pow(exp)`,\nsaturating at the numeric bounds instead of overflowing.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(4u64.saturating_pow(3), 64);\nassert_eq!(u64::MAX.saturating_pow(2), u64::MAX);\n```","links":{},"attrs":["#[stable(feature = \"no_panic_pow\", since = \"1.34.0\")]","#[rustc_const_stable(feature = \"const_int_pow\", since = \"1.50.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["exp",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3521:131":{"id":"2:3521:131","crate_id":2,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3523:377"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3524:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5723:10728":{"id":"1:5723:10728","crate_id":1,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5724:28688","1:5725:28689","1:5726:28690","1:5727:28691"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:4675:7228":{"id":"0:4675:7228","crate_id":0,"name":"actual","span":{"filename":"src/parser/error.rs","begin":[12,8],"end":[12,33]},"visibility":"default","docs":"Type for value stored in [`ArgMatches`][crate::ArgMatches]","links":{"crate::ArgMatches":"0:4693:1642"},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"super::AnyValueId","id":"0:4687:2366","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"2:3728:224":{"id":"2:3728:224","crate_id":2,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3729:181","2:3730:8550","2:3731:686","2:3732:369"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromResidual","id":"2:3733:137","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3728:224","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:1294:2242":{"id":"0:1294:2242","crate_id":0,"name":"ValueParser","span":{"filename":"src/builder/value_parser.rs","begin":[59,0],"end":[59,41]},"visibility":"public","docs":"Parse/validate argument values\n\nSpecified with [`Arg::value_parser`][crate::Arg::value_parser].\n\n`ValueParser` defines how to convert a raw argument value into a validated and typed value for\nuse within an application.\n\nSee\n- [`value_parser!`] for automatically selecting an implementation for a given type\n- [`ValueParser::new`] for additional [`TypedValueParser`] that can be used\n\n# Example\n\n```rust\nlet mut cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"color\")\n            .long(\"color\")\n            .value_parser([\"always\", \"auto\", \"never\"])\n            .default_value(\"auto\")\n    )\n    .arg(\n        clap::Arg::new(\"hostname\")\n            .long(\"hostname\")\n            .value_parser(clap::builder::NonEmptyStringValueParser::new())\n            .takes_value(true)\n            .required(true)\n    )\n    .arg(\n        clap::Arg::new(\"port\")\n            .long(\"port\")\n            .value_parser(clap::value_parser!(u16).range(3000..))\n            .takes_value(true)\n            .required(true)\n    );\n\nlet m = cmd.try_get_matches_from_mut(\n    [\"cmd\", \"--hostname\", \"rust-lang.org\", \"--port\", \"3001\"]\n).unwrap();\n\nlet color: &String = m.get_one(\"color\")\n    .expect(\"default\");\nassert_eq!(color, \"auto\");\n\nlet hostname: &String = m.get_one(\"hostname\")\n    .expect(\"required\");\nassert_eq!(hostname, \"rust-lang.org\");\n\nlet port: u16 = *m.get_one(\"port\")\n    .expect(\"required\");\nassert_eq!(port, 3001);\n```","links":{"crate::Arg::value_parser":"0:3803:1638","`ValueParser::new`":"0:1294:2242","`TypedValueParser`":"0:1362:2241","`value_parser!`":"0:1606:2234"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"tuple","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:127:1648":{"id":"0:127:1648","crate_id":0,"name":"Parser","span":{"filename":"src/derive.rs","begin":[78,0],"end":[245,1]},"visibility":"public","docs":"Parse command-line arguments into `Self`.\n\nThe primary one-stop-shop trait used to create an instance of a `clap`\n[`Command`], conduct the parsing, and turn the resulting [`ArgMatches`] back\ninto concrete instance of the user struct.\n\nThis trait is primarily a convenience on top of [`FromArgMatches`] +\n[`CommandFactory`] which uses those two underlying traits to build the two\nfundamental functions `parse` which uses the `std::env::args_os` iterator,\nand `parse_from` which allows the consumer to supply the iterator (along\nwith fallible options for each).\n\nSee also [`Subcommand`] and [`Args`].\n\nSee the [derive reference](crate::_derive) for attributes and best practices.\n\n**NOTE:** Deriving requires the [`derive` feature flag][crate::_features]\n\n# Examples\n\nThe following example creates a `Context` struct that would be used\nthroughout the application representing the normalized values coming from\nthe CLI.\n\n ```ignore\n/// My super CLI\n#[derive(clap::Parser)]\n#[clap(name = \"demo\")]\nstruct Context {\n    /// More verbose output\n    #[clap(long)]\n    verbose: bool,\n    /// An optional name\n    #[clap(short, long)]\n    name: Option<String>,\n}\n```\n\nThe equivalent [`Command`] struct + `From` implementation:\n\n```rust\n# use clap::{Command, Arg, ArgMatches, ArgAction};\nCommand::new(\"demo\")\n    .about(\"My super CLI\")\n    .arg(Arg::new(\"verbose\")\n        .long(\"verbose\")\n        .action(ArgAction::SetTrue)\n        .help(\"More verbose output\"))\n    .arg(Arg::new(\"name\")\n        .long(\"name\")\n        .short('n')\n        .help(\"An optional name\")\n        .takes_value(true));\n\nstruct Context {\n    verbose: bool,\n    name: Option<String>,\n}\n\nimpl From<ArgMatches> for Context {\n    fn from(m: ArgMatches) -> Self {\n        Context {\n            verbose: *m.get_one::<bool>(\"verbose\").expect(\"defaulted_by_clap\"),\n            name: m.get_one::<String>(\"name\").cloned(),\n        }\n    }\n}\n```\n","links":{"`Command`":"0:755:1637","`CommandFactory`":"0:153:1646","`ArgMatches`":"0:4693:1642","`Subcommand`":"0:170:1649","`Args`":"0:167:1645","`FromArgMatches`":"0:162:1647"},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:128:2078","0:129:2087","0:130:2090","0:133:2097","0:136:2100","0:139:2104"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromArgMatches","id":"0:162:1647","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"CommandFactory","id":"0:153:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2076","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3171:149":{"id":"2:3171:149","crate_id":2,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3173:2364"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:31911:69543":{"id":"2:31911:69543","crate_id":2,"name":"overflowing_add","span":null,"visibility":"public","docs":"Calculates `self` + `rhs`\n\nReturns a tuple of the addition along with a boolean indicating\nwhether an arithmetic overflow would occur. If an overflow would\nhave occurred then the wrapped value is returned.\n\n# Examples\n\nBasic usage\n\n```\n\nassert_eq!(5u64.overflowing_add(2), (7, false));\nassert_eq!(u64::MAX.overflowing_add(1), (0, true));\n```","links":{},"attrs":["#[stable(feature = \"wrapping\", since = \"1.7.0\")]","#[rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"u64"},{"kind":"primitive","inner":"bool"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:31875:69518":{"id":"2:31875:69518","crate_id":2,"name":"checked_mul","span":null,"visibility":"public","docs":"Checked integer multiplication. Computes `self * rhs`, returning\n`None` if overflow occurred.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(5u64.checked_mul(1), Some(5));\nassert_eq!(u64::MAX.checked_mul(2), None);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.47.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:31856:69505":{"id":"2:31856:69505","crate_id":2,"name":"count_ones","span":null,"visibility":"public","docs":"Returns the number of ones in the binary representation of `self`.\n\n# Examples\n\nBasic usage:\n\n```\nlet n = 0b01001100u64;\n\nassert_eq!(n.count_ones(), 3);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]","#[doc(alias = \"popcount\")]","#[doc(alias = \"popcnt\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1363:6388":{"id":"0:1363:6388","crate_id":0,"name":"Value","span":{"filename":"src/builder/value_parser.rs","begin":[607,4],"end":[607,15]},"visibility":"default","docs":"Argument's value type","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"2:13440:64414":{"id":"2:13440:64414","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:16011:8397"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1738":{"id":"0:1738","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[43,0],"end":[43,39]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"value_parser::_AutoValueParser","name":"_AutoValueParser","id":"0:4467:2245","glob":false}},"2:3410:8539":{"id":"2:3410:8539","crate_id":2,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3412:181","2:3413:1232"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:2890:1692":{"id":"0:2890:1692","crate_id":0,"name":"output","span":{"filename":"src/output/mod.rs","begin":[1,0],"end":[7,34]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":[],"is_stripped":true}},"0:4599:6863":{"id":"0:4599:6863","crate_id":0,"name":"MissingRequiredArgument","span":{"filename":"src/error/kind.rs","begin":[250,4],"end":[250,27]},"visibility":"default","docs":"Occurs when the user does not provide one or more required arguments.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet result = Command::new(\"prog\")\n    .arg(Arg::new(\"debug\")\n        .required(true))\n    .try_get_matches_from(vec![\"prog\"]);\nassert!(result.is_err());\nassert_eq!(result.unwrap_err().kind(), ErrorKind::MissingRequiredArgument);\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:4810:1661":{"id":"0:4810:1661","crate_id":0,"name":"ValueSource","span":{"filename":"src/parser/matches/value_source.rs","begin":[4,0],"end":[11,1]},"visibility":"public","docs":"Origin of the argument's value","links":{},"attrs":["#[non_exhaustive]"],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:4811:7651","0:4813:7672","0:4815:7197"],"impls":[]}},"0:1845":{"id":"0:1845","crate_id":0,"name":null,"span":{"filename":"src/error/mod.rs","begin":[25,0],"end":[25,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"context::ContextKind","name":"ContextKind","id":"0:4502:6775","glob":false}},"0:637:2230":{"id":"0:637:2230","crate_id":0,"name":"arg_settings","span":{"filename":"src/builder/arg_settings.rs","begin":[1,0],"end":[456,1]},"visibility":{"restricted":{"parent":"0:215:1635","path":"::builder"}},"docs":null,"links":{},"attrs":["#![allow(deprecated)]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:3957:1655"],"is_stripped":true}},"0:3803:1638":{"id":"0:3803:1638","crate_id":0,"name":"Arg","span":{"filename":"src/builder/arg.rs","begin":[61,0],"end":[101,1]},"visibility":"public","docs":"The abstract representation of a command line argument. Used to set all the options and\nrelationships that define a valid argument for the program.\n\nThere are two methods for constructing [`Arg`]s, using the builder pattern and setting options\nmanually, or using a usage string which is far less verbose but has fewer options. You can also\nuse a combination of the two methods to achieve the best of both worlds.\n\n- [Basic API][crate::Arg#basic-api]\n- [Value Handling][crate::Arg#value-handling]\n- [Help][crate::Arg#help-1]\n- [Advanced Argument Relations][crate::Arg#advanced-argument-relations]\n- [Reflection][crate::Arg#reflection]\n\n# Examples\n\n```rust\n# use clap::{Arg, arg};\n// Using the traditional builder pattern and setting each option manually\nlet cfg = Arg::new(\"config\")\n      .short('c')\n      .long(\"config\")\n      .takes_value(true)\n      .value_name(\"FILE\")\n      .help(\"Provides a config file to myprog\");\n// Using a usage string (setting a similar argument to the one above)\nlet input = arg!(-i --input <FILE> \"Provides an input file to the program\");\n```","links":{"crate::Arg#basic-api":"0:3803:1638","crate::Arg#reflection":"0:3803:1638","crate::Arg#value-handling":"0:3803:1638","`Arg`":"0:3803:1638","crate::Arg#help-1":"0:3803:1638","crate::Arg#advanced-argument-relations":"0:3803:1638"},"attrs":["#[allow(missing_debug_implementations)]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:4412:2237":{"id":"0:4412:2237","crate_id":0,"name":"PossibleValuesParser","span":{"filename":"src/builder/value_parser.rs","begin":[982,0],"end":[982,68]},"visibility":"public","docs":"Verify the value is from an enumerated set of [`PossibleValue`][crate::PossibleValue].\n\nSee also:\n- [`EnumValueParser`]\n\n# Example\n\nUsage:\n```rust\nlet mut cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"color\")\n            .value_parser(clap::builder::PossibleValuesParser::new([\"always\", \"auto\", \"never\"]))\n            .required(true)\n    );\n\nlet m = cmd.try_get_matches_from_mut([\"cmd\", \"always\"]).unwrap();\nlet port: &String = m.get_one(\"color\")\n    .expect(\"required\");\nassert_eq!(port, \"always\");\n```\n\nSemantics:\n```rust\n# use std::ffi::OsStr;\n# use clap::builder::TypedValueParser;\n# let cmd = clap::Command::new(\"test\");\n# let arg = None;\nlet value_parser = clap::builder::PossibleValuesParser::new([\"always\", \"auto\", \"never\"]);\nassert!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"random\")).is_err());\nassert!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"\")).is_err());\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"always\")).unwrap(), \"always\");\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"auto\")).unwrap(), \"auto\");\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"never\")).unwrap(), \"never\");\n```","links":{"crate::PossibleValue":"0:4285:1656","`EnumValueParser`":"0:4402:2249"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"tuple","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"2:31944:69571":{"id":"2:31944:69571","crate_id":2,"name":"from_be_bytes","span":null,"visibility":"public","docs":"Create a native endian integer value from its representation\nas a byte array in big endian.\n\n\n\n# Examples\n\n```\nlet value = u64::from_be_bytes([0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]);\nassert_eq!(value, 0x1234567890123456);\n```\n\nWhen starting from a slice rather than an array, fallible conversion APIs can be used:\n\n```\nfn read_be_u64(input: &mut &[u8]) -> u64 {\n    let (int_bytes, rest) = input.split_at(std::mem::size_of::<u64>());\n    *input = rest;\n    u64::from_be_bytes(int_bytes.try_into().unwrap())\n}\n```","links":{},"attrs":["#[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]","#[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["bytes",{"kind":"array","inner":{"type":{"kind":"primitive","inner":"u8"},"len":"8"}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:22":{"id":"0:22","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[104,0],"end":[104,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"color\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::util::color::ColorChoice","name":"ColorChoice","id":"0:5058:1644","glob":false}},"2:22937:10764":{"id":"2:22937:10764","crate_id":2,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22927:10744","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:4615:6955":{"id":"0:4615:6955","crate_id":0,"name":"Io","span":{"filename":"src/error/kind.rs","begin":[388,4],"end":[388,6]},"visibility":"default","docs":"Represents an [I/O error].\nCan occur when writing to `stderr` or `stdout` or reading a configuration file.\n\n[I/O error]: std::io::Error","links":{"std::io::Error":"1:4084:127"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"5:6088:68761":{"id":"5:6088:68761","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:8676","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:54":{"id":"0:54","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[113,48],"end":[113,56]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::builder::ArgFlags","name":"ArgFlags","id":"0:3942:1654","glob":false}},"2:3174:135":{"id":"2:3174:135","crate_id":2,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3176:681"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:4449:2250":{"id":"0:4449:2250","crate_id":0,"name":"FalseyValueParser","span":{"filename":"src/builder/value_parser.rs","begin":[1552,0],"end":[1552,31]},"visibility":"public","docs":"Parse false-like string values, everything else is `true`\n\nSee also:\n- [`ValueParser::bool`] for assuming non-false is true\n- [`BoolishValueParser`] for different human readable bool representations\n\n# Example\n\nUsage:\n```rust\nlet mut cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"append\")\n            .value_parser(clap::builder::FalseyValueParser::new())\n            .required(true)\n    );\n\nlet m = cmd.try_get_matches_from_mut([\"cmd\", \"true\"]).unwrap();\nlet port: bool = *m.get_one(\"append\")\n    .expect(\"required\");\nassert_eq!(port, true);\n```\n\nSemantics:\n```rust\n# use std::ffi::OsStr;\n# use clap::builder::TypedValueParser;\n# let cmd = clap::Command::new(\"test\");\n# let arg = None;\nlet value_parser = clap::builder::FalseyValueParser::new();\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"random\")).unwrap(), true);\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"100\")).unwrap(), true);\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"\")).unwrap(), false);\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"false\")).unwrap(), false);\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"No\")).unwrap(), false);\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"oFF\")).unwrap(), false);\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"0\")).unwrap(), false);\n```","links":{"`ValueParser::bool`":"0:1294:2242","`BoolishValueParser`":"0:4455:2248"},"attrs":["#[non_exhaustive]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":false,"fields":[],"impls":[]}},"5:5833:8680":{"id":"5:5833:8680","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5835:181","5:5836:432"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2076","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:31918:69550":{"id":"2:31918:69550","crate_id":2,"name":"overflowing_div","span":null,"visibility":"public","docs":"Calculates the divisor when `self` is divided by `rhs`.\n\nReturns a tuple of the divisor along with a boolean indicating\nwhether an arithmetic overflow would occur. Note that for unsigned\nintegers overflow never occurs, so the second value is always\n`false`.\n\n# Panics\n\nThis function will panic if `rhs` is 0.\n\n# Examples\n\nBasic usage\n\n```\nassert_eq!(5u64.overflowing_div(2), (2, false));\n```","links":{},"attrs":["#[stable(feature = \"wrapping\", since = \"1.7.0\")]","#[rustc_const_stable(feature = \"const_overflowing_int_methods\", since =\n\"1.52.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"u64"},{"kind":"primitive","inner":"bool"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6103:68762":{"id":"5:6103:68762","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3980:2506":{"id":"0:3980:2506","crate_id":0,"name":"HidePossibleValues","span":{"filename":"src/builder/arg_settings.rs","begin":[144,4],"end":[144,22]},"visibility":"default","docs":"Deprecated, replaced with [`Arg::hide_possible_values`] and\n[`Arg::is_hide_possible_values_set`]","links":{"`Arg::hide_possible_values`":"0:3803:1638","`Arg::is_hide_possible_values_set`":"0:3803:1638"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:31928:69559":{"id":"2:31928:69559","crate_id":2,"name":"rem_euclid","span":null,"visibility":"public","docs":"Calculates the least remainder of `self (mod rhs)`.\n\nSince, for the positive integers, all common\ndefinitions of division are equal, this\nis exactly equal to `self % rhs`.\n\n# Panics\n\nThis function will panic if `rhs` is 0.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(7u64.rem_euclid(4), 3); // or any other integer type\n```","links":{},"attrs":["#[stable(feature = \"euclidean_division\", since = \"1.38.0\")]","#[rustc_const_stable(feature = \"const_euclidean_int_methods\", since =\n\"1.52.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3278:106":{"id":"2:3278:106","crate_id":2,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2887:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:31950:69574":{"id":"2:31950:69574","crate_id":2,"name":"min_value","span":null,"visibility":"public","docs":"New code should prefer to use\n[`u64::MIN`] instead.\n\nReturns the smallest value that can be represented by this integer type.","links":{"`u64::MIN`":"1:16025:8409"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_promotable]","#[rustc_const_stable(feature = \"const_max_value\", since = \"1.32.0\")]","#[deprecated(since = \"TBD\", note =\n\"replaced by the `MIN` associated constant on this type\")]"],"deprecation":{"since":"TBD","note":"replaced by the `MIN` associated constant on this type"},"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4533:4551":{"id":"0:4533:4551","crate_id":0,"name":"Usage","span":{"filename":"src/error/context.rs","begin":[36,4],"end":[36,9]},"visibility":"default","docs":"A usage string","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:4559:1541":{"id":"0:4559:1541","crate_id":0,"name":"0","span":{"filename":"src/error/context.rs","begin":[52,12],"end":[52,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7780:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}},"2:10304:8587":{"id":"2:10304:8587","crate_id":2,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10305:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8362:8795":{"id":"2:8362:8795","crate_id":2,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8364:7648"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3211:1416":{"id":"2:3211:1416","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3181:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13540:68135":{"id":"2:13540:68135","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:16005:8392"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:49758:8695","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3580:8547":{"id":"2:3580:8547","crate_id":2,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3582:754"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2076","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Index","id":"2:3576:4547","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:1714":{"id":"0:1714","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[35,0],"end":[35,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"value_parser::PossibleValuesParser","name":"PossibleValuesParser","id":"0:4412:2237","glob":false}},"2:13443:6089":{"id":"2:13443:6089","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49445:8689","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4745:8743":{"id":"1:4745:8743","crate_id":1,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4746:7737","1:4747:21222","1:4748:21223","1:4749:21224"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1272:2233":{"id":"0:1272:2233","crate_id":0,"name":"value_hint","span":{"filename":"src/builder/value_hint.rs","begin":[1,0],"end":[95,1]},"visibility":{"restricted":{"parent":"0:215:1635","path":"::builder"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:4343:1657"],"is_stripped":true}},"2:10291:109":{"id":"2:10291:109","crate_id":2,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10292:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:31901:1528":{"id":"2:31901:1528","crate_id":2,"name":"wrapping_sub","span":null,"visibility":"public","docs":"Wrapping (modular) subtraction. Computes `self - rhs`,\nwrapping around at the boundary of the type.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(100u64.wrapping_sub(100), 0);\nassert_eq!(100u64.wrapping_sub(u64::MAX), 101);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3422:2488":{"id":"0:3422:2488","crate_id":0,"name":"DisableHelpFlag","span":{"filename":"src/builder/app_settings.rs","begin":[320,4],"end":[320,19]},"visibility":"default","docs":"Deprecated, replaced with [`Command::disable_help_flag`] and [`Command::is_disable_help_flag_set`]","links":{"`Command::disable_help_flag`":"0:4231:1651","`Command::is_disable_help_flag_set`":"0:4231:1651"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:3394:2430":{"id":"0:3394:2430","crate_id":0,"name":"SubcommandRequired","span":{"filename":"src/builder/app_settings.rs","begin":[166,4],"end":[166,22]},"visibility":"default","docs":"Deprecated, replaced with [`Command::subcommand_required`] and\n[`Command::is_subcommand_required_set`]","links":{"`Command::subcommand_required`":"0:4231:1651","`Command::is_subcommand_required_set`":"0:4231:1651"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:8472:7600":{"id":"2:8472:7600","crate_id":2,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8473:793","2:8474:1892"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:4346:6315":{"id":"0:4346:6315","crate_id":0,"name":"Other","span":{"filename":"src/builder/value_hint.rs","begin":[34,4],"end":[34,9]},"visibility":"default","docs":"None of the hints below apply. Disables shell completion for this argument.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:1543:2243":{"id":"0:1543:2243","crate_id":0,"name":"ValueParserFactory","span":{"filename":"src/builder/value_parser.rs","begin":[1814,0],"end":[1823,1]},"visibility":"public","docs":"Register a type with [value_parser!][crate::value_parser!]\n\n# Example\n\n```rust\n#[derive(Copy, Clone, Debug)]\npub struct Custom(u32);\n\nimpl clap::builder::ValueParserFactory for Custom {\n    type Parser = CustomValueParser;\n    fn value_parser() -> Self::Parser {\n        CustomValueParser\n    }\n}\n\n#[derive(Clone, Debug)]\npub struct CustomValueParser;\nimpl clap::builder::TypedValueParser for CustomValueParser {\n    type Value = Custom;\n\n    fn parse_ref(\n        &self,\n        cmd: &clap::Command,\n        arg: Option<&clap::Arg>,\n        value: &std::ffi::OsStr,\n    ) -> Result<Self::Value, clap::Error> {\n        let inner = clap::value_parser!(u32);\n        let val = inner.parse_ref(cmd, arg, value)?;\n        Ok(Custom(val))\n    }\n}\n\nlet parser: CustomValueParser = clap::value_parser!(Custom);\n```","links":{"crate::value_parser!":"0:1606:2234"},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:1544:1648","0:1545:2234"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"26:29:8310":{"id":"26:29:8310","crate_id":26,"name":"WriteColor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["26:30:10304","26:31:6828","26:32:8322","26:33:10305"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Write","id":"1:4727:2011","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:3990:3655":{"id":"0:3990:3655","crate_id":0,"name":"HideDefaultValue","span":{"filename":"src/builder/arg_settings.rs","begin":[192,4],"end":[192,20]},"visibility":"default","docs":"Deprecated, replaced with [`Arg::hide_default_value`] and [`Arg::is_hide_default_value_set`]","links":{"`Arg::hide_default_value`":"0:3803:1638","`Arg::is_hide_default_value_set`":"0:3803:1638"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:13513:68131":{"id":"2:13513:68131","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:16005:8392","self::pattern":"2:13053:8682"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:8676","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:8676","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedSearcher","id":"2:13083:8675","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:31906:69539":{"id":"2:31906:69539","crate_id":2,"name":"wrapping_rem_euclid","span":null,"visibility":"public","docs":"Wrapping Euclidean modulo. Computes `self.rem_euclid(rhs)`.\nWrapped modulo calculation on unsigned types is\njust the regular remainder calculation.\nThere's no way wrapping could ever happen.\nThis function exists, so that all operations\nare accounted for in the wrapping operations.\nSince, for the positive integers, all common\ndefinitions of division are equal, this\nis exactly equal to `self.wrapping_rem(rhs)`.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(100u64.wrapping_rem_euclid(10), 0);\n```","links":{},"attrs":["#[stable(feature = \"euclidean_division\", since = \"1.38.0\")]","#[rustc_const_stable(feature = \"const_euclidean_int_methods\", since =\n\"1.52.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3209:8325":{"id":"0:3209:8325","crate_id":0,"name":"fnv","span":{"filename":"src/util/fnv.rs","begin":[1,0],"end":[46,1]},"visibility":{"restricted":{"parent":"0:3208:1643","path":"::util"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:3222:2669"],"is_stripped":true}},"2:31884:69526":{"id":"2:31884:69526","crate_id":2,"name":"checked_log","span":null,"visibility":"public","docs":"Returns the logarithm of the number with respect to an arbitrary base,\nrounded down.\n\nReturns `None` if the number is zero, or if the base is not at least 2.\n\nThis method might not be optimized owing to implementation details;\n`checked_log2` can produce results more efficiently for base 2, and\n`checked_log10` can produce results more efficiently for base 10.\n\n# Examples\n\n```\n#![feature(int_log)]\nassert_eq!(5u64.checked_log(5), Some(1));\n```","links":{},"attrs":["#[unstable(feature = \"int_log\", issue = \"70887\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["base",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u32"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:31921:69553":{"id":"2:31921:69553","crate_id":2,"name":"overflowing_rem_euclid","span":null,"visibility":"public","docs":"Calculates the remainder `self.rem_euclid(rhs)` as if by Euclidean division.\n\nReturns a tuple of the modulo after dividing along with a boolean\nindicating whether an arithmetic overflow would occur. Note that for\nunsigned integers overflow never occurs, so the second value is\nalways `false`.\nSince, for the positive integers, all common\ndefinitions of division are equal, this operation\nis exactly equal to `self.overflowing_rem(rhs)`.\n\n# Panics\n\nThis function will panic if `rhs` is 0.\n\n# Examples\n\nBasic usage\n\n```\nassert_eq!(5u64.overflowing_rem_euclid(2), (1, false));\n```","links":{},"attrs":["#[stable(feature = \"euclidean_division\", since = \"1.38.0\")]","#[rustc_const_stable(feature = \"const_euclidean_int_methods\", since =\n\"1.52.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"u64"},{"kind":"primitive","inner":"bool"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8879:8662":{"id":"2:8879:8662","crate_id":2,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5793:10733":{"id":"1:5793:10733","crate_id":1,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5794:28722"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10569:10744","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:4727:7360":{"id":"0:4727:7360","crate_id":0,"name":"Values2","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1342,0],"end":[1346,1]},"visibility":"public","docs":"Iterate over multiple values for an argument via [`ArgMatches::remove_many`].\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ArgAction};\nlet mut m = Command::new(\"myapp\")\n    .arg(Arg::new(\"output\")\n        .short('o')\n        .action(ArgAction::Append)\n        .takes_value(true))\n    .get_matches_from(vec![\"myapp\", \"-o\", \"val1\", \"-o\", \"val2\"]);\n\nlet mut values = m.remove_many::<String>(\"output\")\n    .unwrap();\n\nassert_eq!(values.next(), Some(String::from(\"val1\")));\nassert_eq!(values.next(), Some(String::from(\"val2\")));\nassert_eq!(values.next(), None);\n```","links":{"`ArgMatches::remove_many`":"0:4693:1642"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:4613:6891":{"id":"0:4613:6891","crate_id":0,"name":"ArgumentNotFound","span":{"filename":"src/error/kind.rs","begin":[382,4],"end":[382,20]},"visibility":"default","docs":"Occurs when using the [`ArgMatches::value_of_t`] and friends to convert an argument value\ninto type `T`, but the argument you requested wasn't used. I.e. you asked for an argument\nwith name `config` to be converted, but `config` wasn't used by the user.\n\n[`ArgMatches::value_of_t`]: crate::ArgMatches::value_of_t()","links":{"crate::ArgMatches::value_of_t()":"0:4693:1642"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:13419:29707":{"id":"2:13419:29707","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3208:1643":{"id":"0:3208:1643","crate_id":0,"name":"util","span":{"filename":"src/util/mod.rs","begin":[1,0],"end":[40,45]},"visibility":"crate","docs":null,"links":{},"attrs":["#![allow(clippy :: single_component_path_imports)]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:3300"],"is_stripped":true}},"2:13522:64430":{"id":"2:13522:64430","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:16005:8392","self::pattern":"2:13053:8682"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:8676","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:8676","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:8677","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13519:7820":{"id":"2:13519:7820","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:16005:8392","self::pattern":"2:13053:8682"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:8676","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:128:2078":{"id":"0:128:2078","crate_id":0,"name":"parse","span":{"filename":"src/derive.rs","begin":[80,4],"end":[92,5]},"visibility":"default","docs":"Parse from `std::env::args_os()`, exit on error","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3276:218":{"id":"2:3276:218","crate_id":2,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13437:10808":{"id":"2:13437:10808","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"str::slice_mut_unchecked":"1:16011:8397","`str`":"1:16011:8397","crate::ops::Index":"2:3576:4547"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:4529:6854":{"id":"0:4529:6854","crate_id":0,"name":"SuggestedValue","span":{"filename":"src/error/context.rs","begin":[32,4],"end":[32,18]},"visibility":"default","docs":"Potential fix for the user","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:175:2209":{"id":"0:175:2209","crate_id":0,"name":"value_variants","span":{"filename":"src/derive.rs","begin":[481,4],"end":[481,42]},"visibility":"default","docs":"All possible argument values, in display order.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"slice","inner":{"kind":"generic","inner":"Self"}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:7799:10344":{"id":"1:7799:10344","crate_id":1,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7800:21459"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:31873:69517":{"id":"2:31873:69517","crate_id":2,"name":"checked_sub","span":null,"visibility":"public","docs":"Checked integer subtraction. Computes `self - rhs`, returning\n`None` if overflow occurred.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(1u64.checked_sub(1), Some(0));\nassert_eq!(0u64.checked_sub(1), None);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.47.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:22748:11191":{"id":"2:22748:11191","crate_id":2,"name":"SimdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22749:11140","2:22750:21676","2:22751:21677","2:22752:21678","2:22753:9094","2:22754:21679","2:22755:21680","2:22756:21681","2:22757:21682","2:22758:21683","2:22759:21684","2:22760:21685","2:22761:21686","2:22762:21687","2:22763:21688","2:22764:21689","2:22765:21690","2:22766:21691","2:22767:21692","2:22768:21693","2:22769:21694","2:22770:21695","2:22771:21696","2:22772:21697","2:22773:21698"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3278:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22850:10744","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:1695":{"id":"0:1695","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[30,0],"end":[30,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"arg_group::ArgGroup","name":"ArgGroup","id":"0:3890:1639","glob":false}},"0:57":{"id":"0:57","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[113,58],"end":[113,69]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::builder::ArgSettings","name":"ArgSettings","id":"0:3957:1655","glob":false}},"0:1682":{"id":"0:1682","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[27,0],"end":[27,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"action::ArgAction","name":"ArgAction","id":"0:3334:1636","glob":false}},"2:31895:1227":{"id":"2:31895:1227","crate_id":2,"name":"saturating_sub","span":null,"visibility":"public","docs":"Saturating integer subtraction. Computes `self - rhs`, saturating\nat the numeric bounds instead of overflowing.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(100u64.saturating_sub(27), 73);\nassert_eq!(13u64.saturating_sub(127), 0);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]","#[rustc_const_stable(feature = \"const_saturating_int_methods\", since =\n\"1.47.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4575:6853":{"id":"0:4575:6853","crate_id":0,"name":"InvalidValue","span":{"filename":"src/error/kind.rs","begin":[19,4],"end":[19,16]},"visibility":"default","docs":"Occurs when an [`Arg`][crate::Arg] has a set of possible values,\nand the user provides a value which isn't in that set.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet result = Command::new(\"prog\")\n    .arg(Arg::new(\"speed\")\n        .value_parser([\"fast\", \"slow\"]))\n    .try_get_matches_from(vec![\"prog\", \"other\"]);\nassert!(result.is_err());\nassert_eq!(result.unwrap_err().kind(), ErrorKind::InvalidValue);\n```","links":{"crate::Arg":"0:3803:1638"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:4549:174":{"id":"0:4549:174","crate_id":0,"name":"None","span":{"filename":"src/error/context.rs","begin":[46,4],"end":[46,8]},"visibility":"default","docs":"[`ContextKind`] is self-sufficient, no additional information needed","links":{"`ContextKind`":"0:4502:6775"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:31893:1226":{"id":"2:31893:1226","crate_id":2,"name":"saturating_add","span":null,"visibility":"public","docs":"Saturating integer addition. Computes `self + rhs`, saturating at\nthe numeric bounds instead of overflowing.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(100u64.saturating_add(1), 101);\nassert_eq!(u64::MAX.saturating_add(127), u64::MAX);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]","#[rustc_const_stable(feature = \"const_saturating_int_methods\", since =\n\"1.47.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6411:223":{"id":"5:6411:223","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6412:1396"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3181:227":{"id":"2:3181:227","crate_id":2,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3183:127","2:3184:1415"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3422:8541":{"id":"2:3422:8541","crate_id":2,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3424:352"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:4560:6871":{"id":"0:4560:6871","crate_id":0,"name":"Number","span":{"filename":"src/error/context.rs","begin":[54,4],"end":[54,17]},"visibility":"default","docs":"A single value","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"primitive","inner":"isize"}]}},"2:13496:68124":{"id":"2:13496:68124","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"`DoubleEndedIterator`":"2:8447:120","str::matches":"1:16011:8397","prim@char":"1:16005:8392","self::pattern":"2:13053:8682"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:49681:8704","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:8676","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:8676","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:8677","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5651:10747":{"id":"1:5651:10747","crate_id":1,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5652:28686","1:5653:9260"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10569:10744","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8447:120":{"id":"2:8447:120","crate_id":2,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8448:7599","2:8449:9687","2:8450:9688","2:8451:9689","2:8455:9690","2:8458:9691"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13431:7177":{"id":"2:13431:7177","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:47492:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10933:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10933:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4591:6877":{"id":"0:4591:6877","crate_id":0,"name":"TooFewValues","span":{"filename":"src/error/kind.rs","begin":[176,4],"end":[176,16]},"visibility":"default","docs":"Occurs when the user provides fewer values for an argument than were defined by setting\n[`Arg::min_values`].\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet result = Command::new(\"prog\")\n    .arg(Arg::new(\"some_opt\")\n        .long(\"opt\")\n        .min_values(3))\n    .try_get_matches_from(vec![\"prog\", \"--opt\", \"too\", \"few\"]);\nassert!(result.is_err());\nassert_eq!(result.unwrap_err().kind(), ErrorKind::TooFewValues);\n```\n[`Arg::min_values`]: crate::Arg::min_values()","links":{"crate::Arg::min_values()":"0:3803:1638"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:31931:69562":{"id":"2:31931:69562","crate_id":2,"name":"next_multiple_of","span":null,"visibility":"public","docs":"Calculates the smallest value greater than or equal to `self` that\nis a multiple of `rhs`.\n\n# Panics\n\nThis function will panic if `rhs` is zero.\n\n## Overflow behavior\n\nOn overflow, this function will panic if overflow checks are enabled (default in debug\nmode) and wrap if overflow checks are disabled (default in release mode).\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(int_roundings)]\nassert_eq!(16_u64.next_multiple_of(8), 16);\nassert_eq!(23_u64.next_multiple_of(8), 24);\n```","links":{},"attrs":["#[unstable(feature = \"int_roundings\", issue = \"88581\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1914":{"id":"0:1914","crate_id":0,"name":null,"span":{"filename":"src/error/mod.rs","begin":[988,0],"end":[992,1]},"visibility":{"restricted":{"parent":"0:1777:1640","path":"::error"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3174:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"1:4084:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4627:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:1915:681"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13472:64423":{"id":"2:13472:64423","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"str::split":"1:16011:8397","self::pattern":"2:13053:8682","prim@char":"1:16005:8392","`DoubleEndedIterator`":"2:8447:120"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:49477:8705","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:8676","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:8676","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:8677","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4750:7161":{"id":"0:4750:7161","crate_id":0,"name":"RawValues","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1461,0],"end":[1465,1]},"visibility":"public","docs":"Iterate over raw argument values via [`ArgMatches::get_raw`].\n\n# Examples\n\n ```\n# use clap::{Command, arg, value_parser};\nuse std::ffi::OsString;\nuse std::os::unix::ffi::{OsStrExt,OsStringExt};\n\nlet m = Command::new(\"utf8\")\n    .arg(arg!(<arg> \"some arg\")\n        .value_parser(value_parser!(OsString)))\n    .get_matches_from(vec![OsString::from(\"myprog\"),\n                            // \"Hi {0xe9}!\"\n                            OsString::from_vec(vec![b'H', b'i', b' ', 0xe9, b'!'])]);\nassert_eq!(\n    &*m.get_raw(\"arg\")\n        .unwrap()\n        .next().unwrap()\n        .as_bytes(),\n    [b'H', b'i', b' ', 0xe9, b'!']\n);\n```","links":{"`ArgMatches::get_raw`":"0:4693:1642"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"2:12500:11402":{"id":"2:12500:11402","crate_id":2,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12501:2094","2:12502:28670"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:4593:6869":{"id":"0:4593:6869","crate_id":0,"name":"TooManyOccurrences","span":{"filename":"src/error/kind.rs","begin":[194,4],"end":[194,22]},"visibility":"default","docs":"Occurs when a user provides more occurrences for an argument than were defined by setting\n[`Arg::max_occurrences`].\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet result = Command::new(\"prog\")\n    .arg(Arg::new(\"verbosity\")\n        .short('v')\n        .max_occurrences(2))\n    .try_get_matches_from(vec![\"prog\", \"-vvv\"]);\nassert!(result.is_err());\nassert_eq!(result.unwrap_err().kind(), ErrorKind::TooManyOccurrences);\n```\n[`Arg::max_occurrences`]: crate::Arg::max_occurrences()","links":{"crate::Arg::max_occurrences()":"0:3803:1638"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:4525:6858":{"id":"0:4525:6858","crate_id":0,"name":"SuggestedSubcommand","span":{"filename":"src/error/context.rs","begin":[28,4],"end":[28,23]},"visibility":"default","docs":"Potential fix for the user","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:3972:3008":{"id":"0:3972:3008","crate_id":0,"name":"TakesValue","span":{"filename":"src/builder/arg_settings.rs","begin":[105,4],"end":[105,14]},"visibility":"default","docs":"Deprecated, replaced with [`Arg::takes_value`] and [`Arg::is_takes_value_set`]","links":{"`Arg::takes_value`":"0:3803:1638","`Arg::is_takes_value_set`":"0:3803:1638"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:23771:11058":{"id":"2:23771:11058","crate_id":2,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:23772:11140"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23767:10744","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3278:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3379:8532":{"id":"2:3379:8532","crate_id":2,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3381:559"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13466:6759":{"id":"2:13466:6759","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"`DoubleEndedIterator`":"2:8447:120","prim@char":"1:16005:8392","self::pattern":"2:13053:8682","str::rsplit":"1:16011:8397","str::split_whitespace":"1:16011:8397"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:49459:8706","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:8676","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23134:11142":{"id":"2:23134:11142","crate_id":2,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdElement","id":"2:23771:11058","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23125:10744","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:4581:6861":{"id":"0:4581:6861","crate_id":0,"name":"UnrecognizedSubcommand","span":{"filename":"src/error/kind.rs","begin":[84,4],"end":[84,26]},"visibility":"default","docs":"Occurs when the user provides an unrecognized [`Subcommand`] which either\ndoesn't meet the threshold for being similar enough to an existing subcommand,\nor the 'suggestions' feature is disabled.\nOtherwise the more detailed [`InvalidSubcommand`] error is returned.\n\nThis error typically happens when passing additional subcommand names to the `help`\nsubcommand. Otherwise, the more general [`UnknownArgument`] error is used.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ErrorKind, };\nlet result = Command::new(\"prog\")\n    .subcommand(Command::new(\"config\")\n        .about(\"Used for configuration\")\n        .arg(Arg::new(\"config_file\")\n            .help(\"The configuration file to use\")))\n    .try_get_matches_from(vec![\"prog\", \"help\", \"nothing\"]);\nassert!(result.is_err());\nassert_eq!(result.unwrap_err().kind(), ErrorKind::UnrecognizedSubcommand);\n```\n\n[`Subcommand`]: crate::Subcommand\n[`InvalidSubcommand`]: ErrorKind::InvalidSubcommand\n[`UnknownArgument`]: ErrorKind::UnknownArgument","links":{"ErrorKind::InvalidSubcommand":"0:4574:1658","ErrorKind::UnknownArgument":"0:4574:1658","crate::Subcommand":"0:170:1649"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"23:45:10176":{"id":"23:45:10176","crate_id":23,"name":"MutableKeys","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["23:46:2669","23:47:6388","23:48:28324","23:50:28325","23:52:28326"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1868:2027":{"id":"0:1868:2027","crate_id":0,"name":"print","span":{"filename":"src/error/mod.rs","begin":[155,4],"end":[157,5]},"visibility":"public","docs":"Prints formatted and colored error to `stdout` or `stderr` according to its error kind\n\n# Example\n```no_run\nuse clap::Command;\n\nmatch Command::new(\"Command\").try_get_matches() {\n    Ok(matches) => {\n        // do_something\n    },\n    Err(err) => {\n        err.print().expect(\"Error writing Error\");\n        // do_something\n    },\n};\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:4082:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:31924:69556":{"id":"2:31924:69556","crate_id":2,"name":"overflowing_shr","span":null,"visibility":"public","docs":"Shifts self right by `rhs` bits.\n\nReturns a tuple of the shifted version of self along with a boolean\nindicating whether the shift value was larger than or equal to the\nnumber of bits. If the shift value is too large, then value is\nmasked (N-1) where N is the number of bits, and this value is then\nused to perform the shift.\n\n# Examples\n\nBasic usage\n\n```\nassert_eq!(0x10u64.overflowing_shr(4), (0x1, false));\nassert_eq!(0x10u64.overflowing_shr(132), (0x1, true));\n```","links":{},"attrs":["#[stable(feature = \"wrapping\", since = \"1.7.0\")]","#[rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"u64"},{"kind":"primitive","inner":"bool"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4519:6926":{"id":"0:4519:6926","crate_id":0,"name":"ActualNumOccurrences","span":{"filename":"src/error/context.rs","begin":[22,4],"end":[22,24]},"visibility":"default","docs":"Number of occurrences present","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:3371:8535":{"id":"2:3371:8535","crate_id":2,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3373:1355"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8403:151":{"id":"2:8403:151","crate_id":2,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8404:2094","2:8405:7598","2:8406:768"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:32":{"id":"0:32","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[109,46],"end":[109,60]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::derive::FromArgMatches","name":"FromArgMatches","id":"0:162:1647","glob":false}},"0:3382:2409":{"id":"0:3382:2409","crate_id":0,"name":"AllArgsOverrideSelf","span":{"filename":"src/builder/app_settings.rs","begin":[109,4],"end":[109,23]},"visibility":"default","docs":"Deprecated, replaced with [`Command::args_override_self`]","links":{"`Command::args_override_self`":"0:4231:1651"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:31940:69569":{"id":"2:31940:69569","crate_id":2,"name":"to_le_bytes","span":null,"visibility":"public","docs":"Return the memory representation of this integer as a byte array in\nlittle-endian byte order.\n\n\n\n# Examples\n\n```\nlet bytes = 0x1234567890123456u64.to_le_bytes();\nassert_eq!(bytes, [0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]);\n```","links":{},"attrs":["#[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]","#[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"array","inner":{"type":{"kind":"primitive","inner":"u8"},"len":"8"}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:130:2090":{"id":"0:130:2090","crate_id":0,"name":"parse_from","span":{"filename":"src/derive.rs","begin":[101,4],"end":[117,5]},"visibility":"default","docs":"Parse from iterator, exit on error","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["itr",{"kind":"generic","inner":"I"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"T"}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3171:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsString","id":"1:2938:180","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2887:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13083:8675":{"id":"2:13083:8675","crate_id":2,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:8677","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:3962:2974":{"id":"0:3962:2974","crate_id":0,"name":"MultipleOccurrences","span":{"filename":"src/builder/arg_settings.rs","begin":[58,4],"end":[58,23]},"visibility":"default","docs":"Deprecated, replaced with [`Arg::action`] ([Issue #3772](https://github.com/clap-rs/clap/issues/3772))","links":{"`Arg::action`":"0:3803:1638"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:165:2158":{"id":"0:165:2158","crate_id":0,"name":"update_from_arg_matches","span":{"filename":"src/derive.rs","begin":[357,4],"end":[357,85]},"visibility":"default","docs":"Assign values from `ArgMatches` to `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["matches",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4693:1642","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4627:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:22874:11192":{"id":"2:22874:11192","crate_id":2,"name":"SimdPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22875:11140","2:22876:1246","2:22877:1271"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:31900:69536":{"id":"2:31900:69536","crate_id":2,"name":"wrapping_add_signed","span":null,"visibility":"public","docs":"Wrapping (modular) addition with a signed integer. Computes\n`self + rhs`, wrapping around at the boundary of the type.\n\n# Examples\n\nBasic usage:\n\n```\n# #![feature(mixed_integer_ops)]\nassert_eq!(1u64.wrapping_add_signed(2), 3);\nassert_eq!(1u64.wrapping_add_signed(-2), u64::MAX);\nassert_eq!((u64::MAX - 2).wrapping_add_signed(4), 1);\n```","links":{},"attrs":["#[unstable(feature = \"mixed_integer_ops\", issue = \"87840\")]","#[rustc_const_unstable(feature = \"mixed_integer_ops\", issue = \"87840\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"i64"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:31860:69508":{"id":"2:31860:69508","crate_id":2,"name":"leading_ones","span":null,"visibility":"public","docs":"Returns the number of leading ones in the binary representation of `self`.\n\n# Examples\n\nBasic usage:\n\n```\nlet n = !(u64::MAX >> 2);\n\nassert_eq!(n.leading_ones(), 2);\n```","links":{},"attrs":["#[stable(feature = \"leading_trailing_ones\", since = \"1.46.0\")]","#[rustc_const_stable(feature = \"leading_trailing_ones\", since = \"1.46.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13429:4194":{"id":"2:13429:4194","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:47492:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10933:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10933:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13536:11406":{"id":"2:13536:11406","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23086:18041":{"id":"2:23086:18041","crate_id":2,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23087:14954","2:23088:21670","2:23089:21671"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23079:10744","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13462:9691":{"id":"2:13462:9691","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:47492:176","prim@char":"1:16005:8392","self::pattern":"2:13053:8682"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:8676","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:8676","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:8677","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1720":{"id":"0:1720","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[37,0],"end":[37,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"value_parser::RangedU64ValueParser","name":"RangedU64ValueParser","id":"0:4431:2239","glob":false}},"0:1615:6623":{"id":"0:1615:6623","crate_id":0,"name":"_ValueParserViaValueEnumSealed","span":{"filename":"src/builder/value_parser.rs","begin":[2060,4],"end":[2060,47]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:110:547":{"id":"0:110:547","crate_id":0,"name":"derive","span":{"filename":"src/derive.rs","begin":[1,0],"end":[577,1]},"visibility":"crate","docs":"This module contains traits that are usable with the `#[derive(...)].`\nmacros in [`clap_derive`].","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:127:1648","0:153:1646","0:162:1647","0:167:1645","0:170:1649","0:174:1650"],"is_stripped":true}},"2:31933:69564":{"id":"2:31933:69564","crate_id":2,"name":"is_power_of_two","span":null,"visibility":"public","docs":"Returns `true` if and only if `self == 2^k` for some `k`.\n\n# Examples\n\nBasic usage:\n\n```\nassert!(16u64.is_power_of_two());\nassert!(!10u64.is_power_of_two());\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_is_power_of_two\", since = \"1.32.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3733:137":{"id":"2:3733:137","crate_id":2,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3735:687"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3728:224","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6415:1396":{"id":"5:6415:1396","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:16":{"id":"0:16","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[101,0],"end":[101,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::error::Error","name":"Error","id":"0:4627:127","glob":false}},"1:6865:10752":{"id":"1:6865:10752","crate_id":1,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6866:28740"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13509:68128":{"id":"2:13509:68128","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:31863:1120":{"id":"2:31863:1120","crate_id":2,"name":"rotate_right","span":null,"visibility":"public","docs":"Shifts the bits to the right by a specified amount, `n`,\nwrapping the truncated bits to the beginning of the resulting\ninteger.\n\nPlease note this isn't the same operation as the `>>` shifting operator!\n\n# Examples\n\nBasic usage:\n\n```\nlet n = 0x6e10aau64;\nlet m = 0xaa00000000006e1;\n\nassert_eq!(n.rotate_right(12), m);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["n",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23462:11141":{"id":"2:23462:11141","crate_id":2,"name":"SimdPartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23463:1269","2:23464:1268","2:23465:1266","2:23466:1265"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdPartialEq","id":"2:22874:11192","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:4509:6848":{"id":"0:4509:6848","crate_id":0,"name":"ValidValue","span":{"filename":"src/error/context.rs","begin":[12,4],"end":[12,14]},"visibility":"default","docs":"Accepted values","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"5:783:222":{"id":"5:783:222","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:784:4191","5:785:4783","5:786:9726"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1717":{"id":"0:1717","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[36,0],"end":[36,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"value_parser::RangedI64ValueParser","name":"RangedI64ValueParser","id":"0:4419:2238","glob":false}},"0:3436:2512":{"id":"0:3436:2512","crate_id":0,"name":"NoBinaryName","span":{"filename":"src/builder/app_settings.rs","begin":[387,4],"end":[387,16]},"visibility":"default","docs":"Deprecated, replaced with [`Command::no_binary_name`]","links":{"`Command::no_binary_name`":"0:4231:1651"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"1:9347:10761":{"id":"1:9347:10761","crate_id":1,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9348:21635","1:9349:21636","1:9350:21637","1:9351:21638","1:9352:21639","1:9353:21640","1:9354:21641"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10569:10744","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:31857:69506":{"id":"2:31857:69506","crate_id":2,"name":"count_zeros","span":null,"visibility":"public","docs":"Returns the number of zeros in the binary representation of `self`.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(u64::MAX.count_zeros(), 0);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13452:6671":{"id":"2:13452:6671","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"2:13053:8682","prim@char":"1:16005:8392"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:8676","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6":{"id":"0:6","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[99,0],"end":[99,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::builder::Command","name":"Command","id":"0:755:1637","glob":false}},"0:4587:6879":{"id":"0:4587:6879","crate_id":0,"name":"ValueValidation","span":{"filename":"src/error/kind.rs","begin":[141,4],"end":[141,19]},"visibility":"default","docs":"Occurs when the user provides a value for an argument with a custom validation and the\nvalue fails that validation.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nfn is_numeric(val: &str) -> Result<(), String> {\n    match val.parse::<i64>() {\n        Ok(..) => Ok(()),\n        Err(..) => Err(String::from(\"Value wasn't a number!\")),\n    }\n}\n\nlet result = Command::new(\"prog\")\n    .arg(Arg::new(\"num\")\n         .validator(is_numeric))\n    .try_get_matches_from(vec![\"prog\", \"NotANumber\"]);\nassert!(result.is_err());\nassert_eq!(result.unwrap_err().kind(), ErrorKind::ValueValidation);\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:13531:68134":{"id":"2:13531:68134","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:13053:8682","prim@char":"1:16005:8392"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:8676","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:8676","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:8677","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1713":{"id":"0:0:1713","crate_id":0,"name":"clap","span":{"filename":"src/lib.rs","begin":[6,0],"end":[232,1]},"visibility":"public","docs":"> **Command Line Argument Parser for Rust**\n\nQuick Links:\n- Derive [tutorial][_derive::_tutorial] and [reference][_derive]\n- Builder [tutorial][_tutorial] and [reference](index.html)\n- [Cookbook][_cookbook]\n- [FAQ][_faq]\n- [Discussions](https://github.com/clap-rs/clap/discussions)\n\n## Aspirations\n\n- Out of the box, users get a polished CLI experience\n  - Including common argument behavior, help generation, suggested fixes for users, colored output, [shell completions](https://github.com/clap-rs/clap/tree/master/clap_complete), etc\n- Flexible enough to port your existing CLI interface\n  - However, we won't necessarily streamline support for each use case\n- Reasonable parse performance\n- Resilient maintainership, including\n  - Willing to break compatibility rather than batching up breaking changes in large releases\n  - Leverage feature flags to keep to one active branch\n  - Being under [WG-CLI](https://github.com/rust-cli/team/) to increase the bus factor\n- We follow semver and will wait about 6-9 months between major breaking changes\n- We will support the last two minor Rust releases (MSRV, currently 1.56.1)\n\nWhile these aspirations can be at odds with fast build times and low binary\nsize, we will still strive to keep these reasonable for the flexibility you\nget.  Check out the\n[argparse-benchmarks](https://github.com/rust-cli/argparse-benchmarks-rs) for\nCLI parsers optimized for other use cases.\n\n## Example\n\nRun\n```console\n$ cargo add clap --features derive\n```\n*(See also [feature flag reference][_features])*\n\nThen define your CLI in `main.rs`:\n ```ignore\nuse clap::Parser;\n\n/// Simple program to greet a person\n#[derive(Parser, Debug)]\n#[clap(author, version, about, long_about = None)]\nstruct Args {\n    /// Name of the person to greet\n    #[clap(short, long, value_parser)]\n    name: String,\n\n    /// Number of times to greet\n    #[clap(short, long, value_parser, default_value_t = 1)]\n    count: u8,\n}\n\nfn main() {\n    let args = Args::parse();\n\n    for _ in 0..args.count {\n        println!(\"Hello {}!\", args.name)\n    }\n}\n```\n\nAnd try it out:\n```console\n$ demo --help\nclap [..]\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUSAGE:\n    demo[EXE] [OPTIONS] --name <NAME>\n\nOPTIONS:\n    -c, --count <COUNT>    Number of times to greet [default: 1]\n    -h, --help             Print help information\n    -n, --name <NAME>      Name of the person to greet\n    -V, --version          Print version information\n\n$ demo --name Me\nHello Me!\n\n```\n*(version number and `.exe` extension on windows replaced by placeholders)*\n\nSee also the derive [tutorial][_derive::_tutorial] and [reference][_derive]\n\n### Related Projects\n\nAugment clap:\n- [wild](https://crates.io/crates/wild) for supporting wildcards (`*`) on Windows like you do Linux\n- [argfile](https://crates.io/crates/argfile) for loading additional arguments from a file (aka response files)\n- [shadow-rs](https://crates.io/crates/shadow-rs) for generating `Command::long_version`\n- [clap_mangen](https://crates.io/crates/clap_mangen) for generating man page source (roff)\n- [clap_complete](https://crates.io/crates/clap_complete) for shell completion support\n\nCLI Helpers\n- [clap-verbosity-flag](https://crates.io/crates/clap-verbosity-flag)\n- [clap-cargo](https://crates.io/crates/clap-cargo)\n- [concolor-clap](https://crates.io/crates/concolor-clap)\n\nTesting\n- [`trycmd`](https://crates.io/crates/trycmd):  Bulk snapshot testing\n- [`snapbox`](https://crates.io/crates/snapbox):  Specialized snapshot testing\n- [`assert_cmd`](https://crates.io/crates/assert_cmd) and [`assert_fs`](https://crates.io/crates/assert_fs): Customized testing\n\nDocumentation:\n- [Command-line Apps for Rust](https://rust-cli.github.io/book/index.html) book\n","links":{},"attrs":["#![doc(html_logo_url =\n\"https://raw.githubusercontent.com/clap-rs/clap/master/assets/clap.png\")]","#![warn(missing_docs, missing_debug_implementations,\nmissing_copy_implementations, trivial_casts, unused_allocation,\ntrivial_numeric_casts, clippy :: single_char_pattern)]","#![forbid(unsafe_code)]","#![allow(clippy :: single_component_path_imports)]","#![allow(clippy :: branches_sharing_code)]","#![allow(clippy :: if_same_then_else)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:215:1635","0:1777:1640","0:1943:1641","0:103:1889","0:105:1908","0:1606:2234","0:3","0:6","0:10","0:13","0:16","0:19","0:22","0:26","0:29","0:32","0:35","0:38","0:41","0:44","0:48","0:51","0:54","0:57","0:60","0:63","0:67","0:70","0:74","0:77","0:80","0:83","0:86","0:92"],"is_stripped":false}},"2:3268:211":{"id":"2:3268:211","crate_id":2,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:2034:1640":{"id":"0:2034:1640","crate_id":0,"name":"error","span":{"filename":"src/parser/error.rs","begin":[1,0],"end":[67,1]},"visibility":{"restricted":{"parent":"0:1943:1641","path":"::parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:4673:7163"],"is_stripped":true}},"0:1544:1648":{"id":"0:1544:1648","crate_id":0,"name":"Parser","span":{"filename":"src/builder/value_parser.rs","begin":[1819,4],"end":[1819,16]},"visibility":"default","docs":"Generated parser, usually [`ValueParser`].\n\nIt should at least be a type that supports `Into<ValueParser>`.  A non-`ValueParser` type\nallows the caller to do further initialization on the parser.","links":{"`ValueParser`":"0:1294:2242"},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"0:242:1908":{"id":"0:242:1908","crate_id":0,"name":"arg","span":{"filename":"src/builder/arg.rs","begin":[1,0],"end":[5494,1]},"visibility":{"restricted":{"parent":"0:215:1635","path":"::builder"}},"docs":null,"links":{},"attrs":["#![allow(deprecated)]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:3803:1638"],"is_stripped":true}},"0:4583:6288":{"id":"0:4583:6288","crate_id":0,"name":"EmptyValue","span":{"filename":"src/error/kind.rs","begin":[102,4],"end":[102,14]},"visibility":"default","docs":"Occurs when the user provides an empty value for an option that does not allow empty\nvalues.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"color\")\n         .takes_value(true)\n         .forbid_empty_values(true)\n         .long(\"color\"))\n    .try_get_matches_from(vec![\"prog\", \"--color=\"]);\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind(), ErrorKind::EmptyValue);\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:4553:1541":{"id":"0:4553:1541","crate_id":0,"name":"0","span":{"filename":"src/error/context.rs","begin":[48,9],"end":[48,13]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"primitive","inner":"bool"}},"0:4574:1658":{"id":"0:4574:1658","crate_id":0,"name":"ErrorKind","span":{"filename":"src/error/kind.rs","begin":[4,0],"end":[396,1]},"visibility":"public","docs":"Command line argument parser kind of error","links":{},"attrs":["#[non_exhaustive]"],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:4575:6853","0:4577:6886","0:4579:6857","0:4581:6861","0:4583:6288","0:4585:6850","0:4587:6879","0:4589:6874","0:4591:6877","0:4593:6869","0:4595:6881","0:4597:6844","0:4599:6863","0:4601:6865","0:4603:6884","0:4605:6866","0:4607:6805","0:4609:6839","0:4611:6806","0:4613:6891","0:4615:6955","0:4617:6956"],"impls":[]}},"5:6084:68760":{"id":"5:6084:68760","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2222","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8106:2971","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2222","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8106:2971","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:31951:69575":{"id":"2:31951:69575","crate_id":2,"name":"max_value","span":null,"visibility":"public","docs":"New code should prefer to use\n[`u64::MAX`] instead.\n\nReturns the largest value that can be represented by this integer type.","links":{"`u64::MAX`":"1:16025:8409"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_promotable]","#[rustc_const_stable(feature = \"const_max_value\", since = \"1.32.0\")]","#[deprecated(since = \"TBD\", note =\n\"replaced by the `MAX` associated constant on this type\")]"],"deprecation":{"since":"TBD","note":"replaced by the `MAX` associated constant on this type"},"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2427":{"id":"0:2427","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/mod.rs","begin":[7,0],"end":[7,31]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"arg_matches::RawValues","name":"RawValues","id":"0:4750:7161","glob":false}},"0:4815:7197":{"id":"0:4815:7197","crate_id":0,"name":"CommandLine","span":{"filename":"src/parser/matches/value_source.rs","begin":[10,4],"end":[10,15]},"visibility":"default","docs":"Value was passed in on the command-line","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:31937:29944":{"id":"2:31937:29944","crate_id":2,"name":"wrapping_next_power_of_two","span":null,"visibility":"public","docs":"Returns the smallest power of two greater than or equal to `n`. If\nthe next power of two is greater than the type's maximum value,\nthe return value is wrapped to `0`.\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(wrapping_next_power_of_two)]\n\nassert_eq!(2u64.wrapping_next_power_of_two(), 2);\nassert_eq!(3u64.wrapping_next_power_of_two(), 4);\nassert_eq!(u64::MAX.wrapping_next_power_of_two(), 0);\n```","links":{},"attrs":["#[unstable(feature = \"wrapping_next_power_of_two\", issue = \"32463\", reason =\n\"needs decision on wrapping behaviour\")]","#[rustc_const_unstable(feature = \"wrapping_next_power_of_two\", issue =\n\"32463\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4366:6342":{"id":"0:4366:6342","crate_id":0,"name":"Url","span":{"filename":"src/builder/value_hint.rs","begin":[64,4],"end":[64,7]},"visibility":"default","docs":"Complete web address.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:3339:2320":{"id":"0:3339:2320","crate_id":0,"name":"StoreValue","span":{"filename":"src/builder/action.rs","begin":[81,4],"end":[81,14]},"visibility":"default","docs":"Deprecated, replaced with [`ArgAction::Set`] or [`ArgAction::Append`]","links":{"`ArgAction::Set`":"0:3334:1636","`ArgAction::Append`":"0:3334:1636"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:1918":{"id":"0:1918","crate_id":0,"name":null,"span":{"filename":"src/error/mod.rs","begin":[1000,0],"end":[1005,1]},"visibility":{"restricted":{"parent":"0:1777:1640","path":"::error"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["source","description","type_id","provide","cause"],"trait":{"kind":"resolved_path","inner":{"name":"Error","id":"1:2576:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4627:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:1919:6789"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:31869:69514":{"id":"2:31869:69514","crate_id":2,"name":"to_le","span":null,"visibility":"public","docs":"Converts `self` to little endian from the target's endianness.\n\nOn little endian this is a no-op. On big endian the bytes are\nswapped.\n\n# Examples\n\nBasic usage:\n\n```\nlet n = 0x1Au64;\n\nif cfg!(target_endian = \"little\") {\n    assert_eq!(n.to_le(), n)\n} else {\n    assert_eq!(n.to_le(), n.swap_bytes())\n}\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23467:18060":{"id":"2:23467:18060","crate_id":2,"name":"SimdOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23468:21693","2:23469:21692","2:23470:21694"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdPartialOrd","id":"2:23462:11141","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:9258:7235":{"id":"2:9258:7235","crate_id":2,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5837:8681":{"id":"5:5837:8681","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5839:181","5:5840:1843"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:153:1646":{"id":"0:153:1646","crate_id":0,"name":"CommandFactory","span":{"filename":"src/derive.rs","begin":[250,0],"end":[280,1]},"visibility":"public","docs":"Create a [`Command`] relevant for a user-defined container.\n\nDerived as part of [`Parser`].","links":{"`Command`":"0:755:1637","`Parser`":"0:127:1648"},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:154:1889","0:156:2128","0:158:2101","0:160:2133"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2076","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:2966:184":{"id":"2:2966:184","crate_id":2,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2968:997","2:2969:826","2:2970:792","2:2971:713","2:2972:696"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2076","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2920:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:2044:2079":{"id":"0:2044:2079","crate_id":0,"name":"matches","span":{"filename":"src/parser/matches/mod.rs","begin":[1,0],"end":[17,40]},"visibility":{"restricted":{"parent":"0:1943:1641","path":"::parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:2424","0:2427","0:2430","0:2434","0:2437","0:2440","0:2453","0:2456"],"is_stripped":true}},"0:1365:2078":{"id":"0:1365:2078","crate_id":0,"name":"parse","span":{"filename":"src/builder/value_parser.rs","begin":[622,4],"end":[629,5]},"visibility":"default","docs":"Parse the argument value\n\nWhen `arg` is `None`, an external subcommand value is being parsed.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["cmd",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Command","id":"0:755:1637","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}],["arg",{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Arg","id":"0:3803:1638","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["value",{"kind":"resolved_path","inner":{"name":"std::ffi::OsString","id":"1:2938:180","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Value","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:1362:2241","args":null,"param_names":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"crate::Error","id":"0:4627:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:31926:47368":{"id":"2:31926:47368","crate_id":2,"name":"pow","span":null,"visibility":"public","docs":"Raises self to the power of `exp`, using exponentiation by squaring.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(2u64.pow(5), 32);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_int_pow\", since = \"1.50.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["exp",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3203:681":{"id":"2:3203:681","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13063:8676":{"id":"2:13063:8676","crate_id":2,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13065:8678","2:13066:28501","2:13067:28502","2:13068:28503","2:13069:28504","2:13070:28505","2:13071:28506"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:60":{"id":"0:60","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[113,71],"end":[113,84]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::builder::PossibleValue","name":"PossibleValue","id":"0:4285:1656","glob":false}},"2:13512:68130":{"id":"2:13512:68130","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3384:2413":{"id":"0:3384:2413","crate_id":0,"name":"AllowMissingPositional","span":{"filename":"src/builder/app_settings.rs","begin":[120,4],"end":[120,26]},"visibility":"default","docs":"Deprecated, replaced with [`Command::allow_missing_positional`] and\n[`Command::is_allow_missing_positional_set`]","links":{"`Command::is_allow_missing_positional_set`":"0:4231:1651","`Command::allow_missing_positional`":"0:4231:1651"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:2865:8562":{"id":"2:2865:8562","crate_id":2,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2867:27060"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2076","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2862:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:35":{"id":"0:35","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[109,62],"end":[109,68]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::derive::Parser","name":"Parser","id":"0:127:1648","glob":false}},"0:48":{"id":"0:48","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[113,25],"end":[113,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::builder::AppFlags","name":"AppFlags","id":"0:3358:1652","glob":false}},"0:63":{"id":"0:63","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[113,86],"end":[113,95]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::builder::ValueHint","name":"ValueHint","id":"0:4343:1657","glob":false}},"2:31896:69534":{"id":"2:31896:69534","crate_id":2,"name":"saturating_mul","span":null,"visibility":"public","docs":"Saturating integer multiplication. Computes `self * rhs`,\nsaturating at the numeric bounds instead of overflowing.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(2u64.saturating_mul(10), 20);\nassert_eq!((u64::MAX).saturating_mul(10), u64::MAX);\n```","links":{},"attrs":["#[stable(feature = \"wrapping\", since = \"1.7.0\")]","#[rustc_const_stable(feature = \"const_saturating_int_methods\", since =\n\"1.47.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3430:2502":{"id":"0:3430:2502","crate_id":0,"name":"Hidden","span":{"filename":"src/builder/app_settings.rs","begin":[362,4],"end":[362,10]},"visibility":"default","docs":"Deprecated, replaced with [`Command::hide`] and [`Command::is_hide_set`]","links":{"`Command::hide`":"0:4231:1651","`Command::is_hide_set`":"0:4231:1651"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:13442:11104":{"id":"2:13442:11104","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:16005:8392"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49435:8690","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:649:1889":{"id":"0:649:1889","crate_id":0,"name":"command","span":{"filename":"src/builder/command.rs","begin":[1,0],"end":[5164,1]},"visibility":{"restricted":{"parent":"0:215:1635","path":"::builder"}},"docs":null,"links":{},"attrs":["#![allow(deprecated)]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:755:1637","0:4231:1651"],"is_stripped":true}},"0:3978:3351":{"id":"0:3978:3351","crate_id":0,"name":"RequireDelimiter","span":{"filename":"src/builder/arg_settings.rs","begin":[134,4],"end":[134,20]},"visibility":"default","docs":"Deprecated, replaced with [`Arg::require_value_delimiter`] and\n[`Arg::is_require_value_delimiter_set`]","links":{"`Arg::require_value_delimiter`":"0:3803:1638","`Arg::is_require_value_delimiter_set`":"0:3803:1638"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"b:2:3197-0:4627:127":{"id":"b:2:3197-0:4627:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3174:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3171:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4627:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3200:2364"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3309:5996":{"id":"2:3309:5996","crate_id":2,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:3319:1552":{"id":"0:3319:1552","crate_id":0,"name":"color","span":{"filename":"src/util/color.rs","begin":[1,0],"end":[62,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:5058:1644"],"is_stripped":true}},"0:597:2228":{"id":"0:597:2228","crate_id":0,"name":"arg_group","span":{"filename":"src/builder/arg_group.rs","begin":[2,0],"end":[633,1]},"visibility":{"restricted":{"parent":"0:215:1635","path":"::builder"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:3890:1639"],"is_stripped":true}},"0:3396:2434":{"id":"0:3396:2434","crate_id":0,"name":"SubcommandRequiredElseHelp","span":{"filename":"src/builder/app_settings.rs","begin":[177,4],"end":[177,30]},"visibility":"default","docs":"Deprecated, replaced with [`Command::subcommand_required`] combined with\n[`Command::arg_required_else_help`].","links":{"`Command::subcommand_required`":"0:4231:1651","`Command::arg_required_else_help`":"0:4231:1651"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:4521:6870":{"id":"0:4521:6870","crate_id":0,"name":"MaxOccurrences","span":{"filename":"src/error/context.rs","begin":[24,4],"end":[24,18]},"visibility":"default","docs":"Maximum number of allowed occurrences","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:13534:2078":{"id":"2:13534:2078","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12992:1837","`FromStr`":"2:12992:1837"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12992:1837","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12992:1837","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4585:6850":{"id":"0:4585:6850","crate_id":0,"name":"NoEquals","span":{"filename":"src/error/kind.rs","begin":[118,4],"end":[118,12]},"visibility":"default","docs":"Occurs when the user doesn't use equals for an option that requires equal\nsign to provide values.\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"color\")\n         .takes_value(true)\n         .require_equals(true)\n         .long(\"color\"))\n    .try_get_matches_from(vec![\"prog\", \"--color\", \"red\"]);\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind(), ErrorKind::NoEquals);\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:3957:1655":{"id":"0:3957:1655","crate_id":0,"name":"ArgSettings","span":{"filename":"src/builder/arg_settings.rs","begin":[34,0],"end":[268,1]},"visibility":"public","docs":"Various settings that apply to arguments and may be set, unset, and checked via getter/setter\nmethods [`Arg::setting`], [`Arg::unset_setting`], and [`Arg::is_set`]. This is what the\n[`Arg`] methods which accept a `bool` use internally.\n\n[`Arg`]: crate::Arg\n[`Arg::setting`]: crate::Arg::setting()\n[`Arg::unset_setting`]: crate::Arg::unset_setting()\n[`Arg::is_set`]: crate::Arg::is_set()","links":{"crate::Arg::unset_setting()":"0:3803:1638","crate::Arg::setting()":"0:3803:1638","crate::Arg::is_set()":"0:3803:1638","crate::Arg":"0:3803:1638"},"attrs":["#[non_exhaustive]"],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":true,"variants":["0:3958:2923","0:3960:3112","0:3962:2974","0:3966:3278","0:3968:2971","0:3970:2502","0:3972:3008","0:3974:3312","0:3976:2481","0:3978:3351","0:3980:2506","0:3982:2402","0:3986:3289","0:3988:2904","0:3990:3655","0:3992:3249","0:3996:3683","0:3998:3689","0:4000:3274","0:4002:2951"],"impls":[]}},"1:5779:10731":{"id":"1:5779:10731","crate_id":1,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5780:28711","1:5781:28712","1:5782:28713","1:5783:28714"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:31889:1444":{"id":"2:31889:1444","crate_id":2,"name":"unchecked_shl","span":null,"visibility":"public","docs":"Unchecked shift left. Computes `self << rhs`, assuming that\n`rhs` is less than the number of bits in `self`.\n\n# Safety\n\nThis results in undefined behavior if `rhs` is larger than\nor equal to the number of bits in `self`,\ni.e. when [`checked_shl`] would return `None`.\n\n[`checked_shl`]: u64::checked_shl","links":{"u64::checked_shl":"1:16025:8409"},"attrs":["#[unstable(feature = \"unchecked_math\", reason = \"niche optimization path\",\nissue = \"85122\",)]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]","#[rustc_const_unstable(feature = \"const_inherent_unchecked_arith\", issue =\n\"85122\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:31902:1527":{"id":"2:31902:1527","crate_id":2,"name":"wrapping_mul","span":null,"visibility":"public","docs":"Wrapping (modular) multiplication. Computes `self *\nrhs`, wrapping around at the boundary of the type.\n\n# Examples\n\nBasic usage:\n\nPlease note that this example is shared between integer types.\nWhich explains why `u8` is used here.\n\n```\nassert_eq!(10u8.wrapping_mul(12), 120);\nassert_eq!(25u8.wrapping_mul(12), 44);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3524:132":{"id":"2:3524:132","crate_id":2,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3526:181","2:3527:378"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:4687:2366":{"id":"0:4687:2366","crate_id":0,"name":"AnyValueId","span":{"filename":"src/parser/matches/any_value.rs","begin":[42,0],"end":[46,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"a:2:3280:220-0:4627:127":{"id":"a:2:3280:220-0:4627:127","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3280:220","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4627:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3976:2481":{"id":"0:3976:2481","crate_id":0,"name":"NextLineHelp","span":{"filename":"src/builder/arg_settings.rs","begin":[124,4],"end":[124,16]},"visibility":"default","docs":"Deprecated, replaced with [`Arg::next_line_help`] and [`Arg::is_next_line_help_set`]","links":{"`Arg::is_next_line_help_set`":"0:3803:1638","`Arg::next_line_help`":"0:3803:1638"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:13507:68127":{"id":"2:13507:68127","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:31899:1526":{"id":"2:31899:1526","crate_id":2,"name":"wrapping_add","span":null,"visibility":"public","docs":"Wrapping (modular) addition. Computes `self + rhs`,\nwrapping around at the boundary of the type.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(200u64.wrapping_add(55), 255);\nassert_eq!(200u64.wrapping_add(u64::MAX), 199);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5745:10730":{"id":"1:5745:10730","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5746:14478","1:5747:28699","1:5748:6220","1:5749:28700","1:5750:10966","1:5751:10967","1:5752:28701","1:5753:1303","1:5754:28702","1:5755:28703","1:5756:28704","1:5757:28705","1:5758:28706","1:5759:28707","1:5760:28708","1:5761:28709"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:31952:69576":{"id":"2:31952:69576","crate_id":2,"name":"widening_mul","span":null,"visibility":"public","docs":"Calculates the complete product `self * rhs` without the possibility to overflow.\n\nThis returns the low-order (wrapping) bits and the high-order (overflow) bits\nof the result as two separate values, in that order.\n\n# Examples\n\nBasic usage:\n\nPlease note that this example is shared between integer types.\nWhich explains why `u32` is used here.\n\n```\n#![feature(bigint_helper_methods)]\nassert_eq!(5u32.widening_mul(2), (10, 0));\nassert_eq!(1_000_000_000u32.widening_mul(10), (1410065408, 2));\n```","links":{},"attrs":["#[unstable(feature = \"bigint_helper_methods\", issue = \"85532\")]","#[rustc_const_unstable(feature = \"const_bigint_helper_methods\", issue =\n\"85532\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"u64"},{"kind":"primitive","inner":"u64"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:154:1889":{"id":"0:154:1889","crate_id":0,"name":"command","span":{"filename":"src/derive.rs","begin":[254,4],"end":[257,5]},"visibility":"default","docs":"Build a [`Command`] that can instantiate `Self`.\n\nSee [`FromArgMatches::from_arg_matches_mut`] for instantiating `Self`.","links":{"`FromArgMatches::from_arg_matches_mut`":"0:162:1647","`Command`":"0:755:1637"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Command","id":"0:755:1637","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3400:2441":{"id":"0:3400:2441","crate_id":0,"name":"Multicall","span":{"filename":"src/builder/app_settings.rs","begin":[198,4],"end":[198,13]},"visibility":"default","docs":"Deprecated, replaced with [`Command::multicall`] and [`Command::is_multicall_set`]","links":{"`Command::is_multicall_set`":"0:4231:1651","`Command::multicall`":"0:4231:1651"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:3504:8546":{"id":"2:3504:8546","crate_id":2,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3505:545"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"2:3491:116","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:4597:6844":{"id":"0:4597:6844","crate_id":0,"name":"ArgumentConflict","span":{"filename":"src/error/kind.rs","begin":[235,4],"end":[235,20]},"visibility":"default","docs":"Occurs when the user provides two values which conflict with each other and can't be used\ntogether.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet result = Command::new(\"prog\")\n    .arg(Arg::new(\"debug\")\n        .long(\"debug\")\n        .conflicts_with(\"color\"))\n    .arg(Arg::new(\"color\")\n        .long(\"color\"))\n    .try_get_matches_from(vec![\"prog\", \"--debug\", \"--color\"]);\nassert!(result.is_err());\nassert_eq!(result.unwrap_err().kind(), ErrorKind::ArgumentConflict);\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:31917:69549":{"id":"2:31917:69549","crate_id":2,"name":"overflowing_mul","span":null,"visibility":"public","docs":"Calculates the multiplication of `self` and `rhs`.\n\nReturns a tuple of the multiplication along with a boolean\nindicating whether an arithmetic overflow would occur. If an\noverflow would have occurred then the wrapped value is returned.\n\n# Examples\n\nBasic usage:\n\nPlease note that this example is shared between integer types.\nWhich explains why `u32` is used here.\n\n```\nassert_eq!(5u32.overflowing_mul(2), (10, false));\nassert_eq!(1_000_000_000u32.overflowing_mul(10), (1410065408, true));\n```","links":{},"attrs":["#[stable(feature = \"wrapping\", since = \"1.7.0\")]","#[rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                          without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"u64"},{"kind":"primitive","inner":"bool"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4364:6340":{"id":"0:4364:6340","crate_id":0,"name":"Hostname","span":{"filename":"src/builder/value_hint.rs","begin":[62,4],"end":[62,12]},"visibility":"default","docs":"Host name of a computer.\nShells usually parse `/etc/hosts` and `.ssh/known_hosts` to complete hostnames.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:13444:29892":{"id":"2:13444:29892","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"1:16011:8397"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:49733:8686","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:164:2082":{"id":"0:164:2082","crate_id":0,"name":"from_arg_matches_mut","span":{"filename":"src/derive.rs","begin":[352,4],"end":[354,5]},"visibility":"default","docs":"Instantiate `Self` from [`ArgMatches`], parsing the arguments as needed.\n\nMotivation: If our application had two CLI options, `--name\n<STRING>` and the flag `--debug`, we may create a struct as follows:\n\n ```ignore\nstruct Context {\n    name: String,\n    debug: bool\n}\n```\n\nWe then need to convert the `ArgMatches` that `clap` generated into our struct.\n`from_arg_matches_mut` serves as the equivalent of:\n\n ```ignore\n# use clap::ArgMatches;\n# struct Context {\n#   name: String,\n#   debug: bool\n# }\nimpl From<ArgMatches> for Context {\n   fn from(m: ArgMatches) -> Self {\n       Context {\n           name: m.get_one::<String>(\"name\").unwrap().to_string(),\n           debug: *m.get_one::<bool>(\"debug\").expect(\"defaulted by clap\"),\n       }\n   }\n}\n```","links":{"`ArgMatches`":"0:4693:1642"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["matches",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4693:1642","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4627:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2822":{"id":"0:2822","crate_id":0,"name":null,"span":{"filename":"src/parser/mod.rs","begin":[27,34],"end":[27,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"import","inner":{"source":"self::matches::Values","name":"Values","id":"0:4760:1662","glob":false}},"0:136:2100":{"id":"0:136:2100","crate_id":0,"name":"update_from","span":{"filename":"src/derive.rs","begin":[130,4],"end":[143,5]},"visibility":"default","docs":"Update from iterator, exit on error","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["itr",{"kind":"generic","inner":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"T"}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3171:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsString","id":"1:2938:180","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2887:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:31866:69511":{"id":"2:31866:69511","crate_id":2,"name":"from_be","span":null,"visibility":"public","docs":"Converts an integer from big endian to the target's endianness.\n\nOn big endian this is a no-op. On little endian the bytes are\nswapped.\n\n# Examples\n\nBasic usage:\n\n```\nlet n = 0x1Au64;\n\nif cfg!(target_endian = \"big\") {\n    assert_eq!(u64::from_be(n), n)\n} else {\n    assert_eq!(u64::from_be(n), n.swap_bytes())\n}\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["x",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:227:2227":{"id":"0:227:2227","crate_id":0,"name":"app_settings","span":{"filename":"src/builder/app_settings.rs","begin":[1,0],"end":[864,1]},"visibility":{"restricted":{"parent":"0:215:1635","path":"::builder"}},"docs":null,"links":{},"attrs":["#![allow(deprecated)]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:3373:1653"],"is_stripped":true}},"0:19":{"id":"0:19","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[102,0],"end":[102,34]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::parser::ArgMatches","name":"ArgMatches","id":"0:4693:1642","glob":false}},"0:1858:61":{"id":"0:1858:61","crate_id":0,"name":"raw","span":{"filename":"src/error/mod.rs","begin":[77,4],"end":[79,5]},"visibility":"public","docs":"Create an unformatted error\n\nThis is for you need to pass the error up to\na place that has access to the `Command` at which point you can call [`Error::format`].\n\nPrefer [`Command::error`] for generating errors.\n\n[`Command::error`]: crate::Command::error","links":{"`Error::format`":"0:4627:127","crate::Command::error":"0:4231:1651"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["kind",{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4574:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}],["message",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"std::fmt::Display","id":"2:10298:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl std::fmt::Display","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"std::fmt::Display","id":"2:10298:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6561:10773":{"id":"1:6561:10773","crate_id":1,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6562:28772","1:6563:28773"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:31922:69554":{"id":"2:31922:69554","crate_id":2,"name":"overflowing_neg","span":null,"visibility":"public","docs":"Negates self in an overflowing fashion.\n\nReturns `!self + 1` using wrapping operations to return the value\nthat represents the negation of this unsigned value. Note that for\npositive unsigned values overflow always occurs, but negating 0 does\nnot overflow.\n\n# Examples\n\nBasic usage\n\n```\nassert_eq!(0u64.overflowing_neg(), (0, false));\nassert_eq!(2u64.overflowing_neg(), (-2i32 as u64, true));\n```","links":{},"attrs":["#[stable(feature = \"wrapping\", since = \"1.7.0\")]","#[rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"u64"},{"kind":"primitive","inner":"bool"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:31883:69525":{"id":"2:31883:69525","crate_id":2,"name":"log10","span":null,"visibility":"public","docs":"Returns the base 10 logarithm of the number, rounded down.\n\n# Panics\n\nWhen the number is zero it panics in debug mode and the\nreturn value is 0 in release mode.\n\n# Example\n\n```\n#![feature(int_log)]\nassert_eq!(10u64.log10(), 1);\n```","links":{},"attrs":["#[unstable(feature = \"int_log\", issue = \"70887\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]","#[track_caller]","#[allow(arithmetic_overflow)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3426:8542":{"id":"2:3426:8542","crate_id":2,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3428:354"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:4535:6990":{"id":"0:4535:6990","crate_id":0,"name":"Custom","span":{"filename":"src/error/context.rs","begin":[38,4],"end":[38,10]},"visibility":"default","docs":"An opaque message to the user","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:4676:616":{"id":"0:4676:616","crate_id":0,"name":"expected","span":{"filename":"src/parser/error.rs","begin":[14,8],"end":[14,35]},"visibility":"default","docs":"The target type to downcast to","links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"super::AnyValueId","id":"0:4687:2366","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"2:3811:8556":{"id":"2:3811:8556","crate_id":2,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1753":{"id":"0:1753","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[48,0],"end":[48,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"value_parser::FalseyValueParser","name":"FalseyValueParser","id":"0:4449:2250","glob":false}},"2:10298:119":{"id":"2:10298:119","crate_id":2,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10299:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:31936:69567":{"id":"2:31936:69567","crate_id":2,"name":"checked_next_power_of_two","span":null,"visibility":"public","docs":"Returns the smallest power of two greater than or equal to `n`. If\nthe next power of two is greater than the type's maximum value,\n`None` is returned, otherwise the power of two is wrapped in `Some`.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(2u64.checked_next_power_of_two(), Some(2));\nassert_eq!(3u64.checked_next_power_of_two(), Some(4));\nassert_eq!(u64::MAX.checked_next_power_of_two(), None);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_int_pow\", since = \"1.50.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4502:6775":{"id":"0:4502:6775","crate_id":0,"name":"ContextKind","span":{"filename":"src/error/context.rs","begin":[4,0],"end":[39,1]},"visibility":"public","docs":"Semantics for a piece of error information","links":{},"attrs":["#[non_exhaustive]"],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:4503:6857","0:4505:6845","0:4507:6846","0:4509:6848","0:4511:6853","0:4513:6872","0:4515:6882","0:4517:6878","0:4519:6926","0:4521:6870","0:4523:6859","0:4525:6858","0:4527:6887","0:4529:6854","0:4531:6889","0:4533:4551","0:4535:6990"],"impls":[]}},"1:6863:10743":{"id":"1:6863:10743","crate_id":1,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6864:28735"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:162:1647":{"id":"0:162:1647","crate_id":0,"name":"FromArgMatches","span":{"filename":"src/derive.rs","begin":[285,0],"end":[363,1]},"visibility":"public","docs":"Converts an instance of [`ArgMatches`] to a user-defined container.\n\nDerived as part of [`Parser`], [`Args`], and [`Subcommand`].","links":{"`Args`":"0:167:1645","`Subcommand`":"0:170:1649","`ArgMatches`":"0:4693:1642","`Parser`":"0:127:1648"},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:163:2111","0:164:2082","0:165:2158","0:166:2102"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2076","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:1699":{"id":"0:1699","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[31,23],"end":[31,31]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"arg_settings::ArgFlags","name":"ArgFlags","id":"0:3942:1654","glob":false}},"5:6104:6475":{"id":"5:6104:6475","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:432:2222","`String`":"5:8368:216"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2222","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8106:2971","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13072:8678":{"id":"2:13072:8678","crate_id":2,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13074:11097","2:13075:922","2:13076:28545","2:13077:28546"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:31872:69516":{"id":"2:31872:69516","crate_id":2,"name":"checked_add_signed","span":null,"visibility":"public","docs":"Checked addition with a signed integer. Computes `self + rhs`,\nreturning `None` if overflow occurred.\n\n# Examples\n\nBasic usage:\n\n```\n# #![feature(mixed_integer_ops)]\nassert_eq!(1u64.checked_add_signed(2), Some(3));\nassert_eq!(1u64.checked_add_signed(-2), None);\nassert_eq!((u64::MAX - 2).checked_add_signed(3), None);\n```","links":{},"attrs":["#[unstable(feature = \"mixed_integer_ops\", issue = \"87840\")]","#[rustc_const_unstable(feature = \"mixed_integer_ops\", issue = \"87840\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"i64"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3351:8526":{"id":"2:3351:8526","crate_id":2,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3353:181","2:3354:558"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:133:2097":{"id":"0:133:2097","crate_id":0,"name":"try_parse_from","span":{"filename":"src/derive.rs","begin":[120,4],"end":[127,5]},"visibility":"default","docs":"Parse from iterator, return Err on error.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["itr",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4627:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"T"}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3171:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsString","id":"1:2938:180","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2887:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4788:1659":{"id":"0:4788:1659","crate_id":0,"name":"Indices","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1654,0],"end":[1657,1]},"visibility":"public","docs":"Iterate over indices for where an argument appeared when parsing, via [`ArgMatches::indices_of`]\n\n# Examples\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"myapp\")\n    .arg(Arg::new(\"output\")\n        .short('o')\n        .multiple_values(true)\n        .takes_value(true))\n    .get_matches_from(vec![\"myapp\", \"-o\", \"val1\", \"val2\"]);\n\nlet mut indices = m.indices_of(\"output\").unwrap();\n\nassert_eq!(indices.next(), Some(2));\nassert_eq!(indices.next(), Some(3));\nassert_eq!(indices.next(), None);\n```\n[`ArgMatches::indices_of`]: ArgMatches::indices_of()","links":{"ArgMatches::indices_of()":"0:4693:1642"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"2:14165:141":{"id":"2:14165:141","crate_id":2,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14166:277","2:14167:518","2:14168:280","2:14169:1079"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13511:68129":{"id":"2:13511:68129","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13422:68116":{"id":"2:13422:68116","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:16011:8397"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4617:6956":{"id":"0:4617:6956","crate_id":0,"name":"Format","span":{"filename":"src/error/kind.rs","begin":[395,4],"end":[395,10]},"visibility":"default","docs":"Represents a [Format error] (which is a part of [`Display`]).\nTypically caused by writing to `stderr` or `stdout`.\n\n[`Display`]: std::fmt::Display\n[Format error]: std::fmt::Error","links":{"std::fmt::Error":"2:48558:127","std::fmt::Display":"2:10298:119"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:3341:2323":{"id":"0:3341:2323","crate_id":0,"name":"IncOccurrence","span":{"filename":"src/builder/action.rs","begin":[90,4],"end":[90,17]},"visibility":"default","docs":"Deprecated, replaced with [`ArgAction::SetTrue`] or [`ArgAction::Count`]","links":{"`ArgAction::Count`":"0:3334:1636","`ArgAction::SetTrue`":"0:3334:1636"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:10300:8581":{"id":"2:10300:8581","crate_id":2,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10301:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:31887:69529":{"id":"2:31887:69529","crate_id":2,"name":"checked_neg","span":null,"visibility":"public","docs":"Checked negation. Computes `-self`, returning `None` unless `self ==\n0`.\n\nNote that negating any positive integer will overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(0u64.checked_neg(), Some(0));\nassert_eq!(1u64.checked_neg(), None);\n```","links":{},"attrs":["#[stable(feature = \"wrapping\", since = \"1.7.0\")]","#[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.47.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3968:2971":{"id":"0:3968:2971","crate_id":0,"name":"Global","span":{"filename":"src/builder/arg_settings.rs","begin":[87,4],"end":[87,10]},"visibility":"default","docs":"Deprecated, replaced with [`Arg::global`] and [`Arg::is_global_set`]","links":{"`Arg::global`":"0:3803:1638","`Arg::is_global_set`":"0:3803:1638"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:3440:2516":{"id":"0:3440:2516","crate_id":0,"name":"NoAutoVersion","span":{"filename":"src/builder/app_settings.rs","begin":[401,4],"end":[401,17]},"visibility":"default","docs":"Deprecated, replaced with [`Arg::action`][super::Arg::action]","links":{"super::Arg::action":"0:3803:1638"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:2920:183":{"id":"2:2920:183","crate_id":2,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2922:604","2:2923:907"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2076","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:4443:2247":{"id":"0:4443:2247","crate_id":0,"name":"BoolValueParser","span":{"filename":"src/builder/value_parser.rs","begin":[1453,0],"end":[1453,29]},"visibility":"public","docs":"Implementation for [`ValueParser::bool`]\n\nUseful for composing new [`TypedValueParser`]s","links":{"`TypedValueParser`":"0:1362:2241","`ValueParser::bool`":"0:1294:2242"},"attrs":["#[non_exhaustive]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":false,"fields":[],"impls":[]}},"0:168:2175":{"id":"0:168:2175","crate_id":0,"name":"augment_args","span":{"filename":"src/derive.rs","begin":[397,4],"end":[397,53]},"visibility":"default","docs":"Append to [`Command`] so it can instantiate `Self`.\n\nSee also [`CommandFactory`].","links":{"`CommandFactory`":"0:153:1646","`Command`":"0:755:1637"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["cmd",{"kind":"resolved_path","inner":{"name":"Command","id":"0:755:1637","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Command","id":"0:755:1637","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:3347:107":{"id":"0:3347:107","crate_id":0,"name":"Count","span":{"filename":"src/builder/action.rs","begin":[198,4],"end":[198,9]},"visibility":"default","docs":"When encountered, increment a `u8` counter\n\nIf no [`default_value`][super::Arg::default_value] is set, it will be `0`.\n\nNo value is allowed. To optionally accept a value, see\n[`Arg::default_missing_value`][super::Arg::default_missing_value]\n\n# Examples\n\n```rust\n# use clap::Command;\n# use clap::Arg;\nlet cmd = Command::new(\"mycmd\")\n    .arg(\n        Arg::new(\"flag\")\n            .long(\"flag\")\n            .action(clap::ArgAction::Count)\n    );\n\nlet matches = cmd.clone().try_get_matches_from([\"mycmd\", \"--flag\", \"--flag\"]).unwrap();\nassert!(matches.contains_id(\"flag\"));\nassert_eq!(matches.occurrences_of(\"flag\"), 0);\nassert_eq!(\n    matches.get_one::<u8>(\"flag\").copied(),\n    Some(2)\n);\n\nlet matches = cmd.try_get_matches_from([\"mycmd\"]).unwrap();\nassert!(matches.contains_id(\"flag\"));\nassert_eq!(matches.occurrences_of(\"flag\"), 0);\nassert_eq!(\n    matches.get_one::<u8>(\"flag\").copied(),\n    Some(0)\n);\n```","links":{"super::Arg::default_value":"0:3803:1638","super::Arg::default_missing_value":"0:3803:1638"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:3223:5824":{"id":"0:3223:5824","crate_id":0,"name":"key","span":{"filename":"src/util/fnv.rs","begin":[10,4],"end":[10,25]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:5801:10735":{"id":"1:5801:10735","crate_id":1,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5802:6220"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:22801:11138":{"id":"2:22801:11138","crate_id":2,"name":"SimdInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22802:11140","2:22803:21676","2:22804:1226","2:22805:1227","2:22806:21679","2:22807:21700","2:22808:21701","2:22809:21702","2:22810:21703","2:22811:21690","2:22812:21695","2:22813:21696","2:22814:21697","2:22815:21698","2:22816:21704","2:22817:21705","2:22818:21706"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3278:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22850:10744","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}}},"paths":{"12:2253:7183":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:2938:180":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:10317:12089":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"16:5273:11735":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"29:4370:14513":{"crate_id":29,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:46600:7248":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"6:5945:14785":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:49733:8686":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"16:2991:11989":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"29:4286:14473":{"crate_id":29,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:24212:6966":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"18:858:12171":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"12:815:10175":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:22601:66764":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:15123:13979":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"18:695:12181":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:11147:12707":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:9729:69173":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:12373:12921":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"16:3172:11981":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"23:927:8029":{"crate_id":23,"path":["indexmap","set","IndexSet"],"kind":"struct"},"2:24090:11235":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:48839:13823":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:12671:12975":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"29:4248:10964":{"crate_id":29,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:37648:8563":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"17:12982:13050":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:51144:11153":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"6:5469:14741":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:12208:12880":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:11519:12751":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:12238:8607":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"14:231:10709":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"12:2404:69171":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:15413:10952":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:8650:8604":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"5:6764:8731":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:46021:8549":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:4670:8739":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:8977:8619":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"29:1556:14163":{"crate_id":29,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:52322:11156":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:24836:164":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:14566:15141":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"17:10458:12568":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:50179:11304":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"5:8138:11475":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:11835:12818":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"21:138:7806":{"crate_id":21,"path":["clap_lex","ShortFlags"],"kind":"struct"},"16:7158:11872":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:13306:13181":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"6:1700:14261":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:10571:12646":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:607:12526":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"23:1174:10795":{"crate_id":23,"path":["indexmap","set","Difference"],"kind":"struct"},"16:7477:11828":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"5:8250:8636":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"24:772:7185":{"crate_id":24,"path":["hashbrown","map","Iter"],"kind":"struct"},"29:5521:14753":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:13547:13246":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:2576:127":{"crate_id":1,"path":["std","error","Error"],"kind":"trait"},"2:3521:131":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"29:6084:14846":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"26:95:8926":{"crate_id":26,"path":["termcolor","BufferedStandardStream"],"kind":"struct"},"17:13062:13111":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"5:1674:10175":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:681:12527":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:10844:12104":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:10001:54922":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:24049:15136":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"24:1184:11626":{"crate_id":24,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"9:692:11498":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"6:5228:14629":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:13402:13206":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:46417:10115":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"25:203:8212":{"crate_id":25,"path":["textwrap","Options"],"kind":"struct"},"1:3345:10911":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:3165:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"1:9865:2669":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"12:1682:11638":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:12738:10899":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"2:3430:8543":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:3745:8552":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"16:6780:11867":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:11337:12126":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:49891:11086":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:5100:8882":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:46056:11137":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"12:1103:7183":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"18:783:12499":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:16015:8399":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"16:3714:13400":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:14937:12341":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:8886:8793":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:9245:12048":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:51096:11173":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"16:4304:13405":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:11113:7185":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:5964:10998":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"6:1717:14268":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:46296:10120":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"17:10061:12628":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"6:6100:14849":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:11328:12715":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"5:1441:7183":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"5:1011:7185":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:10673:10838":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"29:5123:14575":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"29:6851:14935":{"crate_id":29,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"16:3195:11982":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:50034:11091":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"29:6857:14936":{"crate_id":29,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"16:6219:11854":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:4739:11072":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:9886:12618":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:12442:12935":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"29:3971:14362":{"crate_id":29,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:9762:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:12756:12987":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"8:0:8370":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"5:7642:9931":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"29:3861:14290":{"crate_id":29,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:8472:7600":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:16030:8414":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"7:85:52554":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"24:2120:10182":{"crate_id":24,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"23:1481:8870":{"crate_id":23,"path":["indexmap","Bucket"],"kind":"struct"},"26:29:8310":{"crate_id":26,"path":["termcolor","WriteColor"],"kind":"trait"},"1:9775:12334":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"6:6005:14818":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:9722:10938":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"1:6561:10773":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"16:6166:11851":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"26:92:8925":{"crate_id":26,"path":["termcolor","StandardStreamLock"],"kind":"struct"},"29:5285:14663":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"16:4477:13410":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:46309:11215":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"16:6413:11643":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:11923:8853":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"5:1091:12294":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:24530:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"17:13240:13166":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:6941:10751":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"16:3939:13403":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:24118:13779":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"29:4186:14449":{"crate_id":29,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"16:3118:11991":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"16:3488:11988":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:7681:1637":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"29:1589:14186":{"crate_id":29,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"6:3972:14359":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"6:1736:14274":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"26:90:8924":{"crate_id":26,"path":["termcolor","StandardStream"],"kind":"struct"},"1:7796:2085":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"16:6208:11853":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:12467:12938":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:1497:10173":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:9528:8689":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"16:5384:11695":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"16:7928:6388":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:22837:11132":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"5:6475:9926":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:11604:12764":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:10864:12687":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:11434:12721":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"3:0:430":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:8179:5963":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:2159:7185":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"16:5975:11847":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:9769:69177":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:5793:10733":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:13733:13307":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:5985:11001":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"29:5178:14614":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:13760:13319":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:11665:12774":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:11430:10965":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"12:869:9926":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"29:1515:14145":{"crate_id":29,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"24:865:7181":{"crate_id":24,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:11962:12838":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:50203:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"1:14953:12342":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"24:574:143":{"crate_id":24,"path":["hashbrown","map","HashMap"],"kind":"struct"},"6:5274:14651":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"16:7843:11884":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"16:4417:13408":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"0:1777:1640":{"crate_id":0,"path":["clap","error"],"kind":"module"},"18:713:8563":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"16:7378:11810":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:46736:8813":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:13788:13326":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"6:1522:14145":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"23:650:10175":{"crate_id":23,"path":["indexmap","map","IntoValues"],"kind":"struct"},"2:8412:8487":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"16:3264:11985":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"16:7894:11842":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"24:1225:11628":{"crate_id":24,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:2915:415":{"crate_id":2,"path":["core","cmp"],"kind":"module"},"16:3772:13401":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:49039:11404":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:52243:11168":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:14959:12343":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"6:5420:14729":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"6:4306:14477":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"4:0:8369":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"6:632:14142":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:49767:8696":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:12223:8606":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"5:69:9899":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"6:525:14079":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:9689:69179":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"9:686:11496":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"23:1096:9926":{"crate_id":23,"path":["indexmap","set","Drain"],"kind":"struct"},"1:10569:10744":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"6:88:47651":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:23462:11141":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"1:11664:7185":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"5:5093:660":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"1:1655:10837":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"5:8330:8495":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:53530:13870":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:3504:8546":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"22:435:8722":{"crate_id":22,"path":["os_str_bytes","raw_str","RawOsString"],"kind":"struct"},"2:2925:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:3716:8548":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:13370:13199":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:12262:12888":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:24:600":{"crate_id":2,"path":["core","env"],"kind":"macro"},"24:1205:11627":{"crate_id":24,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:10543:12640":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:1450:7181":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:4082:205":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"17:12712:12980":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"5:8298:8497":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"16:4734:13417":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"29:5462:14741":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"6:1617:14200":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:28051:11036":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:32693:10031":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:12051:12852":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:13394:13204":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:10697:9958":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:49877:11083":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:3524:132":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:13282:13179":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"6:599:14124":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:1194:17123":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"16:5766:11719":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"12:856:1662":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"29:6078:14844":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:5155:8884":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:45942:197":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"6:5528:14753":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:51766:11148":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:3422:8541":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:4727:2011":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"1:2163:7598":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:23079:10744":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"2:4727:11071":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"29:3938:14350":{"crate_id":29,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:12385:12923":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:10539:146":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"1:5789:10732":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:12079:15097":{"crate_id":1,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"16:2889:11995":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"23:672:7185":{"crate_id":23,"path":["indexmap","map","Iter"],"kind":"struct"},"17:12783:12990":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:24219:11373":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:12057:15140":{"crate_id":1,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"16:7024:12023":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:37624:178":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"17:9799:12617":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:9476:12520":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:3168:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"29:5429:14733":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:1463:1662":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"16:6424:11859":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"5:8176:11412":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:53451:13865":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:47602:9350":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:46748:8814":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:5029:8875":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"18:821:12168":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:51898:13839":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:14634:8742":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"17:10420:12086":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:5038:8877":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:6086:10954":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"24:1910:10795":{"crate_id":24,"path":["hashbrown","set","Difference"],"kind":"struct"},"29:5515:14752":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:11981:12843":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"13:120:53191":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"17:10200:12633":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"16:5522:11705":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:3410:8539":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:7931:10887":{"crate_id":1,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"29:4026:14389":{"crate_id":29,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:47559:9219":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:46618:8804":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:9296:12516":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:11726:12788":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:47797:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:11277:12712":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"16:7392:11811":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:11475:10750":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:3652:8752":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"6:1563:14163":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"16:7549:11814":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:11809:12813":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:53592:13872":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"18:152:29107":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:13497:13231":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:3491:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"5:1472:10182":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:13296:13180":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"6:6614:14929":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"16:5456:11699":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:50404:11312":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:11714:12785":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"29:4066:14408":{"crate_id":29,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"5:3300:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"6:4227:14452":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:10827:12047":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"5:1560:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"11:0:8373":{"crate_id":11,"path":["adler"],"kind":"module"},"1:15202:10803":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:9551:12075":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"29:3874:14299":{"crate_id":29,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:22990:11140":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:6701:14831":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"17:11358:12051":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"29:4255:14454":{"crate_id":29,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:14165:141":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:3268:211":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"17:11045:54876":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:11970:12840":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:13348:13194":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"24:1169:10183":{"crate_id":24,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:16027:8411":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"16:7342:11839":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:10701:11450":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"17:13054:13109":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"6:5407:14725":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:53405:13861":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"12:764:8773":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:10106:12148":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"6:1708:14262":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"24:2274:8636":{"crate_id":24,"path":["hashbrown","TryReserveError"],"kind":"enum"},"5:3370:10794":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:9971:69181":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"16:7856:11885":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"16:4386:13407":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:49358:8858":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"5:4643:12298":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:13746:13313":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"6:4060:14402":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:13318:13184":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"5:5415:8731":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"25:89:8030":{"crate_id":25,"path":["textwrap","core","display_width"],"kind":"function"},"12:777:7598":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:9178:13893":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"6:4255:10964":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:51313:11154":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:2062:8731":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"17:11555:12756":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"16:3064:12037":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"9:809:8652":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:10988:12699":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:2396:8890":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"29:4265:14461":{"crate_id":29,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:6176:14898":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:12056:12314":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"5:8463:9925":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"29:1701:14262":{"crate_id":29,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:48800:13818":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:4920:8892":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"6:3868:14290":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"16:6569:12009":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"6:4241:14453":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"29:4494:14561":{"crate_id":29,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"16:6269:11856":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:4643:8731":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"17:9368:12517":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:13892:13771":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:46363:8697":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:24870:11327":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"29:6193:14908":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:12040:12851":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"0:103:1889":{"crate_id":0,"path":["clap","command"],"kind":"macro"},"1:2031:145":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:10279:12102":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:49323:8838":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"5:6688:11423":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"16:2968:11978":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:52160:11183":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"24:1887:7598":{"crate_id":24,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:53126:11161":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:23673:66746":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:50351:13831":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:48513:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"2:49276:8849":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"29:3950:14353":{"crate_id":29,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"6:1527:14147":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:2506:1640":{"crate_id":1,"path":["std","error"],"kind":"module"},"18:678:142":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:47015:8791":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"17:9440:12519":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:11588:12763":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:3278:106":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"5:3040:15019":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"26:310:8934":{"crate_id":26,"path":["termcolor","LossyStandardStream"],"kind":"struct"},"17:13180:13152":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:1522:10834":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:8136:10888":{"crate_id":1,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"2:46995:8762":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"29:536:14087":{"crate_id":29,"path":["libc","unix","rusage"],"kind":"struct"},"18:611:12176":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:13857:187":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"17:10477:12128":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"16:3145:11990":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"29:4088:14421":{"crate_id":29,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"5:920:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"16:6464:11818":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"20:0:1709":{"crate_id":20,"path":["bitflags"],"kind":"module"},"2:10446:13768":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"17:9574:12080":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:11094:7738":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:8879:8662":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"29:1595:14188":{"crate_id":29,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:13041:13102":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:50238:11356":{"crate_id":2,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"1:11410:10999":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"29:4220:14452":{"crate_id":29,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"16:7119:11738":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"16:6032:11737":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"29:4310:14482":{"crate_id":29,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"5:4242:12294":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"6:3978:14362":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"16:2733:6956":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"12:1666:11637":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:50183:11308":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:51394:13836":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"29:4418:14530":{"crate_id":29,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"6:537:14084":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:2462:9963":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:45919:198":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"25:0:1712":{"crate_id":25,"path":["textwrap"],"kind":"module"},"2:47663:7185":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:49402:8698":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"24:2248:2971":{"crate_id":24,"path":["hashbrown","raw","inner","alloc","inner","Global"],"kind":"struct"},"24:1923:10797":{"crate_id":24,"path":["hashbrown","set","Union"],"kind":"struct"},"1:10370:12527":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:12610:12961":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:13377:13201":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"15:248:11647":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:0:1330":{"crate_id":1,"path":["std"],"kind":"module"},"16:5295:53296":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:45965:199":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"12:2269:10182":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"17:12537:12948":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"29:1753:14283":{"crate_id":29,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"29:5421:14731":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:11159:12708":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"18:661:12179":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:1432:8773":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"6:4293:14473":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"16:5707:11712":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"29:6117:14860":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:56374:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:9737:10939":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"1:15971:15580":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:45809:8554":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"17:10938:12695":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:13637:13269":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"16:6238:11808":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:10635:12651":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:53500:13868":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"29:6863:14937":{"crate_id":29,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"9:234:11523":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"17:13924:13363":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"22:373:4799":{"crate_id":22,"path":["os_str_bytes","raw_str","Buffer"],"kind":"struct"},"17:10041:12626":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:11847:12821":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"29:598:14127":{"crate_id":29,"path":["libc","unix","sigval"],"kind":"struct"},"16:3800:13402":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"29:5248:14649":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:13772:13322":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"22:0:8720":{"crate_id":22,"path":["os_str_bytes"],"kind":"module"},"1:16011:8397":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"1:11336:13950":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"6:4364:14508":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:9809:69174":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:12431:12933":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:11146:8699":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"16:0:8377":{"crate_id":16,"path":["gimli"],"kind":"module"},"6:4120:14433":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:13418:10959":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"29:6021:14836":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:50436:8575":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:13780:13325":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:10814:12046":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"5:5536:8602":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"18:740:12505":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:2966:184":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"23:194:10180":{"crate_id":23,"path":["indexmap","map","core","IndexMapCore"],"kind":"struct"},"6:6858:14935":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:32397:66932":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"17:11696:12784":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:4304:8764":{"crate_id":1,"path":["std","io","readbuf","ReadBuf"],"kind":"struct"},"2:50045:11092":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:24496:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"2:4377:7598":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:13540:13245":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:51741:11147":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:12028:12849":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:15186:10802":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"10:0:8372":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:49368:8856":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:4514:2022":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"6:6887:14942":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"29:4412:14529":{"crate_id":29,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"6:6068:14839":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:15230:10810":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"14:0:8375":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"6:3990:14371":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"26:0:1555":{"crate_id":26,"path":["termcolor"],"kind":"module"},"1:11139:8706":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:3647:6357":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:11449:10758":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:6510:7249":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"29:5991:14814":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:10623:12650":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"12:466:29101":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:47923:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:8929:54869":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:22850:10744":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"17:12275:12889":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:3439:8545":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:2186:578":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"16:4922:13423":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"23:312:10183":{"crate_id":23,"path":["indexmap","map","core","VacantEntry"],"kind":"struct"},"6:1547:14155":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:12112:7185":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:52936:11157":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:23868:11323":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:49043:8841":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:14551:10760":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:48269:8587":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:77:1490":{"crate_id":2,"path":["core","usize"],"kind":"module"},"6:157:47717":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"29:4138:14446":{"crate_id":29,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"16:6807:11868":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:9638:12332":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"2:24032:11240":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"16:2843:11975":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"6:3862:14289":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:12155:12873":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:11066:8761":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"16:3287:11986":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:8197:12317":{"crate_id":1,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"24:1260:11629":{"crate_id":24,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:21:672":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"7:0:1480":{"crate_id":7,"path":["unwind"],"kind":"module"},"18:0:8379":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:15046:66328":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:46340:10121":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"12:432:11630":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:52586:11169":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:11502:9316":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:12142:12870":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"29:5946:14790":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"24:878:1662":{"crate_id":24,"path":["hashbrown","map","Values"],"kind":"struct"},"25:90:8916":{"crate_id":25,"path":["textwrap","core","Fragment"],"kind":"trait"},"16:3041:11980":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:46394:10114":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"17:9649:12614":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:12134:10852":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:13564:9956":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"12:928:10174":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:46708:8799":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:9643:63764":{"crate_id":1,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"6:4449:14544":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"12:750:7185":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:13063:8676":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"29:1683:14255":{"crate_id":29,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:49751:8683":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"6:4262:14454":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"5:3329:7185":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"6:6051:14837":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:49509:8710":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:11611:8654":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"1:10836:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"29:6232:14923":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"29:5352:14704":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"5:1618:7598":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:13278:13769":{"crate_id":2,"path":["core","str","lossy","Utf8Lossy"],"kind":"struct"},"17:9759:12616":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:10673:55060":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"12:1784:12292":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"16:5346:11804":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:50195:11301":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"6:4046:14394":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:6703:14833":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:46699:7250":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:23939:11324":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:53189:11181":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"5:8379:10706":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"16:7185:11874":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:24700:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:49723:8700":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"5:3951:9924":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"13:0:8368":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:10310:8585":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"6:5210:14619":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:15976:17124":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:47550:7598":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"17:10149:12618":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"29:1520:14147":{"crate_id":29,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:16006:8393":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"17:2314:12094":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:48792:8950":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:11313:63815":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"2:10241:2011":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:11438:8860":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"29:1533:14153":{"crate_id":29,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"5:8391:10707":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:24247:11340":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:3277:217":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"2:49581:8707":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"16:6682:11819":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:3355:10916":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"17:10788:12684":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"6:5414:14726":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"29:3965:14359":{"crate_id":29,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"16:2866:11976":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:11416:10957":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:12298:10816":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:13520:13239":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"6:4083:14415":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:13258:13174":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:23771:11058":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:14589:13978":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"16:7174:11873":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"29:5364:14711":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:47492:176":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"6:670:48047":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"16:4614:13413":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"6:4183:14448":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"24:1917:10796":{"crate_id":24,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"6:4478:14553":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"16:4448:13409":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"16:6252:11855":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:49477:8705":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:12480:12940":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:13865:13347":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"16:6964:9219":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"12:979:10836":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"12:2059:10795":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:3367:8531":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:9631:63762":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"1:11264:10822":{"crate_id":1,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"5:3748:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:1236:12528":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:9839:12104":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"16:4762:13418":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"29:4113:14433":{"crate_id":29,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"24:478:29101":{"crate_id":24,"path":["hashbrown","raw","inner","RawIterHash"],"kind":"struct"},"16:5580:11708":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"9:900:15008":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:49336:8839":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:2512:12088":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:5033:8876":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"12:353:15132":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"29:1577:14178":{"crate_id":29,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"29:3944:14351":{"crate_id":29,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:9767:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"29:4176:14448":{"crate_id":29,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:15332:10786":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"6:161:47718":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:10298:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"24:1143:10182":{"crate_id":24,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"5:8263:8637":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:3336:8525":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"29:1565:14169":{"crate_id":29,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:11654:8655":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"17:11993:12845":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"29:5305:14679":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"29:81:47651":{"crate_id":29,"path":["libc","unix","DIR"],"kind":"enum"},"5:6652:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:3343:10910":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"6:4145:14446":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:49527:8709":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:13986:13376":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"25:155:8215":{"crate_id":25,"path":["textwrap","word_splitters","WordSplitter"],"kind":"enum"},"2:45873:194":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"23:409:7251":{"crate_id":23,"path":["indexmap","map","IndexMap"],"kind":"struct"},"1:14239:4797":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"29:4208:14451":{"crate_id":29,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"16:7226:11878":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"24:411:11631":{"crate_id":24,"path":["hashbrown","raw","inner","RawIntoIter"],"kind":"struct"},"2:4964:7675":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"1:10581:64232":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"1:9347:10761":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:13465:13223":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:10240:205":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"6:5969:14802":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"29:4394:14520":{"crate_id":29,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:14236:8757":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"6:4371:14510":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:47839:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:10236:12073":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"29:6916:14949":{"crate_id":29,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:11361:10948":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"17:10489:12130":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:3740:8754":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"24:165:8870":{"crate_id":24,"path":["hashbrown","raw","inner","Bucket"],"kind":"struct"},"17:10516:12131":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"6:543:14087":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"6:6870:14937":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:3388:8538":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:7799:10344":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"17:10926:12694":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"18:637:12499":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:8902:54868":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"29:6178:14901":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"6:4325:14486":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"6:3957:14353":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:2268:11060":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"24:950:10174":{"crate_id":24,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:2961:177":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"proc_derive"},"2:51027:13832":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:46688:8818":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"24:1736:145":{"crate_id":24,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:12524:8687":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"6:5241:14638":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:11026:12702":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"18:621:12498":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:24768:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:10854:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:6867:10753":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:11571:8652":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"26:59:8922":{"crate_id":26,"path":["termcolor","IoStandardStream"],"kind":"enum"},"17:11186:12709":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:10950:12696":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"18:767:12510":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"14:244:13683":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:10912:12690":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"16:7250:11880":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:1136:6794":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"6:4281:14466":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:14078:11313":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"17:13532:13242":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:10599:12648":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:22801:11138":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"16:5421:11697":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:13766:138":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"29:5971:14808":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:4404:10931":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"18:745:69185":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:7511:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"17:10160:12631":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:24564:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"6:4005:14377":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"16:7360:194":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:9264:12606":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"5:1644:1662":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:12183:10855":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:6963:10742":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"16:6731:12013":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:48817:146":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:32497:66931":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"5:1607:8773":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:24126:13780":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:9065:54872":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"6:4317:14482":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:12771:12715":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:50167:11300":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"6:4013:14380":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:6221:14920":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:6699:14829":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"5:6672:8602":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"29:4504:14566":{"crate_id":29,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:3296:9682":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"26:377:8316":{"crate_id":26,"path":["termcolor","Color"],"kind":"enum"},"17:13627:13264":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"6:6091:14846":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"16:6101:11801":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"29:5221:14629":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"16:5672:11711":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:3733:137":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:7445:185":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:51693:11162":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:12500:11402":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"23:626:10174":{"crate_id":23,"path":["indexmap","map","ValuesMut"],"kind":"struct"},"1:9067:8613":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"6:5255:14649":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:13933:13367":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"5:1597:7185":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:823:2669":{"crate_id":1,"path":["std","thread","local","os","Key"],"kind":"struct"},"2:11317:8705":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"16:5561:11707":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:56400:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:4438:8758":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"16:7453:11806":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:14317:10873":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:49297:8840":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"5:1235:11442":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:8643:8603":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:50175:11305":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"29:5998:14818":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:46986:8787":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"29:1540:14155":{"crate_id":29,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"29:5556:14778":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"29:518:14079":{"crate_id":29,"path":["libc","unix","timeval"],"kind":"struct"},"6:4419:14529":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:48808:8949":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"29:571:14113":{"crate_id":29,"path":["libc","unix","iovec"],"kind":"struct"},"6:4377:14513":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:10642:17119":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"9:469:15562":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"29:6607:14929":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:12917:12999":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"5:8313:11348":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"14:11:13678":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:48616:9742":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"12:952:10834":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:38805:7777":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:12598:12959":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:46325:10119":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"16:6718:12012":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:3274:8889":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:11001:12700":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"29:4318:14486":{"crate_id":29,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:48546:107":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"12:1203:11628":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"12:2032:7185":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"18:897:12174":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:11750:12790":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:12243:8609":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"6:6200:14908":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:3357:8529":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:46768:8801":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"6:610:14129":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:13078:8677":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:49257:8847":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:1419:7185":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:12794:11295":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:13488:13228":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:3686:8747":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:46727:8812":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:51543:11182":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:2598:13888":{"crate_id":1,"path":["std","error","from","StringError"],"kind":"struct"},"1:8031:10888":{"crate_id":1,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"29:6629:14930":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"16:6768:12016":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"16:5855:11722":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:10579:8948":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:24166:28640":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"24:362:15132":{"crate_id":24,"path":["hashbrown","raw","inner","RawIterRange"],"kind":"struct"},"29:4388:14519":{"crate_id":29,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:12182:12877":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:11356:10947":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:22927:10744":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"12:1121:10182":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"6:4052:14397":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:23125:10744":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:9259:7234":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"16:7042:12024":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:3558:8553":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"2:48632:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"26:97:8927":{"crate_id":26,"path":["termcolor","WriterInner"],"kind":"enum"},"24:121:29100":{"crate_id":24,"path":["hashbrown","raw","inner","bitmask","BitMaskIter"],"kind":"struct"},"16:5029:13426":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:10140:12104":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:24182:28649":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"16:3365:11730":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:46028:7244":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"6:511:1987":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:3405:8537":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"13:232:15006":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:11030:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:10312:8586":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:2865:8562":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:3201:10902":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"15:230:11646":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:10558:12643":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:13942:13369":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:49563:8708":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:4401:10930":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"5:3038:4191":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:51336:11158":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:16017:8401":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:1944:5904":{"crate_id":2,"path":["core","mem"],"kind":"module"},"29:5400:14725":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:11794:12807":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:13574:13253":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:10291:109":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"6:4023:14386":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"23:45:10176":{"crate_id":23,"path":["indexmap","mutable_keys","MutableKeys"],"kind":"trait"},"24:955:10832":{"crate_id":24,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:3177:228":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:5110:8883":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"1:3329:10906":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:12061:66136":{"crate_id":1,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"2:49445:8689":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"16:2754:11731":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"29:4299:14477":{"crate_id":29,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:1442:7598":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"6:6636:14930":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"5:8203:7598":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:10591:10871":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:11406:12719":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"21:107:7767":{"crate_id":21,"path":["clap_lex","ParsedArg"],"kind":"struct"},"5:7379:7598":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:15354:10944":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"16:5632:11710":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"6:4459:14545":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:6437:8808":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"11:46:15007":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"2:24734:165":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:53377:11149":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"6:4300:14474":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:46578:8797":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:12740:12339":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"16:5472:11702":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"16:3320:12039":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:46281:8696":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:50068:13826":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunk"],"kind":"struct"},"1:10680:9951":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"17:10377:12093":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:14068:9896":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"29:6886:14943":{"crate_id":29,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"29:5413:14729":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:14242:2022":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"1:7979:12317":{"crate_id":1,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"1:15484:64233":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"17:9210:54875":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:48519:133":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"2:53553:13871":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"6:5998:14814":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:24802:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"17:10403:12100":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:1501:10175":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"29:4424:14533":{"crate_id":29,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:23134:11142":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"16:2816:11994":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"6:6085:14844":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"5:1843:12294":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"6:4494:14558":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"6:4431:14533":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:5630:779":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:9280:12607":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:12456:12937":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"29:4357:14508":{"crate_id":29,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"29:5393:14724":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"6:6124:14860":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"21:75:4777":{"crate_id":21,"path":["clap_lex","RawArgs"],"kind":"struct"},"2:47534:7185":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"6:5269:14650":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"29:1737:14278":{"crate_id":29,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"5:1215:11441":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"6:1630:14207":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:49609:8701":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"24:2131:10183":{"crate_id":24,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"29:5152:14599":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:22599:66766":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:5207:8887":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:56335:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:6864:14936":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:48847:13824":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:11681:8658":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:46548:8514":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"5:1486:10837":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"16:4350:13406":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"16:6176:11852":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"16:5231:13427":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:46587:8571":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"29:4053:14402":{"crate_id":29,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"12:1162:11626":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:11293:15095":{"crate_id":1,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"2:49758:8695":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:10028:12625":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:10052:12627":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:22533:8563":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:13962:66828":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"17:13598:13257":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:10596:10886":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"17:11779:12801":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"5:3772:8773":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:24065:6871":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"29:556:14104":{"crate_id":29,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:24144:28648":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:5504:10952":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:16004:8391":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"1:15054:10815":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:11398:10779":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:12167:10854":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"5:8446:9924":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"5:2330:11443":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"15:0:8376":{"crate_id":15,"path":["addr2line"],"kind":"module"},"26:329:1644":{"crate_id":26,"path":["termcolor","ColorChoice"],"kind":"enum"},"1:9598:12331":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"29:4059:14405":{"crate_id":29,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:13356:13197":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"16:7786:11816":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"29:5184:14617":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:3351:8526":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:10529:142":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"6:6899:14944":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:47525:2094":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"17:13620:13262":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"6:5548:14767":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"12:1238:11629":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:8694:8605":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:47593:9220":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:12049:10343":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"16:5927:11725":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:12699:12979":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:1486:9924":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"17:10353:12095":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"6:4272:14461":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"29:1729:14274":{"crate_id":29,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:12307:12896":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:6441:10759":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:52793:11189":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"29:4120:14435":{"crate_id":29,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"26:189:4799":{"crate_id":26,"path":["termcolor","Buffer"],"kind":"struct"},"1:12034:10342":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:10266:12091":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"18:791:12165":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:8485:10850":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"5:6411:223":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"5:2262:11444":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:12006:181":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"16:7514:11826":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"29:609:14132":{"crate_id":29,"path":["libc","unix","tms"],"kind":"struct"},"16:5407:11696":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"16:5314:12606":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:51489:11175":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:4475:4797":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"5:3970:12294":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:10862:10923":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"6:5428:14731":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:12120:10849":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:32337:10030":{"crate_id":2,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"2:9380:8676":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:46483:11348":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:12327:12897":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"29:3990:14375":{"crate_id":29,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:22937:10764":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:11458:12735":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"21:0:1710":{"crate_id":21,"path":["clap_lex"],"kind":"module"},"6:1744:14278":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"16:5736:11715":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:7857:11033":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:1045:10776":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:15236:10811":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:5164:8885":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"5:432:2222":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:4752:6769":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"14:47:13678":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:52003:11188":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:9133:54874":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:2768:579":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:52435:11145":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:49627:8702":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"5:3375:11414":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"18:651:12175":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:49435:8690":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"5:3044:67845":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:11100:12081":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"29:4463:14551":{"crate_id":29,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"29:6805:14933":{"crate_id":29,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"9:996:11564":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:12795:12997":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"29:3911:14327":{"crate_id":29,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:13453:13217":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:10435:12637":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"5:1457:10183":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:52129:11180":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"29:5452:14739":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:2170:9924":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"1:1492:10174":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:10656:12653":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:38868:9683":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:11205:8685":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:46388:8696":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"3:300:205":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"5:7111:12307":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"16:6366:11644":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"6:4358:14505":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:1156:13883":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:8293:10888":{"crate_id":1,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"2:51231:11178":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:12253:8617":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"6:3881:14299":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"29:1716:14271":{"crate_id":29,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:1676:14244":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"24:388:11632":{"crate_id":24,"path":["hashbrown","raw","inner","RawIter"],"kind":"struct"},"2:53416:13862":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"24:962:10833":{"crate_id":24,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:22578:66763":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"24:902:9924":{"crate_id":24,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"2:11137:8773":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:12000:10339":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"17:13685:13306":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"6:569:14107":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"16:6491:11860":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:12507:12943":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:9961:12620":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:13782:10346":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:3728:224":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"6:4439:14538":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"12:1183:11627":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:3276:218":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:10308:189":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"24:974:10834":{"crate_id":24,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:12199:10856":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"5:4443:7185":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"16:7264:11821":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"6:5185:14614":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:12247:12885":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"17:10081:12102":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:8849:12074":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"24:1883:7185":{"crate_id":24,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:24010:13773":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"2:46371:10113":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"1:15755:12344":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"6:3951:14351":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:10805:10740":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"14:216:53225":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:51208:11174":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"16:7823:11817":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"22:159:8706":{"crate_id":22,"path":["os_str_bytes","iter","Split"],"kind":"struct"},"2:8403:151":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:11767:12798":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"12:1147:10183":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:4101:14424":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:16010:8396":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:16025:8409":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"16:7279:12025":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"9:0:8371":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"6:6923:14949":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"6:6239:14923":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"12:1881:145":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:12234:12883":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:3811:8556":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:4157:12060":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:47611:188":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"1:6865:10752":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:47671:8773":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"29:6061:14839":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:51592:11167":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"5:2218:11416":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:49266:8851":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"6:1584:14178":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:11915:12823":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:49908:11087":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:46558:8513":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:46609:8798":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"29:4105:14428":{"crate_id":29,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"16:7406:11809":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"16:4704:13416":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"18:838:8678":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:12659:12974":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"6:5347:14699":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"29:562:14107":{"crate_id":29,"path":["libc","unix","hostent"],"kind":"struct"},"2:57696:13880":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"1:16016:8400":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"29:4293:14474":{"crate_id":29,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:47688:178":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:10431:12335":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:10381:13982":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"24:1001:10836":{"crate_id":24,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"17:542:11741":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:16028:8412":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:52400:11163":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"16:5595:11709":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"6:6644:14932":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:50418:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"5:3336:10795":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"24:1891:9926":{"crate_id":24,"path":["hashbrown","set","Drain"],"kind":"struct"},"29:4324:14488":{"crate_id":29,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"16:6518:11861":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"16:7295:11823":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"5:5833:8680":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:23661:10763":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:47965:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:48580:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"2:50359:190":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"17:11254:12076":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"16:7333:11825":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:5657:10748":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"22:76:12196":{"crate_id":22,"path":["os_str_bytes","OsStrBytes"],"kind":"trait"},"16:7761:11883":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"29:1669:14244":{"crate_id":29,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:45898:195":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:23086:18041":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"2:14:1845":{"crate_id":2,"path":["core","write"],"kind":"macro"},"29:504:1987":{"crate_id":29,"path":["libc","unix","group"],"kind":"struct"},"26:237:8931":{"crate_id":26,"path":["termcolor","Ansi"],"kind":"struct"},"22:394:12195":{"crate_id":22,"path":["os_str_bytes","pattern","EncodedChar"],"kind":"struct"},"2:3999:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"12:895:11620":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"26:217:8930":{"crate_id":26,"path":["termcolor","NoColor"],"kind":"struct"},"6:0:798":{"crate_id":6,"path":["libc"],"kind":"module"},"17:12552:12952":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:3774:8555":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:46287:13802":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:11152:10779":{"crate_id":1,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"29:4380:14516":{"crate_id":29,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:11453:14818":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:48007:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:22931:10762":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"29:5938:14785":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:16020:8404":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:4751:102":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:8601:157":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"22:196:8676":{"crate_id":22,"path":["os_str_bytes","pattern","Pattern"],"kind":"trait"},"2:3341:8530":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"6:1658:14232":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:2187:10796":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:48091:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:12118:12868":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"12:472:29102":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"16:7738:11882":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"6:1602:14188":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:10795:10772":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:46628:8805":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"29:5275:14656":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"29:603:14129":{"crate_id":29,"path":["libc","unix","itimerval"],"kind":"struct"},"2:9978:11278":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:50020:11090":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"5:8197:7598":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:5012:10777":{"crate_id":1,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"17:12073:12861":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:13935:63760":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:11482:12736":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"18:886:12173":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"16:2945:12000":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:7936:63763":{"crate_id":1,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"29:4033:14392":{"crate_id":29,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:9034:54871":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"24:187:11633":{"crate_id":24,"path":["hashbrown","raw","inner","RawTable"],"kind":"struct"},"28:8:2021":{"crate_id":28,"path":["atty","Stream"],"kind":"enum"},"29:4364:14510":{"crate_id":29,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:10887:12688":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"6:6155:14884":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"29:6214:14920":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:51718:11144":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"22:510:12198":{"crate_id":22,"path":["os_str_bytes","EncodingError"],"kind":"struct"},"2:2956:177":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"1:10948:10829":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:12128:7598":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"16:4790:13419":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"6:4401:14520":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"16:5815:11721":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:4782:9894":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:13590:13256":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"6:3918:14327":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:14103:12340":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:10933:214":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"6:4193:14449":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:5862:10992":{"crate_id":1,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"17:13098:13140":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:14610:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"2:49862:11080":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:3371:8535":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"29:3983:14371":{"crate_id":29,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:10870:8753":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:3280:220":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:3171:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"1:13583:29114":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"1:2175:10794":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"18:705:12499":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"5:2553:11447":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:11616:12767":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:12741:12983":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:12731:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"29:1651:14232":{"crate_id":29,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:3198:10900":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"5:3048:67844":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"5:7257:12294":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:1505:10832":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:9088:54873":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"12:2280:10183":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:3662:12316":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:10574:8947":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"5:8344:8496":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"29:5267:14651":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:11133:8689":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"5:5903:1339":{"crate_id":5,"path":["alloc","str"],"kind":"module"},"2:3383:8534":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"29:1722:10958":{"crate_id":29,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"6:5379:14712":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:48558:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"17:3743:12043":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:12401:1645":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"24:917:11620":{"crate_id":24,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"24:1896:9924":{"crate_id":24,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"29:4452:14545":{"crate_id":29,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"20:5:1709":{"crate_id":20,"path":["bitflags","bitflags"],"kind":"macro"},"1:16021:8405":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:9770:12333":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"2:10535:142":{"crate_id":2,"path":["core","hash","macros","Hash"],"kind":"proc_derive"},"29:4045:14397":{"crate_id":29,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:2484:54960":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:47713:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:8954:12057":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:9143:8615":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:13810:13331":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"5:8362:15020":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"6:531:14082":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"12:971:10835":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"16:3241:11984":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:51250:13834":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:7121:9315":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"17:10611:12649":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:12734:11293":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:47881:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:12685:12976":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"26:416:8932":{"crate_id":26,"path":["termcolor","ParseColorError"],"kind":"struct"},"12:1703:11639":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"6:1540:14153":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"29:6093:14849":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:13582:13254":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"6:1760:14283":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:5723:10728":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:4065:8576":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"1:12248:8616":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"29:6928:14951":{"crate_id":29,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:3576:4547":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:10306:8588":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"16:4641:13414":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:53338:11184":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:51355:13835":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"16:3522:12533":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"29:3998:14377":{"crate_id":29,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"16:4995:13425":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"16:6949:12020":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:2460:1645":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:53425:13863":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"5:1653:10174":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:53462:13866":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:8742:8618":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:48262:8581":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"6:1554:14158":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"12:2052:10794":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"17:9719:12615":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"6:4066:14405":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:11350:10946":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"12:2040:9926":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:4688:8741":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:3370:2010":{"crate_id":1,"path":["std","io"],"kind":"module"},"12:2412:14956":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:11082:12056":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"6:5987:14809":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"5:8115:7598":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"5:1663:10173":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"29:3898:14317":{"crate_id":29,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"29:5160:14601":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"24:2267:14956":{"crate_id":24,"path":["hashbrown","raw","inner","TableLayout"],"kind":"struct"},"6:5282:14656":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"16:7971:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"7:38:52547":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"5:0:277":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:7669:8796":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:10300:8581":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"16:6636:11822":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"23:269:7183":{"crate_id":23,"path":["indexmap","map","core","Entry"],"kind":"enum"},"12:787:10173":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"6:4347:14497":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"6:4095:14421":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:14571:15143":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:13781:150":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:6791:10757":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:11282:8862":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:11653:12773":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:11126:8745":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:22546:66743":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"2:4050:8577":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"9:157:11515":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"23:724:7598":{"crate_id":23,"path":["indexmap","map","IntoIter"],"kind":"struct"},"0:4627:127":{"crate_id":0,"path":["clap","error","Error"],"kind":"struct"},"1:15073:15099":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"2:57675:13879":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"6:578:14113":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"16:7870:11812":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"22:190:12194":{"crate_id":22,"path":["os_str_bytes","pattern","Encoded"],"kind":"trait"},"1:1511:10833":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:3434:8544":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"29:1693:14261":{"crate_id":29,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"16:7303:11881":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"16:6126:11850":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"29:1610:14200":{"crate_id":29,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:9186:12055":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:11304:54878":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"5:8368:216":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"29:512:14076":{"crate_id":29,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:22748:11191":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"17:12010:12848":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:11572:12758":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"29:3855:14289":{"crate_id":29,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"16:5941:189":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:10706:8571":{"crate_id":1,"path":["std","error","Chain"],"kind":"struct"},"2:23467:18060":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"1:11670:8657":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"6:6812:14933":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:12287:12890":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"18:775:12499":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"29:4234:14453":{"crate_id":29,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"5:8168:194":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:11204:10783":{"crate_id":1,"path":["std","net","ip","IpAddr"],"kind":"enum"},"6:519:14076":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:50191:11307":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"16:5505:11704":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"5:6954:11407":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:51048:13833":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"6:4164:14447":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"6:3945:14350":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:9973:11277":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:4436:8757":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:12019:10341":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"16:7216:11877":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:51073:11185":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:13083:8675":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"6:4523:14571":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"29:6169:14898":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"6:1533:14150":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"6:616:14132":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"6:1596:14186":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:3375:8533":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"9:749:11500":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"17:294:12522":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:10878:8755":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:11628:12768":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:4611:8762":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"6:3905:14317":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:10953:6990":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"1:2401:9946":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:12810:11296":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:10331:12104":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:47679:7598":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:8882:8774":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:510:12524":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:12568:12953":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"12:2398:14954":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:25240:11218":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"24:1125:7183":{"crate_id":24,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:48829:8652":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"12:379:11632":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:2437:9956":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"29:3885:14307":{"crate_id":29,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:13119:13145":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"6:6214:14917":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"24:2104:7183":{"crate_id":24,"path":["hashbrown","set","Entry"],"kind":"enum"},"6:1690:14255":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:12771:11294":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:12632:12972":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:16018:8402":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"1:10958:1658":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:10304:12090":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:49983:11089":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:1534:10836":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"5:3488:9924":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"16:6087:11803":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"29:1623:14207":{"crate_id":29,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:22580:66761":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:10502:12638":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:22874:11192":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"2:46465:100":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"23:1202:10794":{"crate_id":23,"path":["indexmap","set","Intersection"],"kind":"struct"},"1:2755:8572":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"17:1311:12154":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"29:5379:14713":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"6:5459:14739":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"23:22:8873":{"crate_id":23,"path":["indexmap","equivalent","Equivalent"],"kind":"trait"},"1:10570:10863":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"23:1075:7185":{"crate_id":23,"path":["indexmap","set","Iter"],"kind":"struct"},"22:92:12199":{"crate_id":22,"path":["os_str_bytes","OsStringBytes"],"kind":"trait"},"16:5433:11698":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"6:4470:14551":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:8929:10978":{"crate_id":1,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"2:3363:8528":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"24:837:10175":{"crate_id":24,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:8478:202":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"29:0:798":{"crate_id":29,"path":["libc"],"kind":"module"},"29:5203:14619":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"29:4340:14497":{"crate_id":29,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:3395:8536":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:11244:8852":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:9471:28922":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"6:5221:14627":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"29:4432:14538":{"crate_id":29,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:5956:10997":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"9:1075:11566":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:2507:9895":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:12258:10814":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"16:3392:11992":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:9849:69178":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:32296:9922":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:12408:12932":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"5:2777:11446":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"16:7236:11879":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:5801:10735":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:3400:2008":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:3997:14375":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:12946:13019":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"29:4471:14553":{"crate_id":29,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"24:1278:10837":{"crate_id":24,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"29:584:14119":{"crate_id":29,"path":["libc","unix","winsize"],"kind":"struct"},"29:6044:14837":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:49378:8857":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:13072:8678":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"12:940:10833":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:3518:130":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"17:9943:69175":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:47004:8789":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:6689:10730":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:10128:12150":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:46424:10116":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"9:1056:11558":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"16:4823:13420":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"16:6136:11845":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:52082:11176":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:10253:12092":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"5:4306:8773":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"16:4535:13412":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:7336:186":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"5:1694:11439":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:16029:8413":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"0:1606:2234":{"crate_id":0,"path":["clap","value_parser"],"kind":"macro"},"2:49713:8699":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"1:15093:10814":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"17:10584:12059":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"16:6605:11820":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:11594:8653":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"16:6110:11844":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"18:812:12167":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"16:7467:11807":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:13898:13354":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"5:1939:9924":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"16:7804:11815":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"5:792:108":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:0:8378":{"crate_id":17,"path":["object"],"kind":"module"},"12:1256:10837":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:11396:8708":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"17:10468:12129":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:2192:10797":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"16:6391:11858":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:14644:66326":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:46799:8817":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:10304:8587":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"29:154:47718":{"crate_id":29,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:2941:179":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"29:5372:14712":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:13819:13333":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:7927:8783":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"23:0:1711":{"crate_id":23,"path":["indexmap"],"kind":"module"},"1:11116:8571":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:53047:11177":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"19:0:994":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"17:13446:13216":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:4669:8731":{"crate_id":2,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"2:3346:8527":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"29:6148:14884":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:4112:14428":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:14805:9958":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"1:8414:11418":{"crate_id":1,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"2:3426:8542":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:12072:63810":{"crate_id":1,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"16:3018:11979":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"16:7146:11871":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"5:4628:235":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:47755:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"6:5197:14618":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:10251:134":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"24:2242:14953":{"crate_id":24,"path":["hashbrown","raw","inner","sse2","Group"],"kind":"struct"},"1:5651:10747":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:32345:66930":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"1:12278:10815":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:5583:8512":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"6:5167:14601":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"25:146:8905":{"crate_id":25,"path":["textwrap","word_separators","WordSeparator"],"kind":"enum"},"2:48528:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"1:16019:8403":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"18:867:12172":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:11947:12833":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"12:2045:9924":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"2:13053:8682":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"17:2543:12127":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"6:4203:14450":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:6203:10962":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:51922:13840":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:13842:13346":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"5:2310:11482":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"29:4157:14447":{"crate_id":29,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:10614:10873":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"1:16026:8410":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"29:6099:14850":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"16:4506:13411":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:6892:8819":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:786:2669":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"29:5234:14638":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:46717:8811":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:11539:12752":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"16:6744:12014":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"17:4008:12531":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:24598:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"29:5190:14618":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:16024:8408":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"18:645:12178":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"6:4040:14392":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"22:114:10744":{"crate_id":22,"path":["os_str_bytes","private","Sealed"],"kind":"trait"},"5:1685:194":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:49429:8691":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"1:14602:10901":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"1:11520:8642":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"29:6207:14917":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"16:5488:11703":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"29:1526:14150":{"crate_id":29,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:50199:11302":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:48049:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"29:592:14124":{"crate_id":29,"path":["libc","unix","linger"],"kind":"struct"},"5:4699:12298":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:8912:8608":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:16008:8394":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"12:2419:8636":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:2282:11063":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"23:598:1662":{"crate_id":23,"path":["indexmap","map","Values"],"kind":"struct"},"17:10975:12698":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:56348:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:13655:10824":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"2:49776:8697":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"29:4510:14568":{"crate_id":29,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"16:6591:11864":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"6:563:14104":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:2862:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:49349:8855":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"16:4671:13415":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:16023:8407":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"6:6028:14836":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:2920:183":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:299:12523":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:51670:11159":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:3181:227":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"1:4398:10929":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:9592:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"1:7619:8341":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"16:5717:11714":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"29:3959:14358":{"crate_id":29,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"5:3894:11419":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:22561:66743":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"17:10224:12635":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:12645:12973":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"18:802:12166":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:5739:10727":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"29:4126:14437":{"crate_id":29,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"6:5191:14617":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"16:7195:11875":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:8384:10888":{"crate_id":1,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"29:663:48047":{"crate_id":29,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"16:5330:12607":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"24:2259:69171":{"crate_id":24,"path":["hashbrown","raw","inner","Fallibility"],"kind":"enum"},"5:994:11473":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"29:4039:14394":{"crate_id":29,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:6185:14901":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"16:2773:12001":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"5:8121:11474":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:3174:135":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"16:6021:11974":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:11189:10781":{"crate_id":1,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"5:8280:101":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:11162:8706":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"14:194:53219":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:1476:9926":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"29:6880:14942":{"crate_id":29,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"16:3091:12038":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:46977:8608":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:3196:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"1:13957:10340":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"1:897:10866":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"16:6014:11849":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:2166:9926":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"29:5340:14699":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:49839:11079":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:14822:10343":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"1:1528:10835":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:8106:8761":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"6:5386:14713":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"5:5788:12294":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:46679:8810":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:15987:64234":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"6:5371:14711":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:46670:8809":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"29:577:14116":{"crate_id":29,"path":["libc","unix","pollfd"],"kind":"struct"},"6:591:14119":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:15392:10945":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"29:6892:14944":{"crate_id":29,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"16:5360:11694":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:1637:10182":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"28:0:1551":{"crate_id":28,"path":["atty"],"kind":"module"},"17:13429:13209":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:7667:10338":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:2181:10795":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:49417:8694":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"16:3506:11987":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:11015:12701":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"12:2066:10796":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"6:605:14127":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:49459:8706":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"6:4073:14408":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"25:165:8906":{"crate_id":25,"path":["textwrap","wrap_algorithms","WrapAlgorithm"],"kind":"enum"},"12:399:11631":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"23:1269:10797":{"crate_id":23,"path":["indexmap","set","Union"],"kind":"struct"},"17:10448:12120":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:45988:6538":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"16:6357:11857":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:8163:29113":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"1:4036:10831":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"29:1658:14236":{"crate_id":29,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"29:4094:14424":{"crate_id":29,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"12:843:7181":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:3103:8719":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:1153:13881":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"24:891:9926":{"crate_id":24,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:9162:12077":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:3273:2076":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"29:5407:14726":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"6:5292:14663":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"24:786:8773":{"crate_id":24,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:10801:12686":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:9064:8612":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:15020:10341":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"16:7073:11870":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:46350:10122":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"5:8146:67853":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:50448:8574":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"17:13609:13261":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"5:3882:8755":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:13506:13232":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"6:4133:14437":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:11073:8763":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:0:488":{"crate_id":2,"path":["core"],"kind":"module"},"1:4084:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:45781:8557":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:6863:10743":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:3327:10905":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"17:10095:12147":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"29:5980:14809":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:10456:12337":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"17:11378:12050":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:4516:8756":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"18:668:12180":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"16:5960:11727":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"5:3396:10797":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:48133:2951":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:49197:11291":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:3379:8532":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:24666:10891":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:11424:8861":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:14129:201":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"2:56361:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:7571:11802":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:9005:54870":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"12:114:29100":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:46500:11349":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:4745:8743":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"6:5312:14679":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:13154:13146":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:24234:11341":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"12:183:11633":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:3286:6512":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"23:44:12203":{"crate_id":23,"path":["indexmap","mutable_keys","PrivateMarker"],"kind":"struct"},"2:50395:11311":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:13477:13224":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:2797:8573":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"17:11738:12789":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:11231:12078":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"24:77:8837":{"crate_id":24,"path":["hashbrown","raw","inner","alloc","inner","Allocator"],"kind":"trait"},"6:6881:14941":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:11355:8859":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:2218:1050":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"16:6152:11805":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:1306:143":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"29:1710:14268":{"crate_id":29,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:46450:10118":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"23:1230:10796":{"crate_id":23,"path":["indexmap","set","SymmetricDifference"],"kind":"struct"},"2:32331:9923":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"29:4442:14544":{"crate_id":29,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"24:1639:12292":{"crate_id":24,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:12582:12955":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"22:400:6660":{"crate_id":22,"path":["os_str_bytes","raw_str","RawOsStr"],"kind":"struct"},"5:783:222":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:15510:11655":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:1623:7183":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"0:105:1908":{"crate_id":0,"path":["clap","arg"],"kind":"macro"},"2:10294:109":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"12:933:10832":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"6:5563:14778":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"16:3549:13399":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"29:6874:14941":{"crate_id":29,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"16:4852:13421":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"12:0:8374":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"1:11405:10996":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:6323:10963":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:13912:13361":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:10302:8580":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"5:5889:12305":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"2:49742:8684":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:5604:11130":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"5:3362:10796":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:2366:600":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:14239:8837":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"5:3039:67843":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:7653:10337":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"1:5731:10729":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:1646:10183":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"6:4517:14568":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"29:530:14084":{"crate_id":29,"path":["libc","unix","rlimit"],"kind":"struct"},"2:46108:11197":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:3757:11050":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"15:269:11651":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:51818:13837":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:11176:10780":{"crate_id":1,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"2:53299:11164":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:15033:10342":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"26:105:8928":{"crate_id":26,"path":["termcolor","WriterInnerLock"],"kind":"enum"},"16:2912:11977":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:14627:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:24103:11236":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:50225:10818":{"crate_id":2,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"16:6644:11865":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:53436:13864":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:10663:10179":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"29:150:47717":{"crate_id":29,"path":["libc","unix","FILE"],"kind":"enum"},"2:4:979":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"6:4215:14451":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:48495:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"17:12095:12862":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"9:27:11547":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"17:11822:12817":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"27:93:10191":{"crate_id":27,"path":["strsim","StrSimError"],"kind":"enum"},"24:0:8374":{"crate_id":24,"path":["hashbrown"],"kind":"module"},"24:993:10835":{"crate_id":24,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"6:5978:14808":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:12845:8685":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:8392:8652":{"crate_id":1,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"17:13221:13165":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:12154:10853":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"5:5875:12302":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"16:7205:11876":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:8362:8795":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"5:7620:9930":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"6:1665:14236":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:10529:12639":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"16:5753:11718":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"29:4351:14505":{"crate_id":29,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"23:548:7181":{"crate_id":23,"path":["indexmap","map","Keys"],"kind":"struct"},"2:53252:11146":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"6:6106:14850":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"9:1020:11565":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"16:6999:11869":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:903:10867":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"12:162:8870":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:48276:8588":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"16:3429:11733":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:9258:7235":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:5407:10107":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"6:5400:14724":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"16:5790:11720":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"5:4599:12296":{"crate_id":5,"path":["alloc","collections","vec_deque","spec_extend","spec_extend","WrapAddOnDrop"],"kind":"struct"},"16:6554:11862":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:5745:10730":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:11499:12741":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:6794:10759":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:11956:8854":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"17:9332:12125":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:4884:8891":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:11199:12711":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"9:776:11545":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"5:7780:234":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:32156:11368":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:46779:8745":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:51442:11187":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:7633:10336":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"12:559:143":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"0:1943:1641":{"crate_id":0,"path":["clap","parser"],"kind":"module"},"6:3966:14358":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"29:1547:14158":{"crate_id":29,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:5934:10995":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"29:1615:14202":{"crate_id":29,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"16:5996:11848":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:55964:11054":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"17:11678:12775":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"6:4425:14530":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"29:4274:14466":{"crate_id":29,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:3739:8550":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"23:1059:7598":{"crate_id":23,"path":["indexmap","set","IntoIter"],"kind":"struct"},"1:15217:10804":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:3204:8740":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"18:169:29110":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"5:7824:12307":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"5:7849:12311":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"29:4016:14386":{"crate_id":29,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:3102:10744":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:12521:12946":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"6:5953:14790":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"29:4403:14523":{"crate_id":29,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:13129:11082":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:10822:10741":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"17:10962:12697":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:5380:10945":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:13816:66826":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"16:547:11716":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:11118:54877":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:50187:11306":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:12725:12981":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:8447:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:51121:11165":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"16:6620:12007":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:6463:10770":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:46656:13813":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:23136:11140":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"5:3341:11413":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:45857:196":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:8366:8794":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:6633:67479":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"2:9260:9221":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"29:6903:14948":{"crate_id":29,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:50171:11303":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:7755:8803":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:12168:12657":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:24632:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"23:746:9926":{"crate_id":23,"path":["indexmap","map","Drain"],"kind":"struct"},"6:5522:14752":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:51375:11143":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:13172:13151":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:53515:13869":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"5:7453:12294":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:14809:10749":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"6:4511:14566":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"6:6852:14934":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:13205:13162":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"18:755:69186":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"19:117:14958":{"crate_id":19,"path":["panic_unwind","dwarf","eh","EHContext"],"kind":"struct"},"17:13272:13178":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"26:357:8309":{"crate_id":26,"path":["termcolor","ColorSpec"],"kind":"struct"},"17:9896:69176":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:56322:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:12343:12902":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:52369:11160":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:46758:8815":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"18:850:12170":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"29:4006:14380":{"crate_id":29,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"24:2253:14954":{"crate_id":24,"path":["hashbrown","raw","inner","bitmask","BitMask"],"kind":"struct"},"24:1903:10794":{"crate_id":24,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:3565:8751":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:50341:201":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"5:8130:9926":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"18:730:69184":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:47619:205":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:46470:8498":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:1079:1840":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"5:5837:8681":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"6:4331:14488":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:13919:1637":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"5:7212:9926":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"6:6893:14943":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"16:4890:13422":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:5377:10944":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:3309:5996":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"6:1723:14271":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:13283:28677":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunksIter"],"kind":"struct"},"5:5315:200":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:51866:13838":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:16003:8390":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"29:5541:14767":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"0:1854:205":{"crate_id":0,"path":["clap","error","Result"],"kind":"typedef"},"2:2291:11064":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"5:3759:7185":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:8492:10851":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:13799:13330":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"14:56:12736":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"5:3839:12294":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"12:2072:10797":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"17:13963:13372":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:15131:10348":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:56387:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"23:134:10182":{"crate_id":23,"path":["indexmap","map","core","raw","OccupiedEntry"],"kind":"struct"},"2:3515:8486":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"26:430:8933":{"crate_id":26,"path":["termcolor","ParseColorErrorKind"],"kind":"enum"},"1:11082:8742":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"29:4076:14415":{"crate_id":29,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:5779:10731":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:49663:8703":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"1:16012:8398":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:49956:11088":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"24:809:10173":{"crate_id":24,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:10117:12149":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:51282:11166":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"23:1469:8869":{"crate_id":23,"path":["indexmap","HashValue"],"kind":"struct"},"17:13386:13202":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:9933:12619":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:46789:8816":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"12:2036:7598":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"29:6637:14932":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"21:90:5831":{"crate_id":21,"path":["clap_lex","ArgCursor"],"kind":"struct"},"2:51639:11155":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:1161:17122":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:10924:10744":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"0:0:1713":{"crate_id":0,"path":["clap"],"kind":"module"},"2:50055:11093":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"9:41:11548":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"5:8160:7598":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:51177:11186":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:13564:13250":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"5:4515:11463":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"1:11228:10784":{"crate_id":1,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"18:136:29106":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"16:3218:11983":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:46970:8785":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"9:963:11563":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:4477:8759":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:14030:10339":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:2399:9945":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:23767:10744":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"29:524:14082":{"crate_id":29,"path":["libc","unix","timespec"],"kind":"struct"},"2:49286:8850":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:7259:13891":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:15475:13981":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"14:250:13685":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"26:78:8923":{"crate_id":26,"path":["termcolor","IoStandardStreamLock"],"kind":"enum"},"27:52:10196":{"crate_id":27,"path":["strsim","StringWrapper"],"kind":"struct"},"17:12195:12878":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:12769:13967":{"crate_id":1,"path":["std","sys","unix","fs","TimespecDebugAdapter"],"kind":"struct"},"29:4334:14494":{"crate_id":29,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"6:4395:14519":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:5184:8886":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"27:0:1553":{"crate_id":27,"path":["strsim"],"kind":"module"},"24:444:11630":{"crate_id":24,"path":["hashbrown","raw","inner","RawDrain"],"kind":"struct"},"9:603:15572":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:13884:13352":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:3246:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"1:11246:10785":{"crate_id":1,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"6:4387:14516":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"5:6257:9930":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:53477:13867":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:53396:13860":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:11932:12829":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:1021:10888":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:2193:10028":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:9404:12518":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"16:6577:11863":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:46410:8695":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"6:1729:10958":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:8843:13893":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"2:48255:8580":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:13978:13373":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"29:617:14137":{"crate_id":29,"path":["libc","unix","servent"],"kind":"struct"},"9:722:11499":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"1:16009:8395":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"12:880:9924":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"17:9659:69182":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"16:6691:11866":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"0:215:1635":{"crate_id":0,"path":["clap","builder"],"kind":"module"},"16:3338:11729":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"6:584:14116":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"11:54:11618":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"1:7736:10340":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"17:9600:69180":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"1:4736:63797":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"29:625:14142":{"crate_id":29,"path":["libc","unix","protoent"],"kind":"struct"},"1:16005:8392":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"6:3892:14307":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"5:923:11472":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:10812:10901":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:3580:8547":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:46647:8807":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:13554:13247":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"6:624:14137":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"6:4410:14523":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:8807:162":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:11410:8707":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"6:4127:14435":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:12494:12942":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"29:4516:14571":{"crate_id":29,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"23:576:10173":{"crate_id":23,"path":["indexmap","map","IntoKeys"],"kind":"struct"},"16:3604:12537":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:46063:8883":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"17:13163:13150":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"9:927:52651":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"24:484:29102":{"crate_id":24,"path":["hashbrown","raw","inner","RawIterHashInner"],"kind":"struct"},"2:47542:8773":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"17:12221:12881":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"17:11640:12771":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"16:4230:13404":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"16:4955:13424":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"5:4215:9926":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"29:6845:14934":{"crate_id":29,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"6:1908:49018":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"29:4196:14450":{"crate_id":29,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"16:7884:11813":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"6:1622:14202":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:10179:12632":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"5:2200:12295":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"5:1195:29112":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"23:116:12494":{"crate_id":23,"path":["indexmap","map","core","raw","DebugIndices"],"kind":"struct"},"6:5359:14704":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:51520:11179":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:15499:11655":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:10211:12634":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"6:6935:14951":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"18:830:12169":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:12992:1837":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"6:1572:14169":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:49681:8704":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:10407:12087":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"5:8106:2971":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:13331:13189":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:46638:8806":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"6:4501:14561":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"24:799:7598":{"crate_id":24,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"16:6072:11824":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:10071:12153":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"29:5962:14802":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:2887:104":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"1:5972:11000":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:8399:136":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"6:5159:14599":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:14576:10740":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"29:1901:49018":{"crate_id":29,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"16:2794:11732":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:49248:8848":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:16022:8406":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"6:6910:14948":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:14000:13379":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"6:5130:14575":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"14:189:13678":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"5:1635:7181":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"25:178:8917":{"crate_id":25,"path":["textwrap","core","Word"],"kind":"struct"},"12:2392:14953":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:3416:8540":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"18:721:12500":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:10800:10899":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:13192:13157":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:699:10862":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"16:7420:11827":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"29:5262:14650":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"23:700:8773":{"crate_id":23,"path":["indexmap","map","IterMut"],"kind":"struct"},"29:5214:14627":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:5436:14733":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:11424:10946":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"29:4487:14558":{"crate_id":29,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:46431:10117":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"6:4341:14494":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"5:374:9900":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:7290:13891":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:10657:17121":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"6:4033:14389":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:46049:6388":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"}},"external_crates":{"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"25":{"name":"textwrap","html_root_url":"https://docs.rs/textwrap/0.15.0/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"26":{"name":"termcolor","html_root_url":null},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"27":{"name":"strsim","html_root_url":null},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"29":{"name":"libc","html_root_url":null},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"os_str_bytes","html_root_url":null},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"28":{"name":"atty","html_root_url":null},"21":{"name":"clap_lex","html_root_url":null},"23":{"name":"indexmap","html_root_url":"https://docs.rs/indexmap/1/"},"24":{"name":"hashbrown","html_root_url":null},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"20":{"name":"bitflags","html_root_url":"https://docs.rs/bitflags/1.3.2/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":16}