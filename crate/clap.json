{"root":"0:0:1633","crate_version":"3.2.12","includes_private":false,"index":{"2:3323:8448":{"id":"2:3323:8448","crate_id":2,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3325:171","2:3326:547"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:433:3694":{"id":"0:433:3694","crate_id":0,"name":"required_unless_present","span":{"filename":"src/builder/arg.rs","begin":[3424,4],"end":[3427,5]},"visibility":"public","docs":"Set this arg as [required] as long as the specified argument is not present at runtime.\n\n**Pro Tip:** Using `Arg::required_unless_present` implies [`Arg::required`] and is therefore not\nmandatory to also set.\n\n# Examples\n\n```rust\n# use clap::Arg;\nArg::new(\"config\")\n    .required_unless_present(\"debug\")\n# ;\n```\n\nIn the following example, the required argument is *not* provided,\nbut it's not an error because the `unless` arg has been supplied.\n\n```rust\n# use clap::{Command, Arg};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .required_unless_present(\"dbg\")\n        .takes_value(true)\n        .long(\"config\"))\n    .arg(Arg::new(\"dbg\")\n        .long(\"debug\"))\n    .try_get_matches_from(vec![\n        \"prog\", \"--debug\"\n    ]);\n\nassert!(res.is_ok());\n```\n\nSetting `Arg::required_unless_present(name)` and *not* supplying `name` or this arg is an error.\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .required_unless_present(\"dbg\")\n        .takes_value(true)\n        .long(\"config\"))\n    .arg(Arg::new(\"dbg\")\n        .long(\"debug\"))\n    .try_get_matches_from(vec![\n        \"prog\"\n    ]);\n\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind(), ErrorKind::MissingRequiredArgument);\n```\n[required]: Arg::required()","links":{"Arg::required()":"0:3816:1564","`Arg::required`":"0:3816:1564"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["arg_id",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Key","id":"0:3235:2593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1508:907":{"id":"0:1508:907","crate_id":0,"name":"new","span":{"filename":"src/builder/value_parser.rs","begin":[1556,4],"end":[1558,5]},"visibility":"public","docs":"Parse false-like string values, everything else is `true`","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9222:7159-0:4456:2171":{"id":"a:2:9222:7159-0:4456:2171","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9222:7159","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BoolValueParser","id":"0:4456:2171","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:926:5552":{"id":"0:926:5552","crate_id":0,"name":"get_long_version","span":{"filename":"src/builder/command.rs","begin":[3300,4],"end":[3302,5]},"visibility":"public","docs":"Get the long version of the cmd.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3173-0:4415:2173":{"id":"b:2:3173-0:4415:2173","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"EnumValueParser","id":"0:4415:2173","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}},"items":["2:3175:669"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:3252:209-0:5071:1570":{"id":"a:2:3252:209-0:5071:1570","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3252:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:5071:1570","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3451:2439":{"id":"0:3451:2439","crate_id":0,"name":"NoAutoHelp","span":{"filename":"src/builder/app_settings.rs","begin":[394,4],"end":[394,14]},"visibility":"default","docs":"Deprecated, replaced with [`Arg::action`][super::Arg::action]","links":{"super::Arg::action":"0:3816:1564"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:1395:907":{"id":"0:1395:907","crate_id":0,"name":"new","span":{"filename":"src/builder/value_parser.rs","begin":[770,4],"end":[772,5]},"visibility":"public","docs":"Implementation for [`ValueParser::path_buf`]","links":{"`ValueParser::path_buf`":"0:1294:2166"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3173-0:4432:2162":{"id":"b:2:3173-0:4432:2162","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:4432:2162","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["2:3175:669"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13428:63646":{"id":"2:13428:63646","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"self::pattern":"2:12997:8603","prim@char":"1:15839:8315","str::splitn":"1:15845:8320"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:49442:8628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:8597","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:8597","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:8598","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1318:1408":{"id":"0:1318:1408","crate_id":0,"name":"type_id","span":{"filename":"src/builder/value_parser.rs","begin":[237,4],"end":[239,5]},"visibility":"public","docs":"Describes the content of `AnyValue`","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"AnyValueId","id":"0:4700:2290","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:31823:68547":{"id":"2:31823:68547","crate_id":2,"name":"to_ne_bytes","span":null,"visibility":"public","docs":"Return the memory representation of this integer as a byte array in\nnative byte order.\n\nAs the target platform's native endianness is used, portable code\nshould use [`to_be_bytes`] or [`to_le_bytes`], as appropriate,\ninstead.\n\n\n\n[`to_be_bytes`]: Self::to_be_bytes\n[`to_le_bytes`]: Self::to_le_bytes\n\n# Examples\n\n```\nlet bytes = 0x1234567890123456u64.to_ne_bytes();\nassert_eq!(\n    bytes,\n    if cfg!(target_endian = \"big\") {\n        [0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\n    } else {\n        [0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\n    }\n);\n```","links":{"Self::to_be_bytes":"1:15859:8332","Self::to_le_bytes":"1:15859:8332"},"attrs":["#[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]","#[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"array","inner":{"type":{"kind":"primitive","inner":"u8"},"len":"8"}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3813":{"id":"0:3813","crate_id":0,"name":null,"span":{"filename":"src/builder/app_settings.rs","begin":[575,0],"end":[671,1]},"visibility":{"restricted":{"parent":"0:227:2151","path":"::builder::app_settings"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BitOr","id":"2:3372:1929","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:3386:1579","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:3386:1579","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:3814:171","0:3815:342"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3140:74":{"id":"2:3140:74","crate_id":2,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3142:4552"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:620:2620":{"id":"0:620:2620","crate_id":0,"name":"requires","span":{"filename":"src/builder/arg_group.rs","begin":[317,4],"end":[320,5]},"visibility":"public","docs":"Specify an argument or group that must be present when this group is.\n\nThis is not to be confused with a [required group]. Requirement rules function just like\n[argument requirement rules], you can name other arguments or groups that must be present\nwhen any one of the arguments from this group is used.\n\n**NOTE:** The name provided may be an argument or group name\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ArgGroup, ErrorKind};\nlet result = Command::new(\"myprog\")\n    .arg(Arg::new(\"flag\")\n        .short('f'))\n    .arg(Arg::new(\"color\")\n        .short('c'))\n    .arg(Arg::new(\"debug\")\n        .short('d'))\n    .group(ArgGroup::new(\"req_flags\")\n        .args(&[\"flag\", \"color\"])\n        .requires(\"debug\"))\n    .try_get_matches_from(vec![\"myprog\", \"-c\"]);\n// because we used an arg from the group, and the group requires \"-d\" to be used, it's an\n// error\nassert!(result.is_err());\nlet err = result.unwrap_err();\nassert_eq!(err.kind(), ErrorKind::MissingRequiredArgument);\n```\n[required group]: ArgGroup::required()\n[argument requirement rules]: crate::Arg::requires()","links":{"crate::Arg::requires()":"0:3816:1564","ArgGroup::required()":"0:3903:1565"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["id",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Key","id":"0:3235:2593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3969-0:4791:1586":{"id":"b:2:3969-0:4791:1586","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3967:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OsValues","id":"0:4791:1586","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:3971:1408"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3983:2426":{"id":"0:3983:2426","crate_id":0,"name":"Hidden","span":{"filename":"src/builder/arg_settings.rs","begin":[96,4],"end":[96,10]},"visibility":"default","docs":"Deprecated, replaced with [`Arg::hide`] and [`Arg::is_hide_set`]","links":{"`Arg::hide`":"0:3816:1564","`Arg::is_hide_set`":"0:3816:1564"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:3981:2895":{"id":"0:3981:2895","crate_id":0,"name":"Global","span":{"filename":"src/builder/arg_settings.rs","begin":[87,4],"end":[87,10]},"visibility":"default","docs":"Deprecated, replaced with [`Arg::global`] and [`Arg::is_global_set`]","links":{"`Arg::global`":"0:3816:1564","`Arg::is_global_set`":"0:3816:1564"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:169:2102":{"id":"0:169:2102","crate_id":0,"name":"augment_args_for_update","span":{"filename":"src/derive.rs","begin":[407,4],"end":[407,64]},"visibility":"default","docs":"Append to [`Command`] so it can update `self`.\n\nThis is used to implement `#[clap(flatten)]`\n\nSee also [`CommandFactory`].","links":{"`Command`":"0:755:1563","`CommandFactory`":"0:153:1572"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["cmd",{"kind":"resolved_path","inner":{"name":"Command","id":"0:755:1563","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Command","id":"0:755:1563","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:3389:2322":{"id":"0:3389:2322","crate_id":0,"name":"WaitOnError","span":{"filename":"src/builder/app_settings.rs","begin":[80,4],"end":[80,15]},"visibility":"default","docs":"Deprecated, replace\n```rust,no_run\nlet cmd = clap::Command::new(\"cmd\")\n    .global_setting(clap::AppSettings::WaitOnError)\n    .arg(clap::arg!(--flag));\nlet m = cmd.get_matches();\n```\nwith\n```rust\nlet cmd = clap::Command::new(\"cmd\")\n    .arg(clap::arg!(--flag));\nlet m = match cmd.try_get_matches() {\n    Ok(m) => m,\n    Err(err) => {\n        if err.use_stderr() {\n            let _ = err.print();\n\n            eprintln!(\"\\nPress [ENTER] / [RETURN] to continue...\");\n            use std::io::BufRead;\n            let mut s = String::new();\n            let i = std::io::stdin();\n            i.lock().read_line(&mut s).unwrap();\n\n            std::process::exit(2);\n        } else {\n            let _ = err.print();\n            std::process::exit(0);\n        }\n    }\n};\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:1365:2002":{"id":"0:1365:2002","crate_id":0,"name":"parse","span":{"filename":"src/builder/value_parser.rs","begin":[622,4],"end":[629,5]},"visibility":"default","docs":"Parse the argument value\n\nWhen `arg` is `None`, an external subcommand value is being parsed.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["cmd",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Command","id":"0:755:1563","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}],["arg",{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Arg","id":"0:3816:1564","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["value",{"kind":"resolved_path","inner":{"name":"std::ffi::OsString","id":"1:2920:170","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Value","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:1362:2165","args":null,"param_names":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"crate::Error","id":"0:4640:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9223:7158-0:4444:2163":{"id":"a:2:9223:7158-0:4444:2163","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9223:7158","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9223:7158","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"RangedU64ValueParser","id":"0:4444:2163","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4826:7596":{"id":"0:4826:7596","crate_id":0,"name":"EnvVariable","span":{"filename":"src/parser/matches/value_source.rs","begin":[8,4],"end":[8,15]},"visibility":"default","docs":"Value came [`Arg::env`][crate::Arg::env]","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:4722":{"id":"0:4722","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[67,43],"end":[67,45]},"visibility":{"restricted":{"parent":"0:2077:7161","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"StructuralEq","id":"2:3249:206","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4706:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2843-0:1294:2166":{"id":"b:2:2843-0:1294:2166","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2837:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1294:2166","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2845:2590"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3360:8460":{"id":"2:3360:8460","crate_id":2,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3361:171","2:3362:939"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:4359:6239":{"id":"0:4359:6239","crate_id":0,"name":"Other","span":{"filename":"src/builder/value_hint.rs","begin":[34,4],"end":[34,9]},"visibility":"default","docs":"None of the hints below apply. Disables shell completion for this argument.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:10538:8870":{"id":"2:10538:8870","crate_id":2,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10539:146","2:10540:21292","2:10541:21293"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:31762:68498":{"id":"2:31762:68498","crate_id":2,"name":"log","span":null,"visibility":"public","docs":"Returns the logarithm of the number with respect to an arbitrary base,\nrounded down.\n\nThis method might not be optimized owing to implementation details;\n`log2` can produce results more efficiently for base 2, and `log10`\ncan produce results more efficiently for base 10.\n\n# Panics\n\nWhen the number is zero, or if the base is not at least 2;\nit panics in debug mode and the return value is 0 in release mode.\n\n# Examples\n\n```\n#![feature(int_log)]\nassert_eq!(5u64.log(5), 1);\n```","links":{},"attrs":["#[unstable(feature = \"int_log\", issue = \"70887\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]","#[track_caller]","#[allow(arithmetic_overflow)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["base",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"primitive","inner":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13384:63633":{"id":"2:13384:63633","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:15845:8320"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1445:907":{"id":"0:1445:907","crate_id":0,"name":"new","span":{"filename":"src/builder/value_parser.rs","begin":[1098,4],"end":[1100,5]},"visibility":"public","docs":"Select full range of `i64`","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1578:2158":{"id":"0:1578:2158","crate_id":0,"name":"value_parser","span":{"filename":"src/builder/value_parser.rs","begin":[1898,4],"end":[1900,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"qualified_path","inner":{"name":"Parser","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:1543:2167","args":null,"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2163:1744":{"id":"0:2163:1744","crate_id":0,"name":"values_of","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[389,4],"end":[398,5]},"visibility":"public","docs":"Deprecated, replaced with [`ArgMatches::get_many()`]","links":{"`ArgMatches::get_many()`":"0:4706:1568"},"attrs":["#[track_caller]","#![allow(deprecated)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Values","id":"0:4773:1588","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Key","id":"0:3235:2593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1443":{"id":"0:1443","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1096,0],"end":[1174,1]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"std::convert::TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i64"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3240:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3252:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:4432:2162","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["0:1445:907","0:1446:6366"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3179-0:4456:2171":{"id":"b:2:3179-0:4456:2171","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3149:217","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BoolValueParser","id":"0:4456:2171","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3182:127","2:3183:1395"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:6084:8281":{"id":"5:6084:8281","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8352:205"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3969-0:3386:1579":{"id":"b:2:3969-0:3386:1579","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3967:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:3386:1579","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3971:1408"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3348:2237":{"id":"0:3348:2237","crate_id":0,"name":"Set","span":{"filename":"src/builder/action.rs","begin":[49,4],"end":[49,7]},"visibility":"default","docs":"When encountered, store the associated value(s) in [`ArgMatches`][crate::ArgMatches]\n\n# Examples\n\n```rust\n# use clap::Command;\n# use clap::Arg;\nlet cmd = Command::new(\"mycmd\")\n    .arg(\n        Arg::new(\"flag\")\n            .long(\"flag\")\n            .action(clap::ArgAction::Set)\n    );\n\nlet matches = cmd.try_get_matches_from([\"mycmd\", \"--flag\", \"value\"]).unwrap();\nassert!(matches.contains_id(\"flag\"));\nassert_eq!(matches.occurrences_of(\"flag\"), 0);\nassert_eq!(\n    matches.get_many::<String>(\"flag\").unwrap_or_default().map(|v| v.as_str()).collect::<Vec<_>>(),\n    vec![\"value\"]\n);\n```","links":{"crate::ArgMatches":"0:4706:1568"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:4403:2176":{"id":"0:4403:2176","crate_id":0,"name":"OsStringValueParser","span":{"filename":"src/builder/value_parser.rs","begin":[724,0],"end":[724,33]},"visibility":"public","docs":"Implementation for [`ValueParser::os_string`]\n\nUseful for composing new [`TypedValueParser`]s","links":{"`ValueParser::os_string`":"0:1294:2166","`TypedValueParser`":"0:1362:2165"},"attrs":["#[non_exhaustive]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":false,"fields":[],"impls":["0:1386","a:2:9222:7159-0:4403:2176","a:2:3252:209-0:4403:2176","a:2:3240:200-0:4403:2176","a:2:9223:7158-0:4403:2176","a:2:3281:5920-0:4403:2176","b:2:2843-0:4403:2176","b:2:3169-0:4403:2176","b:2:3173-0:4403:2176","b:2:3184-0:4403:2176","b:2:3969-0:4403:2176","b:2:2846-0:4403:2176","b:2:3179-0:4403:2176","b:5:787-0:4403:2176","0:4404","0:4405","0:4407","0:1388","0:1392"]}},"b:2:3179-0:4750:7086":{"id":"b:2:3179-0:4750:7086","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3149:217","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValuesRef","id":"0:4750:7086","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["2:3182:127","2:3183:1395"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:3240:200-0:3347:1562":{"id":"a:2:3240:200-0:3347:1562","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3240:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgAction","id":"0:3347:1562","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:3281:5920-0:5071:1570":{"id":"a:2:3281:5920-0:5071:1570","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3281:5920","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:5071:1570","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:5:787-0:3386:1579":{"id":"b:5:787-0:3386:1579","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:783:211","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:3386:1579","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:789:4115","5:790:4707","5:791:9628"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:2317":{"id":"0:2317","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1600,0],"end":[1609,1]},"visibility":{"restricted":{"parent":"0:2077:7161","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["intersperse_with","gt","try_for_each","min","is_sorted_by","fold","size_hint","try_fold","cycle","skip","by_ref","for_each","min_by_key","ge","position","min_by","filter_map","cloned","is_sorted_by_key","sum","product","reduce","cmp","try_collect","take","skip_while","eq","next_chunk","advance_by","lt","max_by","count","any","partial_cmp","cmp_by","__iterator_get_unchecked","try_reduce","zip","all","collect_into","map_while","nth","chain","max_by_key","partial_cmp_by","try_find","last","partition","scan","filter","step_by","take_while","rev","ne","peekable","flatten","collect","find","eq_by","rposition","partition_in_place","le","fuse","copied","intersperse","map","flat_map","max","find_map","enumerate","is_sorted","unzip","is_partitioned","inspect"],"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8565:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OsValues","id":"0:4791:1586","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["0:2319:2018","0:2320:909","0:2321:4560"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3969-0:4474:2175":{"id":"b:2:3969-0:4474:2175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3967:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"NonEmptyStringValueParser","id":"0:4474:2175","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3971:1408"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:8326:8718":{"id":"2:8326:8718","crate_id":2,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8328:7572"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:927:5554":{"id":"0:927:5554","crate_id":0,"name":"get_author","span":{"filename":"src/builder/command.rs","begin":[3306,4],"end":[3308,5]},"visibility":"public","docs":"Get the authors of the cmd.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3855":{"id":"0:3855","crate_id":0,"name":null,"span":{"filename":"src/builder/arg.rs","begin":[60,9],"end":[60,16]},"visibility":{"restricted":{"parent":"0:242:1829","path":"::builder::arg"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]","#[allow(missing_debug_implementations)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Default","id":"2:3218:115","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3816:1564","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["0:3857:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4441":{"id":"0:4441","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1090,22],"end":[1090,27]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Debug","id":"2:10255:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"std::convert::TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i64"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3240:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3252:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10255:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:4432:2162","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["0:4443:648"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13363:67021":{"id":"2:13363:67021","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4310":{"id":"0:4310","crate_id":0,"name":null,"span":{"filename":"src/builder/possible_value.rs","begin":[29,25],"end":[29,30]},"visibility":{"restricted":{"parent":"0:1203:2155","path":"::builder::possible_value"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:4298:1582","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["0:4312:397"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13466:63649":{"id":"2:13466:63649","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:12997:8603","prim@char":"1:15839:8315"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:8597","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:8597","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:8598","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3169-0:3816:1564":{"id":"b:2:3169-0:3816:1564","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3816:1564","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["2:3172:2288"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:2297:59":{"id":"0:2297:59","crate_id":0,"name":"default","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1539,4],"end":[1545,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2843-0:3903:1565":{"id":"b:2:2843-0:3903:1565","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2837:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3903:1565","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["2:2845:2590"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:5:787-0:3903:1565":{"id":"b:5:787-0:3903:1565","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:783:211","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3903:1565","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["5:789:4115","5:790:4707","5:791:9628"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:10276:8507":{"id":"2:10276:8507","crate_id":2,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10277:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:2203:7479":{"id":"0:2203:7479","crate_id":0,"name":"subcommand_matches","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1022,4],"end":[1024,5]},"visibility":"public","docs":"The `ArgMatches` for the current [subcommand].\n\nSubcommand values are put in a child [`ArgMatches`]\n\nReturns `None` if the subcommand wasn't present at runtime,\n\n# Panics\n\nIf `id` is is not a valid subcommand.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ArgAction};\nlet app_m = Command::new(\"myprog\")\n    .arg(Arg::new(\"debug\")\n        .short('d')\n        .action(ArgAction::SetTrue)\n    )\n    .subcommand(Command::new(\"test\")\n        .arg(Arg::new(\"opt\")\n            .long(\"option\")\n            .takes_value(true)))\n    .get_matches_from(vec![\n        \"myprog\", \"-d\", \"test\", \"--option\", \"val\"\n    ]);\n\n// Both parent commands, and child subcommands can have arguments present at the same times\nassert!(*app_m.get_one::<bool>(\"debug\").expect(\"defaulted by clap\"));\n\n// Get the subcommand's ArgMatches instance\nif let Some(sub_m) = app_m.subcommand_matches(\"test\") {\n    // Use the struct like normal\n    assert_eq!(sub_m.get_one::<String>(\"opt\").map(|s| s.as_str()), Some(\"val\"));\n}\n```\n\n[subcommand]: crate::Command::subcommand\n[`Command`]: crate::Command","links":{"`ArgMatches`":"0:4706:1568","crate::Command::subcommand":"0:4244:1577"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4706:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Key","id":"0:3235:2593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13710:138":{"id":"2:13710:138","crate_id":2,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13711:171","2:13712:1000"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:5:787-0:4515:6699":{"id":"b:5:787-0:4515:6699","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:783:211","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:4515:6699","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:789:4115","5:790:4707","5:791:9628"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3779:8478":{"id":"2:3779:8478","crate_id":2,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1914":{"id":"0:1914","crate_id":0,"name":null,"span":{"filename":"src/error/mod.rs","begin":[988,0],"end":[992,1]},"visibility":{"restricted":{"parent":"0:1777:1566","path":"::error"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"1:4028:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4640:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:1915:669"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1537:6312":{"id":"0:1537:6312","crate_id":0,"name":"Value","span":{"filename":"src/builder/value_parser.rs","begin":[1748,4],"end":[1748,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"2:12936:1756":{"id":"2:12936:1756","crate_id":2,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12937:126","2:12938:1757"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:3281:5920-0:4244:1577":{"id":"a:2:3281:5920-0:4244:1577","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3281:5920","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:4244:1577","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:933:5565":{"id":"0:933:5565","crate_id":0,"name":"get_next_help_heading","span":{"filename":"src/builder/command.rs","begin":[3352,4],"end":[3354,5]},"visibility":"public","docs":"Get the custom section heading specified via [`Command::help_heading`].\n\n[`App::help_heading`]: Command::help_heading()","links":{"`Command::help_heading`":"0:4244:1577"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4594:6785":{"id":"0:4594:6785","crate_id":0,"name":"UnrecognizedSubcommand","span":{"filename":"src/error/kind.rs","begin":[84,4],"end":[84,26]},"visibility":"default","docs":"Occurs when the user provides an unrecognized [`Subcommand`] which either\ndoesn't meet the threshold for being similar enough to an existing subcommand,\nor the 'suggestions' feature is disabled.\nOtherwise the more detailed [`InvalidSubcommand`] error is returned.\n\nThis error typically happens when passing additional subcommand names to the `help`\nsubcommand. Otherwise, the more general [`UnknownArgument`] error is used.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ErrorKind, };\nlet result = Command::new(\"prog\")\n    .subcommand(Command::new(\"config\")\n        .about(\"Used for configuration\")\n        .arg(Arg::new(\"config_file\")\n            .help(\"The configuration file to use\")))\n    .try_get_matches_from(vec![\"prog\", \"help\", \"nothing\"]);\nassert!(result.is_err());\nassert_eq!(result.unwrap_err().kind(), ErrorKind::UnrecognizedSubcommand);\n```\n\n[`Subcommand`]: crate::Subcommand\n[`InvalidSubcommand`]: ErrorKind::InvalidSubcommand\n[`UnknownArgument`]: ErrorKind::UnknownArgument","links":{"ErrorKind::UnknownArgument":"0:4587:1584","crate::Subcommand":"0:170:1575","ErrorKind::InvalidSubcommand":"0:4587:1584"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:821:4820":{"id":"0:821:4820","crate_id":0,"name":"term_width","span":{"filename":"src/builder/command.rs","begin":[1052,4],"end":[1055,5]},"visibility":"public","docs":"Sets the terminal width at which to wrap help messages.\n\nUsing `0` will ignore terminal widths and use source formatting.\n\nDefaults to current terminal width when `wrap_help` feature flag is enabled.  If the flag\nis disabled or it cannot be determined, the default is 100.\n\n**NOTE:** This setting applies globally and *not* on a per-command basis.\n\n# Examples\n\n```no_run\n# use clap::Command;\nCommand::new(\"myprog\")\n    .term_width(80)\n# ;\n```","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["width",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:460:3909":{"id":"0:460:3909","crate_id":0,"name":"overrides_with","span":{"filename":"src/builder/arg.rs","begin":[4211,4],"end":[4214,5]},"visibility":"public","docs":"Sets an overridable argument.\n\ni.e. this argument and the following argument\nwill override each other in POSIX style (whichever argument was specified at runtime\n**last** \"wins\")\n\n**NOTE:** When an argument is overridden it is essentially as if it never was used, any\nconflicts, requirements, etc. are evaluated **after** all \"overrides\" have been removed\n\n**NOTE:** Overriding an argument implies they [conflict][Arg::conflicts_with`].\n\n**WARNING:** Positional arguments and options which accept\n[`Arg::multiple_occurrences`] cannot override themselves (or we\nwould never be able to advance to the next positional). If a positional\nargument or option with one of the [`Arg::multiple_occurrences`]\nsettings lists itself as an override, it is simply ignored.\n\n# Examples\n\n```rust\n# use clap::{Command, arg};\nlet m = Command::new(\"prog\")\n    .arg(arg!(-f --flag \"some flag\")\n        .conflicts_with(\"debug\"))\n    .arg(arg!(-d --debug \"other flag\"))\n    .arg(arg!(-c --color \"third flag\")\n        .overrides_with(\"flag\"))\n    .get_matches_from(vec![\n        \"prog\", \"-f\", \"-d\", \"-c\"]);\n            //    ^~~~~~~~~~~~^~~~~ flag is overridden by color\n\nassert!(m.is_present(\"color\"));\nassert!(m.is_present(\"debug\")); // even though flag conflicts with debug, it's as if flag\n                                // was never used because it was overridden with color\nassert!(!m.is_present(\"flag\"));\n```\nCare must be taken when using this setting, and having an arg override with itself. This\nis common practice when supporting things like shell aliases, config files, etc.\nHowever, when combined with multiple values, it can get dicy.\nHere is how clap handles such situations:\n\nWhen a flag overrides itself, it's as if the flag was only ever used once (essentially\npreventing a \"Unexpected multiple usage\" error):\n\n```rust\n# use clap::{Command, arg};\nlet m = Command::new(\"posix\")\n            .arg(arg!(--flag  \"some flag\").overrides_with(\"flag\"))\n            .get_matches_from(vec![\"posix\", \"--flag\", \"--flag\"]);\nassert!(m.is_present(\"flag\"));\n```\n\nMaking an arg [`Arg::multiple_occurrences`] and override itself\nis essentially meaningless. Therefore clap ignores an override of self\nif it's a flag and it already accepts multiple occurrences.\n\n```\n# use clap::{Command, arg};\nlet m = Command::new(\"posix\")\n            .arg(arg!(--flag ...  \"some flag\").overrides_with(\"flag\"))\n            .get_matches_from(vec![\"\", \"--flag\", \"--flag\", \"--flag\", \"--flag\"]);\nassert!(m.is_present(\"flag\"));\n```\n\nNow notice with options (which *do not* set\n[`Arg::multiple_occurrences`]), it's as if only the last\noccurrence happened.\n\n```\n# use clap::{Command, arg};\nlet m = Command::new(\"posix\")\n            .arg(arg!(--opt <val> \"some option\").overrides_with(\"opt\"))\n            .get_matches_from(vec![\"\", \"--opt=some\", \"--opt=other\"]);\nassert!(m.is_present(\"opt\"));\nassert_eq!(m.value_of(\"opt\"), Some(\"other\"));\n```\n\nThis will also work when [`Arg::multiple_values`] is enabled:\n\n```\n# use clap::{Command, Arg};\nlet m = Command::new(\"posix\")\n            .arg(\n                Arg::new(\"opt\")\n                    .long(\"opt\")\n                    .takes_value(true)\n                    .multiple_values(true)\n                    .overrides_with(\"opt\")\n            )\n            .get_matches_from(vec![\"\", \"--opt\", \"1\", \"2\", \"--opt\", \"3\", \"4\", \"5\"]);\nassert!(m.is_present(\"opt\"));\nassert_eq!(m.values_of(\"opt\").unwrap().collect::<Vec<_>>(), &[\"3\", \"4\", \"5\"]);\n```\n\nJust like flags, options with [`Arg::multiple_occurrences`] set\nwill ignore the \"override self\" setting.\n\n```\n# use clap::{Command, arg};\nlet m = Command::new(\"posix\")\n            .arg(arg!(--opt <val> ... \"some option\")\n                .multiple_values(true)\n                .overrides_with(\"opt\"))\n            .get_matches_from(vec![\"\", \"--opt\", \"first\", \"over\", \"--opt\", \"other\", \"val\"]);\nassert!(m.is_present(\"opt\"));\nassert_eq!(m.values_of(\"opt\").unwrap().collect::<Vec<_>>(), &[\"first\", \"over\", \"other\", \"val\"]);\n```","links":{"Arg::conflicts_with`":"0:3816:1564","`Arg::multiple_occurrences`":"0:3816:1564","`Arg::multiple_values`":"0:3816:1564"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["arg_id",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Key","id":"0:3235:2593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:166:2026":{"id":"0:166:2026","crate_id":0,"name":"update_from_arg_matches_mut","span":{"filename":"src/derive.rs","begin":[362,4],"end":[364,5]},"visibility":"default","docs":"Assign values from `ArgMatches` to `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["matches",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4706:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4640:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:103:1810":{"id":"0:103:1810","crate_id":0,"name":"command","span":{"filename":"src/macros.rs","begin":[353,0],"end":[360,1]},"visibility":"public","docs":"Requires `cargo` feature flag to be enabled.","links":{},"attrs":["#[cfg(not(feature = \"cargo\"))]","#[macro_export]"],"deprecation":null,"kind":"macro","inner":"macro_rules! command {\n    () => { ... };\n    ($name:expr) => { ... };\n}"},"0:207:2102":{"id":"0:207:2102","crate_id":0,"name":"augment_args_for_update","span":{"filename":"src/derive.rs","begin":[565,4],"end":[567,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["cmd",{"kind":"resolved_path","inner":{"name":"Command","id":"0:755:1563","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Command","id":"0:755:1563","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:358:1849":{"id":"0:358:1849","crate_id":0,"name":"min_values","span":{"filename":"src/builder/arg.rs","begin":[1367,4],"end":[1370,5]},"visibility":"public","docs":"The *minimum* number of values for this argument.\n\nFor example, if you had a\n`-f <file>` argument where you wanted at least 2 'files' you would set\n`.min_values(2)`, and this argument would be satisfied if the user provided, 2 or more\nvalues.\n\n**NOTE:** This does not implicitly set [`Arg::multiple_occurrences(true)`]. This is because\n`-o val -o val` is multiple occurrences but a single value and `-o val1 val2` is a single\noccurrence with multiple values. For positional arguments this **does** set\n[`Arg::multiple_occurrences(true)`] because there is no way to determine the difference between multiple\noccurrences and multiple values.\n\n**NOTE:** Passing a non-zero value is not the same as specifying [`Arg::required(true)`].\nThis is due to min and max validation only being performed for present arguments,\nmarking them as required will thus perform validation and a min value of 1\nis unnecessary, ignored if not required.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg};\nArg::new(\"file\")\n    .short('f')\n    .min_values(3);\n```\n\nSupplying more than the minimum number of values is allowed\n\n```rust\n# use clap::{Command, Arg};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"file\")\n        .takes_value(true)\n        .min_values(2)\n        .short('F'))\n    .try_get_matches_from(vec![\n        \"prog\", \"-F\", \"file1\", \"file2\", \"file3\"\n    ]);\n\nassert!(res.is_ok());\nlet m = res.unwrap();\nlet files: Vec<_> = m.values_of(\"file\").unwrap().collect();\nassert_eq!(files, [\"file1\", \"file2\", \"file3\"]);\n```\n\nSupplying less than the minimum number of values is an error\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"file\")\n        .takes_value(true)\n        .min_values(2)\n        .short('F'))\n    .try_get_matches_from(vec![\n        \"prog\", \"-F\", \"file1\"\n    ]);\n\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind(), ErrorKind::TooFewValues);\n```\n[`Arg::multiple_occurrences(true)`]: Arg::multiple_occurrences()\n[`Arg::required(true)`]: Arg::required()","links":{"Arg::required()":"0:3816:1564","Arg::multiple_occurrences()":"0:3816:1564"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["qty",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1409:6352":{"id":"0:1409:6352","crate_id":0,"name":"parse_ref","span":{"filename":"src/builder/value_parser.rs","begin":[884,4],"end":[927,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["cmd",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Command","id":"0:755:1563","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}],["arg",{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Arg","id":"0:3816:1564","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["value",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"std::ffi::OsStr","id":"1:2923:169","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Value","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:1362:2165","args":null,"param_names":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"crate::Error","id":"0:4640:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4767":{"id":"0:4767","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1460,9],"end":[1460,14]},"visibility":{"restricted":{"parent":"0:2077:7161","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"RawValues","id":"0:4763:7085","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["0:4769:397"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1547:1574":{"id":"0:1547:1574","crate_id":0,"name":"Parser","span":{"filename":"src/builder/value_parser.rs","begin":[1825,4],"end":[1825,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1294:2166","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"0:1844:648":{"id":"0:1844:648","crate_id":0,"name":"fmt","span":{"filename":"src/error/kind.rs","begin":[437,4],"end":[439,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"std::fmt::Formatter","id":"2:10215:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"std::fmt::Result","id":"2:10204:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3169-0:5071:1570":{"id":"b:2:3169-0:5071:1570","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:5071:1570","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3172:2288"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:31768:68504":{"id":"2:31768:68504","crate_id":2,"name":"checked_neg","span":null,"visibility":"public","docs":"Checked negation. Computes `-self`, returning `None` unless `self ==\n0`.\n\nNote that negating any positive integer will overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(0u64.checked_neg(), Some(0));\nassert_eq!(1u64.checked_neg(), None);\n```","links":{},"attrs":["#[stable(feature = \"wrapping\", since = \"1.7.0\")]","#[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.47.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9222:7159-0:4244:1577":{"id":"a:2:9222:7159-0:4244:1577","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9222:7159","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:4244:1577","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"0:164:2006":{"id":"0:164:2006","crate_id":0,"name":"from_arg_matches_mut","span":{"filename":"src/derive.rs","begin":[354,4],"end":[356,5]},"visibility":"default","docs":"Instantiate `Self` from [`ArgMatches`], parsing the arguments as needed.\n\nMotivation: If our application had two CLI options, `--name\n<STRING>` and the flag `--debug`, we may create a struct as follows:\n\n ```ignore\nstruct Context {\n    name: String,\n    debug: bool\n}\n```\n\nWe then need to convert the `ArgMatches` that `clap` generated into our struct.\n`from_arg_matches_mut` serves as the equivalent of:\n\n ```ignore\n# use clap::ArgMatches;\n# struct Context {\n#   name: String,\n#   debug: bool\n# }\nimpl From<ArgMatches> for Context {\n   fn from(m: ArgMatches) -> Self {\n       Context {\n           name: m.get_one::<String>(\"name\").unwrap().to_string(),\n           debug: *m.get_one::<bool>(\"debug\").expect(\"defaulted by clap\"),\n       }\n   }\n}\n```","links":{"`ArgMatches`":"0:4706:1568"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["matches",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4706:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4640:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3421:2379":{"id":"0:3421:2379","crate_id":0,"name":"ArgsNegateSubcommands","span":{"filename":"src/builder/app_settings.rs","begin":[237,4],"end":[237,25]},"visibility":"default","docs":"Deprecated, replaced with [`Command::args_conflicts_with_subcommands`] and\n[`Command::is_args_conflicts_with_subcommands_set`]","links":{"`Command::args_conflicts_with_subcommands`":"0:4244:1577","`Command::is_args_conflicts_with_subcommands_set`":"0:4244:1577"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"b:2:3969-0:4432:2162":{"id":"b:2:3969-0:4432:2162","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3967:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:4432:2162","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["2:3971:1408"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:905:3559":{"id":"0:905:3559","crate_id":0,"name":"hide","span":{"filename":"src/builder/command.rs","begin":[2726,4],"end":[2732,5]},"visibility":"public","docs":"Specifies that this [`subcommand`] should be hidden from help messages\n\n# Examples\n\n```rust\n# use clap::{Command, Arg};\nCommand::new(\"myprog\")\n    .subcommand(\n        Command::new(\"test\").hide(true)\n    )\n# ;\n```\n\n[`subcommand`]: crate::Command::subcommand()","links":{"crate::Command::subcommand()":"0:4244:1577"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:477:1840":{"id":"0:477:1840","crate_id":0,"name":"get_long","span":{"filename":"src/builder/arg.rs","begin":[4344,4],"end":[4346,5]},"visibility":"public","docs":"Get the long option name for this argument, if any","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4306:648":{"id":"0:4306:648","crate_id":0,"name":"fmt","span":{"filename":"src/builder/possible_value.rs","begin":[29,9],"end":[29,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10215:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10204:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2843-0:4462:2174":{"id":"b:2:2843-0:4462:2174","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2837:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FalseyValueParser","id":"0:4462:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2845:2590"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:2266:59":{"id":"0:2266:59","crate_id":0,"name":"default","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1427,4],"end":[1433,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1330":{"id":"0:1330","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[383,0],"end":[388,1]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":"Create an `i64` [`ValueParser`] from a `N..` range\n\nSee [`RangedI64ValueParser`] for more control over the output type.\n\nSee also [`RangedU64ValueParser`]\n\n# Examples\n\n```rust\nlet mut cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"port\")\n            .long(\"port\")\n            .value_parser(3000..)\n            .takes_value(true)\n            .required(true)\n    );\n\nlet m = cmd.try_get_matches_from_mut([\"cmd\", \"--port\", \"3001\"]).unwrap();\nlet port: i64 = *m.get_one(\"port\")\n    .expect(\"required\");\nassert_eq!(port, 3001);\n```","links":{"`RangedU64ValueParser`":"0:4444:2163","`ValueParser`":"0:1294:2166","`RangedI64ValueParser`":"0:4432:2162"},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"RangeFrom","id":"2:45762:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i64"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1294:2166","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:1331:669"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:31795:68522":{"id":"2:31795:68522","crate_id":2,"name":"overflowing_sub","span":null,"visibility":"public","docs":"Calculates `self` - `rhs`\n\nReturns a tuple of the subtraction along with a boolean indicating\nwhether an arithmetic overflow would occur. If an overflow would\nhave occurred then the wrapped value is returned.\n\n# Examples\n\nBasic usage\n\n```\n\nassert_eq!(5u64.overflowing_sub(2), (3, false));\nassert_eq!(0u64.overflowing_sub(1), (u64::MAX, true));\n```","links":{},"attrs":["#[stable(feature = \"wrapping\", since = \"1.7.0\")]","#[rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"u64"},{"kind":"primitive","inner":"bool"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1555":{"id":"0:1555","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1842,0],"end":[1847,1]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"ValueParserFactory","id":"0:1543:2167","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"primitive","inner":"bool"},"items":["0:1556:1574","0:1557:2158"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2843-0:4561:6700":{"id":"b:2:2843-0:4561:6700","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2837:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ContextValue","id":"0:4561:6700","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2845:2590"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:3281:5920-0:3903:1565":{"id":"a:2:3281:5920-0:3903:1565","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3281:5920","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3903:1565","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4395":{"id":"0:4395","crate_id":0,"name":null,"span":{"filename":"src/builder/value_hint.rs","begin":[27,43],"end":[27,48]},"visibility":{"restricted":{"parent":"0:1272:2157","path":"::builder::value_hint"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:4356:1583","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:4396:397"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1505":{"id":"0:1505","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1506,0],"end":[1510,1]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Default","id":"2:3218:115","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BoolValueParser","id":"0:4456:2171","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:1506:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:31763:68499":{"id":"2:31763:68499","crate_id":2,"name":"log2","span":null,"visibility":"public","docs":"Returns the base 2 logarithm of the number, rounded down.\n\n# Panics\n\nWhen the number is zero it panics in debug mode and\nthe return value is 0 in release mode.\n\n# Examples\n\n```\n#![feature(int_log)]\nassert_eq!(2u64.log2(), 1);\n```","links":{},"attrs":["#[unstable(feature = \"int_log\", issue = \"70887\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]","#[track_caller]","#[allow(arithmetic_overflow)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3388:8462":{"id":"2:3388:8462","crate_id":2,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3390:171","2:3391:1215"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:3240:200-0:4706:1568":{"id":"a:2:3240:200-0:4706:1568","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3240:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4706:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:13481:1760":{"id":"2:13481:1760","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:31827:68549":{"id":"2:31827:68549","crate_id":2,"name":"from_le_bytes","span":null,"visibility":"public","docs":"Create a native endian integer value from its representation\nas a byte array in little endian.\n\n\n\n# Examples\n\n```\nlet value = u64::from_le_bytes([0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]);\nassert_eq!(value, 0x1234567890123456);\n```\n\nWhen starting from a slice rather than an array, fallible conversion APIs can be used:\n\n```\nfn read_le_u64(input: &mut &[u8]) -> u64 {\n    let (int_bytes, rest) = input.split_at(std::mem::size_of::<u64>());\n    *input = rest;\n    u64::from_le_bytes(int_bytes.try_into().unwrap())\n}\n```","links":{},"attrs":["#[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]","#[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["bytes",{"kind":"array","inner":{"type":{"kind":"primitive","inner":"u8"},"len":"8"}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3816:1564":{"id":"0:3816:1564","crate_id":0,"name":"Arg","span":{"filename":"src/builder/arg.rs","begin":[61,0],"end":[101,1]},"visibility":"public","docs":"The abstract representation of a command line argument. Used to set all the options and\nrelationships that define a valid argument for the program.\n\nThere are two methods for constructing [`Arg`]s, using the builder pattern and setting options\nmanually, or using a usage string which is far less verbose but has fewer options. You can also\nuse a combination of the two methods to achieve the best of both worlds.\n\n- [Basic API][crate::Arg#basic-api]\n- [Value Handling][crate::Arg#value-handling]\n- [Help][crate::Arg#help-1]\n- [Advanced Argument Relations][crate::Arg#advanced-argument-relations]\n- [Reflection][crate::Arg#reflection]\n\n# Examples\n\n```rust\n# use clap::{Arg, arg};\n// Using the traditional builder pattern and setting each option manually\nlet cfg = Arg::new(\"config\")\n      .short('c')\n      .long(\"config\")\n      .takes_value(true)\n      .value_name(\"FILE\")\n      .help(\"Provides a config file to myprog\");\n// Using a usage string (setting a similar argument to the one above)\nlet input = arg!(-i --input <FILE> \"Provides an input file to the program\");\n```","links":{"crate::Arg#reflection":"0:3816:1564","`Arg`":"0:3816:1564","crate::Arg#help-1":"0:3816:1564","crate::Arg#advanced-argument-relations":"0:3816:1564","crate::Arg#value-handling":"0:3816:1564","crate::Arg#basic-api":"0:3816:1564"},"attrs":["#[allow(missing_debug_implementations)]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["0:312","0:349","0:404","0:419","0:464","0:520","0:545","a:2:9222:7159-0:3816:1564","a:2:3252:209-0:3816:1564","a:2:3240:200-0:3816:1564","a:2:9223:7158-0:3816:1564","a:2:3281:5920-0:3816:1564","b:2:2843-0:3816:1564","b:2:3169-0:3816:1564","b:2:3173-0:3816:1564","b:2:3184-0:3816:1564","b:2:3969-0:3816:1564","b:2:2846-0:3816:1564","b:2:3179-0:3816:1564","b:5:6406-0:3816:1564","b:5:787-0:3816:1564","b:23:25-0:3816:1564","0:3855","0:3858","0:557","0:560","0:563","0:566","0:569","0:571","0:575"]}},"0:4001:2828":{"id":"0:4001:2828","crate_id":0,"name":"Last","span":{"filename":"src/builder/arg_settings.rs","begin":[183,4],"end":[183,8]},"visibility":"default","docs":"Deprecated, replaced with [`Arg::last`] and [`Arg::is_last_set`]","links":{"`Arg::is_last_set`":"0:3816:1564","`Arg::last`":"0:3816:1564"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:3333":{"id":"0:3333","crate_id":0,"name":null,"span":{"filename":"src/util/color.rs","begin":[58,0],"end":[62,1]},"visibility":{"restricted":{"parent":"0:3332:1529","path":"::util::color"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Default","id":"2:3218:115","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:5071:1570","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:3334:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:8367:151":{"id":"2:8367:151","crate_id":2,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8368:2018","2:8369:7522","2:8370:755"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:3281:5920-0:4444:2163":{"id":"a:2:3281:5920-0:4444:2163","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3281:5920","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3281:5920","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"RangedU64ValueParser","id":"0:4444:2163","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:3249:206":{"id":"2:3249:206","crate_id":2,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:868:2829":{"id":"0:868:2829","crate_id":0,"name":"unset_setting","span":{"filename":"src/builder/command.rs","begin":[1807,4],"end":[1813,5]},"visibility":"public","docs":"Remove a setting for the current command or subcommand.\n\nSee [`AppSettings`] for a full list of possibilities and examples.\n\n# Examples\n\n```no_run\n# use clap::{Command, AppSettings};\nCommand::new(\"myprog\")\n    .unset_setting(AppSettings::SubcommandRequired)\n    .setting(AppSettings::AllowLeadingHyphen)\n# ;\n```\nor\n```no_run\n# use clap::{Command, AppSettings};\nCommand::new(\"myprog\")\n    .unset_setting(AppSettings::SubcommandRequired | AppSettings::AllowLeadingHyphen)\n# ;\n```","links":{"`AppSettings`":"0:3386:1579"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["setting",{"kind":"generic","inner":"F"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"AppFlags","id":"0:3371:1578","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:782:1909":{"id":"0:782:1909","crate_id":0,"name":"subcommand","span":{"filename":"src/builder/command.rs","begin":[415,4],"end":[418,5]},"visibility":"public","docs":"Adds a subcommand to the list of valid possibilities.\n\nSubcommands are effectively sub-[`Command`]s, because they can contain their own arguments,\nsubcommands, version, usage, etc. They also function just like [`Command`]s, in that they get\ntheir own auto generated help, version, and usage.\n\nA subcommand's [`Command::name`] will be used for:\n- The argument the user passes in\n- Programmatically looking up the subcommand\n\n# Examples\n\n```no_run\n# use clap::{Command, arg};\nCommand::new(\"myprog\")\n    .subcommand(Command::new(\"config\")\n        .about(\"Controls configuration features\")\n        .arg(arg!(\"<config> 'Required configuration file to use'\")))\n# ;\n```","links":{"`Command`":"0:755:1563","`Command::name`":"0:4244:1577"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["subcmd",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"App","id":"0:4244:1577","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:864:5029":{"id":"0:864:5029","crate_id":0,"name":"help_template","span":{"filename":"src/builder/command.rs","begin":[1748,4],"end":[1751,5]},"visibility":"public","docs":"Sets the help template to be used, overriding the default format.\n\n**NOTE:** The template system is by design very simple. Therefore, the\ntags have to be written in the lowercase and without spacing.\n\nTags are given inside curly brackets.\n\nValid tags are:\n\n  * `{name}`                - Display name for the (sub-)command.\n  * `{bin}`                 - Binary name.\n  * `{version}`             - Version number.\n  * `{author}`              - Author information.\n  * `{author-with-newline}` - Author followed by `\\n`.\n  * `{author-section}`      - Author preceded and followed by `\\n`.\n  * `{about}`               - General description (from [`Command::about`] or\n                              [`Command::long_about`]).\n  * `{about-with-newline}`  - About followed by `\\n`.\n  * `{about-section}`       - About preceded and followed by '\\n'.\n  * `{usage-heading}`       - Automatically generated usage heading.\n  * `{usage}`               - Automatically generated or given usage string.\n  * `{all-args}`            - Help for all arguments (options, flags, positional\n                              arguments, and subcommands) including titles.\n  * `{options}`             - Help for options.\n  * `{positionals}`         - Help for positional arguments.\n  * `{subcommands}`         - Help for subcommands.\n  * `{after-help}`          - Help from [`App::after_help`] or [`Command::after_long_help`].\n  * `{before-help}`         - Help from [`App::before_help`] or [`Command::before_long_help`].\n\n# Examples\n\n```no_run\n# use clap::Command;\nCommand::new(\"myprog\")\n    .version(\"1.0\")\n    .help_template(\"{bin} ({version}) - {usage}\")\n# ;\n```\n[`App::about`]: Command::about()\n[`App::long_about`]: Command::long_about()\n[`App::after_help`]: Command::after_help()\n[`App::after_long_help`]: Command::after_long_help()\n[`App::before_help`]: Command::before_help()\n[`App::before_long_help`]: Command::before_long_help()","links":{"Command::before_help()":"0:4244:1577","`Command::about`":"0:4244:1577","`Command::before_long_help`":"0:4244:1577","`Command::long_about`":"0:4244:1577","Command::after_help()":"0:4244:1577","`Command::after_long_help`":"0:4244:1577"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["s",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4396:397":{"id":"0:4396:397","crate_id":0,"name":"clone","span":{"filename":"src/builder/value_hint.rs","begin":[27,43],"end":[27,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:4356:1583","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:22961:16158":{"id":"2:22961:16158","crate_id":2,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:22962:14765","2:22963:16253","2:22964:16254"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22954:10621","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"a:2:3240:200-0:3970:1581":{"id":"a:2:3240:200-0:3970:1581","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3240:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgSettings","id":"0:3970:1581","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:3252:209-0:4686:7087":{"id":"a:2:3252:209-0:4686:7087","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3252:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4686:7087","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:2192:7400":{"id":"0:2192:7400","crate_id":0,"name":"index_of","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[758,4],"end":[762,5]},"visibility":"public","docs":"The first index of that an argument showed up.\n\nIndices are similar to argv indices, but are not exactly 1:1.\n\nFor flags (i.e. those arguments which don't have an associated value), indices refer\nto occurrence of the switch, such as `-f`, or `--flag`. However, for options the indices\nrefer to the *values* `-o val` would therefore not represent two distinct indices, only the\nindex for `val` would be recorded. This is by design.\n\nBesides the flag/option discrepancy, the primary difference between an argv index and clap\nindex, is that clap continues counting once all arguments have properly separated, whereas\nan argv index does not.\n\nThe examples should clear this up.\n\n*NOTE:* If an argument is allowed multiple times, this method will only give the *first*\nindex.  See [`ArgMatches::indices_of`].\n\n# Panics\n\nIf `id` is is not a valid argument or group id.\n\n# Examples\n\nThe argv indices are listed in the comments below. See how they correspond to the clap\nindices. Note that if it's not listed in a clap index, this is because it's not saved in\nin an `ArgMatches` struct for querying.\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"myapp\")\n    .arg(Arg::new(\"flag\")\n        .short('f'))\n    .arg(Arg::new(\"option\")\n        .short('o')\n        .takes_value(true))\n    .get_matches_from(vec![\"myapp\", \"-f\", \"-o\", \"val\"]);\n           // ARGV indices: ^0       ^1    ^2    ^3\n           // clap indices:          ^1          ^3\n\nassert_eq!(m.index_of(\"flag\"), Some(1));\nassert_eq!(m.index_of(\"option\"), Some(3));\n```\n\nNow notice, if we use one of the other styles of options:\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"myapp\")\n    .arg(Arg::new(\"flag\")\n        .short('f'))\n    .arg(Arg::new(\"option\")\n        .short('o')\n        .takes_value(true))\n    .get_matches_from(vec![\"myapp\", \"-f\", \"-o=val\"]);\n           // ARGV indices: ^0       ^1    ^2\n           // clap indices:          ^1       ^3\n\nassert_eq!(m.index_of(\"flag\"), Some(1));\nassert_eq!(m.index_of(\"option\"), Some(3));\n```\n\nThings become much more complicated, or clear if we look at a more complex combination of\nflags. Let's also throw in the final option style for good measure.\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"myapp\")\n    .arg(Arg::new(\"flag\")\n        .short('f'))\n    .arg(Arg::new(\"flag2\")\n        .short('F'))\n    .arg(Arg::new(\"flag3\")\n        .short('z'))\n    .arg(Arg::new(\"option\")\n        .short('o')\n        .takes_value(true))\n    .get_matches_from(vec![\"myapp\", \"-fzF\", \"-oval\"]);\n           // ARGV indices: ^0      ^1       ^2\n           // clap indices:         ^1,2,3    ^5\n           //\n           // clap sees the above as 'myapp -f -z -F -o val'\n           //                         ^0    ^1 ^2 ^3 ^4 ^5\nassert_eq!(m.index_of(\"flag\"), Some(1));\nassert_eq!(m.index_of(\"flag2\"), Some(3));\nassert_eq!(m.index_of(\"flag3\"), Some(2));\nassert_eq!(m.index_of(\"option\"), Some(5));\n```\n\nOne final combination of flags/options to see how they combine:\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"myapp\")\n    .arg(Arg::new(\"flag\")\n        .short('f'))\n    .arg(Arg::new(\"flag2\")\n        .short('F'))\n    .arg(Arg::new(\"flag3\")\n        .short('z'))\n    .arg(Arg::new(\"option\")\n        .short('o')\n        .takes_value(true))\n    .get_matches_from(vec![\"myapp\", \"-fzFoval\"]);\n           // ARGV indices: ^0       ^1\n           // clap indices:          ^1,2,3^5\n           //\n           // clap sees the above as 'myapp -f -z -F -o val'\n           //                         ^0    ^1 ^2 ^3 ^4 ^5\nassert_eq!(m.index_of(\"flag\"), Some(1));\nassert_eq!(m.index_of(\"flag2\"), Some(3));\nassert_eq!(m.index_of(\"flag3\"), Some(2));\nassert_eq!(m.index_of(\"option\"), Some(5));\n```\n\nThe last part to mention is when values are sent in multiple groups with a [delimiter].\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"myapp\")\n    .arg(Arg::new(\"option\")\n        .short('o')\n        .use_value_delimiter(true)\n        .multiple_values(true))\n    .get_matches_from(vec![\"myapp\", \"-o=val1,val2,val3\"]);\n           // ARGV indices: ^0       ^1\n           // clap indices:             ^2   ^3   ^4\n           //\n           // clap sees the above as 'myapp -o val1 val2 val3'\n           //                         ^0    ^1 ^2   ^3   ^4\nassert_eq!(m.index_of(\"option\"), Some(2));\nassert_eq!(m.indices_of(\"option\").unwrap().collect::<Vec<_>>(), &[2, 3, 4]);\n```\n[delimiter]: crate::Arg::value_delimiter()","links":{"`ArgMatches::indices_of`":"0:4706:1568","crate::Arg::value_delimiter()":"0:3816:1564"},"attrs":["#[track_caller]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Key","id":"0:3235:2593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2843-0:4763:7085":{"id":"b:2:2843-0:4763:7085","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2837:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"RawValues","id":"0:4763:7085","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:2845:2590"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1366:3153":{"id":"0:1366:3153","crate_id":0,"name":"possible_values","span":{"filename":"src/builder/value_parser.rs","begin":[635,4],"end":[639,5]},"visibility":"default","docs":"Reflect on enumerated value properties\n\nError checking should not be done with this; it is mostly targeted at user-facing\napplications like errors and completion.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2146","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8565:157","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"resolved_path","inner":{"name":"crate::PossibleValue","id":"0:4298:1582","args":{"angle_bracketed":{"args":[{"lifetime":"'static"}],"bindings":[]}},"param_names":[]}}}}}]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2846-0:4474:2175":{"id":"b:2:2846-0:4474:2175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2840:8484","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"NonEmptyStringValueParser","id":"0:4474:2175","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2848:21287"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2846-0:4750:7086":{"id":"b:2:2846-0:4750:7086","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2840:8484","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValuesRef","id":"0:4750:7086","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["2:2848:21287"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:3252:209-0:4415:2173":{"id":"a:2:3252:209-0:4415:2173","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3252:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"EnumValueParser","id":"0:4415:2173","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3369:648":{"id":"0:3369:648","crate_id":0,"name":"fmt","span":{"filename":"src/builder/action.rs","begin":[23,16],"end":[23,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10215:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10204:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4526:6796":{"id":"0:4526:6796","crate_id":0,"name":"ActualNumValues","span":{"filename":"src/error/context.rs","begin":[16,4],"end":[16,19]},"visibility":"default","docs":"Number of values present","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:31758:68494":{"id":"2:31758:68494","crate_id":2,"name":"checked_div","span":null,"visibility":"public","docs":"Checked integer division. Computes `self / rhs`, returning `None`\nif `rhs == 0`.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(128u64.checked_div(2), Some(64));\nassert_eq!(1u64.checked_div(0), None);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_checked_int_div\", since = \"1.52.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:23:25-0:3903:1565":{"id":"b:23:25-0:3903:1565","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.8.1/src/equivalent.rs","begin":[18,0],"end":[18,46]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2897:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2837:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Q"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Equivalent","id":"23:22:8796","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3903:1565","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["23:28:8790"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"Q"}}},"b:5:787-0:3816:1564":{"id":"b:5:787-0:3816:1564","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:783:211","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3816:1564","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["5:789:4115","5:790:4707","5:791:9628"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3173-0:4462:2174":{"id":"b:2:3173-0:4462:2174","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FalseyValueParser","id":"0:4462:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3175:669"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:401:3407":{"id":"0:401:3407","crate_id":0,"name":"default_missing_values","span":{"filename":"src/builder/arg.rs","begin":[2324,4],"end":[2327,5]},"visibility":"public","docs":"Value for the argument when the flag is present but no value is specified.\n\nSee [`Arg::default_missing_value`].\n\n[`Arg::default_missing_value`]: Arg::default_missing_value()","links":{"Arg::default_missing_value()":"0:3816:1564"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["vals",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1501:6352":{"id":"0:1501:6352","crate_id":0,"name":"parse_ref","span":{"filename":"src/builder/value_parser.rs","begin":[1472,4],"end":[1497,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["cmd",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Command","id":"0:755:1563","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}],["arg",{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Arg","id":"0:3816:1564","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["value",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"std::ffi::OsStr","id":"1:2923:169","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Value","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:1362:2165","args":null,"param_names":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"crate::Error","id":"0:4640:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:182":{"id":"0:182","crate_id":0,"name":null,"span":{"filename":"src/derive.rs","begin":[510,0],"end":[534,1]},"visibility":{"restricted":{"parent":"0:110:536","path":"::derive"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Parser","id":"0:127:1574","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["from_iter","clap","parse_from","try_parse","update_from","try_parse_from","parse","from_clap","try_update_from","from_args_safe","from_args","from_iter_safe"],"trait":{"kind":"resolved_path","inner":{"name":"Parser","id":"0:127:1574","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["0:184:2002","0:185:2011","0:186:2014","0:189:2021"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:419":{"id":"0:419","crate_id":0,"name":null,"span":{"filename":"src/builder/arg.rs","begin":[3055,0],"end":[4251,1]},"visibility":{"restricted":{"parent":"0:242:1829","path":"::builder::arg"}},"docs":"# Advanced Argument Relations","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3816:1564","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["0:421:1908","0:423:2619","0:425:3660","0:427:3661","0:429:3678","0:431:3683","0:433:3694","0:435:3712","0:438:3727","0:441:3739","0:443:3762","0:446:3772","0:449:3789","0:451:3804","0:454:3818","0:457:3833","0:459:3844","0:460:3909","0:462:3921"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:3252:209-0:4356:1583":{"id":"a:2:3252:209-0:4356:1583","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3252:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:4356:1583","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4356:1583":{"id":"0:4356:1583","crate_id":0,"name":"ValueHint","span":{"filename":"src/builder/value_hint.rs","begin":[29,0],"end":[67,1]},"visibility":"public","docs":"Provide shell with hint on how to complete an argument.\n\nSee [Arg::value_hint][crate::Arg::value_hint] to set this on an argument.\n\nSee the `clap_complete` crate for completion script generation.\n\nOverview of which hints are supported by which shell:\n\n| Hint                   | zsh | fish[^1]|\n| ---------------------- | --- | ------- |\n| `AnyPath`              | Yes | Yes     |\n| `FilePath`             | Yes | Yes     |\n| `DirPath`              | Yes | Yes     |\n| `ExecutablePath`       | Yes | Partial |\n| `CommandName`          | Yes | Yes     |\n| `CommandString`        | Yes | Partial |\n| `CommandWithArguments` | Yes |         |\n| `Username`             | Yes | Yes     |\n| `Hostname`             | Yes | Yes     |\n| `Url`                  | Yes |         |\n| `EmailAddress`         | Yes |         |\n\n[^1]: fish completions currently only support named arguments (e.g. -o or --opt), not\n      positional arguments.","links":{"crate::Arg::value_hint":"0:3816:1564"},"attrs":["#[non_exhaustive]"],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:4357:221","0:4359:6239","0:4361:3969","0:4363:6242","0:4365:6244","0:4367:6246","0:4369:6248","0:4371:6250","0:4373:6259","0:4375:6261","0:4377:6264","0:4379:6266","0:4381:6268"],"impls":["a:2:9222:7159-0:4356:1583","a:2:3252:209-0:4356:1583","a:2:3240:200-0:4356:1583","a:2:9223:7158-0:4356:1583","a:2:3281:5920-0:4356:1583","b:2:2843-0:4356:1583","b:2:3169-0:4356:1583","b:2:3173-0:4356:1583","b:2:3184-0:4356:1583","b:2:3969-0:4356:1583","b:2:2846-0:4356:1583","b:2:3179-0:4356:1583","b:5:787-0:4356:1583","b:23:25-0:4356:1583","0:4383","0:4385","0:4386","0:4388","0:4389","0:4391","0:4394","0:4395","0:1276","0:1278"]}},"0:4009:3607":{"id":"0:4009:3607","crate_id":0,"name":"HiddenShortHelp","span":{"filename":"src/builder/arg_settings.rs","begin":[240,4],"end":[240,19]},"visibility":"default","docs":"Deprecated, replaced with [`Arg::hide_short_help`] and [`Arg::is_hide_short_help_set`]","links":{"`Arg::hide_short_help`":"0:3816:1564","`Arg::is_hide_short_help_set`":"0:3816:1564"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"b:2:2846-0:4773:1588":{"id":"b:2:2846-0:4773:1588","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2840:8484","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:4773:1588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:2848:21287"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13478:2002":{"id":"2:13478:2002","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12936:1756","`FromStr`":"2:12936:1756"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12936:1756","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12936:1756","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:394:2286":{"id":"0:394:2286","crate_id":0,"name":"default_value","span":{"filename":"src/builder/arg.rs","begin":[2169,4],"end":[2171,5]},"visibility":"public","docs":"Value for the argument when not present.\n\n**NOTE:** If the user *does not* use this argument at runtime, [`ArgMatches::occurrences_of`]\nwill return `0` even though the [`ArgMatches::value_of`] will return the default specified.\n\n**NOTE:** If the user *does not* use this argument at runtime [`ArgMatches::contains_id`] will\nstill return `true`. If you wish to determine whether the argument was used at runtime or\nnot, consider [`ArgMatches::value_source`][crate::ArgMatches::value_source].\n\n**NOTE:** This setting is perfectly compatible with [`Arg::default_value_if`] but slightly\ndifferent. `Arg::default_value` *only* takes effect when the user has not provided this arg\nat runtime. `Arg::default_value_if` however only takes effect when the user has not provided\na value at runtime **and** these other conditions are met as well. If you have set\n`Arg::default_value` and `Arg::default_value_if`, and the user **did not** provide this arg\nat runtime, nor were the conditions met for `Arg::default_value_if`, the `Arg::default_value`\nwill be applied.\n\n**NOTE:** This implicitly sets [`Arg::takes_value(true)`].\n\n# Examples\n\nFirst we use the default value without providing any value at runtime.\n\n```rust\n# use clap::{Command, Arg, ValueSource};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"opt\")\n        .long(\"myopt\")\n        .default_value(\"myval\"))\n    .get_matches_from(vec![\n        \"prog\"\n    ]);\n\nassert_eq!(m.value_of(\"opt\"), Some(\"myval\"));\nassert!(m.contains_id(\"opt\"));\nassert_eq!(m.value_source(\"opt\"), Some(ValueSource::DefaultValue));\n```\n\nNext we provide a value at runtime to override the default.\n\n```rust\n# use clap::{Command, Arg, ValueSource};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"opt\")\n        .long(\"myopt\")\n        .default_value(\"myval\"))\n    .get_matches_from(vec![\n        \"prog\", \"--myopt=non_default\"\n    ]);\n\nassert_eq!(m.value_of(\"opt\"), Some(\"non_default\"));\nassert!(m.contains_id(\"opt\"));\nassert_eq!(m.value_source(\"opt\"), Some(ValueSource::CommandLine));\n```\n[`ArgMatches::occurrences_of`]: crate::ArgMatches::occurrences_of()\n[`ArgMatches::value_of`]: crate::ArgMatches::value_of()\n[`Arg::takes_value(true)`]: Arg::takes_value()\n[`ArgMatches::contains_id`]: crate::ArgMatches::contains_id()\n[`Arg::default_value_if`]: Arg::default_value_if()","links":{"Arg::takes_value()":"0:3816:1564","crate::ArgMatches::occurrences_of()":"0:4706:1568","crate::ArgMatches::value_source":"0:4706:1568","crate::ArgMatches::value_of()":"0:4706:1568","crate::ArgMatches::contains_id()":"0:4706:1568","Arg::default_value_if()":"0:3816:1564"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["val",{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4769:397":{"id":"0:4769:397","crate_id":0,"name":"clone","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1460,9],"end":[1460,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"RawValues","id":"0:4763:7085","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4552:397":{"id":"0:4552:397","crate_id":0,"name":"clone","span":{"filename":"src/error/context.rs","begin":[2,15],"end":[2,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:4515:6699","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3252:209-0:3386:1579":{"id":"a:2:3252:209-0:3386:1579","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3252:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:3386:1579","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3488":{"id":"0:3488","crate_id":0,"name":null,"span":{"filename":"src/builder/app_settings.rs","begin":[32,27],"end":[32,31]},"visibility":{"restricted":{"parent":"0:227:2151","path":"::builder::app_settings"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3250:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:3386:1579","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3173-0:4750:7086":{"id":"b:2:3173-0:4750:7086","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValuesRef","id":"0:4750:7086","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["2:3175:669"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:359:1842":{"id":"0:359:1842","crate_id":0,"name":"value_name","span":{"filename":"src/builder/arg.rs","begin":[1420,4],"end":[1422,5]},"visibility":"public","docs":"Placeholder for the argument's value in the help message / usage.\n\nThis name is cosmetic only; the name is **not** used to access arguments.\nThis setting can be very helpful when describing the type of input the user should be\nusing, such as `FILE`, `INTERFACE`, etc. Although not required, it's somewhat convention to\nuse all capital letters for the value name.\n\n**NOTE:** implicitly sets [`Arg::takes_value(true)`]\n\n# Examples\n\n```rust\n# use clap::{Command, Arg};\nArg::new(\"cfg\")\n    .long(\"config\")\n    .value_name(\"FILE\")\n# ;\n```\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"config\")\n        .long(\"config\")\n        .value_name(\"FILE\")\n        .help(\"Some help text\"))\n    .get_matches_from(vec![\n        \"prog\", \"--help\"\n    ]);\n```\nRunning the above program produces the following output\n\n```text\nvalnames\n\nUSAGE:\n   valnames [OPTIONS]\n\nOPTIONS:\n    --config <FILE>     Some help text\n    -h, --help          Print help information\n    -V, --version       Print version information\n```\n[option]: Arg::takes_value()\n[positional]: Arg::index()\n[`Arg::takes_value(true)`]: Arg::takes_value()","links":{"Arg::takes_value()":"0:3816:1564"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["name",{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4546:4475":{"id":"0:4546:4475","crate_id":0,"name":"Usage","span":{"filename":"src/error/context.rs","begin":[36,4],"end":[36,9]},"visibility":"default","docs":"A usage string","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:788:1566":{"id":"0:788:1566","crate_id":0,"name":"error","span":{"filename":"src/builder/command.rs","begin":[490,4],"end":[492,5]},"visibility":"public","docs":"Custom error message for post-parsing validation\n\n# Examples\n\n```rust\n# use clap::{Command, ErrorKind};\nlet mut cmd = Command::new(\"myprog\");\nlet err = cmd.error(ErrorKind::InvalidValue, \"Some failure case\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["kind",{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4587:1584","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}],["message",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"std::fmt::Display","id":"2:10262:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4640:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"impl std::fmt::Display","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"std::fmt::Display","id":"2:10262:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:31800:68527":{"id":"2:31800:68527","crate_id":2,"name":"overflowing_div_euclid","span":null,"visibility":"public","docs":"Calculates the quotient of Euclidean division `self.div_euclid(rhs)`.\n\nReturns a tuple of the divisor along with a boolean indicating\nwhether an arithmetic overflow would occur. Note that for unsigned\nintegers overflow never occurs, so the second value is always\n`false`.\nSince, for the positive integers, all common\ndefinitions of division are equal, this\nis exactly equal to `self.overflowing_div(rhs)`.\n\n# Panics\n\nThis function will panic if `rhs` is 0.\n\n# Examples\n\nBasic usage\n\n```\nassert_eq!(5u64.overflowing_div_euclid(2), (2, false));\n```","links":{},"attrs":["#[stable(feature = \"euclidean_division\", since = \"1.38.0\")]","#[rustc_const_stable(feature = \"const_euclidean_int_methods\", since =\n\"1.52.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"u64"},{"kind":"primitive","inner":"bool"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4805":{"id":"0:4805","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1653,9],"end":[1653,14]},"visibility":{"restricted":{"parent":"0:2077:7161","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:4801:1585","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["0:4807:397"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4307":{"id":"0:4307","crate_id":0,"name":null,"span":{"filename":"src/builder/possible_value.rs","begin":[29,16],"end":[29,23]},"visibility":{"restricted":{"parent":"0:1203:2155","path":"::builder::possible_value"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Default","id":"2:3218:115","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:4298:1582","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["0:4309:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1238:669":{"id":"0:1238:669","crate_id":0,"name":"from","span":{"filename":"src/builder/possible_value.rs","begin":[250,4],"end":[252,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["s",{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3969-0:4587:1584":{"id":"b:2:3969-0:4587:1584","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3967:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4587:1584","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3971:1408"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3969-0:4403:2176":{"id":"b:2:3969-0:4403:2176","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3967:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OsStringValueParser","id":"0:4403:2176","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3971:1408"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:956:4720":{"id":"0:956:4720","crate_id":0,"name":"get_color","span":{"filename":"src/builder/command.rs","begin":[3411,4],"end":[3429,5]},"visibility":"public","docs":"Should we color the output?","links":{},"attrs":["#[inline(never)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:5071:1570","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1495":{"id":"0:1495","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1455,0],"end":[1467,1]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"BoolValueParser","id":"0:4456:2171","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:1496:907"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:2339:7523":{"id":"0:2339:7523","crate_id":0,"name":"next_back","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1671,4],"end":[1673,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4628:6879":{"id":"0:4628:6879","crate_id":0,"name":"Io","span":{"filename":"src/error/kind.rs","begin":[388,4],"end":[388,6]},"visibility":"default","docs":"Represents an [I/O error].\nCan occur when writing to `stderr` or `stdout` or reading a configuration file.\n\n[I/O error]: std::io::Error","links":{"std::io::Error":"1:4028:127"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"1:6543:10654":{"id":"1:6543:10654","crate_id":1,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6544:21432","1:6545:21433"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5771:10645":{"id":"1:5771:10645","crate_id":1,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5772:21402"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:2843-0:4415:2173":{"id":"b:2:2843-0:4415:2173","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2837:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"EnumValueParser","id":"0:4415:2173","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}},"items":["2:2845:2590"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:6404:212":{"id":"5:6404:212","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6405:1376"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1915:669":{"id":"0:1915:669","crate_id":0,"name":"from","span":{"filename":"src/error/mod.rs","begin":[989,4],"end":[991,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["e",{"kind":"resolved_path","inner":{"name":"io::Error","id":"1:4028:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4778":{"id":"0:4778","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1507,9],"end":[1507,14]},"visibility":{"restricted":{"parent":"0:2077:7161","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:4773:1588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["0:4780:397"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:8411:120":{"id":"2:8411:120","crate_id":2,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8412:7523","2:8413:9589","2:8414:9590","2:8415:9591","2:8419:9592","2:8422:9593"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8565:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13362:1813":{"id":"2:13362:1813","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1574:1574":{"id":"0:1574:1574","crate_id":0,"name":"Parser","span":{"filename":"src/builder/value_parser.rs","begin":[1889,4],"end":[1889,44]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:4432:2162","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i32"}}],"bindings":[]}},"param_names":[]}}}},"a:2:3281:5920-0:4462:2174":{"id":"a:2:3281:5920-0:4462:2174","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3281:5920","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FalseyValueParser","id":"0:4462:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1396":{"id":"0:1396","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[775,0],"end":[803,1]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["possible_values","parse"],"trait":{"kind":"resolved_path","inner":{"name":"TypedValueParser","id":"0:1362:2165","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"PathBufValueParser","id":"0:4409:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:1397:6312","0:1398:6352","0:1399:2002"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:429:3678":{"id":"0:429:3678","crate_id":0,"name":"default_value_ifs","span":{"filename":"src/builder/arg.rs","begin":[3345,4],"end":[3353,5]},"visibility":"public","docs":"Specifies multiple values and conditions in the same manner as [`Arg::default_value_if`].\n\nThe method takes a slice of tuples in the `(arg, Option<val>, default)` format.\n\n**NOTE**: The conditions are stored in order and evaluated in the same order. I.e. the first\nif multiple conditions are true, the first one found will be applied and the ultimate value.\n\n# Examples\n\nFirst we use the default value only if another arg is present at runtime.\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"flag\")\n        .long(\"flag\"))\n    .arg(Arg::new(\"opt\")\n        .long(\"opt\")\n        .takes_value(true))\n    .arg(Arg::new(\"other\")\n        .long(\"other\")\n        .default_value_ifs(&[\n            (\"flag\", None, Some(\"default\")),\n            (\"opt\", Some(\"channal\"), Some(\"chan\")),\n        ]))\n    .get_matches_from(vec![\n        \"prog\", \"--opt\", \"channal\"\n    ]);\n\nassert_eq!(m.value_of(\"other\"), Some(\"chan\"));\n```\n\nNext we run the same test, but without providing `--flag`.\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"flag\")\n        .long(\"flag\"))\n    .arg(Arg::new(\"other\")\n        .long(\"other\")\n        .default_value_ifs(&[\n            (\"flag\", None, Some(\"default\")),\n            (\"opt\", Some(\"channal\"), Some(\"chan\")),\n        ]))\n    .get_matches_from(vec![\n        \"prog\"\n    ]);\n\nassert_eq!(m.value_of(\"other\"), None);\n```\n\nWe can also see that these values are applied in order, and if more than one condition is\ntrue, only the first evaluated \"wins\"\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"flag\")\n        .long(\"flag\"))\n    .arg(Arg::new(\"opt\")\n        .long(\"opt\")\n        .takes_value(true))\n    .arg(Arg::new(\"other\")\n        .long(\"other\")\n        .default_value_ifs(&[\n            (\"flag\", None, Some(\"default\")),\n            (\"opt\", Some(\"channal\"), Some(\"chan\")),\n        ]))\n    .get_matches_from(vec![\n        \"prog\", \"--opt\", \"channal\", \"--flag\"\n    ]);\n\nassert_eq!(m.value_of(\"other\"), Some(\"default\"));\n```\n[`Arg::takes_value(true)`]: Arg::takes_value()\n[`Arg::default_value_if`]: Arg::default_value_if()","links":{"Arg::default_value_if()":"0:3816:1564"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["ifs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"tuple","inner":[{"kind":"generic","inner":"T"},{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}}]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Key","id":"0:3235:2593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3184-0:4587:1584":{"id":"b:2:3184-0:4587:1584","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4587:1584","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3187:127","2:3188:1394"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4643:6711":{"id":"0:4643:6711","crate_id":0,"name":"info","span":{"filename":"src/error/mod.rs","begin":[53,4],"end":[53,25]},"visibility":"public","docs":"Deprecated, replaced with [`Error::context()`]","links":{"`Error::context()`":"0:4640:127"},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7764:223","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}},"b:2:3969-0:4561:6700":{"id":"b:2:3969-0:4561:6700","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3967:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ContextValue","id":"0:4561:6700","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3971:1408"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3427:2398":{"id":"0:3427:2398","crate_id":0,"name":"DeriveDisplayOrder","span":{"filename":"src/builder/app_settings.rs","begin":[278,4],"end":[278,22]},"visibility":"default","docs":"Displays the arguments and [`subcommands`] in the help message in the order that they were\ndeclared in, and not alphabetically which is the default.\n\nTo override the declaration order, see [`Arg::display_order`] and [`Command::display_order`].\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg, AppSettings};\nCommand::new(\"myprog\")\n    .global_setting(AppSettings::DeriveDisplayOrder)\n    .get_matches();\n```\n\n[`subcommands`]: crate::Command::subcommand()\n[`Arg::display_order`]: crate::Arg::display_order\n[`Command::display_order`]: crate::Command::display_order","links":{"crate::Command::display_order":"0:4244:1577","crate::Command::subcommand()":"0:4244:1577","crate::Arg::display_order":"0:3816:1564"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:4369:6248":{"id":"0:4369:6248","crate_id":0,"name":"CommandName","span":{"filename":"src/builder/value_hint.rs","begin":[44,4],"end":[44,15]},"visibility":"default","docs":"Name of a command, without arguments. May be relative to PATH, or full path to executable.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:23655:11004":{"id":"2:23655:11004","crate_id":2,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:23656:11026"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23651:10621","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3250:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3218:115":{"id":"2:3218:115","crate_id":2,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3219:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:507:3973":{"id":"0:507:3973","crate_id":0,"name":"is_global_set","span":{"filename":"src/builder/arg.rs","begin":[4597,4],"end":[4599,5]},"visibility":"public","docs":"Report whether [`Arg::global`] is set","links":{"`Arg::global`":"0:3816:1564"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1536":{"id":"0:1536","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1747,0],"end":[1772,1]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["possible_values","parse"],"trait":{"kind":"resolved_path","inner":{"name":"TypedValueParser","id":"0:1362:2165","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"NonEmptyStringValueParser","id":"0:4474:2175","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:1537:6312","0:1538:6352"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:345:1907":{"id":"0:345:1907","crate_id":0,"name":"setting","span":{"filename":"src/builder/arg.rs","begin":[852,4],"end":[858,5]},"visibility":"public","docs":"Apply a setting to the argument.\n\nSee [`ArgSettings`] for a full list of possibilities and examples.\n\n# Examples\n\n```no_run\n# use clap::{Arg, ArgSettings};\nArg::new(\"config\")\n    .setting(ArgSettings::Required)\n    .setting(ArgSettings::TakesValue)\n# ;\n```\n\n```no_run\n# use clap::{Arg, ArgSettings};\nArg::new(\"config\")\n    .setting(ArgSettings::Required | ArgSettings::TakesValue)\n# ;\n```","links":{"`ArgSettings`":"0:3970:1581"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["setting",{"kind":"generic","inner":"F"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ArgFlags","id":"0:3955:1580","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2340":{"id":"0:2340","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1676,0],"end":[1676,45]},"visibility":{"restricted":{"parent":"0:2077:7161","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["len","is_empty"],"trait":{"kind":"resolved_path","inner":{"name":"ExactSizeIterator","id":"2:8436:7524","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:4801:1585","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5072:1944":{"id":"0:5072:1944","crate_id":0,"name":"Auto","span":{"filename":"src/util/color.rs","begin":[21,4],"end":[21,8]},"visibility":"default","docs":"Enables colored output only when the output is going to a terminal or TTY.\n\n**NOTE:** This is the default behavior of `clap`.\n\n# Platform Specific\n\nThis setting only applies to Unix, Linux, and macOS (i.e. non-Windows platforms).\n\n# Examples\n\n ```no_run\n# use clap::{Command, ColorChoice};\nCommand::new(\"myprog\")\n    .color(ColorChoice::Auto)\n    .get_matches();\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"b:2:3184-0:4686:7087":{"id":"b:2:3184-0:4686:7087","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4686:7087","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3187:127","2:3188:1394"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13487:67043":{"id":"2:13487:67043","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:15839:8315"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:49637:8618","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3281:5920-0:4298:1582":{"id":"a:2:3281:5920-0:4298:1582","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3281:5920","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:4298:1582","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:856:1482":{"id":"0:856:1482","crate_id":0,"name":"version","span":{"filename":"src/builder/command.rs","begin":[1612,4],"end":[1615,5]},"visibility":"public","docs":"Sets the version for the short version (`-V`) and help messages.\n\nIf [`Command::long_version`] is not specified, this message will be displayed for `--version`.\n\n**Pro-tip:** Use `clap`s convenience macro [`crate_version!`] to\nautomatically set your application's version to the same thing as your\ncrate at compile time.\n\n# Examples\n\n```no_run\n# use clap::Command;\nCommand::new(\"myprog\")\n    .version(\"v0.1.24\")\n# ;\n```\n[`crate_version!`]: ./macro.crate_version!.html","links":{"`Command::long_version`":"0:4244:1577"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["ver",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5076:4813":{"id":"0:5076:4813","crate_id":0,"name":"Never","span":{"filename":"src/util/color.rs","begin":[55,4],"end":[55,9]},"visibility":"default","docs":"Disables colored output no matter if the output is going to a terminal/TTY, or not.\n\n# Platform Specific\n\nThis setting only applies to Unix, Linux, and macOS (i.e. non-Windows platforms)\n\n# Examples\n\n ```no_run\n# use clap::{Command, ColorChoice};\nCommand::new(\"myprog\")\n    .color(ColorChoice::Never)\n    .get_matches();\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:1378:907":{"id":"0:1378:907","crate_id":0,"name":"new","span":{"filename":"src/builder/value_parser.rs","begin":[680,4],"end":[682,5]},"visibility":"public","docs":"Implementation for [`ValueParser::string`]","links":{"`ValueParser::string`":"0:1294:2166"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9222:7159-0:4515:6699":{"id":"a:2:9222:7159-0:4515:6699","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9222:7159","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:4515:6699","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2843-0:4515:6699":{"id":"b:2:2843-0:4515:6699","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2837:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:4515:6699","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2845:2590"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1545:2158":{"id":"0:1545:2158","crate_id":0,"name":"value_parser","span":{"filename":"src/builder/value_parser.rs","begin":[1822,4],"end":[1822,38]},"visibility":"default","docs":"Create the specified [`Self::Parser`]","links":{"`Self::Parser`":"0:1544:1574"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"qualified_path","inner":{"name":"Parser","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:1543:2167","args":null,"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1199:648":{"id":"0:1199:648","crate_id":0,"name":"fmt","span":{"filename":"src/builder/command.rs","begin":[5143,4],"end":[5145,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:10215:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:10204:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:8371-0:4763:7085":{"id":"b:2:8371-0:4763:7085","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8565:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8367:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"RawValues","id":"0:4763:7085","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:8373:2018","2:8374:7522","2:8375:755"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"2:13386:10962":{"id":"2:13386:10962","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:15839:8315"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49296:8611","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3240:200-0:4397:2164":{"id":"a:2:3240:200-0:4397:2164","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3240:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"StringValueParser","id":"0:4397:2164","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:2293":{"id":"0:2293","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1534,0],"end":[1534,44]},"visibility":{"restricted":{"parent":"0:2077:7161","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["len","is_empty"],"trait":{"kind":"resolved_path","inner":{"name":"ExactSizeIterator","id":"2:8436:7524","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:4773:1588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4832":{"id":"0:4832","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/value_source.rs","begin":[2,16],"end":[2,21]},"visibility":{"restricted":{"parent":"0:2423:7162","path":"::parser::matches::value_source"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4823:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:4833:397"],"negative":false,"synthetic":false,"blanket_impl":null}},"22:92:12096":{"id":"22:92:12096","crate_id":22,"name":"OsStringBytes","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["22:93:68329","22:94:68330"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"22:114:10621","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:31749:68488":{"id":"2:31749:68488","crate_id":2,"name":"to_be","span":null,"visibility":"public","docs":"Converts `self` to big endian from the target's endianness.\n\nOn big endian this is a no-op. On little endian the bytes are\nswapped.\n\n# Examples\n\nBasic usage:\n\n```\nlet n = 0x1Au64;\n\nif cfg!(target_endian = \"big\") {\n    assert_eq!(n.to_be(), n)\n} else {\n    assert_eq!(n.to_be(), n.swap_bytes())\n}\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3169-0:4706:1568":{"id":"b:2:3169-0:4706:1568","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4706:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3172:2288"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3449:2436":{"id":"0:3449:2436","crate_id":0,"name":"NoBinaryName","span":{"filename":"src/builder/app_settings.rs","begin":[387,4],"end":[387,16]},"visibility":"default","docs":"Deprecated, replaced with [`Command::no_binary_name`]","links":{"`Command::no_binary_name`":"0:4244:1577"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:4406:397":{"id":"0:4406:397","crate_id":0,"name":"clone","span":{"filename":"src/builder/value_parser.rs","begin":[722,15],"end":[722,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"OsStringValueParser","id":"0:4403:2176","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3173-0:4773:1588":{"id":"b:2:3173-0:4773:1588","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:4773:1588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:3175:669"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:565:984":{"id":"0:565:984","crate_id":0,"name":"partial_cmp","span":{"filename":"src/builder/arg.rs","begin":[5081,4],"end":[5083,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Ordering","id":"2:37488:168","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:922:5547":{"id":"0:922:5547","crate_id":0,"name":"set_bin_name","span":{"filename":"src/builder/command.rs","begin":[3282,4],"end":[3284,5]},"visibility":"public","docs":"Set binary name. Uses `&mut self` instead of `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["name",{"kind":"generic","inner":"S"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3459:116":{"id":"2:3459:116","crate_id":2,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3460:210","2:3461:532"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3969-0:4415:2173":{"id":"b:2:3969-0:4415:2173","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3967:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"EnumValueParser","id":"0:4415:2173","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}},"items":["2:3971:1408"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3179-0:4468:2172":{"id":"b:2:3179-0:4468:2172","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3149:217","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BoolishValueParser","id":"0:4468:2172","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3182:127","2:3183:1395"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3355:8456":{"id":"2:3355:8456","crate_id":2,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3357:1090"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:31736:11235":{"id":"2:31736:11235","crate_id":2,"name":"from_str_radix","span":null,"visibility":"public","docs":"Converts a string slice in a given base to an integer.\n\nThe string is expected to be an optional `+` sign\nfollowed by digits.\nLeading and trailing whitespace represent an error.\nDigits are a subset of these characters, depending on `radix`:\n\n* `0-9`\n* `a-z`\n* `A-Z`\n\n# Panics\n\nThis function panics if `radix` is not in the range from 2 to 36.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(u64::from_str_radix(\"A\", 16), Ok(10));\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["radix",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}},{"type":{"kind":"resolved_path","inner":{"name":"ParseIntError","id":"2:24115:11237","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:165:2082":{"id":"0:165:2082","crate_id":0,"name":"update_from_arg_matches","span":{"filename":"src/derive.rs","begin":[359,4],"end":[359,85]},"visibility":"default","docs":"Assign values from `ArgMatches` to `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["matches",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4706:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4640:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:13475:67041":{"id":"2:13475:67041","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:15839:8315","self::pattern":"2:12997:8603"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:8597","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:8597","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:8598","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3969-0:4462:2174":{"id":"b:2:3969-0:4462:2174","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3967:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FalseyValueParser","id":"0:4462:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3971:1408"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:5:787-0:4462:2174":{"id":"b:5:787-0:4462:2174","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:783:211","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FalseyValueParser","id":"0:4462:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:789:4115","5:790:4707","5:791:9628"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3423:2383":{"id":"0:3423:2383","crate_id":0,"name":"SubcommandPrecedenceOverArg","span":{"filename":"src/builder/app_settings.rs","begin":[248,4],"end":[248,31]},"visibility":"default","docs":"Deprecated, replaced with [`Command::subcommand_precedence_over_arg`] and\n[`Command::is_subcommand_precedence_over_arg_set`]","links":{"`Command::subcommand_precedence_over_arg`":"0:4244:1577","`Command::is_subcommand_precedence_over_arg_set`":"0:4244:1577"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"b:2:3969-0:4823:1587":{"id":"b:2:3969-0:4823:1587","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3967:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4823:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3971:1408"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4292:894":{"id":"0:4292:894","crate_id":0,"name":"ne","span":{"filename":"src/builder/command.rs","begin":[77,23],"end":[77,32]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"App","id":"0:4244:1577","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3453:2440":{"id":"0:3453:2440","crate_id":0,"name":"NoAutoVersion","span":{"filename":"src/builder/app_settings.rs","begin":[401,4],"end":[401,17]},"visibility":"default","docs":"Deprecated, replaced with [`Arg::action`][super::Arg::action]","links":{"super::Arg::action":"0:3816:1564"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:3443:2426":{"id":"0:3443:2426","crate_id":0,"name":"Hidden","span":{"filename":"src/builder/app_settings.rs","begin":[362,4],"end":[362,10]},"visibility":"default","docs":"Deprecated, replaced with [`Command::hide`] and [`Command::is_hide_set`]","links":{"`Command::is_hide_set`":"0:4244:1577","`Command::hide`":"0:4244:1577"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:880:5152":{"id":"0:880:5152","crate_id":0,"name":"allow_negative_numbers","span":{"filename":"src/builder/command.rs","begin":[2095,4],"end":[2101,5]},"visibility":"public","docs":"Allows negative numbers to pass as values.\n\nThis is similar to [`Command::allow_hyphen_values`] except that it only allows numbers,\nall other undefined leading hyphens will fail to parse.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg};\nlet res = Command::new(\"myprog\")\n    .allow_negative_numbers(true)\n    .arg(Arg::new(\"num\"))\n    .try_get_matches_from(vec![\n        \"myprog\", \"-20\"\n    ]);\nassert!(res.is_ok());\nlet m = res.unwrap();\nassert_eq!(m.value_of(\"num\").unwrap(), \"-20\");\n```","links":{"`Command::allow_hyphen_values`":"0:4244:1577"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13437:2003":{"id":"2:13437:2003","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"prim@char":"1:15839:8315","self::pattern":"2:12997:8603","`DoubleEndedIterator`":"2:8411:120","str::matches":"1:15845:8320"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:49524:8624","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:8597","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:218":{"id":"0:218","crate_id":0,"name":null,"span":{"filename":"src/builder/action.rs","begin":[252,0],"end":[323,1]},"visibility":{"restricted":{"parent":"0:217:2150","path":"::builder::action"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"ArgAction","id":"0:3347:1562","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:219:2285"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3169-0:4823:1587":{"id":"b:2:3169-0:4823:1587","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4823:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3172:2288"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4687:7150":{"id":"0:4687:7150","crate_id":0,"name":"Downcast","span":{"filename":"src/parser/error.rs","begin":[10,4],"end":[15,5]},"visibility":"default","docs":"Failed to downcast `AnyValue` to the specified type","links":{},"attrs":["#[non_exhaustive]"],"deprecation":null,"kind":"variant","inner":{"variant_kind":"struct","variant_inner":["0:4688:7152","0:4689:605"]}},"0:2342":{"id":"0:2342","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1679,0],"end":[1688,1]},"visibility":{"restricted":{"parent":"0:2077:7161","path":"::parser::matches::arg_matches"}},"docs":"Creates an empty iterator.","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Default","id":"2:3218:115","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:4801:1585","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["0:2344:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4244:1577":{"id":"0:4244:1577","crate_id":0,"name":"App","span":{"filename":"src/builder/command.rs","begin":[78,0],"end":[114,1]},"visibility":"public","docs":"Deprecated, replaced with [`Command`]","links":{"`Command`":"0:755:1563"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["0:757","0:814","0:834","0:883","0:917","0:1022","0:1057","a:2:9222:7159-0:4244:1577","a:2:3252:209-0:4244:1577","a:2:3240:200-0:4244:1577","a:2:9223:7158-0:4244:1577","a:2:3281:5920-0:4244:1577","b:2:2843-0:4244:1577","b:2:3169-0:4244:1577","b:2:3173-0:4244:1577","b:2:3184-0:4244:1577","b:2:3969-0:4244:1577","b:2:2846-0:4244:1577","b:2:3179-0:4244:1577","b:5:6406-0:4244:1577","b:5:787-0:4244:1577","b:23:25-0:4244:1577","0:4281","0:4284","0:4287","0:4289","0:4293","0:4295","0:1191","0:1198"]}},"a:2:3281:5920-0:4397:2164":{"id":"a:2:3281:5920-0:4397:2164","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3281:5920","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"StringValueParser","id":"0:4397:2164","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1371:6312":{"id":"0:1371:6312","crate_id":0,"name":"Value","span":{"filename":"src/builder/value_parser.rs","begin":[647,4],"end":[647,19]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"a:2:9223:7158-0:4462:2174":{"id":"a:2:9223:7158-0:4462:2174","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9223:7158","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FalseyValueParser","id":"0:4462:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4823:1587":{"id":"0:4823:1587","crate_id":0,"name":"ValueSource","span":{"filename":"src/parser/matches/value_source.rs","begin":[4,0],"end":[11,1]},"visibility":"public","docs":"Origin of the argument's value","links":{},"attrs":["#[non_exhaustive]"],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:4824:7575","0:4826:7596","0:4828:7121"],"impls":["a:2:9222:7159-0:4823:1587","a:2:3252:209-0:4823:1587","a:2:3240:200-0:4823:1587","a:2:9223:7158-0:4823:1587","a:2:3281:5920-0:4823:1587","b:2:2843-0:4823:1587","b:2:3169-0:4823:1587","b:2:3173-0:4823:1587","b:2:3184-0:4823:1587","b:2:3969-0:4823:1587","b:2:2846-0:4823:1587","b:2:3179-0:4823:1587","b:5:787-0:4823:1587","b:23:25-0:4823:1587","0:4830","0:4832","0:4834","0:4835","0:4836","0:4838","0:4839","0:4841","0:4843"]}},"0:468:3928":{"id":"0:468:3928","crate_id":0,"name":"get_help","span":{"filename":"src/builder/arg.rs","begin":[4272,4],"end":[4274,5]},"visibility":"public","docs":"Get the help specified for this argument, if any","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3240:200-0:4244:1577":{"id":"a:2:3240:200-0:4244:1577","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3240:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:4244:1577","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:575":{"id":"0:575","crate_id":0,"name":null,"span":{"filename":"src/builder/arg.rs","begin":[5131,0],"end":[5185,1]},"visibility":{"restricted":{"parent":"0:242:1829","path":"::builder::arg"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10255:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3816:1564","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["0:577:648"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4404":{"id":"0:4404","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[722,9],"end":[722,13]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3250:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OsStringValueParser","id":"0:4403:2176","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:480:3949":{"id":"0:480:3949","crate_id":0,"name":"get_all_aliases","span":{"filename":"src/builder/arg.rs","begin":[4366,4],"end":[4372,5]},"visibility":"public","docs":"Get *all* aliases for this argument, if any, both visible and hidden.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7764:223","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:466:1837":{"id":"0:466:1837","crate_id":0,"name":"get_id","span":{"filename":"src/builder/arg.rs","begin":[4257,4],"end":[4259,5]},"visibility":"public","docs":"Get the name of the argument","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6098:7984":{"id":"5:6098:7984","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8352:205"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:467:3926":{"id":"0:467:3926","crate_id":0,"name":"get_name","span":{"filename":"src/builder/arg.rs","begin":[4266,4],"end":[4268,5]},"visibility":"public","docs":"Deprecated, replaced with [`Arg::get_id`]","links":{"`Arg::get_id`":"0:3816:1564"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4438":{"id":"0:4438","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1090,15],"end":[1090,20]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"$crate::clone::Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"std::convert::TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i64"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3240:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3252:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:4432:2162","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["0:4440:397"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3179-0:4791:1586":{"id":"b:2:3179-0:4791:1586","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3149:217","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OsValues","id":"0:4791:1586","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:3182:127","2:3183:1395"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:3281:5920-0:4640:127":{"id":"a:2:3281:5920-0:4640:127","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3281:5920","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4640:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:6100:2538":{"id":"5:6100:2538","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:15845:8320"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4363:6242":{"id":"0:4363:6242","crate_id":0,"name":"FilePath","span":{"filename":"src/builder/value_hint.rs","begin":[38,4],"end":[38,12]},"visibility":"default","docs":"Path to a file.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"b:2:2846-0:4244:1577":{"id":"b:2:2846-0:4244:1577","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2840:8484","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:4244:1577","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["2:2848:21287"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:2344:59":{"id":"0:2344:59","crate_id":0,"name":"default","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1680,4],"end":[1687,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:979:5615":{"id":"0:979:5615","crate_id":0,"name":"get_positionals","span":{"filename":"src/builder/command.rs","begin":[3535,4],"end":[3537,5]},"visibility":"public","docs":"Iterate through the *positionals* arguments.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8565:157","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3816:1564","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}}}}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1472:6366":{"id":"0:1472:6366","crate_id":0,"name":"range","span":{"filename":"src/builder/value_parser.rs","begin":[1301,4],"end":[1349,5]},"visibility":"public","docs":"Narrow the supported range","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["range",{"kind":"generic","inner":"B"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RangeBounds","id":"2:3615:6281","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:885:4505":{"id":"0:885:4505","crate_id":0,"name":"short_flag","span":{"filename":"src/builder/command.rs","begin":[2277,4],"end":[2280,5]},"visibility":"public","docs":"Sets the short version of the subcommand flag without the preceding `-`.\n\nAllows the subcommand to be used as if it were an [`Arg::short`].\n\n# Examples\n\n```\n# use clap::{Command, Arg, ArgAction};\nlet matches = Command::new(\"pacman\")\n    .subcommand(\n        Command::new(\"sync\").short_flag('S').arg(\n            Arg::new(\"search\")\n                .short('s')\n                .long(\"search\")\n                .action(ArgAction::SetTrue)\n                .help(\"search remote repositories for matching strings\"),\n        ),\n    )\n    .get_matches_from(vec![\"pacman\", \"-Ss\"]);\n\nassert_eq!(matches.subcommand_name().unwrap(), \"sync\");\nlet sync_matches = matches.subcommand_matches(\"sync\").unwrap();\nassert!(*sync_matches.get_one::<bool>(\"search\").expect(\"defaulted by clap\"));\n```\n[`Arg::short`]: Arg::short()","links":{"Arg::short()":"0:3816:1564"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["short",{"kind":"primitive","inner":"char"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2217:7266":{"id":"0:2217:7266","crate_id":0,"name":"try_get_raw","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1116,4],"end":[1129,5]},"visibility":"public","docs":"Non-panicking version of [`ArgMatches::get_raw`]","links":{"`ArgMatches::get_raw`":"0:4706:1568"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"RawValues","id":"0:4763:7085","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4686:7087","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1398:6352":{"id":"0:1398:6352","crate_id":0,"name":"parse_ref","span":{"filename":"src/builder/value_parser.rs","begin":[778,4],"end":[785,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["cmd",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Command","id":"0:755:1563","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}],["arg",{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Arg","id":"0:3816:1564","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["value",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"std::ffi::OsStr","id":"1:2923:169","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Value","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:1362:2165","args":null,"param_names":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"crate::Error","id":"0:4640:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3406:8466":{"id":"2:3406:8466","crate_id":2,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3408:1213"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1580:1574":{"id":"0:1580:1574","crate_id":0,"name":"Parser","span":{"filename":"src/builder/value_parser.rs","begin":[1903,4],"end":[1903,44]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"RangedU64ValueParser","id":"0:4444:2163","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}},"param_names":[]}}}},"0:4618:6790":{"id":"0:4618:6790","crate_id":0,"name":"InvalidUtf8","span":{"filename":"src/error/kind.rs","begin":[320,4],"end":[320,15]},"visibility":"default","docs":"Occurs when the user provides a value containing invalid UTF-8.\n\nTo allow arbitrary data\n- Set [`Arg::allow_invalid_utf8`] for argument values\n- Set [`Command::allow_invalid_utf8_for_external_subcommands`] for external-subcommand\n  values\n\n# Platform Specific\n\nNon-Windows platforms only (such as Linux, Unix, OSX, etc.)\n\n# Examples\n\n ```\n# use clap::{Command, Arg, ErrorKind};\n# use std::os::unix::ffi::OsStringExt;\n# use std::ffi::OsString;\nlet result = Command::new(\"prog\")\n    .arg(Arg::new(\"utf8\")\n        .short('u')\n        .takes_value(true))\n    .try_get_matches_from(vec![OsString::from(\"myprog\"),\n                                OsString::from(\"-u\"),\n                                OsString::from_vec(vec![0xE9])]);\nassert!(result.is_err());\nassert_eq!(result.unwrap_err().kind(), ErrorKind::InvalidUtf8);\n```\n\n[`Arg::allow_invalid_utf8`]: crate::Arg::allow_invalid_utf8\n[`Command::allow_invalid_utf8_for_external_subcommands`]: crate::Command::allow_invalid_utf8_for_external_subcommands","links":{"crate::Command::allow_invalid_utf8_for_external_subcommands":"0:4244:1577","crate::Arg::allow_invalid_utf8":"0:3816:1564"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:1337:669":{"id":"0:1337:669","crate_id":0,"name":"from","span":{"filename":"src/builder/value_parser.rs","begin":[474,4],"end":[477,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["value",{"kind":"resolved_path","inner":{"name":"std::ops::RangeFull","id":"2:45721:186","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:517:4038":{"id":"0:517:4038","crate_id":0,"name":"is_exclusive_set","span":{"filename":"src/builder/arg.rs","begin":[4659,4],"end":[4661,5]},"visibility":"public","docs":"Reports whether [`Arg::exclusive`] is set","links":{"`Arg::exclusive`":"0:3816:1564"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1327:669":{"id":"0:1327:669","crate_id":0,"name":"from","span":{"filename":"src/builder/value_parser.rs","begin":[324,4],"end":[327,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["value",{"kind":"resolved_path","inner":{"name":"std::ops::Range","id":"2:45737:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i64"}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2843-0:4706:1568":{"id":"b:2:2843-0:4706:1568","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2837:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4706:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2845:2590"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:3281:5920-0:4403:2176":{"id":"a:2:3281:5920-0:4403:2176","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3281:5920","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OsStringValueParser","id":"0:4403:2176","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2843-0:4587:1584":{"id":"b:2:2843-0:4587:1584","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2837:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4587:1584","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2845:2590"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2843-0:4298:1582":{"id":"b:2:2843-0:4298:1582","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2837:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:4298:1582","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["2:2845:2590"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:566":{"id":"0:566","crate_id":0,"name":null,"span":{"filename":"src/builder/arg.rs","begin":[5086,0],"end":[5090,1]},"visibility":{"restricted":{"parent":"0:242:1829","path":"::builder::arg"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clamp","max","min"],"trait":{"kind":"resolved_path","inner":{"name":"Ord","id":"2:2928:167","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3816:1564","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["0:568:404"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:10493:142":{"id":"2:10493:142","crate_id":2,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10494:703","2:10496:9784"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:632:397":{"id":"0:632:397","crate_id":0,"name":"clone","span":{"filename":"src/builder/arg_group.rs","begin":[622,4],"end":[632,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3252:209-0:4640:127":{"id":"a:2:3252:209-0:4640:127","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3252:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4640:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4559":{"id":"0:4559","crate_id":0,"name":null,"span":{"filename":"src/error/context.rs","begin":[2,40],"end":[2,42]},"visibility":{"restricted":{"parent":"0:1839:470","path":"::error::context"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2897:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:4515:6699","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1861:769":{"id":"0:1861:769","crate_id":0,"name":"kind","span":{"filename":"src/error/mod.rs","begin":[93,4],"end":[95,5]},"visibility":"public","docs":"Type of error for programmatic processing","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4587:1584","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4430":{"id":"0:4430","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[981,16],"end":[981,21]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10255:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValuesParser","id":"0:4425:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:4431:648"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:498:3957":{"id":"0:498:3957","crate_id":0,"name":"is_takes_value_set","span":{"filename":"src/builder/arg.rs","begin":[4536,4],"end":[4538,5]},"visibility":"public","docs":"Report whether [`Arg::is_takes_value_set`] is set","links":{"`Arg::is_takes_value_set`":"0:3816:1564"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:454:3818":{"id":"0:454:3818","crate_id":0,"name":"requires_all","span":{"filename":"src/builder/arg.rs","begin":[3998,4],"end":[4002,5]},"visibility":"public","docs":"Require these arguments names when this one is presen\n\ni.e. when using this argument, the following arguments *must* be present.\n\n**NOTE:** [Conflicting] rules and [override] rules take precedence over being required\nby default.\n\n# Examples\n\n```rust\n# use clap::Arg;\nArg::new(\"config\")\n    .requires_all(&[\"input\", \"output\"])\n# ;\n```\n\nSetting `Arg::requires_all(&[arg, arg2])` requires that all the arguments be used at\nruntime if the defining argument is used. If the defining argument isn't used, the other\nargument isn't required\n\n```rust\n# use clap::{Command, Arg};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .takes_value(true)\n        .requires(\"input\")\n        .long(\"config\"))\n    .arg(Arg::new(\"input\"))\n    .arg(Arg::new(\"output\"))\n    .try_get_matches_from(vec![\n        \"prog\"\n    ]);\n\nassert!(res.is_ok()); // We didn't use cfg, so input and output weren't required\n```\n\nSetting `Arg::requires_all(&[arg, arg2])` and *not* supplying all the arguments is an\nerror.\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .takes_value(true)\n        .requires_all(&[\"input\", \"output\"])\n        .long(\"config\"))\n    .arg(Arg::new(\"input\"))\n    .arg(Arg::new(\"output\"))\n    .try_get_matches_from(vec![\n        \"prog\", \"--config\", \"file.conf\", \"in.txt\"\n    ]);\n\nassert!(res.is_err());\n// We didn't use output\nassert_eq!(res.unwrap_err().kind(), ErrorKind::MissingRequiredArgument);\n```\n[Conflicting]: Arg::conflicts_with()\n[override]: Arg::overrides_with()","links":{"Arg::overrides_with()":"0:3816:1564","Arg::conflicts_with()":"0:3816:1564"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["names",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Key","id":"0:3235:2593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:215:1561":{"id":"0:215:1561","crate_id":0,"name":"builder","span":{"filename":"src/builder/mod.rs","begin":[1,0],"end":[61,43]},"visibility":"public","docs":"Define [`Command`] line [arguments][`Arg`]","links":{"`Arg`":"0:3816:1564","`Command`":"0:755:1563"},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:3347:1562","0:3386:1579","0:3816:1564","0:3903:1565","0:3970:1581","0:755:1563","0:4298:1582","0:4356:1583","0:4425:2161","0:4432:2162","0:4444:2163","0:4397:2164","0:1362:2165","0:1294:2166","0:1543:2167","0:4456:2171","0:4468:2172","0:4415:2173","0:4462:2174","0:4474:2175","0:4403:2176","0:4409:2177","0:4244:1577"]}},"0:5074:4812":{"id":"0:5074:4812","crate_id":0,"name":"Always","span":{"filename":"src/util/color.rs","begin":[38,4],"end":[38,10]},"visibility":"default","docs":"Enables colored output regardless of whether or not the output is going to a terminal/TTY.\n\n# Platform Specific\n\nThis setting only applies to Unix, Linux, and macOS (i.e. non-Windows platforms).\n\n# Examples\n\n ```no_run\n# use clap::{Command, ColorChoice};\nCommand::new(\"myprog\")\n    .color(ColorChoice::Always)\n    .get_matches();\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:1452:6352":{"id":"0:1452:6352","crate_id":0,"name":"parse_ref","span":{"filename":"src/builder/value_parser.rs","begin":[1183,4],"end":[1232,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["cmd",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Command","id":"0:755:1563","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}],["arg",{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Arg","id":"0:3816:1564","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["raw_value",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"std::ffi::OsStr","id":"1:2923:169","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Value","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:1362:2165","args":null,"param_names":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"crate::Error","id":"0:4640:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4536:6783":{"id":"0:4536:6783","crate_id":0,"name":"SuggestedCommand","span":{"filename":"src/error/context.rs","begin":[26,4],"end":[26,20]},"visibility":"default","docs":"Potential fix for the user","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:4550":{"id":"0:4550","crate_id":0,"name":null,"span":{"filename":"src/error/context.rs","begin":[2,9],"end":[2,13]},"visibility":{"restricted":{"parent":"0:1839:470","path":"::error::context"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3250:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:4515:6699","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3411:8467":{"id":"2:3411:8467","crate_id":2,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3413:1216"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:4640:127":{"id":"0:4640:127","crate_id":0,"name":"Error","span":{"filename":"src/error/mod.rs","begin":[40,0],"end":[54,1]},"visibility":"public","docs":"Command Line Argument Parser Error\n\nSee [`Command::error`] to create an error.\n\n[`Command::error`]: crate::Command::error","links":{"crate::Command::error":"0:4244:1577"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":["0:4642:769","0:4643:6711"],"impls":["0:1857","a:2:9222:7159-0:4640:127","a:2:3252:209-0:4640:127","a:2:3240:200-0:4640:127","a:2:9223:7158-0:4640:127","a:2:3281:5920-0:4640:127","b:2:2843-0:4640:127","b:2:3169-0:4640:127","b:2:3173-0:4640:127","b:2:3184-0:4640:127","b:2:3969-0:4640:127","b:2:2846-0:4640:127","b:2:3179-0:4640:127","b:5:6406-0:4640:127","0:4644","0:1914","0:1916","0:1918","0:1921"]}},"0:832:4884":{"id":"0:832:4884","crate_id":0,"name":"infer_long_args","span":{"filename":"src/builder/command.rs","begin":[1325,4],"end":[1331,5]},"visibility":"public","docs":"Allow partial matches of long arguments or their [aliases].\n\nFor example, to match an argument named `--test`, one could use `--t`, `--te`, `--tes`, and\n`--test`.\n\n**NOTE:** The match *must not* be ambiguous at all in order to succeed. i.e. to match\n`--te` to `--test` there could not also be another argument or alias `--temp` because both\nstart with `--te`\n\n**NOTE:** This choice is propagated to all child subcommands.\n\n[aliases]: crate::Command::aliases()","links":{"crate::Command::aliases()":"0:4244:1577"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4798":{"id":"0:4798","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1592,16],"end":[1592,21]},"visibility":{"restricted":{"parent":"0:2077:7161","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10255:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OsValues","id":"0:4791:1586","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["0:4800:648"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:2260":{"id":"0:2260","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1423,0],"end":[1423,57]},"visibility":{"restricted":{"parent":"0:2077:7161","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["len","is_empty"],"trait":{"kind":"resolved_path","inner":{"name":"ExactSizeIterator","id":"2:8436:7524","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValuesRef","id":"0:4750:7086","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3857:59":{"id":"0:3857:59","crate_id":0,"name":"default","span":{"filename":"src/builder/arg.rs","begin":[60,9],"end":[60,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3816:1564","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:499:3997":{"id":"0:499:3997","crate_id":0,"name":"is_allow_hyphen_values_set","span":{"filename":"src/builder/arg.rs","begin":[4541,4],"end":[4543,5]},"visibility":"public","docs":"Report whether [`Arg::allow_hyphen_values`] is set","links":{"`Arg::allow_hyphen_values`":"0:3816:1564"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:369:2636":{"id":"0:369:2636","crate_id":0,"name":"validator_os","span":{"filename":"src/builder/arg.rs","begin":[1542,4],"end":[1551,5]},"visibility":"public","docs":"Deprecated, replaced with [`Arg::value_parser(...)`]","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3489:131","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"1:2923:169","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"O"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}}}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3240:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"outlives":"'help"}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2146","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"1:2576:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3240:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3252:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3985:2932":{"id":"0:3985:2932","crate_id":0,"name":"TakesValue","span":{"filename":"src/builder/arg_settings.rs","begin":[105,4],"end":[105,14]},"visibility":"default","docs":"Deprecated, replaced with [`Arg::takes_value`] and [`Arg::is_takes_value_set`]","links":{"`Arg::is_takes_value_set`":"0:3816:1564","`Arg::takes_value`":"0:3816:1564"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:1446:6366":{"id":"0:1446:6366","crate_id":0,"name":"range","span":{"filename":"src/builder/value_parser.rs","begin":[1103,4],"end":[1151,5]},"visibility":"public","docs":"Narrow the supported range","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["range",{"kind":"generic","inner":"B"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RangeBounds","id":"2:3615:6281","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i64"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2289:4560":{"id":"0:2289:4560","crate_id":0,"name":"size_hint","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1521,4],"end":[1523,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:794:2019":{"id":"0:794:2019","crate_id":0,"name":"get_matches_from","span":{"filename":"src/builder/command.rs","begin":[595,4],"end":[604,5]},"visibility":"public","docs":"Parse the specified arguments, exiting on failure.\n\n**NOTE:** The first argument will be parsed as the binary name unless\n[`Command::no_binary_name`] is used.\n\n# Panics\n\nIf contradictory arguments or settings exist.\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg};\nlet arg_vec = vec![\"my_prog\", \"some\", \"args\", \"to\", \"parse\"];\n\nlet matches = Command::new(\"myprog\")\n    // Args and options go here...\n    .get_matches_from(arg_vec);\n```\n[`App::get_matches`]: Command::get_matches()\n[`clap::Result`]: Result\n[`Vec`]: std::vec::Vec","links":{"`Command::no_binary_name`":"0:4244:1577"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["itr",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4706:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8367:151","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"T"}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsString","id":"1:2920:170","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4637":{"id":"0:4637","crate_id":0,"name":null,"span":{"filename":"src/error/kind.rs","begin":[2,29],"end":[2,38]},"visibility":{"restricted":{"parent":"0:1840:769","path":"::error::kind"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"StructuralPartialEq","id":"2:3248:207","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4587:1584","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:2270":{"id":"0:2270","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1467,0],"end":[1476,1]},"visibility":{"restricted":{"parent":"0:2077:7161","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["intersperse_with","gt","try_for_each","min","is_sorted_by","fold","size_hint","try_fold","cycle","skip","by_ref","for_each","min_by_key","ge","position","min_by","filter_map","cloned","is_sorted_by_key","sum","product","reduce","cmp","try_collect","take","skip_while","eq","next_chunk","advance_by","lt","max_by","count","any","partial_cmp","cmp_by","__iterator_get_unchecked","try_reduce","zip","all","collect_into","map_while","nth","chain","max_by_key","partial_cmp_by","try_find","last","partition","scan","filter","step_by","take_while","rev","ne","peekable","flatten","collect","find","eq_by","rposition","partition_in_place","le","fuse","copied","intersperse","map","flat_map","max","find_map","enumerate","is_sorted","unzip","is_partitioned","inspect"],"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8565:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"RawValues","id":"0:4763:7085","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["0:2272:2018","0:2273:909","0:2274:4560"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3169-0:4801:1585":{"id":"b:2:3169-0:4801:1585","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:4801:1585","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:3172:2288"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4470":{"id":"0:4470","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1647,15],"end":[1647,20]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BoolishValueParser","id":"0:4468:2172","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:4471:397"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4415:2173":{"id":"0:4415:2173","crate_id":0,"name":"EnumValueParser","span":{"filename":"src/builder/value_parser.rs","begin":[869,0],"end":[871,2]},"visibility":"public","docs":"Parse an [`ValueEnum`][crate::ValueEnum] value.\n\nSee also:\n- [`PossibleValuesParser`]\n\n# Example\n\n```rust\n# use std::ffi::OsStr;\n# use clap::builder::TypedValueParser;\n# let cmd = clap::Command::new(\"test\");\n# let arg = None;\n\n#[derive(Copy, Clone, Debug, PartialEq, Eq)]\nenum ColorChoice {\n    Always,\n    Auto,\n    Never,\n}\n\nimpl clap::ValueEnum for ColorChoice {\n    fn value_variants<'a>() -> &'a [Self] {\n        &[Self::Always, Self::Auto, Self::Never]\n    }\n\n    fn to_possible_value<'a>(&self) -> Option<clap::PossibleValue<'a>> {\n        match self {\n            Self::Always => Some(clap::PossibleValue::new(\"always\")),\n            Self::Auto => Some(clap::PossibleValue::new(\"auto\")),\n            Self::Never => Some(clap::PossibleValue::new(\"never\")),\n        }\n    }\n}\n\n// Usage\nlet mut cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"color\")\n            .value_parser(clap::builder::EnumValueParser::<ColorChoice>::new())\n            .required(true)\n    );\n\nlet m = cmd.try_get_matches_from_mut([\"cmd\", \"always\"]).unwrap();\nlet port: ColorChoice = *m.get_one(\"color\")\n    .expect(\"required\");\nassert_eq!(port, ColorChoice::Always);\n\n// Semantics\nlet value_parser = clap::builder::EnumValueParser::<ColorChoice>::new();\n// or\nlet value_parser = clap::value_parser!(ColorChoice);\nassert!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"random\")).is_err());\nassert!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"\")).is_err());\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"always\")).unwrap(), ColorChoice::Always);\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"auto\")).unwrap(), ColorChoice::Auto);\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"never\")).unwrap(), ColorChoice::Never);\n```","links":{"`PossibleValuesParser`":"0:4425:2161","crate::ValueEnum":"0:174:1576"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"tuple","generics":{"params":[{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"crate::ValueEnum","id":"0:174:1576","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3240:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3252:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["0:1403","a:2:9222:7159-0:4415:2173","a:2:3252:209-0:4415:2173","a:2:3240:200-0:4415:2173","a:2:9223:7158-0:4415:2173","a:2:3281:5920-0:4415:2173","b:2:2843-0:4415:2173","b:2:3169-0:4415:2173","b:2:3173-0:4415:2173","b:2:3184-0:4415:2173","b:2:3969-0:4415:2173","b:2:2846-0:4415:2173","b:2:3179-0:4415:2173","b:5:787-0:4415:2173","0:4419","0:4422","0:1406","0:1422"]}},"a:2:9222:7159-0:4773:1588":{"id":"a:2:9222:7159-0:4773:1588","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9222:7159","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:4773:1588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"2:31799:68526":{"id":"2:31799:68526","crate_id":2,"name":"overflowing_div","span":null,"visibility":"public","docs":"Calculates the divisor when `self` is divided by `rhs`.\n\nReturns a tuple of the divisor along with a boolean indicating\nwhether an arithmetic overflow would occur. Note that for unsigned\nintegers overflow never occurs, so the second value is always\n`false`.\n\n# Panics\n\nThis function will panic if `rhs` is 0.\n\n# Examples\n\nBasic usage\n\n```\nassert_eq!(5u64.overflowing_div(2), (2, false));\n```","links":{},"attrs":["#[stable(feature = \"wrapping\", since = \"1.7.0\")]","#[rustc_const_stable(feature = \"const_overflowing_int_methods\", since =\n\"1.52.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"u64"},{"kind":"primitive","inner":"bool"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3153:216":{"id":"2:3153:216","crate_id":2,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3155:127","2:3156:1394"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:136:2024":{"id":"0:136:2024","crate_id":0,"name":"update_from","span":{"filename":"src/derive.rs","begin":[132,4],"end":[145,5]},"visibility":"default","docs":"Update from iterator, exit on error","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["itr",{"kind":"generic","inner":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8367:151","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"T"}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsString","id":"1:2920:170","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5761:10644":{"id":"1:5761:10644","crate_id":1,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5762:21413","1:5763:21414","1:5764:21415","1:5765:21416"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3343:8457":{"id":"2:3343:8457","crate_id":2,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3345:1335"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:826:4843":{"id":"0:826:4843","crate_id":0,"name":"disable_help_flag","span":{"filename":"src/builder/command.rs","begin":[1174,4],"end":[1180,5]},"visibility":"public","docs":"Disables `-h` and `--help` flag.\n\n**NOTE:** This choice is propagated to all child subcommands.\n\n# Examples\n\n```rust\n# use clap::{Command, ErrorKind};\nlet res = Command::new(\"myprog\")\n    .disable_help_flag(true)\n    .try_get_matches_from(vec![\n        \"myprog\", \"-h\"\n    ]);\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind(), ErrorKind::UnknownArgument);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3489:131":{"id":"2:3489:131","crate_id":2,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3491:366"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3492:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3137:75":{"id":"2:3137:75","crate_id":2,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3139:294"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:840:4506":{"id":"0:840:4506","crate_id":0,"name":"display_name","span":{"filename":"src/builder/command.rs","begin":[1436,4],"end":[1439,5]},"visibility":"public","docs":"Overrides the runtime-determined display name of the program for help and error messages.\n\n# Examples\n\n```no_run\n# use clap::Command;\nCommand::new(\"My Program\")\n     .display_name(\"my_program\")\n# ;\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["name",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2846-0:4432:2162":{"id":"b:2:2846-0:4432:2162","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2840:8484","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:4432:2162","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["2:2848:21287"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:3240:200-0:3386:1579":{"id":"a:2:3240:200-0:3386:1579","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3240:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:3386:1579","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:10266:8501":{"id":"2:10266:8501","crate_id":2,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10267:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5775:10646":{"id":"1:5775:10646","crate_id":1,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5776:21417"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10545:10621","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3146:135":{"id":"2:3146:135","crate_id":2,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3148:669"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13377:21288":{"id":"2:13377:21288","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10897:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10897:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9223:7158-0:4750:7086":{"id":"a:2:9223:7158-0:4750:7086","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9223:7158","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValuesRef","id":"0:4750:7086","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"0:934:3947":{"id":"0:934:3947","crate_id":0,"name":"get_visible_aliases","span":{"filename":"src/builder/command.rs","begin":[3358,4],"end":[3360,5]},"visibility":"public","docs":"Iterate through the *visible* aliases for this subcommand.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8565:157","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"outlives":"'_"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10503:146":{"id":"2:10503:146","crate_id":2,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10504:640","2:10505:1764","2:10506:10210","2:10507:10211","2:10508:10212","2:10509:10213","2:10510:10214","2:10511:10215","2:10512:10216","2:10513:10217","2:10514:10218","2:10515:10219","2:10516:10220","2:10517:10221","2:10518:10222","2:10519:1509"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:9222:7159-0:4791:1586":{"id":"a:2:9222:7159-0:4791:1586","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9222:7159","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OsValues","id":"0:4791:1586","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"0:1559:1574":{"id":"0:1559:1574","crate_id":0,"name":"Parser","span":{"filename":"src/builder/value_parser.rs","begin":[1849,4],"end":[1849,43]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:4432:2162","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}},"param_names":[]}}}},"0:2168:7333":{"id":"0:2168:7333","crate_id":0,"name":"values_of_os","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[467,4],"end":[476,5]},"visibility":"public","docs":"Deprecated, replaced with [`ArgMatches::get_many()`]","links":{"`ArgMatches::get_many()`":"0:4706:1568"},"attrs":["#[track_caller]","#![allow(deprecated)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsValues","id":"0:4791:1586","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Key","id":"0:3235:2593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2194:7423":{"id":"0:2194:7423","crate_id":0,"name":"indices_of","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[841,4],"end":[848,5]},"visibility":"public","docs":"All indices an argument appeared at when parsing.\n\nIndices are similar to argv indices, but are not exactly 1:1.\n\nFor flags (i.e. those arguments which don't have an associated value), indices refer\nto occurrence of the switch, such as `-f`, or `--flag`. However, for options the indices\nrefer to the *values* `-o val` would therefore not represent two distinct indices, only the\nindex for `val` would be recorded. This is by design.\n\n*NOTE:* For more information about how clap indices compared to argv indices, see\n[`ArgMatches::index_of`]\n\n# Panics\n\nIf `id` is is not a valid argument or group id.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"myapp\")\n    .arg(Arg::new(\"option\")\n        .short('o')\n        .use_value_delimiter(true)\n        .multiple_values(true))\n    .get_matches_from(vec![\"myapp\", \"-o=val1,val2,val3\"]);\n           // ARGV indices: ^0       ^1\n           // clap indices:             ^2   ^3   ^4\n           //\n           // clap sees the above as 'myapp -o val1 val2 val3'\n           //                         ^0    ^1 ^2   ^3   ^4\nassert_eq!(m.indices_of(\"option\").unwrap().collect::<Vec<_>>(), &[2, 3, 4]);\n```\n\nAnother quick example is when flags and options are used together\n\n```rust\n# use clap::{Command, Arg, ArgAction};\nlet m = Command::new(\"myapp\")\n    .arg(Arg::new(\"option\")\n        .short('o')\n        .takes_value(true)\n        .action(ArgAction::Append))\n    .arg(Arg::new(\"flag\")\n        .short('f')\n        .action(ArgAction::Count))\n    .get_matches_from(vec![\"myapp\", \"-o\", \"val1\", \"-f\", \"-o\", \"val2\", \"-f\"]);\n           // ARGV indices: ^0       ^1    ^2      ^3    ^4    ^5      ^6\n           // clap indices:                ^2      ^3          ^5      ^6\n\nassert_eq!(m.indices_of(\"option\").unwrap().collect::<Vec<_>>(), &[2, 5]);\nassert_eq!(m.indices_of(\"flag\").unwrap().collect::<Vec<_>>(), &[6]);\n```\n\nOne final example, which is an odd case; if we *don't* use  value delimiter as we did with\nthe first example above instead of `val1`, `val2` and `val3` all being distinc values, they\nwould all be a single value of `val1,val2,val3`, in which case they'd only receive a single\nindex.\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"myapp\")\n    .arg(Arg::new(\"option\")\n        .short('o')\n        .takes_value(true)\n        .multiple_values(true))\n    .get_matches_from(vec![\"myapp\", \"-o=val1,val2,val3\"]);\n           // ARGV indices: ^0       ^1\n           // clap indices:             ^2\n           //\n           // clap sees the above as 'myapp -o \"val1,val2,val3\"'\n           //                         ^0    ^1  ^2\nassert_eq!(m.indices_of(\"option\").unwrap().collect::<Vec<_>>(), &[2]);\n```\n[`ArgMatches::index_of`]: ArgMatches::index_of()\n[delimiter]: Arg::value_delimiter()","links":{"ArgMatches::index_of()":"0:4706:1568"},"attrs":["#[track_caller]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:4801:1585","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Key","id":"0:3235:2593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3179-0:4403:2176":{"id":"b:2:3179-0:4403:2176","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3149:217","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OsStringValueParser","id":"0:4403:2176","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3182:127","2:3183:1395"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1557:2158":{"id":"0:1557:2158","crate_id":0,"name":"value_parser","span":{"filename":"src/builder/value_parser.rs","begin":[1844,4],"end":[1846,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"qualified_path","inner":{"name":"Parser","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:1543:2167","args":null,"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4463":{"id":"0:4463","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1550,9],"end":[1550,13]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3250:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FalseyValueParser","id":"0:4462:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:325:2709":{"id":"0:325:2709","crate_id":0,"name":"short_alias","span":{"filename":"src/builder/arg.rs","begin":[269,4],"end":[274,5]},"visibility":"public","docs":"Add an alias, which functions as a hidden short flag.\n\nThis is more efficient, and easier than creating multiple hidden arguments as one only\nneeds to check for the existence of this command, and not all variants.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n            .arg(Arg::new(\"test\")\n            .short('t')\n            .short_alias('e')\n            .takes_value(true))\n       .get_matches_from(vec![\n            \"prog\", \"-e\", \"cool\"\n        ]);\nassert!(m.contains_id(\"test\"));\nassert_eq!(m.value_of(\"test\"), Some(\"cool\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["name",{"kind":"primitive","inner":"char"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3969-0:4686:7087":{"id":"b:2:3969-0:4686:7087","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3967:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4686:7087","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3971:1408"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:391:3278":{"id":"0:391:3278","crate_id":0,"name":"require_delimiter","span":{"filename":"src/builder/arg.rs","begin":[2017,4],"end":[2019,5]},"visibility":"public","docs":"Deprecated, replaced with [`Arg::require_value_delimiter`]","links":{"`Arg::require_value_delimiter`":"0:3816:1564"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2846-0:4356:1583":{"id":"b:2:2846-0:4356:1583","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2840:8484","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:4356:1583","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2848:21287"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3969-0:4801:1585":{"id":"b:2:3969-0:4801:1585","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3967:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:4801:1585","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:3971:1408"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:31808:68534":{"id":"2:31808:68534","crate_id":2,"name":"div_euclid","span":null,"visibility":"public","docs":"Performs Euclidean division.\n\nSince, for the positive integers, all common\ndefinitions of division are equal, this\nis exactly equal to `self / rhs`.\n\n# Panics\n\nThis function will panic if `rhs` is 0.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(7u64.div_euclid(4), 1); // or any other integer type\n```","links":{},"attrs":["#[stable(feature = \"euclidean_division\", since = \"1.38.0\")]","#[rustc_const_stable(feature = \"const_euclidean_int_methods\", since =\n\"1.52.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3240:200-0:4823:1587":{"id":"a:2:3240:200-0:4823:1587","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3240:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4823:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1220:2625":{"id":"0:1220:2625","crate_id":0,"name":"aliases","span":{"filename":"src/builder/possible_value.rs","begin":[130,4],"end":[136,5]},"visibility":"public","docs":"Sets multiple *hidden* aliases for this argument value.\n\n# Examples\n\n```rust\n# use clap::PossibleValue;\nPossibleValue::new(\"slow\")\n    .aliases([\"not-fast\", \"snake-like\"])\n# ;\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["names",{"kind":"generic","inner":"I"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8367:151","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4478":{"id":"0:4478","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1736,22],"end":[1736,27]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10255:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"NonEmptyStringValueParser","id":"0:4474:2175","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:4479:648"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4838":{"id":"0:4838","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/value_source.rs","begin":[2,40],"end":[2,42]},"visibility":{"restricted":{"parent":"0:2423:7162","path":"::parser::matches::value_source"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"StructuralEq","id":"2:3249:206","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4823:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4770":{"id":"0:4770","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1460,16],"end":[1460,21]},"visibility":{"restricted":{"parent":"0:2077:7161","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10255:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"RawValues","id":"0:4763:7085","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["0:4772:648"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:3240:200-0:4561:6700":{"id":"a:2:3240:200-0:4561:6700","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3240:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ContextValue","id":"0:4561:6700","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1367":{"id":"0:1367","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[642,0],"end":[669,1]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Fn","id":"2:3486:130","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}}}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3240:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3252:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2146","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"std::error::Error","id":"1:2576:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3240:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3252:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["possible_values","parse"],"trait":{"kind":"resolved_path","inner":{"name":"TypedValueParser","id":"0:1362:2165","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"generic","inner":"F"},"items":["0:1371:6312","0:1372:6352"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4241":{"id":"0:4241","crate_id":0,"name":null,"span":{"filename":"src/builder/arg_settings.rs","begin":[302,0],"end":[330,1]},"visibility":{"restricted":{"parent":"0:637:2154","path":"::builder::arg_settings"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BitOr","id":"2:3372:1929","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ArgSettings","id":"0:3970:1581","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgSettings","id":"0:3970:1581","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:4242:171","0:4243:342"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:562:593":{"id":"0:562:593","crate_id":0,"name":"eq","span":{"filename":"src/builder/arg.rs","begin":[5075,4],"end":[5077,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3816:1564","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3969-0:4356:1583":{"id":"b:2:3969-0:4356:1583","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3967:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:4356:1583","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3971:1408"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4645:648":{"id":"0:4645:648","crate_id":0,"name":"fmt","span":{"filename":"src/error/mod.rs","begin":[39,9],"end":[39,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10215:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10204:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:848:4512":{"id":"0:848:4512","crate_id":0,"name":"after_help","span":{"filename":"src/builder/command.rs","begin":[1527,4],"end":[1530,5]},"visibility":"public","docs":"Free-form help text for after auto-generated short help (`-h`).\n\nThis is often used to describe how to use the arguments, caveats to be noted, or license\nand contact information.\n\nIf [`Command::after_long_help`] is not specified, this message will be displayed for `--help`.\n\n# Examples\n\n```no_run\n# use clap::Command;\nCommand::new(\"myprog\")\n    .after_help(\"Does really amazing things for great people... but be careful with -R!\")\n# ;\n```\n","links":{"`Command::after_long_help`":"0:4244:1577"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["help",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3179-0:3386:1579":{"id":"b:2:3179-0:3386:1579","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3149:217","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:3386:1579","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3182:127","2:3183:1395"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:3252:209-0:4462:2174":{"id":"a:2:3252:209-0:4462:2174","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3252:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FalseyValueParser","id":"0:4462:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4019":{"id":"0:4019","crate_id":0,"name":null,"span":{"filename":"src/builder/arg_settings.rs","begin":[32,16],"end":[32,25]},"visibility":{"restricted":{"parent":"0:637:2154","path":"::builder::arg_settings"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"StructuralPartialEq","id":"2:3248:207","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgSettings","id":"0:3970:1581","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3858":{"id":"0:3858","crate_id":0,"name":null,"span":{"filename":"src/builder/arg.rs","begin":[60,18],"end":[60,23]},"visibility":{"restricted":{"parent":"0:242:1829","path":"::builder::arg"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]","#[allow(missing_debug_implementations)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3816:1564","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["0:3860:397"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3484:648":{"id":"0:3484:648","crate_id":0,"name":"fmt","span":{"filename":"src/builder/app_settings.rs","begin":[32,9],"end":[32,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10215:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10204:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1390:6352":{"id":"0:1390:6352","crate_id":0,"name":"parse_ref","span":{"filename":"src/builder/value_parser.rs","begin":[736,4],"end":[743,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["cmd",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Command","id":"0:755:1563","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}],["arg",{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Arg","id":"0:3816:1564","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["value",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"std::ffi::OsStr","id":"1:2923:169","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Value","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:1362:2165","args":null,"param_names":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"crate::Error","id":"0:4640:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9223:7158-0:3347:1562":{"id":"a:2:9223:7158-0:3347:1562","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9223:7158","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgAction","id":"0:3347:1562","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4582:593":{"id":"0:4582:593","crate_id":0,"name":"eq","span":{"filename":"src/error/context.rs","begin":[42,23],"end":[42,32]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ContextValue","id":"0:4561:6700","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:504:3959":{"id":"0:504:3959","crate_id":0,"name":"get_value_parser","span":{"filename":"src/builder/arg.rs","begin":[4584,4],"end":[4594,5]},"visibility":"public","docs":"Configured parser for argument values\n\n# Example\n\n```rust\nlet cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"port\")\n            .value_parser(clap::value_parser!(usize))\n    );\nlet value_parser = cmd.get_arguments()\n    .find(|a| a.get_id() == \"port\").unwrap()\n    .get_value_parser();\nprintln!(\"{:?}\", value_parser);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"super::ValueParser","id":"0:1294:2166","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:515:4034":{"id":"0:515:4034","crate_id":0,"name":"is_require_value_delimiter_set","span":{"filename":"src/builder/arg.rs","begin":[4649,4],"end":[4651,5]},"visibility":"public","docs":"Report whether [`Arg::require_value_delimiter`] is set","links":{"`Arg::require_value_delimiter`":"0:3816:1564"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3922:593":{"id":"0:3922:593","crate_id":0,"name":"eq","span":{"filename":"src/builder/arg_group.rs","begin":[80,25],"end":[80,34]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3903:1565","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:605":{"id":"0:605","crate_id":0,"name":null,"span":{"filename":"src/builder/arg_group.rs","begin":[91,0],"end":[461,1]},"visibility":{"restricted":{"parent":"0:597:2152","path":"::builder::arg_group"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3903:1565","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["0:608:907","0:610:1838","0:612:886","0:614:1829","0:616:287","0:618:1911","0:619:1845","0:620:2620","0:622:3818","0:623:3833","0:625:3844"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2846-0:4763:7085":{"id":"b:2:2846-0:4763:7085","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2840:8484","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"RawValues","id":"0:4763:7085","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:2848:21287"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13389:39513":{"id":"2:13389:39513","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"1:15845:8320"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:49603:8605","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:31734:6474":{"id":"2:31734:6474","crate_id":2,"name":"MAX","span":null,"visibility":"public","docs":"The largest value that can be represented by this integer type\n(2<sup>64</sup> &minus; 1)\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(u64::MAX, 18446744073709551615);\n```","links":{},"attrs":["#[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]"],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"primitive","inner":"u64"},"default":"!0"}},"2:10268:8508":{"id":"2:10268:8508","crate_id":2,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10269:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1516:3153":{"id":"0:1516:3153","crate_id":0,"name":"possible_values","span":{"filename":"src/builder/value_parser.rs","begin":[1592,4],"end":[1596,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2146","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8565:157","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"resolved_path","inner":{"name":"crate::PossibleValue","id":"0:4298:1582","args":{"angle_bracketed":{"args":[{"lifetime":"'static"}],"bindings":[]}},"param_names":[]}}}}}]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3281:5920-0:3347:1562":{"id":"a:2:3281:5920-0:3347:1562","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3281:5920","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgAction","id":"0:3347:1562","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:418:3612":{"id":"0:418:3612","crate_id":0,"name":"hide_long_help","span":{"filename":"src/builder/arg.rs","begin":[3045,4],"end":[3051,5]},"visibility":"public","docs":"Hides an argument from long help (`--help`).\n\n**NOTE:** This does **not** hide the argument from usage strings on error\n\n**NOTE:** Setting this option will cause next-line-help output style to be used\nwhen long help (`--help`) is called.\n\n# Examples\n\nSetting `hide_long_help(true)` will hide the argument when displaying long help text\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .long(\"config\")\n        .hide_long_help(true)\n        .help(\"Some help text describing the --config arg\"))\n    .get_matches_from(vec![\n        \"prog\", \"--help\"\n    ]);\n```\n\nThe above example displays\n\n```text\nhelptest\n\nUSAGE:\n   helptest [OPTIONS]\n\nOPTIONS:\n-h, --help       Print help information\n-V, --version    Print version information\n```\n\nHowever, when -h is called\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .long(\"config\")\n        .hide_long_help(true)\n        .help(\"Some help text describing the --config arg\"))\n    .get_matches_from(vec![\n        \"prog\", \"-h\"\n    ]);\n```\n\nThen the following would be displayed\n\n```text\nhelptest\n\nUSAGE:\n   helptest [OPTIONS]\n\nOPTIONS:\n    --config     Some help text describing the --config arg\n-h, --help       Print help information\n-V, --version    Print version information\n```","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9222:7159-0:4801:1585":{"id":"a:2:9222:7159-0:4801:1585","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9222:7159","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:4801:1585","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:3184-0:4801:1585":{"id":"b:2:3184-0:4801:1585","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:4801:1585","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:3187:127","2:3188:1394"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4421:397":{"id":"0:4421:397","crate_id":0,"name":"clone","span":{"filename":"src/builder/value_parser.rs","begin":[868,9],"end":[868,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EnumValueParser","id":"0:4415:2173","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:469:3932":{"id":"0:469:3932","crate_id":0,"name":"get_long_help","span":{"filename":"src/builder/arg.rs","begin":[4287,4],"end":[4289,5]},"visibility":"public","docs":"Get the long help specified for this argument, if any\n\n# Examples\n\n```rust\n# use clap::Arg;\nlet arg = Arg::new(\"foo\").long_help(\"long help\");\nassert_eq!(Some(\"long help\"), arg.get_long_help());\n```\n","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:196:2057":{"id":"0:196:2057","crate_id":0,"name":"into_app_for_update","span":{"filename":"src/derive.rs","begin":[541,4],"end":[543,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Command","id":"0:755:1563","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9222:7159-0:4686:7087":{"id":"a:2:9222:7159-0:4686:7087","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9222:7159","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4686:7087","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:6845:10627":{"id":"1:6845:10627","crate_id":1,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6846:21419"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:982:5617":{"id":"0:982:5617","crate_id":0,"name":"get_opts","span":{"filename":"src/builder/command.rs","begin":[3540,4],"end":[3543,5]},"visibility":"public","docs":"Iterate through the *options*.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8565:157","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3816:1564","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}}}}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:128:2002":{"id":"0:128:2002","crate_id":0,"name":"parse","span":{"filename":"src/derive.rs","begin":[82,4],"end":[94,5]},"visibility":"default","docs":"Parse from `std::env::args_os()`, exit on error","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8436:7524":{"id":"2:8436:7524","crate_id":2,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8437:780","2:8438:1813"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8565:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13370:67024":{"id":"2:13370:67024","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:9223:7158":{"id":"2:9223:7158","crate_id":2,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:3368":{"id":"0:3368","crate_id":0,"name":null,"span":{"filename":"src/builder/action.rs","begin":[23,16],"end":[23,21]},"visibility":{"restricted":{"parent":"0:217:2150","path":"::builder::action"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]","#[allow(missing_copy_implementations)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10255:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgAction","id":"0:3347:1562","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:3369:648"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:614:1829":{"id":"0:614:1829","crate_id":0,"name":"arg","span":{"filename":"src/builder/arg_group.rs","begin":[162,4],"end":[165,5]},"visibility":"public","docs":"Adds an [argument] to this group by name\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ArgGroup};\nlet m = Command::new(\"myprog\")\n    .arg(Arg::new(\"flag\")\n        .short('f'))\n    .arg(Arg::new(\"color\")\n        .short('c'))\n    .group(ArgGroup::new(\"req_flags\")\n        .arg(\"flag\")\n        .arg(\"color\"))\n    .get_matches_from(vec![\"myprog\", \"-f\"]);\n// maybe we don't know which of the two flags was used...\nassert!(m.contains_id(\"req_flags\"));\n// but we can also check individually if needed\nassert!(m.contains_id(\"flag\"));\n```\n[argument]: crate::Arg","links":{"crate::Arg":"0:3816:1564"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["arg_id",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Key","id":"0:3235:2593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2206:7108":{"id":"0:2206:7108","crate_id":0,"name":"subcommand_name","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1050,4],"end":[1052,5]},"visibility":"public","docs":"The name of the current [subcommand].\n\nReturns `None` if the subcommand wasn't present at runtime,\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg, };\n let app_m = Command::new(\"git\")\n     .subcommand(Command::new(\"clone\"))\n     .subcommand(Command::new(\"push\"))\n     .subcommand(Command::new(\"commit\"))\n     .get_matches();\n\nmatch app_m.subcommand_name() {\n    Some(\"clone\")  => {}, // clone was used\n    Some(\"push\")   => {}, // push was used\n    Some(\"commit\") => {}, // commit was used\n    _              => {}, // Either no subcommand or one not tested for...\n}\n```\n[subcommand]: crate::Command::subcommand\n[`Command`]: crate::Command","links":{"crate::Command::subcommand":"0:4244:1577"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1391:2002":{"id":"0:1391:2002","crate_id":0,"name":"parse","span":{"filename":"src/builder/value_parser.rs","begin":[745,4],"end":[752,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["_cmd",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Command","id":"0:755:1563","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}],["_arg",{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Arg","id":"0:3816:1564","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["value",{"kind":"resolved_path","inner":{"name":"std::ffi::OsString","id":"1:2920:170","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Value","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:1362:2165","args":null,"param_names":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"crate::Error","id":"0:4640:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1429:6312":{"id":"0:1429:6312","crate_id":0,"name":"Value","span":{"filename":"src/builder/value_parser.rs","begin":[992,4],"end":[992,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"2:13385:1828":{"id":"2:13385:1828","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:15839:8315"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49290:8612","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3169-0:4462:2174":{"id":"b:2:3169-0:4462:2174","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FalseyValueParser","id":"0:4462:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3172:2288"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3184-0:4468:2172":{"id":"b:2:3184-0:4468:2172","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BoolishValueParser","id":"0:4468:2172","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3187:127","2:3188:1394"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:31801:68528":{"id":"2:31801:68528","crate_id":2,"name":"overflowing_rem","span":null,"visibility":"public","docs":"Calculates the remainder when `self` is divided by `rhs`.\n\nReturns a tuple of the remainder after dividing along with a boolean\nindicating whether an arithmetic overflow would occur. Note that for\nunsigned integers overflow never occurs, so the second value is\nalways `false`.\n\n# Panics\n\nThis function will panic if `rhs` is 0.\n\n# Examples\n\nBasic usage\n\n```\nassert_eq!(5u64.overflowing_rem(2), (1, false));\n```","links":{},"attrs":["#[stable(feature = \"wrapping\", since = \"1.7.0\")]","#[rustc_const_stable(feature = \"const_overflowing_int_methods\", since =\n\"1.52.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"u64"},{"kind":"primitive","inner":"bool"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:1079:1759":{"id":"1:1079:1759","crate_id":1,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:1080:4115","1:1081:11302","1:1082:16223","1:1083:2538","1:1084:1760","1:1085:16224","1:1086:16225"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:158:2025":{"id":"0:158:2025","crate_id":0,"name":"command_for_update","span":{"filename":"src/derive.rs","begin":[269,4],"end":[272,5]},"visibility":"default","docs":"Build a [`Command`] that can update `self`.\n\nSee [`FromArgMatches::update_from_arg_matches_mut`] for updating `self`.","links":{"`Command`":"0:755:1563","`FromArgMatches::update_from_arg_matches_mut`":"0:162:1573"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Command","id":"0:755:1563","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3240:200-0:4750:7086":{"id":"a:2:3240:200-0:4750:7086","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3240:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValuesRef","id":"0:4750:7086","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:31738:68480":{"id":"2:31738:68480","crate_id":2,"name":"count_zeros","span":null,"visibility":"public","docs":"Returns the number of zeros in the binary representation of `self`.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(u64::MAX.count_zeros(), 0);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1518:59":{"id":"0:1518:59","crate_id":0,"name":"default","span":{"filename":"src/builder/value_parser.rs","begin":[1600,4],"end":[1602,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:787-0:4244:1577":{"id":"b:5:787-0:4244:1577","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:783:211","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:4244:1577","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["5:789:4115","5:790:4707","5:791:9628"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3184-0:3903:1565":{"id":"b:2:3184-0:3903:1565","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3903:1565","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["2:3187:127","2:3188:1394"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3169-0:4409:2177":{"id":"b:2:3169-0:4409:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"PathBufValueParser","id":"0:4409:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3172:2288"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:5:6406-0:4686:7087":{"id":"b:5:6406-0:4686:7087","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10262:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"ToString","id":"5:6404:212","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4686:7087","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:6408:1376"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:384:3197":{"id":"0:384:3197","crate_id":0,"name":"allow_invalid_utf8","span":{"filename":"src/builder/arg.rs","begin":[1743,4],"end":[1749,5]},"visibility":"public","docs":"Deprecated, replaced with [`Arg::value_parser(...)`] with either [`ValueParser::os_string()`][crate::builder::ValueParser::os_string]\nor [`ValueParser::path_buf()`][crate::builder::ValueParser::path_buf]","links":{"crate::builder::ValueParser::os_string":"0:1294:2166","crate::builder::ValueParser::path_buf":"0:1294:2166"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1315:6349":{"id":"0:1315:6349","crate_id":0,"name":"path_buf","span":{"filename":"src/builder/value_parser.rs","begin":[218,4],"end":[220,5]},"visibility":"public","docs":"[`PathBuf`][std::path::PathBuf] parser for argument values\n\n# Example\n\n```rust\n# use std::path::PathBuf;\n# use std::path::Path;\nlet mut cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"output\")\n            .value_parser(clap::value_parser!(PathBuf))\n            .required(true)\n    );\n\nlet m = cmd.try_get_matches_from_mut([\"cmd\", \"hello.txt\"]).unwrap();\nlet port: &PathBuf = m.get_one(\"output\")\n    .expect(\"required\");\nassert_eq!(port, Path::new(\"hello.txt\"));\n\nassert!(cmd.try_get_matches_from_mut([\"cmd\", \"\"]).is_err());\n```","links":{"std::path::PathBuf":"1:7318:176"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4443:648":{"id":"0:4443:648","crate_id":0,"name":"fmt","span":{"filename":"src/builder/value_parser.rs","begin":[1090,22],"end":[1090,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10215:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10204:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1533:59":{"id":"0:1533:59","crate_id":0,"name":"default","span":{"filename":"src/builder/value_parser.rs","begin":[1699,4],"end":[1701,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13457:67038":{"id":"2:13457:67038","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"2:12997:8603","prim@char":"1:15839:8315"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:8597","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:8597","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedSearcher","id":"2:13027:8596","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2335:909":{"id":"0:2335:909","crate_id":0,"name":"next","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1662,4],"end":[1664,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9222:7159-0:4444:2163":{"id":"a:2:9222:7159-0:4444:2163","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9222:7159","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9222:7159","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"RangedU64ValueParser","id":"0:4444:2163","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1342:669":{"id":"0:1342:669","crate_id":0,"name":"from","span":{"filename":"src/builder/value_parser.rs","begin":[508,4],"end":[511,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["values",{"kind":"array","inner":{"type":{"kind":"generic","inner":"P"},"len":"C"}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4409:2177":{"id":"0:4409:2177","crate_id":0,"name":"PathBufValueParser","span":{"filename":"src/builder/value_parser.rs","begin":[766,0],"end":[766,32]},"visibility":"public","docs":"Implementation for [`ValueParser::path_buf`]\n\nUseful for composing new [`TypedValueParser`]s","links":{"`ValueParser::path_buf`":"0:1294:2166","`TypedValueParser`":"0:1362:2165"},"attrs":["#[non_exhaustive]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":false,"fields":[],"impls":["0:1394","a:2:9222:7159-0:4409:2177","a:2:3252:209-0:4409:2177","a:2:3240:200-0:4409:2177","a:2:9223:7158-0:4409:2177","a:2:3281:5920-0:4409:2177","b:2:2843-0:4409:2177","b:2:3169-0:4409:2177","b:2:3173-0:4409:2177","b:2:3184-0:4409:2177","b:2:3969-0:4409:2177","b:2:2846-0:4409:2177","b:2:3179-0:4409:2177","b:5:787-0:4409:2177","0:4410","0:4411","0:4413","0:1396","0:1401"]}},"0:4402:648":{"id":"0:4402:648","crate_id":0,"name":"fmt","span":{"filename":"src/builder/value_parser.rs","begin":[674,22],"end":[674,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10215:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10204:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1543:2167":{"id":"0:1543:2167","crate_id":0,"name":"ValueParserFactory","span":{"filename":"src/builder/value_parser.rs","begin":[1814,0],"end":[1823,1]},"visibility":"public","docs":"Register a type with [value_parser!][crate::value_parser!]\n\n# Example\n\n```rust\n#[derive(Copy, Clone, Debug)]\npub struct Custom(u32);\n\nimpl clap::builder::ValueParserFactory for Custom {\n    type Parser = CustomValueParser;\n    fn value_parser() -> Self::Parser {\n        CustomValueParser\n    }\n}\n\n#[derive(Clone, Debug)]\npub struct CustomValueParser;\nimpl clap::builder::TypedValueParser for CustomValueParser {\n    type Value = Custom;\n\n    fn parse_ref(\n        &self,\n        cmd: &clap::Command,\n        arg: Option<&clap::Arg>,\n        value: &std::ffi::OsStr,\n    ) -> Result<Self::Value, clap::Error> {\n        let inner = clap::value_parser!(u32);\n        let val = inner.parse_ref(cmd, arg, value)?;\n        Ok(Custom(val))\n    }\n}\n\nlet parser: CustomValueParser = clap::value_parser!(Custom);\n```","links":{"crate::value_parser!":"0:1606:2158"},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:1544:1574","0:1545:2158"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:1546","0:1549","0:1552","0:1555","0:1558","0:1561","0:1564","0:1567","0:1570","0:1573","0:1576","0:1579"]}},"0:757":{"id":"0:757","crate_id":0,"name":null,"span":{"filename":"src/builder/command.rs","begin":[117,0],"end":[893,1]},"visibility":{"restricted":{"parent":"0:649:1810","path":"::builder::command"}},"docs":"# Basic API","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:4244:1577","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["0:759:907","0:763:1829","0:765:287","0:768:4572","0:772:4582","0:777:1908","0:779:2619","0:782:1909","0:784:4523","0:787:1834","0:788:1566","0:790:2004","0:791:4668","0:793:2012","0:794:2019","0:798:2022","0:801:4669","0:805:4718","0:806:4731","0:807:4724","0:809:4744","0:811:4755","0:812:4760","0:813:4763"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:5:787-0:5071:1570":{"id":"b:5:787-0:5071:1570","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:783:211","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:5071:1570","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:789:4115","5:790:4707","5:791:9628"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:9223:7158-0:4773:1588":{"id":"a:2:9223:7158-0:4773:1588","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9223:7158","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:4773:1588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"26:29:8233":{"id":"26:29:8233","crate_id":26,"name":"WriteColor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["26:30:10196","26:31:6752","26:32:8245","26:33:10197"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Write","id":"1:4669:1932","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:2:3184-0:4706:1568":{"id":"b:2:3184-0:4706:1568","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4706:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3187:127","2:3188:1394"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"22:76:12093":{"id":"22:76:12093","crate_id":22,"name":"OsStrBytes","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["22:77:68345","22:80:68346"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"22:114:10621","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:783:211","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:610:1838":{"id":"0:610:1838","crate_id":0,"name":"id","span":{"filename":"src/builder/arg_group.rs","begin":[125,4],"end":[129,5]},"visibility":"public","docs":"Sets the group name.\n\n# Examples\n\n```rust\n# use clap::{Command, ArgGroup};\nArgGroup::default().name(\"config\")\n# ;\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["n",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2170:1737":{"id":"0:2170:1737","crate_id":0,"name":"value_of_t","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[484,4],"end":[501,5]},"visibility":"public","docs":"Deprecated, replaced with [`ArgMatches::get_one()`]","links":{"`ArgMatches::get_one()`":"0:4706:1568"},"attrs":["#[track_caller]","#![allow(deprecated)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"R"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4640:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12936:1756","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"R"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12936:1756","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10262:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2327":{"id":"0:2327","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1623,0],"end":[1631,1]},"visibility":{"restricted":{"parent":"0:2077:7161","path":"::parser::matches::arg_matches"}},"docs":"Creates an empty iterator.","links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Default","id":"2:3218:115","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OsValues","id":"0:4791:1586","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"items":["0:2328:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:9223:7158-0:3386:1579":{"id":"a:2:9223:7158-0:3386:1579","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9223:7158","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:3386:1579","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:9223:7158-0:4791:1586":{"id":"a:2:9223:7158-0:4791:1586","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9223:7158","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OsValues","id":"0:4791:1586","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"b:2:3184-0:4474:2175":{"id":"b:2:3184-0:4474:2175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"NonEmptyStringValueParser","id":"0:4474:2175","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3187:127","2:3188:1394"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:8376:8410":{"id":"2:8376:8410","crate_id":2,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8378:2723","2:8380:9594","2:8381:9595"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13443:67032":{"id":"2:13443:67032","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12997:8603","`DoubleEndedIterator`":"2:8411:120","str::rmatch_indices":"1:15845:8320","prim@char":"1:15839:8315"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:49470:8622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:8597","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:545":{"id":"0:545","crate_id":0,"name":null,"span":{"filename":"src/builder/arg.rs","begin":[4940,0],"end":[5066,1]},"visibility":{"restricted":{"parent":"0:242:1829","path":"::builder::arg"}},"docs":"# Internally used only","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3816:1564","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3172:2288":{"id":"2:3172:2288","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:3146:135"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2174:1740":{"id":"0:2174:1740","crate_id":0,"name":"value_of_t_or_exit","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[509,4],"end":[516,5]},"visibility":"public","docs":"Deprecated, replaced with [`ArgMatches::get_one()`]","links":{"`ArgMatches::get_one()`":"0:4706:1568"},"attrs":["#[track_caller]","#![allow(deprecated)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"generic","inner":"R"},"c_variadic":false},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12936:1756","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"R"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12936:1756","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10262:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2846-0:4462:2174":{"id":"b:2:2846-0:4462:2174","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2840:8484","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FalseyValueParser","id":"0:4462:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2848:21287"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4520:6770":{"id":"0:4520:6770","crate_id":0,"name":"PriorArg","span":{"filename":"src/error/context.rs","begin":[10,4],"end":[10,12]},"visibility":"default","docs":"Existing arguments","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:13431:67029":{"id":"2:13431:67029","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:8597","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3684:8470":{"id":"2:3684:8470","crate_id":2,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RangeBounds","id":"2:3615:6281","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:210:2115":{"id":"0:210:2115","crate_id":0,"name":"augment_subcommands","span":{"filename":"src/derive.rs","begin":[571,4],"end":[573,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["cmd",{"kind":"resolved_path","inner":{"name":"Command","id":"0:755:1563","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Command","id":"0:755:1563","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:608:907":{"id":"0:608:907","crate_id":0,"name":"new","span":{"filename":"src/builder/arg_group.rs","begin":[111,4],"end":[113,5]},"visibility":"public","docs":"Create a `ArgGroup` using a unique name.\n\nThe name will be used to get values from the group or refer to the group inside of conflict\nand requirement rules.\n\n# Examples\n\n```rust\n# use clap::{Command, ArgGroup};\nArgGroup::new(\"config\")\n# ;\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["n",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:336:2826":{"id":"0:336:2826","crate_id":0,"name":"last","span":{"filename":"src/builder/arg.rs","begin":[573,4],"end":[579,5]},"visibility":"public","docs":"This arg is the last, or final, positional argument (i.e. has the highest\nindex) and is *only* able to be accessed via the `--` syntax (i.e. `$ prog args --\nlast_arg`).\n\nEven, if no other arguments are left to parse, if the user omits the `--` syntax\nthey will receive an [`UnknownArgument`] error. Setting an argument to `.last(true)` also\nallows one to access this arg early using the `--` syntax. Accessing an arg early, even with\nthe `--` syntax is otherwise not possible.\n\n**NOTE:** This will change the usage string to look like `$ prog [OPTIONS] [-- <ARG>]` if\n`ARG` is marked as `.last(true)`.\n\n**NOTE:** This setting will imply [`crate::Command::dont_collapse_args_in_usage`] because failing\nto set this can make the usage string very confusing.\n\n**NOTE**: This setting only applies to positional arguments, and has no effect on OPTIONS\n\n**NOTE:** Setting this requires [`Arg::takes_value`]\n\n**CAUTION:** Using this setting *and* having child subcommands is not\nrecommended with the exception of *also* using\n[`crate::Command::args_conflicts_with_subcommands`]\n(or [`crate::Command::subcommand_negates_reqs`] if the argument marked `Last` is also\nmarked [`Arg::required`])\n\n# Examples\n\n```rust\n# use clap::Arg;\nArg::new(\"args\")\n    .takes_value(true)\n    .last(true)\n# ;\n```\n\nSetting `last` ensures the arg has the highest [index] of all positional args\nand requires that the `--` syntax be used to access it early.\n\n```rust\n# use clap::{Command, Arg};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"first\"))\n    .arg(Arg::new(\"second\"))\n    .arg(Arg::new(\"third\")\n        .takes_value(true)\n        .last(true))\n    .try_get_matches_from(vec![\n        \"prog\", \"one\", \"--\", \"three\"\n    ]);\n\nassert!(res.is_ok());\nlet m = res.unwrap();\nassert_eq!(m.value_of(\"third\"), Some(\"three\"));\nassert!(m.value_of(\"second\").is_none());\n```\n\nEven if the positional argument marked `Last` is the only argument left to parse,\nfailing to use the `--` syntax results in an error.\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"first\"))\n    .arg(Arg::new(\"second\"))\n    .arg(Arg::new(\"third\")\n        .takes_value(true)\n        .last(true))\n    .try_get_matches_from(vec![\n        \"prog\", \"one\", \"two\", \"three\"\n    ]);\n\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind(), ErrorKind::UnknownArgument);\n```\n[index]: Arg::index()\n[`UnknownArgument`]: crate::ErrorKind::UnknownArgument","links":{"crate::ErrorKind::UnknownArgument":"0:4587:1584","`Arg::required`":"0:3816:1564","Arg::index()":"0:3816:1564","`crate::Command::dont_collapse_args_in_usage`":"0:4244:1577","`Arg::takes_value`":"0:3816:1564","`crate::Command::args_conflicts_with_subcommands`":"0:4244:1577","`crate::Command::subcommand_negates_reqs`":"0:4244:1577"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13446:67033":{"id":"2:13446:67033","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12997:8603","`DoubleEndedIterator`":"2:8411:120","prim@char":"1:15839:8315","str::match_indices":"1:15845:8320"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:49488:8623","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:8597","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:8597","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:8598","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:7891:8706":{"id":"2:7891:8706","crate_id":2,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7892:21294","2:7893:21295","2:7894:21296","2:7895:21297","2:7896:21298","2:7897:21299","2:7898:21300"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2938:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:1921":{"id":"0:1921","crate_id":0,"name":null,"span":{"filename":"src/error/mod.rs","begin":[1007,0],"end":[1018,1]},"visibility":{"restricted":{"parent":"0:1777:1566","path":"::error"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10262:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4640:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:1922:648"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:623:3833":{"id":"0:623:3833","crate_id":0,"name":"conflicts_with","span":{"filename":"src/builder/arg_group.rs","begin":[393,4],"end":[396,5]},"visibility":"public","docs":"Specify an argument or group that must **not** be present when this group is.\n\nExclusion (aka conflict) rules function just like [argument exclusion rules], you can name\nother arguments or groups that must *not* be present when one of the arguments from this\ngroup are used.\n\n**NOTE:** The name provided may be an argument, or group name\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ArgGroup, ErrorKind};\nlet result = Command::new(\"myprog\")\n    .arg(Arg::new(\"flag\")\n        .short('f'))\n    .arg(Arg::new(\"color\")\n        .short('c'))\n    .arg(Arg::new(\"debug\")\n        .short('d'))\n    .group(ArgGroup::new(\"req_flags\")\n        .args(&[\"flag\", \"color\"])\n        .conflicts_with(\"debug\"))\n    .try_get_matches_from(vec![\"myprog\", \"-c\", \"-d\"]);\n// because we used an arg from the group, and the group conflicts with \"-d\", it's an error\nassert!(result.is_err());\nlet err = result.unwrap_err();\nassert_eq!(err.kind(), ErrorKind::ArgumentConflict);\n```\n[argument exclusion rules]: crate::Arg::conflicts_with()","links":{"crate::Arg::conflicts_with()":"0:3816:1564"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["id",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Key","id":"0:3235:2593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:31832:68552":{"id":"2:31832:68552","crate_id":2,"name":"max_value","span":null,"visibility":"public","docs":"New code should prefer to use\n[`u64::MAX`] instead.\n\nReturns the largest value that can be represented by this integer type.","links":{"`u64::MAX`":"1:15859:8332"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_promotable]","#[rustc_const_stable(feature = \"const_max_value\", since = \"1.32.0\")]","#[deprecated(since = \"TBD\", note =\n\"replaced by the `MAX` associated constant on this type\")]"],"deprecation":{"since":"TBD","note":"replaced by the `MAX` associated constant on this type"},"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:501:4002":{"id":"0:501:4002","crate_id":0,"name":"is_allow_invalid_utf8_set","span":{"filename":"src/builder/arg.rs","begin":[4559,4],"end":[4561,5]},"visibility":"public","docs":"Deprecated, replaced with [`Arg::get_value_parser()`","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3240:200-0:4456:2171":{"id":"a:2:3240:200-0:4456:2171","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3240:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BoolValueParser","id":"0:4456:2171","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1334":{"id":"0:1334","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[443,0],"end":[448,1]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":"Create an `i64` [`ValueParser`] from a `..=M` range\n\nSee [`RangedI64ValueParser`] for more control over the output type.\n\nSee also [`RangedU64ValueParser`]\n\n# Examples\n\n```rust\nlet mut cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"port\")\n            .long(\"port\")\n            .value_parser(..=3000)\n            .takes_value(true)\n            .required(true)\n    );\n\nlet m = cmd.try_get_matches_from_mut([\"cmd\", \"--port\", \"80\"]).unwrap();\nlet port: i64 = *m.get_one(\"port\")\n    .expect(\"required\");\nassert_eq!(port, 80);\n```","links":{"`RangedU64ValueParser`":"0:4444:2163","`ValueParser`":"0:1294:2166","`RangedI64ValueParser`":"0:4432:2162"},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"RangeToInclusive","id":"2:45829:189","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i64"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1294:2166","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:1335:669"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4377:6264":{"id":"0:4377:6264","crate_id":0,"name":"Hostname","span":{"filename":"src/builder/value_hint.rs","begin":[62,4],"end":[62,12]},"visibility":"default","docs":"Host name of a computer.\nShells usually parse `/etc/hosts` and `.ssh/known_hosts` to complete hostnames.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:356:3054":{"id":"0:356:3054","crate_id":0,"name":"number_of_values","span":{"filename":"src/builder/arg.rs","begin":[1232,4],"end":[1235,5]},"visibility":"public","docs":"The number of values allowed for this argument.\n\nFor example, if you had a\n`-f <file>` argument where you wanted exactly 3 'files' you would set\n`.number_of_values(3)`, and this argument wouldn't be satisfied unless the user provided\n3 and only 3 values.\n\n**NOTE:** Does *not* require [`Arg::multiple_occurrences(true)`] to be set. Setting\n[`Arg::multiple_occurrences(true)`] would allow `-f <file> <file> <file> -f <file> <file> <file>` where\nas *not* setting it would only allow one occurrence of this argument.\n\n**NOTE:** implicitly sets [`Arg::takes_value(true)`] and [`Arg::multiple_values(true)`].\n\n# Examples\n\n```rust\n# use clap::{Command, Arg};\nArg::new(\"file\")\n    .short('f')\n    .number_of_values(3);\n```\n\nNot supplying the correct number of values is an error\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"file\")\n        .takes_value(true)\n        .number_of_values(2)\n        .short('F'))\n    .try_get_matches_from(vec![\n        \"prog\", \"-F\", \"file1\"\n    ]);\n\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind(), ErrorKind::WrongNumberOfValues);\n```\n[`Arg::multiple_occurrences(true)`]: Arg::multiple_occurrences()","links":{"Arg::multiple_occurrences()":"0:3816:1564"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["qty",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3184-0:3386:1579":{"id":"b:2:3184-0:3386:1579","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:3386:1579","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3187:127","2:3188:1394"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2843-0:4456:2171":{"id":"b:2:2843-0:4456:2171","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2837:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BoolValueParser","id":"0:4456:2171","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2845:2590"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4715:397":{"id":"0:4715:397","crate_id":0,"name":"clone","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[67,16],"end":[67,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4706:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3179-0:1294:2166":{"id":"b:2:3179-0:1294:2166","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3149:217","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1294:2166","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3182:127","2:3183:1395"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1556:1574":{"id":"0:1556:1574","crate_id":0,"name":"Parser","span":{"filename":"src/builder/value_parser.rs","begin":[1843,4],"end":[1843,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1294:2166","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"b:23:25-0:4823:1587":{"id":"b:23:25-0:4823:1587","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.8.1/src/equivalent.rs","begin":[18,0],"end":[18,46]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2897:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2837:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Q"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Equivalent","id":"23:22:8796","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4823:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["23:28:8790"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"Q"}}},"a:2:3240:200-0:4298:1582":{"id":"a:2:3240:200-0:4298:1582","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3240:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:4298:1582","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:3184-0:4515:6699":{"id":"b:2:3184-0:4515:6699","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:4515:6699","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3187:127","2:3188:1394"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3184-0:4823:1587":{"id":"b:2:3184-0:4823:1587","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4823:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3187:127","2:3188:1394"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3248:207":{"id":"2:3248:207","crate_id":2,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:3973:3036":{"id":"0:3973:3036","crate_id":0,"name":"MultipleValues","span":{"filename":"src/builder/arg_settings.rs","begin":[52,4],"end":[52,18]},"visibility":"default","docs":"Deprecated, replaced with [`Arg::multiple_values`] and [`Arg::is_multiple_values_set`]","links":{"`Arg::is_multiple_values_set`":"0:3816:1564","`Arg::multiple_values`":"0:3816:1564"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:805:4718":{"id":"0:805:4718","crate_id":0,"name":"print_help","span":{"filename":"src/builder/command.rs","begin":[745,4],"end":[753,5]},"visibility":"public","docs":"Prints the short help message (`-h`) to [`io::stdout()`].\n\nSee also [`Command::print_long_help`].\n\n# Examples\n\n```rust\n# use clap::Command;\nlet mut cmd = Command::new(\"myprog\");\ncmd.print_help();\n```\n[`io::stdout()`]: std::io::stdout()","links":{"std::io::stdout()":"1:4423:8235","`Command::print_long_help`":"0:4244:1577"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:4026:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3179-0:4397:2164":{"id":"b:2:3179-0:4397:2164","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3149:217","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"StringValueParser","id":"0:4397:2164","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3182:127","2:3183:1395"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:314:907":{"id":"0:314:907","crate_id":0,"name":"new","span":{"filename":"src/builder/arg.rs","begin":[122,4],"end":[124,5]},"visibility":"public","docs":"Create a new [`Arg`] with a unique name.\n\nThe name is used to check whether or not the argument was used at\nruntime, get values, set relationships with other args, etc..\n\n**NOTE:** In the case of arguments that take values (i.e. [`Arg::takes_value(true)`])\nand positional arguments (i.e. those without a preceding `-` or `--`) the name will also\nbe displayed when the user prints the usage/help information of the program.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg};\nArg::new(\"config\")\n# ;\n```\n[`Arg::takes_value(true)`]: Arg::takes_value()","links":{"Arg::takes_value()":"0:3816:1564","`Arg`":"0:3816:1564"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["n",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:998:4016":{"id":"0:998:4016","crate_id":0,"name":"is_next_line_help_set","span":{"filename":"src/builder/command.rs","begin":[3657,4],"end":[3659,5]},"visibility":"public","docs":"Report whether [`Command::next_line_help`] is set","links":{"`Command::next_line_help`":"0:4244:1577"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:355:3035":{"id":"0:355:3035","crate_id":0,"name":"multiple_values","span":{"filename":"src/builder/arg.rs","begin":[1183,4],"end":[1189,5]},"visibility":"public","docs":"Specifies that the argument may have an unknown number of values\n\nWithout any other settings, this argument may appear only *once*.\n\nFor example, `--opt val1 val2` is allowed, but `--opt val1 val2 --opt val3` is not.\n\n**NOTE:** Setting this requires [`Arg::takes_value`].\n\n**WARNING:**\n\nSetting `multiple_values` for an argument that takes a value, but with no other details can\nbe dangerous in some circumstances. Because multiple values are allowed,\n`--option val1 val2 val3` is perfectly valid. Be careful when designing a CLI where\npositional arguments are *also* expected as `clap` will continue parsing *values* until one\nof the following happens:\n\n- It reaches the [maximum number of values]\n- It reaches a [specific number of values]\n- It finds another flag or option (i.e. something that starts with a `-`)\n- It reaches a [value terminator][Arg::value_terminator] is reached\n\nAlternatively, [require a delimiter between values][Arg::require_delimiter].\n\n**WARNING:**\n\nWhen using args with `multiple_values` and [`subcommands`], one needs to consider the\npossibility of an argument value being the same as a valid subcommand. By default `clap` will\nparse the argument in question as a value *only if* a value is possible at that moment.\nOtherwise it will be parsed as a subcommand. In effect, this means using `multiple_values` with no\nadditional parameters and a value that coincides with a subcommand name, the subcommand\ncannot be called unless another argument is passed between them.\n\nAs an example, consider a CLI with an option `--ui-paths=<paths>...` and subcommand `signer`\n\nThe following would be parsed as values to `--ui-paths`.\n\n```text\n$ program --ui-paths path1 path2 signer\n```\n\nThis is because `--ui-paths` accepts multiple values. `clap` will continue parsing values\nuntil another argument is reached and it knows `--ui-paths` is done parsing.\n\nBy adding additional parameters to `--ui-paths` we can solve this issue. Consider adding\n[`Arg::number_of_values(1)`] or using *only* [`ArgAction::Append`]. The following are all\nvalid, and `signer` is parsed as a subcommand in the first case, but a value in the second\ncase.\n\n```text\n$ program --ui-paths path1 signer\n$ program --ui-paths path1 --ui-paths signer signer\n```\n\n# Examples\n\nAn example with options\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"file\")\n        .takes_value(true)\n        .multiple_values(true)\n        .short('F'))\n    .get_matches_from(vec![\n        \"prog\", \"-F\", \"file1\", \"file2\", \"file3\"\n    ]);\n\nassert!(m.contains_id(\"file\"));\nlet files: Vec<_> = m.values_of(\"file\").unwrap().collect();\nassert_eq!(files, [\"file1\", \"file2\", \"file3\"]);\n```\n\nAlthough `multiple_values` has been specified, we cannot use the argument more than once.\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"file\")\n        .takes_value(true)\n        .multiple_values(true)\n        .short('F'))\n    .try_get_matches_from(vec![\n        \"prog\", \"-F\", \"file1\", \"-F\", \"file2\", \"-F\", \"file3\"\n    ]);\n\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind(), ErrorKind::UnexpectedMultipleUsage)\n```\n\nA common mistake is to define an option which allows multiple values, and a positional\nargument.\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"file\")\n        .takes_value(true)\n        .multiple_values(true)\n        .short('F'))\n    .arg(Arg::new(\"word\"))\n    .get_matches_from(vec![\n        \"prog\", \"-F\", \"file1\", \"file2\", \"file3\", \"word\"\n    ]);\n\nassert!(m.contains_id(\"file\"));\nlet files: Vec<_> = m.values_of(\"file\").unwrap().collect();\nassert_eq!(files, [\"file1\", \"file2\", \"file3\", \"word\"]); // wait...what?!\nassert!(!m.contains_id(\"word\")); // but we clearly used word!\n```\n\nThe problem is `clap` doesn't know when to stop parsing values for \"files\". This is further\ncompounded by if we'd said `word -F file1 file2` it would have worked fine, so it would\nappear to only fail sometimes...not good!\n\nA solution for the example above is to limit how many values with a [maximum], or [specific]\nnumber, or to say [`ArgAction::Append`] is ok, but multiple values is not.\n\n```rust\n# use clap::{Command, Arg, ArgAction};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"file\")\n        .takes_value(true)\n        .action(ArgAction::Append)\n        .short('F'))\n    .arg(Arg::new(\"word\"))\n    .get_matches_from(vec![\n        \"prog\", \"-F\", \"file1\", \"-F\", \"file2\", \"-F\", \"file3\", \"word\"\n    ]);\n\nassert!(m.contains_id(\"file\"));\nlet files: Vec<_> = m.values_of(\"file\").unwrap().collect();\nassert_eq!(files, [\"file1\", \"file2\", \"file3\"]);\nassert!(m.contains_id(\"word\"));\nassert_eq!(m.value_of(\"word\"), Some(\"word\"));\n```\n\nAs a final example, let's fix the above error and get a pretty message to the user :)\n\n```rust\n# use clap::{Command, Arg, ErrorKind, ArgAction};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"file\")\n        .takes_value(true)\n        .action(ArgAction::Append)\n        .short('F'))\n    .arg(Arg::new(\"word\"))\n    .try_get_matches_from(vec![\n        \"prog\", \"-F\", \"file1\", \"file2\", \"file3\", \"word\"\n    ]);\n\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind(), ErrorKind::UnknownArgument);\n```\n\n[`subcommands`]: crate::Command::subcommand()\n[`Arg::number_of_values(1)`]: Arg::number_of_values()\n[maximum number of values]: Arg::max_values()\n[specific number of values]: Arg::number_of_values()\n[maximum]: Arg::max_values()\n[specific]: Arg::number_of_values()","links":{"Arg::require_delimiter":"0:3816:1564","`ArgAction::Append`":"0:3347:1562","Arg::max_values()":"0:3816:1564","Arg::value_terminator":"0:3816:1564","crate::Command::subcommand()":"0:4244:1577","Arg::number_of_values()":"0:3816:1564","`Arg::takes_value`":"0:3816:1564"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:896:2737":{"id":"0:896:2737","crate_id":0,"name":"visible_alias","span":{"filename":"src/builder/command.rs","begin":[2520,4],"end":[2523,5]},"visibility":"public","docs":"Sets a visible alias to this subcommand.\n\nThis allows the subcommand to be accessed via *either* the\noriginal name or the given alias. This is more efficient and easier\nthan creating hidden subcommands as one only needs to check for\nthe existence of this command and not all aliased variants.\n\n**NOTE:** The alias defined with this method is *visible* from the help\nmessage and displayed as if it were just another regular subcommand. If\nlooking for an alias that will not be displayed in the help message, see\n[`Command::alias`].\n\n**NOTE:** When using aliases and checking for the existence of a\nparticular subcommand within an [`ArgMatches`] struct, one only needs to\nsearch for the original name and not all aliases.\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg};\nlet m = Command::new(\"myprog\")\n    .subcommand(Command::new(\"test\")\n        .visible_alias(\"do-stuff\"))\n    .get_matches_from(vec![\"myprog\", \"do-stuff\"]);\nassert_eq!(m.subcommand_name(), Some(\"test\"));\n```\n[`App::alias`]: Command::alias()","links":{"`Command::alias`":"0:4244:1577","`ArgMatches`":"0:4706:1568"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["name",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:793:2012":{"id":"0:793:2012","crate_id":0,"name":"try_get_matches","span":{"filename":"src/builder/command.rs","begin":[568,4],"end":[571,5]},"visibility":"public","docs":"Parse [`env::args_os`], returning a [`clap::Result`] on failure.\n\n**NOTE:** This method WILL NOT exit when `--help` or `--version` (or short versions) are\nused. It will return a [`clap::Error`], where the [`kind`] is a\n[`ErrorKind::DisplayHelp`] or [`ErrorKind::DisplayVersion`] respectively. You must call\n[`Error::exit`] or perform a [`std::process::exit`].\n\n# Panics\n\nIf contradictory arguments or settings exist.\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg};\nlet matches = Command::new(\"myprog\")\n    // Args and options go here...\n    .try_get_matches()\n    .unwrap_or_else(|e| e.exit());\n```\n[`env::args_os`]: std::env::args_os()\n[`Error::exit`]: crate::Error::exit()\n[`std::process::exit`]: std::process::exit()\n[`clap::Result`]: Result\n[`clap::Error`]: crate::Error\n[`kind`]: crate::Error\n[`ErrorKind::DisplayHelp`]: crate::ErrorKind::DisplayHelp\n[`ErrorKind::DisplayVersion`]: crate::ErrorKind::DisplayVersion","links":{"std::env::args_os()":"1:2465:4663","crate::Error::exit()":"0:4640:127","crate::Error":"0:4640:127","Result":"2:47483:195","crate::ErrorKind::DisplayHelp":"0:4587:1584","crate::ErrorKind::DisplayVersion":"0:4587:1584","std::process::exit()":"1:7778:2009"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"ClapResult","id":"0:1854:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4706:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13390:5724":{"id":"2:13390:5724","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:49574:8620","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3252:209-0:4244:1577":{"id":"a:2:3252:209-0:4244:1577","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3252:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:4244:1577","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:9223:7158-0:3816:1564":{"id":"a:2:9223:7158-0:3816:1564","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9223:7158","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3816:1564","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"a:2:9222:7159-0:3816:1564":{"id":"a:2:9222:7159-0:3816:1564","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9222:7159","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3816:1564","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"0:860:4978":{"id":"0:860:4978","crate_id":0,"name":"override_usage","span":{"filename":"src/builder/command.rs","begin":[1661,4],"end":[1664,5]},"visibility":"public","docs":"Overrides the `clap` generated usage string for help and error messages.\n\n**NOTE:** Using this setting disables `clap`s \"context-aware\" usage\nstrings. After this setting is set, this will be *the only* usage string\ndisplayed to the user!\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg};\nCommand::new(\"myprog\")\n    .override_usage(\"myapp [-clDas] <some_file>\")\n# ;\n```\n[`ArgMatches::usage`]: ArgMatches::usage()","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["usage",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4972:10667":{"id":"1:4972:10667","crate_id":1,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4973:7109","1:4974:16244"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:5:787-0:4415:2173":{"id":"b:5:787-0:4415:2173","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:783:211","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"EnumValueParser","id":"0:4415:2173","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}},"items":["5:789:4115","5:790:4707","5:791:9628"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1278":{"id":"0:1278","crate_id":0,"name":null,"span":{"filename":"src/builder/value_hint.rs","begin":[75,0],"end":[95,1]},"visibility":{"restricted":{"parent":"0:1272:2157","path":"::builder::value_hint"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12936:1756","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:4356:1583","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:1279:126","0:1280:1757"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3184-0:4444:2163":{"id":"b:2:3184-0:4444:2163","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"RangedU64ValueParser","id":"0:4444:2163","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["2:3187:127","2:3188:1394"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13406:9593":{"id":"2:13406:9593","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:47356:166","self::pattern":"2:12997:8603","prim@char":"1:15839:8315"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:8597","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:8597","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:8598","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4413":{"id":"0:4413","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[764,22],"end":[764,27]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10255:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"PathBufValueParser","id":"0:4409:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:4414:648"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3169-0:4474:2175":{"id":"b:2:3169-0:4474:2175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"NonEmptyStringValueParser","id":"0:4474:2175","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3172:2288"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13472:67040":{"id":"2:13472:67040","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:15839:8315","self::pattern":"2:12997:8603"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:8597","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4005:3173":{"id":"0:4005:3173","crate_id":0,"name":"IgnoreCase","span":{"filename":"src/builder/arg_settings.rs","begin":[201,4],"end":[201,14]},"visibility":"default","docs":"Deprecated, replaced with [`Arg::ignore_case`] and [`Arg::is_ignore_case_set`]","links":{"`Arg::ignore_case`":"0:3816:1564","`Arg::is_ignore_case_set`":"0:3816:1564"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:513:4030":{"id":"0:513:4030","crate_id":0,"name":"is_hide_long_help_set","span":{"filename":"src/builder/arg.rs","begin":[4639,4],"end":[4641,5]},"visibility":"public","docs":"Report whether [`Arg::hide_long_help`] is set","links":{"`Arg::hide_long_help`":"0:3816:1564"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3281:5920-0:3816:1564":{"id":"a:2:3281:5920-0:3816:1564","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3281:5920","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3816:1564","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1488":{"id":"0:1488","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1433,0],"end":[1440,1]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"std::convert::TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RangeBounds","id":"2:3615:6281","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"RangedU64ValueParser","id":"0:4444:2163","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["0:1491:669"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1563:2158":{"id":"0:1563:2158","crate_id":0,"name":"value_parser","span":{"filename":"src/builder/value_parser.rs","begin":[1858,4],"end":[1862,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"qualified_path","inner":{"name":"Parser","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:1543:2167","args":null,"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3184-0:4432:2162":{"id":"b:2:3184-0:4432:2162","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:4432:2162","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["2:3187:127","2:3188:1394"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1551:2158":{"id":"0:1551:2158","crate_id":0,"name":"value_parser","span":{"filename":"src/builder/value_parser.rs","begin":[1832,4],"end":[1834,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"qualified_path","inner":{"name":"Parser","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:1543:2167","args":null,"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:31789:68516":{"id":"2:31789:68516","crate_id":2,"name":"wrapping_shl","span":null,"visibility":"public","docs":"Panic-free bitwise shift-left; yields `self << mask(rhs)`,\nwhere `mask` removes any high-order bits of `rhs` that\nwould cause the shift to exceed the bitwidth of the type.\n\nNote that this is *not* the same as a rotate-left; the\nRHS of a wrapping shift-left is restricted to the range\nof the type, rather than the bits shifted out of the LHS\nbeing returned to the other end. The primitive integer\ntypes all implement a [`rotate_left`](Self::rotate_left) function,\nwhich may be what you want instead.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(1u64.wrapping_shl(7), 128);\nassert_eq!(1u64.wrapping_shl(128), 1);\n```","links":{"Self::rotate_left":"1:15859:8332"},"attrs":["#[stable(feature = \"num_wrapping\", since = \"1.2.0\")]","#[rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3544:4471":{"id":"2:3544:4471","crate_id":2,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3546:171","2:3547:740"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:398:3349":{"id":"0:398:3349","crate_id":0,"name":"default_values_os","span":{"filename":"src/builder/arg.rs","begin":[2205,4],"end":[2208,5]},"visibility":"public","docs":"Value for the argument when not present.\n\nSee [`Arg::default_values`].\n\n[`Arg::default_values`]: Arg::default_values()\n[`OsStr`]: std::ffi::OsStr","links":{"Arg::default_values()":"0:3816:1564"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["vals",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"1:2923:169","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:184:2002":{"id":"0:184:2002","crate_id":0,"name":"parse","span":{"filename":"src/derive.rs","begin":[511,4],"end":[513,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3969-0:3970:1581":{"id":"b:2:3969-0:3970:1581","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3967:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgSettings","id":"0:3970:1581","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3971:1408"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:31767:68503":{"id":"2:31767:68503","crate_id":2,"name":"checked_log10","span":null,"visibility":"public","docs":"Returns the base 10 logarithm of the number, rounded down.\n\nReturns `None` if the number is zero.\n\n# Examples\n\n```\n#![feature(int_log)]\nassert_eq!(10u64.checked_log10(), Some(1));\n```","links":{},"attrs":["#[unstable(feature = \"int_log\", issue = \"70887\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u32"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1224:3926":{"id":"0:1224:3926","crate_id":0,"name":"get_name","span":{"filename":"src/builder/possible_value.rs","begin":[143,4],"end":[145,5]},"visibility":"public","docs":"Get the name of the argument value","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5783:10640":{"id":"1:5783:10640","crate_id":1,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5784:6144"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:3281:5920-0:4587:1584":{"id":"a:2:3281:5920-0:4587:1584","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3281:5920","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4587:1584","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:3969-0:4244:1577":{"id":"b:2:3969-0:4244:1577","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3967:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:4244:1577","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["2:3971:1408"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1074:5764":{"id":"0:1074:5764","crate_id":0,"name":"build","span":{"filename":"src/builder/command.rs","begin":[4217,4],"end":[4220,5]},"visibility":"public","docs":"Prepare for introspecting on all included [`Command`]s\n\nCall this on the top-level [`Command`] when done building and before reading state for\ncases like completions, custom help output, etc.","links":{"`Command`":"0:755:1563"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:129:2011":{"id":"0:129:2011","crate_id":0,"name":"try_parse","span":{"filename":"src/derive.rs","begin":[97,4],"end":[100,5]},"visibility":"default","docs":"Parse from `std::env::args_os()`, return Err on error.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4640:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4020":{"id":"0:4020","crate_id":0,"name":null,"span":{"filename":"src/builder/arg_settings.rs","begin":[32,16],"end":[32,25]},"visibility":{"restricted":{"parent":"0:637:2154","path":"::builder::arg_settings"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2892:173","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ArgSettings","id":"0:3970:1581","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgSettings","id":"0:3970:1581","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:4021:593"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:2201:7465":{"id":"0:2201:7465","crate_id":0,"name":"remove_subcommand","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[979,4],"end":[981,5]},"visibility":"public","docs":"Return the name and `ArgMatches` of the current [subcommand].\n\nSubcommand values are put in a child [`ArgMatches`]\n\nReturns `None` if the subcommand wasn't present at runtime,\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg, };\n let mut app_m = Command::new(\"git\")\n     .subcommand(Command::new(\"clone\"))\n     .subcommand(Command::new(\"push\"))\n     .subcommand(Command::new(\"commit\"))\n     .subcommand_required(true)\n     .get_matches();\n\nlet (name, sub_m) = app_m.remove_subcommand().expect(\"required\");\nmatch (name.as_str(), sub_m) {\n    (\"clone\",  sub_m) => {}, // clone was used\n    (\"push\",   sub_m) => {}, // push was used\n    (\"commit\", sub_m) => {}, // commit was used\n    (name, _)         => unimplemented!(\"{}\", name),\n}\n```\n\nAnother useful scenario is when you want to support third party, or external, subcommands.\nIn these cases you can't know the subcommand name ahead of time, so use a variable instead\nwith pattern matching!\n\n```rust\n# use clap::Command;\n// Assume there is an external subcommand named \"subcmd\"\nlet mut app_m = Command::new(\"myprog\")\n    .allow_external_subcommands(true)\n    .get_matches_from(vec![\n        \"myprog\", \"subcmd\", \"--option\", \"value\", \"-fff\", \"--flag\"\n    ]);\n\n// All trailing arguments will be stored under the subcommand's sub-matches using an empty\n// string argument name\nmatch app_m.remove_subcommand() {\n    Some((external, mut sub_m)) => {\n         let ext_args: Vec<String> = sub_m.remove_many(\"\")\n            .expect(\"`file`is required\")\n            .collect();\n         assert_eq!(external, \"subcmd\");\n         assert_eq!(ext_args, [\"--option\", \"value\", \"-fff\", \"--flag\"]);\n    },\n    _ => {},\n}\n```\n[subcommand]: crate::Command::subcommand","links":{"`ArgMatches`":"0:4706:1568","crate::Command::subcommand":"0:4244:1577"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4706:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4762:648":{"id":"0:4762:648","crate_id":0,"name":"fmt","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1399,16],"end":[1399,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10215:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10204:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3169-0:4763:7085":{"id":"b:2:3169-0:4763:7085","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"RawValues","id":"0:4763:7085","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:3172:2288"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4616:6808":{"id":"0:4616:6808","crate_id":0,"name":"UnexpectedMultipleUsage","span":{"filename":"src/error/kind.rs","begin":[287,4],"end":[287,27]},"visibility":"default","docs":"Occurs when the user provides multiple values to an argument which doesn't allow that.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet result = Command::new(\"prog\")\n    .arg(Arg::new(\"debug\")\n        .long(\"debug\")\n        .multiple_occurrences(false))\n    .try_get_matches_from(vec![\"prog\", \"--debug\", \"--debug\"]);\nassert!(result.is_err());\nassert_eq!(result.unwrap_err().kind(), ErrorKind::UnexpectedMultipleUsage);\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"a:2:9223:7158-0:4587:1584":{"id":"a:2:9223:7158-0:4587:1584","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9223:7158","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4587:1584","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4318:894":{"id":"0:4318:894","crate_id":0,"name":"ne","span":{"filename":"src/builder/possible_value.rs","begin":[29,32],"end":[29,41]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:4298:1582","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3393:2330":{"id":"0:3393:2330","crate_id":0,"name":"AllowNegativeNumbers","span":{"filename":"src/builder/app_settings.rs","begin":[102,4],"end":[102,24]},"visibility":"default","docs":"Deprecated, replaced with [`Command::allow_negative_numbers`] and\n[`Command::is_allow_negative_numbers_set`]","links":{"`Command::allow_negative_numbers`":"0:4244:1577","`Command::is_allow_negative_numbers_set`":"0:4244:1577"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:4810:648":{"id":"0:4810:648","crate_id":0,"name":"fmt","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1653,16],"end":[1653,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10215:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10204:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:343:2901":{"id":"0:343:2901","crate_id":0,"name":"max_occurrences","span":{"filename":"src/builder/arg.rs","begin":[813,4],"end":[820,5]},"visibility":"public","docs":"Deprecated, for flags this is replaced with `action(ArgAction::Count).value_parser(value_parser!(u8).range(..max))`","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["qty",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3483:8409":{"id":"2:3483:8409","crate_id":2,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3484:567"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:392:3306":{"id":"0:392:3306","crate_id":0,"name":"value_terminator","span":{"filename":"src/builder/arg.rs","begin":[2072,4],"end":[2075,5]},"visibility":"public","docs":"Sentinel to **stop** parsing multiple values of a give argument.\n\nBy default when\none sets [`multiple_values(true)`] on an argument, clap will continue parsing values for that\nargument until it reaches another valid argument, or one of the other more specific settings\nfor multiple values is used (such as [`min_values`], [`max_values`] or\n[`number_of_values`]).\n\n**NOTE:** This setting only applies to [options] and [positional arguments]\n\n**NOTE:** When the terminator is passed in on the command line, it is **not** stored as one\nof the values\n\n# Examples\n\n```rust\n# use clap::{Command, Arg};\nArg::new(\"vals\")\n    .takes_value(true)\n    .multiple_values(true)\n    .value_terminator(\";\")\n# ;\n```\n\nThe following example uses two arguments, a sequence of commands, and the location in which\nto perform them\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"cmds\")\n        .takes_value(true)\n        .multiple_values(true)\n        .allow_hyphen_values(true)\n        .value_terminator(\";\"))\n    .arg(Arg::new(\"location\"))\n    .get_matches_from(vec![\n        \"prog\", \"find\", \"-type\", \"f\", \"-name\", \"special\", \";\", \"/home/clap\"\n    ]);\nlet cmds: Vec<_> = m.values_of(\"cmds\").unwrap().collect();\nassert_eq!(&cmds, &[\"find\", \"-type\", \"f\", \"-name\", \"special\"]);\nassert_eq!(m.value_of(\"location\"), Some(\"/home/clap\"));\n```\n[options]: Arg::takes_value()\n[positional arguments]: Arg::index()\n[`multiple_values(true)`]: Arg::multiple_values()\n[`min_values`]: Arg::min_values()\n[`number_of_values`]: Arg::number_of_values()\n[`max_values`]: Arg::max_values()","links":{"Arg::max_values()":"0:3816:1564","Arg::index()":"0:3816:1564","Arg::number_of_values()":"0:3816:1564","Arg::takes_value()":"0:3816:1564","Arg::min_values()":"0:3816:1564","Arg::multiple_values()":"0:3816:1564"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["term",{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:133:2021":{"id":"0:133:2021","crate_id":0,"name":"try_parse_from","span":{"filename":"src/derive.rs","begin":[122,4],"end":[129,5]},"visibility":"default","docs":"Parse from iterator, return Err on error.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["itr",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4640:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8367:151","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"T"}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsString","id":"1:2920:170","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3969-0:3816:1564":{"id":"b:2:3969-0:3816:1564","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3967:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3816:1564","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["2:3971:1408"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:31776:1208":{"id":"2:31776:1208","crate_id":2,"name":"saturating_sub","span":null,"visibility":"public","docs":"Saturating integer subtraction. Computes `self - rhs`, saturating\nat the numeric bounds instead of overflowing.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(100u64.saturating_sub(27), 73);\nassert_eq!(13u64.saturating_sub(127), 0);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]","#[rustc_const_stable(feature = \"const_saturating_int_methods\", since =\n\"1.47.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:972:5609":{"id":"0:972:5609","crate_id":0,"name":"find_subcommand_mut","span":{"filename":"src/builder/command.rs","begin":[3514,4],"end":[3519,5]},"visibility":"public","docs":"Find subcommand such that its name or one of aliases equals `name`, returning\na mutable reference to the subcommand.\n\nThis does not recurse through subcommands of subcommands.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"App","id":"0:4244:1577","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2892:173","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2285":{"id":"0:2285","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1515,0],"end":[1524,1]},"visibility":{"restricted":{"parent":"0:2077:7161","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["intersperse_with","gt","try_for_each","min","is_sorted_by","fold","size_hint","try_fold","cycle","skip","by_ref","for_each","min_by_key","ge","position","min_by","filter_map","cloned","is_sorted_by_key","sum","product","reduce","cmp","try_collect","take","skip_while","eq","next_chunk","advance_by","lt","max_by","count","any","partial_cmp","cmp_by","__iterator_get_unchecked","try_reduce","zip","all","collect_into","map_while","nth","chain","max_by_key","partial_cmp_by","try_find","last","partition","scan","filter","step_by","take_while","rev","ne","peekable","flatten","collect","find","eq_by","rposition","partition_in_place","le","fuse","copied","intersperse","map","flat_map","max","find_map","enumerate","is_sorted","unzip","is_partitioned","inspect"],"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8565:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:4773:1588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["0:2287:2018","0:2288:909","0:2289:4560"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:212:2118":{"id":"0:212:2118","crate_id":0,"name":"has_subcommand","span":{"filename":"src/derive.rs","begin":[577,4],"end":[579,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4515:6699":{"id":"0:4515:6699","crate_id":0,"name":"ContextKind","span":{"filename":"src/error/context.rs","begin":[4,0],"end":[39,1]},"visibility":"public","docs":"Semantics for a piece of error information","links":{},"attrs":["#[non_exhaustive]"],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:4516:6781","0:4518:6769","0:4520:6770","0:4522:6772","0:4524:6777","0:4526:6796","0:4528:6806","0:4530:6802","0:4532:6850","0:4534:6794","0:4536:6783","0:4538:6782","0:4540:6811","0:4542:6778","0:4544:6813","0:4546:4475","0:4548:6914"],"impls":["a:2:9222:7159-0:4515:6699","a:2:3252:209-0:4515:6699","a:2:3240:200-0:4515:6699","a:2:9223:7158-0:4515:6699","a:2:3281:5920-0:4515:6699","b:2:2843-0:4515:6699","b:2:3169-0:4515:6699","b:2:3173-0:4515:6699","b:2:3184-0:4515:6699","b:2:3969-0:4515:6699","b:2:2846-0:4515:6699","b:2:3179-0:4515:6699","b:5:787-0:4515:6699","b:23:25-0:4515:6699","0:4550","0:4551","0:4553","0:4555","0:4556","0:4558","0:4559"]}},"0:153:1572":{"id":"0:153:1572","crate_id":0,"name":"CommandFactory","span":{"filename":"src/derive.rs","begin":[252,0],"end":[282,1]},"visibility":"public","docs":"Create a [`Command`] relevant for a user-defined container.\n\nDerived as part of [`Parser`].","links":{"`Command`":"0:755:1563","`Parser`":"0:127:1574"},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:154:1810","0:156:2052","0:158:2025","0:160:2057"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":["0:192"]}},"b:2:3184-0:4640:127":{"id":"b:2:3184-0:4640:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4640:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3187:127","2:3188:1394"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3175:669":{"id":"2:3175:669","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2253:2018":{"id":"0:2253:2018","crate_id":0,"name":"Item","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1407,4],"end":[1407,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}},"2:22812:10620":{"id":"2:22812:10620","crate_id":2,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22802:10621","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:1512":{"id":"0:1512","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1569,0],"end":[1597,1]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["possible_values","parse"],"trait":{"kind":"resolved_path","inner":{"name":"TypedValueParser","id":"0:1362:2165","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FalseyValueParser","id":"0:4462:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:1513:6312","0:1514:6352","0:1516:3153"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:3281:5920-0:3386:1579":{"id":"a:2:3281:5920-0:3386:1579","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3281:5920","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:3386:1579","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2846-0:4587:1584":{"id":"b:2:2846-0:4587:1584","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2840:8484","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4587:1584","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2848:21287"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1561":{"id":"0:1561","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1856,0],"end":[1863,1]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"ValueParserFactory","id":"0:1543:2167","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"primitive","inner":"i8"},"items":["0:1562:1574","0:1563:2158"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:628":{"id":"0:628","crate_id":0,"name":null,"span":{"filename":"src/builder/arg_group.rs","begin":[463,0],"end":[475,1]},"visibility":{"restricted":{"parent":"0:597:2152","path":"::builder::arg_group"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3903:1565","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3903:1565","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["0:630:669"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1229:5971":{"id":"0:1229:5971","crate_id":0,"name":"get_visible_name","span":{"filename":"src/builder/possible_value.rs","begin":[194,4],"end":[200,5]},"visibility":"public","docs":"Get the name if argument value is not hidden, `None` otherwise","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3372:1929":{"id":"2:3372:1929","crate_id":2,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3374:171","2:3375:342"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:942:5573":{"id":"0:942:5573","crate_id":0,"name":"get_visible_long_flag_aliases","span":{"filename":"src/builder/command.rs","begin":[3373,4],"end":[3378,5]},"visibility":"public","docs":"Iterate through the *visible* long aliases for this subcommand.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8565:157","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"outlives":"'_"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5082:397":{"id":"0:5082:397","crate_id":0,"name":"clone","span":{"filename":"src/util/color.rs","begin":[2,22],"end":[2,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:5071:1570","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4371:6250":{"id":"0:4371:6250","crate_id":0,"name":"CommandString","span":{"filename":"src/builder/value_hint.rs","begin":[46,4],"end":[46,17]},"visibility":"default","docs":"A single string containing a command and its arguments.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:2332":{"id":"0:2332","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1659,0],"end":[1668,1]},"visibility":{"restricted":{"parent":"0:2077:7161","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["intersperse_with","gt","try_for_each","min","is_sorted_by","fold","size_hint","try_fold","cycle","skip","by_ref","for_each","min_by_key","ge","position","min_by","filter_map","cloned","is_sorted_by_key","sum","product","reduce","cmp","try_collect","take","skip_while","eq","next_chunk","advance_by","lt","max_by","count","any","partial_cmp","cmp_by","__iterator_get_unchecked","try_reduce","zip","all","collect_into","map_while","nth","chain","max_by_key","partial_cmp_by","try_find","last","partition","scan","filter","step_by","take_while","rev","ne","peekable","flatten","collect","find","eq_by","rposition","partition_in_place","le","fuse","copied","intersperse","map","flat_map","max","find_map","enumerate","is_sorted","unzip","is_partitioned","inspect"],"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8565:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:4801:1585","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["0:2334:2018","0:2335:909","0:2336:4560"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1393:59":{"id":"0:1393:59","crate_id":0,"name":"default","span":{"filename":"src/builder/value_parser.rs","begin":[756,4],"end":[758,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3252:209-0:4763:7085":{"id":"a:2:3252:209-0:4763:7085","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3252:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"RawValues","id":"0:4763:7085","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1009:5666":{"id":"0:1009:5666","crate_id":0,"name":"is_trailing_var_arg_set","span":{"filename":"src/builder/command.rs","begin":[3713,4],"end":[3715,5]},"visibility":"public","docs":"Report whether [`Command::trailing_var_arg`] is set","links":{"`Command::trailing_var_arg`":"0:4244:1577"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:201:2006":{"id":"0:201:2006","crate_id":0,"name":"from_arg_matches_mut","span":{"filename":"src/derive.rs","begin":[550,4],"end":[552,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["matches",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4706:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4640:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4588:6777":{"id":"0:4588:6777","crate_id":0,"name":"InvalidValue","span":{"filename":"src/error/kind.rs","begin":[19,4],"end":[19,16]},"visibility":"default","docs":"Occurs when an [`Arg`][crate::Arg] has a set of possible values,\nand the user provides a value which isn't in that set.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet result = Command::new(\"prog\")\n    .arg(Arg::new(\"speed\")\n        .value_parser([\"fast\", \"slow\"]))\n    .try_get_matches_from(vec![\"prog\", \"other\"]);\nassert!(result.is_err());\nassert_eq!(result.unwrap_err().kind(), ErrorKind::InvalidValue);\n```","links":{"crate::Arg":"0:3816:1564"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:822:4825":{"id":"0:822:4825","crate_id":0,"name":"max_term_width","span":{"filename":"src/builder/command.rs","begin":[1076,4],"end":[1079,5]},"visibility":"public","docs":"Sets the maximum terminal width at which to wrap help messages.\n\nThis only applies when setting the current terminal width.  See [`Command::term_width`] for\nmore details.\n\nUsing `0` will ignore terminal widths and use source formatting.\n\n**NOTE:** This setting applies globally and *not* on a per-command basis.\n\n# Examples\n\n```no_run\n# use clap::Command;\nCommand::new(\"myprog\")\n    .max_term_width(100)\n# ;\n```","links":{"`Command::term_width`":"0:4244:1577"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["w",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1336":{"id":"0:1336","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[473,0],"end":[478,1]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":"Create an `i64` [`ValueParser`] from a `..` range\n\nSee [`RangedI64ValueParser`] for more control over the output type.\n\nSee also [`RangedU64ValueParser`]\n\n# Examples\n\n```rust\nlet mut cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"port\")\n            .long(\"port\")\n            .value_parser(..)\n            .takes_value(true)\n            .required(true)\n    );\n\nlet m = cmd.try_get_matches_from_mut([\"cmd\", \"--port\", \"3001\"]).unwrap();\nlet port: i64 = *m.get_one(\"port\")\n    .expect(\"required\");\nassert_eq!(port, 3001);\n```","links":{"`RangedU64ValueParser`":"0:4444:2163","`ValueParser`":"0:1294:2166","`RangedI64ValueParser`":"0:4432:2162"},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"RangeFull","id":"2:45721:186","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1294:2166","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:1337:669"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:9222:7159-0:4397:2164":{"id":"a:2:9222:7159-0:4397:2164","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9222:7159","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"StringValueParser","id":"0:4397:2164","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:3281:5920-0:4409:2177":{"id":"a:2:3281:5920-0:4409:2177","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3281:5920","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"PathBufValueParser","id":"0:4409:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3489":{"id":"0:3489","crate_id":0,"name":null,"span":{"filename":"src/builder/app_settings.rs","begin":[32,33],"end":[32,38]},"visibility":{"restricted":{"parent":"0:227:2151","path":"::builder::app_settings"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:3386:1579","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:3490:397"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:894:4514":{"id":"0:894:4514","crate_id":0,"name":"short_flag_aliases","span":{"filename":"src/builder/command.rs","begin":[2457,4],"end":[2463,5]},"visibility":"public","docs":"Add aliases, which function as \"hidden\" short flag subcommands.\n\nThese will automatically dispatch as if this subcommand was used. This is more efficient,\nand easier than creating multiple hidden subcommands as one only needs to check for the\nexistence of this command, and not all variants.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, };\nlet m = Command::new(\"myprog\")\n    .subcommand(Command::new(\"test\").short_flag('t')\n        .short_flag_aliases(&['a', 'b', 'c']))\n        .arg(Arg::new(\"input\")\n            .help(\"the file to add\")\n            .required(false))\n    .get_matches_from(vec![\"myprog\", \"-a\"]);\nassert_eq!(m.subcommand_name(), Some(\"test\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["names",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"char"}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:31811:68537":{"id":"2:31811:68537","crate_id":2,"name":"div_ceil","span":null,"visibility":"public","docs":"Calculates the quotient of `self` and `rhs`, rounding the result towards positive infinity.\n\n# Panics\n\nThis function will panic if `rhs` is zero.\n\n## Overflow behavior\n\nOn overflow, this function will panic if overflow checks are enabled (default in debug\nmode) and wrap if overflow checks are disabled (default in release mode).\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(int_roundings)]\nassert_eq!(7_u64.div_ceil(4), 2);\n```","links":{},"attrs":["#[unstable(feature = \"int_roundings\", issue = \"88581\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4841":{"id":"0:4841","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/value_source.rs","begin":[2,44],"end":[2,54]},"visibility":{"restricted":{"parent":"0:2423:7162","path":"::parser::matches::value_source"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["lt","gt","ge","le"],"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2938:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4823:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4823:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:4842:984"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1777:1566":{"id":"0:1777:1566","crate_id":0,"name":"error","span":{"filename":"src/error/mod.rs","begin":[1,0],"end":[1153,1]},"visibility":"public","docs":"Error reporting","links":{},"attrs":["#![allow(deprecated)]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:4515:6699","0:4561:6700","0:4587:1584","0:1854:195","0:4640:127"]}},"5:790:4707":{"id":"5:790:4707","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9223:7158-0:4403:2176":{"id":"a:2:9223:7158-0:4403:2176","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9223:7158","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OsStringValueParser","id":"0:4403:2176","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:512:4028":{"id":"0:512:4028","crate_id":0,"name":"is_hide_short_help_set","span":{"filename":"src/builder/arg.rs","begin":[4634,4],"end":[4636,5]},"visibility":"public","docs":"Report whether [`Arg::hide_short_help`] is set","links":{"`Arg::hide_short_help`":"0:3816:1564"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1408:6312":{"id":"0:1408:6312","crate_id":0,"name":"Value","span":{"filename":"src/builder/value_parser.rs","begin":[882,4],"end":[882,19]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"E"}}},"0:1227:4018":{"id":"0:1227:4018","crate_id":0,"name":"is_hide_set","span":{"filename":"src/builder/possible_value.rs","begin":[177,4],"end":[179,5]},"visibility":"public","docs":"Report if [`PossibleValue::hide`] is set","links":{"`PossibleValue::hide`":"0:4298:1582"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:361:2157":{"id":"0:361:2157","crate_id":0,"name":"value_hint","span":{"filename":"src/builder/arg.rs","begin":[1513,4],"end":[1516,5]},"visibility":"public","docs":"Provide the shell a hint about how to complete this argument.\n\nSee [`ValueHint`][crate::ValueHint] for more information.\n\n**NOTE:** implicitly sets [`Arg::takes_value(true)`].\n\nFor example, to take a username as argument:\n\n```\n# use clap::{Arg, ValueHint};\nArg::new(\"user\")\n    .short('u')\n    .long(\"user\")\n    .value_hint(ValueHint::Username);\n```\n\nTo take a full command line and its arguments (for example, when writing a command wrapper):\n\n```\n# use clap::{Command, Arg, ValueHint};\nCommand::new(\"prog\")\n    .trailing_var_arg(true)\n    .arg(\n        Arg::new(\"command\")\n            .takes_value(true)\n            .multiple_values(true)\n            .value_hint(ValueHint::CommandWithArguments)\n    );\n```","links":{"crate::ValueHint":"0:4356:1583"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["value_hint",{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:4356:1583","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5071:1570":{"id":"0:5071:1570","crate_id":0,"name":"ColorChoice","span":{"filename":"src/util/color.rs","begin":[3,0],"end":[56,1]},"visibility":"public","docs":"Represents the color preferences for program output","links":{},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:5072:1944","0:5074:4812","0:5076:4813"],"impls":["a:2:9222:7159-0:5071:1570","a:2:3252:209-0:5071:1570","a:2:3240:200-0:5071:1570","a:2:9223:7158-0:5071:1570","a:2:3281:5920-0:5071:1570","b:2:2843-0:5071:1570","b:2:3169-0:5071:1570","b:2:3173-0:5071:1570","b:2:3184-0:5071:1570","b:2:3969-0:5071:1570","b:2:2846-0:5071:1570","b:2:3179-0:5071:1570","b:5:787-0:5071:1570","b:23:25-0:5071:1570","0:5078","0:5080","0:5081","0:5083","0:5084","0:5086","0:5087","0:3333"]}},"0:1010:5668":{"id":"0:1010:5668","crate_id":0,"name":"is_allow_missing_positional_set","span":{"filename":"src/builder/command.rs","begin":[3718,4],"end":[3720,5]},"visibility":"public","docs":"Report whether [`Command::allow_missing_positional`] is set","links":{"`Command::allow_missing_positional`":"0:4244:1577"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:435:3712":{"id":"0:435:3712","crate_id":0,"name":"required_unless_present_all","span":{"filename":"src/builder/arg.rs","begin":[3495,4],"end":[3502,5]},"visibility":"public","docs":"Sets this arg as [required] unless *all* of the specified arguments are present at runtime.\n\nIn other words, parsing will succeed only if user either\n* supplies the `self` arg.\n* supplies *all* of the `names` arguments.\n\n**NOTE:** If you wish for this argument to only be required unless *any of* these args are\npresent see [`Arg::required_unless_present_any`]\n\n# Examples\n\n```rust\n# use clap::Arg;\nArg::new(\"config\")\n    .required_unless_present_all(&[\"cfg\", \"dbg\"])\n# ;\n```\n\nIn the following example, the required argument is *not* provided, but it's not an error\nbecause *all* of the `names` args have been supplied.\n\n```rust\n# use clap::{Command, Arg};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .required_unless_present_all(&[\"dbg\", \"infile\"])\n        .takes_value(true)\n        .long(\"config\"))\n    .arg(Arg::new(\"dbg\")\n        .long(\"debug\"))\n    .arg(Arg::new(\"infile\")\n        .short('i')\n        .takes_value(true))\n    .try_get_matches_from(vec![\n        \"prog\", \"--debug\", \"-i\", \"file\"\n    ]);\n\nassert!(res.is_ok());\n```\n\nSetting [`Arg::required_unless_present_all(names)`] and *not* supplying\neither *all* of `unless` args or the `self` arg is an error.\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .required_unless_present_all(&[\"dbg\", \"infile\"])\n        .takes_value(true)\n        .long(\"config\"))\n    .arg(Arg::new(\"dbg\")\n        .long(\"debug\"))\n    .arg(Arg::new(\"infile\")\n        .short('i')\n        .takes_value(true))\n    .try_get_matches_from(vec![\n        \"prog\"\n    ]);\n\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind(), ErrorKind::MissingRequiredArgument);\n```\n[required]: Arg::required()\n[`Arg::required_unless_present_any`]: Arg::required_unless_present_any()\n[`Arg::required_unless_present_all(names)`]: Arg::required_unless_present_all()","links":{"Arg::required_unless_present_all()":"0:3816:1564","Arg::required_unless_present_any()":"0:3816:1564","Arg::required()":"0:3816:1564"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["names",{"kind":"generic","inner":"I"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8367:151","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"T"}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Key","id":"0:3235:2593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3367:8458":{"id":"2:3367:8458","crate_id":2,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3369:171","2:3370:340"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3169-0:3347:1562":{"id":"b:2:3169-0:3347:1562","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgAction","id":"0:3347:1562","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3172:2288"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:31755:1426":{"id":"2:31755:1426","crate_id":2,"name":"unchecked_sub","span":null,"visibility":"public","docs":"Unchecked integer subtraction. Computes `self - rhs`, assuming overflow\ncannot occur.\n\n# Safety\n\nThis results in undefined behavior when\n`self - rhs > u64::MAX` or `self - rhs < u64::MIN`,\ni.e. when [`checked_sub`] would return `None`.\n\n[`checked_sub`]: u64::checked_sub","links":{"u64::checked_sub":"1:15859:8332"},"attrs":["#[unstable(feature = \"unchecked_math\", reason = \"niche optimization path\",\nissue = \"85122\",)]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]","#[rustc_const_unstable(feature = \"const_inherent_unchecked_arith\", issue =\n\"85122\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3173-0:4444:2163":{"id":"b:2:3173-0:4444:2163","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"RangedU64ValueParser","id":"0:4444:2163","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["2:3175:669"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3397:2337":{"id":"0:3397:2337","crate_id":0,"name":"AllowMissingPositional","span":{"filename":"src/builder/app_settings.rs","begin":[120,4],"end":[120,26]},"visibility":"default","docs":"Deprecated, replaced with [`Command::allow_missing_positional`] and\n[`Command::is_allow_missing_positional_set`]","links":{"`Command::allow_missing_positional`":"0:4244:1577","`Command::is_allow_missing_positional_set`":"0:4244:1577"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:13413:39380":{"id":"2:13413:39380","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"self::pattern":"2:12997:8603","prim@char":"1:15839:8315"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:12789:8606","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:8597","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:969:5605":{"id":"0:969:5605","crate_id":0,"name":"find_subcommand","span":{"filename":"src/builder/command.rs","begin":[3502,4],"end":[3507,5]},"visibility":"public","docs":"Find subcommand such that its name or one of aliases equals `name`.\n\nThis does not recurse through subcommands of subcommands.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"App","id":"0:4244:1577","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2892:173","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:31817:68543":{"id":"2:31817:68543","crate_id":2,"name":"checked_next_power_of_two","span":null,"visibility":"public","docs":"Returns the smallest power of two greater than or equal to `n`. If\nthe next power of two is greater than the type's maximum value,\n`None` is returned, otherwise the power of two is wrapped in `Some`.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(2u64.checked_next_power_of_two(), Some(2));\nassert_eq!(3u64.checked_next_power_of_two(), Some(4));\nassert_eq!(u64::MAX.checked_next_power_of_two(), None);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_int_pow\", since = \"1.50.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8850:8716":{"id":"2:8850:8716","crate_id":2,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Step","id":"2:7891:8706","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:4412:397":{"id":"0:4412:397","crate_id":0,"name":"clone","span":{"filename":"src/builder/value_parser.rs","begin":[764,15],"end":[764,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"PathBufValueParser","id":"0:4409:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1449":{"id":"0:1449","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1176,0],"end":[1233,1]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"std::convert::TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i64"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3240:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3252:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"kind":"resolved_path","inner":{"name":"std::convert::TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i64"}}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3240:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3252:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"std::error::Error","id":"1:2576:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ToString","id":"5:6404:212","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["possible_values","parse"],"trait":{"kind":"resolved_path","inner":{"name":"TypedValueParser","id":"0:1362:2165","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:4432:2162","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["0:1451:6312","0:1452:6352"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1226:5965":{"id":"0:1226:5965","crate_id":0,"name":"is_hidden","span":{"filename":"src/builder/possible_value.rs","begin":[171,4],"end":[173,5]},"visibility":"public","docs":"Deprecated, replaced with [`PossibleValue::is_hide_set`]","links":{"`PossibleValue::is_hide_set`":"0:4298:1582"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:818:4798":{"id":"0:818:4798","crate_id":0,"name":"args_override_self","span":{"filename":"src/builder/command.rs","begin":[966,4],"end":[972,5]},"visibility":"public","docs":"Deprecated, replaced with [`ArgAction::Set`][super::ArgAction::Set]","links":{"super::ArgAction::Set":"0:3347:1562"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:31770:1424":{"id":"2:31770:1424","crate_id":2,"name":"unchecked_shl","span":null,"visibility":"public","docs":"Unchecked shift left. Computes `self << rhs`, assuming that\n`rhs` is less than the number of bits in `self`.\n\n# Safety\n\nThis results in undefined behavior if `rhs` is larger than\nor equal to the number of bits in `self`,\ni.e. when [`checked_shl`] would return `None`.\n\n[`checked_shl`]: u64::checked_shl","links":{"u64::checked_shl":"1:15859:8332"},"attrs":["#[unstable(feature = \"unchecked_math\", reason = \"niche optimization path\",\nissue = \"85122\",)]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]","#[rustc_const_unstable(feature = \"const_inherent_unchecked_arith\", issue =\n\"85122\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:2182:1748":{"id":"0:2182:1748","crate_id":0,"name":"values_of_t_or_exit","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[549,4],"end":[556,5]},"visibility":"public","docs":"Deprecated, replaced with [`ArgMatches::get_many()`]","links":{"`ArgMatches::get_many()`":"0:4706:1568"},"attrs":["#[track_caller]","#![allow(deprecated)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7764:223","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12936:1756","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"R"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12936:1756","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10262:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4466":{"id":"0:4466","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1550,22],"end":[1550,27]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10255:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FalseyValueParser","id":"0:4462:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:4467:648"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3401:2344":{"id":"0:3401:2344","crate_id":0,"name":"DontDelimitTrailingValues","span":{"filename":"src/builder/app_settings.rs","begin":[141,4],"end":[141,29]},"visibility":"default","docs":"Deprecated, replaced with [`Command::dont_delimit_trailing_values`] and\n[`Command::is_dont_delimit_trailing_values_set`]","links":{"`Command::dont_delimit_trailing_values`":"0:4244:1577","`Command::is_dont_delimit_trailing_values_set`":"0:4244:1577"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:160:2057":{"id":"0:160:2057","crate_id":0,"name":"into_app_for_update","span":{"filename":"src/derive.rs","begin":[281,4],"end":[281,54]},"visibility":"default","docs":"Deprecated, replaced with `CommandFactory::command_for_update`","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Command","id":"0:755:1563","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:4622:6763":{"id":"0:4622:6763","crate_id":0,"name":"DisplayHelpOnMissingArgumentOrSubcommand","span":{"filename":"src/error/kind.rs","begin":[360,4],"end":[360,44]},"visibility":"default","docs":"Occurs when either an argument or a [`Subcommand`] is required, as defined by\n[`Command::arg_required_else_help`] , but the user did not provide\none.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ErrorKind, };\nlet result = Command::new(\"prog\")\n    .arg_required_else_help(true)\n    .subcommand(Command::new(\"config\")\n        .about(\"Used for configuration\")\n        .arg(Arg::new(\"config_file\")\n            .help(\"The configuration file to use\")))\n    .try_get_matches_from(vec![\"prog\"]);\nassert!(result.is_err());\nassert_eq!(result.unwrap_err().kind(), ErrorKind::DisplayHelpOnMissingArgumentOrSubcommand);\n```\n\n[`Subcommand`]: crate::Subcommand\n[`Command::arg_required_else_help`]: crate::Command::arg_required_else_help","links":{"crate::Command::arg_required_else_help":"0:4244:1577","crate::Subcommand":"0:170:1575"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:3926":{"id":"0:3926","crate_id":0,"name":null,"span":{"filename":"src/builder/arg_group.rs","begin":[80,36],"end":[80,38]},"visibility":{"restricted":{"parent":"0:597:2152","path":"::builder::arg_group"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2897:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3903:1565","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4385":{"id":"0:4385","crate_id":0,"name":null,"span":{"filename":"src/builder/value_hint.rs","begin":[27,16],"end":[27,25]},"visibility":{"restricted":{"parent":"0:1272:2157","path":"::builder::value_hint"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"StructuralPartialEq","id":"2:3248:207","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:4356:1583","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:2153:7283":{"id":"0:2153:7283","crate_id":0,"name":"remove_many","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[283,4],"end":[289,5]},"visibility":"public","docs":"Return values of a specific option or positional argument.\n\ni.e. an argument that takes multiple values at runtime.\n\nReturns an error if the wrong type was used.  No item will have been removed.\n\nReturns `None` if the option wasn't present.\n\n# Panic\n\nIf the argument definition and access mismatch.  To handle this case programmatically, see\n[`ArgMatches::try_remove_many`].\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, value_parser, ArgAction};\nlet mut m = Command::new(\"myprog\")\n    .arg(Arg::new(\"file\")\n        .action(ArgAction::Append)\n        .multiple_values(true)\n        .required(true)\n        .takes_value(true))\n    .get_matches_from(vec![\n        \"myprog\", \"file1.txt\", \"file2.txt\", \"file3.txt\", \"file4.txt\",\n    ]);\nlet vals: Vec<String> = m.remove_many(\"file\")\n    .expect(\"`file`is required\")\n    .collect();\nassert_eq!(vals, [\"file1.txt\", \"file2.txt\", \"file3.txt\", \"file4.txt\"]);\n```","links":{"`ArgMatches::try_remove_many`":"0:4706:1568"},"attrs":["#[track_caller]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Values2","id":"0:4740:7284","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3967:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3240:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3252:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:351:1846":{"id":"0:351:1846","crate_id":0,"name":"takes_value","span":{"filename":"src/builder/arg.rs","begin":[926,4],"end":[932,5]},"visibility":"public","docs":"Specifies that the argument takes a value at run time.\n\n**NOTE:** values for arguments may be specified in any of the following methods\n\n- Using a space such as `-o value` or `--option value`\n- Using an equals and no space such as `-o=value` or `--option=value`\n- Use a short and no space such as `-ovalue`\n\n**NOTE:** By default, args which allow [multiple values] are delimited by commas, meaning\n`--option=val1,val2,val3` is three values for the `--option` argument. If you wish to\nchange the delimiter to another character you can use [`Arg::value_delimiter(char)`],\nalternatively you can turn delimiting values **OFF** by using\n[`Arg::use_value_delimiter(false)`][Arg::use_value_delimiter]\n\n# Examples\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"mode\")\n        .long(\"mode\")\n        .takes_value(true))\n    .get_matches_from(vec![\n        \"prog\", \"--mode\", \"fast\"\n    ]);\n\nassert!(m.contains_id(\"mode\"));\nassert_eq!(m.value_of(\"mode\"), Some(\"fast\"));\n```\n[`Arg::value_delimiter(char)`]: Arg::value_delimiter()\n[multiple values]: Arg::multiple_values","links":{"Arg::value_delimiter()":"0:3816:1564","Arg::use_value_delimiter":"0:3816:1564","Arg::multiple_values":"0:3816:1564"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10274:8506":{"id":"2:10274:8506","crate_id":2,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10275:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:2846-0:4298:1582":{"id":"b:2:2846-0:4298:1582","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2840:8484","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:4298:1582","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["2:2848:21287"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4773:1588":{"id":"0:4773:1588","crate_id":0,"name":"Values","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1508,0],"end":[1512,1]},"visibility":"public","docs":"Deprecated, replaced with [`ArgMatches::get_many()`]","links":{"`ArgMatches::get_many()`":"0:4706:1568"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["a:2:9222:7159-0:4773:1588","a:2:3252:209-0:4773:1588","a:2:3240:200-0:4773:1588","a:2:9223:7158-0:4773:1588","a:2:3281:5920-0:4773:1588","b:2:2843-0:4773:1588","b:2:3169-0:4773:1588","b:2:3173-0:4773:1588","b:2:3184-0:4773:1588","b:2:3969-0:4773:1588","b:2:8371-0:4773:1588","b:2:2846-0:4773:1588","b:2:3179-0:4773:1588","b:5:787-0:4773:1588","0:4778","0:4781","0:2285","0:2290","0:2293","0:2295"]}},"2:3696:213":{"id":"2:3696:213","crate_id":2,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3697:171","2:3698:8472","2:3699:674","2:3700:358"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromResidual","id":"2:3701:137","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3696:213","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:755:1563":{"id":"0:755:1563","crate_id":0,"name":"Command","span":{"filename":"src/builder/command.rs","begin":[70,0],"end":[70,37]},"visibility":"public","docs":"Build a command-line interface.\n\nThis includes defining arguments, subcommands, parser behavior, and help output.\nOnce all configuration is complete,\nthe [`Command::get_matches`] family of methods starts the runtime-parsing\nprocess. These methods then return information about the user supplied\narguments (or lack thereof).\n\nWhen deriving a [`Parser`][crate::Parser], you can use\n[`CommandFactory::command`][crate::CommandFactory::command] to access the\n`Command`.\n\n- [Basic API][crate::App#basic-api]\n- [Application-wide Settings][crate::App#application-wide-settings]\n- [Command-specific Settings][crate::App#command-specific-settings]\n- [Subcommand-specific Settings][crate::App#subcommand-specific-settings]\n- [Reflection][crate::App#reflection]\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg};\nlet m = Command::new(\"My Program\")\n    .author(\"Me, me@mail.com\")\n    .version(\"1.0.2\")\n    .about(\"Explains in brief what the program does\")\n    .arg(\n        Arg::new(\"in_file\")\n    )\n    .after_help(\"Longer explanation to appear after the options when \\\n                 displaying the help information from --help or -h\")\n    .get_matches();\n\n// Your program logic starts here...\n```\n[`App::get_matches`]: Command::get_matches()","links":{"crate::App#application-wide-settings":"0:4244:1577","crate::CommandFactory::command":"0:153:1572","crate::App#basic-api":"0:4244:1577","crate::App#command-specific-settings":"0:4244:1577","crate::App#subcommand-specific-settings":"0:4244:1577","crate::Parser":"0:127:1574","crate::App#reflection":"0:4244:1577","`Command::get_matches`":"0:4244:1577"},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"App","id":"0:4244:1577","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]}}},"2:31814:68540":{"id":"2:31814:68540","crate_id":2,"name":"is_power_of_two","span":null,"visibility":"public","docs":"Returns `true` if and only if `self == 2^k` for some `k`.\n\n# Examples\n\nBasic usage:\n\n```\nassert!(16u64.is_power_of_two());\nassert!(!10u64.is_power_of_two());\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_is_power_of_two\", since = \"1.32.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4566:1518":{"id":"0:4566:1518","crate_id":0,"name":"0","span":{"filename":"src/error/context.rs","begin":[48,9],"end":[48,13]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"primitive","inner":"bool"}},"0:1319:3153":{"id":"0:1319:3153","crate_id":0,"name":"possible_values","span":{"filename":"src/builder/value_parser.rs","begin":[245,4],"end":[249,5]},"visibility":"public","docs":"Reflect on enumerated value properties\n\nError checking should not be done with this; it is mostly targeted at user-facing\napplications like errors and completion.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2146","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8565:157","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"resolved_path","inner":{"name":"crate::PossibleValue","id":"0:4298:1582","args":{"angle_bracketed":{"args":[{"lifetime":"'static"}],"bindings":[]}},"param_names":[]}}}}}]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4003:3579":{"id":"0:4003:3579","crate_id":0,"name":"HideDefaultValue","span":{"filename":"src/builder/arg_settings.rs","begin":[192,4],"end":[192,20]},"visibility":"default","docs":"Deprecated, replaced with [`Arg::hide_default_value`] and [`Arg::is_hide_default_value_set`]","links":{"`Arg::is_hide_default_value_set`":"0:3816:1564","`Arg::hide_default_value`":"0:3816:1564"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:8363:136":{"id":"2:8363:136","crate_id":2,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8365:672"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6945:10626":{"id":"1:6945:10626","crate_id":1,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6946:21418"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3169-0:4640:127":{"id":"b:2:3169-0:4640:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4640:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3172:2288"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:5:787-0:4791:1586":{"id":"b:5:787-0:4791:1586","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:783:211","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OsValues","id":"0:4791:1586","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["5:789:4115","5:790:4707","5:791:9628"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1328":{"id":"0:1328","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[353,0],"end":[358,1]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":"Create an `i64` [`ValueParser`] from a `N..=M` range\n\nSee [`RangedI64ValueParser`] for more control over the output type.\n\nSee also [`RangedU64ValueParser`]\n\n# Examples\n\n```rust\nlet mut cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"port\")\n            .long(\"port\")\n            .value_parser(3000..=4000)\n            .takes_value(true)\n            .required(true)\n    );\n\nlet m = cmd.try_get_matches_from_mut([\"cmd\", \"--port\", \"3001\"]).unwrap();\nlet port: i64 = *m.get_one(\"port\")\n    .expect(\"required\");\nassert_eq!(port, 3001);\n```","links":{"`RangedU64ValueParser`":"0:4444:2163","`ValueParser`":"0:1294:2166","`RangedI64ValueParser`":"0:4432:2162"},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"RangeInclusive","id":"2:45806:187","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i64"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1294:2166","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:1329:669"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:496:3992":{"id":"0:496:3992","crate_id":0,"name":"is_multiple_values_set","span":{"filename":"src/builder/arg.rs","begin":[4522,4],"end":[4524,5]},"visibility":"public","docs":"Report whether [`Arg::multiple_values`] is set","links":{"`Arg::multiple_values`":"0:3816:1564"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:457:3833":{"id":"0:457:3833","crate_id":0,"name":"conflicts_with","span":{"filename":"src/builder/arg.rs","begin":[4048,4],"end":[4051,5]},"visibility":"public","docs":"This argument is mutually exclusive with the specified argument.\n\n**NOTE:** Conflicting rules take precedence over being required by default. Conflict rules\nonly need to be set for one of the two arguments, they do not need to be set for each.\n\n**NOTE:** Defining a conflict is two-way, but does *not* need to defined for both arguments\n(i.e. if A conflicts with B, defining A.conflicts_with(B) is sufficient. You do not\nneed to also do B.conflicts_with(A))\n\n**NOTE:** [`Arg::conflicts_with_all(names)`] allows specifying an argument which conflicts with more than one argument.\n\n**NOTE** [`Arg::exclusive(true)`] allows specifying an argument which conflicts with every other argument.\n\n# Examples\n\n```rust\n# use clap::Arg;\nArg::new(\"config\")\n    .conflicts_with(\"debug\")\n# ;\n```\n\nSetting conflicting argument, and having both arguments present at runtime is an error.\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .takes_value(true)\n        .conflicts_with(\"debug\")\n        .long(\"config\"))\n    .arg(Arg::new(\"debug\")\n        .long(\"debug\"))\n    .try_get_matches_from(vec![\n        \"prog\", \"--debug\", \"--config\", \"file.conf\"\n    ]);\n\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind(), ErrorKind::ArgumentConflict);\n```\n\n[`Arg::conflicts_with_all(names)`]: Arg::conflicts_with_all()\n[`Arg::exclusive(true)`]: Arg::exclusive()","links":{"Arg::conflicts_with_all()":"0:3816:1564","Arg::exclusive()":"0:3816:1564"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["arg_id",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Key","id":"0:3235:2593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2938:174":{"id":"2:2938:174","crate_id":2,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2940:984","2:2941:813","2:2942:779","2:2943:701","2:2944:684"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2892:173","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:2320:909":{"id":"0:2320:909","crate_id":0,"name":"next","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1603,4],"end":[1605,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"1:2923:169","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3347:8455":{"id":"2:3347:8455","crate_id":2,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3349:880"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:344:1927":{"id":"0:344:1927","crate_id":0,"name":"is_set","span":{"filename":"src/builder/arg.rs","begin":[826,4],"end":[828,5]},"visibility":"public","docs":"Check if the [`ArgSettings`] variant is currently set on the argument.\n\n[`ArgSettings`]: crate::ArgSettings","links":{"crate::ArgSettings":"0:3970:1581"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["s",{"kind":"resolved_path","inner":{"name":"ArgSettings","id":"0:3970:1581","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:787-0:4409:2177":{"id":"b:5:787-0:4409:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:783:211","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"PathBufValueParser","id":"0:4409:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:789:4115","5:790:4707","5:791:9628"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13484:67042":{"id":"2:13484:67042","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:15839:8315"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:49619:8616","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13388:39523":{"id":"2:13388:39523","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"1:15845:8320"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:49594:8607","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:362:1914":{"id":"0:362:1914","crate_id":0,"name":"validator","span":{"filename":"src/builder/arg.rs","begin":[1525,4],"end":[1534,5]},"visibility":"public","docs":"Deprecated, replaced with [`Arg::value_parser(...)`]","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3489:131","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"O"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}}}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3240:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"outlives":"'help"}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2146","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"1:2576:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3240:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3252:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4414:648":{"id":"0:4414:648","crate_id":0,"name":"fmt","span":{"filename":"src/builder/value_parser.rs","begin":[764,22],"end":[764,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10215:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10204:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1420:3153":{"id":"0:1420:3153","crate_id":0,"name":"possible_values","span":{"filename":"src/builder/value_parser.rs","begin":[929,4],"end":[937,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2146","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8565:157","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"resolved_path","inner":{"name":"crate::PossibleValue","id":"0:4298:1582","args":{"angle_bracketed":{"args":[{"lifetime":"'static"}],"bindings":[]}},"param_names":[]}}}}}]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:573:648":{"id":"0:573:648","crate_id":0,"name":"fmt","span":{"filename":"src/builder/arg.rs","begin":[5095,4],"end":[5128,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Formatter","id":"2:10215:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:10204:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3179-0:4462:2174":{"id":"b:2:3179-0:4462:2174","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3149:217","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FalseyValueParser","id":"0:4462:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3182:127","2:3183:1395"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:335:740":{"id":"0:335:740","crate_id":0,"name":"index","span":{"filename":"src/builder/arg.rs","begin":[490,4],"end":[493,5]},"visibility":"public","docs":"Specifies the index of a positional argument **starting at** 1.\n\n**NOTE:** The index refers to position according to **other positional argument**. It does\nnot define position in the argument list as a whole.\n\n**NOTE:** You can optionally leave off the `index` method, and the index will be\nassigned in order of evaluation. Utilizing the `index` method allows for setting\nindexes out of order\n\n**NOTE:** This is only meant to be used for positional arguments and shouldn't to be used\nwith [`Arg::short`] or [`Arg::long`].\n\n**NOTE:** When utilized with [`Arg::multiple_values(true)`], only the **last** positional argument\nmay be defined as multiple (i.e. with the highest index)\n\n# Panics\n\n[`Command`] will [`panic!`] if indexes are skipped (such as defining `index(1)` and `index(3)`\nbut not `index(2)`, or a positional argument is defined as multiple and is not the highest\nindex\n\n# Examples\n\n```rust\n# use clap::{Command, Arg};\nArg::new(\"config\")\n    .index(1)\n# ;\n```\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"mode\")\n        .index(1))\n    .arg(Arg::new(\"debug\")\n        .long(\"debug\"))\n    .get_matches_from(vec![\n        \"prog\", \"--debug\", \"fast\"\n    ]);\n\nassert!(m.contains_id(\"mode\"));\nassert_eq!(m.value_of(\"mode\"), Some(\"fast\")); // notice index(1) means \"first positional\"\n                                              // *not* first argument\n```\n[`Arg::short`]: Arg::short()\n[`Arg::long`]: Arg::long()\n[`Arg::multiple_values(true)`]: Arg::multiple_values()\n[`panic!`]: https://doc.rust-lang.org/std/macro.panic!.html\n[`Command`]: crate::Command","links":{"Arg::short()":"0:3816:1564","Arg::long()":"0:3816:1564","Arg::multiple_values()":"0:3816:1564","crate::Command":"0:755:1563"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["idx",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:836:886":{"id":"0:836:886","crate_id":0,"name":"name","span":{"filename":"src/builder/command.rs","begin":[1394,4],"end":[1397,5]},"visibility":"public","docs":"(Re)Sets the program's name.\n\nSee [`Command::new`] for more details.\n\n# Examples\n\n```ignore\n# use clap::{Command, load_yaml};\nlet yaml = load_yaml!(\"cmd.yaml\");\nlet cmd = Command::from(yaml)\n    .name(crate_name!());\n\n// continued logic goes here, such as `cmd.get_matches()` etc.\n```","links":{"`Command::new`":"0:4244:1577"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["name",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2843-0:3386:1579":{"id":"b:2:2843-0:3386:1579","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2837:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:3386:1579","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2845:2590"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:828:4853":{"id":"0:828:4853","crate_id":0,"name":"disable_colored_help","span":{"filename":"src/builder/command.rs","begin":[1223,4],"end":[1229,5]},"visibility":"public","docs":"Disables colorized help messages.\n\n**NOTE:** This choice is propagated to all child subcommands.\n\n# Examples\n\n```no_run\n# use clap::Command;\nCommand::new(\"myprog\")\n    .disable_colored_help(true)\n    .get_matches();\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4373:6259":{"id":"0:4373:6259","crate_id":0,"name":"CommandWithArguments","span":{"filename":"src/builder/value_hint.rs","begin":[57,4],"end":[57,24]},"visibility":"default","docs":"Capture the remaining arguments as a command name and arguments for that command. This is\ncommon when writing shell wrappers that execute anther command, for example `sudo` or `env`.\n\nThis hint is special, the argument must be a positional argument and have\n[`.multiple_values(true)`] and Command must use [`Command::trailing_var_arg(true)`]. The result is that the\ncommand line `my_app ls -la /` will be parsed as `[\"ls\", \"-la\", \"/\"]` and clap won't try to\nparse the `-la` argument itself.\n\n[`Command::trailing_var_arg(true)`]: crate::Command::trailing_var_arg\n[`.multiple_values(true)`]: crate::Arg::multiple_values()","links":{"crate::Arg::multiple_values()":"0:3816:1564","crate::Command::trailing_var_arg":"0:4244:1577"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:1193:59":{"id":"0:1193:59","crate_id":0,"name":"default","span":{"filename":"src/builder/command.rs","begin":[5093,4],"end":[5131,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:787-0:4773:1588":{"id":"b:5:787-0:4773:1588","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:783:211","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:4773:1588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["5:789:4115","5:790:4707","5:791:9628"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1428":{"id":"0:1428","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[991,0],"end":[1042,1]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["possible_values","parse"],"trait":{"kind":"resolved_path","inner":{"name":"TypedValueParser","id":"0:1362:2165","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValuesParser","id":"0:4425:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:1429:6312","0:1430:6352","0:1431:2002","0:1437:3153"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:23:25-0:4515:6699":{"id":"b:23:25-0:4515:6699","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.8.1/src/equivalent.rs","begin":[18,0],"end":[18,46]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2897:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2837:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Q"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Equivalent","id":"23:22:8796","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:4515:6699","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["23:28:8790"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"Q"}}},"0:4524:6777":{"id":"0:4524:6777","crate_id":0,"name":"InvalidValue","span":{"filename":"src/error/context.rs","begin":[14,4],"end":[14,16]},"visibility":"default","docs":"Rejected values","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"1:5721:10643":{"id":"1:5721:10643","crate_id":1,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5722:6144","1:5723:13788"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3184-0:4773:1588":{"id":"b:2:3184-0:4773:1588","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:4773:1588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:3187:127","2:3188:1394"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4584":{"id":"0:4584","crate_id":0,"name":null,"span":{"filename":"src/error/context.rs","begin":[42,34],"end":[42,36]},"visibility":{"restricted":{"parent":"0:1839:470","path":"::error::context"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"StructuralEq","id":"2:3249:206","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ContextValue","id":"0:4561:6700","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4750:7086":{"id":"0:4750:7086","crate_id":0,"name":"ValuesRef","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1400,0],"end":[1404,1]},"visibility":"public","docs":"Iterate over multiple values for an argument via [`ArgMatches::get_many`].\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ArgAction};\nlet m = Command::new(\"myapp\")\n    .arg(Arg::new(\"output\")\n        .short('o')\n        .action(ArgAction::Append)\n        .takes_value(true))\n    .get_matches_from(vec![\"myapp\", \"-o\", \"val1\", \"-o\", \"val2\"]);\n\nlet mut values = m.get_many::<String>(\"output\")\n    .unwrap()\n    .map(|s| s.as_str());\n\nassert_eq!(values.next(), Some(\"val1\"));\nassert_eq!(values.next(), Some(\"val2\"));\nassert_eq!(values.next(), None);\n```","links":{"`ArgMatches::get_many`":"0:4706:1568"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["a:2:9222:7159-0:4750:7086","a:2:3252:209-0:4750:7086","a:2:3240:200-0:4750:7086","a:2:9223:7158-0:4750:7086","a:2:3281:5920-0:4750:7086","b:2:2843-0:4750:7086","b:2:3169-0:4750:7086","b:2:3173-0:4750:7086","b:2:3184-0:4750:7086","b:2:3969-0:4750:7086","b:2:8371-0:4750:7086","b:2:2846-0:4750:7086","b:2:3179-0:4750:7086","b:5:787-0:4750:7086","0:4755","0:4759","0:2250","0:2256","0:2260","0:2263"]}},"0:3403:2347":{"id":"0:3403:2347","crate_id":0,"name":"InferLongArgs","span":{"filename":"src/builder/app_settings.rs","begin":[148,4],"end":[148,17]},"visibility":"default","docs":"Deprecated, replaced with [`Command::infer_long_args`]","links":{"`Command::infer_long_args`":"0:4244:1577"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:921:5545":{"id":"0:921:5545","crate_id":0,"name":"get_bin_name","span":{"filename":"src/builder/command.rs","begin":[3277,4],"end":[3279,5]},"visibility":"public","docs":"Get the name of the binary.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:167:1571":{"id":"0:167:1571","crate_id":0,"name":"Args","span":{"filename":"src/derive.rs","begin":[397,0],"end":[408,1]},"visibility":"public","docs":"Parse a set of arguments into a user-defined container.\n\nImplementing this trait lets a parent container delegate argument parsing behavior to `Self`.\nwith:\n- `#[clap(flatten)] args: ChildArgs`: Attribute can only be used with struct fields that impl\n  `Args`.\n- `Variant(ChildArgs)`: No attribute is used with enum variants that impl `Args`.\n\nSee the\n[derive reference](https://github.com/clap-rs/clap/blob/v3.2.12/examples/derive_ref/README.md)\nfor attributes and best practices.\n\n**NOTE:** Deriving requires the `derive` feature flag\n\n# Example\n\n ```ignore\n#[derive(clap::Parser)]\nstruct Args {\n    #[clap(flatten)]\n    logging: LogArgs,\n}\n\n#[derive(clap::Args)]\nstruct LogArgs {\n    #[clap(long, short = 'v', parse(from_occurrences))]\n    verbose: i8,\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:168:2099","0:169:2102"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromArgMatches","id":"0:162:1573","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":["0:204"]}},"b:23:25-0:4244:1577":{"id":"b:23:25-0:4244:1577","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.8.1/src/equivalent.rs","begin":[18,0],"end":[18,46]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2897:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2837:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Q"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Equivalent","id":"23:22:8796","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:4244:1577","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["23:28:8790"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"Q"}}},"0:1478:6352":{"id":"0:1478:6352","crate_id":0,"name":"parse_ref","span":{"filename":"src/builder/value_parser.rs","begin":[1381,4],"end":[1430,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["cmd",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Command","id":"0:755:1563","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}],["arg",{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Arg","id":"0:3816:1564","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["raw_value",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"std::ffi::OsStr","id":"1:2923:169","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Value","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:1362:2165","args":null,"param_names":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"crate::Error","id":"0:4640:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:357:1850":{"id":"0:357:1850","crate_id":0,"name":"max_values","span":{"filename":"src/builder/arg.rs","begin":[1296,4],"end":[1299,5]},"visibility":"public","docs":"The *maximum* number of values are for this argument.\n\nFor example, if you had a\n`-f <file>` argument where you wanted up to 3 'files' you would set `.max_values(3)`, and\nthis argument would be satisfied if the user provided, 1, 2, or 3 values.\n\n**NOTE:** This does *not* implicitly set [`Arg::multiple_occurrences(true)`]. This is because\n`-o val -o val` is multiple occurrences but a single value and `-o val1 val2` is a single\noccurrence with multiple values. For positional arguments this **does** set\n[`Arg::multiple_occurrences(true)`] because there is no way to determine the difference between multiple\noccurrences and multiple values.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg};\nArg::new(\"file\")\n    .short('f')\n    .max_values(3);\n```\n\nSupplying less than the maximum number of values is allowed\n\n```rust\n# use clap::{Command, Arg};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"file\")\n        .takes_value(true)\n        .max_values(3)\n        .short('F'))\n    .try_get_matches_from(vec![\n        \"prog\", \"-F\", \"file1\", \"file2\"\n    ]);\n\nassert!(res.is_ok());\nlet m = res.unwrap();\nlet files: Vec<_> = m.values_of(\"file\").unwrap().collect();\nassert_eq!(files, [\"file1\", \"file2\"]);\n```\n\nSupplying more than the maximum number of values is an error\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"file\")\n        .takes_value(true)\n        .max_values(2)\n        .short('F'))\n    .try_get_matches_from(vec![\n        \"prog\", \"-F\", \"file1\", \"file2\", \"file3\"\n    ]);\n\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind(), ErrorKind::UnknownArgument);\n```\n[`Arg::multiple_occurrences(true)`]: Arg::multiple_occurrences()","links":{"Arg::multiple_occurrences()":"0:3816:1564"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["qty",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1865:6728":{"id":"0:1865:6728","crate_id":0,"name":"use_stderr","span":{"filename":"src/error/mod.rs","begin":[104,4],"end":[106,5]},"visibility":"public","docs":"Should the message be written to `stdout` or not?","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:171:2115":{"id":"0:171:2115","crate_id":0,"name":"augment_subcommands","span":{"filename":"src/derive.rs","begin":[445,4],"end":[445,60]},"visibility":"default","docs":"Append to [`Command`] so it can instantiate `Self`.\n\nSee also [`CommandFactory`].","links":{"`Command`":"0:755:1563","`CommandFactory`":"0:153:1572"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["cmd",{"kind":"resolved_path","inner":{"name":"Command","id":"0:755:1563","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Command","id":"0:755:1563","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:13460:2691":{"id":"2:13460:2691","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:12997:8603","prim@char":"1:15839:8315"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:8597","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:508:4016":{"id":"0:508:4016","crate_id":0,"name":"is_next_line_help_set","span":{"filename":"src/builder/arg.rs","begin":[4602,4],"end":[4604,5]},"visibility":"public","docs":"Report whether [`Arg::next_line_help`] is set","links":{"`Arg::next_line_help`":"0:3816:1564"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1576":{"id":"0:1576","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1896,0],"end":[1901,1]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"ValueParserFactory","id":"0:1543:2167","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"primitive","inner":"i64"},"items":["0:1577:1574","0:1578:2158"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3548:8469":{"id":"2:3548:8469","crate_id":2,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3550:741"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Index","id":"2:3544:4471","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:2:3173-0:4561:6700":{"id":"b:2:3173-0:4561:6700","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ContextValue","id":"0:4561:6700","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3175:669"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:5:787-0:4397:2164":{"id":"b:5:787-0:4397:2164","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:783:211","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"StringValueParser","id":"0:4397:2164","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:789:4115","5:790:4707","5:791:9628"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1329:669":{"id":"0:1329:669","crate_id":0,"name":"from","span":{"filename":"src/builder/value_parser.rs","begin":[354,4],"end":[357,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["value",{"kind":"resolved_path","inner":{"name":"std::ops::RangeInclusive","id":"2:45806:187","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i64"}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:917":{"id":"0:917","crate_id":0,"name":null,"span":{"filename":"src/builder/command.rs","begin":[3263,0],"end":[3784,1]},"visibility":{"restricted":{"parent":"0:649:1810","path":"::builder::command"}},"docs":"# Reflection","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:4244:1577","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["0:920:5544","0:921:5545","0:922:5547","0:924:3926","0:925:5550","0:926:5552","0:927:5554","0:928:5556","0:929:5558","0:930:5560","0:931:5562","0:932:3934","0:933:5565","0:934:3947","0:938:5571","0:942:5573","0:946:3949","0:949:5576","0:952:5578","0:955:1927","0:956:4720","0:957:5586","0:959:5588","0:961:5591","0:962:5593","0:963:5596","0:964:5598","0:965:5599","0:966:5600","0:967:5601","0:968:5602","0:969:5605","0:972:5609","0:975:5611","0:977:5613","0:979:5615","0:982:5617","0:985:5624","0:993:5636","0:995:5640","0:996:5642","0:997:5644","0:998:4016","0:999:5647","0:1000:5649","0:1001:5651","0:1003:5655","0:1006:5661","0:1008:5664","0:1009:5666","0:1010:5668","0:1011:4018","0:1012:5671","0:1013:5673","0:1014:5675","0:1015:5679","0:1018:5681","0:1019:5683","0:1020:5685","0:1021:5687"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:9223:7158-0:3970:1581":{"id":"a:2:9223:7158-0:3970:1581","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9223:7158","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgSettings","id":"0:3970:1581","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:3281:5920-0:4456:2171":{"id":"a:2:3281:5920-0:4456:2171","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3281:5920","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BoolValueParser","id":"0:4456:2171","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:2334:2018":{"id":"0:2334:2018","crate_id":0,"name":"Item","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1660,4],"end":[1660,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"primitive","inner":"usize"}}},"b:5:787-0:4444:2163":{"id":"b:5:787-0:4444:2163","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:783:211","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"RangedU64ValueParser","id":"0:4444:2163","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["5:789:4115","5:790:4707","5:791:9628"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:3240:200-0:3903:1565":{"id":"a:2:3240:200-0:3903:1565","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3240:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3903:1565","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2846-0:4468:2172":{"id":"b:2:2846-0:4468:2172","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2840:8484","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BoolishValueParser","id":"0:4468:2172","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2848:21287"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:993:5636":{"id":"0:993:5636","crate_id":0,"name":"is_no_binary_name_set","span":{"filename":"src/builder/command.rs","begin":[3632,4],"end":[3634,5]},"visibility":"public","docs":"Report whether [`Command::no_binary_name`] is set","links":{"`Command::no_binary_name`":"0:4244:1577"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1550:1574":{"id":"0:1550:1574","crate_id":0,"name":"Parser","span":{"filename":"src/builder/value_parser.rs","begin":[1831,4],"end":[1831,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1294:2166","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"b:5:6406-0:4244:1577":{"id":"b:5:6406-0:4244:1577","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10262:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"ToString","id":"5:6404:212","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:4244:1577","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["5:6408:1376"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4795":{"id":"0:4795","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1592,9],"end":[1592,14]},"visibility":{"restricted":{"parent":"0:2077:7161","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OsValues","id":"0:4791:1586","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["0:4797:397"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3969-0:1294:2166":{"id":"b:2:3969-0:1294:2166","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3967:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1294:2166","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3971:1408"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:759:907":{"id":"0:759:907","crate_id":0,"name":"new","span":{"filename":"src/builder/command.rs","begin":[133,4],"end":[161,5]},"visibility":"public","docs":"Creates a new instance of an `Command`.\n\nIt is common, but not required, to use binary name as the `name`. This\nname will only be displayed to the user when they request to print\nversion or help and usage information.\n\nSee also [`command!`](crate::command!) and [`crate_name!`](crate::crate_name!).\n\n# Examples\n\n```no_run\n# use clap::Command;\nCommand::new(\"My Program\")\n# ;\n```","links":{"crate::command!":"0:103:1810"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["name",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1868:1948":{"id":"0:1868:1948","crate_id":0,"name":"print","span":{"filename":"src/error/mod.rs","begin":[155,4],"end":[157,5]},"visibility":"public","docs":"Prints formatted and colored error to `stdout` or `stderr` according to its error kind\n\n# Example\n```no_run\nuse clap::Command;\n\nmatch Command::new(\"Command\").try_get_matches() {\n    Ok(matches) => {\n        // do_something\n    },\n    Err(err) => {\n        err.print().expect(\"Error writing Error\");\n        // do_something\n    },\n};\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:4026:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4436":{"id":"0:4436","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1090,9],"end":[1090,13]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"$crate::marker::Copy","id":"2:3250:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"std::convert::TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i64"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3240:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3252:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3250:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:4432:2162","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:2840:8484":{"id":"2:2840:8484","crate_id":2,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2842:21287"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2837:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3240:200":{"id":"2:3240:200","crate_id":2,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:2843-0:4474:2175":{"id":"b:2:2843-0:4474:2175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2837:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"NonEmptyStringValueParser","id":"0:4474:2175","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2845:2590"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13360":{"id":"2:13360","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:12457:1319","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:13361:780","2:13362:1813","2:13363:67021","2:13364:67022","2:13366:67023","2:13369:6000","2:13370:67024","2:13371:293","2:13372:63613","2:13373:4118","2:13375:7101","2:13377:21288","2:13379:21289","2:13381:10691","2:13382:67025","2:13383:63632","2:13384:63633","2:13385:1828","2:13386:10962","2:13387:6013","2:13388:39523","2:13389:39513","2:13390:5724","2:13391:67026","2:13392:39508","2:13393:1928","2:13396:6595","2:13399:63648","2:13402:2138","2:13406:9593","2:13410:6683","2:13413:39380","2:13416:63642","2:13419:67027","2:13422:67028","2:13425:63644","2:13428:63646","2:13431:67029","2:13434:67030","2:13437:2003","2:13440:67031","2:13443:67032","2:13446:67033","2:13449:5725","2:13451:67034","2:13453:67035","2:13455:67036","2:13456:67037","2:13457:67038","2:13460:2691","2:13463:7744","2:13466:63649","2:13469:67039","2:13472:67040","2:13475:67041","2:13478:2002","2:13480:11302","2:13481:1760","2:13482:16224","2:13483:16225","2:13484:67042","2:13486:10663","2:13487:67043"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4781":{"id":"0:4781","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1507,16],"end":[1507,21]},"visibility":{"restricted":{"parent":"0:2077:7161","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10255:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:4773:1588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["0:4783:648"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:801:4669":{"id":"0:801:4669","crate_id":0,"name":"try_get_matches_from_mut","span":{"filename":"src/builder/command.rs","begin":[680,4],"end":[731,5]},"visibility":"public","docs":"Parse the specified arguments, returning a [`clap::Result`] on failure.\n\nLike [`App::try_get_matches_from`] but doesn't consume the `Command`.\n\n**NOTE:** This method WILL NOT exit when `--help` or `--version` (or short versions) are\nused. It will return a [`clap::Error`], where the [`kind`] is a [`ErrorKind::DisplayHelp`]\nor [`ErrorKind::DisplayVersion`] respectively. You must call [`Error::exit`] or\nperform a [`std::process::exit`] yourself.\n\n**NOTE:** The first argument will be parsed as the binary name unless\n[`Command::no_binary_name`] is used.\n\n# Panics\n\nIf contradictory arguments or settings exist.\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg};\nlet arg_vec = vec![\"my_prog\", \"some\", \"args\", \"to\", \"parse\"];\n\nlet mut cmd = Command::new(\"myprog\");\n    // Args and options go here...\nlet matches = cmd.try_get_matches_from_mut(arg_vec)\n    .unwrap_or_else(|e| e.exit());\n```\n[`App::try_get_matches_from`]: Command::try_get_matches_from()\n[`clap::Result`]: Result\n[`clap::Error`]: crate::Error\n[`kind`]: crate::Error","links":{"`ErrorKind::DisplayVersion`":"0:4587:1584","Command::try_get_matches_from()":"0:4244:1577","`ErrorKind::DisplayHelp`":"0:4587:1584","`Error::exit`":"0:4640:127","`std::process::exit`":"1:7778:2009","`Command::no_binary_name`":"0:4244:1577","crate::Error":"0:4640:127","Result":"2:47483:195"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["itr",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"ClapResult","id":"0:1854:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4706:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8367:151","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"T"}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsString","id":"1:2920:170","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1222":{"id":"0:1222","crate_id":0,"name":null,"span":{"filename":"src/builder/possible_value.rs","begin":[140,0],"end":[247,1]},"visibility":{"restricted":{"parent":"0:1203:2155","path":"::builder::possible_value"}},"docs":"Reflection","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:4298:1582","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["0:1224:3926","0:1225:3928","0:1226:5965","0:1227:4018","0:1229:5971","0:1231:5979","0:1233:2003"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4534:6794":{"id":"0:4534:6794","crate_id":0,"name":"MaxOccurrences","span":{"filename":"src/error/context.rs","begin":[24,4],"end":[24,18]},"visibility":"default","docs":"Maximum number of allowed occurrences","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"b:2:2846-0:4801:1585":{"id":"b:2:2846-0:4801:1585","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2840:8484","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:4801:1585","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:2848:21287"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4578":{"id":"0:4578","crate_id":0,"name":null,"span":{"filename":"src/error/context.rs","begin":[42,16],"end":[42,21]},"visibility":{"restricted":{"parent":"0:1839:470","path":"::error::context"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10255:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ContextValue","id":"0:4561:6700","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:4579:648"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3405:2350":{"id":"0:3405:2350","crate_id":0,"name":"InferSubcommands","span":{"filename":"src/builder/app_settings.rs","begin":[155,4],"end":[155,20]},"visibility":"default","docs":"Deprecated, replaced with [`Command::infer_subcommands`]","links":{"`Command::infer_subcommands`":"0:4244:1577"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"a:2:3252:209-0:3816:1564":{"id":"a:2:3252:209-0:3816:1564","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3252:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3816:1564","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1345:648":{"id":"0:1345:648","crate_id":0,"name":"fmt","span":{"filename":"src/builder/value_parser.rs","begin":[515,4],"end":[523,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"std::fmt::Formatter","id":"2:10215:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"std::fmt::Error","id":"2:48422:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3334:59":{"id":"0:3334:59","crate_id":0,"name":"default","span":{"filename":"src/util/color.rs","begin":[59,4],"end":[61,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:403:3403":{"id":"0:403:3403","crate_id":0,"name":"default_missing_values_os","span":{"filename":"src/builder/arg.rs","begin":[2337,4],"end":[2340,5]},"visibility":"public","docs":"Value for the argument when the flag is present but no value is specified.\n\nSee [`Arg::default_missing_values`].\n\n[`Arg::default_missing_values`]: Arg::default_missing_values()\n[`OsStr`]: std::ffi::OsStr","links":{"Arg::default_missing_values()":"0:3816:1564"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["vals",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"1:2923:169","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:779:2619":{"id":"0:779:2619","crate_id":0,"name":"groups","span":{"filename":"src/builder/command.rs","begin":[382,4],"end":[391,5]},"visibility":"public","docs":"Adds multiple [`ArgGroup`]s to the [`Command`] at once.\n\n# Examples\n\n```no_run\n# use clap::{Command, arg, ArgGroup};\nCommand::new(\"cmd\")\n    .arg(arg!(\"--set-ver [ver] 'set the version manually'\"))\n    .arg(arg!(\"--major         'auto increase major'\"))\n    .arg(arg!(\"--minor         'auto increase minor'\"))\n    .arg(arg!(\"--patch         'auto increase patch'\"))\n    .arg(arg!(\"-c [FILE]       'a config file'\"))\n    .arg(arg!(\"-i [IFACE]      'an interface'\"))\n    .groups(&[\n        ArgGroup::new(\"vers\")\n            .args(&[\"set-ver\", \"major\", \"minor\",\"patch\"])\n            .required(true),\n        ArgGroup::new(\"input\")\n            .args(&[\"c\", \"i\"])\n    ])\n# ;\n```","links":{"`ArgGroup`":"0:3903:1565","`Command`":"0:755:1563"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["groups",{"kind":"generic","inner":"I"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8367:151","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"T"}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3903:1565","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3969-0:4468:2172":{"id":"b:2:3969-0:4468:2172","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3967:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BoolishValueParser","id":"0:4468:2172","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3971:1408"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:105:1829":{"id":"0:105:1829","crate_id":0,"name":"arg","span":{"filename":"src/macros.rs","begin":[761,0],"end":[774,1]},"visibility":"public","docs":"Create an [`Arg`] from a usage string.\n\nAllows creation of basic settings for the [`Arg`].\n\n**NOTE**: Not all settings may be set using the usage string method. Some properties are\nonly available via the builder pattern.\n\n# Syntax\n\nUsage strings typically following the form:\n\n```notrust\n[explicit name] [short] [long] [value names] [...] [help string]\n```\n\n### Explicit Name\n\nThe name may be either a bare-word or a string, followed by a `:`, like `name:` or\n`\"name\":`.\n\n*Note:* This is an optional field, if it's omitted the argument will use one of the additional\nfields as the name using the following priority order:\n\n 1. Explicit Name\n 2. Long\n 3. Value Name\n\nSee [`Arg::name`][crate::Arg::name].\n\n### Short\n\nA short flag is a `-` followed by either a bare-character or quoted character, like `-f` or\n`-'f'`.\n\nSee [`Arg::short`][crate::Arg::short].\n\n### Long\n\nA long flag is a `--` followed by either a bare-word or a string, like `--foo` or\n`--\"foo\"`.\n\nSee [`Arg::long`][crate::Arg::long].\n\n### Values (Value Notation)\n\nThis is set by placing bare-word between:\n- `[]` like `[FOO]`\n  - Positional argument: optional\n  - Named argument: optional value\n- `<>` like `<FOO>`: required\n\nSee [`Arg::value_name`][crate::Arg::value_name].\n\n### `...`\n\n`...` (three consecutive dots/periods) specifies that this argument may occur multiple\ntimes (not to be confused with multiple values per occurrence).\n\nSee [`Arg::multiple_occurrences`][crate::Arg::multiple_occurrences].\n\n### Help String\n\nThe help string is denoted between a pair of double quotes `\"\"` and may contain any\ncharacters.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, arg};\nCommand::new(\"prog\")\n    .args(&[\n        arg!(--config <FILE> \"a required file for the configuration and no short\"),\n        arg!(-d --debug ... \"turns on debugging information and allows multiples\"),\n        arg!([input] \"an optional input file to use\")\n])\n# ;\n```\n[`Arg`]: ./struct.Arg.html","links":{"crate::Arg::long":"0:3816:1564","crate::Arg::multiple_occurrences":"0:3816:1564","crate::Arg::value_name":"0:3816:1564","crate::Arg::short":"0:3816:1564","crate::Arg::name":"0:3816:1564"},"attrs":["#[macro_export]"],"deprecation":null,"kind":"macro","inner":"macro_rules! arg {\n    ( $name:ident: $($tail:tt)+ ) => { ... };\n    ( $($tail:tt)+ ) => { ... };\n}"},"0:1338":{"id":"0:1338","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[504,0],"end":[512,1]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":"Create a [`ValueParser`] with [`PossibleValuesParser`]\n\nSee [`PossibleValuesParser`] for more flexibility in creating the\n[`PossibleValue`][crate::PossibleValue]s.\n\n# Examples\n\n```rust\nlet mut cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"color\")\n            .long(\"color\")\n            .value_parser([\"always\", \"auto\", \"never\"])\n            .default_value(\"auto\")\n    );\n\nlet m = cmd.try_get_matches_from_mut(\n    [\"cmd\", \"--color\", \"never\"]\n).unwrap();\n\nlet color: &String = m.get_one(\"color\")\n    .expect(\"default\");\nassert_eq!(color, \"never\");\n```","links":{"crate::PossibleValue":"0:4298:1582","`ValueParser`":"0:1294:2166","`PossibleValuesParser`":"0:4425:2161"},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"C","kind":{"const":{"type":{"kind":"primitive","inner":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"super::PossibleValue","id":"0:4298:1582","args":{"angle_bracketed":{"args":[{"lifetime":"'static"}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"array","inner":{"type":{"kind":"generic","inner":"P"},"len":"C"}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1294:2166","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:1342:669"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3347:1562":{"id":"0:3347:1562","crate_id":0,"name":"ArgAction","span":{"filename":"src/builder/action.rs","begin":[26,0],"end":[250,1]},"visibility":"public","docs":"Behavior of arguments when they are encountered while parsing\n\n# Examples\n\n```rust\n# use clap::Command;\n# use clap::Arg;\nlet cmd = Command::new(\"mycmd\")\n    .arg(\n        Arg::new(\"special-help\")\n            .short('?')\n            .action(clap::ArgAction::Help)\n    );\n\n// Existing help still exists\nlet err = cmd.clone().try_get_matches_from([\"mycmd\", \"-h\"]).unwrap_err();\nassert_eq!(err.kind(), clap::error::ErrorKind::DisplayHelp);\n\n// New help available\nlet err = cmd.try_get_matches_from([\"mycmd\", \"-?\"]).unwrap_err();\nassert_eq!(err.kind(), clap::error::ErrorKind::DisplayHelp);\n```","links":{},"attrs":["#[non_exhaustive]","#[allow(missing_copy_implementations)]"],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:3348:2237","0:3350:2241","0:3352:2244","0:3354:2247","0:3356:2258","0:3358:2262","0:3360:107","0:3362:2271","0:3364:2281"],"impls":["0:218","a:2:9222:7159-0:3347:1562","a:2:3252:209-0:3347:1562","a:2:3240:200-0:3347:1562","a:2:9223:7158-0:3347:1562","a:2:3281:5920-0:3347:1562","b:2:2843-0:3347:1562","b:2:3169-0:3347:1562","b:2:3173-0:3347:1562","b:2:3184-0:3347:1562","b:2:3969-0:3347:1562","b:2:2846-0:3347:1562","b:2:3179-0:3347:1562","b:5:787-0:3347:1562","0:3366","0:3368"]}},"b:2:3184-0:4415:2173":{"id":"b:2:3184-0:4415:2173","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"EnumValueParser","id":"0:4415:2173","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}},"items":["2:3187:127","2:3188:1394"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:5084":{"id":"0:5084","crate_id":0,"name":null,"span":{"filename":"src/util/color.rs","begin":[2,29],"end":[2,31]},"visibility":{"restricted":{"parent":"0:3332:1529","path":"::util::color"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2897:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:5071:1570","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4553":{"id":"0:4553","crate_id":0,"name":null,"span":{"filename":"src/error/context.rs","begin":[2,22],"end":[2,27]},"visibility":{"restricted":{"parent":"0:1839:470","path":"::error::context"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10255:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:4515:6699","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:4554:648"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:812:4760":{"id":"0:812:4760","crate_id":0,"name":"render_long_version","span":{"filename":"src/builder/command.rs","begin":[872,4],"end":[874,5]},"visibility":"public","docs":"Version message rendered as if the user ran `--version`.\n\nSee also [`Command::render_version`].\n\n### Coloring\n\nThis function does not try to color the message nor it inserts any [ANSI escape codes].\n\n### Examples\n\n```rust\n# use clap::Command;\nuse std::io;\nlet cmd = Command::new(\"myprog\");\nprintln!(\"{}\", cmd.render_long_version());\n```\n[`io::Write`]: std::io::Write\n[`-V` (short)]: Command::version()\n[`--version` (long)]: Command::long_version()\n[ANSI escape codes]: https://en.wikipedia.org/wiki/ANSI_escape_code","links":{"`Command::render_version`":"0:4244:1577"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:4018:8498":{"id":"2:4018:8498","crate_id":2,"name":"Provider","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4019:9786"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:9222:7159-0:4640:127":{"id":"a:2:9222:7159-0:4640:127","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9222:7159","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4640:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"0:3918":{"id":"0:3918","crate_id":0,"name":null,"span":{"filename":"src/builder/arg_group.rs","begin":[80,25],"end":[80,34]},"visibility":{"restricted":{"parent":"0:597:2152","path":"::builder::arg_group"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"StructuralPartialEq","id":"2:3248:207","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3903:1565","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:31778:68510":{"id":"2:31778:68510","crate_id":2,"name":"saturating_div","span":null,"visibility":"public","docs":"Saturating integer division. Computes `self / rhs`, saturating at the\nnumeric bounds instead of overflowing.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(5u64.saturating_div(2), 2);\n\n```\n\n```should_panic\nlet _ = 1u64.saturating_div(0);\n\n```","links":{},"attrs":["#[stable(feature = \"saturating_div\", since = \"1.58.0\")]","#[rustc_const_stable(feature = \"saturating_div\", since = \"1.58.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13422:67028":{"id":"2:13422:67028","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12997:8603","str::split_terminator":"1:15845:8320","prim@char":"1:15839:8315","str::split":"1:15845:8320"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:49388:8630","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:8597","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:8597","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:8598","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13382:67025":{"id":"2:13382:67025","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"crate::ops::IndexMut":"2:3548:8469","`str`":"1:15845:8320","str::slice_unchecked":"1:15845:8320"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:886:4504":{"id":"0:886:4504","crate_id":0,"name":"long_flag","span":{"filename":"src/builder/command.rs","begin":[2315,4],"end":[2325,5]},"visibility":"public","docs":"Sets the long version of the subcommand flag without the preceding `--`.\n\nAllows the subcommand to be used as if it were an [`Arg::long`].\n\n**NOTE:** Any leading `-` characters will be stripped.\n\n# Examples\n\nTo set `long_flag` use a word containing valid UTF-8 codepoints. If you supply a double leading\n`--` such as `--sync` they will be stripped. Hyphens in the middle of the word; however,\nwill *not* be stripped (i.e. `sync-file` is allowed).\n\n```\n# use clap::{Command, Arg, ArgAction};\nlet matches = Command::new(\"pacman\")\n    .subcommand(\n        Command::new(\"sync\").long_flag(\"sync\").arg(\n            Arg::new(\"search\")\n                .short('s')\n                .long(\"search\")\n                .action(ArgAction::SetTrue)\n                .help(\"search remote repositories for matching strings\"),\n        ),\n    )\n    .get_matches_from(vec![\"pacman\", \"--sync\", \"--search\"]);\n\nassert_eq!(matches.subcommand_name().unwrap(), \"sync\");\nlet sync_matches = matches.subcommand_matches(\"sync\").unwrap();\nassert!(*sync_matches.get_one::<bool>(\"search\").expect(\"defaulted by clap\"));\n```\n\n[`Arg::long`]: Arg::long()","links":{"Arg::long()":"0:3816:1564"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["long",{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1392":{"id":"0:1392","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[755,0],"end":[759,1]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Default","id":"2:3218:115","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OsStringValueParser","id":"0:4403:2176","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:1393:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:476:3943":{"id":"0:476:3943","crate_id":0,"name":"get_short_and_visible_aliases","span":{"filename":"src/builder/arg.rs","begin":[4331,4],"end":[4340,5]},"visibility":"public","docs":"Get the short option name and its visible aliases, if any","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7764:223","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"char"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2843-0:4750:7086":{"id":"b:2:2843-0:4750:7086","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2837:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValuesRef","id":"0:4750:7086","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["2:2845:2590"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1214":{"id":"0:1214","crate_id":0,"name":null,"span":{"filename":"src/builder/possible_value.rs","begin":[37,0],"end":[137,1]},"visibility":{"restricted":{"parent":"0:1203:2155","path":"::builder::possible_value"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:4298:1582","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["0:1216:907","0:1217:1852","0:1218:3559","0:1219:261","0:1220:2625"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:957:5586":{"id":"0:957:5586","crate_id":0,"name":"get_subcommands","span":{"filename":"src/builder/command.rs","begin":[3433,4],"end":[3435,5]},"visibility":"public","docs":"Iterate through the set of subcommands, getting a reference to each.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8565:157","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"App","id":"0:4244:1577","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}}}}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3184-0:3970:1581":{"id":"b:2:3184-0:3970:1581","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgSettings","id":"0:3970:1581","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3187:127","2:3188:1394"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:9223:7158-0:1294:2166":{"id":"a:2:9223:7158-0:1294:2166","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9223:7158","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1294:2166","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"b:2:3179-0:4515:6699":{"id":"b:2:3179-0:4515:6699","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3149:217","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:4515:6699","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3182:127","2:3183:1395"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:31744:1106":{"id":"2:31744:1106","crate_id":2,"name":"rotate_right","span":null,"visibility":"public","docs":"Shifts the bits to the right by a specified amount, `n`,\nwrapping the truncated bits to the beginning of the resulting\ninteger.\n\nPlease note this isn't the same operation as the `>>` shifting operator!\n\n# Examples\n\nBasic usage:\n\n```\nlet n = 0x6e10aau64;\nlet m = 0xaa00000000006e1;\n\nassert_eq!(n.rotate_right(12), m);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["n",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4407":{"id":"0:4407","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[722,22],"end":[722,27]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10255:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OsStringValueParser","id":"0:4403:2176","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:4408:648"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4844:404":{"id":"0:4844:404","crate_id":0,"name":"cmp","span":{"filename":"src/parser/matches/value_source.rs","begin":[2,56],"end":[2,59]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4823:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::cmp::Ordering","id":"2:37488:168","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1218:3559":{"id":"0:1218:3559","crate_id":0,"name":"hide","span":{"filename":"src/builder/possible_value.rs","begin":[98,4],"end":[101,5]},"visibility":"public","docs":"Hides this value from help and shell completions.\n\nThis is an alternative to hiding through [`Arg::hide_possible_values(true)`], if you only\nwant to hide some values.\n\n# Examples\n\n```rust\n# use clap::PossibleValue;\nPossibleValue::new(\"secret\")\n    .hide(true)\n# ;\n```\n[`Arg::hide_possible_values(true)`]: crate::Arg::hide_possible_values()","links":{"crate::Arg::hide_possible_values()":"0:3816:1564"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:612:886":{"id":"0:612:886","crate_id":0,"name":"name","span":{"filename":"src/builder/arg_group.rs","begin":[136,4],"end":[138,5]},"visibility":"public","docs":"Deprecated, replaced with [`ArgGroup::id`]","links":{"`ArgGroup::id`":"0:3903:1565"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["n",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:31833:68553":{"id":"2:31833:68553","crate_id":2,"name":"widening_mul","span":null,"visibility":"public","docs":"Calculates the complete product `self * rhs` without the possibility to overflow.\n\nThis returns the low-order (wrapping) bits and the high-order (overflow) bits\nof the result as two separate values, in that order.\n\n# Examples\n\nBasic usage:\n\nPlease note that this example is shared between integer types.\nWhich explains why `u32` is used here.\n\n```\n#![feature(bigint_helper_methods)]\nassert_eq!(5u32.widening_mul(2), (10, 0));\nassert_eq!(1_000_000_000u32.widening_mul(10), (1410065408, 2));\n```","links":{},"attrs":["#[unstable(feature = \"bigint_helper_methods\", issue = \"85532\")]","#[rustc_const_unstable(feature = \"const_bigint_helper_methods\", issue =\n\"85532\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"u64"},{"kind":"primitive","inner":"u64"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1568:1574":{"id":"0:1568:1574","crate_id":0,"name":"Parser","span":{"filename":"src/builder/value_parser.rs","begin":[1873,4],"end":[1873,44]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:4432:2162","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i16"}}],"bindings":[]}},"param_names":[]}}}},"0:1867:2009":{"id":"0:1867:2009","crate_id":0,"name":"exit","span":{"filename":"src/error/mod.rs","begin":[119,4],"end":[137,5]},"visibility":"public","docs":"Prints the error and exits.\n\nDepending on the error kind, this either prints to `stderr` and exits with a status of `2`\nor prints to `stdout` and exits with a status of `0`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"never"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:400:3406":{"id":"0:400:3406","crate_id":0,"name":"default_missing_value_os","span":{"filename":"src/builder/arg.rs","begin":[2313,4],"end":[2315,5]},"visibility":"public","docs":"Value for the argument when the flag is present but no value is specified.\n\nSee [`Arg::default_missing_value`].\n\n[`Arg::default_missing_value`]: Arg::default_missing_value()\n[`OsStr`]: std::ffi::OsStr","links":{"Arg::default_missing_value()":"0:3816:1564"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["val",{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"1:2923:169","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5081":{"id":"0:5081","crate_id":0,"name":null,"span":{"filename":"src/util/color.rs","begin":[2,22],"end":[2,27]},"visibility":{"restricted":{"parent":"0:3332:1529","path":"::util::color"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:5071:1570","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:5082:397"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4718":{"id":"0:4718","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[67,32],"end":[67,41]},"visibility":{"restricted":{"parent":"0:2077:7161","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"StructuralPartialEq","id":"2:3248:207","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4706:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:3252:209-0:4409:2177":{"id":"a:2:3252:209-0:4409:2177","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3252:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"PathBufValueParser","id":"0:4409:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4714":{"id":"0:4714","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[67,16],"end":[67,21]},"visibility":{"restricted":{"parent":"0:2077:7161","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4706:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:4715:397"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:9223:7158-0:4515:6699":{"id":"a:2:9223:7158-0:4515:6699","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9223:7158","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:4515:6699","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2843-0:4397:2164":{"id":"b:2:2843-0:4397:2164","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2837:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"StringValueParser","id":"0:4397:2164","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2845:2590"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4801:1585":{"id":"0:4801:1585","crate_id":0,"name":"Indices","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1654,0],"end":[1657,1]},"visibility":"public","docs":"Iterate over indices for where an argument appeared when parsing, via [`ArgMatches::indices_of`]\n\n# Examples\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"myapp\")\n    .arg(Arg::new(\"output\")\n        .short('o')\n        .multiple_values(true)\n        .takes_value(true))\n    .get_matches_from(vec![\"myapp\", \"-o\", \"val1\", \"val2\"]);\n\nlet mut indices = m.indices_of(\"output\").unwrap();\n\nassert_eq!(indices.next(), Some(2));\nassert_eq!(indices.next(), Some(3));\nassert_eq!(indices.next(), None);\n```\n[`ArgMatches::indices_of`]: ArgMatches::indices_of()","links":{"ArgMatches::indices_of()":"0:4706:1568"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["a:2:9222:7159-0:4801:1585","a:2:3252:209-0:4801:1585","a:2:3240:200-0:4801:1585","a:2:9223:7158-0:4801:1585","a:2:3281:5920-0:4801:1585","b:2:2843-0:4801:1585","b:2:3169-0:4801:1585","b:2:3173-0:4801:1585","b:2:3184-0:4801:1585","b:2:3969-0:4801:1585","b:2:8371-0:4801:1585","b:2:2846-0:4801:1585","b:2:3179-0:4801:1585","b:5:787-0:4801:1585","0:4805","0:4808","0:2332","0:2337","0:2340","0:2342"]}},"0:519:4042":{"id":"0:519:4042","crate_id":0,"name":"is_ignore_case_set","span":{"filename":"src/builder/arg.rs","begin":[4669,4],"end":[4671,5]},"visibility":"public","docs":"Reports whether [`Arg::ignore_case`] is set","links":{"`Arg::ignore_case`":"0:3816:1564"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3184-0:4244:1577":{"id":"b:2:3184-0:4244:1577","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:4244:1577","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["2:3187:127","2:3188:1394"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1231:5979":{"id":"0:1231:5979","crate_id":0,"name":"get_name_and_aliases","span":{"filename":"src/builder/possible_value.rs","begin":[219,4],"end":[221,5]},"visibility":"public","docs":"Returns all valid values of the argument value.\n\nNamely the name and all aliases.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8565:157","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"outlives":"'_"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4411":{"id":"0:4411","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[764,15],"end":[764,20]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"PathBufValueParser","id":"0:4409:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:4412:397"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:906:5348":{"id":"0:906:5348","crate_id":0,"name":"subcommand_required","span":{"filename":"src/builder/command.rs","begin":[2752,4],"end":[2758,5]},"visibility":"public","docs":"If no [`subcommand`] is present at runtime, error and exit gracefully.\n\n# Examples\n\n```rust\n# use clap::{Command, ErrorKind};\nlet err = Command::new(\"myprog\")\n    .subcommand_required(true)\n    .subcommand(Command::new(\"test\"))\n    .try_get_matches_from(vec![\n        \"myprog\",\n    ]);\nassert!(err.is_err());\nassert_eq!(err.unwrap_err().kind(), ErrorKind::MissingSubcommand);\n# ;\n```\n\n[`subcommand`]: crate::Command::subcommand()","links":{"crate::Command::subcommand()":"0:4244:1577"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2843-0:3816:1564":{"id":"b:2:2843-0:3816:1564","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2837:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3816:1564","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["2:2845:2590"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4797:397":{"id":"0:4797:397","crate_id":0,"name":"clone","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1592,9],"end":[1592,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"OsValues","id":"0:4791:1586","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3429:2402":{"id":"0:3429:2402","crate_id":0,"name":"DontCollapseArgsInUsage","span":{"filename":"src/builder/app_settings.rs","begin":[289,4],"end":[289,27]},"visibility":"default","docs":"Deprecated, replaced with [`Command::dont_collapse_args_in_usage`] and\n[`Command::is_dont_collapse_args_in_usage_set`]","links":{"`Command::dont_collapse_args_in_usage`":"0:4244:1577","`Command::is_dont_collapse_args_in_usage_set`":"0:4244:1577"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:1022":{"id":"0:1022","crate_id":0,"name":null,"span":{"filename":"src/builder/command.rs","begin":[3787,0],"end":[4105,1]},"visibility":{"restricted":{"parent":"0:649:1810","path":"::builder::command"}},"docs":"Deprecated","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:4244:1577","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3814:171":{"id":"0:3814:171","crate_id":0,"name":"Output","span":{"filename":"src/builder/app_settings.rs","begin":[575,0],"end":[671,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"AppFlags","id":"0:3371:1578","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"0:908:5382":{"id":"0:908:5382","crate_id":0,"name":"allow_invalid_utf8_for_external_subcommands","span":{"filename":"src/builder/command.rs","begin":[2846,4],"end":[2852,5]},"visibility":"public","docs":"Specifies that external subcommands that are invalid UTF-8 should *not* be treated as an error.\n\n**NOTE:** Using external subcommand argument values with invalid UTF-8 requires using\n[`ArgMatches::values_of_os`] or [`ArgMatches::values_of_lossy`] for those particular\narguments which may contain invalid UTF-8 values\n\n**NOTE:** Setting this requires [`Command::allow_external_subcommands`]\n\n# Platform Specific\n\nNon Windows systems only\n\n# Examples\n\n ```\n# use clap::Command;\n// Assume there is an external subcommand named \"subcmd\"\nlet m = Command::new(\"myprog\")\n    .allow_invalid_utf8_for_external_subcommands(true)\n    .allow_external_subcommands(true)\n    .get_matches_from(vec![\n        \"myprog\", \"subcmd\", \"--option\", \"value\", \"-fff\", \"--flag\"\n    ]);\n\n// All trailing arguments will be stored under the subcommand's sub-matches using an empty\n// string argument name\nmatch m.subcommand() {\n    Some((external, ext_m)) => {\n         let ext_args: Vec<&std::ffi::OsStr> = ext_m.values_of_os(\"\").unwrap().collect();\n         assert_eq!(external, \"subcmd\");\n         assert_eq!(ext_args, [\"--option\", \"value\", \"-fff\", \"--flag\"]);\n    },\n    _ => {},\n}\n```\n\n[`ArgMatches::values_of_os`]: crate::ArgMatches::values_of_os()\n[`ArgMatches::values_of_lossy`]: crate::ArgMatches::values_of_lossy()\n[`subcommands`]: crate::Command::subcommand()","links":{"`Command::allow_external_subcommands`":"0:4244:1577","crate::ArgMatches::values_of_os()":"0:4706:1568","crate::ArgMatches::values_of_lossy()":"0:4706:1568"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:31742:68483":{"id":"2:31742:68483","crate_id":2,"name":"trailing_ones","span":null,"visibility":"public","docs":"Returns the number of trailing ones in the binary representation\nof `self`.\n\n# Examples\n\nBasic usage:\n\n```\nlet n = 0b1010111u64;\n\nassert_eq!(n.trailing_ones(), 3);\n```","links":{},"attrs":["#[stable(feature = \"leading_trailing_ones\", since = \"1.46.0\")]","#[rustc_const_stable(feature = \"leading_trailing_ones\", since = \"1.46.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:963:5596":{"id":"0:963:5596","crate_id":0,"name":"get_subommand_help_heading","span":{"filename":"src/builder/command.rs","begin":[3464,4],"end":[3466,5]},"visibility":"public","docs":"Deprecated, replaced with [`App::get_subcommand_help_heading`]","links":{"`App::get_subcommand_help_heading`":"0:4244:1577"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:787-0:3347:1562":{"id":"b:5:787-0:3347:1562","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:783:211","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgAction","id":"0:3347:1562","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:789:4115","5:790:4707","5:791:9628"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3413:2365":{"id":"0:3413:2365","crate_id":0,"name":"Multicall","span":{"filename":"src/builder/app_settings.rs","begin":[198,4],"end":[198,13]},"visibility":"default","docs":"Deprecated, replaced with [`Command::multicall`] and [`Command::is_multicall_set`]","links":{"`Command::multicall`":"0:4244:1577","`Command::is_multicall_set`":"0:4244:1577"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:1531:3153":{"id":"0:1531:3153","crate_id":0,"name":"possible_values","span":{"filename":"src/builder/value_parser.rs","begin":[1691,4],"end":[1695,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2146","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8565:157","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"resolved_path","inner":{"name":"crate::PossibleValue","id":"0:4298:1582","args":{"angle_bracketed":{"args":[{"lifetime":"'static"}],"bindings":[]}},"param_names":[]}}}}}]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:31791:68518":{"id":"2:31791:68518","crate_id":2,"name":"wrapping_pow","span":null,"visibility":"public","docs":"Wrapping (modular) exponentiation. Computes `self.pow(exp)`,\nwrapping around at the boundary of the type.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(3u64.wrapping_pow(5), 243);\nassert_eq!(3u8.wrapping_pow(6), 217);\n```","links":{},"attrs":["#[stable(feature = \"no_panic_pow\", since = \"1.34.0\")]","#[rustc_const_stable(feature = \"const_int_pow\", since = \"1.50.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["exp",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4392:703":{"id":"0:4392:703","crate_id":0,"name":"hash","span":{"filename":"src/builder/value_hint.rs","begin":[27,31],"end":[27,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["state",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"__H"}}}]],"output":{"kind":"tuple","inner":[]},"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"$crate::hash::Hasher","id":"2:10503:146","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:31737:68479":{"id":"2:31737:68479","crate_id":2,"name":"count_ones","span":null,"visibility":"public","docs":"Returns the number of ones in the binary representation of `self`.\n\n# Examples\n\nBasic usage:\n\n```\nlet n = 0b01001100u64;\n\nassert_eq!(n.count_ones(), 3);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]","#[doc(alias = \"popcount\")]","#[doc(alias = \"popcnt\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1535:907":{"id":"0:1535:907","crate_id":0,"name":"new","span":{"filename":"src/builder/value_parser.rs","begin":[1742,4],"end":[1744,5]},"visibility":"public","docs":"Parse non-empty string values","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4462:2174":{"id":"0:4462:2174","crate_id":0,"name":"FalseyValueParser","span":{"filename":"src/builder/value_parser.rs","begin":[1552,0],"end":[1552,31]},"visibility":"public","docs":"Parse false-like string values, everything else is `true`\n\nSee also:\n- [`ValueParser::bool`] for assuming non-false is true\n- [`BoolishValueParser`] for different human readable bool representations\n\n# Example\n\nUsage:\n```rust\nlet mut cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"append\")\n            .value_parser(clap::builder::FalseyValueParser::new())\n            .required(true)\n    );\n\nlet m = cmd.try_get_matches_from_mut([\"cmd\", \"true\"]).unwrap();\nlet port: bool = *m.get_one(\"append\")\n    .expect(\"required\");\nassert_eq!(port, true);\n```\n\nSemantics:\n```rust\n# use std::ffi::OsStr;\n# use clap::builder::TypedValueParser;\n# let cmd = clap::Command::new(\"test\");\n# let arg = None;\nlet value_parser = clap::builder::FalseyValueParser::new();\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"random\")).unwrap(), true);\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"100\")).unwrap(), true);\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"\")).unwrap(), false);\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"false\")).unwrap(), false);\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"No\")).unwrap(), false);\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"oFF\")).unwrap(), false);\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"0\")).unwrap(), false);\n```","links":{"`BoolishValueParser`":"0:4468:2172","`ValueParser::bool`":"0:1294:2166"},"attrs":["#[non_exhaustive]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":false,"fields":[],"impls":["0:1507","a:2:9222:7159-0:4462:2174","a:2:3252:209-0:4462:2174","a:2:3240:200-0:4462:2174","a:2:9223:7158-0:4462:2174","a:2:3281:5920-0:4462:2174","b:2:2843-0:4462:2174","b:2:3169-0:4462:2174","b:2:3173-0:4462:2174","b:2:3184-0:4462:2174","b:2:3969-0:4462:2174","b:2:2846-0:4462:2174","b:2:3179-0:4462:2174","b:5:787-0:4462:2174","0:4463","0:4464","0:4466","0:1512","0:1517"]}},"b:2:3969-0:4397:2164":{"id":"b:2:3969-0:4397:2164","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3967:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"StringValueParser","id":"0:4397:2164","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3971:1408"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3435:2412":{"id":"0:3435:2412","crate_id":0,"name":"DisableHelpFlag","span":{"filename":"src/builder/app_settings.rs","begin":[320,4],"end":[320,19]},"visibility":"default","docs":"Deprecated, replaced with [`Command::disable_help_flag`] and [`Command::is_disable_help_flag_set`]","links":{"`Command::disable_help_flag`":"0:4244:1577","`Command::is_disable_help_flag_set`":"0:4244:1577"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:2043:648":{"id":"0:2043:648","crate_id":0,"name":"fmt","span":{"filename":"src/parser/error.rs","begin":[42,4],"end":[55,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"std::fmt::Formatter","id":"2:10215:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"std::fmt::Result","id":"2:10204:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3187:127":{"id":"2:3187:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:38669:7701","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"0:1553:1574":{"id":"0:1553:1574","crate_id":0,"name":"Parser","span":{"filename":"src/builder/value_parser.rs","begin":[1837,4],"end":[1837,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1294:2166","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"0:2281:59":{"id":"0:2281:59","crate_id":0,"name":"default","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1488,4],"end":[1494,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4313":{"id":"0:4313","crate_id":0,"name":null,"span":{"filename":"src/builder/possible_value.rs","begin":[29,32],"end":[29,41]},"visibility":{"restricted":{"parent":"0:1203:2155","path":"::builder::possible_value"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"StructuralPartialEq","id":"2:3248:207","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:4298:1582","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4561:6700":{"id":"0:4561:6700","crate_id":0,"name":"ContextValue","span":{"filename":"src/error/context.rs","begin":[44,0],"end":[55,1]},"visibility":"public","docs":"A piece of error information","links":{},"attrs":["#[non_exhaustive]"],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:4562:164","0:4564:6291","0:4567:205","0:4570:6767","0:4573:6795"],"impls":["a:2:9222:7159-0:4561:6700","a:2:3252:209-0:4561:6700","a:2:3240:200-0:4561:6700","a:2:9223:7158-0:4561:6700","a:2:3281:5920-0:4561:6700","b:2:2843-0:4561:6700","b:2:3169-0:4561:6700","b:2:3173-0:4561:6700","b:2:3184-0:4561:6700","b:2:3969-0:4561:6700","b:2:2846-0:4561:6700","b:2:3179-0:4561:6700","b:5:787-0:4561:6700","b:23:25-0:4561:6700","0:4576","0:4578","0:4580","0:4581","0:4584","0:4585"]}},"2:14183:8760":{"id":"2:14183:8760","crate_id":2,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14184:21279","2:14185:21280","2:14186:21281","2:14187:21282","2:14188:21283","2:14189:21284","2:14190:9607"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1346":{"id":"0:1346","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[526,0],"end":[536,1]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1294:2166","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:1347:397"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2843-0:4409:2177":{"id":"b:2:2843-0:4409:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2837:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"PathBufValueParser","id":"0:4409:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2845:2590"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:2295":{"id":"0:2295","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1538,0],"end":[1546,1]},"visibility":{"restricted":{"parent":"0:2077:7161","path":"::parser::matches::arg_matches"}},"docs":"Creates an empty iterator.","links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Default","id":"2:3218:115","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:4773:1588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["0:2297:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1191":{"id":"0:1191","crate_id":0,"name":null,"span":{"filename":"src/builder/command.rs","begin":[5092,0],"end":[5132,1]},"visibility":{"restricted":{"parent":"0:649:1810","path":"::builder::command"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Default","id":"2:3218:115","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:4244:1577","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["0:1193:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:2277:7523":{"id":"0:2277:7523","crate_id":0,"name":"next_back","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1479,4],"end":[1481,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"1:2923:169","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3281:5920-0:4425:2161":{"id":"a:2:3281:5920-0:4425:2161","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3281:5920","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValuesParser","id":"0:4425:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1389:6312":{"id":"0:1389:6312","crate_id":0,"name":"Value","span":{"filename":"src/builder/value_parser.rs","begin":[734,4],"end":[734,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"OsString","id":"1:2920:170","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"0:1316":{"id":"0:1316","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[223,0],"end":[260,1]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1294:2166","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:1318:1408","0:1319:3153"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3313:8452":{"id":"2:3313:8452","crate_id":2,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3315:171","2:3316:1334"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:3252:209-0:4298:1582":{"id":"a:2:3252:209-0:4298:1582","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3252:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:4298:1582","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:5:787-0:4801:1585":{"id":"b:5:787-0:4801:1585","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:783:211","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:4801:1585","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["5:789:4115","5:790:4707","5:791:9628"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4367:6246":{"id":"0:4367:6246","crate_id":0,"name":"ExecutablePath","span":{"filename":"src/builder/value_hint.rs","begin":[42,4],"end":[42,18]},"visibility":"default","docs":"Path to an executable file.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:4456:2171":{"id":"0:4456:2171","crate_id":0,"name":"BoolValueParser","span":{"filename":"src/builder/value_parser.rs","begin":[1453,0],"end":[1453,29]},"visibility":"public","docs":"Implementation for [`ValueParser::bool`]\n\nUseful for composing new [`TypedValueParser`]s","links":{"`ValueParser::bool`":"0:1294:2166","`TypedValueParser`":"0:1362:2165"},"attrs":["#[non_exhaustive]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":false,"fields":[],"impls":["0:1495","a:2:9222:7159-0:4456:2171","a:2:3252:209-0:4456:2171","a:2:3240:200-0:4456:2171","a:2:9223:7158-0:4456:2171","a:2:3281:5920-0:4456:2171","b:2:2843-0:4456:2171","b:2:3169-0:4456:2171","b:2:3173-0:4456:2171","b:2:3184-0:4456:2171","b:2:3969-0:4456:2171","b:2:2846-0:4456:2171","b:2:3179-0:4456:2171","b:5:787-0:4456:2171","0:4457","0:4458","0:4460","0:1499","0:1505"]}},"2:3188:1394":{"id":"2:3188:1394","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3281:5920-0:4561:6700":{"id":"a:2:3281:5920-0:4561:6700","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3281:5920","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ContextValue","id":"0:4561:6700","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:10262:119":{"id":"2:10262:119","crate_id":2,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10263:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:388:3239":{"id":"0:388:3239","crate_id":0,"name":"use_delimiter","span":{"filename":"src/builder/arg.rs","begin":[1890,4],"end":[1892,5]},"visibility":"public","docs":"Deprecated, replaced with [`Arg::use_value_delimiter`]","links":{"`Arg::use_value_delimiter`":"0:3816:1564"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3923:894":{"id":"0:3923:894","crate_id":0,"name":"ne","span":{"filename":"src/builder/arg_group.rs","begin":[80,25],"end":[80,34]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3903:1565","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2250":{"id":"0:2250","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1406,0],"end":[1415,1]},"visibility":{"restricted":{"parent":"0:2077:7161","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["intersperse_with","gt","try_for_each","min","is_sorted_by","fold","size_hint","try_fold","cycle","skip","by_ref","for_each","min_by_key","ge","position","min_by","filter_map","cloned","is_sorted_by_key","sum","product","reduce","cmp","try_collect","take","skip_while","eq","next_chunk","advance_by","lt","max_by","count","any","partial_cmp","cmp_by","__iterator_get_unchecked","try_reduce","zip","all","collect_into","map_while","nth","chain","max_by_key","partial_cmp_by","try_find","last","partition","scan","filter","step_by","take_while","rev","ne","peekable","flatten","collect","find","eq_by","rposition","partition_in_place","le","fuse","copied","intersperse","map","flat_map","max","find_map","enumerate","is_sorted","unzip","is_partitioned","inspect"],"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8565:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValuesRef","id":"0:4750:7086","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["0:2253:2018","0:2254:909","0:2255:4560"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4467:648":{"id":"0:4467:648","crate_id":0,"name":"fmt","span":{"filename":"src/builder/value_parser.rs","begin":[1550,22],"end":[1550,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10215:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10204:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1857":{"id":"0:1857","crate_id":0,"name":null,"span":{"filename":"src/error/mod.rs","begin":[68,0],"end":[986,1]},"visibility":{"restricted":{"parent":"0:1777:1566","path":"::error"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4640:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:1858:61","0:1860:659","0:1861:769","0:1862:470","0:1865:6728","0:1867:2009","0:1868:1948"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:2254:909":{"id":"0:2254:909","crate_id":0,"name":"next","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1409,4],"end":[1411,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8565:157","args":null,"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3969-0:4640:127":{"id":"b:2:3969-0:4640:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3967:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4640:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3971:1408"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3179-0:4425:2161":{"id":"b:2:3179-0:4425:2161","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3149:217","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValuesParser","id":"0:4425:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3182:127","2:3183:1395"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2843-0:3347:1562":{"id":"b:2:2843-0:3347:1562","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2837:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgAction","id":"0:3347:1562","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2845:2590"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1560:2158":{"id":"0:1560:2158","crate_id":0,"name":"value_parser","span":{"filename":"src/builder/value_parser.rs","begin":[1850,4],"end":[1854,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"qualified_path","inner":{"name":"Parser","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:1543:2167","args":null,"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:482:3951":{"id":"0:482:3951","crate_id":0,"name":"get_long_and_visible_aliases","span":{"filename":"src/builder/arg.rs","begin":[4376,4],"end":[4385,5]},"visibility":"public","docs":"Get the long option name and its visible aliases, if any","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7764:223","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:557":{"id":"0:557","crate_id":0,"name":null,"span":{"filename":"src/builder/arg.rs","begin":[5068,0],"end":[5072,1]},"visibility":{"restricted":{"parent":"0:242:1829","path":"::builder::arg"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3816:1564","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3816:1564","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["0:559:669"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:2837:97":{"id":"2:2837:97","crate_id":2,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2839:2590"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:854:4511":{"id":"0:854:4511","crate_id":0,"name":"before_long_help","span":{"filename":"src/builder/command.rs","begin":[1589,4],"end":[1592,5]},"visibility":"public","docs":"Free-form help text for before auto-generated long help (`--help`).\n\nThis is often used for header, copyright, or license information.\n\nIf [`Command::before_help`] is not specified, this message will be displayed for `-h`.\n\n# Examples\n\n```no_run\n# use clap::Command;\nCommand::new(\"myprog\")\n    .before_long_help(\"Some verbose and long info I'd like to appear before the help info\")\n# ;\n```","links":{"`Command::before_help`":"0:4244:1577"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["help",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3252:209-0:4773:1588":{"id":"a:2:3252:209-0:4773:1588","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3252:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:4773:1588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:2287:2018":{"id":"0:2287:2018","crate_id":0,"name":"Item","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1516,4],"end":[1516,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}},"b:2:2846-0:4823:1587":{"id":"b:2:2846-0:4823:1587","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2840:8484","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4823:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2848:21287"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:31759:68495":{"id":"2:31759:68495","crate_id":2,"name":"checked_div_euclid","span":null,"visibility":"public","docs":"Checked Euclidean division. Computes `self.div_euclid(rhs)`, returning `None`\nif `rhs == 0`.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(128u64.checked_div_euclid(2), Some(64));\nassert_eq!(1u64.checked_div_euclid(0), None);\n```","links":{},"attrs":["#[stable(feature = \"euclidean_division\", since = \"1.38.0\")]","#[rustc_const_stable(feature = \"const_euclidean_int_methods\", since =\n\"1.52.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4444:2163":{"id":"0:4444:2163","crate_id":0,"name":"RangedU64ValueParser","span":{"filename":"src/builder/value_parser.rs","begin":[1289,0],"end":[1292,1]},"visibility":"public","docs":"Parse number that fall within a range of values\n\n# Example\n\nUsage:\n```rust\nlet mut cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"port\")\n            .long(\"port\")\n            .value_parser(clap::value_parser!(u64).range(3000..))\n            .takes_value(true)\n            .required(true)\n    );\n\nlet m = cmd.try_get_matches_from_mut([\"cmd\", \"--port\", \"3001\"]).unwrap();\nlet port: u64 = *m.get_one(\"port\")\n    .expect(\"required\");\nassert_eq!(port, 3001);\n```\n\nSemantics:\n```rust\n# use std::ffi::OsStr;\n# use clap::builder::TypedValueParser;\n# let cmd = clap::Command::new(\"test\");\n# let arg = None;\nlet value_parser = clap::builder::RangedU64ValueParser::<u32>::new().range(0..200);\nassert!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"random\")).is_err());\nassert!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"\")).is_err());\nassert!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"-200\")).is_err());\nassert!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"300\")).is_err());\nassert!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"-1\")).is_err());\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"0\")).unwrap(), 0);\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"50\")).unwrap(), 50);\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"std::convert::TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":{"kind":"primitive","inner":"u64"},"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["0:1469","a:2:9222:7159-0:4444:2163","a:2:3252:209-0:4444:2163","a:2:3240:200-0:4444:2163","a:2:9223:7158-0:4444:2163","a:2:3281:5920-0:4444:2163","b:2:2843-0:4444:2163","b:2:3169-0:4444:2163","b:2:3173-0:4444:2163","b:2:3184-0:4444:2163","b:2:3969-0:4444:2163","b:2:2846-0:4444:2163","b:2:3179-0:4444:2163","b:5:787-0:4444:2163","0:4448","0:4450","0:4453","0:1475","0:1488","0:1492"]}},"0:4474:2175":{"id":"0:4474:2175","crate_id":0,"name":"NonEmptyStringValueParser","span":{"filename":"src/builder/value_parser.rs","begin":[1738,0],"end":[1738,39]},"visibility":"public","docs":"Parse non-empty string values\n\nSee also:\n- [`ValueParser::string`]\n\n# Example\n\nUsage:\n```rust\nlet mut cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"append\")\n            .value_parser(clap::builder::NonEmptyStringValueParser::new())\n            .required(true)\n    );\n\nlet m = cmd.try_get_matches_from_mut([\"cmd\", \"true\"]).unwrap();\nlet port: &String = m.get_one(\"append\")\n    .expect(\"required\");\nassert_eq!(port, \"true\");\n```\n\nSemantics:\n```rust\n# use std::ffi::OsStr;\n# use clap::builder::TypedValueParser;\n# let cmd = clap::Command::new(\"test\");\n# let arg = None;\nlet value_parser = clap::builder::NonEmptyStringValueParser::new();\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"random\")).unwrap(), \"random\");\nassert!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"\")).is_err());\n```","links":{"`ValueParser::string`":"0:1294:2166"},"attrs":["#[non_exhaustive]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":false,"fields":[],"impls":["0:1534","a:2:9222:7159-0:4474:2175","a:2:3252:209-0:4474:2175","a:2:3240:200-0:4474:2175","a:2:9223:7158-0:4474:2175","a:2:3281:5920-0:4474:2175","b:2:2843-0:4474:2175","b:2:3169-0:4474:2175","b:2:3173-0:4474:2175","b:2:3184-0:4474:2175","b:2:3969-0:4474:2175","b:2:2846-0:4474:2175","b:2:3179-0:4474:2175","b:5:787-0:4474:2175","0:4475","0:4476","0:4478","0:1536","0:1541"]}},"0:4630:6880":{"id":"0:4630:6880","crate_id":0,"name":"Format","span":{"filename":"src/error/kind.rs","begin":[395,4],"end":[395,10]},"visibility":"default","docs":"Represents a [Format error] (which is a part of [`Display`]).\nTypically caused by writing to `stderr` or `stdout`.\n\n[`Display`]: std::fmt::Display\n[Format error]: std::fmt::Error","links":{"std::fmt::Display":"2:10262:119","std::fmt::Error":"2:48422:127"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:4475":{"id":"0:4475","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1736,9],"end":[1736,13]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3250:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"NonEmptyStringValueParser","id":"0:4474:2175","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13480:11302":{"id":"2:13480:11302","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:23:25-0:3816:1564":{"id":"b:23:25-0:3816:1564","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.8.1/src/equivalent.rs","begin":[18,0],"end":[18,46]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2897:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2837:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Q"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Equivalent","id":"23:22:8796","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3816:1564","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["23:28:8790"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"Q"}}},"a:2:3281:5920-0:1294:2166":{"id":"a:2:3281:5920-0:1294:2166","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3281:5920","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1294:2166","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:931:5562":{"id":"0:931:5562","crate_id":0,"name":"get_long_about","span":{"filename":"src/builder/command.rs","begin":[3334,4],"end":[3336,5]},"visibility":"public","docs":"Get the help message specified via [`Command::long_about`].\n\n[`App::long_about`]: Command::long_about()","links":{"`Command::long_about`":"0:4244:1577"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10272:179":{"id":"2:10272:179","crate_id":2,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10273:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:995:5640":{"id":"0:995:5640","crate_id":0,"name":"is_dont_delimit_trailing_values_set","span":{"filename":"src/builder/command.rs","begin":[3642,4],"end":[3644,5]},"visibility":"public","docs":"Report whether [`Command::dont_delimit_trailing_values`] is set","links":{"`Command::dont_delimit_trailing_values`":"0:4244:1577"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2221:7285":{"id":"0:2221:7285","crate_id":0,"name":"try_remove_many","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1148,4],"end":[1165,5]},"visibility":"public","docs":"Non-panicking version of [`ArgMatches::remove_many`]","links":{"`ArgMatches::remove_many`":"0:4706:1568"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Values2","id":"0:4740:7284","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4686:7087","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3967:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3240:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3252:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:153:1597":{"id":"0:153:1597","crate_id":0,"name":"IntoApp","span":{"filename":"src/derive.rs","begin":[252,0],"end":[282,1]},"visibility":"public","docs":"Create a [`Command`] relevant for a user-defined container.\n\nDerived as part of [`Parser`].","links":{"`Parser`":"0:127:1574","`Command`":"0:755:1563"},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:154:1810","0:156:2052","0:158:2025","0:160:2057"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":["0:192"]}},"a:2:3240:200-0:1294:2166":{"id":"a:2:3240:200-0:1294:2166","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3240:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1294:2166","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4391":{"id":"0:4391","crate_id":0,"name":null,"span":{"filename":"src/builder/value_hint.rs","begin":[27,31],"end":[27,35]},"visibility":{"restricted":{"parent":"0:1272:2157","path":"::builder::value_hint"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"kind":"resolved_path","inner":{"name":"Hash","id":"2:10493:142","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:4356:1583","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:4392:703"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:139:2028":{"id":"0:139:2028","crate_id":0,"name":"try_update_from","span":{"filename":"src/derive.rs","begin":[148,4],"end":[157,5]},"visibility":"default","docs":"Update from iterator, return Err on error.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["itr",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4640:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8367:151","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"T"}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsString","id":"1:2920:170","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4287":{"id":"0:4287","crate_id":0,"name":null,"span":{"filename":"src/builder/command.rs","begin":[77,23],"end":[77,32]},"visibility":{"restricted":{"parent":"0:649:1810","path":"::builder::command"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"StructuralPartialEq","id":"2:3248:207","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:4244:1577","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:23:25-0:4298:1582":{"id":"b:23:25-0:4298:1582","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.8.1/src/equivalent.rs","begin":[18,0],"end":[18,46]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2897:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2837:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Q"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Equivalent","id":"23:22:8796","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:4298:1582","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["23:28:8790"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"Q"}}},"0:1919:6713":{"id":"0:1919:6713","crate_id":0,"name":"source","span":{"filename":"src/error/mod.rs","begin":[1002,4],"end":[1004,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(trivial_casts)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"error::Error","id":"1:2576:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[{"outlives":"'static"}]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3281:5920-0:4706:1568":{"id":"a:2:3281:5920-0:4706:1568","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3281:5920","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4706:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:560":{"id":"0:560","crate_id":0,"name":null,"span":{"filename":"src/builder/arg.rs","begin":[5074,0],"end":[5078,1]},"visibility":{"restricted":{"parent":"0:242:1829","path":"::builder::arg"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2892:173","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3816:1564","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3816:1564","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["0:562:593"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:5705:10641":{"id":"1:5705:10641","crate_id":1,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5706:21396","1:5707:21397","1:5708:21398","1:5709:21399"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1014:5675":{"id":"0:1014:5675","crate_id":0,"name":"is_allow_invalid_utf8_for_external_subcommands_set","span":{"filename":"src/builder/command.rs","begin":[3738,4],"end":[3740,5]},"visibility":"public","docs":"Report whether [`Command::allow_invalid_utf8_for_external_subcommands`] is set","links":{"`Command::allow_invalid_utf8_for_external_subcommands`":"0:4244:1577"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2846-0:4425:2161":{"id":"b:2:2846-0:4425:2161","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2840:8484","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValuesParser","id":"0:4425:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2848:21287"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:9222:7159-0:4356:1583":{"id":"a:2:9222:7159-0:4356:1583","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9222:7159","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:4356:1583","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:955:1927":{"id":"0:955:1927","crate_id":0,"name":"is_set","span":{"filename":"src/builder/command.rs","begin":[3405,4],"end":[3407,5]},"visibility":"public","docs":"Check if the given [`AppSettings`] variant is currently set on the `Command`.\n\nThis checks both [local] and [global settings].\n\n[local]: Command::setting()\n[global settings]: Command::global_setting()","links":{"Command::global_setting()":"0:4244:1577","`AppSettings`":"0:3386:1579","Command::setting()":"0:4244:1577"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["s",{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:3386:1579","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:492:3972":{"id":"0:492:3972","crate_id":0,"name":"get_global","span":{"filename":"src/builder/arg.rs","begin":[4468,4],"end":[4470,5]},"visibility":"public","docs":"Deprecated, replaced with [`Arg::is_global_set`]","links":{"`Arg::is_global_set`":"0:3816:1564"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2185:7341":{"id":"0:2185:7341","crate_id":0,"name":"is_present","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[568,4],"end":[575,5]},"visibility":"public","docs":"Deprecated, replaced with [`ArgAction::SetTrue`][crate::ArgAction] or\n[`ArgMatches::contains_id`].","links":{"`ArgMatches::contains_id`":"0:4706:1568","crate::ArgAction":"0:3347:1562"},"attrs":["#[track_caller]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"generic","inner":"T"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Key","id":"0:3235:2593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3366":{"id":"0:3366","crate_id":0,"name":null,"span":{"filename":"src/builder/action.rs","begin":[23,9],"end":[23,14]},"visibility":{"restricted":{"parent":"0:217:2150","path":"::builder::action"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]","#[allow(missing_copy_implementations)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgAction","id":"0:3347:1562","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:3367:397"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:622:3818":{"id":"0:622:3818","crate_id":0,"name":"requires_all","span":{"filename":"src/builder/arg_group.rs","begin":[356,4],"end":[361,5]},"visibility":"public","docs":"Specify arguments or groups that must be present when this group is.\n\nThis is not to be confused with a [required group]. Requirement rules function just like\n[argument requirement rules], you can name other arguments or groups that must be present\nwhen one of the arguments from this group is used.\n\n**NOTE:** The names provided may be an argument or group name\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ArgGroup, ErrorKind};\nlet result = Command::new(\"myprog\")\n    .arg(Arg::new(\"flag\")\n        .short('f'))\n    .arg(Arg::new(\"color\")\n        .short('c'))\n    .arg(Arg::new(\"debug\")\n        .short('d'))\n    .arg(Arg::new(\"verb\")\n        .short('v'))\n    .group(ArgGroup::new(\"req_flags\")\n        .args(&[\"flag\", \"color\"])\n        .requires_all(&[\"debug\", \"verb\"]))\n    .try_get_matches_from(vec![\"myprog\", \"-c\", \"-d\"]);\n// because we used an arg from the group, and the group requires \"-d\" and \"-v\" to be used,\n// yet we only used \"-d\" it's an error\nassert!(result.is_err());\nlet err = result.unwrap_err();\nassert_eq!(err.kind(), ErrorKind::MissingRequiredArgument);\n```\n[required group]: ArgGroup::required()\n[argument requirement rules]: crate::Arg::requires_all()","links":{"ArgGroup::required()":"0:3903:1565","crate::Arg::requires_all()":"0:3816:1564"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["ns",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4612:6787":{"id":"0:4612:6787","crate_id":0,"name":"MissingRequiredArgument","span":{"filename":"src/error/kind.rs","begin":[250,4],"end":[250,27]},"visibility":"default","docs":"Occurs when the user does not provide one or more required arguments.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet result = Command::new(\"prog\")\n    .arg(Arg::new(\"debug\")\n        .required(true))\n    .try_get_matches_from(vec![\"prog\"]);\nassert!(result.is_err());\nassert_eq!(result.unwrap_err().kind(), ErrorKind::MissingRequiredArgument);\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"b:2:2846-0:4397:2164":{"id":"b:2:2846-0:4397:2164","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2840:8484","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"StringValueParser","id":"0:4397:2164","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2848:21287"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:516:4036":{"id":"0:516:4036","crate_id":0,"name":"is_require_equals_set","span":{"filename":"src/builder/arg.rs","begin":[4654,4],"end":[4656,5]},"visibility":"public","docs":"Report whether [`Arg::require_equals`] is set","links":{"`Arg::require_equals`":"0:3816:1564"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1403":{"id":"0:1403","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[873,0],"end":[879,1]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"crate::ValueEnum","id":"0:174:1576","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3240:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3252:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"EnumValueParser","id":"0:4415:2173","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}},"items":["0:1405:907"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3425:2387":{"id":"0:3425:2387","crate_id":0,"name":"ArgRequiredElseHelp","span":{"filename":"src/builder/app_settings.rs","begin":[259,4],"end":[259,23]},"visibility":"default","docs":"Deprecated, replaced with [`Command::arg_required_else_help`] and\n[`Command::is_arg_required_else_help_set`]","links":{"`Command::arg_required_else_help`":"0:4244:1577","`Command::is_arg_required_else_help_set`":"0:4244:1577"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"a:2:9223:7158-0:4801:1585":{"id":"a:2:9223:7158-0:4801:1585","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9223:7158","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:4801:1585","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:559:669":{"id":"0:559:669","crate_id":0,"name":"from","span":{"filename":"src/builder/arg.rs","begin":[5069,4],"end":[5071,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["a",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3816:1564","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9223:7158-0:4474:2175":{"id":"a:2:9223:7158-0:4474:2175","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9223:7158","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"NonEmptyStringValueParser","id":"0:4474:2175","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4397:2164":{"id":"0:4397:2164","crate_id":0,"name":"StringValueParser","span":{"filename":"src/builder/value_parser.rs","begin":[676,0],"end":[676,31]},"visibility":"public","docs":"Implementation for [`ValueParser::string`]\n\nUseful for composing new [`TypedValueParser`]s","links":{"`TypedValueParser`":"0:1362:2165","`ValueParser::string`":"0:1294:2166"},"attrs":["#[non_exhaustive]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":false,"fields":[],"impls":["0:1377","a:2:9222:7159-0:4397:2164","a:2:3252:209-0:4397:2164","a:2:3240:200-0:4397:2164","a:2:9223:7158-0:4397:2164","a:2:3281:5920-0:4397:2164","b:2:2843-0:4397:2164","b:2:3169-0:4397:2164","b:2:3173-0:4397:2164","b:2:3184-0:4397:2164","b:2:3969-0:4397:2164","b:2:2846-0:4397:2164","b:2:3179-0:4397:2164","b:5:787-0:4397:2164","0:4398","0:4399","0:4401","0:1379","0:1384"]}},"2:31812:68538":{"id":"2:31812:68538","crate_id":2,"name":"next_multiple_of","span":null,"visibility":"public","docs":"Calculates the smallest value greater than or equal to `self` that\nis a multiple of `rhs`.\n\n# Panics\n\nThis function will panic if `rhs` is zero.\n\n## Overflow behavior\n\nOn overflow, this function will panic if overflow checks are enabled (default in debug\nmode) and wrap if overflow checks are disabled (default in release mode).\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(int_roundings)]\nassert_eq!(16_u64.next_multiple_of(8), 16);\nassert_eq!(23_u64.next_multiple_of(8), 24);\n```","links":{},"attrs":["#[unstable(feature = \"int_roundings\", issue = \"88581\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2155:7292":{"id":"0:2155:7292","crate_id":0,"name":"contains_id","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[316,4],"end":[319,5]},"visibility":"public","docs":"Check if values are present for the argument or group id\n\n*NOTE:* This will always return `true` if [`default_value`] has been set.\n[`ArgMatches::value_source`] can be used to check if a value is present at runtime.\n\n# Panics\n\nIf `id` is is not a valid argument or group name.  To handle this case programmatically, see\n[`ArgMatches::try_contains_id`].\n\n# Examples\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"myprog\")\n    .arg(Arg::new(\"debug\")\n        .short('d'))\n    .get_matches_from(vec![\n        \"myprog\", \"-d\"\n    ]);\n\nassert!(m.contains_id(\"debug\"));\n```\n\n[`default_value`]: crate::Arg::default_value()","links":{"crate::Arg::default_value()":"0:3816:1564","`ArgMatches::try_contains_id`":"0:4706:1568","`ArgMatches::value_source`":"0:4706:1568"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1377":{"id":"0:1377","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[678,0],"end":[683,1]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"StringValueParser","id":"0:4397:2164","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:1378:907"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4317:593":{"id":"0:4317:593","crate_id":0,"name":"eq","span":{"filename":"src/builder/possible_value.rs","begin":[29,32],"end":[29,41]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:4298:1582","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9223:7158-0:4468:2172":{"id":"a:2:9223:7158-0:4468:2172","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9223:7158","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BoolishValueParser","id":"0:4468:2172","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:321:1830":{"id":"0:321:1830","crate_id":0,"name":"long","span":{"filename":"src/builder/arg.rs","begin":[210,4],"end":[220,5]},"visibility":"public","docs":"Sets the long version of the argument without the preceding `--`.\n\nBy default `version` and `help` are used by the auto-generated `version` and `help`\narguments, respectively. You may use the word `version` or `help` for the long form of your\nown arguments, in which case `clap` simply will not assign those to the auto-generated\n`version` or `help` arguments.\n\n**NOTE:** Any leading `-` characters will be stripped\n\n# Examples\n\nTo set `long` use a word containing valid UTF-8. If you supply a double leading\n`--` such as `--config` they will be stripped. Hyphens in the middle of the word, however,\nwill *not* be stripped (i.e. `config-file` is allowed).\n\nSetting `long` allows using the argument via a double hyphen (`--`) such as `--config`\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .long(\"config\")\n        .takes_value(true))\n    .get_matches_from(vec![\n        \"prog\", \"--config\", \"file.toml\"\n    ]);\n\nassert_eq!(m.get_one::<String>(\"cfg\").map(String::as_str), Some(\"file.toml\"));\n```","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["l",{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:787-0:4356:1583":{"id":"b:5:787-0:4356:1583","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:783:211","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:4356:1583","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:789:4115","5:790:4707","5:791:9628"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:472:3938":{"id":"0:472:3938","crate_id":0,"name":"get_visible_short_aliases","span":{"filename":"src/builder/arg.rs","begin":[4305,4],"end":[4317,5]},"visibility":"public","docs":"Get visible short aliases for this argument, if any","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7764:223","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"char"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3169-0:1294:2166":{"id":"b:2:3169-0:1294:2166","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1294:2166","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3172:2288"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:31754:68492":{"id":"2:31754:68492","crate_id":2,"name":"checked_sub","span":null,"visibility":"public","docs":"Checked integer subtraction. Computes `self - rhs`, returning\n`None` if overflow occurred.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(1u64.checked_sub(1), Some(0));\nassert_eq!(0u64.checked_sub(1), None);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.47.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3173-0:4474:2175":{"id":"b:2:3173-0:4474:2175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"NonEmptyStringValueParser","id":"0:4474:2175","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3175:669"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3356:2258":{"id":"0:3356:2258","crate_id":0,"name":"SetTrue","span":{"filename":"src/builder/action.rs","begin":[126,4],"end":[126,11]},"visibility":"default","docs":"When encountered, act as if `\"true\"` was encountered on the command-line\n\nIf no [`default_value`][super::Arg::default_value] is set, it will be `false`.\n\nNo value is allowed. To optionally accept a value, see\n[`Arg::default_missing_value`][super::Arg::default_missing_value]\n\n# Examples\n\n```rust\n# use clap::Command;\n# use clap::Arg;\nlet cmd = Command::new(\"mycmd\")\n    .arg(\n        Arg::new(\"flag\")\n            .long(\"flag\")\n            .action(clap::ArgAction::SetTrue)\n    );\n\nlet matches = cmd.clone().try_get_matches_from([\"mycmd\", \"--flag\", \"--flag\"]).unwrap();\nassert!(matches.contains_id(\"flag\"));\nassert_eq!(matches.occurrences_of(\"flag\"), 0);\nassert_eq!(\n    matches.get_one::<bool>(\"flag\").copied(),\n    Some(true)\n);\n\nlet matches = cmd.try_get_matches_from([\"mycmd\"]).unwrap();\nassert!(matches.contains_id(\"flag\"));\nassert_eq!(matches.occurrences_of(\"flag\"), 0);\nassert_eq!(\n    matches.get_one::<bool>(\"flag\").copied(),\n    Some(false)\n);\n```","links":{"super::Arg::default_missing_value":"0:3816:1564","super::Arg::default_value":"0:3816:1564"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:353:2158":{"id":"0:353:2158","crate_id":0,"name":"value_parser","span":{"filename":"src/builder/arg.rs","begin":[1015,4],"end":[1018,5]},"visibility":"public","docs":"Specify the type of the argument.\n\nThis allows parsing and validating a value before storing it into\n[`ArgMatches`][crate::ArgMatches].\n\nSee also\n- [`value_parser!`][crate::value_parser!] for auto-selecting a value parser for a given type\n  - [`BoolishValueParser`][crate::builder::BoolishValueParser], and [`FalseyValueParser`][crate::builder::FalseyValueParser] for alternative `bool` implementations\n  - [`NonEmptyStringValueParser`][crate::builder::NonEmptyStringValueParser] for basic validation for strings\n- [`RangedI64ValueParser`][crate::builder::RangedI64ValueParser] and [`RangedU64ValueParser`][crate::builder::RangedU64ValueParser] for numeric ranges\n- [`EnumValueParser`][crate::builder::EnumValueParser] and  [`PossibleValuesParser`][crate::builder::PossibleValuesParser] for static enumerated values\n- or any other [`TypedValueParser`][crate::builder::TypedValueParser] implementation\n\n```rust\nlet mut cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"color\")\n            .long(\"color\")\n            .value_parser([\"always\", \"auto\", \"never\"])\n            .default_value(\"auto\")\n    )\n    .arg(\n        clap::Arg::new(\"hostname\")\n            .long(\"hostname\")\n            .value_parser(clap::builder::NonEmptyStringValueParser::new())\n            .takes_value(true)\n            .required(true)\n    )\n    .arg(\n        clap::Arg::new(\"port\")\n            .long(\"port\")\n            .value_parser(clap::value_parser!(u16).range(3000..))\n            .takes_value(true)\n            .required(true)\n    );\n\nlet m = cmd.try_get_matches_from_mut(\n    [\"cmd\", \"--hostname\", \"rust-lang.org\", \"--port\", \"3001\"]\n).unwrap();\n\nlet color: &String = m.get_one(\"color\")\n    .expect(\"default\");\nassert_eq!(color, \"auto\");\n\nlet hostname: &String = m.get_one(\"hostname\")\n    .expect(\"required\");\nassert_eq!(hostname, \"rust-lang.org\");\n\nlet port: u16 = *m.get_one(\"port\")\n    .expect(\"required\");\nassert_eq!(port, 3001);\n```","links":{"crate::builder::BoolishValueParser":"0:4468:2172","crate::builder::FalseyValueParser":"0:4462:2174","crate::builder::RangedI64ValueParser":"0:4432:2162","crate::builder::RangedU64ValueParser":"0:4444:2163","crate::value_parser!":"0:1606:2158","crate::builder::NonEmptyStringValueParser":"0:4474:2175","crate::builder::EnumValueParser":"0:4415:2173","crate::ArgMatches":"0:4706:1568","crate::builder::TypedValueParser":"0:1362:2165","crate::builder::PossibleValuesParser":"0:4425:2161"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["parser",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"super::ValueParser","id":"0:1294:2166","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl Into<super::ValueParser>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"super::ValueParser","id":"0:1294:2166","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2042":{"id":"0:2042","crate_id":0,"name":null,"span":{"filename":"src/parser/error.rs","begin":[41,0],"end":[56,1]},"visibility":{"restricted":{"parent":"0:2034:1566","path":"::parser::error"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10262:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4686:7087","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:2043:648"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:9223:7158-0:3903:1565":{"id":"a:2:9223:7158-0:3903:1565","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9223:7158","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3903:1565","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:3281:5920-0:4468:2172":{"id":"a:2:3281:5920-0:4468:2172","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3281:5920","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BoolishValueParser","id":"0:4468:2172","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:3240:200-0:4356:1583":{"id":"a:2:3240:200-0:4356:1583","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3240:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:4356:1583","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:1209":{"id":"2:1209","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:293:7140","path":"::num"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"u64"},"items":["2:31733:6473","2:31734:6474","2:31735:68478","2:31736:11235","2:31737:68479","2:31738:68480","2:31739:46014","2:31740:68481","2:31741:68482","2:31742:68483","2:31743:1105","2:31744:1106","2:31745:68484","2:31746:68485","2:31747:68486","2:31748:68487","2:31749:68488","2:31750:68489","2:31751:68490","2:31752:1420","2:31753:68491","2:31754:68492","2:31755:1426","2:31756:68493","2:31757:1422","2:31758:68494","2:31759:68495","2:31760:68496","2:31761:68497","2:31762:68498","2:31763:68499","2:31764:68500","2:31765:68501","2:31766:68502","2:31767:68503","2:31768:68504","2:31769:68505","2:31770:1424","2:31771:68506","2:31772:1425","2:31773:68507","2:31774:1207","2:31775:68508","2:31776:1208","2:31777:68509","2:31778:68510","2:31779:68511","2:31780:1503","2:31781:68512","2:31782:1505","2:31783:1504","2:31784:65895","2:31785:68513","2:31786:68514","2:31787:68515","2:31788:65972","2:31789:68516","2:31790:68517","2:31791:68518","2:31792:68519","2:31793:68520","2:31794:68521","2:31795:68522","2:31796:68523","2:31797:68524","2:31798:68525","2:31799:68526","2:31800:68527","2:31801:68528","2:31802:68529","2:31803:68530","2:31804:68531","2:31805:68532","2:31806:68533","2:31807:45939","2:31808:68534","2:31809:68535","2:31810:68536","2:31811:68537","2:31812:68538","2:31813:68539","2:31814:68540","2:31816:68542","2:31817:68543","2:31818:68544","2:31819:68545","2:31821:68546","2:31823:68547","2:31825:68548","2:31827:68549","2:31829:68550","2:31831:68551","2:31832:68552","2:31833:68553","2:31834:68554"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4688:7152":{"id":"0:4688:7152","crate_id":0,"name":"actual","span":{"filename":"src/parser/error.rs","begin":[12,8],"end":[12,33]},"visibility":"default","docs":"Type for value stored in [`ArgMatches`][crate::ArgMatches]","links":{"crate::ArgMatches":"0:4706:1568"},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"super::AnyValueId","id":"0:4700:2290","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"a:2:9223:7158-0:4409:2177":{"id":"a:2:9223:7158-0:4409:2177","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9223:7158","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"PathBufValueParser","id":"0:4409:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3445:2430":{"id":"0:3445:2430","crate_id":0,"name":"HidePossibleValues","span":{"filename":"src/builder/app_settings.rs","begin":[373,4],"end":[373,22]},"visibility":"default","docs":"Deprecated, replaced with [`Command::hide_possible_values`] and\n[`Arg::is_hide_possible_values_set`]","links":{"`Command::hide_possible_values`":"0:4244:1577","`Arg::is_hide_possible_values_set`":"0:3816:1564"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:31771:68506":{"id":"2:31771:68506","crate_id":2,"name":"checked_shr","span":null,"visibility":"public","docs":"Checked shift right. Computes `self >> rhs`, returning `None`\nif `rhs` is larger than or equal to the number of bits in `self`.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(0x10u64.checked_shr(4), Some(0x1));\nassert_eq!(0x10u64.checked_shr(129), None);\n```","links":{},"attrs":["#[stable(feature = \"wrapping\", since = \"1.7.0\")]","#[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.47.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5633:10665":{"id":"1:5633:10665","crate_id":1,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5634:21395","1:5635:9163"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10545:10621","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:4580":{"id":"0:4580","crate_id":0,"name":null,"span":{"filename":"src/error/context.rs","begin":[42,23],"end":[42,32]},"visibility":{"restricted":{"parent":"0:1839:470","path":"::error::context"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"StructuralPartialEq","id":"2:3248:207","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ContextValue","id":"0:4561:6700","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3169-0:4515:6699":{"id":"b:2:3169-0:4515:6699","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:4515:6699","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3172:2288"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:5:787-0:4474:2175":{"id":"b:5:787-0:4474:2175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:783:211","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"NonEmptyStringValueParser","id":"0:4474:2175","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:789:4115","5:790:4707","5:791:9628"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1012:5671":{"id":"0:1012:5671","crate_id":0,"name":"is_subcommand_required_set","span":{"filename":"src/builder/command.rs","begin":[3728,4],"end":[3730,5]},"visibility":"public","docs":"Report whether [`Command::subcommand_required`] is set","links":{"`Command::subcommand_required`":"0:4244:1577"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1279:126":{"id":"0:1279:126","crate_id":0,"name":"Err","span":{"filename":"src/builder/value_hint.rs","begin":[76,4],"end":[76,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"0:4315":{"id":"0:4315","crate_id":0,"name":null,"span":{"filename":"src/builder/possible_value.rs","begin":[29,32],"end":[29,41]},"visibility":{"restricted":{"parent":"0:1203:2155","path":"::builder::possible_value"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2892:173","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:4298:1582","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:4298:1582","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["0:4317:593","0:4318:894"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:488:3964":{"id":"0:488:3964","crate_id":0,"name":"get_value_delimiter","span":{"filename":"src/builder/arg.rs","begin":[4437,4],"end":[4439,5]},"visibility":"public","docs":"Get the delimiter between multiple values","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"char"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6076":{"id":"5:6076","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5896:1319","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:6077:67678","5:6078:1794","5:6081:67679","5:6084:8281","5:6096:67680","5:6097:6399","5:6098:7984","5:6099:16223","5:6100:2538"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1466":{"id":"0:1466","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1246,0],"end":[1250,1]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"std::convert::TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i64"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3240:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3252:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Default","id":"2:3218:115","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:4432:2162","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["0:1468:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1500:6312":{"id":"0:1500:6312","crate_id":0,"name":"Value","span":{"filename":"src/builder/value_parser.rs","begin":[1470,4],"end":[1470,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"primitive","inner":"bool"}}},"0:4598:6774":{"id":"0:4598:6774","crate_id":0,"name":"NoEquals","span":{"filename":"src/error/kind.rs","begin":[118,4],"end":[118,12]},"visibility":"default","docs":"Occurs when the user doesn't use equals for an option that requires equal\nsign to provide values.\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"color\")\n         .takes_value(true)\n         .require_equals(true)\n         .long(\"color\"))\n    .try_get_matches_from(vec![\"prog\", \"--color\", \"red\"]);\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind(), ErrorKind::NoEquals);\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:1922:648":{"id":"0:1922:648","crate_id":0,"name":"fmt","span":{"filename":"src/error/mod.rs","begin":[1008,4],"end":[1017,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Formatter","id":"2:10215:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:10204:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5088:593":{"id":"0:5088:593","crate_id":0,"name":"eq","span":{"filename":"src/util/color.rs","begin":[2,33],"end":[2,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:5071:1570","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4632":{"id":"0:4632","crate_id":0,"name":null,"span":{"filename":"src/error/kind.rs","begin":[2,9],"end":[2,14]},"visibility":{"restricted":{"parent":"0:1840:769","path":"::error::kind"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10255:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4587:1584","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:4633:648"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:3240:200-0:4587:1584":{"id":"a:2:3240:200-0:4587:1584","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3240:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4587:1584","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4606:6793":{"id":"0:4606:6793","crate_id":0,"name":"TooManyOccurrences","span":{"filename":"src/error/kind.rs","begin":[194,4],"end":[194,22]},"visibility":"default","docs":"Occurs when a user provides more occurrences for an argument than were defined by setting\n[`Arg::max_occurrences`].\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet result = Command::new(\"prog\")\n    .arg(Arg::new(\"verbosity\")\n        .short('v')\n        .max_occurrences(2))\n    .try_get_matches_from(vec![\"prog\", \"-vvv\"]);\nassert!(result.is_err());\nassert_eq!(result.unwrap_err().kind(), ErrorKind::TooManyOccurrences);\n```\n[`Arg::max_occurrences`]: crate::Arg::max_occurrences()","links":{"crate::Arg::max_occurrences()":"0:3816:1564"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"a:2:9223:7158-0:4706:1568":{"id":"a:2:9223:7158-0:4706:1568","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9223:7158","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4706:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"0:200:2035":{"id":"0:200:2035","crate_id":0,"name":"from_arg_matches","span":{"filename":"src/derive.rs","begin":[547,4],"end":[549,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["matches",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4706:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4640:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3149:217":{"id":"2:3149:217","crate_id":2,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3151:127","2:3152:1395"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:571":{"id":"0:571","crate_id":0,"name":null,"span":{"filename":"src/builder/arg.rs","begin":[5094,0],"end":[5129,1]},"visibility":{"restricted":{"parent":"0:242:1829","path":"::builder::arg"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10262:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3816:1564","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["0:573:648"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4581":{"id":"0:4581","crate_id":0,"name":null,"span":{"filename":"src/error/context.rs","begin":[42,23],"end":[42,32]},"visibility":{"restricted":{"parent":"0:1839:470","path":"::error::context"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2892:173","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ContextValue","id":"0:4561:6700","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ContextValue","id":"0:4561:6700","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:4582:593","0:4583:894"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:202:2082":{"id":"0:202:2082","crate_id":0,"name":"update_from_arg_matches","span":{"filename":"src/derive.rs","begin":[553,4],"end":[555,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["matches",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4706:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4640:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:31775:68508":{"id":"2:31775:68508","crate_id":2,"name":"saturating_add_signed","span":null,"visibility":"public","docs":"Saturating addition with a signed integer. Computes `self + rhs`,\nsaturating at the numeric bounds instead of overflowing.\n\n# Examples\n\nBasic usage:\n\n```\n# #![feature(mixed_integer_ops)]\nassert_eq!(1u64.saturating_add_signed(2), 3);\nassert_eq!(1u64.saturating_add_signed(-2), 0);\nassert_eq!((u64::MAX - 2).saturating_add_signed(4), u64::MAX);\n```","links":{},"attrs":["#[unstable(feature = \"mixed_integer_ops\", issue = \"87840\")]","#[rustc_const_unstable(feature = \"mixed_integer_ops\", issue = \"87840\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"i64"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:852:4510":{"id":"0:852:4510","crate_id":0,"name":"before_help","span":{"filename":"src/builder/command.rs","begin":[1569,4],"end":[1572,5]},"visibility":"public","docs":"Free-form help text for before auto-generated short help (`-h`).\n\nThis is often used for header, copyright, or license information.\n\nIf [`Command::before_long_help`] is not specified, this message will be displayed for `--help`.\n\n# Examples\n\n```no_run\n# use clap::Command;\nCommand::new(\"myprog\")\n    .before_help(\"Some info I'd like to appear before the help info\")\n# ;\n```","links":{"`Command::before_long_help`":"0:4244:1577"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["help",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1532":{"id":"0:1532","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1698,0],"end":[1702,1]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Default","id":"2:3218:115","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BoolishValueParser","id":"0:4468:2172","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:1533:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4469":{"id":"0:4469","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1647,9],"end":[1647,13]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3250:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BoolishValueParser","id":"0:4468:2172","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1438":{"id":"0:1438","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1044,0],"end":[1052,1]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8367:151","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"T"}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"super::PossibleValue","id":"0:4298:1582","args":{"angle_bracketed":{"args":[{"lifetime":"'static"}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"I"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValuesParser","id":"0:4425:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:1441:669"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4690:6810":{"id":"0:4690:6810","crate_id":0,"name":"UnknownArgument","span":{"filename":"src/parser/error.rs","begin":[18,4],"end":[20,5]},"visibility":"default","docs":"Argument not defined in [`Command`][crate::Command]","links":{"crate::Command":"0:755:1563"},"attrs":["#[non_exhaustive]"],"deprecation":null,"kind":"variant","inner":{"variant_kind":"struct","variant_inner":[]}},"0:899:5300":{"id":"0:899:5300","crate_id":0,"name":"visible_long_flag_alias","span":{"filename":"src/builder/command.rs","begin":[2571,4],"end":[2574,5]},"visibility":"public","docs":"Add an alias, which functions as a \"visible\" long flag subcommand.\n\nThis will automatically dispatch as if this subcommand was used. This is more efficient,\nand easier than creating multiple hidden subcommands as one only needs to check for the\nexistence of this command, and not all variants.\n\nSee also [`Command::long_flag_alias`].\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg, };\nlet m = Command::new(\"myprog\")\n            .subcommand(Command::new(\"test\").long_flag(\"test\")\n                .visible_long_flag_alias(\"testing\"))\n            .get_matches_from(vec![\"myprog\", \"--testing\"]);\nassert_eq!(m.subcommand_name(), Some(\"test\"));\n```\n[`App::long_flag_alias`]: Command::long_flag_alias()","links":{"`Command::long_flag_alias`":"0:4244:1577"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["name",{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4755":{"id":"0:4755","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1399,9],"end":[1399,14]},"visibility":{"restricted":{"parent":"0:2077:7161","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"$crate::clone::Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValuesRef","id":"0:4750:7086","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["0:4758:397"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1917:669":{"id":"0:1917:669","crate_id":0,"name":"from","span":{"filename":"src/error/mod.rs","begin":[995,4],"end":[997,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["e",{"kind":"resolved_path","inner":{"name":"fmt::Error","id":"2:48422:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6408:1376":{"id":"5:6408:1376","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2319:2018":{"id":"0:2319:2018","crate_id":0,"name":"Item","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1601,4],"end":[1601,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"1:2923:169","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}},"2:13399:63648":{"id":"2:13399:63648","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"2:12997:8603","prim@char":"1:15839:8315"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:8597","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:8597","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:8598","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3281:5920-0:4763:7085":{"id":"a:2:3281:5920-0:4763:7085","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3281:5920","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"RawValues","id":"0:4763:7085","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:763:1829":{"id":"0:763:1829","crate_id":0,"name":"arg","span":{"filename":"src/builder/command.rs","begin":[185,4],"end":[198,5]},"visibility":"public","docs":"Adds an [argument] to the list of valid possibilities.\n\n# Examples\n\n```no_run\n# use clap::{Command, arg, Arg};\nCommand::new(\"myprog\")\n    // Adding a single \"flag\" argument with a short and help text, using Arg::new()\n    .arg(\n        Arg::new(\"debug\")\n           .short('d')\n           .help(\"turns on debugging mode\")\n    )\n    // Adding a single \"option\" argument with a short, a long, and help text using the less\n    // verbose Arg::from()\n    .arg(\n        arg!(-c --config <CONFIG> \"Optionally sets a config file to use\")\n    )\n# ;\n```\n[argument]: Arg","links":{"Arg":"0:3816:1564"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["a",{"kind":"generic","inner":"A"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3816:1564","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4835":{"id":"0:4835","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/value_source.rs","begin":[2,29],"end":[2,38]},"visibility":{"restricted":{"parent":"0:2423:7162","path":"::parser::matches::value_source"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"StructuralPartialEq","id":"2:3248:207","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4823:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3350:2241":{"id":"0:3350:2241","crate_id":0,"name":"Append","span":{"filename":"src/builder/action.rs","begin":[72,4],"end":[72,10]},"visibility":"default","docs":"When encountered, store the associated value(s) in [`ArgMatches`][crate::ArgMatches]\n\n# Examples\n\n```rust\n# use clap::Command;\n# use clap::Arg;\nlet cmd = Command::new(\"mycmd\")\n    .arg(\n        Arg::new(\"flag\")\n            .long(\"flag\")\n            .action(clap::ArgAction::Append)\n    );\n\nlet matches = cmd.try_get_matches_from([\"mycmd\", \"--flag\", \"value1\", \"--flag\", \"value2\"]).unwrap();\nassert!(matches.contains_id(\"flag\"));\nassert_eq!(matches.occurrences_of(\"flag\"), 0);\nassert_eq!(\n    matches.get_many::<String>(\"flag\").unwrap_or_default().map(|v| v.as_str()).collect::<Vec<_>>(),\n    vec![\"value1\", \"value2\"]\n);\n```","links":{"crate::ArgMatches":"0:4706:1568"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:470:3934":{"id":"0:470:3934","crate_id":0,"name":"get_help_heading","span":{"filename":"src/builder/arg.rs","begin":[4293,4],"end":[4295,5]},"visibility":"public","docs":"Get the help heading specified for this argument, if any","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:619:1845":{"id":"0:619:1845","crate_id":0,"name":"required","span":{"filename":"src/builder/arg_group.rs","begin":[280,4],"end":[283,5]},"visibility":"public","docs":"Require an argument from the group to be present when parsing.\n\nThis is unless conflicting with another argument.  A required group will be displayed in\nthe usage string of the application in the format `<arg|arg2|arg3>`.\n\n**NOTE:** This setting only applies to the current [`Command`] / [`Subcommand`]s, and not\nglobally.\n\n**NOTE:** By default, [`ArgGroup::multiple`] is set to `false` which when combined with\n`ArgGroup::required(true)` states, \"One and *only one* arg must be used from this group.\nUse of more than one arg is an error.\" Vice setting `ArgGroup::multiple(true)` which\nstates, '*At least* one arg from this group must be used. Using multiple is OK.\"\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ArgGroup, ErrorKind};\nlet result = Command::new(\"myprog\")\n    .arg(Arg::new(\"flag\")\n        .short('f'))\n    .arg(Arg::new(\"color\")\n        .short('c'))\n    .group(ArgGroup::new(\"req_flags\")\n        .args(&[\"flag\", \"color\"])\n        .required(true))\n    .try_get_matches_from(vec![\"myprog\"]);\n// Because we didn't use any of the args in the group, it's an error\nassert!(result.is_err());\nlet err = result.unwrap_err();\nassert_eq!(err.kind(), ErrorKind::MissingRequiredArgument);\n```\n\n[`Subcommand`]: crate::Subcommand\n[`ArgGroup::multiple`]: ArgGroup::multiple()\n[`Command`]: crate::Command","links":{"crate::Command":"0:755:1563","crate::Subcommand":"0:170:1575","ArgGroup::multiple()":"0:3903:1565"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3281:5920-0:4432:2162":{"id":"a:2:3281:5920-0:4432:2162","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3281:5920","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3281:5920","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:4432:2162","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:425:3660":{"id":"0:425:3660","crate_id":0,"name":"default_value_if","span":{"filename":"src/builder/arg.rs","begin":[3241,4],"end":[3248,5]},"visibility":"public","docs":"Specifies the value of the argument if `arg` has been used at runtime.\n\nIf `val` is set to `None`, `arg` only needs to be present. If `val` is set to `\"some-val\"`\nthen `arg` must be present at runtime **and** have the value `val`.\n\nIf `default` is set to `None`, `default_value` will be removed.\n\n**NOTE:** This setting is perfectly compatible with [`Arg::default_value`] but slightly\ndifferent. `Arg::default_value` *only* takes effect when the user has not provided this arg\nat runtime. This setting however only takes effect when the user has not provided a value at\nruntime **and** these other conditions are met as well. If you have set `Arg::default_value`\nand `Arg::default_value_if`, and the user **did not** provide this arg at runtime, nor were\nthe conditions met for `Arg::default_value_if`, the `Arg::default_value` will be applied.\n\n**NOTE:** This implicitly sets [`Arg::takes_value(true)`].\n\n# Examples\n\nFirst we use the default value only if another arg is present at runtime.\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"flag\")\n        .long(\"flag\"))\n    .arg(Arg::new(\"other\")\n        .long(\"other\")\n        .default_value_if(\"flag\", None, Some(\"default\")))\n    .get_matches_from(vec![\n        \"prog\", \"--flag\"\n    ]);\n\nassert_eq!(m.value_of(\"other\"), Some(\"default\"));\n```\n\nNext we run the same test, but without providing `--flag`.\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"flag\")\n        .long(\"flag\"))\n    .arg(Arg::new(\"other\")\n        .long(\"other\")\n        .default_value_if(\"flag\", None, Some(\"default\")))\n    .get_matches_from(vec![\n        \"prog\"\n    ]);\n\nassert_eq!(m.value_of(\"other\"), None);\n```\n\nNow lets only use the default value if `--opt` contains the value `special`.\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"opt\")\n        .takes_value(true)\n        .long(\"opt\"))\n    .arg(Arg::new(\"other\")\n        .long(\"other\")\n        .default_value_if(\"opt\", Some(\"special\"), Some(\"default\")))\n    .get_matches_from(vec![\n        \"prog\", \"--opt\", \"special\"\n    ]);\n\nassert_eq!(m.value_of(\"other\"), Some(\"default\"));\n```\n\nWe can run the same test and provide any value *other than* `special` and we won't get a\ndefault value.\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"opt\")\n        .takes_value(true)\n        .long(\"opt\"))\n    .arg(Arg::new(\"other\")\n        .long(\"other\")\n        .default_value_if(\"opt\", Some(\"special\"), Some(\"default\")))\n    .get_matches_from(vec![\n        \"prog\", \"--opt\", \"hahaha\"\n    ]);\n\nassert_eq!(m.value_of(\"other\"), None);\n```\n\nIf we want to unset the default value for an Arg based on the presence or\nvalue of some other Arg.\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"flag\")\n        .long(\"flag\"))\n    .arg(Arg::new(\"other\")\n        .long(\"other\")\n        .default_value(\"default\")\n        .default_value_if(\"flag\", None, None))\n    .get_matches_from(vec![\n        \"prog\", \"--flag\"\n    ]);\n\nassert_eq!(m.value_of(\"other\"), None);\n```\n[`Arg::takes_value(true)`]: Arg::takes_value()\n[`Arg::default_value`]: Arg::default_value()","links":{"Arg::default_value()":"0:3816:1564","Arg::takes_value()":"0:3816:1564"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["arg_id",{"kind":"generic","inner":"T"}],["val",{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}}],["default",{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Key","id":"0:3235:2593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:787-0:1294:2166":{"id":"b:5:787-0:1294:2166","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:783:211","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1294:2166","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:789:4115","5:790:4707","5:791:9628"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:416:3578":{"id":"0:416:3578","crate_id":0,"name":"hide_default_value","span":{"filename":"src/builder/arg.rs","begin":[2834,4],"end":[2840,5]},"visibility":"public","docs":"Do not display the default value of the argument in the help message.\n\nThis is useful when default behavior of an arg is explained elsewhere in the help text.\n\n**NOTE:** Setting this requires [`Arg::takes_value`]\n\n# Examples\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"connect\")\n    .arg(Arg::new(\"host\")\n        .long(\"host\")\n        .default_value(\"localhost\")\n        .takes_value(true)\n        .hide_default_value(true));\n\n```\n\nIf we were to run the above program with `--help` the `[default: localhost]` portion of\nthe help text would be omitted.","links":{"`Arg::takes_value`":"0:3816:1564"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13482:16224":{"id":"2:13482:16224","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:31739:46014":{"id":"2:31739:46014","crate_id":2,"name":"leading_zeros","span":null,"visibility":"public","docs":"Returns the number of leading zeros in the binary representation of `self`.\n\n# Examples\n\nBasic usage:\n\n```\nlet n = u64::MAX >> 2;\n\nassert_eq!(n.leading_zeros(), 2);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:446:3772":{"id":"0:446:3772","crate_id":0,"name":"required_if_eq_all","span":{"filename":"src/builder/arg.rs","begin":[3818,4],"end":[3822,5]},"visibility":"public","docs":"Specify this argument is [required] based on multiple conditions.\n\nThe conditions are set up in a `(arg, val)` style tuple. The requirement will only become\nvalid if every one of the specified `arg`'s value equals its corresponding `val`.\n\n# Examples\n\n```rust\n# use clap::Arg;\nArg::new(\"config\")\n    .required_if_eq_all(&[\n        (\"extra\", \"val\"),\n        (\"option\", \"spec\")\n    ])\n# ;\n```\n\nSetting `Arg::required_if_eq_all(&[(arg, val)])` makes this arg required if all of the `arg`s\nare used at runtime and every value is equal to its corresponding `val`. If the `arg`'s value is\nanything other than `val`, this argument isn't required.\n\n```rust\n# use clap::{Command, Arg};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .required_if_eq_all(&[\n            (\"extra\", \"val\"),\n            (\"option\", \"spec\")\n        ])\n        .takes_value(true)\n        .long(\"config\"))\n    .arg(Arg::new(\"extra\")\n        .takes_value(true)\n        .long(\"extra\"))\n    .arg(Arg::new(\"option\")\n        .takes_value(true)\n        .long(\"option\"))\n    .try_get_matches_from(vec![\n        \"prog\", \"--option\", \"spec\"\n    ]);\n\nassert!(res.is_ok()); // We didn't use --option=spec --extra=val so \"cfg\" isn't required\n```\n\nSetting `Arg::required_if_eq_all(&[(arg, val)])` and having all of the `arg`s used with its\nvalue of `val` but *not* using this arg is an error.\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .required_if_eq_all(&[\n            (\"extra\", \"val\"),\n            (\"option\", \"spec\")\n        ])\n        .takes_value(true)\n        .long(\"config\"))\n    .arg(Arg::new(\"extra\")\n        .takes_value(true)\n        .long(\"extra\"))\n    .arg(Arg::new(\"option\")\n        .takes_value(true)\n        .long(\"option\"))\n    .try_get_matches_from(vec![\n        \"prog\", \"--extra\", \"val\", \"--option\", \"spec\"\n    ]);\n\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind(), ErrorKind::MissingRequiredArgument);\n```\n[required]: Arg::required()","links":{"Arg::required()":"0:3816:1564"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["ifs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"tuple","inner":[{"kind":"generic","inner":"T"},{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Key","id":"0:3235:2593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2273:909":{"id":"0:2273:909","crate_id":0,"name":"next","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1470,4],"end":[1472,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"1:2923:169","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:825:3554":{"id":"0:825:3554","crate_id":0,"name":"next_line_help","span":{"filename":"src/builder/command.rs","begin":[1149,4],"end":[1155,5]},"visibility":"public","docs":"Places the help string for all arguments and subcommands on the line after them.\n\n**NOTE:** This choice is propagated to all child subcommands.\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg};\nCommand::new(\"myprog\")\n    .next_line_help(true)\n    .get_matches();\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4284":{"id":"0:4284","crate_id":0,"name":null,"span":{"filename":"src/builder/command.rs","begin":[77,16],"end":[77,21]},"visibility":{"restricted":{"parent":"0:649:1810","path":"::builder::command"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:4244:1577","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["0:4286:397"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:8330:8717":{"id":"2:8330:8717","crate_id":2,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8332:9620"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:4558":{"id":"0:4558","crate_id":0,"name":null,"span":{"filename":"src/error/context.rs","begin":[2,40],"end":[2,42]},"visibility":{"restricted":{"parent":"0:1839:470","path":"::error::context"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"StructuralEq","id":"2:3249:206","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:4515:6699","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:31774:1207":{"id":"2:31774:1207","crate_id":2,"name":"saturating_add","span":null,"visibility":"public","docs":"Saturating integer addition. Computes `self + rhs`, saturating at\nthe numeric bounds instead of overflowing.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(100u64.saturating_add(1), 101);\nassert_eq!(u64::MAX.saturating_add(127), u64::MAX);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]","#[rustc_const_stable(feature = \"const_saturating_int_methods\", since =\n\"1.47.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4381:6268":{"id":"0:4381:6268","crate_id":0,"name":"EmailAddress","span":{"filename":"src/builder/value_hint.rs","begin":[66,4],"end":[66,16]},"visibility":"default","docs":"Email address.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:4719":{"id":"0:4719","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[67,32],"end":[67,41]},"visibility":{"restricted":{"parent":"0:2077:7161","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2892:173","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4706:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4706:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:4720:593","0:4721:894"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:5:787-0:4561:6700":{"id":"b:5:787-0:4561:6700","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:783:211","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ContextValue","id":"0:4561:6700","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:789:4115","5:790:4707","5:791:9628"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:997:5644":{"id":"0:997:5644","crate_id":0,"name":"is_propagate_version_set","span":{"filename":"src/builder/command.rs","begin":[3652,4],"end":[3654,5]},"visibility":"public","docs":"Report whether [`Command::propagate_version`] is set","links":{"`Command::propagate_version`":"0:4244:1577"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1225:3928":{"id":"0:1225:3928","crate_id":0,"name":"get_help","span":{"filename":"src/builder/possible_value.rs","begin":[149,4],"end":[151,5]},"visibility":"public","docs":"Get the help specified for this argument, if any","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10255:109":{"id":"2:10255:109","crate_id":2,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10256:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:9222:7159-0:4561:6700":{"id":"a:2:9222:7159-0:4561:6700","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9222:7159","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ContextValue","id":"0:4561:6700","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1517":{"id":"0:1517","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1599,0],"end":[1603,1]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Default","id":"2:3218:115","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FalseyValueParser","id":"0:4462:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:1518:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2846-0:4515:6699":{"id":"b:2:2846-0:4515:6699","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2840:8484","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:4515:6699","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2848:21287"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4298:1582":{"id":"0:4298:1582","crate_id":0,"name":"PossibleValue","span":{"filename":"src/builder/possible_value.rs","begin":[30,0],"end":[35,1]},"visibility":"public","docs":"A possible value of an argument.\n\nThis is used for specifying [possible values] of [Args].\n\n**NOTE:** This struct is likely not needed for most usecases as it is only required to\n[hide] single values from help messages and shell completions or to attach [help] to possible values.\n\n# Examples\n\n```rust\n# use clap::{Arg, PossibleValue};\nlet cfg = Arg::new(\"config\")\n    .takes_value(true)\n    .value_name(\"FILE\")\n    .value_parser([\n        PossibleValue::new(\"fast\"),\n        PossibleValue::new(\"slow\").help(\"slower than fast\"),\n        PossibleValue::new(\"secret speed\").hide(true)\n    ]);\n```\n[Args]: crate::Arg\n[possible values]: crate::builder::ValueParser::possible_values\n[hide]: PossibleValue::hide()\n[help]: PossibleValue::help()","links":{"crate::builder::ValueParser::possible_values":"0:1294:2166","crate::Arg":"0:3816:1564","PossibleValue::hide()":"0:4298:1582","PossibleValue::help()":"0:4298:1582"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["0:1214","0:1222","a:2:9222:7159-0:4298:1582","a:2:3252:209-0:4298:1582","a:2:3240:200-0:4298:1582","a:2:9223:7158-0:4298:1582","a:2:3281:5920-0:4298:1582","b:2:2843-0:4298:1582","b:2:3169-0:4298:1582","b:2:3173-0:4298:1582","b:2:3184-0:4298:1582","b:2:3969-0:4298:1582","b:2:2846-0:4298:1582","b:2:3179-0:4298:1582","b:5:787-0:4298:1582","b:23:25-0:4298:1582","0:4304","0:4307","0:4310","0:4313","0:4315","0:4319","0:4321","0:1236","0:1239"]}},"0:4585":{"id":"0:4585","crate_id":0,"name":null,"span":{"filename":"src/error/context.rs","begin":[42,34],"end":[42,36]},"visibility":{"restricted":{"parent":"0:1839:470","path":"::error::context"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2897:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ContextValue","id":"0:4561:6700","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4468:2172":{"id":"0:4468:2172","crate_id":0,"name":"BoolishValueParser","span":{"filename":"src/builder/value_parser.rs","begin":[1649,0],"end":[1649,32]},"visibility":"public","docs":"Parse bool-like string values, everything else is `true`\n\nSee also:\n- [`ValueParser::bool`] for different human readable bool representations\n- [`FalseyValueParser`] for assuming non-false is true\n\n# Example\n\nUsage:\n```rust\nlet mut cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"append\")\n            .value_parser(clap::builder::BoolishValueParser::new())\n            .required(true)\n    );\n\nlet m = cmd.try_get_matches_from_mut([\"cmd\", \"true\"]).unwrap();\nlet port: bool = *m.get_one(\"append\")\n    .expect(\"required\");\nassert_eq!(port, true);\n```\n\nSemantics:\n```rust\n# use std::ffi::OsStr;\n# use clap::builder::TypedValueParser;\n# let cmd = clap::Command::new(\"test\");\n# let arg = None;\nlet value_parser = clap::builder::BoolishValueParser::new();\nassert!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"random\")).is_err());\nassert!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"\")).is_err());\nassert!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"100\")).is_err());\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"true\")).unwrap(), true);\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"Yes\")).unwrap(), true);\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"oN\")).unwrap(), true);\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"1\")).unwrap(), true);\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"false\")).unwrap(), false);\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"No\")).unwrap(), false);\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"oFF\")).unwrap(), false);\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"0\")).unwrap(), false);\n```","links":{"`ValueParser::bool`":"0:1294:2166","`FalseyValueParser`":"0:4462:2174"},"attrs":["#[non_exhaustive]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":false,"fields":[],"impls":["0:1519","a:2:9222:7159-0:4468:2172","a:2:3252:209-0:4468:2172","a:2:3240:200-0:4468:2172","a:2:9223:7158-0:4468:2172","a:2:3281:5920-0:4468:2172","b:2:2843-0:4468:2172","b:2:3169-0:4468:2172","b:2:3173-0:4468:2172","b:2:3184-0:4468:2172","b:2:3969-0:4468:2172","b:2:2846-0:4468:2172","b:2:3179-0:4468:2172","b:5:787-0:4468:2172","0:4469","0:4470","0:4472","0:1524","0:1532"]}},"0:772:4582":{"id":"0:772:4582","crate_id":0,"name":"mut_subcommand","span":{"filename":"src/builder/command.rs","begin":[301,4],"end":[319,5]},"visibility":"public","docs":"Allows one to mutate a [`Command`] after it's been added as a subcommand.\n\nThis can be useful for modifying auto-generated arguments of nested subcommands with\n[`Command::mut_arg`].\n\n# Examples\n\n```rust\n# use clap::Command;\n\nlet mut cmd = Command::new(\"foo\")\n        .subcommand(Command::new(\"bar\"))\n        .mut_subcommand(\"bar\", |subcmd| subcmd.disable_help_flag(true));\n\nlet res = cmd.try_get_matches_from_mut(vec![\"foo\", \"bar\", \"--help\"]);\n\n// Since we disabled the help flag on the \"bar\" subcommand, this should err.\n\nassert!(res.is_err());\n\nlet res = cmd.try_get_matches_from_mut(vec![\"foo\", \"bar\"]);\nassert!(res.is_ok());\n```","links":{"`Command`":"0:755:1563","`Command::mut_arg`":"0:4244:1577"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["subcmd_id",{"kind":"generic","inner":"T"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3492:132","args":{"parenthesized":{"inputs":[{"kind":"resolved_path","inner":{"name":"App","id":"0:4244:1577","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}}],"output":{"kind":"resolved_path","inner":{"name":"App","id":"0:4244:1577","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:817:4795":{"id":"0:817:4795","crate_id":0,"name":"ignore_errors","span":{"filename":"src/builder/command.rs","begin":[953,4],"end":[959,5]},"visibility":"public","docs":"Try not to fail on parse errors, like missing option values.\n\n**Note:** Make sure you apply it as `global_setting` if you want this setting\nto be propagated to subcommands and sub-subcommands!\n\n**NOTE:** This choice is propagated to all child subcommands.\n\n# Examples\n\n```rust\n# use clap::{Command, arg};\nlet cmd = Command::new(\"cmd\")\n  .ignore_errors(true)\n  .arg(arg!(-c --config <FILE> \"Sets a custom config file\").required(false))\n  .arg(arg!(-x --stuff <FILE> \"Sets a custom stuff file\").required(false))\n  .arg(arg!(f: -f \"Flag\"));\n\nlet r = cmd.try_get_matches_from(vec![\"cmd\", \"-c\", \"file\", \"-f\", \"-x\"]);\n\nassert!(r.is_ok(), \"unexpected error: {:?}\", r);\nlet m = r.unwrap();\nassert_eq!(m.value_of(\"config\"), Some(\"file\"));\nassert!(m.is_present(\"f\"));\nassert_eq!(m.value_of(\"stuff\"), None);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2846-0:4640:127":{"id":"b:2:2846-0:4640:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2840:8484","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4640:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2848:21287"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4394":{"id":"0:4394","crate_id":0,"name":null,"span":{"filename":"src/builder/value_hint.rs","begin":[27,37],"end":[27,41]},"visibility":{"restricted":{"parent":"0:1272:2157","path":"::builder::value_hint"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3250:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:4356:1583","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2843-0:3970:1581":{"id":"b:2:2843-0:3970:1581","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2837:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgSettings","id":"0:3970:1581","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2845:2590"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3915":{"id":"0:3915","crate_id":0,"name":null,"span":{"filename":"src/builder/arg_group.rs","begin":[80,18],"end":[80,23]},"visibility":{"restricted":{"parent":"0:597:2152","path":"::builder::arg_group"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10255:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3903:1565","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["0:3917:648"],"negative":false,"synthetic":false,"blanket_impl":null}},"23:22:8796":{"id":"23:22:8796","crate_id":23,"name":"Equivalent","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["23:24:8790"],"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:3447:2433":{"id":"0:3447:2433","crate_id":0,"name":"HelpExpected","span":{"filename":"src/builder/app_settings.rs","begin":[380,4],"end":[380,16]},"visibility":"default","docs":"Deprecated, replaced with [`Command::help_expected`]","links":{"`Command::help_expected`":"0:4244:1577"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:1558":{"id":"0:1558","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1848,0],"end":[1855,1]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"ValueParserFactory","id":"0:1543:2167","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"primitive","inner":"u8"},"items":["0:1559:1574","0:1560:2158"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:858:4508":{"id":"0:858:4508","crate_id":0,"name":"long_version","span":{"filename":"src/builder/command.rs","begin":[1640,4],"end":[1643,5]},"visibility":"public","docs":"Sets the version for the long version (`--version`) and help messages.\n\nIf [`Command::version`] is not specified, this message will be displayed for `-V`.\n\n**Pro-tip:** Use `clap`s convenience macro [`crate_version!`] to\nautomatically set your application's version to the same thing as your\ncrate at compile time.\n\n# Examples\n\n```no_run\n# use clap::Command;\nCommand::new(\"myprog\")\n    .long_version(\n\"v0.1.24\n commit: abcdef89726d\n revision: 123\n release: 2\n binary: myprog\")\n# ;\n```\n[`crate_version!`]: ./macro.crate_version!.html","links":{"`Command::version`":"0:4244:1577"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["ver",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1401":{"id":"0:1401","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[805,0],"end":[809,1]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Default","id":"2:3218:115","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"PathBufValueParser","id":"0:4409:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:1402:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3173-0:4397:2164":{"id":"b:2:3173-0:4397:2164","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"StringValueParser","id":"0:4397:2164","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3175:669"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:9222:7159-0:4468:2172":{"id":"a:2:9222:7159-0:4468:2172","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9222:7159","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BoolishValueParser","id":"0:4468:2172","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2843-0:4444:2163":{"id":"b:2:2843-0:4444:2163","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2837:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"RangedU64ValueParser","id":"0:4444:2163","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["2:2845:2590"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3487:593":{"id":"0:3487:593","crate_id":0,"name":"eq","span":{"filename":"src/builder/app_settings.rs","begin":[32,16],"end":[32,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:3386:1579","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1564":{"id":"0:1564","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1864,0],"end":[1871,1]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"ValueParserFactory","id":"0:1543:2167","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"primitive","inner":"u16"},"items":["0:1565:1574","0:1566:2158"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4783:648":{"id":"0:4783:648","crate_id":0,"name":"fmt","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1507,16],"end":[1507,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10215:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10204:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4388":{"id":"0:4388","crate_id":0,"name":null,"span":{"filename":"src/builder/value_hint.rs","begin":[27,27],"end":[27,29]},"visibility":{"restricted":{"parent":"0:1272:2157","path":"::builder::value_hint"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"StructuralEq","id":"2:3249:206","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:4356:1583","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:904:3529":{"id":"0:904:3529","crate_id":0,"name":"display_order","span":{"filename":"src/builder/command.rs","begin":[2706,4],"end":[2709,5]},"visibility":"public","docs":"Set the placement of this subcommand within the help.\n\nSubcommands with a lower value will be displayed first in the help message.  Subcommands\nwith duplicate display orders will be displayed in alphabetical order.\n\nThis is helpful when one would like to emphasize frequently used subcommands, or prioritize\nthose towards the top of the list.\n\n**NOTE:** The default is 999 for all subcommands.\n\n# Examples\n\n```rust\n# use clap::{Command, };\nlet m = Command::new(\"cust-ord\")\n    .subcommand(Command::new(\"alpha\") // typically subcommands are grouped\n                                               // alphabetically by name. Subcommands\n                                               // without a display_order have a value of\n                                               // 999 and are displayed alphabetically with\n                                               // all other 999 subcommands\n        .about(\"Some help and text\"))\n    .subcommand(Command::new(\"beta\")\n        .display_order(1)   // In order to force this subcommand to appear *first*\n                            // all we have to do is give it a value lower than 999.\n                            // Any other subcommands with a value of 1 will be displayed\n                            // alphabetically with this one...then 2 values, then 3, etc.\n        .about(\"I should be first!\"))\n    .get_matches_from(vec![\n        \"cust-ord\", \"--help\"\n    ]);\n```\n\nThe above example displays the following help message\n\n```text\ncust-ord\n\nUSAGE:\n    cust-ord [OPTIONS]\n\nOPTIONS:\n    -h, --help       Print help information\n    -V, --version    Print version information\n\nSUBCOMMANDS:\n    beta    I should be first!\n    alpha   Some help and text\n```","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["ord",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:890:5252":{"id":"0:890:5252","crate_id":0,"name":"short_flag_alias","span":{"filename":"src/builder/command.rs","begin":[2375,4],"end":[2379,5]},"visibility":"public","docs":"Add an alias, which functions as  \"hidden\" short flag subcommand\n\nThis will automatically dispatch as if this subcommand was used. This is more efficient,\nand easier than creating multiple hidden subcommands as one only needs to check for the\nexistence of this command, and not all variants.\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg, };\nlet m = Command::new(\"myprog\")\n            .subcommand(Command::new(\"test\").short_flag('t')\n                .short_flag_alias('d'))\n            .get_matches_from(vec![\"myprog\", \"-d\"]);\nassert_eq!(m.subcommand_name(), Some(\"test\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["name",{"kind":"primitive","inner":"char"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8374:7522":{"id":"2:8374:7522","crate_id":2,"name":"IntoIter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"I"}}},"0:1422":{"id":"0:1422","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[940,0],"end":[944,1]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"crate::ValueEnum","id":"0:174:1576","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3240:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3252:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Default","id":"2:3218:115","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"EnumValueParser","id":"0:4415:2173","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}},"items":["0:1424:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13451:67034":{"id":"2:13451:67034","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3173-0:4356:1583":{"id":"b:2:3173-0:4356:1583","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:4356:1583","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3175:669"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:154:1810":{"id":"0:154:1810","crate_id":0,"name":"command","span":{"filename":"src/derive.rs","begin":[256,4],"end":[259,5]},"visibility":"default","docs":"Build a [`Command`] that can instantiate `Self`.\n\nSee [`FromArgMatches::from_arg_matches_mut`] for instantiating `Self`.","links":{"`FromArgMatches::from_arg_matches_mut`":"0:162:1573","`Command`":"0:755:1563"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Command","id":"0:755:1563","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2846-0:4409:2177":{"id":"b:2:2846-0:4409:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2840:8484","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"PathBufValueParser","id":"0:4409:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2848:21287"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3903:1565":{"id":"0:3903:1565","crate_id":0,"name":"ArgGroup","span":{"filename":"src/builder/arg_group.rs","begin":[81,0],"end":[89,1]},"visibility":"public","docs":"Family of related [arguments].\n\nBy placing arguments in a logical group, you can create easier requirement and\nexclusion rules instead of having to list each argument individually, or when you want a rule\nto apply \"any but not all\" arguments.\n\nFor instance, you can make an entire `ArgGroup` required. If [`ArgGroup::multiple(true)`] is\nset, this means that at least one argument from that group must be present. If\n[`ArgGroup::multiple(false)`] is set (the default), one and *only* one must be present.\n\nYou can also do things such as name an entire `ArgGroup` as a [conflict] or [requirement] for\nanother argument, meaning any of the arguments that belong to that group will cause a failure\nif present, or must be present respectively.\n\nPerhaps the most common use of `ArgGroup`s is to require one and *only* one argument to be\npresent out of a given set. Imagine that you had multiple arguments, and you want one of them\nto be required, but making all of them required isn't feasible because perhaps they conflict\nwith each other. For example, lets say that you were building an application where one could\nset a given version number by supplying a string with an option argument, i.e.\n`--set-ver v1.2.3`, you also wanted to support automatically using a previous version number\nand simply incrementing one of the three numbers. So you create three flags `--major`,\n`--minor`, and `--patch`. All of these arguments shouldn't be used at one time but you want to\nspecify that *at least one* of them is used. For this, you can create a group.\n\nFinally, you may use `ArgGroup`s to pull a value from a group of arguments when you don't care\nexactly which argument was actually used at runtime.\n\n# Examples\n\nThe following example demonstrates using an `ArgGroup` to ensure that one, and only one, of\nthe arguments from the specified group is present at runtime.\n\n```rust\n# use clap::{Command, arg, ArgGroup, ErrorKind};\nlet result = Command::new(\"cmd\")\n    .arg(arg!(--\"set-ver\" <ver> \"set the version manually\").required(false))\n    .arg(arg!(--major           \"auto increase major\"))\n    .arg(arg!(--minor           \"auto increase minor\"))\n    .arg(arg!(--patch           \"auto increase patch\"))\n    .group(ArgGroup::new(\"vers\")\n         .args(&[\"set-ver\", \"major\", \"minor\", \"patch\"])\n         .required(true))\n    .try_get_matches_from(vec![\"cmd\", \"--major\", \"--patch\"]);\n// Because we used two args in the group it's an error\nassert!(result.is_err());\nlet err = result.unwrap_err();\nassert_eq!(err.kind(), ErrorKind::ArgumentConflict);\n```\nThis next example shows a passing parse of the same scenario\n\n```rust\n# use clap::{Command, arg, ArgGroup};\nlet result = Command::new(\"cmd\")\n    .arg(arg!(--\"set-ver\" <ver> \"set the version manually\").required(false))\n    .arg(arg!(--major           \"auto increase major\"))\n    .arg(arg!(--minor           \"auto increase minor\"))\n    .arg(arg!(--patch           \"auto increase patch\"))\n    .group(ArgGroup::new(\"vers\")\n         .args(&[\"set-ver\", \"major\", \"minor\",\"patch\"])\n         .required(true))\n    .try_get_matches_from(vec![\"cmd\", \"--major\"]);\nassert!(result.is_ok());\nlet matches = result.unwrap();\n// We may not know which of the args was used, so we can test for the group...\nassert!(matches.contains_id(\"vers\"));\n// we could also alternatively check each arg individually (not shown here)\n```\n[`ArgGroup::multiple(true)`]: ArgGroup::multiple()\n\n[`ArgGroup::multiple(false)`]: ArgGroup::multiple()\n[arguments]: crate::Arg\n[conflict]: crate::Arg::conflicts_with()\n[requirement]: crate::Arg::requires()","links":{"crate::Arg::conflicts_with()":"0:3816:1564","crate::Arg":"0:3816:1564","crate::Arg::requires()":"0:3816:1564","ArgGroup::multiple()":"0:3903:1565"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["0:605","a:2:9222:7159-0:3903:1565","a:2:3252:209-0:3903:1565","a:2:3240:200-0:3903:1565","a:2:9223:7158-0:3903:1565","a:2:3281:5920-0:3903:1565","b:2:2843-0:3903:1565","b:2:3169-0:3903:1565","b:2:3173-0:3903:1565","b:2:3184-0:3903:1565","b:2:3969-0:3903:1565","b:2:2846-0:3903:1565","b:2:3179-0:3903:1565","b:5:787-0:3903:1565","b:23:25-0:3903:1565","0:3912","0:3915","0:3918","0:3920","0:3924","0:3926","0:628","0:631"]}},"0:881:5162":{"id":"0:881:5162","crate_id":0,"name":"trailing_var_arg","span":{"filename":"src/builder/command.rs","begin":[2124,4],"end":[2130,5]},"visibility":"public","docs":"Specifies that the final positional argument is a \"VarArg\" and that `clap` should not\nattempt to parse any further args.\n\nThe values of the trailing positional argument will contain all args from itself on.\n\n**NOTE:** The final positional argument **must** have [`Arg::multiple_values(true)`] or the usage\nstring equivalent.\n\n# Examples\n\n```rust\n# use clap::{Command, arg};\nlet m = Command::new(\"myprog\")\n    .trailing_var_arg(true)\n    .arg(arg!(<cmd> ... \"commands to run\"))\n    .get_matches_from(vec![\"myprog\", \"arg1\", \"-r\", \"val1\"]);\n\nlet trail: Vec<&str> = m.values_of(\"cmd\").unwrap().collect();\nassert_eq!(trail, [\"arg1\", \"-r\", \"val1\"]);\n```\n[`Arg::multiple_values(true)`]: crate::Arg::multiple_values()","links":{"crate::Arg::multiple_values()":"0:3816:1564"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2218:7276":{"id":"0:2218:7276","crate_id":0,"name":"try_remove_one","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1132,4],"end":[1145,5]},"visibility":"public","docs":"Non-panicking version of [`ArgMatches::remove_one`]","links":{"`ArgMatches::remove_one`":"0:4706:1568"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4686:7087","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3967:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3240:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3252:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13449:5725":{"id":"2:13449:5725","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13375:7101":{"id":"2:13375:7101","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:47356:166"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10897:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10897:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4398":{"id":"0:4398","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[674,9],"end":[674,13]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3250:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"StringValueParser","id":"0:4397:2164","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1566:2158":{"id":"0:1566:2158","crate_id":0,"name":"value_parser","span":{"filename":"src/builder/value_parser.rs","begin":[1866,4],"end":[1870,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"qualified_path","inner":{"name":"Parser","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:1543:2167","args":null,"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:502:4004":{"id":"0:502:4004","crate_id":0,"name":"get_action","span":{"filename":"src/builder/arg.rs","begin":[4564,4],"end":[4567,5]},"visibility":"public","docs":"Behavior when parsing the argument","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"super::ArgAction","id":"0:3347:1562","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2846-0:4415:2173":{"id":"b:2:2846-0:4415:2173","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2840:8484","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"EnumValueParser","id":"0:4415:2173","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}},"items":["2:2848:21287"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4375:6261":{"id":"0:4375:6261","crate_id":0,"name":"Username","span":{"filename":"src/builder/value_hint.rs","begin":[59,4],"end":[59,12]},"visibility":"default","docs":"Name of a local operating system user.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:631":{"id":"0:631","crate_id":0,"name":null,"span":{"filename":"src/builder/arg_group.rs","begin":[621,0],"end":[633,1]},"visibility":{"restricted":{"parent":"0:597:2152","path":"::builder::arg_group"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3903:1565","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"items":["0:632:397"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4424:648":{"id":"0:4424:648","crate_id":0,"name":"fmt","span":{"filename":"src/builder/value_parser.rs","begin":[868,16],"end":[868,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10215:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10204:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4011:3613":{"id":"0:4011:3613","crate_id":0,"name":"HiddenLongHelp","span":{"filename":"src/builder/arg_settings.rs","begin":[249,4],"end":[249,18]},"visibility":"default","docs":"Deprecated, replaced with [`Arg::hide_long_help`] and [`Arg::is_hide_long_help_set`]","links":{"`Arg::hide_long_help`":"0:3816:1564","`Arg::is_hide_long_help_set`":"0:3816:1564"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"b:5:6406-0:4587:1584":{"id":"b:5:6406-0:4587:1584","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10262:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"ToString","id":"5:6404:212","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4587:1584","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:6408:1376"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4293":{"id":"0:4293","crate_id":0,"name":null,"span":{"filename":"src/builder/command.rs","begin":[77,34],"end":[77,36]},"visibility":{"restricted":{"parent":"0:649:1810","path":"::builder::command"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"StructuralEq","id":"2:3249:206","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:4244:1577","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2846-0:3970:1581":{"id":"b:2:2846-0:3970:1581","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2840:8484","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgSettings","id":"0:3970:1581","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2848:21287"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:2292:7523":{"id":"0:2292:7523","crate_id":0,"name":"next_back","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1528,4],"end":[1530,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6671:10637":{"id":"1:6671:10637","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6672:21438","1:6673:14630","1:6674:14631","1:6675:14633","1:6676:14632","1:6677:14634","1:6678:14635","1:6679:14637","1:6680:12572","1:6681:14640","1:6682:14641","1:6683:14642","1:6684:14643","1:6685:14644","1:6686:14645","1:6687:14638","1:6688:14639"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1549":{"id":"0:1549","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1830,0],"end":[1835,1]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"ValueParserFactory","id":"0:1543:2167","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"std::ffi::OsString","id":"1:2920:170","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:1550:1574","0:1551:2158"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1332":{"id":"0:1332","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[413,0],"end":[418,1]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":"Create an `i64` [`ValueParser`] from a `..M` range\n\nSee [`RangedI64ValueParser`] for more control over the output type.\n\nSee also [`RangedU64ValueParser`]\n\n# Examples\n\n```rust\nlet mut cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"port\")\n            .long(\"port\")\n            .value_parser(..3000)\n            .takes_value(true)\n            .required(true)\n    );\n\nlet m = cmd.try_get_matches_from_mut([\"cmd\", \"--port\", \"80\"]).unwrap();\nlet port: i64 = *m.get_one(\"port\")\n    .expect(\"required\");\nassert_eq!(port, 80);\n```","links":{"`RangedU64ValueParser`":"0:4444:2163","`RangedI64ValueParser`":"0:4432:2162","`ValueParser`":"0:1294:2166"},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"RangeTo","id":"2:45783:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i64"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1294:2166","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:1333:669"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1013:5673":{"id":"0:1013:5673","crate_id":0,"name":"is_allow_external_subcommands_set","span":{"filename":"src/builder/command.rs","begin":[3733,4],"end":[3735,5]},"visibility":"public","docs":"Report whether [`Command::allow_external_subcommands`] is set","links":{"`Command::allow_external_subcommands`":"0:4244:1577"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3924":{"id":"0:3924","crate_id":0,"name":null,"span":{"filename":"src/builder/arg_group.rs","begin":[80,36],"end":[80,38]},"visibility":{"restricted":{"parent":"0:597:2152","path":"::builder::arg_group"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"StructuralEq","id":"2:3249:206","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3903:1565","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4763:7085":{"id":"0:4763:7085","crate_id":0,"name":"RawValues","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1461,0],"end":[1465,1]},"visibility":"public","docs":"Iterate over raw argument values via [`ArgMatches::get_raw`].\n\n# Examples\n\n ```\n# use clap::{Command, arg, value_parser};\nuse std::ffi::OsString;\nuse std::os::unix::ffi::{OsStrExt,OsStringExt};\n\nlet m = Command::new(\"utf8\")\n    .arg(arg!(<arg> \"some arg\")\n        .value_parser(value_parser!(OsString)))\n    .get_matches_from(vec![OsString::from(\"myprog\"),\n                            // \"Hi {0xe9}!\"\n                            OsString::from_vec(vec![b'H', b'i', b' ', 0xe9, b'!'])]);\nassert_eq!(\n    &*m.get_raw(\"arg\")\n        .unwrap()\n        .next().unwrap()\n        .as_bytes(),\n    [b'H', b'i', b' ', 0xe9, b'!']\n);\n```","links":{"`ArgMatches::get_raw`":"0:4706:1568"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["a:2:9222:7159-0:4763:7085","a:2:3252:209-0:4763:7085","a:2:3240:200-0:4763:7085","a:2:9223:7158-0:4763:7085","a:2:3281:5920-0:4763:7085","b:2:2843-0:4763:7085","b:2:3169-0:4763:7085","b:2:3173-0:4763:7085","b:2:3184-0:4763:7085","b:2:3969-0:4763:7085","b:2:8371-0:4763:7085","b:2:2846-0:4763:7085","b:2:3179-0:4763:7085","b:5:787-0:4763:7085","0:4767","0:4770","0:2270","0:2275","0:2278","0:2280"]}},"b:2:3173-0:4244:1577":{"id":"b:2:3173-0:4244:1577","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:4244:1577","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["2:3175:669"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:338:2620":{"id":"0:338:2620","crate_id":0,"name":"requires","span":{"filename":"src/builder/arg.rs","begin":[699,4],"end":[702,5]},"visibility":"public","docs":"Sets an argument that is required when this one is present\n\ni.e. when using this argument, the following argument *must* be present.\n\n**NOTE:** [Conflicting] rules and [override] rules take precedence over being required\n\n# Examples\n\n```rust\n# use clap::Arg;\nArg::new(\"config\")\n    .requires(\"input\")\n# ;\n```\n\nSetting [`Arg::requires(name)`] requires that the argument be used at runtime if the\ndefining argument is used. If the defining argument isn't used, the other argument isn't\nrequired\n\n```rust\n# use clap::{Command, Arg};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .takes_value(true)\n        .requires(\"input\")\n        .long(\"config\"))\n    .arg(Arg::new(\"input\"))\n    .try_get_matches_from(vec![\n        \"prog\"\n    ]);\n\nassert!(res.is_ok()); // We didn't use cfg, so input wasn't required\n```\n\nSetting [`Arg::requires(name)`] and *not* supplying that argument is an error.\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .takes_value(true)\n        .requires(\"input\")\n        .long(\"config\"))\n    .arg(Arg::new(\"input\"))\n    .try_get_matches_from(vec![\n        \"prog\", \"--config\", \"file.conf\"\n    ]);\n\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind(), ErrorKind::MissingRequiredArgument);\n```\n[`Arg::requires(name)`]: Arg::requires()\n[Conflicting]: Arg::conflicts_with()\n[override]: Arg::overrides_with()","links":{"Arg::overrides_with()":"0:3816:1564","Arg::requires()":"0:3816:1564","Arg::conflicts_with()":"0:3816:1564"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["arg_id",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Key","id":"0:3235:2593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4807:397":{"id":"0:4807:397","crate_id":0,"name":"clone","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1653,9],"end":[1653,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:4801:1585","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2278":{"id":"0:2278","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1484,0],"end":[1484,47]},"visibility":{"restricted":{"parent":"0:2077:7161","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["len","is_empty"],"trait":{"kind":"resolved_path","inner":{"name":"ExactSizeIterator","id":"2:8436:7524","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"RawValues","id":"0:4763:7085","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:8843:8583":{"id":"2:8843:8583","crate_id":2,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8565:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13456:67037":{"id":"2:13456:67037","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1394":{"id":"0:1394","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[768,0],"end":[773,1]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"PathBufValueParser","id":"0:4409:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:1395:907"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1344":{"id":"0:1344","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[514,0],"end":[524,1]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10255:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1294:2166","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:1345:648"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:9223:7158-0:4244:1577":{"id":"a:2:9223:7158-0:4244:1577","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9223:7158","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:4244:1577","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"0:883":{"id":"0:883","crate_id":0,"name":null,"span":{"filename":"src/builder/command.rs","begin":[2250,0],"end":[3260,1]},"visibility":{"restricted":{"parent":"0:649:1810","path":"::builder::command"}},"docs":"# Subcommand-specific Settings","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:4244:1577","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["0:885:4505","0:886:4504","0:888:261","0:890:5252","0:891:5257","0:892:2625","0:894:4514","0:895:4515","0:896:2737","0:898:5295","0:899:5300","0:900:2749","0:902:5312","0:903:5317","0:904:3529","0:905:3559","0:906:5348","0:907:5370","0:908:5382","0:909:5393","0:910:5417","0:911:5435","0:912:5520","0:913:4527","0:915:5540"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3386:1579":{"id":"0:3386:1579","crate_id":0,"name":"AppSettings","span":{"filename":"src/builder/app_settings.rs","begin":[34,0],"end":[523,1]},"visibility":"public","docs":"Application level settings, which affect how [`Command`] operates\n\n**NOTE:** When these settings are used, they apply only to current command, and are *not*\npropagated down or up through child or parent subcommands\n\n[`Command`]: crate::Command","links":{"crate::Command":"0:755:1563"},"attrs":["#[non_exhaustive]"],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":true,"variants":["0:3387:2299","0:3389:2322","0:3391:2326","0:3393:2330","0:3395:2333","0:3397:2337","0:3399:2340","0:3401:2344","0:3403:2347","0:3405:2350","0:3407:2354","0:3409:2358","0:3411:2362","0:3413:2365","0:3415:2368","0:3417:2371","0:3419:2375","0:3421:2379","0:3423:2383","0:3425:2387","0:3427:2398","0:3429:2402","0:3431:2405","0:3433:2409","0:3435:2412","0:3437:2416","0:3439:2420","0:3441:2423","0:3443:2426","0:3445:2430","0:3447:2433","0:3449:2436","0:3451:2439","0:3453:2440"],"impls":["a:2:9222:7159-0:3386:1579","a:2:3252:209-0:3386:1579","a:2:3240:200-0:3386:1579","a:2:9223:7158-0:3386:1579","a:2:3281:5920-0:3386:1579","b:2:2843-0:3386:1579","b:2:3169-0:3386:1579","b:2:3173-0:3386:1579","b:2:3184-0:3386:1579","b:2:3969-0:3386:1579","b:2:2846-0:3386:1579","b:2:3179-0:3386:1579","b:5:787-0:3386:1579","0:3483","0:3485","0:3486","0:3488","0:3489","0:3813"]}},"0:3352:2244":{"id":"0:3352:2244","crate_id":0,"name":"StoreValue","span":{"filename":"src/builder/action.rs","begin":[81,4],"end":[81,14]},"visibility":"default","docs":"Deprecated, replaced with [`ArgAction::Set`] or [`ArgAction::Append`]","links":{"`ArgAction::Set`":"0:3347:1562","`ArgAction::Append`":"0:3347:1562"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:360:3107":{"id":"0:360:3107","crate_id":0,"name":"value_names","span":{"filename":"src/builder/arg.rs","begin":[1478,4],"end":[1481,5]},"visibility":"public","docs":"Placeholders for the argument's values in the help message / usage.\n\nThese names are cosmetic only, used for help and usage strings only. The names are **not**\nused to access arguments. The values of the arguments are accessed in numeric order (i.e.\nif you specify two names `one` and `two` `one` will be the first matched value, `two` will\nbe the second).\n\nThis setting can be very helpful when describing the type of input the user should be\nusing, such as `FILE`, `INTERFACE`, etc. Although not required, it's somewhat convention to\nuse all capital letters for the value name.\n\n**Pro Tip:** It may help to use [`Arg::next_line_help(true)`] if there are long, or\nmultiple value names in order to not throw off the help text alignment of all options.\n\n**NOTE:** implicitly sets [`Arg::takes_value(true)`] and [`Arg::multiple_values(true)`].\n\n# Examples\n\n```rust\n# use clap::{Command, Arg};\nArg::new(\"speed\")\n    .short('s')\n    .value_names(&[\"fast\", \"slow\"]);\n```\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"io\")\n        .long(\"io-files\")\n        .value_names(&[\"INFILE\", \"OUTFILE\"]))\n    .get_matches_from(vec![\n        \"prog\", \"--help\"\n    ]);\n```\n\nRunning the above program produces the following output\n\n```text\nvalnames\n\nUSAGE:\n   valnames [OPTIONS]\n\nOPTIONS:\n    -h, --help                       Print help information\n    --io-files <INFILE> <OUTFILE>    Some help text\n    -V, --version                    Print version information\n```\n[`Arg::next_line_help(true)`]: Arg::next_line_help()\n[`Arg::number_of_values`]: Arg::number_of_values()\n[`Arg::takes_value(true)`]: Arg::takes_value()\n[`Arg::multiple_values(true)`]: Arg::multiple_values()","links":{"Arg::next_line_help()":"0:3816:1564","Arg::takes_value()":"0:3816:1564","Arg::multiple_values()":"0:3816:1564"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["names",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4461:648":{"id":"0:4461:648","crate_id":0,"name":"fmt","span":{"filename":"src/builder/value_parser.rs","begin":[1451,22],"end":[1451,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10215:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10204:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2325":{"id":"0:2325","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1619,0],"end":[1619,46]},"visibility":{"restricted":{"parent":"0:2077:7161","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["len","is_empty"],"trait":{"kind":"resolved_path","inner":{"name":"ExactSizeIterator","id":"2:8436:7524","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OsValues","id":"0:4791:1586","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:2290":{"id":"0:2290","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1527,0],"end":[1531,1]},"visibility":{"restricted":{"parent":"0:2077:7161","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["rfold","advance_back_by","try_rfold","rfind","nth_back"],"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedIterator","id":"2:8411:120","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:4773:1588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["0:2292:7523"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4532:6850":{"id":"0:4532:6850","crate_id":0,"name":"ActualNumOccurrences","span":{"filename":"src/error/context.rs","begin":[22,4],"end":[22,24]},"visibility":"default","docs":"Number of occurrences present","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"a:2:3252:209-0:4515:6699":{"id":"a:2:3252:209-0:4515:6699","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3252:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:4515:6699","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:2210":{"id":"0:2210","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1075,0],"end":[1176,1]},"visibility":{"restricted":{"parent":"0:2077:7161","path":"::parser::matches::arg_matches"}},"docs":"# Advanced","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4706:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:2211:7225","0:2214:7239","0:2217:7266","0:2218:7276","0:2221:7285","0:2224:7293"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3395:2333":{"id":"0:3395:2333","crate_id":0,"name":"AllArgsOverrideSelf","span":{"filename":"src/builder/app_settings.rs","begin":[109,4],"end":[109,23]},"visibility":"default","docs":"Deprecated, replaced with [`Command::args_override_self`]","links":{"`Command::args_override_self`":"0:4244:1577"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:3437:2416":{"id":"0:3437:2416","crate_id":0,"name":"DisableHelpSubcommand","span":{"filename":"src/builder/app_settings.rs","begin":[331,4],"end":[331,25]},"visibility":"default","docs":"Deprecated, replaced with [`Command::disable_help_subcommand`] and\n[`Command::is_disable_help_subcommand_set`]","links":{"`Command::disable_help_subcommand`":"0:4244:1577","`Command::is_disable_help_subcommand_set`":"0:4244:1577"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"a:2:3240:200-0:4468:2172":{"id":"a:2:3240:200-0:4468:2172","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3240:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BoolishValueParser","id":"0:4468:2172","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:5:787-0:4456:2171":{"id":"b:5:787-0:4456:2171","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:783:211","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BoolValueParser","id":"0:4456:2171","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:789:4115","5:790:4707","5:791:9628"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:31793:68520":{"id":"2:31793:68520","crate_id":2,"name":"carrying_add","span":null,"visibility":"public","docs":"Calculates `self + rhs + carry` without the ability to overflow.\n\nPerforms \"ternary addition\" which takes in an extra bit to add, and may return an\nadditional bit of overflow. This allows for chaining together multiple additions\nto create \"big integers\" which represent larger values.\n\nThis can be thought of as a 64-bit \"full adder\", in the electronics sense.\n\n# Examples\n\nBasic usage\n\n```\n#![feature(bigint_helper_methods)]\nassert_eq!(5u64.carrying_add(2, false), (7, false));\nassert_eq!(5u64.carrying_add(2, true), (8, false));\nassert_eq!(u64::MAX.carrying_add(1, false), (0, true));\nassert_eq!(u64::MAX.carrying_add(0, true), (0, true));\nassert_eq!(u64::MAX.carrying_add(1, true), (1, true));\nassert_eq!(u64::MAX.carrying_add(u64::MAX, true), (u64::MAX, true));\n```\n\nIf `carry` is false, this method is equivalent to [`overflowing_add`](Self::overflowing_add):\n\n```\n#![feature(bigint_helper_methods)]\nassert_eq!(5_u64.carrying_add(2, false), 5_u64.overflowing_add(2));\nassert_eq!(u64::MAX.carrying_add(1, false), u64::MAX.overflowing_add(1));\n```","links":{"Self::overflowing_add":"1:15859:8332"},"attrs":["#[unstable(feature = \"bigint_helper_methods\", issue = \"85532\")]","#[rustc_const_unstable(feature = \"const_bigint_helper_methods\", issue =\n\"85532\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}],["carry",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"u64"},{"kind":"primitive","inner":"bool"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9223:7158-0:4432:2162":{"id":"a:2:9223:7158-0:4432:2162","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9223:7158","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9223:7158","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:4432:2162","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1573":{"id":"0:1573","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1888,0],"end":[1895,1]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"ValueParserFactory","id":"0:1543:2167","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"primitive","inner":"i32"},"items":["0:1574:1574","0:1575:2158"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13402:2138":{"id":"2:13402:2138","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:47356:166","self::pattern":"2:12997:8603","prim@char":"1:15839:8315"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:8597","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3362:2271":{"id":"0:3362:2271","crate_id":0,"name":"Help","span":{"filename":"src/builder/action.rs","begin":[223,4],"end":[223,8]},"visibility":"default","docs":"When encountered, display [`Command::print_help`][super::App::print_help]\n\nDepending on the flag, [`Command::print_long_help`][super::App::print_long_help] may be shown\n\n# Examples\n\n```rust\n# use clap::Command;\n# use clap::Arg;\nlet cmd = Command::new(\"mycmd\")\n    .arg(\n        Arg::new(\"special-help\")\n            .short('?')\n            .action(clap::ArgAction::Help)\n    );\n\n// Existing help still exists\nlet err = cmd.clone().try_get_matches_from([\"mycmd\", \"-h\"]).unwrap_err();\nassert_eq!(err.kind(), clap::error::ErrorKind::DisplayHelp);\n\n// New help available\nlet err = cmd.try_get_matches_from([\"mycmd\", \"-?\"]).unwrap_err();\nassert_eq!(err.kind(), clap::error::ErrorKind::DisplayHelp);\n```","links":{"super::App::print_help":"0:4244:1577","super::App::print_long_help":"0:4244:1577"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:31779:68511":{"id":"2:31779:68511","crate_id":2,"name":"saturating_pow","span":null,"visibility":"public","docs":"Saturating integer exponentiation. Computes `self.pow(exp)`,\nsaturating at the numeric bounds instead of overflowing.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(4u64.saturating_pow(3), 64);\nassert_eq!(u64::MAX.saturating_pow(2), u64::MAX);\n```","links":{},"attrs":["#[stable(feature = \"no_panic_pow\", since = \"1.34.0\")]","#[rustc_const_stable(feature = \"const_int_pow\", since = \"1.50.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["exp",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3999:3213":{"id":"0:3999:3213","crate_id":0,"name":"RequireEquals","span":{"filename":"src/builder/arg_settings.rs","begin":[174,4],"end":[174,17]},"visibility":"default","docs":"Deprecated, replaced with [`Arg::require_equals`] and [`Arg::is_require_equals_set`]","links":{"`Arg::is_require_equals_set`":"0:3816:1564","`Arg::require_equals`":"0:3816:1564"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:1468:59":{"id":"0:1468:59","crate_id":0,"name":"default","span":{"filename":"src/builder/value_parser.rs","begin":[1247,4],"end":[1249,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:4750:9796":{"id":"2:4750:9796","crate_id":2,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4751:2018","2:4752:21290","2:4753:4560"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13387:6013":{"id":"2:13387:6013","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49306:8610","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3240:200-0:4773:1588":{"id":"a:2:3240:200-0:4773:1588","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3240:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:4773:1588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:13393:1928":{"id":"2:13393:1928","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:15839:8315","self::pattern":"2:12997:8603"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:8597","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2211:7225":{"id":"0:2211:7225","crate_id":0,"name":"try_get_one","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1077,4],"end":[1093,5]},"visibility":"public","docs":"Non-panicking version of [`ArgMatches::get_one`]","links":{"`ArgMatches::get_one`":"0:4706:1568"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4686:7087","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3967:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3240:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3252:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1567":{"id":"0:1567","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1872,0],"end":[1879,1]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"ValueParserFactory","id":"0:1543:2167","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"primitive","inner":"i16"},"items":["0:1568:1574","0:1569:2158"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:31733:6473":{"id":"2:31733:6473","crate_id":2,"name":"MIN","span":null,"visibility":"public","docs":"The smallest value that can be represented by this integer type.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(u64::MIN, 0);\n```","links":{},"attrs":["#[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]"],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"primitive","inner":"u64"},"default":"0"}},"a:2:9222:7159-0:4706:1568":{"id":"a:2:9222:7159-0:4706:1568","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9222:7159","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4706:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"0:4544:6813":{"id":"0:4544:6813","crate_id":0,"name":"TrailingArg","span":{"filename":"src/error/context.rs","begin":[34,4],"end":[34,15]},"visibility":"default","docs":"Trailing argument","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"a:2:9222:7159-0:3347:1562":{"id":"a:2:9222:7159-0:3347:1562","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9222:7159","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgAction","id":"0:3347:1562","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1571:1574":{"id":"0:1571:1574","crate_id":0,"name":"Parser","span":{"filename":"src/builder/value_parser.rs","begin":[1881,4],"end":[1881,44]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:4432:2162","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u32"}}],"bindings":[]}},"param_names":[]}}}},"0:4379:6266":{"id":"0:4379:6266","crate_id":0,"name":"Url","span":{"filename":"src/builder/value_hint.rs","begin":[64,4],"end":[64,7]},"visibility":"default","docs":"Complete web address.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"a:2:9222:7159-0:4425:2161":{"id":"a:2:9222:7159-0:4425:2161","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9222:7159","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValuesParser","id":"0:4425:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2843-0:4356:1583":{"id":"b:2:2843-0:4356:1583","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2837:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:4356:1583","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2845:2590"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3179-0:4823:1587":{"id":"b:2:3179-0:4823:1587","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3149:217","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4823:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3182:127","2:3183:1395"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:783:211":{"id":"5:783:211","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:784:4115","5:785:4707","5:786:9628"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:189:2021":{"id":"0:189:2021","crate_id":0,"name":"try_parse_from","span":{"filename":"src/derive.rs","begin":[527,4],"end":[533,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["itr",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4640:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"It","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8367:151","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"It"}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"It"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsString","id":"1:2920:170","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3969-0:3347:1562":{"id":"b:2:3969-0:3347:1562","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3967:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgAction","id":"0:3347:1562","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3971:1408"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:824:4837":{"id":"0:824:4837","crate_id":0,"name":"propagate_version","span":{"filename":"src/builder/command.rs","begin":[1128,4],"end":[1134,5]},"visibility":"public","docs":"Specifies to use the version of the current command for all [`subcommands`].\n\nDefaults to `false`; subcommands have independent version strings from their parents.\n\n**Note:** Make sure you apply it as `global_setting` if you want this setting\nto be propagated to subcommands and sub-subcommands!\n\n**NOTE:** This choice is propagated to all child subcommands.\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg};\nCommand::new(\"myprog\")\n    .version(\"v1.1\")\n    .propagate_version(true)\n    .subcommand(Command::new(\"test\"))\n    .get_matches();\n// running `$ myprog test --version` will display\n// \"myprog-test v1.1\"\n```\n\n[`subcommands`]: crate::Command::subcommand()","links":{"crate::Command::subcommand()":"0:4244:1577"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1312:349":{"id":"0:1312:349","crate_id":0,"name":"bool","span":{"filename":"src/builder/value_parser.rs","begin":[139,4],"end":[141,5]},"visibility":"public","docs":"[`bool`] parser for argument values\n\nSee also:\n- [`BoolishValueParser`] for different human readable bool representations\n- [`FalseyValueParser`] for assuming non-false is true\n\n# Example\n\n```rust\nlet mut cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"download\")\n            .value_parser(clap::value_parser!(bool))\n            .required(true)\n    );\n\nlet m = cmd.try_get_matches_from_mut([\"cmd\", \"true\"]).unwrap();\nlet port: bool = *m.get_one(\"download\")\n    .expect(\"required\");\nassert_eq!(port, true);\n\nassert!(cmd.try_get_matches_from_mut([\"cmd\", \"forever\"]).is_err());\n```","links":{"`FalseyValueParser`":"0:4462:2174","`BoolishValueParser`":"0:4468:2172","`bool`":"1:15837:8313"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3173-0:4686:7087":{"id":"b:2:3173-0:4686:7087","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4686:7087","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3175:669"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3179-0:4432:2162":{"id":"b:2:3179-0:4432:2162","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3149:217","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:4432:2162","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["2:3182:127","2:3183:1395"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:3252:209-0:4403:2176":{"id":"a:2:3252:209-0:4403:2176","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3252:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OsStringValueParser","id":"0:4403:2176","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:389:3246":{"id":"0:389:3246","crate_id":0,"name":"value_delimiter","span":{"filename":"src/builder/arg.rs","begin":[1919,4],"end":[1922,5]},"visibility":"public","docs":"Separator between the arguments values, defaults to `,` (comma).\n\n**NOTE:** implicitly sets [`Arg::use_value_delimiter(true)`]\n\n**NOTE:** implicitly sets [`Arg::takes_value(true)`]\n\n# Examples\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"config\")\n        .short('c')\n        .long(\"config\")\n        .value_delimiter(';'))\n    .get_matches_from(vec![\n        \"prog\", \"--config=val1;val2;val3\"\n    ]);\n\nassert_eq!(m.values_of(\"config\").unwrap().collect::<Vec<_>>(), [\"val1\", \"val2\", \"val3\"])\n```\n[`Arg::use_value_delimiter(true)`]: Arg::use_value_delimiter()\n[`Arg::takes_value(true)`]: Arg::takes_value()","links":{"Arg::use_value_delimiter()":"0:3816:1564","Arg::takes_value()":"0:3816:1564"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["d",{"kind":"primitive","inner":"char"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:31825:68548":{"id":"2:31825:68548","crate_id":2,"name":"from_be_bytes","span":null,"visibility":"public","docs":"Create a native endian integer value from its representation\nas a byte array in big endian.\n\n\n\n# Examples\n\n```\nlet value = u64::from_be_bytes([0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]);\nassert_eq!(value, 0x1234567890123456);\n```\n\nWhen starting from a slice rather than an array, fallible conversion APIs can be used:\n\n```\nfn read_be_u64(input: &mut &[u8]) -> u64 {\n    let (int_bytes, rest) = input.split_at(std::mem::size_of::<u64>());\n    *input = rest;\n    u64::from_be_bytes(int_bytes.try_into().unwrap())\n}\n```","links":{},"attrs":["#[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]","#[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["bytes",{"kind":"array","inner":{"type":{"kind":"primitive","inner":"u8"},"len":"8"}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:386:3212":{"id":"0:386:3212","crate_id":0,"name":"require_equals","span":{"filename":"src/builder/arg.rs","begin":[1813,4],"end":[1819,5]},"visibility":"public","docs":"Requires that options use the `--option=val` syntax\n\ni.e. an equals between the option and associated value.\n\n**NOTE:** Setting this requires [`Arg::takes_value`]\n\n# Examples\n\nSetting `require_equals` requires that the option have an equals sign between\nit and the associated value.\n\n```rust\n# use clap::{Command, Arg};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .takes_value(true)\n        .require_equals(true)\n        .long(\"config\"))\n    .try_get_matches_from(vec![\n        \"prog\", \"--config=file.conf\"\n    ]);\n\nassert!(res.is_ok());\n```\n\nSetting `require_equals` and *not* supplying the equals will cause an\nerror.\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .takes_value(true)\n        .require_equals(true)\n        .long(\"config\"))\n    .try_get_matches_from(vec![\n        \"prog\", \"--config\", \"file.conf\"\n    ]);\n\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind(), ErrorKind::NoEquals);\n```","links":{"`Arg::takes_value`":"0:3816:1564"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13483:16225":{"id":"2:13483:16225","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:833:4900":{"id":"0:833:4900","crate_id":0,"name":"infer_subcommands","span":{"filename":"src/builder/command.rs","begin":[1366,4],"end":[1372,5]},"visibility":"public","docs":"Allow partial matches of [subcommand] names and their [aliases].\n\nFor example, to match a subcommand named `test`, one could use `t`, `te`, `tes`, and\n`test`.\n\n**NOTE:** The match *must not* be ambiguous at all in order to succeed. i.e. to match `te`\nto `test` there could not also be a subcommand or alias `temp` because both start with `te`\n\n**CAUTION:** This setting can interfere with [positional/free arguments], take care when\ndesigning CLIs which allow inferred subcommands and have potential positional/free\narguments whose values could start with the same characters as subcommands. If this is the\ncase, it's recommended to use settings such as [`Command::args_conflicts_with_subcommands`] in\nconjunction with this setting.\n\n**NOTE:** This choice is propagated to all child subcommands.\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n    .infer_subcommands(true)\n    .subcommand(Command::new(\"test\"))\n    .get_matches_from(vec![\n        \"prog\", \"te\"\n    ]);\nassert_eq!(m.subcommand_name(), Some(\"test\"));\n```\n\n[subcommand]: crate::Command::subcommand()\n[positional/free arguments]: crate::Arg::index()\n[aliases]: crate::Command::aliases()","links":{"`Command::args_conflicts_with_subcommands`":"0:4244:1577","crate::Command::subcommand()":"0:4244:1577","crate::Command::aliases()":"0:4244:1577","crate::Arg::index()":"0:3816:1564"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4831:648":{"id":"0:4831:648","crate_id":0,"name":"fmt","span":{"filename":"src/parser/matches/value_source.rs","begin":[2,9],"end":[2,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10215:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10204:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:876:5059":{"id":"0:876:5059","crate_id":0,"name":"next_display_order","span":{"filename":"src/builder/command.rs","begin":[1898,4],"end":[1901,5]},"visibility":"public","docs":"Change the starting value for assigning future display orders for ags.\n\nThis will be used for any arg that hasn't had [`Arg::display_order`] called.","links":{"`Arg::display_order`":"0:3816:1564"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["disp_ord",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl Into<Option<usize>>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13392:39508":{"id":"2:13392:39508","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:49612:8604","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2177:1745":{"id":"0:2177:1745","crate_id":0,"name":"values_of_t","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[524,4],"end":[541,5]},"visibility":"public","docs":"Deprecated, replaced with [`ArgMatches::get_many()`]","links":{"`ArgMatches::get_many()`":"0:4706:1568"},"attrs":["#[track_caller]","#![allow(deprecated)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7764:223","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4640:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12936:1756","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"R"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12936:1756","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10262:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:478:3947":{"id":"0:478:3947","crate_id":0,"name":"get_visible_aliases","span":{"filename":"src/builder/arg.rs","begin":[4350,4],"end":[4362,5]},"visibility":"public","docs":"Get visible aliases for this argument, if any","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7764:223","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2224:7293":{"id":"0:2224:7293","crate_id":0,"name":"try_contains_id","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1168,4],"end":[1175,5]},"visibility":"public","docs":"Non-panicking version of [`ArgMatches::contains_id`]","links":{"`ArgMatches::contains_id`":"0:4706:1568"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"bool"}},{"type":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4686:7087","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:192":{"id":"0:192","crate_id":0,"name":null,"span":{"filename":"src/derive.rs","begin":[537,0],"end":[544,1]},"visibility":{"restricted":{"parent":"0:110:536","path":"::derive"}},"docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"CommandFactory","id":"0:153:1572","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["command_for_update","command"],"trait":{"kind":"resolved_path","inner":{"name":"CommandFactory","id":"0:153:1572","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["0:194:2052","0:196:2057"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4842:984":{"id":"0:4842:984","crate_id":0,"name":"partial_cmp","span":{"filename":"src/parser/matches/value_source.rs","begin":[2,44],"end":[2,54]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4823:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::option::Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"$crate::cmp::Ordering","id":"2:37488:168","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1426:907":{"id":"0:1426:907","crate_id":0,"name":"new","span":{"filename":"src/builder/value_parser.rs","begin":[986,4],"end":[988,5]},"visibility":"public","docs":"Verify the value is from an enumerated set pf [`PossibleValue`][crate::PossibleValue].","links":{"crate::PossibleValue":"0:4298:1582"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["values",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"PossibleValuesParser","id":"0:4425:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl Into<PossibleValuesParser>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"PossibleValuesParser","id":"0:4425:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3351:8454":{"id":"2:3351:8454","crate_id":2,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3353:548"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13364:67022":{"id":"2:13364:67022","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9223:7158-0:4397:2164":{"id":"a:2:9223:7158-0:4397:2164","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9223:7158","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"StringValueParser","id":"0:4397:2164","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:3173-0:4640:127":{"id":"b:2:3173-0:4640:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4640:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3175:669"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:814":{"id":"0:814","crate_id":0,"name":null,"span":{"filename":"src/builder/command.rs","begin":[899,0],"end":[1373,1]},"visibility":{"restricted":{"parent":"0:649:1810","path":"::builder::command"}},"docs":"# Application-wide Settings\n\nThese settings will apply to the top-level command and all subcommands, by default.  Some\nsettings can be overridden in subcommands.","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:4244:1577","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["0:816:4777","0:817:4795","0:818:4798","0:819:4806","0:820:1529","0:821:4820","0:822:4825","0:823:4830","0:824:4837","0:825:3554","0:826:4843","0:827:4850","0:828:4853","0:829:4869","0:830:4872","0:831:3569","0:832:4884","0:833:4900"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:206:2099":{"id":"0:206:2099","crate_id":0,"name":"augment_args","span":{"filename":"src/derive.rs","begin":[562,4],"end":[564,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["cmd",{"kind":"resolved_path","inner":{"name":"Command","id":"0:755:1563","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Command","id":"0:755:1563","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3183:1395":{"id":"2:3183:1395","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4720:593":{"id":"0:4720:593","crate_id":0,"name":"eq","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[67,32],"end":[67,41]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4706:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6096:67680":{"id":"5:6096:67680","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8352:205"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4528:6806":{"id":"0:4528:6806","crate_id":0,"name":"ExpectedNumValues","span":{"filename":"src/error/context.rs","begin":[18,4],"end":[18,21]},"visibility":"default","docs":"Number of allowed values","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"b:2:3184-0:4409:2177":{"id":"b:2:3184-0:4409:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"PathBufValueParser","id":"0:4409:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3187:127","2:3188:1394"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:31783:1504":{"id":"2:31783:1504","crate_id":2,"name":"wrapping_mul","span":null,"visibility":"public","docs":"Wrapping (modular) multiplication. Computes `self *\nrhs`, wrapping around at the boundary of the type.\n\n# Examples\n\nBasic usage:\n\nPlease note that this example is shared between integer types.\nWhich explains why `u8` is used here.\n\n```\nassert_eq!(10u8.wrapping_mul(12), 120);\nassert_eq!(25u8.wrapping_mul(12), 44);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1504:3153":{"id":"0:1504:3153","crate_id":0,"name":"possible_values","span":{"filename":"src/builder/value_parser.rs","begin":[1499,4],"end":[1503,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2146","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8565:157","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"resolved_path","inner":{"name":"crate::PossibleValue","id":"0:4298:1582","args":{"angle_bracketed":{"args":[{"lifetime":"'static"}],"bindings":[]}},"param_names":[]}}}}}]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:494:3988":{"id":"0:494:3988","crate_id":0,"name":"is_positional","span":{"filename":"src/builder/arg.rs","begin":[4512,4],"end":[4514,5]},"visibility":"public","docs":"Checks whether this argument is a positional or not.\n\n# Examples\n\n```\n# use clap::Arg;\nlet arg = Arg::new(\"foo\");\nassert_eq!(true, arg.is_positional());\n\nlet arg = Arg::new(\"foo\").long(\"foo\");\nassert_eq!(false, arg.is_positional());\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5079:648":{"id":"0:5079:648","crate_id":0,"name":"fmt","span":{"filename":"src/util/color.rs","begin":[2,9],"end":[2,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10215:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10204:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4457":{"id":"0:4457","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1451,9],"end":[1451,13]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3250:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BoolValueParser","id":"0:4456:2171","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:130:2014":{"id":"0:130:2014","crate_id":0,"name":"parse_from","span":{"filename":"src/derive.rs","begin":[103,4],"end":[119,5]},"visibility":"default","docs":"Parse from iterator, exit on error","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["itr",{"kind":"generic","inner":"I"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8367:151","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"T"}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsString","id":"1:2920:170","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4425:2161":{"id":"0:4425:2161","crate_id":0,"name":"PossibleValuesParser","span":{"filename":"src/builder/value_parser.rs","begin":[982,0],"end":[982,68]},"visibility":"public","docs":"Verify the value is from an enumerated set of [`PossibleValue`][crate::PossibleValue].\n\nSee also:\n- [`EnumValueParser`]\n\n# Example\n\nUsage:\n```rust\nlet mut cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"color\")\n            .value_parser(clap::builder::PossibleValuesParser::new([\"always\", \"auto\", \"never\"]))\n            .required(true)\n    );\n\nlet m = cmd.try_get_matches_from_mut([\"cmd\", \"always\"]).unwrap();\nlet port: &String = m.get_one(\"color\")\n    .expect(\"required\");\nassert_eq!(port, \"always\");\n```\n\nSemantics:\n```rust\n# use std::ffi::OsStr;\n# use clap::builder::TypedValueParser;\n# let cmd = clap::Command::new(\"test\");\n# let arg = None;\nlet value_parser = clap::builder::PossibleValuesParser::new([\"always\", \"auto\", \"never\"]);\nassert!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"random\")).is_err());\nassert!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"\")).is_err());\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"always\")).unwrap(), \"always\");\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"auto\")).unwrap(), \"auto\");\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"never\")).unwrap(), \"never\");\n```","links":{"`EnumValueParser`":"0:4415:2173","crate::PossibleValue":"0:4298:1582"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"tuple","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["0:1425","a:2:9222:7159-0:4425:2161","a:2:3252:209-0:4425:2161","a:2:3240:200-0:4425:2161","a:2:9223:7158-0:4425:2161","a:2:3281:5920-0:4425:2161","b:2:2843-0:4425:2161","b:2:3169-0:4425:2161","b:2:3173-0:4425:2161","b:2:3184-0:4425:2161","b:2:3969-0:4425:2161","b:2:2846-0:4425:2161","b:2:3179-0:4425:2161","b:5:787-0:4425:2161","0:4428","0:4430","0:1428","0:1438"]}},"0:1860:659":{"id":"0:1860:659","crate_id":0,"name":"format","span":{"filename":"src/error/mod.rs","begin":[83,4],"end":[90,5]},"visibility":"public","docs":"Format the existing message with the Command's context","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["cmd",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Command","id":"0:755:1563","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1943:1567":{"id":"0:1943:1567","crate_id":0,"name":"parser","span":{"filename":"src/parser/mod.rs","begin":[1,0],"end":[27,42]},"visibility":"public","docs":"[`Command`][crate::Command] line argument parser","links":{"crate::Command":"0:755:1563"},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:4763:7085","0:4750:7086","0:4706:1568","0:4801:1585","0:4823:1587","0:4686:7087","0:4791:1586","0:4773:1588"]}},"0:1015:5679":{"id":"0:1015:5679","crate_id":0,"name":"get_external_subcommand_value_parser","span":{"filename":"src/builder/command.rs","begin":[3753,4],"end":[3763,5]},"visibility":"public","docs":"Configured parser for values passed to an external subcommand\n\n# Example\n\n```rust\nlet cmd = clap::Command::new(\"raw\")\n    .allow_external_subcommands(true)\n    .allow_invalid_utf8_for_external_subcommands(true);\nlet value_parser = cmd.get_external_subcommand_value_parser();\nprintln!(\"{:?}\", value_parser);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"super::ValueParser","id":"0:1294:2166","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:31802:68529":{"id":"2:31802:68529","crate_id":2,"name":"overflowing_rem_euclid","span":null,"visibility":"public","docs":"Calculates the remainder `self.rem_euclid(rhs)` as if by Euclidean division.\n\nReturns a tuple of the modulo after dividing along with a boolean\nindicating whether an arithmetic overflow would occur. Note that for\nunsigned integers overflow never occurs, so the second value is\nalways `false`.\nSince, for the positive integers, all common\ndefinitions of division are equal, this operation\nis exactly equal to `self.overflowing_rem(rhs)`.\n\n# Panics\n\nThis function will panic if `rhs` is 0.\n\n# Examples\n\nBasic usage\n\n```\nassert_eq!(5u64.overflowing_rem_euclid(2), (1, false));\n```","links":{},"attrs":["#[stable(feature = \"euclidean_division\", since = \"1.38.0\")]","#[rustc_const_stable(feature = \"const_euclidean_int_methods\", since =\n\"1.52.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"u64"},{"kind":"primitive","inner":"bool"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2214:7239":{"id":"0:2214:7239","crate_id":0,"name":"try_get_many","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1096,4],"end":[1113,5]},"visibility":"public","docs":"Non-panicking version of [`ArgMatches::get_many`]","links":{"`ArgMatches::get_many`":"0:4706:1568"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ValuesRef","id":"0:4750:7086","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4686:7087","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3967:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3240:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3252:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2274:4560":{"id":"0:2274:4560","crate_id":0,"name":"size_hint","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1473,4],"end":[1475,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1006:5661":{"id":"0:1006:5661","crate_id":0,"name":"is_arg_required_else_help_set","span":{"filename":"src/builder/command.rs","begin":[3698,4],"end":[3700,5]},"visibility":"public","docs":"Report whether [`Command::arg_required_else_help`] is set","links":{"`Command::arg_required_else_help`":"0:4244:1577"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4635":{"id":"0:4635","crate_id":0,"name":null,"span":{"filename":"src/error/kind.rs","begin":[2,22],"end":[2,27]},"visibility":{"restricted":{"parent":"0:1840:769","path":"::error::kind"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4587:1584","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:4636:397"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:3252:209-0:4801:1585":{"id":"a:2:3252:209-0:4801:1585","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3252:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:4801:1585","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:172:2116":{"id":"0:172:2116","crate_id":0,"name":"augment_subcommands_for_update","span":{"filename":"src/derive.rs","begin":[451,4],"end":[451,71]},"visibility":"default","docs":"Append to [`Command`] so it can update `self`.\n\nThis is used to implement `#[clap(flatten)]`\n\nSee also [`CommandFactory`].","links":{"`CommandFactory`":"0:153:1572","`Command`":"0:755:1563"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["cmd",{"kind":"resolved_path","inner":{"name":"Command","id":"0:755:1563","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Command","id":"0:755:1563","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:2157:1736":{"id":"0:2157:1736","crate_id":0,"name":"value_of","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[350,4],"end":[355,5]},"visibility":"public","docs":"Deprecated, replaced with [`ArgMatches::get_one()`]","links":{"`ArgMatches::get_one()`":"0:4706:1568"},"attrs":["#[track_caller]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Key","id":"0:3235:2593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3182:127":{"id":"2:3182:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}}}}},"5:791:9628":{"id":"5:791:9628","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1499":{"id":"0:1499","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1469,0],"end":[1504,1]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["possible_values","parse"],"trait":{"kind":"resolved_path","inner":{"name":"TypedValueParser","id":"0:1362:2165","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BoolValueParser","id":"0:4456:2171","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:1500:6312","0:1501:6352","0:1504:3153"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1310:907":{"id":"0:1310:907","crate_id":0,"name":"new","span":{"filename":"src/builder/value_parser.rs","begin":[108,4],"end":[114,5]},"visibility":"public","docs":"Custom parser for argument values\n\nTo create a custom parser, see [`TypedValueParser`]\n\nPre-existing implementations include:\n- [`EnumValueParser`] and  [`PossibleValuesParser`] for static enumerated values\n- [`BoolishValueParser`] and [`FalseyValueParser`] for alternative `bool` implementations\n- [`RangedI64ValueParser`] and [`RangedU64ValueParser`]\n- [`NonEmptyStringValueParser`]\n\n# Example\n\n```rust\ntype EnvVar = (String, Option<String>);\nfn parse_env_var(env: &str) -> Result<EnvVar, std::io::Error> {\n    if let Some((var, value)) = env.split_once('=') {\n        Ok((var.to_owned(), Some(value.to_owned())))\n    } else {\n        Ok((env.to_owned(), None))\n    }\n}\n\nlet mut cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"env\")\n            .value_parser(clap::builder::ValueParser::new(parse_env_var))\n            .required(true)\n    );\n\nlet m = cmd.try_get_matches_from_mut([\"cmd\", \"key=value\"]).unwrap();\nlet port: &EnvVar = m.get_one(\"env\")\n    .expect(\"required\");\nassert_eq!(*port, (\"key\".into(), Some(\"value\".into())));\n```","links":{"`FalseyValueParser`":"0:4462:2174","`EnumValueParser`":"0:4415:2173","`TypedValueParser`":"0:1362:2165","`NonEmptyStringValueParser`":"0:4474:2175","`RangedU64ValueParser`":"0:4444:2163","`RangedI64ValueParser`":"0:4432:2162","`PossibleValuesParser`":"0:4425:2161","`BoolishValueParser`":"0:4468:2172"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["other",{"kind":"generic","inner":"P"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TypedValueParser","id":"0:1362:2165","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Value","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:1362:2165","args":null,"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3240:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3252:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2255:4560":{"id":"0:2255:4560","crate_id":0,"name":"size_hint","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1412,4],"end":[1414,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9222:7159-0:4474:2175":{"id":"a:2:9222:7159-0:4474:2175","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9222:7159","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"NonEmptyStringValueParser","id":"0:4474:2175","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:185:2011":{"id":"0:185:2011","crate_id":0,"name":"try_parse","span":{"filename":"src/derive.rs","begin":[515,4],"end":[517,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4640:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4281":{"id":"0:4281","crate_id":0,"name":null,"span":{"filename":"src/builder/command.rs","begin":[77,9],"end":[77,14]},"visibility":{"restricted":{"parent":"0:649:1810","path":"::builder::command"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10255:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:4244:1577","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["0:4283:648"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:31807:45939":{"id":"2:31807:45939","crate_id":2,"name":"pow","span":null,"visibility":"public","docs":"Raises self to the power of `exp`, using exponentiation by squaring.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(2u64.pow(5), 32);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_int_pow\", since = \"1.50.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["exp",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:816:4777":{"id":"0:816:4777","crate_id":0,"name":"no_binary_name","span":{"filename":"src/builder/command.rs","begin":[919,4],"end":[925,5]},"visibility":"public","docs":"Specifies that the parser should not assume the first argument passed is the binary name.\n\nThis is normally the case when using a \"daemon\" style mode.  For shells / REPLs, see\n[`Command::multicall`][App::multicall].\n\n# Examples\n\n```rust\n# use clap::{Command, arg};\nlet m = Command::new(\"myprog\")\n    .no_binary_name(true)\n    .arg(arg!(<cmd> ... \"commands to run\"))\n    .get_matches_from(vec![\"command\", \"set\"]);\n\nlet cmds: Vec<&str> = m.values_of(\"cmd\").unwrap().collect();\nassert_eq!(cmds, [\"command\", \"set\"]);\n```\n[`try_get_matches_from_mut`]: crate::Command::try_get_matches_from_mut()","links":{"App::multicall":"0:4244:1577"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3179-0:4706:1568":{"id":"b:2:3179-0:4706:1568","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3149:217","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4706:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3182:127","2:3183:1395"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:349":{"id":"0:349","crate_id":0,"name":null,"span":{"filename":"src/builder/arg.rs","begin":[892,0],"end":[2495,1]},"visibility":{"restricted":{"parent":"0:242:1829","path":"::builder::arg"}},"docs":"# Value Handling","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3816:1564","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["0:351:1846","0:352:2150","0:353:2158","0:355:3035","0:356:3054","0:357:1850","0:358:1849","0:359:1842","0:360:3107","0:361:2157","0:362:1914","0:369:2636","0:376:2155","0:378:3153","0:382:2137","0:383:3193","0:384:3197","0:385:3201","0:386:3212","0:387:3234","0:388:3239","0:389:3246","0:390:3274","0:391:3278","0:392:3306","0:393:61","0:394:2286","0:395:3353","0:396:3354","0:398:3349","0:399:3402","0:400:3406","0:401:3407","0:403:3403"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:3252:209-0:4425:2161":{"id":"a:2:3252:209-0:4425:2161","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3252:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValuesParser","id":"0:4425:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:323:261":{"id":"0:323:261","crate_id":0,"name":"alias","span":{"filename":"src/builder/arg.rs","begin":[243,4],"end":[246,5]},"visibility":"public","docs":"Add an alias, which functions as a hidden long flag.\n\nThis is more efficient, and easier than creating multiple hidden arguments as one only\nneeds to check for the existence of this command, and not all variants.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n            .arg(Arg::new(\"test\")\n            .long(\"test\")\n            .alias(\"alias\")\n            .takes_value(true))\n       .get_matches_from(vec![\n            \"prog\", \"--alias\", \"cool\"\n        ]);\nassert!(m.contains_id(\"test\"));\nassert_eq!(m.value_of(\"test\"), Some(\"cool\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["name",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1323:669":{"id":"0:1323:669","crate_id":0,"name":"from","span":{"filename":"src/builder/value_parser.rs","begin":[289,4],"end":[291,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["p",{"kind":"generic","inner":"P"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4824:7575":{"id":"0:4824:7575","crate_id":0,"name":"DefaultValue","span":{"filename":"src/parser/matches/value_source.rs","begin":[6,4],"end":[6,16]},"visibility":"default","docs":"Value came [`Arg::default_value`][crate::Arg::default_value]","links":{"crate::Arg::default_value":"0:3816:1564"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:23006:11027":{"id":"2:23006:11027","crate_id":2,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdElement","id":"2:23655:11004","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22997:10621","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:879:3193":{"id":"0:879:3193","crate_id":0,"name":"allow_hyphen_values","span":{"filename":"src/builder/command.rs","begin":[2067,4],"end":[2073,5]},"visibility":"public","docs":"Specifies that leading hyphens are allowed in all argument *values* (e.g. `-10`).\n\nOtherwise they will be parsed as another flag or option.  See also\n[`Command::allow_negative_numbers`].\n\n**NOTE:** Use this setting with caution as it silences certain circumstances which would\notherwise be an error (such as accidentally forgetting to specify a value for leading\noption). It is preferred to set this on a per argument basis, via [`Arg::allow_hyphen_values`].\n\n# Examples\n\n```rust\n# use clap::{Arg, Command};\n// Imagine you needed to represent negative numbers as well, such as -10\nlet m = Command::new(\"nums\")\n    .allow_hyphen_values(true)\n    .arg(Arg::new(\"neg\"))\n    .get_matches_from(vec![\n        \"nums\", \"-20\"\n    ]);\n\nassert_eq!(m.value_of(\"neg\"), Some(\"-20\"));\n# ;\n```\n[`Arg::allow_hyphen_values`]: crate::Arg::allow_hyphen_values()","links":{"`Command::allow_negative_numbers`":"0:4244:1577","crate::Arg::allow_hyphen_values()":"0:3816:1564"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6078:1794":{"id":"5:6078:1794","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8352:205"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:8597","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3179-0:4640:127":{"id":"b:2:3179-0:4640:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3149:217","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4640:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3182:127","2:3183:1395"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:9223:7158-0:4415:2173":{"id":"a:2:9223:7158-0:4415:2173","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9223:7158","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9223:7158","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"EnumValueParser","id":"0:4415:2173","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4556":{"id":"0:4556","crate_id":0,"name":null,"span":{"filename":"src/error/context.rs","begin":[2,29],"end":[2,38]},"visibility":{"restricted":{"parent":"0:1839:470","path":"::error::context"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2892:173","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:4515:6699","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:4515:6699","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:4557:593"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:9222:7159-0:4750:7086":{"id":"a:2:9222:7159-0:4750:7086","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9222:7159","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValuesRef","id":"0:4750:7086","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"b:2:3184-0:4403:2176":{"id":"b:2:3184-0:4403:2176","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OsStringValueParser","id":"0:4403:2176","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3187:127","2:3188:1394"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3173-0:4298:1582":{"id":"b:2:3173-0:4298:1582","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:4298:1582","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["2:3175:669"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1469":{"id":"0:1469","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1294,0],"end":[1372,1]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"std::convert::TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"RangedU64ValueParser","id":"0:4444:2163","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["0:1471:907","0:1472:6366"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3179-0:5071:1570":{"id":"b:2:3179-0:5071:1570","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3149:217","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:5071:1570","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3182:127","2:3183:1395"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3415:2368":{"id":"0:3415:2368","crate_id":0,"name":"AllowInvalidUtf8ForExternalSubcommands","span":{"filename":"src/builder/app_settings.rs","begin":[208,4],"end":[208,42]},"visibility":"default","docs":"Deprecated, replaced with [`Command::allow_invalid_utf8_for_external_subcommands`] and [`Command::is_allow_invalid_utf8_for_external_subcommands_set`]","links":{"`Command::allow_invalid_utf8_for_external_subcommands`":"0:4244:1577","`Command::is_allow_invalid_utf8_for_external_subcommands_set`":"0:4244:1577"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:4562:164":{"id":"0:4562:164","crate_id":0,"name":"None","span":{"filename":"src/error/context.rs","begin":[46,4],"end":[46,8]},"visibility":"default","docs":"[`ContextKind`] is self-sufficient, no additional information needed","links":{"`ContextKind`":"0:4515:6699"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:4312:397":{"id":"0:4312:397","crate_id":0,"name":"clone","span":{"filename":"src/builder/possible_value.rs","begin":[29,25],"end":[29,30]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:4298:1582","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4839":{"id":"0:4839","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/value_source.rs","begin":[2,40],"end":[2,42]},"visibility":{"restricted":{"parent":"0:2423:7162","path":"::parser::matches::value_source"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2897:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4823:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1862:470":{"id":"0:1862:470","crate_id":0,"name":"context","span":{"filename":"src/error/mod.rs","begin":[98,4],"end":[100,5]},"visibility":"public","docs":"Additional information to further qualify the error","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8565:157","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"tuple","inner":[{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:4515:6699","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ContextValue","id":"0:4561:6700","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3252:209-0:4456:2171":{"id":"a:2:3252:209-0:4456:2171","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3252:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BoolValueParser","id":"0:4456:2171","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:431:3683":{"id":"0:431:3683","crate_id":0,"name":"default_value_ifs_os","span":{"filename":"src/builder/arg.rs","begin":[3361,4],"end":[3369,5]},"visibility":"public","docs":"Provides multiple conditional default values in the exact same manner as\n[`Arg::default_value_ifs`] only using [`OsStr`]s instead.\n\n[`Arg::default_value_ifs`]: Arg::default_value_ifs()\n[`OsStr`]: std::ffi::OsStr","links":{"std::ffi::OsStr":"1:2923:169","Arg::default_value_ifs()":"0:3816:1564"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["ifs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"tuple","inner":[{"kind":"generic","inner":"T"},{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"1:2923:169","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"1:2923:169","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Key","id":"0:3235:2593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4800:648":{"id":"0:4800:648","crate_id":0,"name":"fmt","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1592,16],"end":[1592,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10215:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10204:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:316:1838":{"id":"0:316:1838","crate_id":0,"name":"id","span":{"filename":"src/builder/arg.rs","begin":[130,4],"end":[135,5]},"visibility":"public","docs":"Set the identifier used for referencing this argument in the clap API.\n\nSee [`Arg::new`] for more details.","links":{"`Arg::new`":"0:3816:1564"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["n",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:850:4513":{"id":"0:850:4513","crate_id":0,"name":"after_long_help","span":{"filename":"src/builder/command.rs","begin":[1549,4],"end":[1552,5]},"visibility":"public","docs":"Free-form help text for after auto-generated long help (`--help`).\n\nThis is often used to describe how to use the arguments, caveats to be noted, or license\nand contact information.\n\nIf [`Command::after_help`] is not specified, this message will be displayed for `-h`.\n\n# Examples\n\n```no_run\n# use clap::Command;\nCommand::new(\"myprog\")\n    .after_long_help(\"Does really amazing things to great people... but be careful with -R, \\\n                     like, for real, be careful with this!\")\n# ;\n```","links":{"`Command::after_help`":"0:4244:1577"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["help",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13396:6595":{"id":"2:13396:6595","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"2:12997:8603","prim@char":"1:15839:8315"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:8597","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:23:25-0:4356:1583":{"id":"b:23:25-0:4356:1583","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.8.1/src/equivalent.rs","begin":[18,0],"end":[18,46]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2897:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2837:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Q"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Equivalent","id":"23:22:8796","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:4356:1583","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["23:28:8790"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"Q"}}},"b:2:2846-0:4706:1568":{"id":"b:2:2846-0:4706:1568","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2840:8484","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4706:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2848:21287"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:807:4724":{"id":"0:807:4724","crate_id":0,"name":"write_help","span":{"filename":"src/builder/command.rs","begin":[796,4],"end":[802,5]},"visibility":"public","docs":"Writes the short help message (`-h`) to a [`io::Write`] object.\n\nSee also [`Command::write_long_help`].\n\n# Examples\n\n```rust\n# use clap::Command;\nuse std::io;\nlet mut cmd = Command::new(\"myprog\");\nlet mut out = io::stdout();\ncmd.write_help(&mut out).expect(\"failed to write to stdout\");\n```\n[`io::Write`]: std::io::Write\n[`-h` (short)]: Arg::help()\n[`--help` (long)]: Arg::long_help()","links":{"`Command::write_long_help`":"0:4244:1577","std::io::Write":"1:4669:1932"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["w",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"W"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:4026:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"W","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"io::Write","id":"1:4669:1932","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3184-0:4425:2161":{"id":"b:2:3184-0:4425:2161","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValuesParser","id":"0:4425:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3187:127","2:3188:1394"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4021:593":{"id":"0:4021:593","crate_id":0,"name":"eq","span":{"filename":"src/builder/arg_settings.rs","begin":[32,16],"end":[32,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ArgSettings","id":"0:3970:1581","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2846-0:3386:1579":{"id":"b:2:2846-0:3386:1579","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2840:8484","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:3386:1579","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2848:21287"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:2165:7332":{"id":"0:2165:7332","crate_id":0,"name":"values_of_lossy","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[451,4],"end":[459,5]},"visibility":"public","docs":"Deprecated, replaced with [`ArgMatches::get_many()`]","links":{"`ArgMatches::get_many()`":"0:4706:1568"},"attrs":["#[track_caller]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7764:223","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Key","id":"0:3235:2593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4634":{"id":"0:4634","crate_id":0,"name":null,"span":{"filename":"src/error/kind.rs","begin":[2,16],"end":[2,20]},"visibility":{"restricted":{"parent":"0:1840:769","path":"::error::kind"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3250:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4587:1584","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:3281:5920-0:4356:1583":{"id":"a:2:3281:5920-0:4356:1583","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3281:5920","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:4356:1583","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:493:3982":{"id":"0:493:3982","crate_id":0,"name":"get_default_values","span":{"filename":"src/builder/arg.rs","begin":[4496,4],"end":[4498,5]},"visibility":"public","docs":"Get the default values specified for this argument, if any\n\n# Examples\n\n```rust\n# use clap::Arg;\nlet arg = Arg::new(\"foo\").default_value(\"default value\");\nassert_eq!(&[\"default value\"], arg.get_default_values());\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"1:2923:169","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2146:7223":{"id":"0:2146:7223","crate_id":0,"name":"get_one","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[117,4],"end":[120,5]},"visibility":"public","docs":"Gets the value of a specific option or positional argument.\n\ni.e. an argument that [takes an additional value][crate::Arg::takes_value] at runtime.\n\nReturns an error if the wrong type was used.\n\nReturns `None` if the option wasn't present.\n\n*NOTE:* This will always return `Some(value)` if [`default_value`] has been set.\n[`ArgMatches::value_source`] can be used to check if a value is present at runtime.\n\n# Panic\n\nIf the argument definition and access mismatch.  To handle this case programmatically, see\n[`ArgMatches::try_get_one`].\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, value_parser};\nlet m = Command::new(\"myapp\")\n    .arg(Arg::new(\"port\")\n        .value_parser(value_parser!(usize))\n        .takes_value(true)\n        .required(true))\n    .get_matches_from(vec![\"myapp\", \"2020\"]);\n\nlet port: usize = *m\n    .get_one(\"port\")\n    .expect(\"`port`is required\");\nassert_eq!(port, 2020);\n```\n[option]: crate::Arg::takes_value()\n[positional]: crate::Arg::index()\n[`default_value`]: crate::Arg::default_value()","links":{"`ArgMatches::try_get_one`":"0:4706:1568","crate::Arg::default_value()":"0:3816:1564","`ArgMatches::value_source`":"0:4706:1568","crate::Arg::takes_value":"0:3816:1564"},"attrs":["#[track_caller]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3967:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3240:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3252:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4518:6769":{"id":"0:4518:6769","crate_id":0,"name":"InvalidArg","span":{"filename":"src/error/context.rs","begin":[8,4],"end":[8,14]},"visibility":"default","docs":"The cause of the error","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:474:3941":{"id":"0:474:3941","crate_id":0,"name":"get_all_short_aliases","span":{"filename":"src/builder/arg.rs","begin":[4321,4],"end":[4327,5]},"visibility":"public","docs":"Get *all* short aliases for this argument, if any, both visible and hidden.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7764:223","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"char"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:443:3762":{"id":"0:443:3762","crate_id":0,"name":"required_if_eq_any","span":{"filename":"src/builder/arg.rs","begin":[3740,4],"end":[3744,5]},"visibility":"public","docs":"Specify this argument is [required] based on multiple conditions.\n\nThe conditions are set up in a `(arg, val)` style tuple. The requirement will only become\nvalid if one of the specified `arg`'s value equals its corresponding `val`.\n\n# Examples\n\n```rust\n# use clap::Arg;\nArg::new(\"config\")\n    .required_if_eq_any(&[\n        (\"extra\", \"val\"),\n        (\"option\", \"spec\")\n    ])\n# ;\n```\n\nSetting `Arg::required_if_eq_any(&[(arg, val)])` makes this arg required if any of the `arg`s\nare used at runtime and it's corresponding value is equal to `val`. If the `arg`'s value is\nanything other than `val`, this argument isn't required.\n\n```rust\n# use clap::{Command, Arg};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .required_if_eq_any(&[\n            (\"extra\", \"val\"),\n            (\"option\", \"spec\")\n        ])\n        .takes_value(true)\n        .long(\"config\"))\n    .arg(Arg::new(\"extra\")\n        .takes_value(true)\n        .long(\"extra\"))\n    .arg(Arg::new(\"option\")\n        .takes_value(true)\n        .long(\"option\"))\n    .try_get_matches_from(vec![\n        \"prog\", \"--option\", \"other\"\n    ]);\n\nassert!(res.is_ok()); // We didn't use --option=spec, or --extra=val so \"cfg\" isn't required\n```\n\nSetting `Arg::required_if_eq_any(&[(arg, val)])` and having any of the `arg`s used with its\nvalue of `val` but *not* using this arg is an error.\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .required_if_eq_any(&[\n            (\"extra\", \"val\"),\n            (\"option\", \"spec\")\n        ])\n        .takes_value(true)\n        .long(\"config\"))\n    .arg(Arg::new(\"extra\")\n        .takes_value(true)\n        .long(\"extra\"))\n    .arg(Arg::new(\"option\")\n        .takes_value(true)\n        .long(\"option\"))\n    .try_get_matches_from(vec![\n        \"prog\", \"--option\", \"spec\"\n    ]);\n\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind(), ErrorKind::MissingRequiredArgument);\n```\n[`Arg::requires(name)`]: Arg::requires()\n[Conflicting]: Arg::conflicts_with()\n[required]: Arg::required()","links":{"Arg::required()":"0:3816:1564"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["ifs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"tuple","inner":[{"kind":"generic","inner":"T"},{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Key","id":"0:3235:2593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:985:5624":{"id":"0:985:5624","crate_id":0,"name":"get_arg_conflicts_with","span":{"filename":"src/builder/command.rs","begin":[3554,4],"end":[3575,5]},"visibility":"public","docs":"Get a list of all arguments the given argument conflicts with.\n\nIf the provided argument is declared as global, the conflicts will be determined\nbased on the propagation rules of global arguments.\n\n### Panics\n\nIf the given arg contains a conflict with an argument that is unknown to\nthis `Command`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["arg",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3816:1564","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7764:223","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3816:1564","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2576:127":{"id":"1:2576:127","crate_id":1,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2577:6713","1:2579:6717","1:2580:6747","1:2581:9785","1:2582:9786"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10255:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10262:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:2:3173-0:3386:1579":{"id":"b:2:3173-0:3386:1579","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:3386:1579","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3175:669"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:174:1604":{"id":"0:174:1604","crate_id":0,"name":"ArgEnum","span":{"filename":"src/derive.rs","begin":[487,0],"end":[508,1]},"visibility":"public","docs":"Parse arguments into enums.\n\nWhen deriving [`Parser`], a field whose type implements `ValueEnum` can have the attribute\n`#[clap(value_enum)]` which will\n- Call [`Arg::possible_values`][crate::Arg::possible_values]\n- Allowing using the `#[clap(default_value_t)]` attribute without implementing `Display`.\n\nSee the\n[derive reference](https://github.com/clap-rs/clap/blob/v3.2.12/examples/derive_ref/README.md)\nfor attributes and best practices.\n\n**NOTE:** Deriving requires the `derive` feature flag\n\n# Example\n\n ```ignore\n#[derive(clap::Parser)]\nstruct Args {\n    #[clap(value_enum)]\n    level: Level,\n}\n\n#[derive(clap::ValueEnum, Clone)]\nenum Level {\n    Debug,\n    Info,\n    Warning,\n    Error,\n}\n```","links":{"crate::Arg::possible_values":"0:3816:1564","`Parser`":"0:127:1574"},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:175:2133","0:177:1757","0:180:2139"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:415:3569":{"id":"0:415:3569","crate_id":0,"name":"hide_possible_values","span":{"filename":"src/builder/arg.rs","begin":[2803,4],"end":[2809,5]},"visibility":"public","docs":"Do not display the [possible values][crate::builder::ValueParser::possible_values] in the help message.\n\nThis is useful for args with many values, or ones which are explained elsewhere in the\nhelp text.\n\n**NOTE:** Setting this requires [`Arg::takes_value`]\n\nTo set this for all arguments, see\n[`Command::hide_possible_values`][crate::Command::hide_possible_values].\n\n# Examples\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"mode\")\n        .long(\"mode\")\n        .value_parser([\"fast\", \"slow\"])\n        .takes_value(true)\n        .hide_possible_values(true));\n```\nIf we were to run the above program with `--help` the `[values: fast, slow]` portion of\nthe help text would be omitted.","links":{"crate::Command::hide_possible_values":"0:4244:1577","crate::builder::ValueParser::possible_values":"0:1294:2166","`Arg::takes_value`":"0:3816:1564"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13440:67031":{"id":"2:13440:67031","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"str::matches":"1:15845:8320","prim@char":"1:15839:8315","`DoubleEndedIterator`":"2:8411:120","self::pattern":"2:12997:8603"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:49542:8625","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:8597","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:8597","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:8598","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8375:755":{"id":"2:8375:755","crate_id":2,"name":"into_iter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"I"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:31819:68545":{"id":"2:31819:68545","crate_id":2,"name":"to_be_bytes","span":null,"visibility":"public","docs":"Return the memory representation of this integer as a byte array in\nbig-endian (network) byte order.\n\n\n\n# Examples\n\n```\nlet bytes = 0x1234567890123456u64.to_be_bytes();\nassert_eq!(bytes, [0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]);\n```","links":{},"attrs":["#[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]","#[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"array","inner":{"type":{"kind":"primitive","inner":"u8"},"len":"8"}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2263":{"id":"0:2263","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1426,0],"end":[1434,1]},"visibility":{"restricted":{"parent":"0:2077:7161","path":"::parser::matches::arg_matches"}},"docs":"Creates an empty iterator.","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Default","id":"2:3218:115","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValuesRef","id":"0:4750:7086","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["0:2266:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3173-0:4515:6699":{"id":"b:2:3173-0:4515:6699","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:4515:6699","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3175:669"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:9222:7159-0:4403:2176":{"id":"a:2:9222:7159-0:4403:2176","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9222:7159","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OsStringValueParser","id":"0:4403:2176","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:3240:200-0:4444:2163":{"id":"a:2:3240:200-0:4444:2163","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3240:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3240:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"RangedU64ValueParser","id":"0:4444:2163","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:3169-0:4244:1577":{"id":"b:2:3169-0:4244:1577","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:4244:1577","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["2:3172:2288"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4834":{"id":"0:4834","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/value_source.rs","begin":[2,23],"end":[2,27]},"visibility":{"restricted":{"parent":"0:2423:7162","path":"::parser::matches::value_source"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3250:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4823:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:3252:209-0:4432:2162":{"id":"a:2:3252:209-0:4432:2162","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3252:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:4432:2162","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3433:2409":{"id":"0:3433:2409","crate_id":0,"name":"DisableColoredHelp","span":{"filename":"src/builder/app_settings.rs","begin":[310,4],"end":[310,22]},"visibility":"default","docs":"Deprecated, replaced with [`Command::disable_colored_help`] and\n[`Command::is_disable_colored_help_set`]","links":{"`Command::disable_colored_help`":"0:4244:1577","`Command::is_disable_colored_help_set`":"0:4244:1577"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:1217:1852":{"id":"0:1217:1852","crate_id":0,"name":"help","span":{"filename":"src/builder/possible_value.rs","begin":[77,4],"end":[80,5]},"visibility":"public","docs":"Sets the help description of the value.\n\nThis is typically displayed in completions (where supported) and should be a short, one-line\ndescription.\n\n# Examples\n\n```rust\n# use clap::PossibleValue;\nPossibleValue::new(\"slow\")\n    .help(\"not fast\")\n# ;\n```","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["help",{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3252:209-0:4474:2175":{"id":"a:2:3252:209-0:4474:2175","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3252:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"NonEmptyStringValueParser","id":"0:4474:2175","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:3250:106":{"id":"2:3250:106","crate_id":2,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:813:4763":{"id":"0:813:4763","crate_id":0,"name":"render_usage","span":{"filename":"src/builder/command.rs","begin":[886,4],"end":[892,5]},"visibility":"public","docs":"Usage statement\n\n### Examples\n\n```rust\n# use clap::Command;\nuse std::io;\nlet mut cmd = Command::new(\"myprog\");\nprintln!(\"{}\", cmd.render_usage());\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4723":{"id":"0:4723","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[67,43],"end":[67,45]},"visibility":{"restricted":{"parent":"0:2077:7161","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2897:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4706:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:3240:200-0:4686:7087":{"id":"a:2:3240:200-0:4686:7087","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3240:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4686:7087","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:3245:2000":{"id":"2:3245:2000","crate_id":2,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3339:8453":{"id":"2:3339:8453","crate_id":2,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3341:255"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:8371-0:4801:1585":{"id":"b:2:8371-0:4801:1585","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8565:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8367:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:4801:1585","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:8373:2018","2:8374:7522","2:8375:755"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"0:1380:6312":{"id":"0:1380:6312","crate_id":0,"name":"Value","span":{"filename":"src/builder/value_parser.rs","begin":[686,4],"end":[686,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"2:31831:68551":{"id":"2:31831:68551","crate_id":2,"name":"min_value","span":null,"visibility":"public","docs":"New code should prefer to use\n[`u64::MIN`] instead.\n\nReturns the smallest value that can be represented by this integer type.","links":{"`u64::MIN`":"1:15859:8332"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_promotable]","#[rustc_const_stable(feature = \"const_max_value\", since = \"1.32.0\")]","#[deprecated(since = \"TBD\", note =\n\"replaced by the `MIN` associated constant on this type\")]"],"deprecation":{"since":"TBD","note":"replaced by the `MIN` associated constant on this type"},"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2846-0:4791:1586":{"id":"b:2:2846-0:4791:1586","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2840:8484","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OsValues","id":"0:4791:1586","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:2848:21287"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:211:2116":{"id":"0:211:2116","crate_id":0,"name":"augment_subcommands_for_update","span":{"filename":"src/derive.rs","begin":[574,4],"end":[576,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["cmd",{"kind":"resolved_path","inner":{"name":"Command","id":"0:755:1563","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Command","id":"0:755:1563","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3742:8477":{"id":"2:3742:8477","crate_id":2,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13007:8597":{"id":"2:13007:8597","crate_id":2,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13009:8599","2:13010:21353","2:13011:21354","2:13012:21355","2:13013:21356","2:13014:21357","2:13015:21358"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1379":{"id":"0:1379","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[685,0],"end":[711,1]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["possible_values","parse"],"trait":{"kind":"resolved_path","inner":{"name":"TypedValueParser","id":"0:1362:2165","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"StringValueParser","id":"0:4397:2164","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:1380:6312","0:1381:6352","0:1382:2002"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4837:593":{"id":"0:4837:593","crate_id":0,"name":"eq","span":{"filename":"src/parser/matches/value_source.rs","begin":[2,29],"end":[2,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4823:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:787-0:4686:7087":{"id":"b:5:787-0:4686:7087","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:783:211","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4686:7087","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:789:4115","5:790:4707","5:791:9628"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3169-0:3386:1579":{"id":"b:2:3169-0:3386:1579","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:3386:1579","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3172:2288"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:177:1757":{"id":"0:177:1757","crate_id":0,"name":"from_str","span":{"filename":"src/derive.rs","begin":[492,4],"end":[502,5]},"visibility":"default","docs":"Parse an argument into `Self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["input",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["ignore_case",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:341:2894":{"id":"0:341:2894","crate_id":0,"name":"global","span":{"filename":"src/builder/arg.rs","begin":[780,4],"end":[786,5]},"visibility":"public","docs":"Specifies that an argument can be matched to all child [`Subcommand`]s.\n\n**NOTE:** Global arguments *only* propagate down, **not** up (to parent commands), however\ntheir values once a user uses them will be propagated back up to parents. In effect, this\nmeans one should *define* all global arguments at the top level, however it doesn't matter\nwhere the user *uses* the global argument.\n\n# Examples\n\nAssume an application with two subcommands, and you'd like to define a\n`--verbose` flag that can be called on any of the subcommands and parent, but you don't\nwant to clutter the source with three duplicate [`Arg`] definitions.\n\n```rust\n# use clap::{Command, Arg, ArgAction};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"verb\")\n        .long(\"verbose\")\n        .short('v')\n        .action(ArgAction::SetTrue)\n        .global(true))\n    .subcommand(Command::new(\"test\"))\n    .subcommand(Command::new(\"do-stuff\"))\n    .get_matches_from(vec![\n        \"prog\", \"do-stuff\", \"--verbose\"\n    ]);\n\nassert_eq!(m.subcommand_name(), Some(\"do-stuff\"));\nlet sub_m = m.subcommand_matches(\"do-stuff\").unwrap();\nassert_eq!(*sub_m.get_one::<bool>(\"verb\").expect(\"defaulted by clap\"), true);\n```\n\n[`Subcommand`]: crate::Subcommand","links":{"crate::Subcommand":"0:170:1575","`Arg`":"0:3816:1564"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4452:397":{"id":"0:4452:397","crate_id":0,"name":"clone","span":{"filename":"src/builder/value_parser.rs","begin":[1288,15],"end":[1288,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"RangedU64ValueParser","id":"0:4444:2163","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13369:6000":{"id":"2:13369:6000","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12468:8608"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2845:2590":{"id":"2:2845:2590","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1494:59":{"id":"0:1494:59","crate_id":0,"name":"default","span":{"filename":"src/builder/value_parser.rs","begin":[1443,4],"end":[1445,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3402:8465":{"id":"2:3402:8465","crate_id":2,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3404:346"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:827:4850":{"id":"0:827:4850","crate_id":0,"name":"disable_help_subcommand","span":{"filename":"src/builder/command.rs","begin":[1202,4],"end":[1208,5]},"visibility":"public","docs":"Disables the `help` [`subcommand`].\n\n# Examples\n\n```rust\n# use clap::{Command, ErrorKind};\nlet res = Command::new(\"myprog\")\n    .disable_help_subcommand(true)\n    // Normally, creating a subcommand causes a `help` subcommand to automatically\n    // be generated as well\n    .subcommand(Command::new(\"test\"))\n    .try_get_matches_from(vec![\n        \"myprog\", \"help\"\n    ]);\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind(), ErrorKind::UnknownArgument);\n```\n\n[`subcommand`]: crate::Command::subcommand()","links":{"crate::Command::subcommand()":"0:4244:1577"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2275":{"id":"0:2275","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1478,0],"end":[1482,1]},"visibility":{"restricted":{"parent":"0:2077:7161","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["rfold","advance_back_by","try_rfold","rfind","nth_back"],"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedIterator","id":"2:8411:120","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"RawValues","id":"0:4763:7085","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["0:2277:7523"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:500:4000":{"id":"0:500:4000","crate_id":0,"name":"is_forbid_empty_values_set","span":{"filename":"src/builder/arg.rs","begin":[4550,4],"end":[4552,5]},"visibility":"public","docs":"Deprecated, replaced with [`Arg::get_value_parser()`]","links":{"`Arg::get_value_parser()`":"0:3816:1564"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4013:3198":{"id":"0:4013:3198","crate_id":0,"name":"AllowInvalidUtf8","span":{"filename":"src/builder/arg_settings.rs","begin":[258,4],"end":[258,20]},"visibility":"default","docs":"Deprecated, replaced with [`Arg::allow_invalid_utf8`] and [`Arg::is_allow_invalid_utf8_set`]","links":{"`Arg::allow_invalid_utf8`":"0:3816:1564","`Arg::is_allow_invalid_utf8_set`":"0:3816:1564"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"1:6847:10629":{"id":"1:6847:10629","crate_id":1,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6848:21420"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:2161:7309":{"id":"0:2161:7309","crate_id":0,"name":"value_of_os","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[376,4],"end":[381,5]},"visibility":"public","docs":"Deprecated, replaced with [`ArgMatches::get_one()`]","links":{"`ArgMatches::get_one()`":"0:4706:1568"},"attrs":["#[track_caller]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"1:2923:169","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Key","id":"0:3235:2593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13434:67030":{"id":"2:13434:67030","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:8597","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:8597","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:8598","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3409:2358":{"id":"0:3409:2358","crate_id":0,"name":"SubcommandRequiredElseHelp","span":{"filename":"src/builder/app_settings.rs","begin":[177,4],"end":[177,30]},"visibility":"default","docs":"Deprecated, replaced with [`Command::subcommand_required`] combined with\n[`Command::arg_required_else_help`].","links":{"`Command::subcommand_required`":"0:4244:1577","`Command::arg_required_else_help`":"0:4244:1577"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:2862:104":{"id":"2:2862:104","crate_id":2,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2863:397","2:2864:399"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:312":{"id":"0:312","crate_id":0,"name":null,"span":{"filename":"src/builder/arg.rs","begin":[104,0],"end":[889,1]},"visibility":{"restricted":{"parent":"0:242:1829","path":"::builder::arg"}},"docs":"# Basic API","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3816:1564","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["0:314:907","0:316:1838","0:318:886","0:320:1839","0:321:1830","0:323:261","0:325:2709","0:326:2625","0:328:2626","0:329:2737","0:331:2742","0:332:2749","0:334:2754","0:335:740","0:336:2826","0:337:1845","0:338:2620","0:340:2874","0:341:2894","0:342:1851","0:343:2901","0:344:1927","0:345:1907","0:347:2829"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1569:2158":{"id":"0:1569:2158","crate_id":0,"name":"value_parser","span":{"filename":"src/builder/value_parser.rs","begin":[1874,4],"end":[1878,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"qualified_path","inner":{"name":"Parser","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:1543:2167","args":null,"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:376:2155":{"id":"0:376:2155","crate_id":0,"name":"possible_value","span":{"filename":"src/builder/arg.rs","begin":[1587,4],"end":[1593,5]},"visibility":"public","docs":"Deprecated, replaced with [`Arg::value_parser(PossibleValuesParser::new(...))`]","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["value",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:4298:1582","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3281:5920-0:4750:7086":{"id":"a:2:3281:5920-0:4750:7086","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3281:5920","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValuesRef","id":"0:4750:7086","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:878:5130":{"id":"0:878:5130","crate_id":0,"name":"arg_required_else_help","span":{"filename":"src/builder/command.rs","begin":[2033,4],"end":[2039,5]},"visibility":"public","docs":"Exit gracefully if no arguments are present (e.g. `$ myprog`).\n\n**NOTE:** [`subcommands`] count as arguments\n\n# Examples\n\n```rust\n# use clap::{Command};\nCommand::new(\"myprog\")\n    .arg_required_else_help(true);\n```\n\n[`subcommands`]: crate::Command::subcommand()\n[`Arg::default_value`]: crate::Arg::default_value()","links":{"crate::Command::subcommand()":"0:4244:1577"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3169-0:3903:1565":{"id":"b:2:3169-0:3903:1565","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3903:1565","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["2:3172:2288"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4428":{"id":"0:4428","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[981,9],"end":[981,14]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValuesParser","id":"0:4425:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:4429:397"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1406":{"id":"0:1406","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[881,0],"end":[938,1]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"crate::ValueEnum","id":"0:174:1576","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3240:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3252:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["possible_values","parse"],"trait":{"kind":"resolved_path","inner":{"name":"TypedValueParser","id":"0:1362:2165","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"EnumValueParser","id":"0:4415:2173","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}},"items":["0:1408:6312","0:1409:6352","0:1420:3153"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:787:1834":{"id":"0:787:1834","crate_id":0,"name":"debug_assert","span":{"filename":"src/builder/command.rs","begin":[477,4],"end":[479,5]},"visibility":"public","docs":"Catch problems earlier in the development cycle.\n\nMost error states are handled as asserts under the assumption they are programming mistake\nand not something to handle at runtime.  Rather than relying on tests (manual or automated)\nthat exhaustively test your CLI to ensure the asserts are evaluated, this will run those\nasserts in a way convenient for running as a test.\n\n**Note::** This will not help with asserts in [`ArgMatches`], those will need exhaustive\ntesting of your CLI.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ArgAction};\nfn cmd() -> Command<'static> {\n    Command::new(\"foo\")\n        .arg(\n            Arg::new(\"bar\").short('b').action(ArgAction::SetTrue)\n        )\n}\n\n#[test]\nfn verify_app() {\n    cmd().debug_assert();\n}\n\nfn main() {\n    let m = cmd().get_matches_from(vec![\"foo\", \"-b\"]);\n    println!(\"{}\", *m.get_one::<bool>(\"bar\").expect(\"defaulted by clap\"));\n}\n```","links":{"`ArgMatches`":"0:4706:1568"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:449:3789":{"id":"0:449:3789","crate_id":0,"name":"requires_if","span":{"filename":"src/builder/arg.rs","begin":[3880,4],"end":[3884,5]},"visibility":"public","docs":"Require another argument if this arg was present at runtime and its value equals to `val`.\n\nThis method takes `value, another_arg` pair. At runtime, clap will check\nif this arg (`self`) is present and its value equals to `val`.\nIf it does, `another_arg` will be marked as required.\n\n# Examples\n\n```rust\n# use clap::Arg;\nArg::new(\"config\")\n    .requires_if(\"val\", \"arg\")\n# ;\n```\n\nSetting `Arg::requires_if(val, arg)` requires that the `arg` be used at runtime if the\ndefining argument's value is equal to `val`. If the defining argument is anything other than\n`val`, the other argument isn't required.\n\n```rust\n# use clap::{Command, Arg};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .takes_value(true)\n        .requires_if(\"my.cfg\", \"other\")\n        .long(\"config\"))\n    .arg(Arg::new(\"other\"))\n    .try_get_matches_from(vec![\n        \"prog\", \"--config\", \"some.cfg\"\n    ]);\n\nassert!(res.is_ok()); // We didn't use --config=my.cfg, so other wasn't required\n```\n\nSetting `Arg::requires_if(val, arg)` and setting the value to `val` but *not* supplying\n`arg` is an error.\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .takes_value(true)\n        .requires_if(\"my.cfg\", \"input\")\n        .long(\"config\"))\n    .arg(Arg::new(\"input\"))\n    .try_get_matches_from(vec![\n        \"prog\", \"--config\", \"my.cfg\"\n    ]);\n\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind(), ErrorKind::MissingRequiredArgument);\n```\n[`Arg::requires(name)`]: Arg::requires()\n[Conflicting]: Arg::conflicts_with()\n[override]: Arg::overrides_with()","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["val",{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["arg_id",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Key","id":"0:3235:2593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4309:59":{"id":"0:4309:59","crate_id":0,"name":"default","span":{"filename":"src/builder/possible_value.rs","begin":[29,16],"end":[29,23]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:4298:1582","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:870:4778":{"id":"0:870:4778","crate_id":0,"name":"global_setting","span":{"filename":"src/builder/command.rs","begin":[1831,4],"end":[1835,5]},"visibility":"public","docs":"Apply a setting for the current command and all subcommands.\n\nSee [`Command::setting`] to apply a setting only to this command.\n\nSee [`AppSettings`] for a full list of possibilities and examples.\n\n# Examples\n\n```no_run\n# use clap::{Command, AppSettings};\nCommand::new(\"myprog\")\n    .global_setting(AppSettings::AllowNegativeNumbers)\n# ;\n```","links":{"`Command::setting`":"0:4244:1577","`AppSettings`":"0:3386:1579"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["setting",{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:3386:1579","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2846-0:4403:2176":{"id":"b:2:2846-0:4403:2176","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2840:8484","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OsStringValueParser","id":"0:4403:2176","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2848:21287"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3169-0:4444:2163":{"id":"b:2:3169-0:4444:2163","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"RangedU64ValueParser","id":"0:4444:2163","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["2:3172:2288"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:898:5295":{"id":"0:898:5295","crate_id":0,"name":"visible_short_flag_alias","span":{"filename":"src/builder/command.rs","begin":[2545,4],"end":[2549,5]},"visibility":"public","docs":"Add an alias, which functions as  \"visible\" short flag subcommand\n\nThis will automatically dispatch as if this subcommand was used. This is more efficient,\nand easier than creating multiple hidden subcommands as one only needs to check for the\nexistence of this command, and not all variants.\n\nSee also [`Command::short_flag_alias`].\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg, };\nlet m = Command::new(\"myprog\")\n            .subcommand(Command::new(\"test\").short_flag('t')\n                .visible_short_flag_alias('d'))\n            .get_matches_from(vec![\"myprog\", \"-d\"]);\nassert_eq!(m.subcommand_name(), Some(\"test\"));\n```\n[`App::short_flag_alias`]: Command::short_flag_alias()","links":{"`Command::short_flag_alias`":"0:4244:1577"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["name",{"kind":"primitive","inner":"char"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5080":{"id":"0:5080","crate_id":0,"name":null,"span":{"filename":"src/util/color.rs","begin":[2,16],"end":[2,20]},"visibility":{"restricted":{"parent":"0:3332:1529","path":"::util::color"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3250:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:5071:1570","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1465:669":{"id":"0:1465:669","crate_id":0,"name":"from","span":{"filename":"src/builder/value_parser.rs","begin":[1238,4],"end":[1243,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["range",{"kind":"generic","inner":"B"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4575:1518":{"id":"0:4575:1518","crate_id":0,"name":"0","span":{"filename":"src/error/context.rs","begin":[54,11],"end":[54,16]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"primitive","inner":"isize"}},"b:2:3184-0:4750:7086":{"id":"b:2:3184-0:4750:7086","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValuesRef","id":"0:4750:7086","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["2:3187:127","2:3188:1394"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:777:1908":{"id":"0:777:1908","crate_id":0,"name":"group","span":{"filename":"src/builder/command.rs","begin":[354,4],"end":[357,5]},"visibility":"public","docs":"Adds an [`ArgGroup`] to the application.\n\n[`ArgGroup`]s are a family of related arguments.\nBy placing them in a logical group, you can build easier requirement and exclusion rules.\n\nExample use cases:\n- Make an entire [`ArgGroup`] required, meaning that one (and *only*\n  one) argument from that group must be present at runtime.\n- Name an [`ArgGroup`] as a conflict to another argument.\n  Meaning any of the arguments that belong to that group will cause a failure if present with\n  the conflicting argument.\n- Ensure exclusion between arguments.\n- Extract a value from a group instead of determining exactly which argument was used.\n\n# Examples\n\nThe following example demonstrates using an [`ArgGroup`] to ensure that one, and only one,\nof the arguments from the specified group is present at runtime.\n\n```no_run\n# use clap::{Command, arg, ArgGroup};\nCommand::new(\"cmd\")\n    .arg(arg!(\"--set-ver [ver] 'set the version manually'\"))\n    .arg(arg!(\"--major 'auto increase major'\"))\n    .arg(arg!(\"--minor 'auto increase minor'\"))\n    .arg(arg!(\"--patch 'auto increase patch'\"))\n    .group(ArgGroup::new(\"vers\")\n         .args(&[\"set-ver\", \"major\", \"minor\",\"patch\"])\n         .required(true))\n# ;\n```","links":{"`ArgGroup`":"0:3903:1565"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["group",{"kind":"generic","inner":"G"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3903:1565","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3387:2299":{"id":"0:3387:2299","crate_id":0,"name":"IgnoreErrors","span":{"filename":"src/builder/app_settings.rs","begin":[40,4],"end":[40,16]},"visibility":"default","docs":"Deprecated, replaced with [`Command::ignore_errors`]","links":{"`Command::ignore_errors`":"0:4244:1577"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:427:3661":{"id":"0:427:3661","crate_id":0,"name":"default_value_if_os","span":{"filename":"src/builder/arg.rs","begin":[3256,4],"end":[3265,5]},"visibility":"public","docs":"Provides a conditional default value in the exact same manner as [`Arg::default_value_if`]\nonly using [`OsStr`]s instead.\n\n[`Arg::default_value_if`]: Arg::default_value_if()\n[`OsStr`]: std::ffi::OsStr","links":{"Arg::default_value_if()":"0:3816:1564","std::ffi::OsStr":"1:2923:169"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["arg_id",{"kind":"generic","inner":"T"}],["val",{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"1:2923:169","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["default",{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"1:2923:169","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Key","id":"0:3235:2593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:787-0:4823:1587":{"id":"b:5:787-0:4823:1587","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:783:211","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4823:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:789:4115","5:790:4707","5:791:9628"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3179-0:4415:2173":{"id":"b:2:3179-0:4415:2173","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3149:217","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"EnumValueParser","id":"0:4415:2173","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}},"items":["2:3182:127","2:3183:1395"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:173:2118":{"id":"0:173:2118","crate_id":0,"name":"has_subcommand","span":{"filename":"src/derive.rs","begin":[453,4],"end":[453,42]},"visibility":"default","docs":"Test whether `Self` can parse a specific subcommand","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:2:3173-0:3903:1565":{"id":"b:2:3173-0:3903:1565","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3903:1565","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["2:3175:669"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4477:397":{"id":"0:4477:397","crate_id":0,"name":"clone","span":{"filename":"src/builder/value_parser.rs","begin":[1736,15],"end":[1736,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"NonEmptyStringValueParser","id":"0:4474:2175","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:999:5647":{"id":"0:999:5647","crate_id":0,"name":"is_disable_help_flag_set","span":{"filename":"src/builder/command.rs","begin":[3662,4],"end":[3664,5]},"visibility":"public","docs":"Report whether [`Command::disable_help_flag`] is set","links":{"`Command::disable_help_flag`":"0:4244:1577"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:31803:68530":{"id":"2:31803:68530","crate_id":2,"name":"overflowing_neg","span":null,"visibility":"public","docs":"Negates self in an overflowing fashion.\n\nReturns `!self + 1` using wrapping operations to return the value\nthat represents the negation of this unsigned value. Note that for\npositive unsigned values overflow always occurs, but negating 0 does\nnot overflow.\n\n# Examples\n\nBasic usage\n\n```\nassert_eq!(0u64.overflowing_neg(), (0, false));\nassert_eq!(2u64.overflowing_neg(), (-2i32 as u64, true));\n```","links":{},"attrs":["#[stable(feature = \"wrapping\", since = \"1.7.0\")]","#[rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"u64"},{"kind":"primitive","inner":"bool"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9222:7159-0:4587:1584":{"id":"a:2:9222:7159-0:4587:1584","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9222:7159","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4587:1584","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:961:5591":{"id":"0:961:5591","crate_id":0,"name":"has_subcommands","span":{"filename":"src/builder/command.rs","begin":[3445,4],"end":[3447,5]},"visibility":"public","docs":"Returns `true` if this `Command` has subcommands.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2280":{"id":"0:2280","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1487,0],"end":[1495,1]},"visibility":{"restricted":{"parent":"0:2077:7161","path":"::parser::matches::arg_matches"}},"docs":"Creates an empty iterator.","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Default","id":"2:3218:115","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"RawValues","id":"0:4763:7085","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"items":["0:2281:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1425":{"id":"0:1425","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[984,0],"end":[989,1]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"PossibleValuesParser","id":"0:4425:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:1426:907"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:568:404":{"id":"0:568:404","crate_id":0,"name":"cmp","span":{"filename":"src/builder/arg.rs","begin":[5087,4],"end":[5089,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3816:1564","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Ordering","id":"2:37488:168","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2846-0:4561:6700":{"id":"b:2:2846-0:4561:6700","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2840:8484","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ContextValue","id":"0:4561:6700","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2848:21287"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3917:648":{"id":"0:3917:648","crate_id":0,"name":"fmt","span":{"filename":"src/builder/arg_group.rs","begin":[80,18],"end":[80,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10215:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10204:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3179-0:3347:1562":{"id":"b:2:3179-0:3347:1562","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3149:217","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgAction","id":"0:3347:1562","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3182:127","2:3183:1395"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:451:3804":{"id":"0:451:3804","crate_id":0,"name":"requires_ifs","span":{"filename":"src/builder/arg.rs","begin":[3931,4],"end":[3937,5]},"visibility":"public","docs":"Allows multiple conditional requirements.\n\nThe requirement will only become valid if this arg's value equals `val`.\n\n# Examples\n\n```rust\n# use clap::Arg;\nArg::new(\"config\")\n    .requires_ifs(&[\n        (\"val\", \"arg\"),\n        (\"other_val\", \"arg2\"),\n    ])\n# ;\n```\n\nSetting `Arg::requires_ifs(&[\"val\", \"arg\"])` requires that the `arg` be used at runtime if the\ndefining argument's value is equal to `val`. If the defining argument's value is anything other\nthan `val`, `arg` isn't required.\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .takes_value(true)\n        .requires_ifs(&[\n            (\"special.conf\", \"opt\"),\n            (\"other.conf\", \"other\"),\n        ])\n        .long(\"config\"))\n    .arg(Arg::new(\"opt\")\n        .long(\"option\")\n        .takes_value(true))\n    .arg(Arg::new(\"other\"))\n    .try_get_matches_from(vec![\n        \"prog\", \"--config\", \"special.conf\"\n    ]);\n\nassert!(res.is_err()); // We  used --config=special.conf so --option <val> is required\nassert_eq!(res.unwrap_err().kind(), ErrorKind::MissingRequiredArgument);\n```\n[`Arg::requires(name)`]: Arg::requires()\n[Conflicting]: Arg::conflicts_with()\n[override]: Arg::overrides_with()","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["ifs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"generic","inner":"T"}]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Key","id":"0:3235:2593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:352:2150":{"id":"0:352:2150","crate_id":0,"name":"action","span":{"filename":"src/builder/arg.rs","begin":[958,4],"end":[961,5]},"visibility":"public","docs":"Specify the behavior when parsing an argument\n\n# Examples\n\n```rust\n# use clap::Command;\n# use clap::Arg;\nlet cmd = Command::new(\"mycmd\")\n    .arg(\n        Arg::new(\"flag\")\n            .long(\"flag\")\n            .action(clap::ArgAction::Set)\n    );\n\nlet matches = cmd.try_get_matches_from([\"mycmd\", \"--flag\", \"value\"]).unwrap();\nassert!(matches.contains_id(\"flag\"));\nassert_eq!(matches.occurrences_of(\"flag\"), 0);\nassert_eq!(\n    matches.get_many::<String>(\"flag\").unwrap_or_default().map(|v| v.as_str()).collect::<Vec<_>>(),\n    vec![\"value\"]\n);\n```","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["action",{"kind":"resolved_path","inner":{"name":"ArgAction","id":"0:3347:1562","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:514:4032":{"id":"0:514:4032","crate_id":0,"name":"is_use_value_delimiter_set","span":{"filename":"src/builder/arg.rs","begin":[4644,4],"end":[4646,5]},"visibility":"public","docs":"Report whether [`Arg::use_value_delimiter`] is set","links":{"`Arg::use_value_delimiter`":"0:3816:1564"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1276":{"id":"0:1276","crate_id":0,"name":null,"span":{"filename":"src/builder/value_hint.rs","begin":[69,0],"end":[73,1]},"visibility":{"restricted":{"parent":"0:1272:2157","path":"::builder::value_hint"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Default","id":"2:3218:115","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:4356:1583","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:1277:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:9222:7159-0:4415:2173":{"id":"a:2:9222:7159-0:4415:2173","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9222:7159","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9222:7159","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"EnumValueParser","id":"0:4415:2173","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:168:2099":{"id":"0:168:2099","crate_id":0,"name":"augment_args","span":{"filename":"src/derive.rs","begin":[401,4],"end":[401,53]},"visibility":"default","docs":"Append to [`Command`] so it can instantiate `Self`.\n\nSee also [`CommandFactory`].","links":{"`Command`":"0:755:1563","`CommandFactory`":"0:153:1572"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["cmd",{"kind":"resolved_path","inner":{"name":"Command","id":"0:755:1563","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Command","id":"0:755:1563","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:2:3173-0:1294:2166":{"id":"b:2:3173-0:1294:2166","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1294:2166","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3175:669"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:920:5544":{"id":"0:920:5544","crate_id":0,"name":"get_display_name","span":{"filename":"src/builder/command.rs","begin":[3271,4],"end":[3273,5]},"visibility":"public","docs":"Get the name of the binary.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:787-0:4432:2162":{"id":"b:5:787-0:4432:2162","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:783:211","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:4432:2162","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["5:789:4115","5:790:4707","5:791:9628"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:844:1814":{"id":"0:844:1814","crate_id":0,"name":"about","span":{"filename":"src/builder/command.rs","begin":[1480,4],"end":[1483,5]},"visibility":"public","docs":"Sets the program's description for the short help (`-h`).\n\nIf [`Command::long_about`] is not specified, this message will be displayed for `--help`.\n\n**NOTE:** Only `Command::about` (short format) is used in completion\nscript generation in order to be concise.\n\nSee also [`crate_description!`](crate::crate_description!).\n\n# Examples\n\n```no_run\n# use clap::Command;\nCommand::new(\"myprog\")\n    .about(\"Does really amazing things for great people\")\n# ;\n```","links":{"`Command::long_about`":"0:4244:1577"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["about",{"kind":"generic","inner":"O"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:411:2643":{"id":"0:411:2643","crate_id":0,"name":"help_heading","span":{"filename":"src/builder/arg.rs","begin":[2675,4],"end":[2681,5]},"visibility":"public","docs":"Override the [current] help section.\n\n[current]: crate::Command::help_heading","links":{"crate::Command::help_heading":"0:4244:1577"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["heading",{"kind":"generic","inner":"O"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"O"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4473:648":{"id":"0:4473:648","crate_id":0,"name":"fmt","span":{"filename":"src/builder/value_parser.rs","begin":[1647,22],"end":[1647,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10215:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10204:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1451:6312":{"id":"0:1451:6312","crate_id":0,"name":"Value","span":{"filename":"src/builder/value_parser.rs","begin":[1181,4],"end":[1181,19]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"2:13383:63632":{"id":"2:13383:63632","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:15845:8320"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4716":{"id":"0:4716","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[67,23],"end":[67,30]},"visibility":{"restricted":{"parent":"0:2077:7161","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Default","id":"2:3218:115","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4706:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:4717:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:31746:68485":{"id":"2:31746:68485","crate_id":2,"name":"reverse_bits","span":null,"visibility":"public","docs":"Reverses the order of bits in the integer. The least significant bit becomes the most significant bit,\n                second least-significant bit becomes second most-significant bit, etc.\n\n# Examples\n\nBasic usage:\n\n```\nlet n = 0x1234567890123456u64;\nlet m = n.reverse_bits();\n\nassert_eq!(m, 0x6a2c48091e6a2c48);\nassert_eq!(0, 0u64.reverse_bits());\n```","links":{},"attrs":["#[stable(feature = \"reverse_bits\", since = \"1.37.0\")]","#[rustc_const_stable(feature = \"reverse_bits\", since = \"1.37.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1313:1822":{"id":"0:1313:1822","crate_id":0,"name":"string","span":{"filename":"src/builder/value_parser.rs","begin":[163,4],"end":[165,5]},"visibility":"public","docs":"[`String`] parser for argument values\n\nSee also:\n- [`NonEmptyStringValueParser`]\n\n# Example\n\n```rust\nlet mut cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"port\")\n            .value_parser(clap::value_parser!(String))\n            .required(true)\n    );\n\nlet m = cmd.try_get_matches_from_mut([\"cmd\", \"80\"]).unwrap();\nlet port: &String = m.get_one(\"port\")\n    .expect(\"required\");\nassert_eq!(port, \"80\");\n```","links":{"`NonEmptyStringValueParser`":"0:4474:2175","`String`":"5:8352:205"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2843-0:4244:1577":{"id":"b:2:2843-0:4244:1577","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2837:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:4244:1577","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["2:2845:2590"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:31777:68509":{"id":"2:31777:68509","crate_id":2,"name":"saturating_mul","span":null,"visibility":"public","docs":"Saturating integer multiplication. Computes `self * rhs`,\nsaturating at the numeric bounds instead of overflowing.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(2u64.saturating_mul(10), 20);\nassert_eq!((u64::MAX).saturating_mul(10), u64::MAX);\n```","links":{},"attrs":["#[stable(feature = \"wrapping\", since = \"1.7.0\")]","#[rustc_const_stable(feature = \"const_saturating_int_methods\", since =\n\"1.47.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1198":{"id":"0:1198","crate_id":0,"name":null,"span":{"filename":"src/builder/command.rs","begin":[5142,0],"end":[5146,1]},"visibility":{"restricted":{"parent":"0:649:1810","path":"::builder::command"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10262:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:4244:1577","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"items":["0:1199:648"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:2156:7302":{"id":"0:2156:7302","crate_id":0,"name":"args_present","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[340,4],"end":[342,5]},"visibility":"public","docs":"Check if any args were present on the command line\n\n# Examples\n\n```rust\n# use clap::{Command, Arg};\nlet mut cmd = Command::new(\"myapp\")\n    .arg(Arg::new(\"output\")\n        .takes_value(true));\n\nlet m = cmd\n    .try_get_matches_from_mut(vec![\"myapp\", \"something\"])\n    .unwrap();\nassert!(m.args_present());\n\nlet m = cmd\n    .try_get_matches_from_mut(vec![\"myapp\"])\n    .unwrap();\nassert!(! m.args_present());","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4600:6803":{"id":"0:4600:6803","crate_id":0,"name":"ValueValidation","span":{"filename":"src/error/kind.rs","begin":[141,4],"end":[141,19]},"visibility":"default","docs":"Occurs when the user provides a value for an argument with a custom validation and the\nvalue fails that validation.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nfn is_numeric(val: &str) -> Result<(), String> {\n    match val.parse::<i64>() {\n        Ok(..) => Ok(()),\n        Err(..) => Err(String::from(\"Value wasn't a number!\")),\n    }\n}\n\nlet result = Command::new(\"prog\")\n    .arg(Arg::new(\"num\")\n         .validator(is_numeric))\n    .try_get_matches_from(vec![\"prog\", \"NotANumber\"]);\nassert!(result.is_err());\nassert_eq!(result.unwrap_err().kind(), ErrorKind::ValueValidation);\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"b:2:3169-0:4456:2171":{"id":"b:2:3169-0:4456:2171","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BoolValueParser","id":"0:4456:2171","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3172:2288"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:31741:68482":{"id":"2:31741:68482","crate_id":2,"name":"leading_ones","span":null,"visibility":"public","docs":"Returns the number of leading ones in the binary representation of `self`.\n\n# Examples\n\nBasic usage:\n\n```\nlet n = !(u64::MAX >> 2);\n\nassert_eq!(n.leading_ones(), 2);\n```","links":{},"attrs":["#[stable(feature = \"leading_trailing_ones\", since = \"1.46.0\")]","#[rustc_const_stable(feature = \"leading_trailing_ones\", since = \"1.46.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4693":{"id":"0:4693","crate_id":0,"name":null,"span":{"filename":"src/parser/error.rs","begin":[4,16],"end":[4,21]},"visibility":{"restricted":{"parent":"0:2034:1566","path":"::parser::error"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]","#[allow(missing_copy_implementations)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10255:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4686:7087","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:4694:648"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3169-0:4773:1588":{"id":"b:2:3169-0:4773:1588","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:4773:1588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:3172:2288"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:2259:7523":{"id":"0:2259:7523","crate_id":0,"name":"next_back","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1418,4],"end":[1420,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8565:157","args":null,"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3411:2362":{"id":"0:3411:2362","crate_id":0,"name":"AllowExternalSubcommands","span":{"filename":"src/builder/app_settings.rs","begin":[188,4],"end":[188,28]},"visibility":"default","docs":"Deprecated, replaced with [`Command::allow_external_subcommands`] and\n[`Command::is_allow_external_subcommands_set`]","links":{"`Command::allow_external_subcommands`":"0:4244:1577","`Command::is_allow_external_subcommands_set`":"0:4244:1577"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:13416:63642":{"id":"2:13416:63642","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"str::split":"1:15845:8320","`DoubleEndedIterator`":"2:8411:120","self::pattern":"2:12997:8603","prim@char":"1:15839:8315"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:49338:8626","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:8597","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:8597","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:8598","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:910:5417":{"id":"0:910:5417","crate_id":0,"name":"subcommand_precedence_over_arg","span":{"filename":"src/builder/command.rs","begin":[2938,4],"end":[2944,5]},"visibility":"public","docs":"Prevent subcommands from being consumed as an arguments value.\n\nBy default, if an option taking multiple values is followed by a subcommand, the\nsubcommand will be parsed as another value.\n\n```text\ncmd --foo val1 val2 subcommand\n          --------- ----------\n            values   another value\n```\n\nThis setting instructs the parser to stop when encountering a subcommand instead of\ngreedily consuming arguments.\n\n```text\ncmd --foo val1 val2 subcommand\n          --------- ----------\n            values   subcommand\n```\n\n**Note:** Make sure you apply it as `global_setting` if you want this setting\nto be propagated to subcommands and sub-subcommands!\n\n# Examples\n\n```rust\n# use clap::{Command, Arg};\nlet cmd = Command::new(\"cmd\").subcommand(Command::new(\"sub\")).arg(\n    Arg::new(\"arg\")\n        .long(\"arg\")\n        .multiple_values(true)\n        .takes_value(true),\n);\n\nlet matches = cmd\n    .clone()\n    .try_get_matches_from(&[\"cmd\", \"--arg\", \"1\", \"2\", \"3\", \"sub\"])\n    .unwrap();\nassert_eq!(\n    matches.values_of(\"arg\").unwrap().collect::<Vec<_>>(),\n    &[\"1\", \"2\", \"3\", \"sub\"]\n);\nassert!(matches.subcommand_matches(\"sub\").is_none());\n\nlet matches = cmd\n    .subcommand_precedence_over_arg(true)\n    .try_get_matches_from(&[\"cmd\", \"--arg\", \"1\", \"2\", \"3\", \"sub\"])\n    .unwrap();\nassert_eq!(\n    matches.values_of(\"arg\").unwrap().collect::<Vec<_>>(),\n    &[\"1\", \"2\", \"3\"]\n);\nassert!(matches.subcommand_matches(\"sub\").is_some());\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:820:1529":{"id":"0:820:1529","crate_id":0,"name":"color","span":{"filename":"src/builder/command.rs","begin":[1020,4],"end":[1031,5]},"visibility":"public","docs":"Sets when to color output.\n\n**NOTE:** This choice is propagated to all child subcommands.\n\n**NOTE:** Default behaviour is [`ColorChoice::Auto`].\n\n# Examples\n\n```no_run\n# use clap::{Command, ColorChoice};\nCommand::new(\"myprog\")\n    .color(ColorChoice::Never)\n    .get_matches();\n```\n[`ColorChoice::Auto`]: crate::ColorChoice::Auto","links":{"crate::ColorChoice::Auto":"0:5071:1570"},"attrs":["#[cfg(feature = \"color\")]","#[inline]","#[must_use]","#![allow(deprecated)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["color",{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:5071:1570","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4291:593":{"id":"0:4291:593","crate_id":0,"name":"eq","span":{"filename":"src/builder/command.rs","begin":[77,23],"end":[77,32]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"App","id":"0:4244:1577","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2336:4560":{"id":"0:2336:4560","crate_id":0,"name":"size_hint","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1665,4],"end":[1667,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6423:10625":{"id":"1:6423:10625","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6424:10855","1:6425:10856","1:6426:2619","1:6427:21422","1:6429:21423","1:6431:21424","1:6432:21425","1:6434:21426"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10545:10621","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:2198":{"id":"0:2198","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[870,0],"end":[1072,1]},"visibility":{"restricted":{"parent":"0:2077:7161","path":"::parser::matches::arg_matches"}},"docs":"# Subcommands","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4706:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:2199:1909","0:2201:7465","0:2203:7479","0:2206:7108"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1492":{"id":"0:1492","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1442,0],"end":[1446,1]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"std::convert::TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Default","id":"2:3218:115","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"RangedU64ValueParser","id":"0:4444:2163","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["0:1494:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:5:6406-0:3816:1564":{"id":"b:5:6406-0:3816:1564","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10262:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"ToString","id":"5:6404:212","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3816:1564","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["5:6408:1376"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4410":{"id":"0:4410","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[764,9],"end":[764,13]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3250:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"PathBufValueParser","id":"0:4409:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4476":{"id":"0:4476","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1736,15],"end":[1736,20]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"NonEmptyStringValueParser","id":"0:4474:2175","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:4477:397"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4833:397":{"id":"0:4833:397","crate_id":0,"name":"clone","span":{"filename":"src/parser/matches/value_source.rs","begin":[2,16],"end":[2,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4823:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1018:5681":{"id":"0:1018:5681","crate_id":0,"name":"is_args_conflicts_with_subcommands_set","span":{"filename":"src/builder/command.rs","begin":[3766,4],"end":[3768,5]},"visibility":"public","docs":"Report whether [`Command::args_conflicts_with_subcommands`] is set","links":{"`Command::args_conflicts_with_subcommands`":"0:4244:1577"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3394:8463":{"id":"2:3394:8463","crate_id":2,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3396:341"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:9223:7158-0:4456:2171":{"id":"a:2:9223:7158-0:4456:2171","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9223:7158","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BoolValueParser","id":"0:4456:2171","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:791:4668":{"id":"0:791:4668","crate_id":0,"name":"get_matches_mut","span":{"filename":"src/builder/command.rs","begin":[534,4],"end":[537,5]},"visibility":"public","docs":"Parse [`env::args_os`], exiting on failure.\n\nLike [`App::get_matches`] but doesn't consume the `Command`.\n\n# Panics\n\nIf contradictory arguments or settings exist.\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg};\nlet mut cmd = Command::new(\"myprog\")\n    // Args and options go here...\n    ;\nlet matches = cmd.get_matches_mut();\n```\n[`env::args_os`]: std::env::args_os()\n[`App::get_matches`]: Command::get_matches()","links":{"std::env::args_os()":"1:2465:4663","Command::get_matches()":"0:4244:1577"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4706:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:31785:68513":{"id":"2:31785:68513","crate_id":2,"name":"wrapping_div_euclid","span":null,"visibility":"public","docs":"Wrapping Euclidean division. Computes `self.div_euclid(rhs)`.\nWrapped division on unsigned types is just normal division.\nThere's no way wrapping could ever happen.\nThis function exists, so that all operations\nare accounted for in the wrapping operations.\nSince, for the positive integers, all common\ndefinitions of division are equal, this\nis exactly equal to `self.wrapping_div(rhs)`.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(100u64.wrapping_div_euclid(10), 10);\n```","links":{},"attrs":["#[stable(feature = \"euclidean_division\", since = \"1.38.0\")]","#[rustc_const_stable(feature = \"const_euclidean_int_methods\", since =\n\"1.52.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3281:5920-0:3970:1581":{"id":"a:2:3281:5920-0:3970:1581","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3281:5920","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgSettings","id":"0:3970:1581","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:464":{"id":"0:464","crate_id":0,"name":null,"span":{"filename":"src/builder/arg.rs","begin":[4254,0],"end":[4672,1]},"visibility":{"restricted":{"parent":"0:242:1829","path":"::builder::arg"}},"docs":"# Reflection","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3816:1564","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["0:466:1837","0:467:3926","0:468:3928","0:469:3932","0:470:3934","0:471:1848","0:472:3938","0:474:3941","0:476:3943","0:477:1840","0:478:3947","0:480:3949","0:482:3951","0:483:3955","0:486:1832","0:487:3962","0:488:3964","0:489:3966","0:490:3968","0:492:3972","0:493:3982","0:494:3988","0:495:3990","0:496:3992","0:497:1835","0:498:3957","0:499:3997","0:500:4000","0:501:4002","0:502:4004","0:504:3959","0:507:3973","0:508:4016","0:509:4018","0:510:4020","0:511:4022","0:512:4028","0:513:4030","0:514:4032","0:515:4034","0:516:4036","0:517:4038","0:518:4040","0:519:4042"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:900:2749":{"id":"0:900:2749","crate_id":0,"name":"visible_aliases","span":{"filename":"src/builder/command.rs","begin":[2604,4],"end":[2607,5]},"visibility":"public","docs":"Sets multiple visible aliases to this subcommand.\n\nThis allows the subcommand to be accessed via *either* the\noriginal name or any of the given aliases. This is more efficient and easier\nthan creating multiple hidden subcommands as one only needs to check for\nthe existence of this command and not all aliased variants.\n\n**NOTE:** The alias defined with this method is *visible* from the help\nmessage and displayed as if it were just another regular subcommand. If\nlooking for an alias that will not be displayed in the help message, see\n[`Command::alias`].\n\n**NOTE:** When using aliases, and checking for the existence of a\nparticular subcommand within an [`ArgMatches`] struct, one only needs to\nsearch for the original name and not all aliases.\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg, };\nlet m = Command::new(\"myprog\")\n    .subcommand(Command::new(\"test\")\n        .visible_aliases(&[\"do-stuff\", \"tests\"]))\n    .get_matches_from(vec![\"myprog\", \"do-stuff\"]);\nassert_eq!(m.subcommand_name(), Some(\"test\"));\n```\n[`App::alias`]: Command::alias()","links":{"`Command::alias`":"0:4244:1577","`ArgMatches`":"0:4706:1568"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["names",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3367:397":{"id":"0:3367:397","crate_id":0,"name":"clone","span":{"filename":"src/builder/action.rs","begin":[23,9],"end":[23,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"ArgAction","id":"0:3347:1562","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4620:6729":{"id":"0:4620:6729","crate_id":0,"name":"DisplayHelp","span":{"filename":"src/error/kind.rs","begin":[337,4],"end":[337,15]},"visibility":"default","docs":"Not a true \"error\" as it means `--help` or similar was used.\nThe help message will be sent to `stdout`.\n\n**Note**: If the help is displayed due to an error (such as missing subcommands) it will\nbe sent to `stderr` instead of `stdout`.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet result = Command::new(\"prog\")\n    .try_get_matches_from(vec![\"prog\", \"--help\"]);\nassert!(result.is_err());\nassert_eq!(result.unwrap_err().kind(), ErrorKind::DisplayHelp);\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:4555":{"id":"0:4555","crate_id":0,"name":null,"span":{"filename":"src/error/context.rs","begin":[2,29],"end":[2,38]},"visibility":{"restricted":{"parent":"0:1839:470","path":"::error::context"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"StructuralPartialEq","id":"2:3248:207","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:4515:6699","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4614:6789":{"id":"0:4614:6789","crate_id":0,"name":"MissingSubcommand","span":{"filename":"src/error/kind.rs","begin":[271,4],"end":[271,21]},"visibility":"default","docs":"Occurs when a subcommand is required (as defined by [`Command::subcommand_required`]),\nbut the user does not provide one.\n\n# Examples\n\n```rust\n# use clap::{Command, ErrorKind};\nlet err = Command::new(\"prog\")\n    .subcommand_required(true)\n    .subcommand(Command::new(\"test\"))\n    .try_get_matches_from(vec![\n        \"myprog\",\n    ]);\nassert!(err.is_err());\nassert_eq!(err.unwrap_err().kind(), ErrorKind::MissingSubcommand);\n# ;\n```\n\n[`Command::subcommand_required`]: crate::Command::subcommand_required","links":{"crate::Command::subcommand_required":"0:4244:1577"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:31809:68535":{"id":"2:31809:68535","crate_id":2,"name":"rem_euclid","span":null,"visibility":"public","docs":"Calculates the least remainder of `self (mod rhs)`.\n\nSince, for the positive integers, all common\ndefinitions of division are equal, this\nis exactly equal to `self % rhs`.\n\n# Panics\n\nThis function will panic if `rhs` is 0.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(7u64.rem_euclid(4), 3); // or any other integer type\n```","links":{},"attrs":["#[stable(feature = \"euclidean_division\", since = \"1.38.0\")]","#[rustc_const_stable(feature = \"const_euclidean_int_methods\", since =\n\"1.52.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:31743:1105":{"id":"2:31743:1105","crate_id":2,"name":"rotate_left","span":null,"visibility":"public","docs":"Shifts the bits to the left by a specified amount, `n`,\nwrapping the truncated bits to the end of the resulting integer.\n\nPlease note this isn't the same operation as the `<<` shifting operator!\n\n# Examples\n\nBasic usage:\n\n```\nlet n = 0xaa00000000006e1u64;\nlet m = 0x6e10aa;\n\nassert_eq!(n.rotate_left(12), m);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["n",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3970:1581":{"id":"0:3970:1581","crate_id":0,"name":"ArgSettings","span":{"filename":"src/builder/arg_settings.rs","begin":[34,0],"end":[268,1]},"visibility":"public","docs":"Various settings that apply to arguments and may be set, unset, and checked via getter/setter\nmethods [`Arg::setting`], [`Arg::unset_setting`], and [`Arg::is_set`]. This is what the\n[`Arg`] methods which accept a `bool` use internally.\n\n[`Arg`]: crate::Arg\n[`Arg::setting`]: crate::Arg::setting()\n[`Arg::unset_setting`]: crate::Arg::unset_setting()\n[`Arg::is_set`]: crate::Arg::is_set()","links":{"crate::Arg::is_set()":"0:3816:1564","crate::Arg":"0:3816:1564","crate::Arg::unset_setting()":"0:3816:1564","crate::Arg::setting()":"0:3816:1564"},"attrs":["#[non_exhaustive]"],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":true,"variants":["0:3971:2847","0:3973:3036","0:3975:2898","0:3979:3202","0:3981:2895","0:3983:2426","0:3985:2932","0:3987:3236","0:3989:2405","0:3991:3275","0:3993:2430","0:3995:2326","0:3999:3213","0:4001:2828","0:4003:3579","0:4005:3173","0:4009:3607","0:4011:3613","0:4013:3198","0:4015:2875"],"impls":["a:2:9222:7159-0:3970:1581","a:2:3252:209-0:3970:1581","a:2:3240:200-0:3970:1581","a:2:9223:7158-0:3970:1581","a:2:3281:5920-0:3970:1581","b:2:2843-0:3970:1581","b:2:3169-0:3970:1581","b:2:3173-0:3970:1581","b:2:3184-0:3970:1581","b:2:3969-0:3970:1581","b:2:2846-0:3970:1581","b:2:3179-0:3970:1581","b:5:787-0:3970:1581","0:4017","0:4019","0:4020","0:4022","0:4023","0:4241"]}},"0:4633:648":{"id":"0:4633:648","crate_id":0,"name":"fmt","span":{"filename":"src/error/kind.rs","begin":[2,9],"end":[2,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10215:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10204:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3382:8461":{"id":"2:3382:8461","crate_id":2,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3384:171","2:3385:1212"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:3483":{"id":"0:3483","crate_id":0,"name":null,"span":{"filename":"src/builder/app_settings.rs","begin":[32,9],"end":[32,14]},"visibility":{"restricted":{"parent":"0:227:2151","path":"::builder::app_settings"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10255:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:3386:1579","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:3484:648"],"negative":false,"synthetic":false,"blanket_impl":null}},"23:45:10070":{"id":"23:45:10070","crate_id":23,"name":"MutableKeys","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["23:46:2593","23:47:6312","23:48:21335","23:50:21336","23:52:21337"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:3920":{"id":"0:3920","crate_id":0,"name":null,"span":{"filename":"src/builder/arg_group.rs","begin":[80,25],"end":[80,34]},"visibility":{"restricted":{"parent":"0:597:2152","path":"::builder::arg_group"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2892:173","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3903:1565","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3903:1565","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["0:3922:593","0:3923:894"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13469:67039":{"id":"2:13469:67039","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:12997:8603","prim@char":"1:15839:8315"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:8597","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:8597","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:8598","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:31769:68505":{"id":"2:31769:68505","crate_id":2,"name":"checked_shl","span":null,"visibility":"public","docs":"Checked shift left. Computes `self << rhs`, returning `None`\nif `rhs` is larger than or equal to the number of bits in `self`.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(0x1u64.checked_shl(4), Some(0x10));\nassert_eq!(0x10u64.checked_shl(129), None);\n```","links":{},"attrs":["#[stable(feature = \"wrapping\", since = \"1.7.0\")]","#[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.47.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1233:2003":{"id":"0:1233:2003","crate_id":0,"name":"matches","span":{"filename":"src/builder/possible_value.rs","begin":[239,4],"end":[246,5]},"visibility":"public","docs":"Tests if the value is valid for this argument value\n\nThe value is valid if it is either the name or one of the aliases.\n\n# Examples\n\n```rust\n# use clap::PossibleValue;\nlet arg_value = PossibleValue::new(\"fast\").alias(\"not-slow\");\n\nassert!(arg_value.matches(\"fast\", false));\nassert!(arg_value.matches(\"not-slow\", false));\n\nassert!(arg_value.matches(\"FAST\", true));\nassert!(!arg_value.matches(\"FAST\", false));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["value",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["ignore_case",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4289":{"id":"0:4289","crate_id":0,"name":null,"span":{"filename":"src/builder/command.rs","begin":[77,23],"end":[77,32]},"visibility":{"restricted":{"parent":"0:649:1810","path":"::builder::command"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2892:173","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"App","id":"0:4244:1577","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:4244:1577","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["0:4291:593","0:4292:894"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4018:648":{"id":"0:4018:648","crate_id":0,"name":"fmt","span":{"filename":"src/builder/arg_settings.rs","begin":[32,9],"end":[32,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10215:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10204:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3281:5920-0:4415:2173":{"id":"a:2:3281:5920-0:4415:2173","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3281:5920","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3281:5920","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"EnumValueParser","id":"0:4415:2173","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:616:287":{"id":"0:616:287","crate_id":0,"name":"args","span":{"filename":"src/builder/arg_group.rs","begin":[188,4],"end":[193,5]},"visibility":"public","docs":"Adds multiple [arguments] to this group by name\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ArgGroup};\nlet m = Command::new(\"myprog\")\n    .arg(Arg::new(\"flag\")\n        .short('f'))\n    .arg(Arg::new(\"color\")\n        .short('c'))\n    .group(ArgGroup::new(\"req_flags\")\n        .args(&[\"flag\", \"color\"]))\n    .get_matches_from(vec![\"myprog\", \"-f\"]);\n// maybe we don't know which of the two flags was used...\nassert!(m.contains_id(\"req_flags\"));\n// but we can also check individually if needed\nassert!(m.contains_id(\"flag\"));\n```\n[arguments]: crate::Arg","links":{"crate::Arg":"0:3816:1564"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["ns",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Key","id":"0:3235:2593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4791:1586":{"id":"0:4791:1586","crate_id":0,"name":"OsValues","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1593,0],"end":[1597,1]},"visibility":"public","docs":"Deprecated, replaced with [`ArgMatches::get_many()`]","links":{"`ArgMatches::get_many()`":"0:4706:1568"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["a:2:9222:7159-0:4791:1586","a:2:3252:209-0:4791:1586","a:2:3240:200-0:4791:1586","a:2:9223:7158-0:4791:1586","a:2:3281:5920-0:4791:1586","b:2:2843-0:4791:1586","b:2:3169-0:4791:1586","b:2:3173-0:4791:1586","b:2:3184-0:4791:1586","b:2:3969-0:4791:1586","b:2:8371-0:4791:1586","b:2:2846-0:4791:1586","b:2:3179-0:4791:1586","b:5:787-0:4791:1586","0:4795","0:4798","0:2317","0:2322","0:2325","0:2327"]}},"0:3431:2405":{"id":"0:3431:2405","crate_id":0,"name":"NextLineHelp","span":{"filename":"src/builder/app_settings.rs","begin":[299,4],"end":[299,16]},"visibility":"default","docs":"Deprecated, replaced with [`Command::next_line_help`] and [`Command::is_next_line_help_set`]","links":{"`Command::next_line_help`":"0:4244:1577","`Command::is_next_line_help_set`":"0:4244:1577"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:2328:59":{"id":"0:2328:59","crate_id":0,"name":"default","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1624,4],"end":[1630,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1020:5685":{"id":"0:1020:5685","crate_id":0,"name":"is_subcommand_negates_reqs_set","span":{"filename":"src/builder/command.rs","begin":[3776,4],"end":[3778,5]},"visibility":"public","docs":"Report whether [`Command::subcommand_negates_reqs`] is set","links":{"`Command::subcommand_negates_reqs`":"0:4244:1577"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4365:6244":{"id":"0:4365:6244","crate_id":0,"name":"DirPath","span":{"filename":"src/builder/value_hint.rs","begin":[40,4],"end":[40,11]},"visibility":"default","docs":"Path to a directory.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:4459:397":{"id":"0:4459:397","crate_id":0,"name":"clone","span":{"filename":"src/builder/value_parser.rs","begin":[1451,15],"end":[1451,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"BoolValueParser","id":"0:4456:2171","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3173-0:4468:2172":{"id":"b:2:3173-0:4468:2172","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BoolishValueParser","id":"0:4468:2172","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3175:669"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3173-0:4763:7085":{"id":"b:2:3173-0:4763:7085","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"RawValues","id":"0:4763:7085","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:3175:669"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3987:3236":{"id":"0:3987:3236","crate_id":0,"name":"UseValueDelimiter","span":{"filename":"src/builder/arg_settings.rs","begin":[115,4],"end":[115,21]},"visibility":"default","docs":"Deprecated, replaced with [`Arg::use_value_delimiter`] and\n[`Arg::is_use_value_delimiter_set`]","links":{"`Arg::use_value_delimiter`":"0:3816:1564","`Arg::is_use_value_delimiter_set`":"0:3816:1564"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:4636:397":{"id":"0:4636:397","crate_id":0,"name":"clone","span":{"filename":"src/error/kind.rs","begin":[2,22],"end":[2,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4587:1584","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6097:6399":{"id":"5:6097:6399","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:432:2146","`String`":"5:8352:205"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2146","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8090:2895","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1542:59":{"id":"0:1542:59","crate_id":0,"name":"default","span":{"filename":"src/builder/value_parser.rs","begin":[1775,4],"end":[1777,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3969-0:4763:7085":{"id":"b:2:3969-0:4763:7085","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3967:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"RawValues","id":"0:4763:7085","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:3971:1408"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1001:5651":{"id":"0:1001:5651","crate_id":0,"name":"is_disable_colored_help_set","span":{"filename":"src/builder/command.rs","begin":[3672,4],"end":[3674,5]},"visibility":"public","docs":"Report whether [`Command::disable_colored_help`] is set","links":{"`Command::disable_colored_help`":"0:4244:1577"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1526:6352":{"id":"0:1526:6352","crate_id":0,"name":"parse_ref","span":{"filename":"src/builder/value_parser.rs","begin":[1669,4],"end":[1689,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["cmd",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Command","id":"0:755:1563","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}],["arg",{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Arg","id":"0:3816:1564","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["value",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"std::ffi::OsStr","id":"1:2923:169","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Value","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:1362:2165","args":null,"param_names":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"crate::Error","id":"0:4640:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:219:2285":{"id":"0:219:2285","crate_id":0,"name":"takes_values","span":{"filename":"src/builder/action.rs","begin":[257,4],"end":[271,5]},"visibility":"public","docs":"Returns whether this action accepts values on the command-line\n\n[`default_values`][super::Arg::default_values] and [`env`][super::Arg::env] may still be\nprocessed.","links":{"super::Arg::default_values":"0:3816:1564"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:929:5558":{"id":"0:929:5558","crate_id":0,"name":"get_long_flag","span":{"filename":"src/builder/command.rs","begin":[3318,4],"end":[3320,5]},"visibility":"public","docs":"Get the long flag of the subcommand.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3184-0:5071:1570":{"id":"b:2:3184-0:5071:1570","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:5071:1570","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3187:127","2:3188:1394"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:393:61":{"id":"0:393:61","crate_id":0,"name":"raw","span":{"filename":"src/builder/arg.rs","begin":[2101,4],"end":[2106,5]},"visibility":"public","docs":"Consume all following arguments.\n\nDo not be parse them individually, but rather pass them in entirety.\n\nIt is worth noting that setting this requires all values to come after a `--` to indicate\nthey should all be captured. For example:\n\n```text\n--foo something -- -v -v -v -b -b -b --baz -q -u -x\n```\n\nWill result in everything after `--` to be considered one raw argument. This behavior\nmay not be exactly what you are expecting and using [`crate::Command::trailing_var_arg`]\nmay be more appropriate.\n\n**NOTE:** Implicitly sets [`Arg::takes_value(true)`] [`Arg::multiple_values(true)`],\n[`Arg::allow_hyphen_values(true)`], and [`Arg::last(true)`] when set to `true`.\n\n[`Arg::takes_value(true)`]: Arg::takes_value()\n[`Arg::multiple_values(true)`]: Arg::multiple_values()\n[`Arg::allow_hyphen_values(true)`]: Arg::allow_hyphen_values()\n[`Arg::last(true)`]: Arg::last()","links":{"Arg::multiple_values()":"0:3816:1564","`crate::Command::trailing_var_arg`":"0:4244:1577","Arg::takes_value()":"0:3816:1564","Arg::last()":"0:3816:1564","Arg::allow_hyphen_values()":"0:3816:1564"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1057":{"id":"0:1057","crate_id":0,"name":null,"span":{"filename":"src/builder/command.rs","begin":[4108,0],"end":[4821,1]},"visibility":{"restricted":{"parent":"0:649:1810","path":"::builder::command"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:4244:1577","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["0:1074:5764"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3169-0:4468:2172":{"id":"b:2:3169-0:4468:2172","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BoolishValueParser","id":"0:4468:2172","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3172:2288"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13379:21289":{"id":"2:13379:21289","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10897:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10897:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:4610:6768":{"id":"0:4610:6768","crate_id":0,"name":"ArgumentConflict","span":{"filename":"src/error/kind.rs","begin":[235,4],"end":[235,20]},"visibility":"default","docs":"Occurs when the user provides two values which conflict with each other and can't be used\ntogether.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet result = Command::new(\"prog\")\n    .arg(Arg::new(\"debug\")\n        .long(\"debug\")\n        .conflicts_with(\"color\"))\n    .arg(Arg::new(\"color\")\n        .long(\"color\"))\n    .try_get_matches_from(vec![\"prog\", \"--debug\", \"--color\"]);\nassert!(result.is_err());\nassert_eq!(result.unwrap_err().kind(), ErrorKind::ArgumentConflict);\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"a:2:9223:7158-0:4686:7087":{"id":"a:2:9223:7158-0:4686:7087","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9223:7158","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4686:7087","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:413:3554":{"id":"0:413:3554","crate_id":0,"name":"next_line_help","span":{"filename":"src/builder/arg.rs","begin":[2728,4],"end":[2734,5]},"visibility":"public","docs":"Render the [help][Arg::help] on the line after the argument.\n\nThis can be helpful for arguments with very long or complex help messages.\nThis can also be helpful for arguments with very long flag names, or many/long value names.\n\n**NOTE:** To apply this setting to all arguments and subcommands, consider using\n[`crate::Command::next_line_help`]\n\n# Examples\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"opt\")\n        .long(\"long-option-flag\")\n        .short('o')\n        .takes_value(true)\n        .next_line_help(true)\n        .value_names(&[\"value1\", \"value2\"])\n        .help(\"Some really long help and complex\\n\\\n               help that makes more sense to be\\n\\\n               on a line after the option\"))\n    .get_matches_from(vec![\n        \"prog\", \"--help\"\n    ]);\n```\n\nThe above example displays the following help message\n\n```text\nnlh\n\nUSAGE:\n    nlh [OPTIONS]\n\nOPTIONS:\n    -h, --help       Print help information\n    -V, --version    Print version information\n    -o, --long-option-flag <value1> <value2>\n        Some really long help and complex\n        help that makes more sense to be\n        on a line after the option\n```","links":{"Arg::help":"0:3816:1564","`crate::Command::next_line_help`":"0:4244:1577"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1294:2166":{"id":"0:1294:2166","crate_id":0,"name":"ValueParser","span":{"filename":"src/builder/value_parser.rs","begin":[59,0],"end":[59,41]},"visibility":"public","docs":"Parse/validate argument values\n\nSpecified with [`Arg::value_parser`][crate::Arg::value_parser].\n\n`ValueParser` defines how to convert a raw argument value into a validated and typed value for\nuse within an application.\n\nSee\n- [`value_parser!`] for automatically selecting an implementation for a given type\n- [`ValueParser::new`] for additional [`TypedValueParser`] that can be used\n\n# Example\n\n```rust\nlet mut cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"color\")\n            .long(\"color\")\n            .value_parser([\"always\", \"auto\", \"never\"])\n            .default_value(\"auto\")\n    )\n    .arg(\n        clap::Arg::new(\"hostname\")\n            .long(\"hostname\")\n            .value_parser(clap::builder::NonEmptyStringValueParser::new())\n            .takes_value(true)\n            .required(true)\n    )\n    .arg(\n        clap::Arg::new(\"port\")\n            .long(\"port\")\n            .value_parser(clap::value_parser!(u16).range(3000..))\n            .takes_value(true)\n            .required(true)\n    );\n\nlet m = cmd.try_get_matches_from_mut(\n    [\"cmd\", \"--hostname\", \"rust-lang.org\", \"--port\", \"3001\"]\n).unwrap();\n\nlet color: &String = m.get_one(\"color\")\n    .expect(\"default\");\nassert_eq!(color, \"auto\");\n\nlet hostname: &String = m.get_one(\"hostname\")\n    .expect(\"required\");\nassert_eq!(hostname, \"rust-lang.org\");\n\nlet port: u16 = *m.get_one(\"port\")\n    .expect(\"required\");\nassert_eq!(port, 3001);\n```","links":{"`value_parser!`":"0:1606:2158","crate::Arg::value_parser":"0:3816:1564","`ValueParser::new`":"0:1294:2166","`TypedValueParser`":"0:1362:2165"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"tuple","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["0:1309","0:1316","a:2:9222:7159-0:1294:2166","a:2:3252:209-0:1294:2166","a:2:3240:200-0:1294:2166","a:2:9223:7158-0:1294:2166","a:2:3281:5920-0:1294:2166","b:2:2843-0:1294:2166","b:2:3169-0:1294:2166","b:2:3173-0:1294:2166","b:2:3184-0:1294:2166","b:2:3969-0:1294:2166","b:2:2846-0:1294:2166","b:2:3179-0:1294:2166","b:5:787-0:1294:2166","0:1321","0:1326","0:1328","0:1330","0:1332","0:1334","0:1336","0:1338","0:1344","0:1346"]}},"b:2:3184-0:4763:7085":{"id":"b:2:3184-0:4763:7085","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"RawValues","id":"0:4763:7085","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:3187:127","2:3188:1394"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:9222:7159-0:4823:1587":{"id":"a:2:9222:7159-0:4823:1587","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9222:7159","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4823:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:909:5393":{"id":"0:909:5393","crate_id":0,"name":"args_conflicts_with_subcommands","span":{"filename":"src/builder/command.rs","begin":[2876,4],"end":[2882,5]},"visibility":"public","docs":"Specifies that use of an argument prevents the use of [`subcommands`].\n\nBy default `clap` allows arguments between subcommands such\nas `<cmd> [cmd_args] <subcmd> [subcmd_args] <subsubcmd> [subsubcmd_args]`.\n\nThis setting disables that functionality and says that arguments can\nonly follow the *final* subcommand. For instance using this setting\nmakes only the following invocations possible:\n\n* `<cmd> <subcmd> <subsubcmd> [subsubcmd_args]`\n* `<cmd> <subcmd> [subcmd_args]`\n* `<cmd> [cmd_args]`\n\n# Examples\n\n```rust\n# use clap::Command;\nCommand::new(\"myprog\")\n    .args_conflicts_with_subcommands(true);\n```\n\n[`subcommands`]: crate::Command::subcommand()","links":{"crate::Command::subcommand()":"0:4244:1577"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3173-0:4403:2176":{"id":"b:2:3173-0:4403:2176","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OsStringValueParser","id":"0:4403:2176","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3175:669"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:913:4527":{"id":"0:913:4527","crate_id":0,"name":"subcommand_value_name","span":{"filename":"src/builder/command.rs","begin":[3184,4],"end":[3190,5]},"visibility":"public","docs":"Sets the value name used for subcommands when printing usage and help.\n\nBy default, this is \"SUBCOMMAND\".\n\nSee also [`Command::subcommand_help_heading`]\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg};\nCommand::new(\"myprog\")\n    .subcommand(Command::new(\"sub1\"))\n    .print_help()\n# ;\n```\n\nwill produce\n\n```text\nmyprog\n\nUSAGE:\n    myprog [SUBCOMMAND]\n\nOPTIONS:\n    -h, --help       Print help information\n    -V, --version    Print version information\n\nSUBCOMMANDS:\n    help    Print this message or the help of the given subcommand(s)\n    sub1\n```\n\nbut usage of `subcommand_value_name`\n\n```no_run\n# use clap::{Command, Arg};\nCommand::new(\"myprog\")\n    .subcommand(Command::new(\"sub1\"))\n    .subcommand_value_name(\"THING\")\n    .print_help()\n# ;\n```\n\nwill produce\n\n```text\nmyprog\n\nUSAGE:\n    myprog [THING]\n\nOPTIONS:\n    -h, --help       Print help information\n    -V, --version    Print version information\n\nSUBCOMMANDS:\n    help    Print this message or the help of the given subcommand(s)\n    sub1\n```","links":{"`Command::subcommand_help_heading`":"0:4244:1577"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["value_name",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:31805:68532":{"id":"2:31805:68532","crate_id":2,"name":"overflowing_shr","span":null,"visibility":"public","docs":"Shifts self right by `rhs` bits.\n\nReturns a tuple of the shifted version of self along with a boolean\nindicating whether the shift value was larger than or equal to the\nnumber of bits. If the shift value is too large, then value is\nmasked (N-1) where N is the number of bits, and this value is then\nused to perform the shift.\n\n# Examples\n\nBasic usage\n\n```\nassert_eq!(0x10u64.overflowing_shr(4), (0x1, false));\nassert_eq!(0x10u64.overflowing_shr(132), (0x1, true));\n```","links":{},"attrs":["#[stable(feature = \"wrapping\", since = \"1.7.0\")]","#[rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"u64"},{"kind":"primitive","inner":"bool"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:395:3353":{"id":"0:395:3353","crate_id":0,"name":"default_value_os","span":{"filename":"src/builder/arg.rs","begin":[2181,4],"end":[2183,5]},"visibility":"public","docs":"Value for the argument when not present.\n\nSee [`Arg::default_value`].\n\n[`Arg::default_value`]: Arg::default_value()\n[`OsStr`]: std::ffi::OsStr","links":{"Arg::default_value()":"0:3816:1564"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["val",{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"1:2923:169","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:194:2052":{"id":"0:194:2052","crate_id":0,"name":"into_app","span":{"filename":"src/derive.rs","begin":[538,4],"end":[540,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Command","id":"0:755:1563","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:186:2014":{"id":"0:186:2014","crate_id":0,"name":"parse_from","span":{"filename":"src/derive.rs","begin":[519,4],"end":[525,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["itr",{"kind":"generic","inner":"I"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"It","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8367:151","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"It"}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"It"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsString","id":"1:2920:170","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4243:342":{"id":"0:4243:342","crate_id":0,"name":"bitor","span":{"filename":"src/builder/arg_settings.rs","begin":[302,0],"end":[330,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:3372:1929","args":null,"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3184-0:4462:2174":{"id":"b:2:3184-0:4462:2174","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FalseyValueParser","id":"0:4462:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3187:127","2:3188:1394"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:3240:200-0:4409:2177":{"id":"a:2:3240:200-0:4409:2177","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3240:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"PathBufValueParser","id":"0:4409:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:483:3955":{"id":"0:483:3955","crate_id":0,"name":"get_possible_values","span":{"filename":"src/builder/arg.rs","begin":[4395,4],"end":[4401,5]},"visibility":"public","docs":"Deprecated, replaced with [`Arg::get_value_parser().possible_values()`]","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:4298:1582","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:31788:65972":{"id":"2:31788:65972","crate_id":2,"name":"wrapping_neg","span":null,"visibility":"public","docs":"Wrapping (modular) negation. Computes `-self`,\nwrapping around at the boundary of the type.\n\nSince unsigned types do not have negative equivalents\nall applications of this function will wrap (except for `-0`).\nFor values smaller than the corresponding signed type's maximum\nthe result is the same as casting the corresponding signed value.\nAny larger values are equivalent to `MAX + 1 - (val - MAX - 1)` where\n`MAX` is the corresponding signed type's maximum.\n\n# Examples\n\nBasic usage:\n\nPlease note that this example is shared between integer types.\nWhich explains why `i8` is used here.\n\n```\nassert_eq!(100i8.wrapping_neg(), -100);\nassert_eq!((-128i8).wrapping_neg(), -128);\n```","links":{},"attrs":["#[stable(feature = \"num_wrapping\", since = \"1.2.0\")]","#[rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2843-0:4425:2161":{"id":"b:2:2843-0:4425:2161","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2837:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValuesParser","id":"0:4425:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2845:2590"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:2324:7523":{"id":"0:2324:7523","crate_id":0,"name":"next_back","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1613,4],"end":[1615,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"1:2923:169","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:31753:68491":{"id":"2:31753:68491","crate_id":2,"name":"checked_add_signed","span":null,"visibility":"public","docs":"Checked addition with a signed integer. Computes `self + rhs`,\nreturning `None` if overflow occurred.\n\n# Examples\n\nBasic usage:\n\n```\n# #![feature(mixed_integer_ops)]\nassert_eq!(1u64.checked_add_signed(2), Some(3));\nassert_eq!(1u64.checked_add_signed(-2), None);\nassert_eq!((u64::MAX - 2).checked_add_signed(3), None);\n```","links":{},"attrs":["#[unstable(feature = \"mixed_integer_ops\", issue = \"87840\")]","#[rustc_const_unstable(feature = \"mixed_integer_ops\", issue = \"87840\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"i64"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13410:6683":{"id":"2:13410:6683","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"prim@char":"1:15839:8315","str::split_whitespace":"1:15845:8320","`DoubleEndedIterator`":"2:8411:120","str::rsplit":"1:15845:8320","self::pattern":"2:12997:8603"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:49320:8627","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:8597","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6773:10623":{"id":"1:6773:10623","crate_id":1,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6774:21439","1:6775:21440"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10545:10621","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:4017":{"id":"0:4017","crate_id":0,"name":null,"span":{"filename":"src/builder/arg_settings.rs","begin":[32,9],"end":[32,14]},"visibility":{"restricted":{"parent":"0:637:2154","path":"::builder::arg_settings"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10255:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgSettings","id":"0:3970:1581","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:4018:648"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:938:5571":{"id":"0:938:5571","crate_id":0,"name":"get_visible_short_flag_aliases","span":{"filename":"src/builder/command.rs","begin":[3364,4],"end":[3369,5]},"visibility":"public","docs":"Iterate through the *visible* short aliases for this subcommand.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8565:157","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"primitive","inner":"char"}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"outlives":"'_"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:924:3926":{"id":"0:924:3926","crate_id":0,"name":"get_name","span":{"filename":"src/builder/command.rs","begin":[3288,4],"end":[3290,5]},"visibility":"public","docs":"Get the name of the cmd.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3179-0:4773:1588":{"id":"b:2:3179-0:4773:1588","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3149:217","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:4773:1588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:3182:127","2:3183:1395"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3490:397":{"id":"0:3490:397","crate_id":0,"name":"clone","span":{"filename":"src/builder/app_settings.rs","begin":[32,33],"end":[32,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:3386:1579","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:459:3844":{"id":"0:459:3844","crate_id":0,"name":"conflicts_with_all","span":{"filename":"src/builder/arg.rs","begin":[4098,4],"end":[4101,5]},"visibility":"public","docs":"This argument is mutually exclusive with the specified arguments.\n\nSee [`Arg::conflicts_with`].\n\n**NOTE:** Conflicting rules take precedence over being required by default. Conflict rules\nonly need to be set for one of the two arguments, they do not need to be set for each.\n\n**NOTE:** Defining a conflict is two-way, but does *not* need to defined for both arguments\n(i.e. if A conflicts with B, defining A.conflicts_with(B) is sufficient. You do not need\nneed to also do B.conflicts_with(A))\n\n**NOTE:** [`Arg::exclusive(true)`] allows specifying an argument which conflicts with every other argument.\n\n# Examples\n\n```rust\n# use clap::Arg;\nArg::new(\"config\")\n    .conflicts_with_all(&[\"debug\", \"input\"])\n# ;\n```\n\nSetting conflicting argument, and having any of the arguments present at runtime with a\nconflicting argument is an error.\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .takes_value(true)\n        .conflicts_with_all(&[\"debug\", \"input\"])\n        .long(\"config\"))\n    .arg(Arg::new(\"debug\")\n        .long(\"debug\"))\n    .arg(Arg::new(\"input\"))\n    .try_get_matches_from(vec![\n        \"prog\", \"--config\", \"file.conf\", \"file.txt\"\n    ]);\n\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind(), ErrorKind::ArgumentConflict);\n```\n[`Arg::conflicts_with`]: Arg::conflicts_with()\n[`Arg::exclusive(true)`]: Arg::exclusive()","links":{"Arg::conflicts_with()":"0:3816:1564","Arg::exclusive()":"0:3816:1564"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["names",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13455:67036":{"id":"2:13455:67036","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2189:7348":{"id":"0:2189:7348","crate_id":0,"name":"occurrences_of","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[617,4],"end":[621,5]},"visibility":"public","docs":"Deprecated, replaced with  [`ArgAction::Count`][crate::ArgAction],\n[`ArgMatches::get_many`]`.len()`, or [`ArgMatches::value_source`].","links":{"crate::ArgAction":"0:3347:1562","`ArgMatches::value_source`":"0:4706:1568","`ArgMatches::get_many`":"0:4706:1568"},"attrs":["#[track_caller]","#![allow(deprecated)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"generic","inner":"T"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Key","id":"0:3235:2593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3179-0:4444:2163":{"id":"b:2:3179-0:4444:2163","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3149:217","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"RangedU64ValueParser","id":"0:4444:2163","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["2:3182:127","2:3183:1395"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:9222:7159-0:3903:1565":{"id":"a:2:9222:7159-0:3903:1565","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9222:7159","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3903:1565","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:3173-0:4425:2161":{"id":"b:2:3173-0:4425:2161","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValuesParser","id":"0:4425:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3175:669"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3169-0:4561:6700":{"id":"b:2:3169-0:4561:6700","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ContextValue","id":"0:4561:6700","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3172:2288"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:930:5560":{"id":"0:930:5560","crate_id":0,"name":"get_about","span":{"filename":"src/builder/command.rs","begin":[3326,4],"end":[3328,5]},"visibility":"public","docs":"Get the help message specified via [`Command::about`].\n\n[`App::about`]: Command::about()","links":{"`Command::about`":"0:4244:1577"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3240:200-0:4763:7085":{"id":"a:2:3240:200-0:4763:7085","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3240:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"RawValues","id":"0:4763:7085","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:3169-0:4298:1582":{"id":"b:2:3169-0:4298:1582","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:4298:1582","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["2:3172:2288"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3914:59":{"id":"0:3914:59","crate_id":0,"name":"default","span":{"filename":"src/builder/arg_group.rs","begin":[80,9],"end":[80,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3903:1565","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3240:200-0:4801:1585":{"id":"a:2:3240:200-0:4801:1585","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3240:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:4801:1585","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1437:3153":{"id":"0:1437:3153","crate_id":0,"name":"possible_values","span":{"filename":"src/builder/value_parser.rs","begin":[1037,4],"end":[1041,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2146","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8565:157","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"resolved_path","inner":{"name":"crate::PossibleValue","id":"0:4298:1582","args":{"angle_bracketed":{"args":[{"lifetime":"'static"}],"bindings":[]}},"param_names":[]}}}}}]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3701:137":{"id":"2:3701:137","crate_id":2,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3703:675"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3696:213","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:4387:593":{"id":"0:4387:593","crate_id":0,"name":"eq","span":{"filename":"src/builder/value_hint.rs","begin":[27,16],"end":[27,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:4356:1583","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1519":{"id":"0:1519","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1651,0],"end":[1664,1]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"BoolishValueParser","id":"0:4468:2172","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:1520:907"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4548:6914":{"id":"0:4548:6914","crate_id":0,"name":"Custom","span":{"filename":"src/error/context.rs","begin":[38,4],"end":[38,10]},"visibility":"default","docs":"An opaque message to the user","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:975:5611":{"id":"0:975:5611","crate_id":0,"name":"get_groups","span":{"filename":"src/builder/command.rs","begin":[3523,4],"end":[3525,5]},"visibility":"public","docs":"Iterate through the set of groups.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8565:157","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3903:1565","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}}}}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4596:6212":{"id":"0:4596:6212","crate_id":0,"name":"EmptyValue","span":{"filename":"src/error/kind.rs","begin":[102,4],"end":[102,14]},"visibility":"default","docs":"Occurs when the user provides an empty value for an option that does not allow empty\nvalues.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"color\")\n         .takes_value(true)\n         .forbid_empty_values(true)\n         .long(\"color\"))\n    .try_get_matches_from(vec![\"prog\", \"--color=\"]);\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind(), ErrorKind::EmptyValue);\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:1520:907":{"id":"0:1520:907","crate_id":0,"name":"new","span":{"filename":"src/builder/value_parser.rs","begin":[1653,4],"end":[1655,5]},"visibility":"public","docs":"Parse bool-like string values, everything else is `true`","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:9323:10617":{"id":"1:9323:10617","crate_id":1,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9324:16247","1:9325:16248","1:9326:16249","1:9327:16250","1:9328:11203","1:9329:16251","1:9330:16252"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10545:10621","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:829:4869":{"id":"0:829:4869","crate_id":0,"name":"help_expected","span":{"filename":"src/builder/command.rs","begin":[1266,4],"end":[1272,5]},"visibility":"public","docs":" Panic if help descriptions are omitted.\n\n **NOTE:** When deriving [`Parser`][crate::Parser], you could instead check this at\n compile-time with `#![deny(missing_docs)]`\n\n **NOTE:** This choice is propagated to all child subcommands.\n\n # Examples\n\n ```rust\n # use clap::{Command, Arg};\n Command::new(\"myprog\")\n     .help_expected(true)\n     .arg(\n         Arg::new(\"foo\").help(\"It does foo stuff\")\n         // As required via `help_expected`, a help message was supplied\n      )\n #    .get_matches();\n ```\n\n # Panics\n\n ```rust,no_run\n # use clap::{Command, Arg};\n Command::new(\"myapp\")\n     .help_expected(true)\n     .arg(\n         Arg::new(\"foo\")\n         // Someone forgot to put .about(\"...\") here\n         // Since the setting `help_expected` is activated, this will lead to\n         // a panic (if you are in debug mode)\n     )\n #   .get_matches();\n```","links":{"crate::Parser":"0:127:1574"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3492:132":{"id":"2:3492:132","crate_id":2,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3494:171","2:3495:367"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:3281:5920-0:4474:2175":{"id":"a:2:3281:5920-0:4474:2175","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3281:5920","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"NonEmptyStringValueParser","id":"0:4474:2175","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:2272:2018":{"id":"0:2272:2018","crate_id":0,"name":"Item","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1468,4],"end":[1468,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"1:2923:169","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}},"0:441:3739":{"id":"0:441:3739","crate_id":0,"name":"required_if_eq","span":{"filename":"src/builder/arg.rs","begin":[3661,4],"end":[3664,5]},"visibility":"public","docs":"This argument is [required] only if the specified `arg` is present at runtime and its value\nequals `val`.\n\n# Examples\n\n```rust\n# use clap::Arg;\nArg::new(\"config\")\n    .required_if_eq(\"other_arg\", \"value\")\n# ;\n```\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .takes_value(true)\n        .required_if_eq(\"other\", \"special\")\n        .long(\"config\"))\n    .arg(Arg::new(\"other\")\n        .long(\"other\")\n        .takes_value(true))\n    .try_get_matches_from(vec![\n        \"prog\", \"--other\", \"not-special\"\n    ]);\n\nassert!(res.is_ok()); // We didn't use --other=special, so \"cfg\" wasn't required\n\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .takes_value(true)\n        .required_if_eq(\"other\", \"special\")\n        .long(\"config\"))\n    .arg(Arg::new(\"other\")\n        .long(\"other\")\n        .takes_value(true))\n    .try_get_matches_from(vec![\n        \"prog\", \"--other\", \"special\"\n    ]);\n\n// We did use --other=special so \"cfg\" had become required but was missing.\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind(), ErrorKind::MissingRequiredArgument);\n\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .takes_value(true)\n        .required_if_eq(\"other\", \"special\")\n        .long(\"config\"))\n    .arg(Arg::new(\"other\")\n        .long(\"other\")\n        .takes_value(true))\n    .try_get_matches_from(vec![\n        \"prog\", \"--other\", \"SPECIAL\"\n    ]);\n\n// By default, the comparison is case-sensitive, so \"cfg\" wasn't required\nassert!(res.is_ok());\n\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .takes_value(true)\n        .required_if_eq(\"other\", \"special\")\n        .long(\"config\"))\n    .arg(Arg::new(\"other\")\n        .long(\"other\")\n        .ignore_case(true)\n        .takes_value(true))\n    .try_get_matches_from(vec![\n        \"prog\", \"--other\", \"SPECIAL\"\n    ]);\n\n// However, case-insensitive comparisons can be enabled.  This typically occurs when using Arg::possible_values().\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind(), ErrorKind::MissingRequiredArgument);\n```\n[`Arg::requires(name)`]: Arg::requires()\n[Conflicting]: Arg::conflicts_with()\n[required]: Arg::required()","links":{"Arg::required()":"0:3816:1564"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["arg_id",{"kind":"generic","inner":"T"}],["val",{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Key","id":"0:3235:2593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:31760:68496":{"id":"2:31760:68496","crate_id":2,"name":"checked_rem","span":null,"visibility":"public","docs":"Checked integer remainder. Computes `self % rhs`, returning `None`\nif `rhs == 0`.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(5u64.checked_rem(2), Some(1));\nassert_eq!(5u64.checked_rem(0), None);\n```","links":{},"attrs":["#[stable(feature = \"wrapping\", since = \"1.7.0\")]","#[rustc_const_stable(feature = \"const_checked_int_div\", since = \"1.52.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3252:209-0:4444:2163":{"id":"a:2:3252:209-0:4444:2163","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3252:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3252:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"RangedU64ValueParser","id":"0:4444:2163","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:13372:63613":{"id":"2:13372:63613","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:15856:8329"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4383":{"id":"0:4383","crate_id":0,"name":null,"span":{"filename":"src/builder/value_hint.rs","begin":[27,9],"end":[27,14]},"visibility":{"restricted":{"parent":"0:1272:2157","path":"::builder::value_hint"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10255:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:4356:1583","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:4384:648"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:965:5599":{"id":"0:965:5599","crate_id":0,"name":"get_before_help","span":{"filename":"src/builder/command.rs","begin":[3476,4],"end":[3478,5]},"visibility":"public","docs":"Returns the help heading for listing subcommands.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3377:8459":{"id":"2:3377:8459","crate_id":2,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3379:171","2:3380:345"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:4015:2875":{"id":"0:4015:2875","crate_id":0,"name":"Exclusive","span":{"filename":"src/builder/arg_settings.rs","begin":[267,4],"end":[267,13]},"visibility":"default","docs":"Deprecated, replaced with [`Arg::exclusive`] and [`Arg::is_exclusive_set`]","links":{"`Arg::is_exclusive_set`":"0:3816:1564","`Arg::exclusive`":"0:3816:1564"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:4522:6772":{"id":"0:4522:6772","crate_id":0,"name":"ValidValue","span":{"filename":"src/error/context.rs","begin":[12,4],"end":[12,14]},"visibility":"default","docs":"Accepted values","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:10205:1932":{"id":"2:10205:1932","crate_id":2,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10206:1509","2:10207:9917","2:10209:9208"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:765:287":{"id":"0:765:287","crate_id":0,"name":"args","span":{"filename":"src/builder/command.rs","begin":[215,4],"end":[228,5]},"visibility":"public","docs":"Adds multiple [arguments] to the list of valid possibilities.\n\n# Examples\n\n```no_run\n# use clap::{Command, arg, Arg};\nCommand::new(\"myprog\")\n    .args(&[\n        arg!(\"[debug] -d 'turns on debugging info'\"),\n        Arg::new(\"input\").help(\"the input file to use\")\n    ])\n# ;\n```\n[arguments]: Arg","links":{"Arg":"0:3816:1564"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["args",{"kind":"generic","inner":"I"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8367:151","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"T"}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3816:1564","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2848:21287":{"id":"2:2848:21287","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:495:3990":{"id":"0:495:3990","crate_id":0,"name":"is_required_set","span":{"filename":"src/builder/arg.rs","begin":[4517,4],"end":[4519,5]},"visibility":"public","docs":"Reports whether [`Arg::required`] is set","links":{"`Arg::required`":"0:3816:1564"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:23:25-0:4561:6700":{"id":"b:23:25-0:4561:6700","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.8.1/src/equivalent.rs","begin":[18,0],"end":[18,46]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2897:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2837:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Q"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Equivalent","id":"23:22:8796","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ContextValue","id":"0:4561:6700","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["23:28:8790"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"Q"}}},"0:3993:2430":{"id":"0:3993:2430","crate_id":0,"name":"HidePossibleValues","span":{"filename":"src/builder/arg_settings.rs","begin":[144,4],"end":[144,22]},"visibility":"default","docs":"Deprecated, replaced with [`Arg::hide_possible_values`] and\n[`Arg::is_hide_possible_values_set`]","links":{"`Arg::is_hide_possible_values_set`":"0:3816:1564","`Arg::hide_possible_values`":"0:3816:1564"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"a:2:3252:209-0:3347:1562":{"id":"a:2:3252:209-0:3347:1562","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3252:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgAction","id":"0:3347:1562","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2843-0:4432:2162":{"id":"b:2:2843-0:4432:2162","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2837:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:4432:2162","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["2:2845:2590"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4836":{"id":"0:4836","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/value_source.rs","begin":[2,29],"end":[2,38]},"visibility":{"restricted":{"parent":"0:2423:7162","path":"::parser::matches::value_source"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2892:173","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4823:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4823:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:4837:593"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1541":{"id":"0:1541","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1774,0],"end":[1778,1]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Default","id":"2:3218:115","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"NonEmptyStringValueParser","id":"0:4474:2175","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:1542:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13022:8598":{"id":"2:13022:8598","crate_id":2,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13024:7523","2:13025:21361","2:13026:21362"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Searcher","id":"2:13016:8599","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:5:787-0:4468:2172":{"id":"b:5:787-0:4468:2172","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:783:211","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BoolishValueParser","id":"0:4468:2172","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:789:4115","5:790:4707","5:791:9628"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4772:648":{"id":"0:4772:648","crate_id":0,"name":"fmt","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1460,16],"end":[1460,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10215:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10204:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3169-0:4686:7087":{"id":"b:2:3169-0:4686:7087","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4686:7087","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3172:2288"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:2148:7238":{"id":"0:2148:7238","crate_id":0,"name":"get_many","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[156,4],"end":[162,5]},"visibility":"public","docs":"Iterate over values of a specific option or positional argument.\n\ni.e. an argument that takes multiple values at runtime.\n\nReturns an error if the wrong type was used.\n\nReturns `None` if the option wasn't present.\n\n# Panic\n\nIf the argument definition and access mismatch.  To handle this case programmatically, see\n[`ArgMatches::try_get_many`].\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, value_parser, ArgAction};\nlet m = Command::new(\"myprog\")\n    .arg(Arg::new(\"ports\")\n        .action(ArgAction::Append)\n        .value_parser(value_parser!(usize))\n        .short('p')\n        .takes_value(true)\n        .required(true))\n    .get_matches_from(vec![\n        \"myprog\", \"-p\", \"22\", \"-p\", \"80\", \"-p\", \"2020\"\n    ]);\nlet vals: Vec<usize> = m.get_many(\"ports\")\n    .expect(\"`port`is required\")\n    .copied()\n    .collect();\nassert_eq!(vals, [22, 80, 2020]);\n```","links":{"`ArgMatches::try_get_many`":"0:4706:1568"},"attrs":["#[track_caller]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ValuesRef","id":"0:4750:7086","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3967:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3240:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3252:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:928:5556":{"id":"0:928:5556","crate_id":0,"name":"get_short_flag","span":{"filename":"src/builder/command.rs","begin":[3312,4],"end":[3314,5]},"visibility":"public","docs":"Get the short flag of the subcommand.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"char"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3969-0:4706:1568":{"id":"b:2:3969-0:4706:1568","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3967:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4706:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3971:1408"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1462":{"id":"0:1462","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1235,0],"end":[1244,1]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"std::convert::TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i64"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3240:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3252:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RangeBounds","id":"2:3615:6281","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i64"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:4432:2162","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["0:1465:669"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3485":{"id":"0:3485","crate_id":0,"name":null,"span":{"filename":"src/builder/app_settings.rs","begin":[32,16],"end":[32,25]},"visibility":{"restricted":{"parent":"0:227:2151","path":"::builder::app_settings"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"StructuralPartialEq","id":"2:3248:207","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:3386:1579","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1387:907":{"id":"0:1387:907","crate_id":0,"name":"new","span":{"filename":"src/builder/value_parser.rs","begin":[728,4],"end":[730,5]},"visibility":"public","docs":"Implementation for [`ValueParser::os_string`]","links":{"`ValueParser::os_string`":"0:1294:2166"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4422":{"id":"0:4422","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[868,16],"end":[868,21]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Debug","id":"2:10255:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"crate::ValueEnum","id":"0:174:1576","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3240:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3252:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10255:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"EnumValueParser","id":"0:4415:2173","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}},"items":["0:4424:648"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:3240:200-0:4462:2174":{"id":"a:2:3240:200-0:4462:2174","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3240:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FalseyValueParser","id":"0:4462:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:912:5520":{"id":"0:912:5520","crate_id":0,"name":"multicall","span":{"filename":"src/builder/command.rs","begin":[3115,4],"end":[3121,5]},"visibility":"public","docs":"Multiple-personality program dispatched on the binary name (`argv[0]`)\n\nA \"multicall\" executable is a single executable\nthat contains a variety of applets,\nand decides which applet to run based on the name of the file.\nThe executable can be called from different names by creating hard links\nor symbolic links to it.\n\nThis is desirable for:\n- Easy distribution, a single binary that can install hardlinks to access the different\n  personalities.\n- Minimal binary size by sharing common code (e.g. standard library, clap)\n- Custom shells or REPLs where there isn't a single top-level command\n\nSetting `multicall` will cause\n- `argv[0]` to be stripped to the base name and parsed as the first argument, as if\n  [`Command::no_binary_name`][App::no_binary_name] was set.\n- Help and errors to report subcommands as if they were the top-level command\n\nWhen the subcommand is not present, there are several strategies you may employ, depending\non your needs:\n- Let the error percolate up normally\n- Print a specialized error message using the\n  [`Error::context`][crate::Error::context]\n- Print the [help][App::write_help] but this might be ambiguous\n- Disable `multicall` and re-parse it\n- Disable `multicall` and re-parse it with a specific subcommand\n\nWhen detecting the error condition, the [`ErrorKind`] isn't sufficient as a sub-subcommand\nmight report the same error.  Enable\n[`allow_external_subcommands`][App::allow_external_subcommands] if you want to specifically\nget the unrecognized binary name.\n\n**NOTE:** Multicall can't be used with [`no_binary_name`] since they interpret\nthe command name in incompatible ways.\n\n**NOTE:** The multicall command cannot have arguments.\n\n**NOTE:** Applets are slightly semantically different from subcommands,\nso it's recommended to use [`Command::subcommand_help_heading`] and\n[`Command::subcommand_value_name`] to change the descriptive text as above.\n\n# Examples\n\n`hostname` is an example of a multicall executable.\nBoth `hostname` and `dnsdomainname` are provided by the same executable\nand which behaviour to use is based on the executable file name.\n\nThis is desirable when the executable has a primary purpose\nbut there is related functionality that would be convenient to provide\nand implement it to be in the same executable.\n\nThe name of the cmd is essentially unused\nand may be the same as the name of a subcommand.\n\nThe names of the immediate subcommands of the Command\nare matched against the basename of the first argument,\nwhich is conventionally the path of the executable.\n\nThis does not allow the subcommand to be passed as the first non-path argument.\n\n```rust\n# use clap::{Command, ErrorKind};\nlet mut cmd = Command::new(\"hostname\")\n    .multicall(true)\n    .subcommand(Command::new(\"hostname\"))\n    .subcommand(Command::new(\"dnsdomainname\"));\nlet m = cmd.try_get_matches_from_mut(&[\"/usr/bin/hostname\", \"dnsdomainname\"]);\nassert!(m.is_err());\nassert_eq!(m.unwrap_err().kind(), ErrorKind::UnknownArgument);\nlet m = cmd.get_matches_from(&[\"/usr/bin/dnsdomainname\"]);\nassert_eq!(m.subcommand_name(), Some(\"dnsdomainname\"));\n```\n\nBusybox is another common example of a multicall executable\nwith a subcommmand for each applet that can be run directly,\ne.g. with the `cat` applet being run by running `busybox cat`,\nor with `cat` as a link to the `busybox` binary.\n\nThis is desirable when the launcher program has additional options\nor it is useful to run the applet without installing a symlink\ne.g. to test the applet without installing it\nor there may already be a command of that name installed.\n\nTo make an applet usable as both a multicall link and a subcommand\nthe subcommands must be defined both in the top-level Command\nand as subcommands of the \"main\" applet.\n\n```rust\n# use clap::Command;\nfn applet_commands() -> [Command<'static>; 2] {\n    [Command::new(\"true\"), Command::new(\"false\")]\n}\nlet mut cmd = Command::new(\"busybox\")\n    .multicall(true)\n    .subcommand(\n        Command::new(\"busybox\")\n            .subcommand_value_name(\"APPLET\")\n            .subcommand_help_heading(\"APPLETS\")\n            .subcommands(applet_commands()),\n    )\n    .subcommands(applet_commands());\n// When called from the executable's canonical name\n// its applets can be matched as subcommands.\nlet m = cmd.try_get_matches_from_mut(&[\"/usr/bin/busybox\", \"true\"]).unwrap();\nassert_eq!(m.subcommand_name(), Some(\"busybox\"));\nassert_eq!(m.subcommand().unwrap().1.subcommand_name(), Some(\"true\"));\n// When called from a link named after an applet that applet is matched.\nlet m = cmd.get_matches_from(&[\"/usr/bin/true\"]);\nassert_eq!(m.subcommand_name(), Some(\"true\"));\n```\n\n[`no_binary_name`]: crate::Command::no_binary_name\n[`App::subcommand_value_name`]: crate::Command::subcommand_value_name\n[`App::subcommand_help_heading`]: crate::Command::subcommand_help_heading","links":{"App::no_binary_name":"0:4244:1577","`ErrorKind`":"0:4587:1584","crate::Error::context":"0:4640:127","`Command::subcommand_help_heading`":"0:4244:1577","App::write_help":"0:4244:1577","App::allow_external_subcommands":"0:4244:1577","crate::Command::no_binary_name":"0:4244:1577","`Command::subcommand_value_name`":"0:4244:1577"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4694:6693":{"id":"1:4694:6693","crate_id":1,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4695:10021","1:4696:10022","1:4697:10023","1:4699:8665","1:4700:6736","1:4702:6683","1:4703:5724"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Read","id":"1:4612:8660","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:4321":{"id":"0:4321","crate_id":0,"name":null,"span":{"filename":"src/builder/possible_value.rs","begin":[29,43],"end":[29,45]},"visibility":{"restricted":{"parent":"0:1203:2155","path":"::builder::possible_value"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2897:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:4298:1582","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3184-0:4561:6700":{"id":"b:2:3184-0:4561:6700","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ContextValue","id":"0:4561:6700","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3187:127","2:3188:1394"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4386":{"id":"0:4386","crate_id":0,"name":null,"span":{"filename":"src/builder/value_hint.rs","begin":[27,16],"end":[27,25]},"visibility":{"restricted":{"parent":"0:1272:2157","path":"::builder::value_hint"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2892:173","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:4356:1583","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:4356:1583","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:4387:593"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3179-0:4474:2175":{"id":"b:2:3179-0:4474:2175","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3149:217","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"NonEmptyStringValueParser","id":"0:4474:2175","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3182:127","2:3183:1395"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4686:7087":{"id":"0:4686:7087","crate_id":0,"name":"MatchesError","span":{"filename":"src/parser/error.rs","begin":[7,0],"end":[21,1]},"visibility":"public","docs":"Violation of [`ArgMatches`][crate::ArgMatches] assumptions","links":{"crate::ArgMatches":"0:4706:1568"},"attrs":["#[allow(missing_copy_implementations)]","#[non_exhaustive]"],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:4687:7150","0:4690:6810"],"impls":["a:2:9222:7159-0:4686:7087","a:2:3252:209-0:4686:7087","a:2:3240:200-0:4686:7087","a:2:9223:7158-0:4686:7087","a:2:3281:5920-0:4686:7087","b:2:2843-0:4686:7087","b:2:3169-0:4686:7087","b:2:3173-0:4686:7087","b:2:3184-0:4686:7087","b:2:3969-0:4686:7087","b:2:2846-0:4686:7087","b:2:3179-0:4686:7087","b:5:6406-0:4686:7087","b:5:787-0:4686:7087","0:4691","0:4693","0:2041","0:2042"]}},"0:1477:6312":{"id":"0:1477:6312","crate_id":0,"name":"Value","span":{"filename":"src/builder/value_parser.rs","begin":[1379,4],"end":[1379,19]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"b:2:2843-0:4773:1588":{"id":"b:2:2843-0:4773:1588","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2837:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:4773:1588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:2845:2590"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1236":{"id":"0:1236","crate_id":0,"name":null,"span":{"filename":"src/builder/possible_value.rs","begin":[249,0],"end":[253,1]},"visibility":{"restricted":{"parent":"0:1203:2155","path":"::builder::possible_value"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:4298:1582","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["0:1238:669"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:31782:1505":{"id":"2:31782:1505","crate_id":2,"name":"wrapping_sub","span":null,"visibility":"public","docs":"Wrapping (modular) subtraction. Computes `self - rhs`,\nwrapping around at the boundary of the type.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(100u64.wrapping_sub(100), 0);\nassert_eq!(100u64.wrapping_sub(u64::MAX), 101);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4587:1584":{"id":"0:4587:1584","crate_id":0,"name":"ErrorKind","span":{"filename":"src/error/kind.rs","begin":[4,0],"end":[396,1]},"visibility":"public","docs":"Command line argument parser kind of error","links":{},"attrs":["#[non_exhaustive]"],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:4588:6777","0:4590:6810","0:4592:6781","0:4594:6785","0:4596:6212","0:4598:6774","0:4600:6803","0:4602:6798","0:4604:6801","0:4606:6793","0:4608:6805","0:4610:6768","0:4612:6787","0:4614:6789","0:4616:6808","0:4618:6790","0:4620:6729","0:4622:6763","0:4624:6730","0:4626:6815","0:4628:6879","0:4630:6880"],"impls":["0:1841","a:2:9222:7159-0:4587:1584","a:2:3252:209-0:4587:1584","a:2:3240:200-0:4587:1584","a:2:9223:7158-0:4587:1584","a:2:3281:5920-0:4587:1584","b:2:2843-0:4587:1584","b:2:3169-0:4587:1584","b:2:3173-0:4587:1584","b:2:3184-0:4587:1584","b:2:3969-0:4587:1584","b:2:2846-0:4587:1584","b:2:3179-0:4587:1584","b:5:6406-0:4587:1584","b:5:787-0:4587:1584","0:4632","0:4634","0:4635","0:4637","0:4638","0:1843"]}},"1:4612:8660":{"id":"1:4612:8660","crate_id":1,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4613:10791","1:4614:16235","1:4616:16236","1:4617:16237","1:4618:8661","1:4619:16238","1:4620:16239","1:4622:16240","1:4623:9607","1:4624:6013","1:4625:5629","1:4627:5829"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:4458":{"id":"0:4458","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1451,15],"end":[1451,20]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BoolValueParser","id":"0:4456:2171","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:4459:397"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:347:2829":{"id":"0:347:2829","crate_id":0,"name":"unset_setting","span":{"filename":"src/builder/arg.rs","begin":[882,4],"end":[888,5]},"visibility":"public","docs":"Remove a setting from the argument.\n\nSee [`ArgSettings`] for a full list of possibilities and examples.\n\n# Examples\n\n```no_run\n# use clap::{Arg, ArgSettings};\nArg::new(\"config\")\n    .unset_setting(ArgSettings::Required)\n    .unset_setting(ArgSettings::TakesValue)\n# ;\n```\n\n```no_run\n# use clap::{Arg, ArgSettings};\nArg::new(\"config\")\n    .unset_setting(ArgSettings::Required | ArgSettings::TakesValue)\n# ;\n```","links":{"`ArgSettings`":"0:3970:1581"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["setting",{"kind":"generic","inner":"F"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ArgFlags","id":"0:3955:1580","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:489:3966":{"id":"0:489:3966","crate_id":0,"name":"get_index","span":{"filename":"src/builder/arg.rs","begin":[4443,4],"end":[4445,5]},"visibility":"public","docs":"Get the index of this argument, if any","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:331:2742":{"id":"0:331:2742","crate_id":0,"name":"visible_short_alias","span":{"filename":"src/builder/arg.rs","begin":[379,4],"end":[384,5]},"visibility":"public","docs":"Add an alias, which functions as a visible short flag.\n\nLike [`Arg::short_alias`], except that they are visible inside the help message.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n            .arg(Arg::new(\"test\")\n                .long(\"test\")\n                .visible_short_alias('t')\n                .takes_value(true))\n       .get_matches_from(vec![\n            \"prog\", \"-t\", \"coffee\"\n        ]);\nassert!(m.contains_id(\"test\"));\nassert_eq!(m.value_of(\"test\"), Some(\"coffee\"));\n```","links":{"`Arg::short_alias`":"0:3816:1564"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["name",{"kind":"primitive","inner":"char"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1382:2002":{"id":"0:1382:2002","crate_id":0,"name":"parse","span":{"filename":"src/builder/value_parser.rs","begin":[697,4],"end":[710,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["cmd",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Command","id":"0:755:1563","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}],["_arg",{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Arg","id":"0:3816:1564","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["value",{"kind":"resolved_path","inner":{"name":"std::ffi::OsString","id":"1:2920:170","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Value","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:1362:2165","args":null,"param_names":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"crate::Error","id":"0:4640:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3169-0:4415:2173":{"id":"b:2:3169-0:4415:2173","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"EnumValueParser","id":"0:4415:2173","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}},"items":["2:3172:2288"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1309":{"id":"0:1309","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[73,0],"end":[221,1]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1294:2166","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:1310:907","0:1312:349","0:1313:1822","0:1314:4013","0:1315:6349"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2843-0:4791:1586":{"id":"b:2:2843-0:4791:1586","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2837:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OsValues","id":"0:4791:1586","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:2845:2590"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3358:2262":{"id":"0:3358:2262","crate_id":0,"name":"SetFalse","span":{"filename":"src/builder/action.rs","begin":[162,4],"end":[162,12]},"visibility":"default","docs":"When encountered, act as if `\"false\"` was encountered on the command-line\n\nIf no [`default_value`][super::Arg::default_value] is set, it will be `true`.\n\nNo value is allowed. To optionally accept a value, see\n[`Arg::default_missing_value`][super::Arg::default_missing_value]\n\n# Examples\n\n```rust\n# use clap::Command;\n# use clap::Arg;\nlet cmd = Command::new(\"mycmd\")\n    .arg(\n        Arg::new(\"flag\")\n            .long(\"flag\")\n            .action(clap::ArgAction::SetFalse)\n    );\n\nlet matches = cmd.clone().try_get_matches_from([\"mycmd\", \"--flag\", \"--flag\"]).unwrap();\nassert!(matches.contains_id(\"flag\"));\nassert_eq!(matches.occurrences_of(\"flag\"), 0);\nassert_eq!(\n    matches.get_one::<bool>(\"flag\").copied(),\n    Some(false)\n);\n\nlet matches = cmd.try_get_matches_from([\"mycmd\"]).unwrap();\nassert!(matches.contains_id(\"flag\"));\nassert_eq!(matches.occurrences_of(\"flag\"), 0);\nassert_eq!(\n    matches.get_one::<bool>(\"flag\").copied(),\n    Some(true)\n);\n```","links":{"super::Arg::default_missing_value":"0:3816:1564","super::Arg::default_value":"0:3816:1564"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:3252:209":{"id":"2:3252:209","crate_id":2,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:4295":{"id":"0:4295","crate_id":0,"name":null,"span":{"filename":"src/builder/command.rs","begin":[77,34],"end":[77,36]},"visibility":{"restricted":{"parent":"0:649:1810","path":"::builder::command"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2897:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:4244:1577","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3969-0:4750:7086":{"id":"b:2:3969-0:4750:7086","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3967:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValuesRef","id":"0:4750:7086","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["2:3971:1408"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:423:2619":{"id":"0:423:2619","crate_id":0,"name":"groups","span":{"filename":"src/builder/arg.rs","begin":[3126,4],"end":[3129,5]},"visibility":"public","docs":"The names of [`ArgGroup`]'s the argument belongs to.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg};\nArg::new(\"debug\")\n    .long(\"debug\")\n    .groups(&[\"mode\", \"verbosity\"])\n# ;\n```\n\nArguments can be members of multiple groups and then the group checked as if it\nwas one of said arguments.\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"debug\")\n        .long(\"debug\")\n        .groups(&[\"mode\", \"verbosity\"]))\n    .arg(Arg::new(\"verbose\")\n        .long(\"verbose\")\n        .groups(&[\"mode\", \"verbosity\"]))\n    .get_matches_from(vec![\n        \"prog\", \"--debug\"\n    ]);\nassert!(m.contains_id(\"mode\"));\nassert!(m.contains_id(\"verbosity\"));\n```\n\n[`ArgGroup`]: crate::ArgGroup","links":{"crate::ArgGroup":"0:3903:1565"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["group_ids",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Key","id":"0:3235:2593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:156:2052":{"id":"0:156:2052","crate_id":0,"name":"into_app","span":{"filename":"src/derive.rs","begin":[265,4],"end":[265,43]},"visibility":"default","docs":"Deprecated, replaced with `CommandFactory::command`","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Command","id":"0:755:1563","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:831:3569":{"id":"0:831:3569","crate_id":0,"name":"hide_possible_values","span":{"filename":"src/builder/command.rs","begin":[1304,4],"end":[1310,5]},"visibility":"public","docs":"Tells `clap` *not* to print possible values when displaying help information.\n\nThis can be useful if there are many values, or they are explained elsewhere.\n\nTo set this per argument, see\n[`Arg::hide_possible_values`][crate::Arg::hide_possible_values].\n\n**NOTE:** This choice is propagated to all child subcommands.","links":{"crate::Arg::hide_possible_values":"0:3816:1564"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:326:2625":{"id":"0:326:2625","crate_id":0,"name":"aliases","span":{"filename":"src/builder/arg.rs","begin":[298,4],"end":[301,5]},"visibility":"public","docs":"Add aliases, which function as hidden long flags.\n\nThis is more efficient, and easier than creating multiple hidden subcommands as one only\nneeds to check for the existence of this command, and not all variants.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ArgAction};\nlet m = Command::new(\"prog\")\n            .arg(Arg::new(\"test\")\n                    .long(\"test\")\n                    .aliases(&[\"do-stuff\", \"do-tests\", \"tests\"])\n                    .action(ArgAction::SetTrue)\n                    .help(\"the file to add\")\n                    .required(false))\n            .get_matches_from(vec![\n                \"prog\", \"--do-tests\"\n            ]);\nassert_eq!(*m.get_one::<bool>(\"test\").expect(\"defaulted by clap\"), true);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["names",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:510:4020":{"id":"0:510:4020","crate_id":0,"name":"is_hide_default_value_set","span":{"filename":"src/builder/arg.rs","begin":[4612,4],"end":[4614,5]},"visibility":"public","docs":"Report whether [`Arg::hide_default_value`] is set","links":{"`Arg::hide_default_value`":"0:3816:1564"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3240:200-0:4415:2173":{"id":"a:2:3240:200-0:4415:2173","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3240:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"EnumValueParser","id":"0:4415:2173","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1552":{"id":"0:1552","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1836,0],"end":[1841,1]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"ValueParserFactory","id":"0:1543:2167","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"std::path::PathBuf","id":"1:7318:176","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:1553:1574","0:1554:2158"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:10264:8502":{"id":"2:10264:8502","crate_id":2,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10265:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1326":{"id":"0:1326","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[323,0],"end":[328,1]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":"Create an `i64` [`ValueParser`] from a `N..M` range\n\nSee [`RangedI64ValueParser`] for more control over the output type.\n\nSee also [`RangedU64ValueParser`]\n\n# Examples\n\n```rust\nlet mut cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"port\")\n            .long(\"port\")\n            .value_parser(3000..4000)\n            .takes_value(true)\n            .required(true)\n    );\n\nlet m = cmd.try_get_matches_from_mut([\"cmd\", \"--port\", \"3001\"]).unwrap();\nlet port: i64 = *m.get_one(\"port\")\n    .expect(\"required\");\nassert_eq!(port, 3001);\n```","links":{"`ValueParser`":"0:1294:2166","`RangedI64ValueParser`":"0:4432:2162","`RangedU64ValueParser`":"0:4444:2163"},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Range","id":"2:45737:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i64"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1294:2166","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:1327:669"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1471:907":{"id":"0:1471:907","crate_id":0,"name":"new","span":{"filename":"src/builder/value_parser.rs","begin":[1296,4],"end":[1298,5]},"visibility":"public","docs":"Select full range of `u64`","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:563":{"id":"0:563","crate_id":0,"name":null,"span":{"filename":"src/builder/arg.rs","begin":[5080,0],"end":[5084,1]},"visibility":{"restricted":{"parent":"0:242:1829","path":"::builder::arg"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["lt","gt","ge","le"],"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2938:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3816:1564","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3816:1564","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["0:565:984"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1554:2158":{"id":"0:1554:2158","crate_id":0,"name":"value_parser","span":{"filename":"src/builder/value_parser.rs","begin":[1838,4],"end":[1840,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"qualified_path","inner":{"name":"Parser","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:1543:2167","args":null,"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:787-0:4587:1584":{"id":"b:5:787-0:4587:1584","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:783:211","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4587:1584","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:789:4115","5:790:4707","5:791:9628"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:8371-0:4750:7086":{"id":"b:2:8371-0:4750:7086","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8565:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8367:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValuesRef","id":"0:4750:7086","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["2:8373:2018","2:8374:7522","2:8375:755"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"0:4572:1518":{"id":"0:4572:1518","crate_id":0,"name":"0","span":{"filename":"src/error/context.rs","begin":[52,12],"end":[52,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7764:223","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}},"2:3281:5920":{"id":"2:3281:5920","crate_id":2,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3969-0:4425:2161":{"id":"b:2:3969-0:4425:2161","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3967:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValuesParser","id":"0:4425:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3971:1408"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1424:59":{"id":"0:1424:59","crate_id":0,"name":"default","span":{"filename":"src/builder/value_parser.rs","begin":[941,4],"end":[943,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3252:209-0:4587:1584":{"id":"a:2:3252:209-0:4587:1584","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3252:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4587:1584","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1544:1574":{"id":"0:1544:1574","crate_id":0,"name":"Parser","span":{"filename":"src/builder/value_parser.rs","begin":[1819,4],"end":[1819,16]},"visibility":"default","docs":"Generated parser, usually [`ValueParser`].\n\nIt should at least be a type that supports `Into<ValueParser>`.  A non-`ValueParser` type\nallows the caller to do further initialization on the parser.","links":{"`ValueParser`":"0:1294:2166"},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"0:949:5576":{"id":"0:949:5576","crate_id":0,"name":"get_all_short_flag_aliases","span":{"filename":"src/builder/command.rs","begin":[3388,4],"end":[3390,5]},"visibility":"public","docs":"Iterate through the set of *all* the short aliases for this subcommand, both visible and hidden.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8565:157","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"primitive","inner":"char"}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"outlives":"'_"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:31804:68531":{"id":"2:31804:68531","crate_id":2,"name":"overflowing_shl","span":null,"visibility":"public","docs":"Shifts self left by `rhs` bits.\n\nReturns a tuple of the shifted version of self along with a boolean\nindicating whether the shift value was larger than or equal to the\nnumber of bits. If the shift value is too large, then value is\nmasked (N-1) where N is the number of bits, and this value is then\nused to perform the shift.\n\n# Examples\n\nBasic usage\n\n```\nassert_eq!(0x1u64.overflowing_shl(4), (0x10, false));\nassert_eq!(0x1u64.overflowing_shl(132), (0x10, true));\n```","links":{},"attrs":["#[stable(feature = \"wrapping\", since = \"1.7.0\")]","#[rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"u64"},{"kind":"primitive","inner":"bool"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3240:200-0:4474:2175":{"id":"a:2:3240:200-0:4474:2175","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3240:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"NonEmptyStringValueParser","id":"0:4474:2175","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:9223:7158-0:5071:1570":{"id":"a:2:9223:7158-0:5071:1570","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9223:7158","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:5071:1570","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:31772:1425":{"id":"2:31772:1425","crate_id":2,"name":"unchecked_shr","span":null,"visibility":"public","docs":"Unchecked shift right. Computes `self >> rhs`, assuming that\n`rhs` is less than the number of bits in `self`.\n\n# Safety\n\nThis results in undefined behavior if `rhs` is larger than\nor equal to the number of bits in `self`,\ni.e. when [`checked_shr`] would return `None`.\n\n[`checked_shr`]: u64::checked_shr","links":{"u64::checked_shr":"1:15859:8332"},"attrs":["#[unstable(feature = \"unchecked_math\", reason = \"niche optimization path\",\nissue = \"85122\",)]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]","#[rustc_const_unstable(feature = \"const_inherent_unchecked_arith\", issue =\n\"85122\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3281:5920-0:4773:1588":{"id":"a:2:3281:5920-0:4773:1588","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3281:5920","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:4773:1588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:5086":{"id":"0:5086","crate_id":0,"name":null,"span":{"filename":"src/util/color.rs","begin":[2,33],"end":[2,42]},"visibility":{"restricted":{"parent":"0:3332:1529","path":"::util::color"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"StructuralPartialEq","id":"2:3248:207","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:5071:1570","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1011:4018":{"id":"0:1011:4018","crate_id":0,"name":"is_hide_set","span":{"filename":"src/builder/command.rs","begin":[3723,4],"end":[3725,5]},"visibility":"public","docs":"Report whether [`Command::hide`] is set","links":{"`Command::hide`":"0:4244:1577"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3184-0:4791:1586":{"id":"b:2:3184-0:4791:1586","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OsValues","id":"0:4791:1586","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:3187:127","2:3188:1394"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:866:1907":{"id":"0:866:1907","crate_id":0,"name":"setting","span":{"filename":"src/builder/command.rs","begin":[1777,4],"end":[1783,5]},"visibility":"public","docs":"Apply a setting for the current command or subcommand.\n\nSee [`Command::global_setting`] to apply a setting to this command and all subcommands.\n\nSee [`AppSettings`] for a full list of possibilities and examples.\n\n# Examples\n\n```no_run\n# use clap::{Command, AppSettings};\nCommand::new(\"myprog\")\n    .setting(AppSettings::SubcommandRequired)\n    .setting(AppSettings::AllowLeadingHyphen)\n# ;\n```\nor\n```no_run\n# use clap::{Command, AppSettings};\nCommand::new(\"myprog\")\n    .setting(AppSettings::SubcommandRequired | AppSettings::AllowLeadingHyphen)\n# ;\n```","links":{"`AppSettings`":"0:3386:1579","`Command::global_setting`":"0:4244:1577"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["setting",{"kind":"generic","inner":"F"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"AppFlags","id":"0:3371:1578","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:31797:68524":{"id":"2:31797:68524","crate_id":2,"name":"abs_diff","span":null,"visibility":"public","docs":"Computes the absolute difference between `self` and `other`.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(100u64.abs_diff(80), 20u64);\nassert_eq!(100u64.abs_diff(110), 10u64);\n```","links":{},"attrs":["#[stable(feature = \"int_abs_diff\", since = \"1.60.0\")]","#[rustc_const_stable(feature = \"int_abs_diff\", since = \"1.60.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:462:3921":{"id":"0:462:3921","crate_id":0,"name":"overrides_with_all","span":{"filename":"src/builder/arg.rs","begin":[4247,4],"end":[4250,5]},"visibility":"public","docs":"Sets multiple mutually overridable arguments by name.\n\ni.e. this argument and the following argument will override each other in POSIX style\n(whichever argument was specified at runtime **last** \"wins\")\n\n**NOTE:** When an argument is overridden it is essentially as if it never was used, any\nconflicts, requirements, etc. are evaluated **after** all \"overrides\" have been removed\n\n**NOTE:** Overriding an argument implies they [conflict][Arg::conflicts_with_all`].\n\n# Examples\n\n```rust\n# use clap::{Command, arg};\nlet m = Command::new(\"prog\")\n    .arg(arg!(-f --flag \"some flag\")\n        .conflicts_with(\"color\"))\n    .arg(arg!(-d --debug \"other flag\"))\n    .arg(arg!(-c --color \"third flag\")\n        .overrides_with_all(&[\"flag\", \"debug\"]))\n    .get_matches_from(vec![\n        \"prog\", \"-f\", \"-d\", \"-c\"]);\n            //    ^~~~~~^~~~~~~~~ flag and debug are overridden by color\n\nassert!(m.is_present(\"color\")); // even though flag conflicts with color, it's as if flag\n                                // and debug were never used because they were overridden\n                                // with color\nassert!(!m.is_present(\"debug\"));\nassert!(!m.is_present(\"flag\"));\n```","links":{"Arg::conflicts_with_all`":"0:3816:1564"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["names",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Key","id":"0:3235:2593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4644":{"id":"0:4644","crate_id":0,"name":null,"span":{"filename":"src/error/mod.rs","begin":[39,9],"end":[39,14]},"visibility":{"restricted":{"parent":"0:1777:1566","path":"::error"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10255:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4640:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:4645:648"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1277:59":{"id":"0:1277:59","crate_id":0,"name":"default","span":{"filename":"src/builder/value_hint.rs","begin":[70,4],"end":[72,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1579":{"id":"0:1579","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1902,0],"end":[1907,1]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"ValueParserFactory","id":"0:1543:2167","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"primitive","inner":"u64"},"items":["0:1580:1574","0:1581:2158"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2843-0:5071:1570":{"id":"b:2:2843-0:5071:1570","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2837:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:5071:1570","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2845:2590"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13381:10691":{"id":"2:13381:10691","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"crate::ops::Index":"2:3544:4471","`str`":"1:15845:8320","str::slice_mut_unchecked":"1:15845:8320"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:911:5435":{"id":"0:911:5435","crate_id":0,"name":"subcommand_negates_reqs","span":{"filename":"src/builder/command.rs","begin":[2991,4],"end":[2997,5]},"visibility":"public","docs":"Allows [`subcommands`] to override all requirements of the parent command.\n\nFor example, if you had a subcommand or top level application with a required argument\nthat is only required as long as there is no subcommand present,\nusing this setting would allow you to set those arguments to [`Arg::required(true)`]\nand yet receive no error so long as the user uses a valid subcommand instead.\n\n**NOTE:** This defaults to false (using subcommand does *not* negate requirements)\n\n# Examples\n\nThis first example shows that it is an error to not use a required argument\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet err = Command::new(\"myprog\")\n    .subcommand_negates_reqs(true)\n    .arg(Arg::new(\"opt\").required(true))\n    .subcommand(Command::new(\"test\"))\n    .try_get_matches_from(vec![\n        \"myprog\"\n    ]);\nassert!(err.is_err());\nassert_eq!(err.unwrap_err().kind(), ErrorKind::MissingRequiredArgument);\n# ;\n```\n\nThis next example shows that it is no longer error to not use a required argument if a\nvalid subcommand is used.\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet noerr = Command::new(\"myprog\")\n    .subcommand_negates_reqs(true)\n    .arg(Arg::new(\"opt\").required(true))\n    .subcommand(Command::new(\"test\"))\n    .try_get_matches_from(vec![\n        \"myprog\", \"test\"\n    ]);\nassert!(noerr.is_ok());\n# ;\n```\n\n[`Arg::required(true)`]: crate::Arg::required()\n[`subcommands`]: crate::Command::subcommand()","links":{"crate::Command::subcommand()":"0:4244:1577","crate::Arg::required()":"0:3816:1564"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4023":{"id":"0:4023","crate_id":0,"name":null,"span":{"filename":"src/builder/arg_settings.rs","begin":[32,33],"end":[32,38]},"visibility":{"restricted":{"parent":"0:637:2154","path":"::builder::arg_settings"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgSettings","id":"0:3970:1581","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:4024:397"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1402:59":{"id":"0:1402:59","crate_id":0,"name":"default","span":{"filename":"src/builder/value_parser.rs","begin":[806,4],"end":[808,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4602:6798":{"id":"0:4602:6798","crate_id":0,"name":"TooManyValues","span":{"filename":"src/error/kind.rs","begin":[158,4],"end":[158,17]},"visibility":"default","docs":"Occurs when a user provides more values for an argument than were defined by setting\n[`Arg::max_values`].\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet result = Command::new(\"prog\")\n    .arg(Arg::new(\"arg\")\n        .max_values(2))\n    .try_get_matches_from(vec![\"prog\", \"too\", \"many\", \"values\"]);\nassert!(result.is_err());\nassert_eq!(result.unwrap_err().kind(), ErrorKind::TooManyValues);\n```\n[`Arg::max_values`]: crate::Arg::max_values()","links":{"crate::Arg::max_values()":"0:3816:1564"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:31821:68546":{"id":"2:31821:68546","crate_id":2,"name":"to_le_bytes","span":null,"visibility":"public","docs":"Return the memory representation of this integer as a byte array in\nlittle-endian byte order.\n\n\n\n# Examples\n\n```\nlet bytes = 0x1234567890123456u64.to_le_bytes();\nassert_eq!(bytes, [0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]);\n```","links":{},"attrs":["#[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]","#[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"array","inner":{"type":{"kind":"primitive","inner":"u8"},"len":"8"}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3967:68":{"id":"2:3967:68","crate_id":2,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3968:1408"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"0:3979:3202":{"id":"0:3979:3202","crate_id":0,"name":"ForbidEmptyValues","span":{"filename":"src/builder/arg_settings.rs","begin":[78,4],"end":[78,21]},"visibility":"default","docs":"Deprecated, replaced with [`Arg::value_parser(NonEmptyStringValueParser::new())`]","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"b:2:2843-0:4468:2172":{"id":"b:2:2843-0:4468:2172","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2837:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BoolishValueParser","id":"0:4468:2172","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2845:2590"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"23:28:8790":{"id":"23:28:8790","crate_id":23,"name":"equivalent","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.8.1/src/equivalent.rs","begin":[24,4],"end":[24,41]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["key",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"K"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9222:7159-0:4462:2174":{"id":"a:2:9222:7159-0:4462:2174","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9222:7159","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FalseyValueParser","id":"0:4462:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:842:1812":{"id":"0:842:1812","crate_id":0,"name":"author","span":{"filename":"src/builder/command.rs","begin":[1457,4],"end":[1460,5]},"visibility":"public","docs":"Sets the author(s) for the help message.\n\n**Pro-tip:** Use `clap`s convenience macro [`crate_authors!`] to\nautomatically set your application's author(s) to the same thing as your\ncrate at compile time.\n\n# Examples\n\n```no_run\n# use clap::Command;\nCommand::new(\"myprog\")\n     .author(\"Me, me@mymain.com\")\n# ;\n```\n[`crate_authors!`]: ./macro.crate_authors!.html","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["author",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3969-0:5071:1570":{"id":"b:2:3969-0:5071:1570","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3967:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:5071:1570","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3971:1408"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3407:2354":{"id":"0:3407:2354","crate_id":0,"name":"SubcommandRequired","span":{"filename":"src/builder/app_settings.rs","begin":[166,4],"end":[166,22]},"visibility":"default","docs":"Deprecated, replaced with [`Command::subcommand_required`] and\n[`Command::is_subcommand_required_set`]","links":{"`Command::is_subcommand_required_set`":"0:4244:1577","`Command::subcommand_required`":"0:4244:1577"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:10897:203":{"id":"2:10897:203","crate_id":2,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:10899:171","2:10900:4118","2:10901:7101","2:10902:21288","2:10903:21289","2:10904:740","2:10905:741"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:10888:10621","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:3417:2371":{"id":"0:3417:2371","crate_id":0,"name":"UseLongFormatForHelpSubcommand","span":{"filename":"src/builder/app_settings.rs","begin":[215,4],"end":[215,34]},"visibility":"default","docs":"Deprecated, this is now the default","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:70":{"id":"0:70","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[46,34],"end":[46,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::error::Result","name":"Result","id":"0:1854:195","glob":false}},"0:1534":{"id":"0:1534","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1740,0],"end":[1745,1]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"NonEmptyStringValueParser","id":"0:4474:2175","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:1535:907"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1491:669":{"id":"0:1491:669","crate_id":0,"name":"from","span":{"filename":"src/builder/value_parser.rs","begin":[1434,4],"end":[1439,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["range",{"kind":"generic","inner":"B"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:966:5600":{"id":"0:966:5600","crate_id":0,"name":"get_before_long_help","span":{"filename":"src/builder/command.rs","begin":[3482,4],"end":[3484,5]},"visibility":"public","docs":"Returns the help heading for listing subcommands.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1405:907":{"id":"0:1405:907","crate_id":0,"name":"new","span":{"filename":"src/builder/value_parser.rs","begin":[875,4],"end":[878,5]},"visibility":"public","docs":"Parse an [`ValueEnum`][crate::ValueEnum]","links":{"crate::ValueEnum":"0:174:1576"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:895:4515":{"id":"0:895:4515","crate_id":0,"name":"long_flag_aliases","span":{"filename":"src/builder/command.rs","begin":[2485,4],"end":[2490,5]},"visibility":"public","docs":"Add aliases, which function as \"hidden\" long flag subcommands.\n\nThese will automatically dispatch as if this subcommand was used. This is more efficient,\nand easier than creating multiple hidden subcommands as one only needs to check for the\nexistence of this command, and not all variants.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, };\nlet m = Command::new(\"myprog\")\n            .subcommand(Command::new(\"test\").long_flag(\"test\")\n                .long_flag_aliases(&[\"testing\", \"testall\", \"test_all\"]))\n                .arg(Arg::new(\"input\")\n                            .help(\"the file to add\")\n                            .required(false))\n            .get_matches_from(vec![\"myprog\", \"--testing\"]);\nassert_eq!(m.subcommand_name(), Some(\"test\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["names",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:811:4755":{"id":"0:811:4755","crate_id":0,"name":"render_version","span":{"filename":"src/builder/command.rs","begin":[848,4],"end":[850,5]},"visibility":"public","docs":"Version message rendered as if the user ran `-V`.\n\nSee also [`Command::render_long_version`].\n\n### Coloring\n\nThis function does not try to color the message nor it inserts any [ANSI escape codes].\n\n### Examples\n\n```rust\n# use clap::Command;\nuse std::io;\nlet cmd = Command::new(\"myprog\");\nprintln!(\"{}\", cmd.render_version());\n```\n[`io::Write`]: std::io::Write\n[`-V` (short)]: Command::version()\n[`--version` (long)]: Command::long_version()\n[ANSI escape codes]: https://en.wikipedia.org/wiki/ANSI_escape_code","links":{"`Command::render_long_version`":"0:4244:1577"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2151:7275":{"id":"0:2151:7275","crate_id":0,"name":"remove_one","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[246,4],"end":[249,5]},"visibility":"public","docs":"Returns the value of a specific option or positional argument.\n\ni.e. an argument that [takes an additional value][crate::Arg::takes_value] at runtime.\n\nReturns an error if the wrong type was used.  No item will have been removed.\n\nReturns `None` if the option wasn't present.\n\n*NOTE:* This will always return `Some(value)` if [`default_value`] has been set.\n[`ArgMatches::value_source`] can be used to check if a value is present at runtime.\n\n# Panic\n\nIf the argument definition and access mismatch.  To handle this case programmatically, see\n[`ArgMatches::try_remove_one`].\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, value_parser};\nlet mut m = Command::new(\"myprog\")\n    .arg(Arg::new(\"file\")\n        .required(true)\n        .takes_value(true))\n    .get_matches_from(vec![\n        \"myprog\", \"file.txt\",\n    ]);\nlet vals: String = m.remove_one(\"file\")\n    .expect(\"`file`is required\");\nassert_eq!(vals, \"file.txt\");\n```\n[option]: crate::Arg::takes_value()\n[positional]: crate::Arg::index()\n[`default_value`]: crate::Arg::default_value()","links":{"crate::Arg::takes_value":"0:3816:1564","`ArgMatches::value_source`":"0:4706:1568","crate::Arg::default_value()":"0:3816:1564","`ArgMatches::try_remove_one`":"0:4706:1568"},"attrs":["#[track_caller]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3967:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3240:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3252:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13425:63644":{"id":"2:13425:63644","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"str::rsplitn":"1:15845:8320","prim@char":"1:15839:8315","self::pattern":"2:12997:8603"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:49424:8629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:8597","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3179-0:4409:2177":{"id":"b:2:3179-0:4409:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3149:217","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"PathBufValueParser","id":"0:4409:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3182:127","2:3183:1395"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:3240:200-0:4640:127":{"id":"a:2:3240:200-0:4640:127","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3240:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4640:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:31810:68536":{"id":"2:31810:68536","crate_id":2,"name":"div_floor","span":null,"visibility":"public","docs":"Calculates the quotient of `self` and `rhs`, rounding the result towards negative infinity.\n\nThis is the same as performing `self / rhs` for all unsigned integers.\n\n# Panics\n\nThis function will panic if `rhs` is zero.\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(int_roundings)]\nassert_eq!(7_u64.div_floor(4), 1);\n```","links":{},"attrs":["#[unstable(feature = \"int_roundings\", issue = \"88581\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:932:3934":{"id":"0:932:3934","crate_id":0,"name":"get_help_heading","span":{"filename":"src/builder/command.rs","begin":[3344,4],"end":[3346,5]},"visibility":"public","docs":"Deprecated, replaced with [`Command::get_next_help_heading`]","links":{"`Command::get_next_help_heading`":"0:4244:1577"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4642:769":{"id":"0:4642:769","crate_id":0,"name":"kind","span":{"filename":"src/error/mod.rs","begin":[47,4],"end":[47,23]},"visibility":"public","docs":"Deprecated, replaced with [`Error::kind()`]","links":{"`Error::kind()`":"0:4640:127"},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4587:1584","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"25:90:8839":{"id":"25:90:8839","crate_id":25,"name":"Fragment","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["25:91:1499","25:92:21338","25:93:21339"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10255:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:203:2026":{"id":"0:203:2026","crate_id":0,"name":"update_from_arg_matches_mut","span":{"filename":"src/derive.rs","begin":[556,4],"end":[558,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["matches",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4706:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4640:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:31829:68550":{"id":"2:31829:68550","crate_id":2,"name":"from_ne_bytes","span":null,"visibility":"public","docs":"Create a native endian integer value from its memory representation\nas a byte array in native endianness.\n\nAs the target platform's native endianness is used, portable code\nlikely wants to use [`from_be_bytes`] or [`from_le_bytes`], as\nappropriate instead.\n\n[`from_be_bytes`]: Self::from_be_bytes\n[`from_le_bytes`]: Self::from_le_bytes\n\n\n\n# Examples\n\n```\nlet value = u64::from_ne_bytes(if cfg!(target_endian = \"big\") {\n    [0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\n} else {\n    [0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\n});\nassert_eq!(value, 0x1234567890123456);\n```\n\nWhen starting from a slice rather than an array, fallible conversion APIs can be used:\n\n```\nfn read_ne_u64(input: &mut &[u8]) -> u64 {\n    let (int_bytes, rest) = input.split_at(std::mem::size_of::<u64>());\n    *input = rest;\n    u64::from_ne_bytes(int_bytes.try_into().unwrap())\n}\n```","links":{"Self::from_be_bytes":"1:15859:8332","Self::from_le_bytes":"1:15859:8332"},"attrs":["#[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]","#[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["bytes",{"kind":"array","inner":{"type":{"kind":"primitive","inner":"u8"},"len":"8"}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:31740:68481":{"id":"2:31740:68481","crate_id":2,"name":"trailing_zeros","span":null,"visibility":"public","docs":"Returns the number of trailing zeros in the binary representation\nof `self`.\n\n# Examples\n\nBasic usage:\n\n```\nlet n = 0b0101000u64;\n\nassert_eq!(n.trailing_zeros(), 3);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3252:209-0:4468:2172":{"id":"a:2:3252:209-0:4468:2172","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3252:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BoolishValueParser","id":"0:4468:2172","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:174:1576":{"id":"0:174:1576","crate_id":0,"name":"ValueEnum","span":{"filename":"src/derive.rs","begin":[487,0],"end":[508,1]},"visibility":"public","docs":"Parse arguments into enums.\n\nWhen deriving [`Parser`], a field whose type implements `ValueEnum` can have the attribute\n`#[clap(value_enum)]` which will\n- Call [`Arg::possible_values`][crate::Arg::possible_values]\n- Allowing using the `#[clap(default_value_t)]` attribute without implementing `Display`.\n\nSee the\n[derive reference](https://github.com/clap-rs/clap/blob/v3.2.12/examples/derive_ref/README.md)\nfor attributes and best practices.\n\n**NOTE:** Deriving requires the `derive` feature flag\n\n# Example\n\n ```ignore\n#[derive(clap::Parser)]\nstruct Args {\n    #[clap(value_enum)]\n    level: Level,\n}\n\n#[derive(clap::ValueEnum, Clone)]\nenum Level {\n    Debug,\n    Info,\n    Warning,\n    Error,\n}\n```","links":{"crate::Arg::possible_values":"0:3816:1564","`Parser`":"0:127:1574"},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:175:2133","0:177:1757","0:180:2139"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:1347:397":{"id":"0:1347:397","crate_id":0,"name":"clone","span":{"filename":"src/builder/value_parser.rs","begin":[527,4],"end":[535,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1854:195":{"id":"0:1854:195","crate_id":0,"name":"Result","span":{"filename":"src/error/mod.rs","begin":[32,0],"end":[32,48]},"visibility":"public","docs":"Short hand for [`Result`] type\n\n[`Result`]: std::result::Result","links":{"std::result::Result":"2:47483:195"},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"StdResult","id":"2:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4640:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"synthetic":false}}}],"where_predicates":[]}}},"a:2:3240:200-0:4791:1586":{"id":"a:2:3240:200-0:4791:1586","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3240:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OsValues","id":"0:4791:1586","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2846-0:4456:2171":{"id":"b:2:2846-0:4456:2171","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2840:8484","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BoolValueParser","id":"0:4456:2171","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2848:21287"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1496:907":{"id":"0:1496:907","crate_id":0,"name":"new","span":{"filename":"src/builder/value_parser.rs","begin":[1457,4],"end":[1459,5]},"visibility":"public","docs":"Implementation for [`ValueParser::bool`]","links":{"`ValueParser::bool`":"0:1294:2166"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9223:7158-0:4823:1587":{"id":"a:2:9223:7158-0:4823:1587","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9223:7158","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4823:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:31834:68554":{"id":"2:31834:68554","crate_id":2,"name":"carrying_mul","span":null,"visibility":"public","docs":"Calculates the \"full multiplication\" `self * rhs + carry`\nwithout the possibility to overflow.\n\nThis returns the low-order (wrapping) bits and the high-order (overflow) bits\nof the result as two separate values, in that order.\n\nPerforms \"long multiplication\" which takes in an extra amount to add, and may return an\nadditional amount of overflow. This allows for chaining together multiple\nmultiplications to create \"big integers\" which represent larger values.\n\n# Examples\n\nBasic usage:\n\nPlease note that this example is shared between integer types.\nWhich explains why `u32` is used here.\n\n```\n#![feature(bigint_helper_methods)]\nassert_eq!(5u32.carrying_mul(2, 0), (10, 0));\nassert_eq!(5u32.carrying_mul(2, 10), (20, 0));\nassert_eq!(1_000_000_000u32.carrying_mul(10, 0), (1410065408, 2));\nassert_eq!(1_000_000_000u32.carrying_mul(10, 10), (1410065418, 2));\nassert_eq!(u64::MAX.carrying_mul(u64::MAX, u64::MAX), (0, u64::MAX));\n```\n\nIf `carry` is zero, this is similar to [`overflowing_mul`](Self::overflowing_mul),\nexcept that it gives the value of the overflow instead of just whether one happened:\n\n```\n#![feature(bigint_helper_methods)]\nlet r = u8::carrying_mul(7, 13, 0);\nassert_eq!((r.0, r.1 != 0), u8::overflowing_mul(7, 13));\nlet r = u8::carrying_mul(13, 42, 0);\nassert_eq!((r.0, r.1 != 0), u8::overflowing_mul(13, 42));\n```\n\nThe value of the first field in the returned tuple matches what you'd get\nby combining the [`wrapping_mul`](Self::wrapping_mul) and\n[`wrapping_add`](Self::wrapping_add) methods:\n\n```\n#![feature(bigint_helper_methods)]\nassert_eq!(\n    789_u16.carrying_mul(456, 123).0,\n    789_u16.wrapping_mul(456).wrapping_add(123),\n);\n```","links":{"Self::wrapping_add":"1:15859:8332","Self::overflowing_mul":"1:15859:8332","Self::wrapping_mul":"1:15859:8332"},"attrs":["#[unstable(feature = \"bigint_helper_methods\", issue = \"85532\")]","#[rustc_const_unstable(feature = \"bigint_helper_methods\", issue = \"85532\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}],["carry",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"u64"},{"kind":"primitive","inner":"u64"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:31735:68478":{"id":"2:31735:68478","crate_id":2,"name":"BITS","span":null,"visibility":"public","docs":"The size of this integer type in bits.\n\n# Examples\n\n```\nassert_eq!(u64::BITS, 64);\n```","links":{},"attrs":["#[stable(feature = \"int_bits_const\", since = \"1.53.0\")]"],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"primitive","inner":"u32"},"default":"64"}},"0:4400:397":{"id":"0:4400:397","crate_id":0,"name":"clone","span":{"filename":"src/builder/value_parser.rs","begin":[674,15],"end":[674,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"StringValueParser","id":"0:4397:2164","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1562:1574":{"id":"0:1562:1574","crate_id":0,"name":"Parser","span":{"filename":"src/builder/value_parser.rs","begin":[1857,4],"end":[1857,43]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:4432:2162","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i8"}}],"bindings":[]}},"param_names":[]}}}},"0:4450":{"id":"0:4450","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1288,15],"end":[1288,20]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"$crate::clone::Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"std::convert::TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"RangedU64ValueParser","id":"0:4444:2163","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["0:4452:397"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:902:5312":{"id":"0:902:5312","crate_id":0,"name":"visible_short_flag_aliases","span":{"filename":"src/builder/command.rs","begin":[2625,4],"end":[2631,5]},"visibility":"public","docs":"Add aliases, which function as *visible* short flag subcommands.\n\nSee [`Command::short_flag_aliases`].\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg, };\nlet m = Command::new(\"myprog\")\n            .subcommand(Command::new(\"test\").short_flag('b')\n                .visible_short_flag_aliases(&['t']))\n            .get_matches_from(vec![\"myprog\", \"-t\"]);\nassert_eq!(m.subcommand_name(), Some(\"test\"));\n```\n[`App::short_flag_aliases`]: Command::short_flag_aliases()","links":{"`Command::short_flag_aliases`":"0:4244:1577"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["names",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"char"}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4721:894":{"id":"0:4721:894","crate_id":0,"name":"ne","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[67,32],"end":[67,41]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4706:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4472":{"id":"0:4472","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1647,22],"end":[1647,27]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10255:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BoolishValueParser","id":"0:4468:2172","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:4473:648"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3441:2423":{"id":"0:3441:2423","crate_id":0,"name":"PropagateVersion","span":{"filename":"src/builder/app_settings.rs","begin":[352,4],"end":[352,20]},"visibility":"default","docs":"Deprecated, replaced with [`Command::propagate_version`] and [`Command::is_propagate_version_set`]","links":{"`Command::is_propagate_version_set`":"0:4244:1577","`Command::propagate_version`":"0:4244:1577"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:959:5588":{"id":"0:959:5588","crate_id":0,"name":"get_subcommands_mut","span":{"filename":"src/builder/command.rs","begin":[3439,4],"end":[3441,5]},"visibility":"public","docs":"Iterate through the set of subcommands, getting a mutable reference to each.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8565:157","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"App","id":"0:4244:1577","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}}}}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:862:4997":{"id":"0:862:4997","crate_id":0,"name":"override_help","span":{"filename":"src/builder/command.rs","begin":[1698,4],"end":[1701,5]},"visibility":"public","docs":"Overrides the `clap` generated help message (both `-h` and `--help`).\n\nThis should only be used when the auto-generated message does not suffice.\n\n**NOTE:** This **only** replaces the help message for the current\ncommand, meaning if you are using subcommands, those help messages will\nstill be auto-generated unless you specify a [`Command::override_help`] for\nthem as well.\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg};\nCommand::new(\"myapp\")\n    .override_help(\"myapp v1.0\\n\\\n           Does awesome things\\n\\\n           (C) me@mail.com\\n\\n\\\n\n           USAGE: myapp <opts> <command>\\n\\n\\\n\n           Options:\\n\\\n           -h, --help       Display this message\\n\\\n           -V, --version    Display version info\\n\\\n           -s <stuff>       Do something with stuff\\n\\\n           -v               Be verbose\\n\\n\\\n\n           Commands:\\n\\\n           help             Print this message\\n\\\n           work             Do some work\")\n# ;\n```","links":{"`Command::override_help`":"0:4244:1577"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["help",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:31745:68484":{"id":"2:31745:68484","crate_id":2,"name":"swap_bytes","span":null,"visibility":"public","docs":"Reverses the byte order of the integer.\n\n# Examples\n\nBasic usage:\n\n```\nlet n = 0x1234567890123456u64;\nlet m = n.swap_bytes();\n\nassert_eq!(m, 0x5634129078563412);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3179-0:4244:1577":{"id":"b:2:3179-0:4244:1577","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3149:217","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:4244:1577","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["2:3182:127","2:3183:1395"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:421:1908":{"id":"0:421:1908","crate_id":0,"name":"group","span":{"filename":"src/builder/arg.rs","begin":[3088,4],"end":[3091,5]},"visibility":"public","docs":"The name of the [`ArgGroup`] the argument belongs to.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg};\nArg::new(\"debug\")\n    .long(\"debug\")\n    .group(\"mode\")\n# ;\n```\n\nMultiple arguments can be a member of a single group and then the group checked as if it\nwas one of said arguments.\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"debug\")\n        .long(\"debug\")\n        .group(\"mode\"))\n    .arg(Arg::new(\"verbose\")\n        .long(\"verbose\")\n        .group(\"mode\"))\n    .get_matches_from(vec![\n        \"prog\", \"--debug\"\n    ]);\nassert!(m.contains_id(\"mode\"));\n```\n\n[`ArgGroup`]: crate::ArgGroup","links":{"crate::ArgGroup":"0:3903:1565"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["group_id",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Key","id":"0:3235:2593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:891:5257":{"id":"0:891:5257","crate_id":0,"name":"long_flag_alias","span":{"filename":"src/builder/command.rs","begin":[2398,4],"end":[2401,5]},"visibility":"public","docs":"Add an alias, which functions as a \"hidden\" long flag subcommand.\n\nThis will automatically dispatch as if this subcommand was used. This is more efficient,\nand easier than creating multiple hidden subcommands as one only needs to check for the\nexistence of this command, and not all variants.\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg, };\nlet m = Command::new(\"myprog\")\n            .subcommand(Command::new(\"test\").long_flag(\"test\")\n                .long_flag_alias(\"testing\"))\n            .get_matches_from(vec![\"myprog\", \"--testing\"]);\nassert_eq!(m.subcommand_name(), Some(\"test\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["name",{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3179-0:4763:7085":{"id":"b:2:3179-0:4763:7085","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3149:217","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"RawValues","id":"0:4763:7085","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:3182:127","2:3183:1395"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:511:4022":{"id":"0:511:4022","crate_id":0,"name":"is_hide_possible_values_set","span":{"filename":"src/builder/arg.rs","begin":[4617,4],"end":[4619,5]},"visibility":"public","docs":"Report whether [`Arg::hide_possible_values`] is set","links":{"`Arg::hide_possible_values`":"0:3816:1564"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2897:124":{"id":"2:2897:124","crate_id":2,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2892:173","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:4319":{"id":"0:4319","crate_id":0,"name":null,"span":{"filename":"src/builder/possible_value.rs","begin":[29,43],"end":[29,45]},"visibility":{"restricted":{"parent":"0:1203:2155","path":"::builder::possible_value"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"StructuralEq","id":"2:3249:206","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:4298:1582","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:340:2874":{"id":"0:340:2874","crate_id":0,"name":"exclusive","span":{"filename":"src/builder/arg.rs","begin":[737,4],"end":[743,5]},"visibility":"public","docs":"This argument must be passed alone; it conflicts with all other arguments.\n\n# Examples\n\n```rust\n# use clap::Arg;\nArg::new(\"config\")\n    .exclusive(true)\n# ;\n```\n\nSetting an exclusive argument and having any other arguments present at runtime\nis an error.\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"exclusive\")\n        .takes_value(true)\n        .exclusive(true)\n        .long(\"exclusive\"))\n    .arg(Arg::new(\"debug\")\n        .long(\"debug\"))\n    .arg(Arg::new(\"input\"))\n    .try_get_matches_from(vec![\n        \"prog\", \"--exclusive\", \"file.conf\", \"file.txt\"\n    ]);\n\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind(), ErrorKind::ArgumentConflict);\n```","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1003:5655":{"id":"0:1003:5655","crate_id":0,"name":"is_dont_collapse_args_in_usage_set","span":{"filename":"src/builder/command.rs","begin":[3683,4],"end":[3685,5]},"visibility":"public","docs":"Report whether [`Command::dont_collapse_args_in_usage`] is set","links":{"`Command::dont_collapse_args_in_usage`":"0:4244:1577"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1843":{"id":"0:1843","crate_id":0,"name":null,"span":{"filename":"src/error/kind.rs","begin":[436,0],"end":[440,1]},"visibility":{"restricted":{"parent":"0:1840:769","path":"::error::kind"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10262:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4587:1584","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:1844:648"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4453":{"id":"0:4453","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1288,22],"end":[1288,27]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Debug","id":"2:10255:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"std::convert::TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10255:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"RangedU64ValueParser","id":"0:4444:2163","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["0:4455:648"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3184-0:3347:1562":{"id":"b:2:3184-0:3347:1562","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgAction","id":"0:3347:1562","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3187:127","2:3188:1394"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:410:3529":{"id":"0:410:3529","crate_id":0,"name":"display_order","span":{"filename":"src/builder/arg.rs","begin":[2665,4],"end":[2668,5]},"visibility":"public","docs":"Allows custom ordering of args within the help message.\n\nArgs with a lower value will be displayed first in the help message. This is helpful when\none would like to emphasise frequently used args, or prioritize those towards the top of\nthe list. Args with duplicate display orders will be displayed in alphabetical order.\n\n**NOTE:** The default is 999 for all arguments.\n\n**NOTE:** This setting is ignored for [positional arguments] which are always displayed in\n[index] order.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"a\") // Typically args are grouped alphabetically by name.\n                             // Args without a display_order have a value of 999 and are\n                             // displayed alphabetically with all other 999 valued args.\n        .long(\"long-option\")\n        .short('o')\n        .takes_value(true)\n        .help(\"Some help and text\"))\n    .arg(Arg::new(\"b\")\n        .long(\"other-option\")\n        .short('O')\n        .takes_value(true)\n        .display_order(1)   // In order to force this arg to appear *first*\n                            // all we have to do is give it a value lower than 999.\n                            // Any other args with a value of 1 will be displayed\n                            // alphabetically with this one...then 2 values, then 3, etc.\n        .help(\"I should be first!\"))\n    .get_matches_from(vec![\n        \"prog\", \"--help\"\n    ]);\n```\n\nThe above example displays the following help message\n\n```text\ncust-ord\n\nUSAGE:\n    cust-ord [OPTIONS]\n\nOPTIONS:\n    -h, --help                Print help information\n    -V, --version             Print version information\n    -O, --other-option <b>    I should be first!\n    -o, --long-option <a>     Some help and text\n```\n[positional arguments]: Arg::index()\n[index]: Arg::index()","links":{"Arg::index()":"0:3816:1564"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["ord",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:31761:68497":{"id":"2:31761:68497","crate_id":2,"name":"checked_rem_euclid","span":null,"visibility":"public","docs":"Checked Euclidean modulo. Computes `self.rem_euclid(rhs)`, returning `None`\nif `rhs == 0`.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(5u64.checked_rem_euclid(2), Some(1));\nassert_eq!(5u64.checked_rem_euclid(0), None);\n```","links":{},"attrs":["#[stable(feature = \"euclidean_division\", since = \"1.38.0\")]","#[rustc_const_stable(feature = \"const_euclidean_int_methods\", since =\n\"1.52.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:31792:68519":{"id":"2:31792:68519","crate_id":2,"name":"overflowing_add","span":null,"visibility":"public","docs":"Calculates `self` + `rhs`\n\nReturns a tuple of the addition along with a boolean indicating\nwhether an arithmetic overflow would occur. If an overflow would\nhave occurred then the wrapped value is returned.\n\n# Examples\n\nBasic usage\n\n```\n\nassert_eq!(5u64.overflowing_add(2), (7, false));\nassert_eq!(u64::MAX.overflowing_add(1), (0, true));\n```","links":{},"attrs":["#[stable(feature = \"wrapping\", since = \"1.7.0\")]","#[rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"u64"},{"kind":"primitive","inner":"bool"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3169-0:4587:1584":{"id":"b:2:3169-0:4587:1584","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4587:1584","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3172:2288"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1525:6312":{"id":"0:1525:6312","crate_id":0,"name":"Value","span":{"filename":"src/builder/value_parser.rs","begin":[1667,4],"end":[1667,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"primitive","inner":"bool"}}},"b:2:2843-0:4686:7087":{"id":"b:2:2843-0:4686:7087","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2837:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4686:7087","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2845:2590"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3329:8451":{"id":"2:3329:8451","crate_id":2,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3331:171","2:3332:1089"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:170:1575":{"id":"0:170:1575","crate_id":0,"name":"Subcommand","span":{"filename":"src/derive.rs","begin":[441,0],"end":[454,1]},"visibility":"public","docs":"Parse a sub-command into a user-defined enum.\n\nImplementing this trait lets a parent container delegate subcommand behavior to `Self`.\nwith:\n- `#[clap(subcommand)] field: SubCmd`: Attribute can be used with either struct fields or enum\n  variants that impl `Subcommand`.\n- `#[clap(flatten)] Variant(SubCmd)`: Attribute can only be used with enum variants that impl\n  `Subcommand`.\n\nSee the\n[derive reference](https://github.com/clap-rs/clap/blob/v3.2.12/examples/derive_ref/README.md)\nfor attributes and best practices.\n\n**NOTE:** Deriving requires the `derive` feature flag\n\n# Example\n\n ```ignore\n#[derive(clap::Parser)]\nstruct Args {\n    #[clap(subcommand)]\n    action: Action,\n}\n\n#[derive(clap::Subcommand)]\nenum Action {\n    Add,\n    Remove,\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:171:2115","0:172:2116","0:173:2118"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromArgMatches","id":"0:162:1573","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":["0:208"]}},"2:13366:67023":{"id":"2:13366:67023","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:15845:8320"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3179-0:4801:1585":{"id":"b:2:3179-0:4801:1585","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3149:217","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:4801:1585","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:3182:127","2:3183:1395"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:396:3354":{"id":"0:396:3354","crate_id":0,"name":"default_values","span":{"filename":"src/builder/arg.rs","begin":[2192,4],"end":[2195,5]},"visibility":"public","docs":"Value for the argument when not present.\n\nSee [`Arg::default_value`].\n\n[`Arg::default_value`]: Arg::default_value()","links":{"Arg::default_value()":"0:3816:1564"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["vals",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3169-0:4791:1586":{"id":"b:2:3169-0:4791:1586","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OsValues","id":"0:4791:1586","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:3172:2288"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:5639:10664":{"id":"1:5639:10664","crate_id":1,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5640:12029","1:5641:6000"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10545:10621","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:31748:68487":{"id":"2:31748:68487","crate_id":2,"name":"from_le","span":null,"visibility":"public","docs":"Converts an integer from little endian to the target's endianness.\n\nOn little endian this is a no-op. On big endian the bytes are\nswapped.\n\n# Examples\n\nBasic usage:\n\n```\nlet n = 0x1Au64;\n\nif cfg!(target_endian = \"little\") {\n    assert_eq!(u64::from_le(n), n)\n} else {\n    assert_eq!(u64::from_le(n), n.swap_bytes())\n}\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["x",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4540:6811":{"id":"0:4540:6811","crate_id":0,"name":"SuggestedArg","span":{"filename":"src/error/context.rs","begin":[30,4],"end":[30,16]},"visibility":"default","docs":"Potential fix for the user","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:1019:5683":{"id":"0:1019:5683","crate_id":0,"name":"is_subcommand_precedence_over_arg_set","span":{"filename":"src/builder/command.rs","begin":[3771,4],"end":[3773,5]},"visibility":"public","docs":"Report whether [`Command::subcommand_precedence_over_arg`] is set","links":{"`Command::subcommand_precedence_over_arg`":"0:4244:1577"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3173-0:4801:1585":{"id":"b:2:3173-0:4801:1585","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:4801:1585","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:3175:669"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3184-0:1294:2166":{"id":"b:2:3184-0:1294:2166","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1294:2166","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3187:127","2:3188:1394"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1216:907":{"id":"0:1216:907","crate_id":0,"name":"new","span":{"filename":"src/builder/possible_value.rs","begin":[55,4],"end":[60,5]},"visibility":"public","docs":"Create a [`PossibleValue`] with its name.\n\nThe name will be used to decide whether this value was provided by the user to an argument.\n\n**NOTE:** In case it is not [hidden] it will also be shown in help messages for arguments\nthat use it as a [possible value] and have not hidden them through [`Arg::hide_possible_values(true)`].\n\n# Examples\n\n```rust\n# use clap::PossibleValue;\nPossibleValue::new(\"fast\")\n# ;\n```\n[hidden]: PossibleValue::hide\n[possible value]: crate::Arg::possible_values\n[`Arg::hide_possible_values(true)`]: crate::Arg::hide_possible_values()","links":{"`PossibleValue`":"0:4298:1582","PossibleValue::hide":"0:4298:1582","crate::Arg::hide_possible_values()":"0:3816:1564","crate::Arg::possible_values":"0:3816:1564"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["name",{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5078":{"id":"0:5078","crate_id":0,"name":null,"span":{"filename":"src/util/color.rs","begin":[2,9],"end":[2,14]},"visibility":{"restricted":{"parent":"0:3332:1529","path":"::util::color"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10255:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:5071:1570","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:5079:648"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3179-0:4587:1584":{"id":"b:2:3179-0:4587:1584","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3149:217","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4587:1584","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3182:127","2:3183:1395"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3173-0:4409:2177":{"id":"b:2:3173-0:4409:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"PathBufValueParser","id":"0:4409:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3175:669"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3419:2375":{"id":"0:3419:2375","crate_id":0,"name":"SubcommandsNegateReqs","span":{"filename":"src/builder/app_settings.rs","begin":[226,4],"end":[226,25]},"visibility":"default","docs":"Deprecated, replaced with [`Command::subcommand_negates_reqs`] and\n[`Command::is_subcommand_negates_reqs_set`]","links":{"`Command::subcommand_negates_reqs`":"0:4244:1577","`Command::is_subcommand_negates_reqs_set`":"0:4244:1577"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:823:4830":{"id":"0:823:4830","crate_id":0,"name":"disable_version_flag","span":{"filename":"src/builder/command.rs","begin":[1096,4],"end":[1102,5]},"visibility":"public","docs":"Disables `-V` and `--version` flag.\n\n# Examples\n\n```rust\n# use clap::{Command, ErrorKind};\nlet res = Command::new(\"myprog\")\n    .disable_version_flag(true)\n    .try_get_matches_from(vec![\n        \"myprog\", \"-V\"\n    ]);\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind(), ErrorKind::UnknownArgument);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13391:67026":{"id":"2:13391:67026","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:49584:8621","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2322":{"id":"0:2322","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1612,0],"end":[1616,1]},"visibility":{"restricted":{"parent":"0:2077:7161","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["rfold","advance_back_by","try_rfold","rfind","nth_back"],"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedIterator","id":"2:8411:120","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OsValues","id":"0:4791:1586","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["0:2324:7523"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:6445:10658":{"id":"1:6445:10658","crate_id":1,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6446:21427","1:6447:14704","1:6448:21428","1:6449:21429","1:6450:21430","1:6451:21431"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10545:10621","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:4828:7121":{"id":"0:4828:7121","crate_id":0,"name":"CommandLine","span":{"filename":"src/parser/matches/value_source.rs","begin":[10,4],"end":[10,15]},"visibility":"default","docs":"Value was passed in on the command-line","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:1506:59":{"id":"0:1506:59","crate_id":0,"name":"default","span":{"filename":"src/builder/value_parser.rs","begin":[1507,4],"end":[1509,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:31780:1503":{"id":"2:31780:1503","crate_id":2,"name":"wrapping_add","span":null,"visibility":"public","docs":"Wrapping (modular) addition. Computes `self + rhs`,\nwrapping around at the boundary of the type.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(200u64.wrapping_add(55), 255);\nassert_eq!(200u64.wrapping_add(u64::MAX), 199);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:382:2137":{"id":"0:382:2137","crate_id":0,"name":"ignore_case","span":{"filename":"src/builder/arg.rs","begin":[1664,4],"end":[1670,5]},"visibility":"public","docs":"Match values against [`Arg::possible_values`] without matching case.\n\nWhen other arguments are conditionally required based on the\nvalue of a case-insensitive argument, the equality check done\nby [`Arg::required_if_eq`], [`Arg::required_if_eq_any`], or\n[`Arg::required_if_eq_all`] is case-insensitive.\n\n\n**NOTE:** Setting this requires [`Arg::takes_value`]\n\n**NOTE:** To do unicode case folding, enable the `unicode` feature flag.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"pv\")\n    .arg(Arg::new(\"option\")\n        .long(\"option\")\n        .takes_value(true)\n        .ignore_case(true)\n        .value_parser([\"test123\"]))\n    .get_matches_from(vec![\n        \"pv\", \"--option\", \"TeSt123\",\n    ]);\n\nassert!(m.value_of(\"option\").unwrap().eq_ignore_ascii_case(\"test123\"));\n```\n\nThis setting also works when multiple values can be defined:\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"pv\")\n    .arg(Arg::new(\"option\")\n        .short('o')\n        .long(\"option\")\n        .takes_value(true)\n        .ignore_case(true)\n        .multiple_values(true)\n        .value_parser([\"test123\", \"test321\"]))\n    .get_matches_from(vec![\n        \"pv\", \"--option\", \"TeSt123\", \"teST123\", \"tESt321\"\n    ]);\n\nlet matched_vals = m.values_of(\"option\").unwrap().collect::<Vec<_>>();\nassert_eq!(&*matched_vals, &[\"TeSt123\", \"teST123\", \"tESt321\"]);\n```","links":{"`Arg::required_if_eq_all`":"0:3816:1564","`Arg::required_if_eq_any`":"0:3816:1564","`Arg::takes_value`":"0:3816:1564","`Arg::possible_values`":"0:3816:1564","`Arg::required_if_eq`":"0:3816:1564"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3354:2247":{"id":"0:3354:2247","crate_id":0,"name":"IncOccurrence","span":{"filename":"src/builder/action.rs","begin":[90,4],"end":[90,17]},"visibility":"default","docs":"Deprecated, replaced with [`ArgAction::SetTrue`] or [`ArgAction::Count`]","links":{"`ArgAction::Count`":"0:3347:1562","`ArgAction::SetTrue`":"0:3347:1562"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:408:2616":{"id":"0:408:2616","crate_id":0,"name":"long_help","span":{"filename":"src/builder/arg.rs","begin":[2605,4],"end":[2608,5]},"visibility":"public","docs":"Sets the description of the argument for long help (`--help`).\n\nTypically this a more detailed (multi-line) message\nthat describes the arg.\n\nIf [`Arg::help`] is not specified, this message will be displayed for `-h`.\n\n**NOTE:** Only [`Arg::help`] is used in completion script generation in order to be concise\n\n# Examples\n\nAny valid UTF-8 is allowed in the help text. The one exception is when one wishes to\ninclude a newline in the help text and have the following text be properly aligned with all\nthe other help text.\n\nSetting `help` displays a short message to the side of the argument when the user passes\n`-h` or `--help` (by default).\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .long(\"config\")\n        .long_help(\n\"The config file used by the myprog must be in JSON format\nwith only valid keys and may not contain other nonsense\nthat cannot be read by this program. Obviously I'm going on\nand on, so I'll stop now.\"))\n    .get_matches_from(vec![\n        \"prog\", \"--help\"\n    ]);\n```\n\nThe above example displays\n\n```text\nprog\n\nUSAGE:\n    prog [OPTIONS]\n\nOPTIONS:\n        --config\n            The config file used by the myprog must be in JSON format\n            with only valid keys and may not contain other nonsense\n            that cannot be read by this program. Obviously I'm going on\n            and on, so I'll stop now.\n\n    -h, --help\n            Print help information\n\n    -V, --version\n            Print version information\n```\n[`Arg::help`]: Arg::help()","links":{"Arg::help()":"0:3816:1564"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["h",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl Into<Option<&'help str>>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3173-0:5071:1570":{"id":"b:2:3173-0:5071:1570","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:5071:1570","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3175:669"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1388":{"id":"0:1388","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[733,0],"end":[753,1]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["possible_values","parse"],"trait":{"kind":"resolved_path","inner":{"name":"TypedValueParser","id":"0:1362:2165","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OsStringValueParser","id":"0:4403:2176","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:1389:6312","0:1390:6352","0:1391:2002"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1397:6312":{"id":"0:1397:6312","crate_id":0,"name":"Value","span":{"filename":"src/builder/value_parser.rs","begin":[776,4],"end":[776,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"PathBuf","id":"1:7318:176","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"0:967:5601":{"id":"0:967:5601","crate_id":0,"name":"get_after_help","span":{"filename":"src/builder/command.rs","begin":[3488,4],"end":[3490,5]},"visibility":"public","docs":"Returns the help heading for listing subcommands.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4479:648":{"id":"0:4479:648","crate_id":0,"name":"fmt","span":{"filename":"src/builder/value_parser.rs","begin":[1736,22],"end":[1736,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10215:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10204:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3995:2326":{"id":"0:3995:2326","crate_id":0,"name":"AllowHyphenValues","span":{"filename":"src/builder/arg_settings.rs","begin":[154,4],"end":[154,21]},"visibility":"default","docs":"Deprecated, replaced with [`Arg::allow_hyphen_values`] and\n[`Arg::is_allow_hyphen_values_set`]","links":{"`Arg::allow_hyphen_values`":"0:3816:1564","`Arg::is_allow_hyphen_values_set`":"0:3816:1564"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:4460":{"id":"0:4460","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1451,22],"end":[1451,27]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10255:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BoolValueParser","id":"0:4456:2171","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:4461:648"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3969-0:4515:6699":{"id":"b:2:3969-0:4515:6699","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3967:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:4515:6699","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3971:1408"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3975:2898":{"id":"0:3975:2898","crate_id":0,"name":"MultipleOccurrences","span":{"filename":"src/builder/arg_settings.rs","begin":[58,4],"end":[58,23]},"visibility":"default","docs":"Deprecated, replaced with [`Arg::action`] ([Issue #3772](https://github.com/clap-rs/clap/issues/3772))","links":{"`Arg::action`":"0:3816:1564"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:1916":{"id":"0:1916","crate_id":0,"name":null,"span":{"filename":"src/error/mod.rs","begin":[994,0],"end":[998,1]},"visibility":{"restricted":{"parent":"0:1777:1566","path":"::error"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"2:48422:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4640:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:1917:669"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:9222:7159-0:3386:1579":{"id":"a:2:9222:7159-0:3386:1579","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9222:7159","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:3386:1579","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1386":{"id":"0:1386","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[726,0],"end":[731,1]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"OsStringValueParser","id":"0:4403:2176","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:1387:907"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4399":{"id":"0:4399","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[674,15],"end":[674,20]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"StringValueParser","id":"0:4397:2164","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:4400:397"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:31764:68500":{"id":"2:31764:68500","crate_id":2,"name":"log10","span":null,"visibility":"public","docs":"Returns the base 10 logarithm of the number, rounded down.\n\n# Panics\n\nWhen the number is zero it panics in debug mode and the\nreturn value is 0 in release mode.\n\n# Example\n\n```\n#![feature(int_log)]\nassert_eq!(10u64.log10(), 1);\n```","links":{},"attrs":["#[unstable(feature = \"int_log\", issue = \"70887\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]","#[track_caller]","#[allow(arithmetic_overflow)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1364:6352":{"id":"0:1364:6352","crate_id":0,"name":"parse_ref","span":{"filename":"src/builder/value_parser.rs","begin":[612,4],"end":[617,43]},"visibility":"default","docs":"Parse the argument value\n\nWhen `arg` is `None`, an external subcommand value is being parsed.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["cmd",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Command","id":"0:755:1563","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}],["arg",{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Arg","id":"0:3816:1564","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["value",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"std::ffi::OsStr","id":"1:2923:169","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Value","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:1362:2165","args":null,"param_names":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"crate::Error","id":"0:4640:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"a:2:9223:7158-0:4298:1582":{"id":"a:2:9223:7158-0:4298:1582","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9223:7158","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:4298:1582","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:968:5602":{"id":"0:968:5602","crate_id":0,"name":"get_after_long_help","span":{"filename":"src/builder/command.rs","begin":[3494,4],"end":[3496,5]},"visibility":"public","docs":"Returns the help heading for listing subcommands.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5087":{"id":"0:5087","crate_id":0,"name":null,"span":{"filename":"src/util/color.rs","begin":[2,33],"end":[2,42]},"visibility":{"restricted":{"parent":"0:3332:1529","path":"::util::color"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2892:173","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:5071:1570","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:5071:1570","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:5088:593"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13027:8596":{"id":"2:13027:8596","crate_id":2,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:8598","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:1280:1757":{"id":"0:1280:1757","crate_id":0,"name":"from_str","span":{"filename":"src/builder/value_hint.rs","begin":[77,4],"end":[94,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["s",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12936:1756","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1572:2158":{"id":"0:1572:2158","crate_id":0,"name":"value_parser","span":{"filename":"src/builder/value_parser.rs","begin":[1882,4],"end":[1886,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"qualified_path","inner":{"name":"Parser","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:1543:2167","args":null,"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4389":{"id":"0:4389","crate_id":0,"name":null,"span":{"filename":"src/builder/value_hint.rs","begin":[27,27],"end":[27,29]},"visibility":{"restricted":{"parent":"0:1272:2157","path":"::builder::value_hint"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2897:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:4356:1583","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:9223:7158-0:4356:1583":{"id":"a:2:9223:7158-0:4356:1583","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9223:7158","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:4356:1583","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1548:2158":{"id":"0:1548:2158","crate_id":0,"name":"value_parser","span":{"filename":"src/builder/value_parser.rs","begin":[1826,4],"end":[1828,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"qualified_path","inner":{"name":"Parser","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:1543:2167","args":null,"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:31813:68539":{"id":"2:31813:68539","crate_id":2,"name":"checked_next_multiple_of","span":null,"visibility":"public","docs":"Calculates the smallest value greater than or equal to `self` that\nis a multiple of `rhs`. Returns `None` if `rhs` is zero or the\noperation would result in overflow.\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(int_roundings)]\nassert_eq!(16_u64.checked_next_multiple_of(8), Some(16));\nassert_eq!(23_u64.checked_next_multiple_of(8), Some(24));\nassert_eq!(1_u64.checked_next_multiple_of(0), None);\nassert_eq!(u64::MAX.checked_next_multiple_of(2), None);\n```","links":{},"attrs":["#[unstable(feature = \"int_roundings\", issue = \"88581\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:618:1911":{"id":"0:618:1911","crate_id":0,"name":"multiple","span":{"filename":"src/builder/arg_group.rs","begin":[238,4],"end":[241,5]},"visibility":"public","docs":"Allows more than one of the [`Arg`]s in this group to be used. (Default: `false`)\n\n# Examples\n\nNotice in this example we use *both* the `-f` and `-c` flags which are both part of the\ngroup\n\n```rust\n# use clap::{Command, Arg, ArgGroup};\nlet m = Command::new(\"myprog\")\n    .arg(Arg::new(\"flag\")\n        .short('f'))\n    .arg(Arg::new(\"color\")\n        .short('c'))\n    .group(ArgGroup::new(\"req_flags\")\n        .args(&[\"flag\", \"color\"])\n        .multiple(true))\n    .get_matches_from(vec![\"myprog\", \"-f\", \"-c\"]);\n// maybe we don't know which of the two flags was used...\nassert!(m.contains_id(\"req_flags\"));\n```\nIn this next example, we show the default behavior (i.e. `multiple(false)) which will throw\nan error if more than one of the args in the group was used.\n\n```rust\n# use clap::{Command, Arg, ArgGroup, ErrorKind};\nlet result = Command::new(\"myprog\")\n    .arg(Arg::new(\"flag\")\n        .short('f'))\n    .arg(Arg::new(\"color\")\n        .short('c'))\n    .group(ArgGroup::new(\"req_flags\")\n        .args(&[\"flag\", \"color\"]))\n    .try_get_matches_from(vec![\"myprog\", \"-f\", \"-c\"]);\n// Because we used both args in the group it's an error\nassert!(result.is_err());\nlet err = result.unwrap_err();\nassert_eq!(err.kind(), ErrorKind::ArgumentConflict);\n```\n\n[`Arg`]: crate::Arg","links":{"crate::Arg":"0:3816:1564"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:625:3844":{"id":"0:625:3844","crate_id":0,"name":"conflicts_with_all","span":{"filename":"src/builder/arg_group.rs","begin":[431,4],"end":[436,5]},"visibility":"public","docs":"Specify arguments or groups that must **not** be present when this group is.\n\nExclusion rules function just like [argument exclusion rules], you can name other arguments\nor groups that must *not* be present when one of the arguments from this group are used.\n\n**NOTE:** The names provided may be an argument, or group name\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ArgGroup, ErrorKind};\nlet result = Command::new(\"myprog\")\n    .arg(Arg::new(\"flag\")\n        .short('f'))\n    .arg(Arg::new(\"color\")\n        .short('c'))\n    .arg(Arg::new(\"debug\")\n        .short('d'))\n    .arg(Arg::new(\"verb\")\n        .short('v'))\n    .group(ArgGroup::new(\"req_flags\")\n        .args(&[\"flag\", \"color\"])\n        .conflicts_with_all(&[\"debug\", \"verb\"]))\n    .try_get_matches_from(vec![\"myprog\", \"-c\", \"-v\"]);\n// because we used an arg from the group, and the group conflicts with either \"-v\" or \"-d\"\n// it's an error\nassert!(result.is_err());\nlet err = result.unwrap_err();\nassert_eq!(err.kind(), ErrorKind::ArgumentConflict);\n```\n\n[argument exclusion rules]: crate::Arg::conflicts_with_all()","links":{"crate::Arg::conflicts_with_all()":"0:3816:1564"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["ns",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10270:8509":{"id":"2:10270:8509","crate_id":2,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10271:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:3989:2405":{"id":"0:3989:2405","crate_id":0,"name":"NextLineHelp","span":{"filename":"src/builder/arg_settings.rs","begin":[124,4],"end":[124,16]},"visibility":"default","docs":"Deprecated, replaced with [`Arg::next_line_help`] and [`Arg::is_next_line_help_set`]","links":{"`Arg::is_next_line_help_set`":"0:3816:1564","`Arg::next_line_help`":"0:3816:1564"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:964:5598":{"id":"0:964:5598","crate_id":0,"name":"get_subcommand_value_name","span":{"filename":"src/builder/command.rs","begin":[3470,4],"end":[3472,5]},"visibility":"public","docs":"Returns the subcommand value name.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:977:5613":{"id":"0:977:5613","crate_id":0,"name":"get_arguments","span":{"filename":"src/builder/command.rs","begin":[3529,4],"end":[3531,5]},"visibility":"public","docs":"Iterate through the set of arguments.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8565:157","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3816:1564","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}}}}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:952:5578":{"id":"0:952:5578","crate_id":0,"name":"get_all_long_flag_aliases","span":{"filename":"src/builder/command.rs","begin":[3394,4],"end":[3396,5]},"visibility":"public","docs":"Iterate through the set of *all* the long aliases for this subcommand, both visible and hidden.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8565:157","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"outlives":"'_"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4624:6730":{"id":"0:4624:6730","crate_id":0,"name":"DisplayVersion","span":{"filename":"src/error/kind.rs","begin":[375,4],"end":[375,18]},"visibility":"default","docs":"Not a true \"error\" as it means `--version` or similar was used.\nThe message will be sent to `stdout`.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet result = Command::new(\"prog\")\n    .version(\"3.0\")\n    .try_get_matches_from(vec![\"prog\", \"--version\"]);\nassert!(result.is_err());\nassert_eq!(result.unwrap_err().kind(), ErrorKind::DisplayVersion);\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:996:5642":{"id":"0:996:5642","crate_id":0,"name":"is_disable_version_flag_set","span":{"filename":"src/builder/command.rs","begin":[3647,4],"end":[3649,5]},"visibility":"public","docs":"Report whether [`Command::disable_version_flag`] is set","links":{"`Command::disable_version_flag`":"0:4244:1577"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3184-0:4397:2164":{"id":"b:2:3184-0:4397:2164","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"StringValueParser","id":"0:4397:2164","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3187:127","2:3188:1394"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1475":{"id":"0:1475","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1374,0],"end":[1431,1]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"std::convert::TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3240:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3252:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"kind":"resolved_path","inner":{"name":"std::convert::TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3240:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3252:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"std::error::Error","id":"1:2576:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ToString","id":"5:6404:212","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["possible_values","parse"],"trait":{"kind":"resolved_path","inner":{"name":"TypedValueParser","id":"0:1362:2165","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"RangedU64ValueParser","id":"0:4444:2163","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["0:1477:6312","0:1478:6352"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3173-0:4791:1586":{"id":"b:2:3173-0:4791:1586","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OsValues","id":"0:4791:1586","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:3175:669"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:520":{"id":"0:520","crate_id":0,"name":null,"span":{"filename":"src/builder/arg.rs","begin":[4675,0],"end":[4937,1]},"visibility":{"restricted":{"parent":"0:242:1829","path":"::builder::arg"}},"docs":"# Deprecated","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3816:1564","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3179-0:4561:6700":{"id":"b:2:3179-0:4561:6700","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3149:217","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ContextValue","id":"0:4561:6700","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3182:127","2:3183:1395"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:907:5370":{"id":"0:907:5370","crate_id":0,"name":"allow_external_subcommands","span":{"filename":"src/builder/command.rs","begin":[2798,4],"end":[2804,5]},"visibility":"public","docs":"Assume unexpected positional arguments are a [`subcommand`].\n\nArguments will be stored in the `\"\"` argument in the [`ArgMatches`]\n\n**NOTE:** Use this setting with caution,\nas a truly unexpected argument (i.e. one that is *NOT* an external subcommand)\nwill **not** cause an error and instead be treated as a potential subcommand.\nOne should check for such cases manually and inform the user appropriately.\n\n**NOTE:** A built-in subcommand will be parsed as an external subcommand when escaped with\n`--`.\n\n# Examples\n\n```rust\n# use clap::Command;\n// Assume there is an external subcommand named \"subcmd\"\nlet m = Command::new(\"myprog\")\n    .allow_external_subcommands(true)\n    .get_matches_from(vec![\n        \"myprog\", \"subcmd\", \"--option\", \"value\", \"-fff\", \"--flag\"\n    ]);\n\n// All trailing arguments will be stored under the subcommand's sub-matches using an empty\n// string argument name\nmatch m.subcommand() {\n    Some((external, ext_m)) => {\n         let ext_args: Vec<&str> = ext_m.values_of(\"\").unwrap().collect();\n         assert_eq!(external, \"subcmd\");\n         assert_eq!(ext_args, [\"--option\", \"value\", \"-fff\", \"--flag\"]);\n    },\n    _ => {},\n}\n```\n\n[`subcommand`]: crate::Command::subcommand()\n[`ArgMatches`]: crate::ArgMatches\n[`ErrorKind::UnknownArgument`]: crate::ErrorKind::UnknownArgument","links":{"crate::ArgMatches":"0:4706:1568","crate::Command::subcommand()":"0:4244:1577"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:888:261":{"id":"0:888:261","crate_id":0,"name":"alias","span":{"filename":"src/builder/command.rs","begin":[2353,4],"end":[2356,5]},"visibility":"public","docs":"Sets a hidden alias to this subcommand.\n\nThis allows the subcommand to be accessed via *either* the original name, or this given\nalias. This is more efficient and easier than creating multiple hidden subcommands as one\nonly needs to check for the existence of this command, and not all aliased variants.\n\n**NOTE:** Aliases defined with this method are *hidden* from the help\nmessage. If you're looking for aliases that will be displayed in the help\nmessage, see [`Command::visible_alias`].\n\n**NOTE:** When using aliases and checking for the existence of a\nparticular subcommand within an [`ArgMatches`] struct, one only needs to\nsearch for the original name and not all aliases.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, };\nlet m = Command::new(\"myprog\")\n    .subcommand(Command::new(\"test\")\n        .alias(\"do-stuff\"))\n    .get_matches_from(vec![\"myprog\", \"do-stuff\"]);\nassert_eq!(m.subcommand_name(), Some(\"test\"));\n```\n[`App::visible_alias`]: Command::visible_alias()","links":{"`ArgMatches`":"0:4706:1568","`Command::visible_alias`":"0:4244:1577"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["name",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1441:669":{"id":"0:1441:669","crate_id":0,"name":"from","span":{"filename":"src/builder/value_parser.rs","begin":[1049,4],"end":[1051,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["values",{"kind":"generic","inner":"I"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:790:2004":{"id":"0:790:2004","crate_id":0,"name":"get_matches","span":{"filename":"src/builder/command.rs","begin":[511,4],"end":[513,5]},"visibility":"public","docs":"Parse [`env::args_os`], exiting on failure.\n\n# Panics\n\nIf contradictory arguments or settings exist.\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg};\nlet matches = Command::new(\"myprog\")\n    // Args and options go here...\n    .get_matches();\n```\n[`env::args_os`]: std::env::args_os()\n[`App::try_get_matches_from_mut`]: Command::try_get_matches_from_mut()","links":{"std::env::args_os()":"1:2465:4663"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4706:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3281:5920-0:4791:1586":{"id":"a:2:3281:5920-0:4791:1586","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3281:5920","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OsValues","id":"0:4791:1586","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1335:669":{"id":"0:1335:669","crate_id":0,"name":"from","span":{"filename":"src/builder/value_parser.rs","begin":[444,4],"end":[447,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["value",{"kind":"resolved_path","inner":{"name":"std::ops::RangeToInclusive","id":"2:45829:189","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i64"}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1363:6312":{"id":"0:1363:6312","crate_id":0,"name":"Value","span":{"filename":"src/builder/value_parser.rs","begin":[607,4],"end":[607,15]},"visibility":"default","docs":"Argument's value type","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"0:1008:5664":{"id":"0:1008:5664","crate_id":0,"name":"is_allow_negative_numbers_set","span":{"filename":"src/builder/command.rs","begin":[3708,4],"end":[3710,5]},"visibility":"public","docs":"Report whether [`Command::allow_negative_numbers`] is set","links":{"`Command::allow_negative_numbers`":"0:4244:1577"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:385:3201":{"id":"0:385:3201","crate_id":0,"name":"forbid_empty_values","span":{"filename":"src/builder/arg.rs","begin":[1761,4],"end":[1767,5]},"visibility":"public","docs":"Deprecated, replaced with [`Arg::value_parser(NonEmptyStringValueParser::new())`]","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6099:16223":{"id":"5:6099:16223","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:15845:8320"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3184-0:4456:2171":{"id":"b:2:3184-0:4456:2171","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BoolValueParser","id":"0:4456:2171","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3187:127","2:3188:1394"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:31786:68514":{"id":"2:31786:68514","crate_id":2,"name":"wrapping_rem","span":null,"visibility":"public","docs":"Wrapping (modular) remainder. Computes `self % rhs`.\nWrapped remainder calculation on unsigned types is\njust the regular remainder calculation.\nThere's no way wrapping could ever happen.\nThis function exists, so that all operations\nare accounted for in the wrapping operations.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(100u64.wrapping_rem(10), 0);\n```","links":{},"attrs":["#[stable(feature = \"num_wrapping\", since = \"1.2.0\")]","#[rustc_const_stable(feature = \"const_wrapping_int_methods\", since =\n\"1.52.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:387:3234":{"id":"0:387:3234","crate_id":0,"name":"use_value_delimiter","span":{"filename":"src/builder/arg.rs","begin":[1870,4],"end":[1881,5]},"visibility":"public","docs":"Specifies that an argument should allow grouping of multiple values via a\ndelimiter.\n\ni.e. should `--option=val1,val2,val3` be parsed as three values (`val1`, `val2`,\nand `val3`) or as a single value (`val1,val2,val3`). Defaults to using `,` (comma) as the\nvalue delimiter for all arguments that accept values (options and positional arguments)\n\n**NOTE:** When this setting is used, it will default [`Arg::value_delimiter`]\nto the comma `,`.\n\n**NOTE:** Implicitly sets [`Arg::takes_value`]\n\n# Examples\n\nThe following example shows the default behavior.\n\n```rust\n# use clap::{Command, Arg};\nlet delims = Command::new(\"prog\")\n    .arg(Arg::new(\"option\")\n        .long(\"option\")\n        .use_value_delimiter(true)\n        .takes_value(true))\n    .get_matches_from(vec![\n        \"prog\", \"--option=val1,val2,val3\",\n    ]);\n\nassert!(delims.contains_id(\"option\"));\nassert_eq!(delims.values_of(\"option\").unwrap().collect::<Vec<_>>(), [\"val1\", \"val2\", \"val3\"]);\n```\nThe next example shows the difference when turning delimiters off. This is the default\nbehavior\n\n```rust\n# use clap::{Command, Arg};\nlet nodelims = Command::new(\"prog\")\n    .arg(Arg::new(\"option\")\n        .long(\"option\")\n        .takes_value(true))\n    .get_matches_from(vec![\n        \"prog\", \"--option=val1,val2,val3\",\n    ]);\n\nassert!(nodelims.contains_id(\"option\"));\nassert_eq!(nodelims.value_of(\"option\").unwrap(), \"val1,val2,val3\");\n```\n[`Arg::value_delimiter`]: Arg::value_delimiter()","links":{"`Arg::takes_value`":"0:3816:1564","Arg::value_delimiter()":"0:3816:1564"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:925:5550":{"id":"0:925:5550","crate_id":0,"name":"get_version","span":{"filename":"src/builder/command.rs","begin":[3294,4],"end":[3296,5]},"visibility":"public","docs":"Get the version of the cmd.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6081:67679":{"id":"5:6081:67679","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8352:205"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:8597","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:798:2022":{"id":"0:798:2022","crate_id":0,"name":"try_get_matches_from","span":{"filename":"src/builder/command.rs","begin":[641,4],"end":[647,5]},"visibility":"public","docs":"Parse the specified arguments, returning a [`clap::Result`] on failure.\n\n**NOTE:** This method WILL NOT exit when `--help` or `--version` (or short versions) are\nused. It will return a [`clap::Error`], where the [`kind`] is a [`ErrorKind::DisplayHelp`]\nor [`ErrorKind::DisplayVersion`] respectively. You must call [`Error::exit`] or\nperform a [`std::process::exit`] yourself.\n\n**NOTE:** The first argument will be parsed as the binary name unless\n[`Command::no_binary_name`] is used.\n\n# Panics\n\nIf contradictory arguments or settings exist.\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg};\nlet arg_vec = vec![\"my_prog\", \"some\", \"args\", \"to\", \"parse\"];\n\nlet matches = Command::new(\"myprog\")\n    // Args and options go here...\n    .try_get_matches_from(arg_vec)\n    .unwrap_or_else(|e| e.exit());\n```\n[`App::get_matches_from`]: Command::get_matches_from()\n[`App::try_get_matches`]: Command::try_get_matches()\n[`Error::exit`]: crate::Error::exit()\n[`std::process::exit`]: std::process::exit()\n[`clap::Error`]: crate::Error\n[`Error::exit`]: crate::Error::exit()\n[`kind`]: crate::Error\n[`ErrorKind::DisplayHelp`]: crate::ErrorKind::DisplayHelp\n[`ErrorKind::DisplayVersion`]: crate::ErrorKind::DisplayVersion\n[`clap::Result`]: Result","links":{"Result":"2:47483:195","crate::Error":"0:4640:127","crate::ErrorKind::DisplayHelp":"0:4587:1584","`Command::no_binary_name`":"0:4244:1577","std::process::exit()":"1:7778:2009","crate::ErrorKind::DisplayVersion":"0:4587:1584","crate::Error::exit()":"0:4640:127"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["itr",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"ClapResult","id":"0:1854:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4706:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8367:151","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"T"}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsString","id":"1:2920:170","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4604:6801":{"id":"0:4604:6801","crate_id":0,"name":"TooFewValues","span":{"filename":"src/error/kind.rs","begin":[176,4],"end":[176,16]},"visibility":"default","docs":"Occurs when the user provides fewer values for an argument than were defined by setting\n[`Arg::min_values`].\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet result = Command::new(\"prog\")\n    .arg(Arg::new(\"some_opt\")\n        .long(\"opt\")\n        .min_values(3))\n    .try_get_matches_from(vec![\"prog\", \"--opt\", \"too\", \"few\"]);\nassert!(result.is_err());\nassert_eq!(result.unwrap_err().kind(), ErrorKind::TooFewValues);\n```\n[`Arg::min_values`]: crate::Arg::min_values()","links":{"crate::Arg::min_values()":"0:3816:1564"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"a:2:9222:7159-0:5071:1570":{"id":"a:2:9222:7159-0:5071:1570","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9222:7159","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:5071:1570","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3439:2420":{"id":"0:3439:2420","crate_id":0,"name":"DisableVersionFlag","span":{"filename":"src/builder/app_settings.rs","begin":[342,4],"end":[342,22]},"visibility":"default","docs":"Deprecated, replaced with [`Command::disable_version_flag`] and\n[`Command::is_disable_version_flag_set`]","links":{"`Command::is_disable_version_flag_set`":"0:4244:1577","`Command::disable_version_flag`":"0:4244:1577"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"b:2:3179-0:4356:1583":{"id":"b:2:3179-0:4356:1583","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3149:217","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:4356:1583","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3182:127","2:3183:1395"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:789:4115":{"id":"5:789:4115","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"0:4717:59":{"id":"0:4717:59","crate_id":0,"name":"default","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[67,23],"end":[67,30]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4706:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:378:3153":{"id":"0:378:3153","crate_id":0,"name":"possible_values","span":{"filename":"src/builder/arg.rs","begin":[1604,4],"end":[1612,5]},"visibility":"public","docs":"Deprecated, replaced with [`Arg::value_parser(PossibleValuesParser::new(...))`]","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["values",{"kind":"generic","inner":"I"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8367:151","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"T"}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:4298:1582","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:23:25-0:4706:1568":{"id":"b:23:25-0:4706:1568","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.8.1/src/equivalent.rs","begin":[18,0],"end":[18,46]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2897:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2837:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Q"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Equivalent","id":"23:22:8796","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4706:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["23:28:8790"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"Q"}}},"0:4706:1568":{"id":"0:4706:1568","crate_id":0,"name":"ArgMatches","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[68,0],"end":[77,1]},"visibility":"public","docs":"Container for parse results.\n\nUsed to get information about the arguments that were supplied to the program at runtime by\nthe user. New instances of this struct are obtained by using the [`Command::get_matches`] family of\nmethods.\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg, ValueSource};\nlet matches = Command::new(\"MyApp\")\n    .arg(Arg::new(\"out\")\n        .long(\"output\")\n        .required(true)\n        .takes_value(true)\n        .default_value(\"-\"))\n    .arg(Arg::new(\"cfg\")\n        .short('c')\n        .takes_value(true))\n    .get_matches(); // builds the instance of ArgMatches\n\n// to get information about the \"cfg\" argument we created, such as the value supplied we use\n// various ArgMatches methods, such as [ArgMatches::get_one]\nif let Some(c) = matches.get_one::<String>(\"cfg\") {\n    println!(\"Value for -c: {}\", c);\n}\n\n// The ArgMatches::get_one method returns an Option because the user may not have supplied\n// that argument at runtime. But if we specified that the argument was \"required\" as we did\n// with the \"out\" argument, we can safely unwrap because `clap` verifies that was actually\n// used at runtime.\nprintln!(\"Value for --output: {}\", matches.get_one::<String>(\"out\").unwrap());\n\n// You can check the presence of an argument's values\nif matches.contains_id(\"out\") {\n    // However, if you want to know where the value came from\n    if matches.value_source(\"out\").expect(\"checked contains_id\") == ValueSource::CommandLine {\n        println!(\"`out` set by user\");\n    } else {\n        println!(\"`out` is defaulted\");\n    }\n}\n```\n[`Command::get_matches`]: crate::Command::get_matches()","links":{"crate::Command::get_matches()":"0:4244:1577"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["0:2145","0:2198","0:2210","a:2:9222:7159-0:4706:1568","a:2:3252:209-0:4706:1568","a:2:3240:200-0:4706:1568","a:2:9223:7158-0:4706:1568","a:2:3281:5920-0:4706:1568","b:2:2843-0:4706:1568","b:2:3169-0:4706:1568","b:2:3173-0:4706:1568","b:2:3184-0:4706:1568","b:2:3969-0:4706:1568","b:2:2846-0:4706:1568","b:2:3179-0:4706:1568","b:5:787-0:4706:1568","b:23:25-0:4706:1568","0:4712","0:4714","0:4716","0:4718","0:4719","0:4722","0:4723"]}},"0:4694:648":{"id":"0:4694:648","crate_id":0,"name":"fmt","span":{"filename":"src/parser/error.rs","begin":[4,16],"end":[4,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10215:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10204:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13453:67035":{"id":"2:13453:67035","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:487:3962":{"id":"0:487:3962","crate_id":0,"name":"get_num_vals","span":{"filename":"src/builder/arg.rs","begin":[4431,4],"end":[4433,5]},"visibility":"public","docs":"Get the number of values for this argument.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3240:200-0:3816:1564":{"id":"a:2:3240:200-0:3816:1564","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3240:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3816:1564","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:9222:7159-0:4409:2177":{"id":"a:2:9222:7159-0:4409:2177","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9222:7159","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"PathBufValueParser","id":"0:4409:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:2041":{"id":"0:2041","crate_id":0,"name":null,"span":{"filename":"src/parser/error.rs","begin":[39,0],"end":[39,42]},"visibility":{"restricted":{"parent":"0:2034:1566","path":"::parser::error"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["type_id","backtrace","provide","source","cause","description"],"trait":{"kind":"resolved_path","inner":{"name":"Error","id":"1:2576:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4686:7087","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:31794:68521":{"id":"2:31794:68521","crate_id":2,"name":"overflowing_add_signed","span":null,"visibility":"public","docs":"Calculates `self` + `rhs` with a signed `rhs`\n\nReturns a tuple of the addition along with a boolean indicating\nwhether an arithmetic overflow would occur. If an overflow would\nhave occurred then the wrapped value is returned.\n\n# Examples\n\nBasic usage:\n\n```\n# #![feature(mixed_integer_ops)]\nassert_eq!(1u64.overflowing_add_signed(2), (3, false));\nassert_eq!(1u64.overflowing_add_signed(-2), (u64::MAX, true));\nassert_eq!((u64::MAX - 2).overflowing_add_signed(4), (1, true));\n```","links":{},"attrs":["#[unstable(feature = \"mixed_integer_ops\", issue = \"87840\")]","#[rustc_const_unstable(feature = \"mixed_integer_ops\", issue = \"87840\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"i64"}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"u64"},{"kind":"primitive","inner":"bool"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9223:7158-0:4763:7085":{"id":"a:2:9223:7158-0:4763:7085","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9223:7158","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"RawValues","id":"0:4763:7085","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:6776:10625":{"id":"1:6776:10625","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6777:13783"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10545:10621","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:1321":{"id":"0:1321","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[284,0],"end":[292,1]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":"Convert a [`TypedValueParser`] to [`ValueParser`]\n\n# Example\n\n```rust\nlet mut cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"hostname\")\n            .long(\"hostname\")\n            .value_parser(clap::builder::NonEmptyStringValueParser::new())\n            .takes_value(true)\n            .required(true)\n    );\n\nlet m = cmd.try_get_matches_from_mut(\n    [\"cmd\", \"--hostname\", \"rust-lang.org\"]\n).unwrap();\n\nlet hostname: &String = m.get_one(\"hostname\")\n    .expect(\"required\");\nassert_eq!(hostname, \"rust-lang.org\");\n```","links":{"`ValueParser`":"0:1294:2166","`TypedValueParser`":"0:1362:2165"},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TypedValueParser","id":"0:1362:2165","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3240:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3252:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Value","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:1362:2165","args":null,"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3240:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3252:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1294:2166","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:1323:669"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4304":{"id":"0:4304","crate_id":0,"name":null,"span":{"filename":"src/builder/possible_value.rs","begin":[29,9],"end":[29,14]},"visibility":{"restricted":{"parent":"0:1203:2155","path":"::builder::possible_value"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10255:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:4298:1582","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["0:4306:648"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:8371-0:4773:1588":{"id":"b:2:8371-0:4773:1588","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8565:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8367:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:4773:1588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:8373:2018","2:8374:7522","2:8375:755"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"0:414:3559":{"id":"0:414:3559","crate_id":0,"name":"hide","span":{"filename":"src/builder/arg.rs","begin":[2770,4],"end":[2776,5]},"visibility":"public","docs":"Do not display the argument in help message.\n\n**NOTE:** This does **not** hide the argument from usage strings on error\n\n# Examples\n\nSetting `Hidden` will hide the argument when displaying help text\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .long(\"config\")\n        .hide(true)\n        .help(\"Some help text describing the --config arg\"))\n    .get_matches_from(vec![\n        \"prog\", \"--help\"\n    ]);\n```\n\nThe above example displays\n\n```text\nhelptest\n\nUSAGE:\n   helptest [OPTIONS]\n\nOPTIONS:\n-h, --help       Print help information\n-V, --version    Print version information\n```","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3252:209-0:4823:1587":{"id":"a:2:3252:209-0:4823:1587","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3252:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4823:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:31798:68525":{"id":"2:31798:68525","crate_id":2,"name":"overflowing_mul","span":null,"visibility":"public","docs":"Calculates the multiplication of `self` and `rhs`.\n\nReturns a tuple of the multiplication along with a boolean\nindicating whether an arithmetic overflow would occur. If an\noverflow would have occurred then the wrapped value is returned.\n\n# Examples\n\nBasic usage:\n\nPlease note that this example is shared between integer types.\nWhich explains why `u32` is used here.\n\n```\nassert_eq!(5u32.overflowing_mul(2), (10, false));\nassert_eq!(1_000_000_000u32.overflowing_mul(10), (1410065408, true));\n```","links":{},"attrs":["#[stable(feature = \"wrapping\", since = \"1.7.0\")]","#[rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                          without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"u64"},{"kind":"primitive","inner":"bool"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:329:2737":{"id":"0:329:2737","crate_id":0,"name":"visible_alias","span":{"filename":"src/builder/arg.rs","begin":[354,4],"end":[357,5]},"visibility":"public","docs":"Add an alias, which functions as a visible long flag.\n\nLike [`Arg::alias`], except that they are visible inside the help message.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n            .arg(Arg::new(\"test\")\n                .visible_alias(\"something-awesome\")\n                .long(\"test\")\n                .takes_value(true))\n       .get_matches_from(vec![\n            \"prog\", \"--something-awesome\", \"coffee\"\n        ]);\nassert!(m.contains_id(\"test\"));\nassert_eq!(m.value_of(\"test\"), Some(\"coffee\"));\n```\n[`Command::alias`]: Arg::alias()","links":{"`Arg::alias`":"0:3816:1564"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["name",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3173-0:3347:1562":{"id":"b:2:3173-0:3347:1562","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgAction","id":"0:3347:1562","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3175:669"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4024:397":{"id":"0:4024:397","crate_id":0,"name":"clone","span":{"filename":"src/builder/arg_settings.rs","begin":[32,33],"end":[32,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"ArgSettings","id":"0:3970:1581","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:518:4040":{"id":"0:518:4040","crate_id":0,"name":"is_last_set","span":{"filename":"src/builder/arg.rs","begin":[4664,4],"end":[4666,5]},"visibility":"public","docs":"Reports whether [`Arg::last`] is set","links":{"`Arg::last`":"0:3816:1564"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:175:2133":{"id":"0:175:2133","crate_id":0,"name":"value_variants","span":{"filename":"src/derive.rs","begin":[489,4],"end":[489,42]},"visibility":"default","docs":"All possible argument values, in display order.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"slice","inner":{"kind":"generic","inner":"Self"}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:4554:648":{"id":"0:4554:648","crate_id":0,"name":"fmt","span":{"filename":"src/error/context.rs","begin":[2,22],"end":[2,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10215:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10204:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3252:209-0:4750:7086":{"id":"a:2:3252:209-0:4750:7086","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3252:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValuesRef","id":"0:4750:7086","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2846-0:3903:1565":{"id":"b:2:2846-0:3903:1565","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2840:8484","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3903:1565","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["2:2848:21287"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4758:397":{"id":"0:4758:397","crate_id":0,"name":"clone","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1399,9],"end":[1399,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"ValuesRef","id":"0:4750:7086","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:31806:68533":{"id":"2:31806:68533","crate_id":2,"name":"overflowing_pow","span":null,"visibility":"public","docs":"Raises self to the power of `exp`, using exponentiation by squaring.\n\nReturns a tuple of the exponentiation along with a bool indicating\nwhether an overflow happened.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(3u64.overflowing_pow(5), (243, false));\nassert_eq!(3u8.overflowing_pow(6), (217, true));\n```","links":{},"attrs":["#[stable(feature = \"no_panic_pow\", since = \"1.34.0\")]","#[rustc_const_stable(feature = \"const_int_pow\", since = \"1.50.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["exp",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"u64"},{"kind":"primitive","inner":"bool"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:196:8597":{"id":"22:196:8597","crate_id":22,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"22:114:10621","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:1362:2165":{"id":"0:1362:2165","crate_id":0,"name":"TypedValueParser","span":{"filename":"src/builder/value_parser.rs","begin":[605,0],"end":[640,1]},"visibility":"public","docs":"Parse/validate argument values","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:1363:6312","0:1364:6352","0:1365:2002","0:1366:3153"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3240:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3252:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"implementations":["0:1367","0:1379","0:1388","0:1396","0:1406","0:1428","0:1449","0:1475","0:1499","0:1512","0:1524","0:1536"]}},"0:4608:6805":{"id":"0:4608:6805","crate_id":0,"name":"WrongNumberOfValues","span":{"filename":"src/error/kind.rs","begin":[216,4],"end":[216,23]},"visibility":"default","docs":"Occurs when the user provides a different number of values for an argument than what's\nbeen defined by setting [`Arg::number_of_values`] or than was implicitly set by\n[`Arg::value_names`].\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet result = Command::new(\"prog\")\n    .arg(Arg::new(\"some_opt\")\n        .long(\"opt\")\n        .takes_value(true)\n        .number_of_values(2))\n    .try_get_matches_from(vec![\"prog\", \"--opt\", \"wrong\"]);\nassert!(result.is_err());\nassert_eq!(result.unwrap_err().kind(), ErrorKind::WrongNumberOfValues);\n```\n\n[`Arg::number_of_values`]: crate::Arg::number_of_values()\n[`Arg::value_names`]: crate::Arg::value_names()","links":{"crate::Arg::value_names()":"0:3816:1564","crate::Arg::number_of_values()":"0:3816:1564"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:4691":{"id":"0:4691","crate_id":0,"name":null,"span":{"filename":"src/parser/error.rs","begin":[4,9],"end":[4,14]},"visibility":{"restricted":{"parent":"0:2034:1566","path":"::parser::error"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]","#[allow(missing_copy_implementations)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4686:7087","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:4692:397"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:318:886":{"id":"0:318:886","crate_id":0,"name":"name","span":{"filename":"src/builder/arg.rs","begin":[142,4],"end":[144,5]},"visibility":"public","docs":"Deprecated, replaced with [`Arg::id`]","links":{"`Arg::id`":"0:3816:1564"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["n",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5828:8601":{"id":"5:5828:8601","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5830:171","5:5831:421"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:4401":{"id":"0:4401","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[674,22],"end":[674,27]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10255:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"StringValueParser","id":"0:4397:2164","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:4402:648"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:471:1848":{"id":"0:471:1848","crate_id":0,"name":"get_short","span":{"filename":"src/builder/arg.rs","begin":[4299,4],"end":[4301,5]},"visibility":"public","docs":"Get the short option name for this argument, if any","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"char"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:320:1839":{"id":"0:320:1839","crate_id":0,"name":"short","span":{"filename":"src/builder/arg.rs","begin":[172,4],"end":[177,5]},"visibility":"public","docs":"Sets the short version of the argument without the preceding `-`.\n\nBy default `V` and `h` are used by the auto-generated `version` and `help` arguments,\nrespectively. You may use the uppercase `V` or lowercase `h` for your own arguments, in\nwhich case `clap` simply will not assign those to the auto-generated\n`version` or `help` arguments.\n\n# Examples\n\nWhen calling `short`, use a single valid UTF-8 character which will allow using the\nargument via a single hyphen (`-`) such as `-c`:\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"config\")\n        .short('c')\n        .takes_value(true))\n    .get_matches_from(vec![\n        \"prog\", \"-c\", \"file.toml\"\n    ]);\n\nassert_eq!(m.get_one::<String>(\"config\").map(String::as_str), Some(\"file.toml\"));\n```","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["s",{"kind":"primitive","inner":"char"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13373:4118":{"id":"2:13373:4118","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:47356:166"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10897:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10897:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1581:2158":{"id":"0:1581:2158","crate_id":0,"name":"value_parser","span":{"filename":"src/builder/value_parser.rs","begin":[1904,4],"end":[1906,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"qualified_path","inner":{"name":"Parser","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:1543:2167","args":null,"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8846:8696":{"id":"2:8846:8696","crate_id":2,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8565:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:2:3184-0:4298:1582":{"id":"b:2:3184-0:4298:1582","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:4298:1582","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["2:3187:127","2:3188:1394"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2846-0:3816:1564":{"id":"b:2:2846-0:3816:1564","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2840:8484","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3816:1564","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["2:2848:21287"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:204":{"id":"0:204","crate_id":0,"name":null,"span":{"filename":"src/derive.rs","begin":[561,0],"end":[568,1]},"visibility":{"restricted":{"parent":"0:110:536","path":"::derive"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Args","id":"0:167:1571","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Args","id":"0:167:1571","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["0:206:2099","0:207:2102"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:9222:7159-0:4432:2162":{"id":"a:2:9222:7159-0:4432:2162","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9222:7159","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9222:7159","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:4432:2162","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:3969-0:4444:2163":{"id":"b:2:3969-0:4444:2163","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3967:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"RangedU64ValueParser","id":"0:4444:2163","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["2:3971:1408"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4590:6810":{"id":"0:4590:6810","crate_id":0,"name":"UnknownArgument","span":{"filename":"src/error/kind.rs","begin":[33,4],"end":[33,19]},"visibility":"default","docs":"Occurs when a user provides a flag, option, argument or subcommand which isn't defined.\n\n# Examples\n\n```rust\n# use clap::{Command, arg, ErrorKind};\nlet result = Command::new(\"prog\")\n    .arg(arg!(--flag \"some flag\"))\n    .try_get_matches_from(vec![\"prog\", \"--other\"]);\nassert!(result.is_err());\nassert_eq!(result.unwrap_err().kind(), ErrorKind::UnknownArgument);\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:1565:1574":{"id":"0:1565:1574","crate_id":0,"name":"Parser","span":{"filename":"src/builder/value_parser.rs","begin":[1865,4],"end":[1865,44]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:4432:2162","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u16"}}],"bindings":[]}},"param_names":[]}}}},"b:2:3179-0:4298:1582":{"id":"b:2:3179-0:4298:1582","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3149:217","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:4298:1582","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["2:3182:127","2:3183:1395"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:3240:200-0:4515:6699":{"id":"a:2:3240:200-0:4515:6699","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3240:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:4515:6699","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2843-0:4640:127":{"id":"b:2:2843-0:4640:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2837:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4640:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2845:2590"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4357:221":{"id":"0:4357:221","crate_id":0,"name":"Unknown","span":{"filename":"src/builder/value_hint.rs","begin":[32,4],"end":[32,11]},"visibility":"default","docs":"Default value if hint is not specified. Follows shell default behavior, which is usually\nauto-completing filenames.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:31816:68542":{"id":"2:31816:68542","crate_id":2,"name":"next_power_of_two","span":null,"visibility":"public","docs":"Returns the smallest power of two greater than or equal to `self`.\n\nWhen return value overflows (i.e., `self > (1 << (N-1))` for type\n`uN`), it panics in debug mode and the return value is wrapped to 0 in\nrelease mode (the only situation in which method can return 0).\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(2u64.next_power_of_two(), 2);\nassert_eq!(3u64.next_power_of_two(), 4);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_int_pow\", since = \"1.50.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8373:2018":{"id":"2:8373:2018","crate_id":2,"name":"Item","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8565:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}},"0:399:3402":{"id":"0:399:3402","crate_id":0,"name":"default_missing_value","span":{"filename":"src/builder/arg.rs","begin":[2301,4],"end":[2303,5]},"visibility":"public","docs":"Value for the argument when the flag is present but no value is specified.\n\nThis configuration option is often used to give the user a shortcut and allow them to\nefficiently specify an option argument without requiring an explicitly value. The `--color`\nargument is a common example. By, supplying an default, such as `default_missing_value(\"always\")`,\nthe user can quickly just add `--color` to the command line to produce the desired color output.\n\n**NOTE:** using this configuration option requires the use of the `.min_values(0)` and the\n`.require_equals(true)` configuration option. These are required in order to unambiguously\ndetermine what, if any, value was supplied for the argument.\n\n# Examples\n\nFor POSIX style `--color`:\n```rust\n# use clap::{Command, Arg, ValueSource};\nfn cli() -> Command<'static> {\n    Command::new(\"prog\")\n        .arg(Arg::new(\"color\").long(\"color\")\n            .value_name(\"WHEN\")\n            .value_parser([\"always\", \"auto\", \"never\"])\n            .default_value(\"auto\")\n            .min_values(0)\n            .require_equals(true)\n            .default_missing_value(\"always\")\n            .help(\"Specify WHEN to colorize output.\")\n        )\n}\n\n// first, we'll provide no arguments\nlet m  = cli().get_matches_from(vec![\n        \"prog\"\n    ]);\nassert_eq!(m.value_of(\"color\"), Some(\"auto\"));\nassert_eq!(m.value_source(\"color\"), Some(ValueSource::DefaultValue));\n\n// next, we'll provide a runtime value to override the default (as usually done).\nlet m  = cli().get_matches_from(vec![\n        \"prog\", \"--color=never\"\n    ]);\nassert_eq!(m.value_of(\"color\"), Some(\"never\"));\nassert_eq!(m.value_source(\"color\"), Some(ValueSource::CommandLine));\n\n// finally, we will use the shortcut and only provide the argument without a value.\nlet m  = cli().get_matches_from(vec![\n        \"prog\", \"--color\"\n    ]);\nassert_eq!(m.value_of(\"color\"), Some(\"always\"));\nassert_eq!(m.value_source(\"color\"), Some(ValueSource::CommandLine));\n```\n\nFor bool literals:\n```rust\n# use clap::{Command, Arg, ValueSource, value_parser};\nfn cli() -> Command<'static> {\n    Command::new(\"prog\")\n        .arg(Arg::new(\"create\").long(\"create\")\n            .value_name(\"BOOL\")\n            .value_parser(value_parser!(bool))\n            .min_values(0)\n            .require_equals(true)\n            .default_missing_value(\"true\")\n        )\n}\n\n// first, we'll provide no arguments\nlet m  = cli().get_matches_from(vec![\n        \"prog\"\n    ]);\nassert_eq!(m.get_one::<bool>(\"create\").copied(), None);\n\n// next, we'll provide a runtime value to override the default (as usually done).\nlet m  = cli().get_matches_from(vec![\n        \"prog\", \"--create=false\"\n    ]);\nassert_eq!(m.get_one::<bool>(\"create\").copied(), Some(false));\nassert_eq!(m.value_source(\"create\"), Some(ValueSource::CommandLine));\n\n// finally, we will use the shortcut and only provide the argument without a value.\nlet m  = cli().get_matches_from(vec![\n        \"prog\", \"--create\"\n    ]);\nassert_eq!(m.get_one::<bool>(\"create\").copied(), Some(true));\nassert_eq!(m.value_source(\"create\"), Some(ValueSource::CommandLine));\n```\n\n[`ArgMatches::value_of`]: ArgMatches::value_of()\n[`Arg::takes_value(true)`]: Arg::takes_value()\n[`Arg::default_value`]: Arg::default_value()","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["val",{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6849:10630":{"id":"1:6849:10630","crate_id":1,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6850:21421"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:406:1852":{"id":"0:406:1852","crate_id":0,"name":"help","span":{"filename":"src/builder/arg.rs","begin":[2543,4],"end":[2546,5]},"visibility":"public","docs":"Sets the description of the argument for short help (`-h`).\n\nTypically, this is a short (one line) description of the arg.\n\nIf [`Arg::long_help`] is not specified, this message will be displayed for `--help`.\n\n**NOTE:** Only `Arg::help` is used in completion script generation in order to be concise\n\n# Examples\n\nAny valid UTF-8 is allowed in the help text. The one exception is when one wishes to\ninclude a newline in the help text and have the following text be properly aligned with all\nthe other help text.\n\nSetting `help` displays a short message to the side of the argument when the user passes\n`-h` or `--help` (by default).\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .long(\"config\")\n        .help(\"Some help text describing the --config arg\"))\n    .get_matches_from(vec![\n        \"prog\", \"--help\"\n    ]);\n```\n\nThe above example displays\n\n```notrust\nhelptest\n\nUSAGE:\n   helptest [OPTIONS]\n\nOPTIONS:\n    --config     Some help text describing the --config arg\n-h, --help       Print help information\n-V, --version    Print version information\n```\n[`Arg::long_help`]: Arg::long_help()","links":{"Arg::long_help()":"0:3816:1564"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["h",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl Into<Option<&'help str>>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3252:209-0:3970:1581":{"id":"a:2:3252:209-0:3970:1581","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3252:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgSettings","id":"0:3970:1581","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2846-0:1294:2166":{"id":"b:2:2846-0:1294:2166","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2840:8484","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1294:2166","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2848:21287"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4471:397":{"id":"0:4471:397","crate_id":0,"name":"clone","span":{"filename":"src/builder/value_parser.rs","begin":[1647,15],"end":[1647,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"BoolishValueParser","id":"0:4468:2172","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:872:2643":{"id":"0:872:2643","crate_id":0,"name":"help_heading","span":{"filename":"src/builder/command.rs","begin":[1865,4],"end":[1870,5]},"visibility":"public","docs":"Deprecated, replaced with [`Command::next_help_heading`]","links":{"`Command::next_help_heading`":"0:4244:1577"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["heading",{"kind":"generic","inner":"O"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"O"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13371:293":{"id":"2:13371:293","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"`u8`":"1:15856:8329","str::as_mut_ptr":"1:15845:8320"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:915:5540":{"id":"0:915:5540","crate_id":0,"name":"subcommand_help_heading","span":{"filename":"src/builder/command.rs","begin":[3253,4],"end":[3259,5]},"visibility":"public","docs":"Sets the help heading used for subcommands when printing usage and help.\n\nBy default, this is \"SUBCOMMANDS\".\n\nSee also [`Command::subcommand_value_name`]\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg};\nCommand::new(\"myprog\")\n    .subcommand(Command::new(\"sub1\"))\n    .print_help()\n# ;\n```\n\nwill produce\n\n```text\nmyprog\n\nUSAGE:\n    myprog [SUBCOMMAND]\n\nOPTIONS:\n    -h, --help       Print help information\n    -V, --version    Print version information\n\nSUBCOMMANDS:\n    help    Print this message or the help of the given subcommand(s)\n    sub1\n```\n\nbut usage of `subcommand_help_heading`\n\n```no_run\n# use clap::{Command, Arg};\nCommand::new(\"myprog\")\n    .subcommand(Command::new(\"sub1\"))\n    .subcommand_help_heading(\"THINGS\")\n    .print_help()\n# ;\n```\n\nwill produce\n\n```text\nmyprog\n\nUSAGE:\n    myprog [SUBCOMMAND]\n\nOPTIONS:\n    -h, --help       Print help information\n    -V, --version    Print version information\n\nTHINGS:\n    help    Print this message or the help of the given subcommand(s)\n    sub1\n```","links":{"`Command::subcommand_value_name`":"0:4244:1577"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["heading",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4570:6767":{"id":"0:4570:6767","crate_id":0,"name":"Strings","span":{"filename":"src/error/context.rs","begin":[52,4],"end":[52,24]},"visibility":"default","docs":"Many values","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7764:223","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]}},"a:2:3281:5920-0:4515:6699":{"id":"a:2:3281:5920-0:4515:6699","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3281:5920","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:4515:6699","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:4669:1932":{"id":"1:4669:1932","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4670:1764","1:4671:10024","1:4673:10025","1:4674:4740","1:4675:7980","1:4676:10026","1:4677:9208","1:4686:9607"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:4567:205":{"id":"0:4567:205","crate_id":0,"name":"String","span":{"filename":"src/error/context.rs","begin":[50,4],"end":[50,18]},"visibility":"default","docs":"A single value","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]}},"0:4538:6782":{"id":"0:4538:6782","crate_id":0,"name":"SuggestedSubcommand","span":{"filename":"src/error/context.rs","begin":[28,4],"end":[28,23]},"visibility":"default","docs":"Potential fix for the user","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:1606:2158":{"id":"0:1606:2158","crate_id":0,"name":"value_parser","span":{"filename":"src/builder/value_parser.rs","begin":[2043,0],"end":[2049,1]},"visibility":"public","docs":"Select a [`ValueParser`] implementation from the intended type\n\nTo register a custom type with this macro, implement [`ValueParserFactory`].\n\n# Example\n\nUsage:\n```rust\n# use std::path::PathBuf;\n# use std::path::Path;\nlet mut cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"output\")\n            .value_parser(clap::value_parser!(PathBuf))\n            .required(true)\n    );\n\nlet m = cmd.try_get_matches_from_mut([\"cmd\", \"file.txt\"]).unwrap();\nlet port: &PathBuf = m.get_one(\"output\")\n    .expect(\"required\");\nassert_eq!(port, Path::new(\"file.txt\"));\n```\n\nSupported types:\n```rust\n// Built-in types\nlet parser = clap::value_parser!(String);\nassert_eq!(format!(\"{:?}\", parser), \"ValueParser::string\");\nlet parser = clap::value_parser!(std::ffi::OsString);\nassert_eq!(format!(\"{:?}\", parser), \"ValueParser::os_string\");\nlet parser = clap::value_parser!(std::path::PathBuf);\nassert_eq!(format!(\"{:?}\", parser), \"ValueParser::path_buf\");\nlet parser = clap::value_parser!(u16).range(3000..);\nassert_eq!(format!(\"{:?}\", parser), \"RangedI64ValueParser { bounds: (Included(3000), Included(65535)), target: PhantomData }\");\nlet parser = clap::value_parser!(u64).range(3000..);\nassert_eq!(format!(\"{:?}\", parser), \"RangedU64ValueParser { bounds: (Included(3000), Unbounded), target: PhantomData }\");\n\n// FromStr types\nlet parser = clap::value_parser!(usize);\nassert_eq!(format!(\"{:?}\", parser), \"_AnonymousValueParser(ValueParser::other(usize))\");\n\n// ValueEnum types\n#[derive(Copy, Clone, Debug, PartialEq, Eq)]\nenum ColorChoice {\n    Always,\n    Auto,\n    Never,\n}\nimpl clap::ValueEnum for ColorChoice {\n    // ...\n#     fn value_variants<'a>() -> &'a [Self] {\n#         &[Self::Always, Self::Auto, Self::Never]\n#     }\n#     fn to_possible_value<'a>(&self) -> Option<clap::PossibleValue<'a>> {\n#         match self {\n#             Self::Always => Some(clap::PossibleValue::new(\"always\")),\n#             Self::Auto => Some(clap::PossibleValue::new(\"auto\")),\n#             Self::Never => Some(clap::PossibleValue::new(\"never\")),\n#         }\n#     }\n}\nlet parser = clap::value_parser!(ColorChoice);\nassert_eq!(format!(\"{:?}\", parser), \"EnumValueParser(PhantomData)\");\n```","links":{"`ValueParser`":"0:1294:2166","`ValueParserFactory`":"0:1543:2167"},"attrs":["#[macro_export]"],"deprecation":null,"kind":"macro","inner":"macro_rules! value_parser {\n    ($name:ty) => { ... };\n}"},"b:2:3169-0:4403:2176":{"id":"b:2:3169-0:4403:2176","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OsStringValueParser","id":"0:4403:2176","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3172:2288"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3179-0:3816:1564":{"id":"b:2:3179-0:3816:1564","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3149:217","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3816:1564","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["2:3182:127","2:3183:1395"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:577:648":{"id":"0:577:648","crate_id":0,"name":"fmt","span":{"filename":"src/builder/arg.rs","begin":[5132,4],"end":[5184,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Formatter","id":"2:10215:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"fmt::Error","id":"2:48422:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:404":{"id":"0:404","crate_id":0,"name":null,"span":{"filename":"src/builder/arg.rs","begin":[2498,0],"end":[3052,1]},"visibility":{"restricted":{"parent":"0:242:1829","path":"::builder::arg"}},"docs":"# Help","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3816:1564","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["0:406:1852","0:408:2616","0:410:3529","0:411:2643","0:413:3554","0:414:3559","0:415:3569","0:416:3578","0:417:3606","0:418:3612"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:9223:7158-0:4425:2161":{"id":"a:2:9223:7158-0:4425:2161","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9223:7158","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValuesParser","id":"0:4425:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:2892:173":{"id":"2:2892:173","crate_id":2,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2894:593","2:2895:894"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:4692:397":{"id":"0:4692:397","crate_id":0,"name":"clone","span":{"filename":"src/parser/error.rs","begin":[4,9],"end":[4,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4686:7087","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1513:6312":{"id":"0:1513:6312","crate_id":0,"name":"Value","span":{"filename":"src/builder/value_parser.rs","begin":[1570,4],"end":[1570,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"primitive","inner":"bool"}}},"0:2145":{"id":"0:2145","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[80,0],"end":[867,1]},"visibility":{"restricted":{"parent":"0:2077:7161","path":"::parser::matches::arg_matches"}},"docs":"# Arguments","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4706:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:2146:7223","0:2148:7238","0:2150:7265","0:2151:7275","0:2153:7283","0:2155:7292","0:2156:7302","0:2157:1736","0:2159:7307","0:2161:7309","0:2163:1744","0:2165:7332","0:2168:7333","0:2170:1737","0:2174:1740","0:2177:1745","0:2182:1748","0:2185:7341","0:2187:7162","0:2189:7348","0:2192:7400","0:2194:7423"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4626:6815":{"id":"0:4626:6815","crate_id":0,"name":"ArgumentNotFound","span":{"filename":"src/error/kind.rs","begin":[382,4],"end":[382,20]},"visibility":"default","docs":"Occurs when using the [`ArgMatches::value_of_t`] and friends to convert an argument value\ninto type `T`, but the argument you requested wasn't used. I.e. you asked for an argument\nwith name `config` to be converted, but `config` wasn't used by the user.\n\n[`ArgMatches::value_of_t`]: crate::ArgMatches::value_of_t()","links":{"crate::ArgMatches::value_of_t()":"0:4706:1568"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:1546":{"id":"0:1546","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1824,0],"end":[1829,1]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"ValueParserFactory","id":"0:1543:2167","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:1547:1574","0:1548:2158"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:3240:200-0:5071:1570":{"id":"a:2:3240:200-0:5071:1570","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3240:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:5071:1570","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1507":{"id":"0:1507","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1554,0],"end":[1567,1]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"FalseyValueParser","id":"0:4462:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:1508:907"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3815:342":{"id":"0:3815:342","crate_id":0,"name":"bitor","span":{"filename":"src/builder/app_settings.rs","begin":[575,0],"end":[671,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:3372:1929","args":null,"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:31750:68489":{"id":"2:31750:68489","crate_id":2,"name":"to_le","span":null,"visibility":"public","docs":"Converts `self` to little endian from the target's endianness.\n\nOn little endian this is a no-op. On big endian the bytes are\nswapped.\n\n# Examples\n\nBasic usage:\n\n```\nlet n = 0x1Au64;\n\nif cfg!(target_endian = \"little\") {\n    assert_eq!(n.to_le(), n)\n} else {\n    assert_eq!(n.to_le(), n.swap_bytes())\n}\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4638":{"id":"0:4638","crate_id":0,"name":null,"span":{"filename":"src/error/kind.rs","begin":[2,29],"end":[2,38]},"visibility":{"restricted":{"parent":"0:1840:769","path":"::error::kind"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2892:173","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4587:1584","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4587:1584","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:4639:593"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:31752:1420":{"id":"2:31752:1420","crate_id":2,"name":"unchecked_add","span":null,"visibility":"public","docs":"Unchecked integer addition. Computes `self + rhs`, assuming overflow\ncannot occur.\n\n# Safety\n\nThis results in undefined behavior when\n`self + rhs > u64::MAX` or `self + rhs < u64::MIN`,\ni.e. when [`checked_add`] would return `None`.\n\n[`checked_add`]: u64::checked_add","links":{"u64::checked_add":"1:15859:8332"},"attrs":["#[unstable(feature = \"unchecked_math\", reason = \"niche optimization path\",\nissue = \"85122\",)]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]","#[rustc_const_unstable(feature = \"const_inherent_unchecked_arith\", issue =\n\"85122\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:4639:593":{"id":"0:4639:593","crate_id":0,"name":"eq","span":{"filename":"src/error/kind.rs","begin":[2,29],"end":[2,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4587:1584","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9222:7159-0:4763:7085":{"id":"a:2:9222:7159-0:4763:7085","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9222:7159","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"RawValues","id":"0:4763:7085","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:497:1835":{"id":"0:497:1835","crate_id":0,"name":"is_multiple_occurrences_set","span":{"filename":"src/builder/arg.rs","begin":[4531,4],"end":[4533,5]},"visibility":"public","docs":"[`Arg::multiple_occurrences`] is going away  ([Issue #3772](https://github.com/clap-rs/clap/issues/3772))","links":{"`Arg::multiple_occurrences`":"0:3816:1564"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:337:1845":{"id":"0:337:1845","crate_id":0,"name":"required","span":{"filename":"src/builder/arg.rs","begin":[636,4],"end":[642,5]},"visibility":"public","docs":"Specifies that the argument must be present.\n\nRequired by default means it is required, when no other conflicting rules or overrides have\nbeen evaluated. Conflicting rules take precedence over being required.\n\n**Pro tip:** Flags (i.e. not positional, or arguments that take values) shouldn't be\nrequired by default. This is because if a flag were to be required, it should simply be\nimplied. No additional information is required from user. Flags by their very nature are\nsimply boolean on/off switches. The only time a user *should* be required to use a flag\nis if the operation is destructive in nature, and the user is essentially proving to you,\n\"Yes, I know what I'm doing.\"\n\n# Examples\n\n```rust\n# use clap::Arg;\nArg::new(\"config\")\n    .required(true)\n# ;\n```\n\nSetting required requires that the argument be used at runtime.\n\n```rust\n# use clap::{Command, Arg};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .required(true)\n        .takes_value(true)\n        .long(\"config\"))\n    .try_get_matches_from(vec![\n        \"prog\", \"--config\", \"file.conf\",\n    ]);\n\nassert!(res.is_ok());\n```\n\nSetting required and then *not* supplying that argument at runtime is an error.\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .required(true)\n        .takes_value(true)\n        .long(\"config\"))\n    .try_get_matches_from(vec![\n        \"prog\"\n    ]);\n\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind(), ErrorKind::MissingRequiredArgument);\n```","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2846-0:4444:2163":{"id":"b:2:2846-0:4444:2163","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2840:8484","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"RangedU64ValueParser","id":"0:4444:2163","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["2:2848:21287"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3486":{"id":"0:3486","crate_id":0,"name":null,"span":{"filename":"src/builder/app_settings.rs","begin":[32,16],"end":[32,25]},"visibility":{"restricted":{"parent":"0:227:2151","path":"::builder::app_settings"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2892:173","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:3386:1579","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:3386:1579","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:3487:593"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:846:4509":{"id":"0:846:4509","crate_id":0,"name":"long_about","span":{"filename":"src/builder/command.rs","begin":[1505,4],"end":[1508,5]},"visibility":"public","docs":"Sets the program's description for the long help (`--help`).\n\nIf [`Command::about`] is not specified, this message will be displayed for `-h`.\n\n**NOTE:** Only [`Command::about`] (short format) is used in completion\nscript generation in order to be concise.\n\n# Examples\n\n```no_run\n# use clap::Command;\nCommand::new(\"myprog\")\n    .long_about(\n\"Does really amazing things to great people. Now let's talk a little\n more in depth about how this subcommand really works. It may take about\n a few lines of text, but that's ok!\")\n# ;\n```\n[`App::about`]: Command::about()","links":{"`Command::about`":"0:4244:1577"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["long_about",{"kind":"generic","inner":"O"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3240:200-0:4425:2161":{"id":"a:2:3240:200-0:4425:2161","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3240:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValuesParser","id":"0:4425:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:3969-0:4409:2177":{"id":"b:2:3969-0:4409:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3967:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"PathBufValueParser","id":"0:4409:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3971:1408"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1333:669":{"id":"0:1333:669","crate_id":0,"name":"from","span":{"filename":"src/builder/value_parser.rs","begin":[414,4],"end":[417,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["value",{"kind":"resolved_path","inner":{"name":"std::ops::RangeTo","id":"2:45783:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i64"}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4579:648":{"id":"0:4579:648","crate_id":0,"name":"fmt","span":{"filename":"src/error/context.rs","begin":[42,16],"end":[42,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10215:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10204:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:787-0:4425:2161":{"id":"b:5:787-0:4425:2161","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:783:211","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValuesParser","id":"0:4425:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:789:4115","5:790:4707","5:791:9628"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:9222:7159-0:3970:1581":{"id":"a:2:9222:7159-0:3970:1581","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9222:7159","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgSettings","id":"0:3970:1581","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:630:669":{"id":"0:630:669","crate_id":0,"name":"from","span":{"filename":"src/builder/arg_group.rs","begin":[464,4],"end":[474,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["g",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3903:1565","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:882:5207":{"id":"0:882:5207","crate_id":0,"name":"allow_missing_positional","span":{"filename":"src/builder/command.rs","begin":[2240,4],"end":[2246,5]},"visibility":"public","docs":"Allows one to implement two styles of CLIs where positionals can be used out of order.\n\nThe first example is a CLI where the second to last positional argument is optional, but\nthe final positional argument is required. Such as `$ prog [optional] <required>` where one\nof the two following usages is allowed:\n\n* `$ prog [optional] <required>`\n* `$ prog <required>`\n\nThis would otherwise not be allowed. This is useful when `[optional]` has a default value.\n\n**Note:** when using this style of \"missing positionals\" the final positional *must* be\n[required] if `--` will not be used to skip to the final positional argument.\n\n**Note:** This style also only allows a single positional argument to be \"skipped\" without\nthe use of `--`. To skip more than one, see the second example.\n\nThe second example is when one wants to skip multiple optional positional arguments, and use\nof the `--` operator is OK (but not required if all arguments will be specified anyways).\n\nFor example, imagine a CLI which has three positional arguments `[foo] [bar] [baz]...` where\n`baz` accepts multiple values (similar to man `ARGS...` style training arguments).\n\nWith this setting the following invocations are posisble:\n\n* `$ prog foo bar baz1 baz2 baz3`\n* `$ prog foo -- baz1 baz2 baz3`\n* `$ prog -- baz1 baz2 baz3`\n\n# Examples\n\nStyle number one from above:\n\n```rust\n# use clap::{Command, Arg};\n// Assume there is an external subcommand named \"subcmd\"\nlet m = Command::new(\"myprog\")\n    .allow_missing_positional(true)\n    .arg(Arg::new(\"arg1\"))\n    .arg(Arg::new(\"arg2\")\n        .required(true))\n    .get_matches_from(vec![\n        \"prog\", \"other\"\n    ]);\n\nassert_eq!(m.value_of(\"arg1\"), None);\nassert_eq!(m.value_of(\"arg2\"), Some(\"other\"));\n```\n\nNow the same example, but using a default value for the first optional positional argument\n\n```rust\n# use clap::{Command, Arg};\n// Assume there is an external subcommand named \"subcmd\"\nlet m = Command::new(\"myprog\")\n    .allow_missing_positional(true)\n    .arg(Arg::new(\"arg1\")\n        .default_value(\"something\"))\n    .arg(Arg::new(\"arg2\")\n        .required(true))\n    .get_matches_from(vec![\n        \"prog\", \"other\"\n    ]);\n\nassert_eq!(m.value_of(\"arg1\"), Some(\"something\"));\nassert_eq!(m.value_of(\"arg2\"), Some(\"other\"));\n```\n\nStyle number two from above:\n\n```rust\n# use clap::{Command, Arg};\n// Assume there is an external subcommand named \"subcmd\"\nlet m = Command::new(\"myprog\")\n    .allow_missing_positional(true)\n    .arg(Arg::new(\"foo\"))\n    .arg(Arg::new(\"bar\"))\n    .arg(Arg::new(\"baz\").takes_value(true).multiple_values(true))\n    .get_matches_from(vec![\n        \"prog\", \"foo\", \"bar\", \"baz1\", \"baz2\", \"baz3\"\n    ]);\n\nassert_eq!(m.value_of(\"foo\"), Some(\"foo\"));\nassert_eq!(m.value_of(\"bar\"), Some(\"bar\"));\nassert_eq!(m.values_of(\"baz\").unwrap().collect::<Vec<_>>(), &[\"baz1\", \"baz2\", \"baz3\"]);\n```\n\nNow nofice if we don't specify `foo` or `baz` but use the `--` operator.\n\n```rust\n# use clap::{Command, Arg};\n// Assume there is an external subcommand named \"subcmd\"\nlet m = Command::new(\"myprog\")\n    .allow_missing_positional(true)\n    .arg(Arg::new(\"foo\"))\n    .arg(Arg::new(\"bar\"))\n    .arg(Arg::new(\"baz\").takes_value(true).multiple_values(true))\n    .get_matches_from(vec![\n        \"prog\", \"--\", \"baz1\", \"baz2\", \"baz3\"\n    ]);\n\nassert_eq!(m.value_of(\"foo\"), None);\nassert_eq!(m.value_of(\"bar\"), None);\nassert_eq!(m.values_of(\"baz\").unwrap().collect::<Vec<_>>(), &[\"baz1\", \"baz2\", \"baz3\"]);\n```\n\n[required]: crate::Arg::required()","links":{"crate::Arg::required()":"0:3816:1564"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4780:397":{"id":"0:4780:397","crate_id":0,"name":"clone","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1507,9],"end":[1507,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Values","id":"0:4773:1588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1514:6352":{"id":"0:1514:6352","crate_id":0,"name":"parse_ref","span":{"filename":"src/builder/value_parser.rs","begin":[1572,4],"end":[1590,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["cmd",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Command","id":"0:755:1563","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}],["_arg",{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Arg","id":"0:3816:1564","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["value",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"std::ffi::OsStr","id":"1:2923:169","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Value","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:1362:2165","args":null,"param_names":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"crate::Error","id":"0:4640:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3169-0:4432:2162":{"id":"b:2:3169-0:4432:2162","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:4432:2162","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["2:3172:2288"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:342:1851":{"id":"0:342:1851","crate_id":0,"name":"multiple_occurrences","span":{"filename":"src/builder/arg.rs","begin":[795,4],"end":[801,5]},"visibility":"public","docs":"Deprecated, replaced with [`Arg::action`] ([Issue #3772](https://github.com/clap-rs/clap/issues/3772))","links":{"`Arg::action`":"0:3816:1564"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3169-0:4425:2161":{"id":"b:2:3169-0:4425:2161","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValuesParser","id":"0:4425:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3172:2288"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1241:669":{"id":"0:1241:669","crate_id":0,"name":"from","span":{"filename":"src/builder/possible_value.rs","begin":[256,4],"end":[258,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["s",{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4465:397":{"id":"0:4465:397","crate_id":0,"name":"clone","span":{"filename":"src/builder/value_parser.rs","begin":[1550,15],"end":[1550,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"FalseyValueParser","id":"0:4462:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12444:11298":{"id":"2:12444:11298","crate_id":2,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12445:2018","2:12446:21388"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:834":{"id":"0:834","crate_id":0,"name":null,"span":{"filename":"src/builder/command.rs","begin":[1378,0],"end":[2247,1]},"visibility":{"restricted":{"parent":"0:649:1810","path":"::builder::command"}},"docs":"# Command-specific Settings\n\nThese apply only to the current command and are not inherited by subcommands.","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"App","id":"0:4244:1577","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["0:836:886","0:838:4507","0:840:4506","0:842:1812","0:844:1814","0:846:4509","0:848:4512","0:850:4513","0:852:4510","0:854:4511","0:856:1482","0:858:4508","0:860:4978","0:862:4997","0:864:5029","0:866:1907","0:868:2829","0:870:4778","0:871:4779","0:872:2643","0:874:5049","0:876:5059","0:878:5130","0:879:3193","0:880:5152","0:881:5162","0:882:5207"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1570":{"id":"0:1570","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1880,0],"end":[1887,1]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"ValueParserFactory","id":"0:1543:2167","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"primitive","inner":"u32"},"items":["0:1571:1574","0:1572:2158"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1385:59":{"id":"0:1385:59","crate_id":0,"name":"default","span":{"filename":"src/builder/value_parser.rs","begin":[714,4],"end":[716,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:486:1832":{"id":"0:486:1832","crate_id":0,"name":"get_value_names","span":{"filename":"src/builder/arg.rs","begin":[4421,4],"end":[4427,5]},"visibility":"public","docs":"Get the names of values for this argument.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4464":{"id":"0:4464","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1550,15],"end":[1550,20]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FalseyValueParser","id":"0:4462:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:4465:397"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:871:4779":{"id":"0:871:4779","crate_id":0,"name":"unset_global_setting","span":{"filename":"src/builder/command.rs","begin":[1852,4],"end":[1856,5]},"visibility":"public","docs":"Remove a setting and stop propagating down to subcommands.\n\nSee [`AppSettings`] for a full list of possibilities and examples.\n\n# Examples\n\n```no_run\n# use clap::{Command, AppSettings};\nCommand::new(\"myprog\")\n    .unset_global_setting(AppSettings::AllowNegativeNumbers)\n# ;\n```\n[global]: Command::global_setting()","links":{"`AppSettings`":"0:3386:1579"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["setting",{"kind":"resolved_path","inner":{"name":"AppSettings","id":"0:3386:1579","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2846-0:5071:1570":{"id":"b:2:2846-0:5071:1570","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2840:8484","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:5071:1570","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2848:21287"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:31787:68515":{"id":"2:31787:68515","crate_id":2,"name":"wrapping_rem_euclid","span":null,"visibility":"public","docs":"Wrapping Euclidean modulo. Computes `self.rem_euclid(rhs)`.\nWrapped modulo calculation on unsigned types is\njust the regular remainder calculation.\nThere's no way wrapping could ever happen.\nThis function exists, so that all operations\nare accounted for in the wrapping operations.\nSince, for the positive integers, all common\ndefinitions of division are equal, this\nis exactly equal to `self.wrapping_rem(rhs)`.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(100u64.wrapping_rem_euclid(10), 0);\n```","links":{},"attrs":["#[stable(feature = \"euclidean_division\", since = \"1.38.0\")]","#[rustc_const_stable(feature = \"const_euclidean_int_methods\", since =\n\"1.52.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3173-0:4587:1584":{"id":"b:2:3173-0:4587:1584","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4587:1584","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3175:669"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:5:787-0:4403:2176":{"id":"b:5:787-0:4403:2176","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:783:211","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OsStringValueParser","id":"0:4403:2176","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:789:4115","5:790:4707","5:791:9628"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2843-0:4403:2176":{"id":"b:2:2843-0:4403:2176","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2837:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OsStringValueParser","id":"0:4403:2176","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2845:2590"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:5:787-0:4298:1582":{"id":"b:5:787-0:4298:1582","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:783:211","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:4298:1582","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["5:789:4115","5:790:4707","5:791:9628"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3969-0:4456:2171":{"id":"b:2:3969-0:4456:2171","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3967:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BoolValueParser","id":"0:4456:2171","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3971:1408"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1381:6352":{"id":"0:1381:6352","crate_id":0,"name":"parse_ref","span":{"filename":"src/builder/value_parser.rs","begin":[688,4],"end":[695,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["cmd",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Command","id":"0:755:1563","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}],["arg",{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Arg","id":"0:3816:1564","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["value",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"std::ffi::OsStr","id":"1:2923:169","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Value","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:1362:2165","args":null,"param_names":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"crate::Error","id":"0:4640:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2288:909":{"id":"0:2288:909","crate_id":0,"name":"next","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1518,4],"end":[1520,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3179-0:3970:1581":{"id":"b:2:3179-0:3970:1581","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3149:217","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgSettings","id":"0:3970:1581","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3182:127","2:3183:1395"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:332:2749":{"id":"0:332:2749","crate_id":0,"name":"visible_aliases","span":{"filename":"src/builder/arg.rs","begin":[406,4],"end":[409,5]},"visibility":"public","docs":"Add aliases, which function as visible long flags.\n\nLike [`Arg::aliases`], except that they are visible inside the help message.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ArgAction};\nlet m = Command::new(\"prog\")\n            .arg(Arg::new(\"test\")\n                .long(\"test\")\n                .action(ArgAction::SetTrue)\n                .visible_aliases(&[\"something\", \"awesome\", \"cool\"]))\n       .get_matches_from(vec![\n            \"prog\", \"--awesome\"\n        ]);\nassert_eq!(*m.get_one::<bool>(\"test\").expect(\"defaulted by clap\"), true);\n```\n[`Command::aliases`]: Arg::aliases()","links":{"`Arg::aliases`":"0:3816:1564"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["names",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2150:7265":{"id":"0:2150:7265","crate_id":0,"name":"get_raw","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[206,4],"end":[209,5]},"visibility":"public","docs":"Iterate over the original argument values.\n\nAn `OsStr` on Unix-like systems is any series of bytes, regardless of whether or not they\ncontain valid UTF-8. Since [`String`]s in Rust are guaranteed to be valid UTF-8, a valid\nfilename on a Unix system as an argument value may contain invalid UTF-8.\n\nReturns `None` if the option wasn't present.\n\n# Panic\n\nIf the argument definition and access mismatch.  To handle this case programmatically, see\n[`ArgMatches::try_get_raw`].\n\n# Examples\n\n ```\n# use clap::{Command, arg, value_parser};\n# use std::ffi::{OsStr,OsString};\n# use std::os::unix::ffi::{OsStrExt,OsStringExt};\nuse std::path::PathBuf;\n\nlet m = Command::new(\"utf8\")\n    .arg(arg!(<arg> ... \"some arg\").value_parser(value_parser!(PathBuf)))\n    .get_matches_from(vec![OsString::from(\"myprog\"),\n                                // \"Hi\"\n                                OsString::from_vec(vec![b'H', b'i']),\n                                // \"{0xe9}!\"\n                                OsString::from_vec(vec![0xe9, b'!'])]);\n\nlet mut itr = m.get_raw(\"arg\")\n    .expect(\"`port`is required\")\n    .into_iter();\nassert_eq!(itr.next(), Some(OsStr::new(\"Hi\")));\nassert_eq!(itr.next(), Some(OsStr::from_bytes(&[0xe9, b'!'])));\nassert_eq!(itr.next(), None);\n```\n[`Iterator`]: std::iter::Iterator\n[`OsSt`]: std::ffi::OsStr\n[values]: OsValues\n[`String`]: std::string::String","links":{"std::string::String":"5:8352:205","`ArgMatches::try_get_raw`":"0:4706:1568"},"attrs":["#[track_caller]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"RawValues","id":"0:4763:7085","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:787-0:4750:7086":{"id":"b:5:787-0:4750:7086","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:783:211","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValuesRef","id":"0:4750:7086","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["5:789:4115","5:790:4707","5:791:9628"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1918":{"id":"0:1918","crate_id":0,"name":null,"span":{"filename":"src/error/mod.rs","begin":[1000,0],"end":[1005,1]},"visibility":{"restricted":{"parent":"0:1777:1566","path":"::error"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["type_id","backtrace","provide","source","cause","description"],"trait":{"kind":"resolved_path","inner":{"name":"Error","id":"1:2576:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4640:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:1919:6713"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:31756:68493":{"id":"2:31756:68493","crate_id":2,"name":"checked_mul","span":null,"visibility":"public","docs":"Checked integer multiplication. Computes `self * rhs`, returning\n`None` if overflow occurred.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(5u64.checked_mul(1), Some(5));\nassert_eq!(u64::MAX.checked_mul(2), None);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.47.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5832:8602":{"id":"5:5832:8602","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5834:171","5:5835:1762"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:5:6406-0:4640:127":{"id":"b:5:6406-0:4640:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10262:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"ToString","id":"5:6404:212","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4640:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:6408:1376"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:438:3727":{"id":"0:438:3727","crate_id":0,"name":"required_unless_present_any","span":{"filename":"src/builder/arg.rs","begin":[3572,4],"end":[3579,5]},"visibility":"public","docs":"Sets this arg as [required] unless *any* of the specified arguments are present at runtime.\n\nIn other words, parsing will succeed only if user either\n* supplies the `self` arg.\n* supplies *one or more* of the `unless` arguments.\n\n**NOTE:** If you wish for this argument to be required unless *all of* these args are\npresent see [`Arg::required_unless_present_all`]\n\n# Examples\n\n```rust\n# use clap::Arg;\nArg::new(\"config\")\n    .required_unless_present_any(&[\"cfg\", \"dbg\"])\n# ;\n```\n\nSetting [`Arg::required_unless_present_any(names)`] requires that the argument be used at runtime\n*unless* *at least one of* the args in `names` are present. In the following example, the\nrequired argument is *not* provided, but it's not an error because one the `unless` args\nhave been supplied.\n\n```rust\n# use clap::{Command, Arg};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .required_unless_present_any(&[\"dbg\", \"infile\"])\n        .takes_value(true)\n        .long(\"config\"))\n    .arg(Arg::new(\"dbg\")\n        .long(\"debug\"))\n    .arg(Arg::new(\"infile\")\n        .short('i')\n        .takes_value(true))\n    .try_get_matches_from(vec![\n        \"prog\", \"--debug\"\n    ]);\n\nassert!(res.is_ok());\n```\n\nSetting [`Arg::required_unless_present_any(names)`] and *not* supplying *at least one of* `names`\nor this arg is an error.\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .required_unless_present_any(&[\"dbg\", \"infile\"])\n        .takes_value(true)\n        .long(\"config\"))\n    .arg(Arg::new(\"dbg\")\n        .long(\"debug\"))\n    .arg(Arg::new(\"infile\")\n        .short('i')\n        .takes_value(true))\n    .try_get_matches_from(vec![\n        \"prog\"\n    ]);\n\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind(), ErrorKind::MissingRequiredArgument);\n```\n[required]: Arg::required()\n[`Arg::required_unless_present_any(names)`]: Arg::required_unless_present_any()\n[`Arg::required_unless_present_all`]: Arg::required_unless_present_all()","links":{"Arg::required_unless_present_all()":"0:3816:1564","Arg::required_unless_present_any()":"0:3816:1564","Arg::required()":"0:3816:1564"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["names",{"kind":"generic","inner":"I"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8367:151","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"T"}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Key","id":"0:3235:2593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3252:209-0:3903:1565":{"id":"a:2:3252:209-0:3903:1565","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3252:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3903:1565","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4689:605":{"id":"0:4689:605","crate_id":0,"name":"expected","span":{"filename":"src/parser/error.rs","begin":[14,8],"end":[14,35]},"visibility":"default","docs":"The target type to downcast to","links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"super::AnyValueId","id":"0:4700:2290","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"b:2:2843-0:4801:1585":{"id":"b:2:2843-0:4801:1585","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2837:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:4801:1585","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:2845:2590"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:784:4523":{"id":"0:784:4523","crate_id":0,"name":"subcommands","span":{"filename":"src/builder/command.rs","begin":[435,4],"end":[444,5]},"visibility":"public","docs":"Adds multiple subcommands to the list of valid possibilities.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, };\n# Command::new(\"myprog\")\n.subcommands( vec![\n       Command::new(\"config\").about(\"Controls configuration functionality\")\n                                .arg(Arg::new(\"config_file\")),\n       Command::new(\"debug\").about(\"Controls debug functionality\")])\n# ;\n```\n[`IntoIterator`]: std::iter::IntoIterator","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["subcmds",{"kind":"generic","inner":"I"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8367:151","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"T"}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"App","id":"0:4244:1577","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4808":{"id":"0:4808","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1653,16],"end":[1653,21]},"visibility":{"restricted":{"parent":"0:2077:7161","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10255:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:4801:1585","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["0:4810:648"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4429:397":{"id":"0:4429:397","crate_id":0,"name":"clone","span":{"filename":"src/builder/value_parser.rs","begin":[981,9],"end":[981,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"PossibleValuesParser","id":"0:4425:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4577:397":{"id":"0:4577:397","crate_id":0,"name":"clone","span":{"filename":"src/error/context.rs","begin":[42,9],"end":[42,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"ContextValue","id":"0:4561:6700","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4713:648":{"id":"0:4713:648","crate_id":0,"name":"fmt","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[67,9],"end":[67,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10215:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10204:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2187:7162":{"id":"0:2187:7162","crate_id":0,"name":"value_source","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[599,4],"end":[605,5]},"visibility":"public","docs":"Report where argument value came from\n\n# Panics\n\nIf `id` is is not a valid argument or group id.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ValueSource};\nlet m = Command::new(\"myprog\")\n    .arg(Arg::new(\"debug\")\n        .short('d'))\n    .get_matches_from(vec![\n        \"myprog\", \"-d\"\n    ]);\n\nassert_eq!(m.value_source(\"debug\"), Some(ValueSource::CommandLine));\n```\n\n[`default_value`]: crate::Arg::default_value()","links":{},"attrs":["#[track_caller]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4823:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Key","id":"0:3235:2593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4448":{"id":"0:4448","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1288,9],"end":[1288,13]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"$crate::marker::Copy","id":"2:3250:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"std::convert::TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3250:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"RangedU64ValueParser","id":"0:4444:2163","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4242:171":{"id":"0:4242:171","crate_id":0,"name":"Output","span":{"filename":"src/builder/arg_settings.rs","begin":[302,0],"end":[330,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"ArgFlags","id":"0:3955:1580","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"0:4283:648":{"id":"0:4283:648","crate_id":0,"name":"fmt","span":{"filename":"src/builder/command.rs","begin":[77,9],"end":[77,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10215:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10204:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13725:150":{"id":"2:13725:150","crate_id":2,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13726:171","2:13727:150","2:13728:754"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1219:261":{"id":"0:1219:261","crate_id":0,"name":"alias","span":{"filename":"src/builder/possible_value.rs","begin":[114,4],"end":[117,5]},"visibility":"public","docs":"Sets a *hidden* alias for this argument value.\n\n# Examples\n\n```rust\n# use clap::PossibleValue;\nPossibleValue::new(\"slow\")\n    .alias(\"not-fast\")\n# ;\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["name",{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3318:8449":{"id":"2:3318:8449","crate_id":2,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3320:171","2:3321:879"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:768:4572":{"id":"0:768:4572","crate_id":0,"name":"mut_arg","span":{"filename":"src/builder/command.rs","begin":[255,4],"end":[275,5]},"visibility":"public","docs":"Allows one to mutate an [`Arg`] after it's been added to a [`Command`].\n\nThis can be useful for modifying the auto-generated help or version arguments.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg};\n\nlet mut cmd = Command::new(\"foo\")\n    .arg(Arg::new(\"bar\")\n        .short('b'))\n    .mut_arg(\"bar\", |a| a.short('B'));\n\nlet res = cmd.try_get_matches_from_mut(vec![\"foo\", \"-b\"]);\n\n// Since we changed `bar`'s short to \"B\" this should err as there\n// is no `-b` anymore, only `-B`\n\nassert!(res.is_err());\n\nlet res = cmd.try_get_matches_from_mut(vec![\"foo\", \"-B\"]);\nassert!(res.is_ok());\n```","links":{"`Command`":"0:755:1563","`Arg`":"0:3816:1564"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["arg_id",{"kind":"generic","inner":"T"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3492:132","args":{"parenthesized":{"inputs":[{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3816:1564","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}}],"output":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3816:1564","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Key","id":"0:3235:2593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13016:8599":{"id":"2:13016:8599","crate_id":2,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13018:10955","2:13019:909","2:13020:21359","2:13021:21360"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3179-0:3903:1565":{"id":"b:2:3179-0:3903:1565","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3149:217","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3903:1565","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["2:3182:127","2:3183:1395"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3173-0:4456:2171":{"id":"b:2:3173-0:4456:2171","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BoolValueParser","id":"0:4456:2171","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3175:669"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:819:4806":{"id":"0:819:4806","crate_id":0,"name":"dont_delimit_trailing_values","span":{"filename":"src/builder/command.rs","begin":[994,4],"end":[1000,5]},"visibility":"public","docs":"Disables the automatic delimiting of values after `--` or when [`Command::trailing_var_arg`]\nwas used.\n\n**NOTE:** The same thing can be done manually by setting the final positional argument to\n[`Arg::use_value_delimiter(false)`]. Using this setting is safer, because it's easier to locate\nwhen making changes.\n\n**NOTE:** This choice is propagated to all child subcommands.\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg};\nCommand::new(\"myprog\")\n    .dont_delimit_trailing_values(true)\n    .get_matches();\n```\n\n[`Arg::use_value_delimiter(false)`]: crate::Arg::use_value_delimiter()","links":{"`Command::trailing_var_arg`":"0:4244:1577","crate::Arg::use_value_delimiter()":"0:3816:1564"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5727:10637":{"id":"1:5727:10637","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5728:14289","1:5729:21402","1:5730:6144","1:5731:21403","1:5732:10855","1:5733:10856","1:5734:21404","1:5735:1283","1:5736:21405","1:5737:21406","1:5738:21407","1:5739:21408","1:5740:21409","1:5741:21410","1:5742:21411","1:5743:21412"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1372:6352":{"id":"0:1372:6352","crate_id":0,"name":"parse_ref","span":{"filename":"src/builder/value_parser.rs","begin":[649,4],"end":[668,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["cmd",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Command","id":"0:755:1563","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}],["arg",{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Arg","id":"0:3816:1564","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["value",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"std::ffi::OsStr","id":"1:2923:169","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Value","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:1362:2165","args":null,"param_names":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"crate::Error","id":"0:4640:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4530:6802":{"id":"0:4530:6802","crate_id":0,"name":"MinValues","span":{"filename":"src/error/context.rs","begin":[20,4],"end":[20,13]},"visibility":"default","docs":"Minimum number of allowed values","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:3526:8475":{"id":"2:3526:8475","crate_id":2,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3528:226","2:3529:196","2:3530:21305"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:3971:2847":{"id":"0:3971:2847","crate_id":0,"name":"Required","span":{"filename":"src/builder/arg_settings.rs","begin":[43,4],"end":[43,12]},"visibility":"default","docs":"Deprecated, replaced with [`Arg::required`] and [`Arg::is_required_set`]","links":{"`Arg::is_required_set`":"0:3816:1564","`Arg::required`":"0:3816:1564"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:13463:7744":{"id":"2:13463:7744","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:15839:8315","self::pattern":"2:12997:8603"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:8597","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2928:167":{"id":"2:2928:167","crate_id":2,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2929:404","2:2930:4150","2:2931:7967","2:2932:9588"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2897:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2938:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:2:3169-0:4397:2164":{"id":"b:2:3169-0:4397:2164","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"StringValueParser","id":"0:4397:2164","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3172:2288"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:569":{"id":"0:569","crate_id":0,"name":null,"span":{"filename":"src/builder/arg.rs","begin":[5092,0],"end":[5092,32]},"visibility":{"restricted":{"parent":"0:242:1829","path":"::builder::arg"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2897:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3816:1564","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4583:894":{"id":"0:4583:894","crate_id":0,"name":"ne","span":{"filename":"src/error/context.rs","begin":[42,23],"end":[42,32]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ContextValue","id":"0:4561:6700","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2337":{"id":"0:2337","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1670,0],"end":[1674,1]},"visibility":{"restricted":{"parent":"0:2077:7161","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["rfold","advance_back_by","try_rfold","rfind","nth_back"],"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedIterator","id":"2:8411:120","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:4801:1585","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["0:2339:7523"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3472:8468":{"id":"2:3472:8468","crate_id":2,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3473:534"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"2:3459:116","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13361:780":{"id":"2:13361:780","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:15839:8315"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3240:200-0:4403:2176":{"id":"a:2:3240:200-0:4403:2176","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3240:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OsStringValueParser","id":"0:4403:2176","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4286:397":{"id":"0:4286:397","crate_id":0,"name":"clone","span":{"filename":"src/builder/command.rs","begin":[77,16],"end":[77,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"App","id":"0:4244:1577","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3179-0:4686:7087":{"id":"b:2:3179-0:4686:7087","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3149:217","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4686:7087","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3182:127","2:3183:1395"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1314:4013":{"id":"0:1314:4013","crate_id":0,"name":"os_string","span":{"filename":"src/builder/value_parser.rs","begin":[193,4],"end":[195,5]},"visibility":"public","docs":"[`OsString`][std::ffi::OsString] parser for argument values\n\n# Example\n\n ```rust\n# use clap::{Command, Arg, builder::ValueParser};\nuse std::ffi::OsString;\nuse std::os::unix::ffi::{OsStrExt,OsStringExt};\nlet r = Command::new(\"myprog\")\n    .arg(\n        Arg::new(\"arg\")\n        .required(true)\n        .value_parser(ValueParser::os_string())\n    )\n    .try_get_matches_from(vec![\n        OsString::from(\"myprog\"),\n        OsString::from_vec(vec![0xe9])\n    ]);\n\nassert!(r.is_ok());\nlet m = r.unwrap();\nlet arg: &OsString = m.get_one(\"arg\")\n    .expect(\"required\");\nassert_eq!(arg.as_bytes(), &[0xe9]);\n```","links":{"std::ffi::OsString":"1:2920:170"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1399:2002":{"id":"0:1399:2002","crate_id":0,"name":"parse","span":{"filename":"src/builder/value_parser.rs","begin":[787,4],"end":[802,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["cmd",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Command","id":"0:755:1563","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}],["arg",{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Arg","id":"0:3816:1564","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["value",{"kind":"resolved_path","inner":{"name":"std::ffi::OsString","id":"1:2920:170","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Value","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:1362:2165","args":null,"param_names":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"crate::Error","id":"0:4640:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:962:5593":{"id":"0:962:5593","crate_id":0,"name":"get_subcommand_help_heading","span":{"filename":"src/builder/command.rs","begin":[3451,4],"end":[3453,5]},"visibility":"public","docs":"Returns the help heading for listing subcommands.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3184-0:4356:1583":{"id":"b:2:3184-0:4356:1583","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:4356:1583","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3187:127","2:3188:1394"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4830":{"id":"0:4830","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/value_source.rs","begin":[2,9],"end":[2,14]},"visibility":{"restricted":{"parent":"0:2423:7162","path":"::parser::matches::value_source"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10255:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4823:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:4831:648"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1524":{"id":"0:1524","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1666,0],"end":[1696,1]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["possible_values","parse"],"trait":{"kind":"resolved_path","inner":{"name":"TypedValueParser","id":"0:1362:2165","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BoolishValueParser","id":"0:4468:2172","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:1525:6312","0:1526:6352","0:1531:3153"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:3252:209-0:4561:6700":{"id":"a:2:3252:209-0:4561:6700","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3252:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ContextValue","id":"0:4561:6700","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4551":{"id":"0:4551","crate_id":0,"name":null,"span":{"filename":"src/error/context.rs","begin":[2,15],"end":[2,20]},"visibility":{"restricted":{"parent":"0:1839:470","path":"::error::context"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:4515:6699","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:4552:397"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13486:10663":{"id":"2:13486:10663","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:15839:8315"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:49628:8617","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6077:67678":{"id":"5:6077:67678","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2146","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8090:2895","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2146","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8090:2895","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:874:5049":{"id":"0:874:5049","crate_id":0,"name":"next_help_heading","span":{"filename":"src/builder/command.rs","begin":[1885,4],"end":[1891,5]},"visibility":"public","docs":"Set the default section heading for future args.\n\nThis will be used for any arg that hasn't had [`Arg::help_heading`] called.\n\nThis is useful if the default `OPTIONS` or `ARGS` headings are\nnot specific enough for one's use case.\n\nFor subcommands, see [`Command::subcommand_help_heading`]\n\n[`App::arg`]: Command::arg()\n[`Arg::help_heading`]: crate::Arg::help_heading()","links":{"`Command::subcommand_help_heading`":"0:4244:1577","crate::Arg::help_heading()":"0:3816:1564"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["heading",{"kind":"generic","inner":"O"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"O"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3615:6281":{"id":"2:3615:6281","crate_id":2,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3617:6466","2:3618:6471","2:3619:1928"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:4573:6795":{"id":"0:4573:6795","crate_id":0,"name":"Number","span":{"filename":"src/error/context.rs","begin":[54,4],"end":[54,17]},"visibility":"default","docs":"A single value","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"primitive","inner":"isize"}]}},"2:31747:68486":{"id":"2:31747:68486","crate_id":2,"name":"from_be","span":null,"visibility":"public","docs":"Converts an integer from big endian to the target's endianness.\n\nOn big endian this is a no-op. On little endian the bytes are\nswapped.\n\n# Examples\n\nBasic usage:\n\n```\nlet n = 0x1Au64;\n\nif cfg!(target_endian = \"big\") {\n    assert_eq!(u64::from_be(n), n)\n} else {\n    assert_eq!(u64::from_be(n), n.swap_bytes())\n}\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["x",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:31796:68523":{"id":"2:31796:68523","crate_id":2,"name":"borrowing_sub","span":null,"visibility":"public","docs":"Calculates `self - rhs - borrow` without the ability to overflow.\n\nPerforms \"ternary subtraction\" which takes in an extra bit to subtract, and may return\nan additional bit of overflow. This allows for chaining together multiple subtractions\nto create \"big integers\" which represent larger values.\n\n# Examples\n\nBasic usage\n\n```\n#![feature(bigint_helper_methods)]\nassert_eq!(5u64.borrowing_sub(2, false), (3, false));\nassert_eq!(5u64.borrowing_sub(2, true), (2, false));\nassert_eq!(0u64.borrowing_sub(1, false), (u64::MAX, true));\nassert_eq!(0u64.borrowing_sub(1, true), (u64::MAX - 1, true));\n```","links":{},"attrs":["#[unstable(feature = \"bigint_helper_methods\", issue = \"85532\")]","#[rustc_const_unstable(feature = \"const_bigint_helper_methods\", issue =\n\"85532\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}],["borrow",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"u64"},{"kind":"primitive","inner":"bool"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:806:4731":{"id":"0:806:4731","crate_id":0,"name":"print_long_help","span":{"filename":"src/builder/command.rs","begin":[770,4],"end":[778,5]},"visibility":"public","docs":"Prints the long help message (`--help`) to [`io::stdout()`].\n\nSee also [`Command::print_help`].\n\n# Examples\n\n```rust\n# use clap::Command;\nlet mut cmd = Command::new(\"myprog\");\ncmd.print_long_help();\n```\n[`io::stdout()`]: std::io::stdout()\n[`BufWriter`]: std::io::BufWriter\n[`-h` (short)]: Arg::help()\n[`--help` (long)]: Arg::long_help()","links":{"`Command::print_help`":"0:4244:1577","std::io::stdout()":"1:4423:8235"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:4026:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3143:149":{"id":"2:3143:149","crate_id":2,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3145:2288"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:838:4507":{"id":"0:838:4507","crate_id":0,"name":"bin_name","span":{"filename":"src/builder/command.rs","begin":[1420,4],"end":[1423,5]},"visibility":"public","docs":"Overrides the runtime-determined name of the binary for help and error messages.\n\nThis should only be used when absolutely necessary, such as when the binary name for your\napplication is misleading, or perhaps *not* how the user should invoke your program.\n\n**Pro-tip:** When building things such as third party `cargo`\nsubcommands, this setting **should** be used!\n\n**NOTE:** This *does not* change or set the name of the binary file on\ndisk. It only changes what clap thinks the name is for the purposes of\nerror or help messages.\n\n# Examples\n\n```no_run\n# use clap::Command;\nCommand::new(\"My Program\")\n     .bin_name(\"my_binary\")\n# ;\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["name",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4592:6781":{"id":"0:4592:6781","crate_id":0,"name":"InvalidSubcommand","span":{"filename":"src/error/kind.rs","begin":[57,4],"end":[57,21]},"visibility":"default","docs":"Occurs when the user provides an unrecognized [`Subcommand`] which meets the threshold for\nbeing similar enough to an existing subcommand.\nIf it doesn't meet the threshold, or the 'suggestions' feature is disabled,\nthe more general [`UnknownArgument`] error is returned.\n\n# Examples\n\n ```\n# use clap::{Command, Arg, ErrorKind, };\nlet result = Command::new(\"prog\")\n    .subcommand(Command::new(\"config\")\n        .about(\"Used for configuration\")\n        .arg(Arg::new(\"config_file\")\n            .help(\"The configuration file to use\")))\n    .try_get_matches_from(vec![\"prog\", \"confi\"]);\nassert!(result.is_err());\nassert_eq!(result.unwrap_err().kind(), ErrorKind::InvalidSubcommand);\n```\n\n[`Subcommand`]: crate::Subcommand\n[`UnknownArgument`]: ErrorKind::UnknownArgument","links":{"crate::Subcommand":"0:170:1575","ErrorKind::UnknownArgument":"0:4587:1584"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:4361:3969":{"id":"0:4361:3969","crate_id":0,"name":"AnyPath","span":{"filename":"src/builder/value_hint.rs","begin":[36,4],"end":[36,11]},"visibility":"default","docs":"Any existing path.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:208":{"id":"0:208","crate_id":0,"name":null,"span":{"filename":"src/derive.rs","begin":[570,0],"end":[580,1]},"visibility":{"restricted":{"parent":"0:110:536","path":"::derive"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Subcommand","id":"0:170:1575","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Subcommand","id":"0:170:1575","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["0:210:2115","0:211:2116","0:212:2118"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:3252:209-0:4397:2164":{"id":"a:2:3252:209-0:4397:2164","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3252:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"StringValueParser","id":"0:4397:2164","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:3398:8464":{"id":"2:3398:8464","crate_id":2,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3400:343"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:3252:209-0:4706:1568":{"id":"a:2:3252:209-0:4706:1568","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3252:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4706:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4569:1518":{"id":"0:4569:1518","crate_id":0,"name":"0","span":{"filename":"src/error/context.rs","begin":[50,11],"end":[50,17]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"2:13419:67027":{"id":"2:13419:67027","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"str::split":"1:15845:8320","prim@char":"1:15839:8315","self::pattern":"2:12997:8603","`DoubleEndedIterator`":"2:8411:120","str::rsplit_terminator":"1:15845:8320"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:49370:8631","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:8597","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9222:7159-0:1294:2166":{"id":"a:2:9222:7159-0:1294:2166","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9222:7159","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1294:2166","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"b:2:3169-0:4750:7086":{"id":"b:2:3169-0:4750:7086","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValuesRef","id":"0:4750:7086","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["2:3172:2288"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4712":{"id":"0:4712","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[67,9],"end":[67,14]},"visibility":{"restricted":{"parent":"0:2077:7161","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10255:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4706:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:4713:648"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3969-0:4773:1588":{"id":"b:2:3969-0:4773:1588","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3967:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:4773:1588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:3971:1408"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3173-0:4823:1587":{"id":"b:2:3173-0:4823:1587","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4823:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3175:669"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3969-0:3903:1565":{"id":"b:2:3969-0:3903:1565","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3967:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3903:1565","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["2:3971:1408"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:2159:7307":{"id":"0:2159:7307","crate_id":0,"name":"value_of_lossy","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[363,4],"end":[368,5]},"visibility":"public","docs":"Deprecated, replaced with [`ArgMatches::get_one()`]","links":{"`ArgMatches::get_one()`":"0:4706:1568"},"attrs":["#[track_caller]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Cow","id":"5:792:108","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Key","id":"0:3235:2593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:31790:68517":{"id":"2:31790:68517","crate_id":2,"name":"wrapping_shr","span":null,"visibility":"public","docs":"Panic-free bitwise shift-right; yields `self >> mask(rhs)`,\nwhere `mask` removes any high-order bits of `rhs` that\nwould cause the shift to exceed the bitwidth of the type.\n\nNote that this is *not* the same as a rotate-right; the\nRHS of a wrapping shift-right is restricted to the range\nof the type, rather than the bits shifted out of the LHS\nbeing returned to the other end. The primitive integer\ntypes all implement a [`rotate_right`](Self::rotate_right) function,\nwhich may be what you want instead.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(128u64.wrapping_shr(7), 1);\nassert_eq!(128u64.wrapping_shr(128), 128);\n```","links":{"Self::rotate_right":"1:15859:8332"},"attrs":["#[stable(feature = \"num_wrapping\", since = \"1.2.0\")]","#[rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:163:2035":{"id":"0:163:2035","crate_id":0,"name":"from_arg_matches","span":{"filename":"src/derive.rs","begin":[320,4],"end":[320,69]},"visibility":"default","docs":"Instantiate `Self` from [`ArgMatches`], parsing the arguments as needed.\n\nMotivation: If our application had two CLI options, `--name\n<STRING>` and the flag `--debug`, we may create a struct as follows:\n\n ```ignore\nstruct Context {\n    name: String,\n    debug: bool\n}\n```\n\nWe then need to convert the `ArgMatches` that `clap` generated into our struct.\n`from_arg_matches` serves as the equivalent of:\n\n ```ignore\n# use clap::ArgMatches;\n# struct Context {\n#   name: String,\n#   debug: bool\n# }\nimpl From<ArgMatches> for Context {\n   fn from(m: ArgMatches) -> Self {\n       Context {\n           name: m.get_one::<String>(\"name\").unwrap().clone(),\n           debug: *m.get_one::<bool>(\"debug\").expect(\"defaulted by clap\"),\n       }\n   }\n}\n```","links":{"`ArgMatches`":"0:4706:1568"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["matches",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4706:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4640:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:14109:141":{"id":"2:14109:141","crate_id":2,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14110:266","2:14111:507","2:14112:269","2:14113:1066"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:3240:200-0:4432:2162":{"id":"a:2:3240:200-0:4432:2162","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3240:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:4432:2162","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:31818:68544":{"id":"2:31818:68544","crate_id":2,"name":"wrapping_next_power_of_two","span":null,"visibility":"public","docs":"Returns the smallest power of two greater than or equal to `n`. If\nthe next power of two is greater than the type's maximum value,\nthe return value is wrapped to `0`.\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(wrapping_next_power_of_two)]\n\nassert_eq!(2u64.wrapping_next_power_of_two(), 2);\nassert_eq!(3u64.wrapping_next_power_of_two(), 4);\nassert_eq!(u64::MAX.wrapping_next_power_of_two(), 0);\n```","links":{},"attrs":["#[unstable(feature = \"wrapping_next_power_of_two\", issue = \"32463\", reason =\n\"needs decision on wrapping behaviour\")]","#[rustc_const_unstable(feature = \"wrapping_next_power_of_two\", issue =\n\"32463\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1000:5649":{"id":"0:1000:5649","crate_id":0,"name":"is_disable_help_subcommand_set","span":{"filename":"src/builder/command.rs","begin":[3667,4],"end":[3669,5]},"visibility":"public","docs":"Report whether [`Command::disable_help_subcommand`] is set","links":{"`Command::disable_help_subcommand`":"0:4244:1577"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4542:6778":{"id":"0:4542:6778","crate_id":0,"name":"SuggestedValue","span":{"filename":"src/error/context.rs","begin":[32,4],"end":[32,18]},"visibility":"default","docs":"Potential fix for the user","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:31765:68501":{"id":"2:31765:68501","crate_id":2,"name":"checked_log","span":null,"visibility":"public","docs":"Returns the logarithm of the number with respect to an arbitrary base,\nrounded down.\n\nReturns `None` if the number is zero, or if the base is not at least 2.\n\nThis method might not be optimized owing to implementation details;\n`checked_log2` can produce results more efficiently for base 2, and\n`checked_log10` can produce results more efficiently for base 10.\n\n# Examples\n\n```\n#![feature(int_log)]\nassert_eq!(5u64.checked_log(5), Some(1));\n```","links":{},"attrs":["#[unstable(feature = \"int_log\", issue = \"70887\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["base",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u32"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1575:2158":{"id":"0:1575:2158","crate_id":0,"name":"value_parser","span":{"filename":"src/builder/value_parser.rs","begin":[1890,4],"end":[1894,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"qualified_path","inner":{"name":"Parser","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:1543:2167","args":null,"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4687:8664":{"id":"1:4687:8664","crate_id":1,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4688:7671","1:4689:16241","1:4690:16242","1:4691:16243"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:3360:107":{"id":"0:3360:107","crate_id":0,"name":"Count","span":{"filename":"src/builder/action.rs","begin":[198,4],"end":[198,9]},"visibility":"default","docs":"When encountered, increment a `u8` counter\n\nIf no [`default_value`][super::Arg::default_value] is set, it will be `0`.\n\nNo value is allowed. To optionally accept a value, see\n[`Arg::default_missing_value`][super::Arg::default_missing_value]\n\n# Examples\n\n```rust\n# use clap::Command;\n# use clap::Arg;\nlet cmd = Command::new(\"mycmd\")\n    .arg(\n        Arg::new(\"flag\")\n            .long(\"flag\")\n            .action(clap::ArgAction::Count)\n    );\n\nlet matches = cmd.clone().try_get_matches_from([\"mycmd\", \"--flag\", \"--flag\"]).unwrap();\nassert!(matches.contains_id(\"flag\"));\nassert_eq!(matches.occurrences_of(\"flag\"), 0);\nassert_eq!(\n    matches.get_one::<u8>(\"flag\").copied(),\n    Some(2)\n);\n\nlet matches = cmd.try_get_matches_from([\"mycmd\"]).unwrap();\nassert!(matches.contains_id(\"flag\"));\nassert_eq!(matches.occurrences_of(\"flag\"), 0);\nassert_eq!(\n    matches.get_one::<u8>(\"flag\").copied(),\n    Some(0)\n);\n```","links":{"super::Arg::default_value":"0:3816:1564","super::Arg::default_missing_value":"0:3816:1564"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"b:2:3173-0:3970:1581":{"id":"b:2:3173-0:3970:1581","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgSettings","id":"0:3970:1581","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3175:669"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:31773:68507":{"id":"2:31773:68507","crate_id":2,"name":"checked_pow","span":null,"visibility":"public","docs":"Checked exponentiation. Computes `self.pow(exp)`, returning `None` if\noverflow occurred.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(2u64.checked_pow(5), Some(32));\nassert_eq!(u64::MAX.checked_pow(2), None);\n```","links":{},"attrs":["#[stable(feature = \"no_panic_pow\", since = \"1.34.0\")]","#[rustc_const_stable(feature = \"const_int_pow\", since = \"1.50.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["exp",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9222:7159-0:4298:1582":{"id":"a:2:9222:7159-0:4298:1582","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9222:7159","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:4298:1582","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4455:648":{"id":"0:4455:648","crate_id":0,"name":"fmt","span":{"filename":"src/builder/value_parser.rs","begin":[1288,22],"end":[1288,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10215:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10204:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3252:209-0:1294:2166":{"id":"a:2:3252:209-0:1294:2166","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3252:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1294:2166","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:383:3193":{"id":"0:383:3193","crate_id":0,"name":"allow_hyphen_values","span":{"filename":"src/builder/arg.rs","begin":[1724,4],"end":[1730,5]},"visibility":"public","docs":"Allows values which start with a leading hyphen (`-`)\n\n**NOTE:** Setting this requires [`Arg::takes_value`]\n\n**WARNING**: Take caution when using this setting combined with\n[`Arg::multiple_values`], as this becomes ambiguous `$ prog --arg -- -- val`. All\nthree `--, --, val` will be values when the user may have thought the second `--` would\nconstitute the normal, \"Only positional args follow\" idiom. To fix this, consider using\n[`Arg::multiple_occurrences`] which only allows a single value at a time.\n\n**WARNING**: When building your CLIs, consider the effects of allowing leading hyphens and\nthe user passing in a value that matches a valid short. For example, `prog -opt -F` where\n`-F` is supposed to be a value, yet `-F` is *also* a valid short for another arg.\nCare should be taken when designing these args. This is compounded by the ability to \"stack\"\nshort args. I.e. if `-val` is supposed to be a value, but `-v`, `-a`, and `-l` are all valid\nshorts.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"pat\")\n        .takes_value(true)\n        .allow_hyphen_values(true)\n        .long(\"pattern\"))\n    .get_matches_from(vec![\n        \"prog\", \"--pattern\", \"-file\"\n    ]);\n\nassert_eq!(m.value_of(\"pat\"), Some(\"-file\"));\n```\n\nNot setting `Arg::allow_hyphen_values(true)` and supplying a value which starts with a\nhyphen is an error.\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"pat\")\n        .takes_value(true)\n        .long(\"pattern\"))\n    .try_get_matches_from(vec![\n        \"prog\", \"--pattern\", \"-file\"\n    ]);\n\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind(), ErrorKind::UnknownArgument);\n```\n[`Arg::number_of_values(1)`]: Arg::number_of_values()","links":{"`Arg::multiple_values`":"0:3816:1564","`Arg::multiple_occurrences`":"0:3816:1564","`Arg::takes_value`":"0:3816:1564"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3335:8450":{"id":"2:3335:8450","crate_id":2,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3336:171","2:3337:900"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:3391:2326":{"id":"0:3391:2326","crate_id":0,"name":"AllowHyphenValues","span":{"filename":"src/builder/app_settings.rs","begin":[91,4],"end":[91,21]},"visibility":"default","docs":"Deprecated, replaced with [`Command::allow_hyphen_values`] and\n[`Arg::is_allow_hyphen_values_set`]","links":{"`Command::allow_hyphen_values`":"0:4244:1577","`Arg::is_allow_hyphen_values_set`":"0:3816:1564"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:809:4744":{"id":"0:809:4744","crate_id":0,"name":"write_long_help","span":{"filename":"src/builder/command.rs","begin":[820,4],"end":[826,5]},"visibility":"public","docs":"Writes the long help message (`--help`) to a [`io::Write`] object.\n\nSee also [`Command::write_help`].\n\n# Examples\n\n```rust\n# use clap::Command;\nuse std::io;\nlet mut cmd = Command::new(\"myprog\");\nlet mut out = io::stdout();\ncmd.write_long_help(&mut out).expect(\"failed to write to stdout\");\n```\n[`io::Write`]: std::io::Write\n[`-h` (short)]: Arg::help()\n[`--help` (long)]: Arg::long_help()","links":{"std::io::Write":"1:4669:1932","`Command::write_help`":"0:4244:1577"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["w",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"W"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:4026:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"W","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"io::Write","id":"1:4669:1932","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4431:648":{"id":"0:4431:648","crate_id":0,"name":"fmt","span":{"filename":"src/builder/value_parser.rs","begin":[981,16],"end":[981,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10215:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10204:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4557:593":{"id":"0:4557:593","crate_id":0,"name":"eq","span":{"filename":"src/error/context.rs","begin":[2,29],"end":[2,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:4515:6699","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3173-0:3816:1564":{"id":"b:2:3173-0:3816:1564","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3816:1564","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["2:3175:669"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:417:3606":{"id":"0:417:3606","crate_id":0,"name":"hide_short_help","span":{"filename":"src/builder/arg.rs","begin":[2972,4],"end":[2978,5]},"visibility":"public","docs":"Hides an argument from short help (`-h`).\n\n**NOTE:** This does **not** hide the argument from usage strings on error\n\n**NOTE:** Setting this option will cause next-line-help output style to be used\nwhen long help (`--help`) is called.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg};\nArg::new(\"debug\")\n    .hide_short_help(true);\n```\n\nSetting `hide_short_help(true)` will hide the argument when displaying short help text\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .long(\"config\")\n        .hide_short_help(true)\n        .help(\"Some help text describing the --config arg\"))\n    .get_matches_from(vec![\n        \"prog\", \"-h\"\n    ]);\n```\n\nThe above example displays\n\n```text\nhelptest\n\nUSAGE:\n   helptest [OPTIONS]\n\nOPTIONS:\n-h, --help       Print help information\n-V, --version    Print version information\n```\n\nHowever, when --help is called\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .long(\"config\")\n        .hide_short_help(true)\n        .help(\"Some help text describing the --config arg\"))\n    .get_matches_from(vec![\n        \"prog\", \"--help\"\n    ]);\n```\n\nThen the following would be displayed\n\n```text\nhelptest\n\nUSAGE:\n   helptest [OPTIONS]\n\nOPTIONS:\n    --config     Some help text describing the --config arg\n-h, --help       Print help information\n-V, --version    Print version information\n```","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:946:3949":{"id":"0:946:3949","crate_id":0,"name":"get_all_aliases","span":{"filename":"src/builder/command.rs","begin":[3382,4],"end":[3384,5]},"visibility":"public","docs":"Iterate through the set of *all* the aliases for this subcommand, both visible and hidden.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8565:157","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"outlives":"'_"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1331:669":{"id":"0:1331:669","crate_id":0,"name":"from","span":{"filename":"src/builder/value_parser.rs","begin":[384,4],"end":[387,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["value",{"kind":"resolved_path","inner":{"name":"std::ops::RangeFrom","id":"2:45762:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i64"}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3969-0:4298:1582":{"id":"b:2:3969-0:4298:1582","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3967:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:4298:1582","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["2:3971:1408"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3860:397":{"id":"0:3860:397","crate_id":0,"name":"clone","span":{"filename":"src/builder/arg.rs","begin":[60,18],"end":[60,23]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3816:1564","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:787-0:4706:1568":{"id":"b:5:787-0:4706:1568","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:783:211","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4706:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:789:4115","5:790:4707","5:791:9628"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4759":{"id":"0:4759","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1399,16],"end":[1399,21]},"visibility":{"restricted":{"parent":"0:2077:7161","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Debug","id":"2:10255:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10255:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValuesRef","id":"0:4750:7086","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["0:4762:648"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2846-0:4686:7087":{"id":"b:2:2846-0:4686:7087","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2840:8484","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4686:7087","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2848:21287"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3364:2281":{"id":"0:3364:2281","crate_id":0,"name":"Version","span":{"filename":"src/builder/action.rs","begin":[249,4],"end":[249,11]},"visibility":"default","docs":"When encountered, display [`Command::version`][super::App::version]\n\nDepending on the flag, [`Command::long_version`][super::App::long_version] may be shown\n\n# Examples\n\n```rust\n# use clap::Command;\n# use clap::Arg;\nlet cmd = Command::new(\"mycmd\")\n    .version(\"1.0.0\")\n    .arg(\n        Arg::new(\"special-version\")\n            .long(\"special-version\")\n            .action(clap::ArgAction::Version)\n    );\n\n// Existing help still exists\nlet err = cmd.clone().try_get_matches_from([\"mycmd\", \"--version\"]).unwrap_err();\nassert_eq!(err.kind(), clap::error::ErrorKind::DisplayVersion);\n\n// New help available\nlet err = cmd.try_get_matches_from([\"mycmd\", \"--special-version\"]).unwrap_err();\nassert_eq!(err.kind(), clap::error::ErrorKind::DisplayVersion);\n```","links":{"super::App::long_version":"0:4244:1577","super::App::version":"0:4244:1577"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:2256":{"id":"0:2256","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1417,0],"end":[1421,1]},"visibility":{"restricted":{"parent":"0:2077:7161","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["rfold","advance_back_by","try_rfold","rfind","nth_back"],"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedIterator","id":"2:8411:120","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValuesRef","id":"0:4750:7086","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["0:2259:7523"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:5713:10642":{"id":"1:5713:10642","crate_id":1,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5714:6144","1:5715:21400","1:5716:21401"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1239":{"id":"0:1239","crate_id":0,"name":null,"span":{"filename":"src/builder/possible_value.rs","begin":[255,0],"end":[259,1]},"visibility":{"restricted":{"parent":"0:1203:2155","path":"::builder::possible_value"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:4298:1582","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["0:1241:669"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4419":{"id":"0:4419","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[868,9],"end":[868,14]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"$crate::clone::Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"crate::ValueEnum","id":"0:174:1576","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3240:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3252:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"EnumValueParser","id":"0:4415:2173","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}},"items":["0:4421:397"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:8565:157":{"id":"2:8565:157","crate_id":2,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8566:2018","2:8567:909","2:8568:9596","2:8571:4560","2:8572:484","2:8574:2826","2:8577:7737","2:8578:9597","2:8579:9598","2:8580:5629","2:8582:8719","2:8584:9599","2:8585:9600","2:8587:828","2:8590:9601","2:8597:5569","2:8599:3939","2:8602:5851","2:8603:4143","2:8604:9602","2:8606:6014","2:8608:9603","2:8611:1287","2:8612:5829","2:8613:9604","2:8617:5631","2:8620:7526","2:8621:9605","2:8622:9606","2:8624:9607","2:8625:3357","2:8627:9608","2:8630:9609","2:8632:9610","2:8642:9611","2:8657:9612","2:8659:9613","2:8663:7845","2:8672:7699","2:8675:9614","2:8677:9615","2:8680:265","2:8687:283","2:8694:2138","2:8701:6759","2:8710:9616","2:8720:1001","2:8727:9617","2:8734:4150","2:8735:7967","2:8736:8488","2:8748:8487","2:8755:7919","2:8767:8486","2:8774:6660","2:8775:9618","2:8780:3845","2:8783:2141","2:8786:9619","2:8787:7572","2:8789:9620","2:8791:404","2:8794:9621","2:8797:984","2:8800:9622","2:8803:593","2:8806:9623","2:8809:894","2:8811:813","2:8813:779","2:8815:701","2:8817:684","2:8819:9624","2:8820:9625","2:8828:9626"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:4576":{"id":"0:4576","crate_id":0,"name":null,"span":{"filename":"src/error/context.rs","begin":[42,9],"end":[42,14]},"visibility":{"restricted":{"parent":"0:1839:470","path":"::error::context"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ContextValue","id":"0:4561:6700","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:4577:397"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2843-0:4823:1587":{"id":"b:2:2843-0:4823:1587","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2837:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4823:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2845:2590"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3169-0:4356:1583":{"id":"b:2:3169-0:4356:1583","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:4356:1583","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3172:2288"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1842:295":{"id":"0:1842:295","crate_id":0,"name":"as_str","span":{"filename":"src/error/kind.rs","begin":[400,4],"end":[433,5]},"visibility":"public","docs":"End-user description of the error case, where relevant","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'static","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:198":{"id":"0:198","crate_id":0,"name":null,"span":{"filename":"src/derive.rs","begin":[546,0],"end":[559,1]},"visibility":{"restricted":{"parent":"0:110:536","path":"::derive"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromArgMatches","id":"0:162:1573","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["from_arg_matches_mut","update_from_arg_matches_mut"],"trait":{"kind":"resolved_path","inner":{"name":"FromArgMatches","id":"0:162:1573","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["0:200:2035","0:201:2006","0:202:2082","0:203:2026"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3486:130":{"id":"2:3486:130","crate_id":2,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3488:365"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3489:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:2199:1909":{"id":"0:2199:1909","crate_id":0,"name":"subcommand","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[922,4],"end":[924,5]},"visibility":"public","docs":"The name and `ArgMatches` of the current [subcommand].\n\nSubcommand values are put in a child [`ArgMatches`]\n\nReturns `None` if the subcommand wasn't present at runtime,\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg, };\n let app_m = Command::new(\"git\")\n     .subcommand(Command::new(\"clone\"))\n     .subcommand(Command::new(\"push\"))\n     .subcommand(Command::new(\"commit\"))\n     .get_matches();\n\nmatch app_m.subcommand() {\n    Some((\"clone\",  sub_m)) => {}, // clone was used\n    Some((\"push\",   sub_m)) => {}, // push was used\n    Some((\"commit\", sub_m)) => {}, // commit was used\n    _                       => {}, // Either no subcommand or one not tested for...\n}\n```\n\nAnother useful scenario is when you want to support third party, or external, subcommands.\nIn these cases you can't know the subcommand name ahead of time, so use a variable instead\nwith pattern matching!\n\n```rust\n# use clap::Command;\n// Assume there is an external subcommand named \"subcmd\"\nlet app_m = Command::new(\"myprog\")\n    .allow_external_subcommands(true)\n    .get_matches_from(vec![\n        \"myprog\", \"subcmd\", \"--option\", \"value\", \"-fff\", \"--flag\"\n    ]);\n\n// All trailing arguments will be stored under the subcommand's sub-matches using an empty\n// string argument name\nmatch app_m.subcommand() {\n    Some((external, sub_m)) => {\n         let ext_args: Vec<&str> = sub_m.get_many::<String>(\"\")\n            .unwrap().map(|s| s.as_str()).collect();\n         assert_eq!(external, \"subcmd\");\n         assert_eq!(ext_args, [\"--option\", \"value\", \"-fff\", \"--flag\"]);\n    },\n    _ => {},\n}\n```\n[subcommand]: crate::Command::subcommand","links":{"crate::Command::subcommand":"0:4244:1577","`ArgMatches`":"0:4706:1568"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4706:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:162:1573":{"id":"0:162:1573","crate_id":0,"name":"FromArgMatches","span":{"filename":"src/derive.rs","begin":[287,0],"end":[365,1]},"visibility":"public","docs":"Converts an instance of [`ArgMatches`] to a user-defined container.\n\nDerived as part of [`Parser`], [`Args`], and [`Subcommand`].","links":{"`Subcommand`":"0:170:1575","`Parser`":"0:127:1574","`ArgMatches`":"0:4706:1568","`Args`":"0:167:1571"},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:163:2035","0:164:2006","0:165:2082","0:166:2026"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":["0:198"]}},"2:9222:7159":{"id":"2:9222:7159","crate_id":2,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1841":{"id":"0:1841","crate_id":0,"name":null,"span":{"filename":"src/error/kind.rs","begin":[398,0],"end":[434,1]},"visibility":{"restricted":{"parent":"0:1840:769","path":"::error::kind"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4587:1584","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:1842:295"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:31766:68502":{"id":"2:31766:68502","crate_id":2,"name":"checked_log2","span":null,"visibility":"public","docs":"Returns the base 2 logarithm of the number, rounded down.\n\nReturns `None` if the number is zero.\n\n# Examples\n\n```\n#![feature(int_log)]\nassert_eq!(2u64.checked_log2(), Some(1));\n```","links":{},"attrs":["#[unstable(feature = \"int_log\", issue = \"70887\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u32"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2846-0:3347:1562":{"id":"b:2:2846-0:3347:1562","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2840:8484","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgAction","id":"0:3347:1562","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2848:21287"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3169-0:3970:1581":{"id":"b:2:3169-0:3970:1581","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgSettings","id":"0:3970:1581","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3172:2288"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:0:1633":{"id":"0:0:1633","crate_id":0,"name":"clap","span":{"filename":"src/lib.rs","begin":[6,0],"end":[153,1]},"visibility":"public","docs":"For tutorials, examples, etc, see either <https://github.com/clap-rs/clap> or build with\n`--features unstable-doc`","links":{},"attrs":["#![doc(html_logo_url =\n\"https://raw.githubusercontent.com/clap-rs/clap/master/assets/clap.png\")]","#![warn(missing_docs, missing_debug_implementations,\nmissing_copy_implementations, trivial_casts, unused_allocation,\ntrivial_numeric_casts, clippy :: single_char_pattern)]","#![forbid(unsafe_code)]","#![allow(clippy :: single_component_path_imports)]","#![allow(clippy :: branches_sharing_code)]","#![allow(clippy :: if_same_then_else)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:215:1561","0:1777:1566","0:1943:1567","0:3347:1562","0:755:1563","0:3816:1564","0:3903:1565","0:16","0:4706:1568","0:5071:1570","0:167:1571","0:153:1572","0:162:1573","0:127:1574","0:170:1575","0:174:1576","0:4244:1577","0:3386:1579","0:3970:1581","0:4298:1582","0:4356:1583","0:4587:1584","0:70","0:4801:1585","0:4791:1586","0:4823:1587","0:4773:1588","0:153:1597","0:174:1604","0:103:1810","0:105:1829","0:1606:2158"]}},"a:2:3281:5920-0:4801:1585":{"id":"a:2:3281:5920-0:4801:1585","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3281:5920","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:4801:1585","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3399:2340":{"id":"0:3399:2340","crate_id":0,"name":"TrailingVarArg","span":{"filename":"src/builder/app_settings.rs","begin":[130,4],"end":[130,18]},"visibility":"default","docs":"Deprecated, replaced with [`Command::trailing_var_arg`] and [`Command::is_trailing_var_arg_set`]","links":{"`Command::trailing_var_arg`":"0:4244:1577","`Command::is_trailing_var_arg_set`":"0:4244:1577"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"1:7781:10236":{"id":"1:7781:10236","crate_id":1,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7782:16246"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:5083":{"id":"0:5083","crate_id":0,"name":null,"span":{"filename":"src/util/color.rs","begin":[2,29],"end":[2,31]},"visibility":{"restricted":{"parent":"0:3332:1529","path":"::util::color"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"StructuralEq","id":"2:3249:206","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:5071:1570","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:9223:7158-0:4561:6700":{"id":"a:2:9223:7158-0:4561:6700","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9223:7158","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ContextValue","id":"0:4561:6700","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:830:4872":{"id":"0:830:4872","crate_id":0,"name":"dont_collapse_args_in_usage","span":{"filename":"src/builder/command.rs","begin":[1287,4],"end":[1293,5]},"visibility":"public","docs":"Disables the automatic collapsing of positional args into `[ARGS]` inside the usage string.\n\n**NOTE:** This choice is propagated to all child subcommands.\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg};\nCommand::new(\"myprog\")\n    .dont_collapse_args_in_usage(true)\n    .get_matches();\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3075:8640":{"id":"2:3075:8640","crate_id":2,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:3074:10621","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"a:2:3252:209-0:4791:1586":{"id":"a:2:3252:209-0:4791:1586","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3252:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OsValues","id":"0:4791:1586","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1384":{"id":"0:1384","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[713,0],"end":[717,1]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Default","id":"2:3218:115","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"StringValueParser","id":"0:4397:2164","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:1385:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1858:61":{"id":"0:1858:61","crate_id":0,"name":"raw","span":{"filename":"src/error/mod.rs","begin":[77,4],"end":[79,5]},"visibility":"public","docs":"Create an unformatted error\n\nThis is for you need to pass the error up to\na place that has access to the `Command` at which point you can call [`Error::format`].\n\nPrefer [`Command::error`] for generating errors.\n\n[`Command::error`]: crate::Command::error","links":{"crate::Command::error":"0:4244:1577","`Error::format`":"0:4640:127"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["kind",{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4587:1584","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}],["message",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"std::fmt::Display","id":"2:10262:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl std::fmt::Display","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"std::fmt::Display","id":"2:10262:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:490:3968":{"id":"0:490:3968","crate_id":0,"name":"get_value_hint","span":{"filename":"src/builder/arg.rs","begin":[4448,4],"end":[4461,5]},"visibility":"public","docs":"Get the value hint of this argument","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:4356:1583","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:509:4018":{"id":"0:509:4018","crate_id":0,"name":"is_hide_set","span":{"filename":"src/builder/arg.rs","begin":[4607,4],"end":[4609,5]},"visibility":"public","docs":"Report whether [`Arg::hide`] is set","links":{"`Arg::hide`":"0:3816:1564"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:31781:68512":{"id":"2:31781:68512","crate_id":2,"name":"wrapping_add_signed","span":null,"visibility":"public","docs":"Wrapping (modular) addition with a signed integer. Computes\n`self + rhs`, wrapping around at the boundary of the type.\n\n# Examples\n\nBasic usage:\n\n```\n# #![feature(mixed_integer_ops)]\nassert_eq!(1u64.wrapping_add_signed(2), 3);\nassert_eq!(1u64.wrapping_add_signed(-2), u64::MAX);\nassert_eq!((u64::MAX - 2).wrapping_add_signed(4), 1);\n```","links":{},"attrs":["#[unstable(feature = \"mixed_integer_ops\", issue = \"87840\")]","#[rustc_const_unstable(feature = \"mixed_integer_ops\", issue = \"87840\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"i64"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:787-0:3970:1581":{"id":"b:5:787-0:3970:1581","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:783:211","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgSettings","id":"0:3970:1581","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:789:4115","5:790:4707","5:791:9628"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:5:787-0:4763:7085":{"id":"b:5:787-0:4763:7085","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:783:211","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"RawValues","id":"0:4763:7085","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["5:789:4115","5:790:4707","5:791:9628"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:903:5317":{"id":"0:903:5317","crate_id":0,"name":"visible_long_flag_aliases","span":{"filename":"src/builder/command.rs","begin":[2649,4],"end":[2654,5]},"visibility":"public","docs":"Add aliases, which function as *visible* long flag subcommands.\n\nSee [`Command::long_flag_aliases`].\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg, };\nlet m = Command::new(\"myprog\")\n            .subcommand(Command::new(\"test\").long_flag(\"test\")\n                .visible_long_flag_aliases(&[\"testing\", \"testall\", \"test_all\"]))\n            .get_matches_from(vec![\"myprog\", \"--testing\"]);\nassert_eq!(m.subcommand_name(), Some(\"test\"));\n```\n[`App::long_flag_aliases`]: Command::long_flag_aliases()","links":{"`Command::long_flag_aliases`":"0:4244:1577"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["names",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3707:8472":{"id":"2:3707:8472","crate_id":2,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3709:21304"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1577:1574":{"id":"0:1577:1574","crate_id":0,"name":"Parser","span":{"filename":"src/builder/value_parser.rs","begin":[1897,4],"end":[1897,44]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:4432:2162","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i64"}}],"bindings":[]}},"param_names":[]}}}},"0:1431:2002":{"id":"0:1431:2002","crate_id":0,"name":"parse","span":{"filename":"src/builder/value_parser.rs","begin":[1003,4],"end":[1035,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["cmd",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Command","id":"0:755:1563","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}],["arg",{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Arg","id":"0:3816:1564","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["value",{"kind":"resolved_path","inner":{"name":"std::ffi::OsString","id":"1:2920:170","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"resolved_path","inner":{"name":"crate::Error","id":"0:4640:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3912":{"id":"0:3912","crate_id":0,"name":null,"span":{"filename":"src/builder/arg_group.rs","begin":[80,9],"end":[80,16]},"visibility":{"restricted":{"parent":"0:597:2152","path":"::builder::arg_group"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Default","id":"2:3218:115","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3903:1565","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["0:3914:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:892:2625":{"id":"0:892:2625","crate_id":0,"name":"aliases","span":{"filename":"src/builder/command.rs","begin":[2432,4],"end":[2435,5]},"visibility":"public","docs":"Sets multiple hidden aliases to this subcommand.\n\nThis allows the subcommand to be accessed via *either* the original name or any of the\ngiven aliases. This is more efficient, and easier than creating multiple hidden subcommands\nas one only needs to check for the existence of this command and not all aliased variants.\n\n**NOTE:** Aliases defined with this method are *hidden* from the help\nmessage. If looking for aliases that will be displayed in the help\nmessage, see [`Command::visible_aliases`].\n\n**NOTE:** When using aliases and checking for the existence of a\nparticular subcommand within an [`ArgMatches`] struct, one only needs to\nsearch for the original name and not all aliases.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"myprog\")\n    .subcommand(Command::new(\"test\")\n        .aliases(&[\"do-stuff\", \"do-tests\", \"tests\"]))\n        .arg(Arg::new(\"input\")\n            .help(\"the file to add\")\n            .required(false))\n    .get_matches_from(vec![\"myprog\", \"do-tests\"]);\nassert_eq!(m.subcommand_name(), Some(\"test\"));\n```\n[`App::visible_aliases`]: Command::visible_aliases()","links":{"`Command::visible_aliases`":"0:4244:1577","`ArgMatches`":"0:4706:1568"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["names",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"borrowed_ref","inner":{"lifetime":"'help","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1021:5687":{"id":"0:1021:5687","crate_id":0,"name":"is_multicall_set","span":{"filename":"src/builder/command.rs","begin":[3781,4],"end":[3783,5]},"visibility":"public","docs":"Report whether [`Command::multicall`] is set","links":{"`Command::multicall`":"0:4244:1577"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4843":{"id":"0:4843","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/value_source.rs","begin":[2,56],"end":[2,59]},"visibility":{"restricted":{"parent":"0:2423:7162","path":"::parser::matches::value_source"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clamp","max","min"],"trait":{"kind":"resolved_path","inner":{"name":"Ord","id":"2:2928:167","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4823:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:4844:404"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:2321:4560":{"id":"0:2321:4560","crate_id":0,"name":"size_hint","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1606,4],"end":[1608,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3971:1408":{"id":"2:3971:1408","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"2:45892:7168","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4022":{"id":"0:4022","crate_id":0,"name":null,"span":{"filename":"src/builder/arg_settings.rs","begin":[32,27],"end":[32,31]},"visibility":{"restricted":{"parent":"0:637:2154","path":"::builder::arg_settings"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3250:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgSettings","id":"0:3970:1581","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:3281:5920-0:4686:7087":{"id":"a:2:3281:5920-0:4686:7087","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3281:5920","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4686:7087","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4405":{"id":"0:4405","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[722,15],"end":[722,20]},"visibility":{"restricted":{"parent":"0:1281:2158","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OsStringValueParser","id":"0:4403:2176","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:4406:397"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:31784:65895":{"id":"2:31784:65895","crate_id":2,"name":"wrapping_div","span":null,"visibility":"public","docs":"Wrapping (modular) division. Computes `self / rhs`.\nWrapped division on unsigned types is just normal division.\nThere's no way wrapping could ever happen.\nThis function exists, so that all operations\nare accounted for in the wrapping operations.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(100u64.wrapping_div(10), 10);\n```","links":{},"attrs":["#[stable(feature = \"num_wrapping\", since = \"1.2.0\")]","#[rustc_const_stable(feature = \"const_wrapping_int_methods\", since =\n\"1.52.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3184-0:3816:1564":{"id":"b:2:3184-0:3816:1564","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3816:1564","args":{"angle_bracketed":{"args":[{"lifetime":"'help"}],"bindings":[]}},"param_names":[]}},"items":["2:3187:127","2:3188:1394"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:16":{"id":"0:16","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[33,0],"end":[33,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::error::Error","name":"Error","id":"0:4640:127","glob":false}},"0:4516:6781":{"id":"0:4516:6781","crate_id":0,"name":"InvalidSubcommand","span":{"filename":"src/error/context.rs","begin":[6,4],"end":[6,21]},"visibility":"default","docs":"The cause of the error","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:180:2139":{"id":"0:180:2139","crate_id":0,"name":"to_possible_value","span":{"filename":"src/derive.rs","begin":[507,4],"end":[507,65]},"visibility":"default","docs":"The canonical argument value.\n\nThe value is `None` for skipped variants.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:4298:1582","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:328:2626":{"id":"0:328:2626","crate_id":0,"name":"short_aliases","span":{"filename":"src/builder/arg.rs","begin":[325,4],"end":[331,5]},"visibility":"public","docs":"Add aliases, which functions as a hidden short flag.\n\nThis is more efficient, and easier than creating multiple hidden subcommands as one only\nneeds to check for the existence of this command, and not all variants.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ArgAction};\nlet m = Command::new(\"prog\")\n            .arg(Arg::new(\"test\")\n                    .short('t')\n                    .short_aliases(&['e', 's'])\n                    .action(ArgAction::SetTrue)\n                    .help(\"the file to add\")\n                    .required(false))\n            .get_matches_from(vec![\n                \"prog\", \"-s\"\n            ]);\nassert_eq!(*m.get_one::<bool>(\"test\").expect(\"defaulted by clap\"), true);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["names",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"char"}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4440:397":{"id":"0:4440:397","crate_id":0,"name":"clone","span":{"filename":"src/builder/value_parser.rs","begin":[1090,15],"end":[1090,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:4432:2162","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4384:648":{"id":"0:4384:648","crate_id":0,"name":"fmt","span":{"filename":"src/builder/value_hint.rs","begin":[27,9],"end":[27,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10215:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10204:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3173-0:4706:1568":{"id":"b:2:3173-0:4706:1568","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4706:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3175:669"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4408:648":{"id":"0:4408:648","crate_id":0,"name":"fmt","span":{"filename":"src/builder/value_parser.rs","begin":[722,22],"end":[722,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10215:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10204:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3991:3275":{"id":"0:3991:3275","crate_id":0,"name":"RequireDelimiter","span":{"filename":"src/builder/arg_settings.rs","begin":[134,4],"end":[134,20]},"visibility":"default","docs":"Deprecated, replaced with [`Arg::require_value_delimiter`] and\n[`Arg::is_require_value_delimiter_set`]","links":{"`Arg::require_value_delimiter`":"0:3816:1564","`Arg::is_require_value_delimiter_set`":"0:3816:1564"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:334:2754":{"id":"0:334:2754","crate_id":0,"name":"visible_short_aliases","span":{"filename":"src/builder/arg.rs","begin":[430,4],"end":[436,5]},"visibility":"public","docs":"Add aliases, which function as visible short flags.\n\nLike [`Arg::short_aliases`], except that they are visible inside the help message.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ArgAction};\nlet m = Command::new(\"prog\")\n            .arg(Arg::new(\"test\")\n                .long(\"test\")\n                .action(ArgAction::SetTrue)\n                .visible_short_aliases(&['t', 'e']))\n       .get_matches_from(vec![\n            \"prog\", \"-t\"\n        ]);\nassert_eq!(*m.get_one::<bool>(\"test\").expect(\"defaulted by clap\"), true);\n```","links":{"`Arg::short_aliases`":"0:3816:1564"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["names",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"char"}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9223:7158-0:4640:127":{"id":"a:2:9223:7158-0:4640:127","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9223:7158","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:4640:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"2:31751:68490":{"id":"2:31751:68490","crate_id":2,"name":"checked_add","span":null,"visibility":"public","docs":"Checked integer addition. Computes `self + rhs`, returning `None`\nif overflow occurred.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!((u64::MAX - 2).checked_add(1), Some(u64::MAX - 1));\nassert_eq!((u64::MAX - 2).checked_add(3), None);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.47.0\")]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4432:2162":{"id":"0:4432:2162","crate_id":0,"name":"RangedI64ValueParser","span":{"filename":"src/builder/value_parser.rs","begin":[1091,0],"end":[1094,1]},"visibility":"public","docs":"Parse number that fall within a range of values\n\n# Example\n\nUsage:\n```rust\nlet mut cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"port\")\n            .long(\"port\")\n            .value_parser(clap::value_parser!(u16).range(3000..))\n            .takes_value(true)\n            .required(true)\n    );\n\nlet m = cmd.try_get_matches_from_mut([\"cmd\", \"--port\", \"3001\"]).unwrap();\nlet port: u16 = *m.get_one(\"port\")\n    .expect(\"required\");\nassert_eq!(port, 3001);\n```\n\nSemantics:\n```rust\n# use std::ffi::OsStr;\n# use clap::builder::TypedValueParser;\n# let cmd = clap::Command::new(\"test\");\n# let arg = None;\nlet value_parser = clap::builder::RangedI64ValueParser::<i32>::new().range(-1..200);\nassert!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"random\")).is_err());\nassert!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"\")).is_err());\nassert!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"-200\")).is_err());\nassert!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"300\")).is_err());\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"-1\")).unwrap(), -1);\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"0\")).unwrap(), 0);\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"50\")).unwrap(), 50);\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"std::convert::TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i64"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3240:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3252:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":{"kind":"primitive","inner":"i64"},"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["0:1443","a:2:9222:7159-0:4432:2162","a:2:3252:209-0:4432:2162","a:2:3240:200-0:4432:2162","a:2:9223:7158-0:4432:2162","a:2:3281:5920-0:4432:2162","b:2:2843-0:4432:2162","b:2:3169-0:4432:2162","b:2:3173-0:4432:2162","b:2:3184-0:4432:2162","b:2:3969-0:4432:2162","b:2:2846-0:4432:2162","b:2:3179-0:4432:2162","b:5:787-0:4432:2162","0:4436","0:4438","0:4441","0:1449","0:1462","0:1466"]}},"a:2:3281:5920-0:4823:1587":{"id":"a:2:3281:5920-0:4823:1587","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3281:5920","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4823:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:8371-0:4791:1586":{"id":"b:2:8371-0:4791:1586","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8565:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8367:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OsValues","id":"0:4791:1586","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:8373:2018","2:8374:7522","2:8375:755"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"0:390:3274":{"id":"0:390:3274","crate_id":0,"name":"require_value_delimiter","span":{"filename":"src/builder/arg.rs","begin":[2002,4],"end":[2008,5]},"visibility":"public","docs":"Specifies that *multiple values* may only be set using the delimiter.\n\nThis means if an option is encountered, and no delimiter is found, it is assumed that no\nadditional values for that option follow. This is unlike the default, where it is generally\nassumed that more values will follow regardless of whether or not a delimiter is used.\n\n**NOTE:** The default is `false`.\n\n**NOTE:** Setting this requires [`Arg::use_value_delimiter`] and\n[`Arg::takes_value`]\n\n**NOTE:** It's a good idea to inform the user that use of a delimiter is required, either\nthrough help text or other means.\n\n# Examples\n\nThese examples demonstrate what happens when `require_delimiter(true)` is used. Notice\neverything works in this first example, as we use a delimiter, as expected.\n\n```rust\n# use clap::{Command, Arg};\nlet delims = Command::new(\"prog\")\n    .arg(Arg::new(\"opt\")\n        .short('o')\n        .takes_value(true)\n        .use_value_delimiter(true)\n        .require_delimiter(true)\n        .multiple_values(true))\n    .get_matches_from(vec![\n        \"prog\", \"-o\", \"val1,val2,val3\",\n    ]);\n\nassert!(delims.contains_id(\"opt\"));\nassert_eq!(delims.values_of(\"opt\").unwrap().collect::<Vec<_>>(), [\"val1\", \"val2\", \"val3\"]);\n```\n\nIn this next example, we will *not* use a delimiter. Notice it's now an error.\n\n```rust\n# use clap::{Command, Arg, ErrorKind};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"opt\")\n        .short('o')\n        .takes_value(true)\n        .use_value_delimiter(true)\n        .require_delimiter(true))\n    .try_get_matches_from(vec![\n        \"prog\", \"-o\", \"val1\", \"val2\", \"val3\",\n    ]);\n\nassert!(res.is_err());\nlet err = res.unwrap_err();\nassert_eq!(err.kind(), ErrorKind::UnknownArgument);\n```\n\nWhat's happening is `-o` is getting `val1`, and because delimiters are required yet none\nwere present, it stops parsing `-o`. At this point it reaches `val2` and because no\npositional arguments have been defined, it's an error of an unexpected argument.\n\nIn this final example, we contrast the above with `clap`'s default behavior where the above\nis *not* an error.\n\n```rust\n# use clap::{Command, Arg};\nlet delims = Command::new(\"prog\")\n    .arg(Arg::new(\"opt\")\n        .short('o')\n        .takes_value(true)\n        .multiple_values(true))\n    .get_matches_from(vec![\n        \"prog\", \"-o\", \"val1\", \"val2\", \"val3\",\n    ]);\n\nassert!(delims.contains_id(\"opt\"));\nassert_eq!(delims.values_of(\"opt\").unwrap().collect::<Vec<_>>(), [\"val1\", \"val2\", \"val3\"]);\n```","links":{"`Arg::use_value_delimiter`":"0:3816:1564","`Arg::takes_value`":"0:3816:1564"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:31757:1422":{"id":"2:31757:1422","crate_id":2,"name":"unchecked_mul","span":null,"visibility":"public","docs":"Unchecked integer multiplication. Computes `self * rhs`, assuming overflow\ncannot occur.\n\n# Safety\n\nThis results in undefined behavior when\n`self * rhs > u64::MAX` or `self * rhs < u64::MIN`,\ni.e. when [`checked_mul`] would return `None`.\n\n[`checked_mul`]: u64::checked_mul","links":{"u64::checked_mul":"1:15859:8332"},"attrs":["#[unstable(feature = \"unchecked_math\", reason = \"niche optimization path\",\nissue = \"85122\",)]","#[must_use =\n\"this returns the result of the operation, \\\n                      without modifying the original\"]","#[rustc_const_unstable(feature = \"const_inherent_unchecked_arith\", issue =\n\"85122\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"b:23:25-0:5071:1570":{"id":"b:23:25-0:5071:1570","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.8.1/src/equivalent.rs","begin":[18,0],"end":[18,46]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2897:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2837:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Q"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Equivalent","id":"23:22:8796","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:5071:1570","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["23:28:8790"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"Q"}}},"0:1538:6352":{"id":"0:1538:6352","crate_id":0,"name":"parse_ref","span":{"filename":"src/builder/value_parser.rs","begin":[1750,4],"end":[1771,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["cmd",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Command","id":"0:755:1563","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}],["arg",{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Arg","id":"0:3816:1564","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["value",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"std::ffi::OsStr","id":"1:2923:169","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Value","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:1362:2165","args":null,"param_names":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"crate::Error","id":"0:4640:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1430:6352":{"id":"0:1430:6352","crate_id":0,"name":"parse_ref","span":{"filename":"src/builder/value_parser.rs","begin":[994,4],"end":[1001,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["cmd",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Command","id":"0:755:1563","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}],["arg",{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Arg","id":"0:3816:1564","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}],["value",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"std::ffi::OsStr","id":"1:2923:169","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Value","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:1362:2165","args":null,"param_names":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"crate::Error","id":"0:4640:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4564:6291":{"id":"0:4564:6291","crate_id":0,"name":"Bool","span":{"filename":"src/error/context.rs","begin":[48,4],"end":[48,14]},"visibility":"default","docs":"A single value","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"primitive","inner":"bool"}]}},"2:3308:8447":{"id":"2:3308:8447","crate_id":2,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3310:171","2:3311:254"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:127:1574":{"id":"0:127:1574","crate_id":0,"name":"Parser","span":{"filename":"src/derive.rs","begin":[80,0],"end":[247,1]},"visibility":"public","docs":"Parse command-line arguments into `Self`.\n\nThe primary one-stop-shop trait used to create an instance of a `clap`\n[`Command`], conduct the parsing, and turn the resulting [`ArgMatches`] back\ninto concrete instance of the user struct.\n\nThis trait is primarily a convenience on top of [`FromArgMatches`] +\n[`CommandFactory`] which uses those two underlying traits to build the two\nfundamental functions `parse` which uses the `std::env::args_os` iterator,\nand `parse_from` which allows the consumer to supply the iterator (along\nwith fallible options for each).\n\nSee also [`Subcommand`] and [`Args`].\n\nSee the\n[derive reference](https://github.com/clap-rs/clap/blob/v3.2.12/examples/derive_ref/README.md)\nfor attributes and best practices.\n\n**NOTE:** Deriving requires the `derive` feature flag\n\n# Examples\n\nThe following example creates a `Context` struct that would be used\nthroughout the application representing the normalized values coming from\nthe CLI.\n\n ```ignore\n/// My super CLI\n#[derive(clap::Parser)]\n#[clap(name = \"demo\")]\nstruct Context {\n    /// More verbose output\n    #[clap(long)]\n    verbose: bool,\n    /// An optional name\n    #[clap(short, long)]\n    name: Option<String>,\n}\n```\n\nThe equivalent [`Command`] struct + `From` implementation:\n\n```rust\n# use clap::{Command, Arg, ArgMatches, ArgAction};\nCommand::new(\"demo\")\n    .about(\"My super CLI\")\n    .arg(Arg::new(\"verbose\")\n        .long(\"verbose\")\n        .action(ArgAction::SetTrue)\n        .help(\"More verbose output\"))\n    .arg(Arg::new(\"name\")\n        .long(\"name\")\n        .short('n')\n        .help(\"An optional name\")\n        .takes_value(true));\n\nstruct Context {\n    verbose: bool,\n    name: Option<String>,\n}\n\nimpl From<ArgMatches> for Context {\n    fn from(m: ArgMatches) -> Self {\n        Context {\n            verbose: *m.get_one::<bool>(\"verbose\").expect(\"defaulted_by_clap\"),\n            name: m.get_one::<String>(\"name\").cloned(),\n        }\n    }\n}\n```\n","links":{"`Subcommand`":"0:170:1575","`CommandFactory`":"0:153:1572","`Command`":"0:755:1563","`Args`":"0:167:1571","`ArgMatches`":"0:4706:1568","`FromArgMatches`":"0:162:1573"},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:128:2002","0:129:2011","0:130:2014","0:133:2021","0:136:2024","0:139:2028"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromArgMatches","id":"0:162:1573","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"CommandFactory","id":"0:153:1572","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":["0:182"]}}},"paths":{"2:22812:10620":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"6:6870:14748":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"16:5672:11608":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"29:6850:14746":{"crate_id":29,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:10071:12050":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"16:4790:13230":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"29:4427:14349":{"crate_id":29,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"29:6168:14709":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:11962:12649":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:11628:12579":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"29:4250:14265":{"crate_id":29,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"0:4608:6805":{"crate_id":0,"path":["clap","error","ErrorKind","WrongNumberOfValues"],"kind":"variant"},"2:49370:8631":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"5:1592:7109":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"29:5183:14428":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"29:5266:14462":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:2837:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"1:15843:8318":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:10262:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"16:4734:13228":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:14806:12240":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:49296:8611":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:10503:146":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"16:2794:11629":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"5:783:211":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"16:4823:13231":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"24:372:11528":{"crate_id":24,"path":["hashbrown","raw","inner","RawIntoIter"],"kind":"struct"},"1:1528:10706":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:46572:8722":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:13590:13067":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:24100:11269":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:23999:13591":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:1534:10707":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"12:949:10705":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"3:0:419":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:24445:11217":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:46663:8740":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:11653:12584":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"5:6404:212":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:3548:8469":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:13016:8599":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"16:2733:6880":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:2753:568":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:10407:11984":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"0:4415:2173":{"crate_id":0,"path":["clap","builder","EnumValueParser"],"kind":"struct"},"29:599:13938":{"crate_id":29,"path":["libc","unix","sigval"],"kind":"struct"},"17:11026:12513":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:11374:8628":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"16:7158:11770":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"0:4592:6781":{"crate_id":0,"path":["clap","error","ErrorKind","InvalidSubcommand"],"kind":"variant"},"29:610:13943":{"crate_id":29,"path":["libc","unix","tms"],"kind":"struct"},"24:1858:2895":{"crate_id":24,"path":["hashbrown","raw","inner","alloc","inner","Global"],"kind":"struct"},"2:46841:8529":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:11147:12518":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:10317:11986":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"0:4244:1577":{"crate_id":0,"path":["clap","builder","App"],"kind":"struct"},"2:46442:8720":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:53160:11049":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:12494:12753":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:12671:12786":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"6:6923:14760":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:11779:12612":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"6:4060:14213":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:2399:9846":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"6:4478:14364":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"0:103:1810":{"crate_id":0,"path":["clap","command"],"kind":"macro"},"2:3713:8474":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:9332:12016":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:11914:10231":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:12212:10716":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"16:6110:11742":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"6:4101:14235":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"29:3954:14169":{"crate_id":29,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:15853:8326":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:51990:11065":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"0:4604:6801":{"crate_id":0,"path":["clap","error","ErrorKind","TooFewValues"],"kind":"variant"},"29:537:13898":{"crate_id":29,"path":["libc","unix","rusage"],"kind":"struct"},"0:4773:1588":{"crate_id":0,"path":["clap","parser","Values"],"kind":"struct"},"23:1169:10698":{"crate_id":23,"path":["indexmap","set","Difference"],"kind":"struct"},"17:11499:12552":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"16:6072:11687":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:24649:10237":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"24:1411:145":{"crate_id":24,"path":["hashbrown","set","HashSet"],"kind":"struct"},"18:754:68218":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:24128:11236":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"6:1760:14094":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"6:3868:14101":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"16:7738:11780":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"17:12040:12662":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:45645:8479":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"29:1737:14089":{"crate_id":29,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"9:1020:11462":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:22582:66474":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:12137:8527":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"16:6413:11540":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"16:6491:11758":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"23:197:10074":{"crate_id":23,"path":["indexmap","map","core","IndexMapCore"],"kind":"struct"},"2:45927:8806":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"0:4620:6729":{"crate_id":0,"path":["clap","error","ErrorKind","DisplayHelp"],"kind":"variant"},"2:12444:11298":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"29:4482:14369":{"crate_id":29,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:10128:12047":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:4637:8652":{"crate_id":2,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"6:4183:14259":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:48703:13635":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"29:1716:14082":{"crate_id":29,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:5721:10643":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:49320:8627":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"1:11112:8620":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:46412:8437":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"29:4028:14203":{"crate_id":29,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"5:1472:10076":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:12385:12734":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"0:4536:6783":{"crate_id":0,"path":["clap","error","ContextKind","SuggestedCommand"],"kind":"variant"},"29:531:13895":{"crate_id":29,"path":["libc","unix","rlimit"],"kind":"struct"},"17:11678:12586":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:13240:12977":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:47535:8695":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:12042:7522":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"16:2754:11628":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"29:6915:14760":{"crate_id":29,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:9133:53234":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:50265:11195":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:2031:145":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"7:0:1459":{"crate_id":7,"path":["unwind"],"kind":"module"},"16:5790:11617":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:10211:12445":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:2060:8652":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"5:432:2146":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"4:0:8292":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"5:3365:10697":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:9224:9124":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:46288:10010":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"16:7843:11782":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:10149:12429":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:3153:216":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:47955:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:11338:10835":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:46334:8420":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:22584:66469":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"29:6213:14731":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:47871:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:10274:8506":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"5:3754:7109":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:14141:1943":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"23:578:10067":{"crate_id":23,"path":["indexmap","map","IntoKeys"],"kind":"struct"},"2:3074:10621":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:51579:11029":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:32378:66498":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"29:6862:14748":{"crate_id":29,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:3696:213":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:50056:11184":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"26:189:4723":{"crate_id":26,"path":["termcolor","Buffer"],"kind":"struct"},"17:11932:12640":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:53376:13681":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:10403:11997":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:45892:7168":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:49619:8616":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:2201:1037":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:10276:8507":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"23:413:7175":{"crate_id":23,"path":["indexmap","map","IndexMap"],"kind":"struct"},"16:4890:13233":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:3140:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"16:3241:11881":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"29:4352:14319":{"crate_id":29,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:52797:11042":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"6:4262:14265":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"29:513:13887":{"crate_id":29,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:3355:8456":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"6:4401:14331":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"12:112:21959":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"29:4089:14235":{"crate_id":29,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"16:5975:11745":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:10304:11987":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:12678:11176":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:13582:13065":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:1156:13695":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"12:1118:10076":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:1311:12051":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:12456:12748":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:1623:7107":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:11971:14951":{"crate_id":1,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"29:4229:14264":{"crate_id":29,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"29:5363:14522":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"22:196:8597":{"crate_id":22,"path":["os_str_bytes","pattern","Pattern"],"kind":"trait"},"6:578:13924":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:4707:10989":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"6:537:13895":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"6:5400:14535":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:51143:11051":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"16:7856:11783":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"24:975:7107":{"crate_id":24,"path":["hashbrown","map","Entry"],"kind":"enum"},"17:10028:12436":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:7427:175":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"17:10435:12448":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"23:1225:10699":{"crate_id":23,"path":["indexmap","set","SymmetricDifference"],"kind":"struct"},"22:159:8627":{"crate_id":22,"path":["os_str_bytes","iter","Split"],"kind":"struct"},"6:5459:14550":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"5:1934:9825":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"24:805:10703":{"crate_id":24,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:49738:10941":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"6:4203:14261":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"0:4403:2176":{"crate_id":0,"path":["clap","builder","OsStringValueParser"],"kind":"struct"},"6:4005:14188":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"0:4474:2175":{"crate_id":0,"path":["clap","builder","NonEmptyStringValueParser"],"kind":"struct"},"6:4306:14288":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"16:0:8300":{"crate_id":16,"path":["gimli"],"kind":"module"},"11:0:8296":{"crate_id":11,"path":["adler"],"kind":"module"},"2:11126:8627":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:2892:173":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:10572:10775":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"17:10988:12510":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:11458:12546":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"29:525:13893":{"crate_id":29,"path":["libc","unix","timespec"],"kind":"struct"},"2:1942:5828":{"crate_id":2,"path":["core","mem"],"kind":"module"},"17:13540:13056":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:9839:12001":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"0:5072:1944":{"crate_id":0,"path":["clap","ColorChoice","Auto"],"kind":"variant"},"2:3615:6281":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:11092:8666":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"0:4562:164":{"crate_id":0,"path":["clap","error","ContextValue","None"],"kind":"variant"},"1:4346:10820":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:8127:21972":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"6:4281:14277":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:46834:8708":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:23971:11108":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:10682:8492":{"crate_id":1,"path":["std","error","Chain"],"kind":"struct"},"2:8843:8583":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:45762:185":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"29:154:46372":{"crate_id":29,"path":["libc","unix","fpos_t"],"kind":"enum"},"10:0:8295":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:10081:11999":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:10864:12498":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:3508:8672":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:50028:11183":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"17:10061:12439":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:13477:13035":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"24:728:1588":{"crate_id":24,"path":["hashbrown","map","Values"],"kind":"struct"},"5:1658:10067":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"24:66:8760":{"crate_id":24,"path":["hashbrown","raw","inner","alloc","inner","Allocator"],"kind":"trait"},"5:4210:9827":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"16:6087:11702":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:1194:16154":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"2:10499:142":{"crate_id":2,"path":["core","hash","macros","Hash"],"kind":"proc_derive"},"2:4888:8815":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:8959:8540":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:53199:11069":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:15056:10687":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:11358:11948":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:10584:11956":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:23749:11211":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"0:3391:2326":{"crate_id":0,"path":["clap","builder","AppSettings","AllowHyphenValues"],"kind":"variant"},"16:6357:11755":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"6:4395:14330":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:9323:10617":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:10914:10747":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"0:4397:2164":{"crate_id":0,"path":["clap","builder","StringValueParser"],"kind":"struct"},"5:3834:12191":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"5:1560:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:11726:12599":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"17:10635:12462":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:47356:166":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:9600:68206":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"17:9759:12427":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:10649:10709":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"0:4520:6770":{"crate_id":0,"path":["clap","error","ContextKind","PriorArg"],"kind":"variant"},"17:13331:13000":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:53277:13674":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:8850:8716":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:13386:13013":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:12917:12810":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:3402:8465":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"0:4377:6264":{"crate_id":0,"path":["clap","builder","ValueHint","Hostname"],"kind":"variant"},"20:5:1629":{"crate_id":20,"path":["bitflags","bitflags"],"kind":"macro"},"6:1617:14011":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"6:1700:14072":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:15861:8334":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"0:4824:7575":{"crate_id":0,"path":["clap","parser","ValueSource","DefaultValue"],"kind":"variant"},"0:3395:2333":{"crate_id":0,"path":["clap","builder","AppSettings","AllArgsOverrideSelf"],"kind":"variant"},"16:3018:11876":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"22:114:10621":{"crate_id":22,"path":["os_str_bytes","private","Sealed"],"kind":"trait"},"17:681:12338":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"29:4083:14232":{"crate_id":29,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:10117:12046":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:13022:8598":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"0:3387:2299":{"crate_id":0,"path":["clap","builder","AppSettings","IgnoreErrors"],"kind":"variant"},"16:7884:11712":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:7663:1563":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"17:11616:12578":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"16:5996:11746":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:15842:8317":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:49263:8619":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:13506:13043":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:53050:11066":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:13725:150":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"6:6899:14755":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:15864:8337":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:15309:13792":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"0:3350:2241":{"crate_id":0,"path":["clap","builder","ArgAction","Append"],"kind":"variant"},"6:6068:14650":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:52296:11030":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"18:896:12071":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:4033:8497":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"0:5071:1570":{"crate_id":0,"path":["clap","ColorChoice"],"kind":"enum"},"2:48693:8573":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"6:5130:14386":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:2928:167":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"17:10599:12459":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:3303:10795":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:49594:8607":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:12162:8537":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"16:7870:11711":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"0:1777:1566":{"crate_id":0,"path":["clap","error"],"kind":"module"},"17:12155:12684":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:10673:53420":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"29:5189:14429":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:3308:8447":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"6:5428:14542":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"6:4358:14316":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"14:47:13489":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:46347:11244":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:15855:8328":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"23:718:7522":{"crate_id":23,"path":["indexmap","map","IntoIter"],"kind":"struct"},"1:5775:10646":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:2265:11009":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:46534:8732":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:3343:8457":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:49906:10950":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"0:0:1633":{"crate_id":0,"path":["clap"],"kind":"module"},"1:15041:10686":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:2492:9797":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"6:4145:14257":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"16:3429:11630":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"29:4215:14263":{"crate_id":29,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:15344:11552":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:47997:2875":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"29:663:46701":{"crate_id":29,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:3406:8466":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:46591:8735":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:45806:187":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:13446:13027":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"0:4522:6772":{"crate_id":0,"path":["clap","error","ContextKind","ValidValue"],"kind":"variant"},"2:51005:11038":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:5375:10001":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"12:976:10707":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"16:7264:11720":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:12467:12749":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:45920:11021":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"29:5220:14440":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:15025:10685":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:48480:9644":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"2:46563:7174":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"5:1011:7109":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:15318:63525":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"17:2543:12018":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"23:133:10076":{"crate_id":23,"path":["indexmap","map","core","raw","OccupiedEntry"],"kind":"struct"},"6:6893:14754":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:49338:8626":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:48422:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1:12113:10734":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:6401:8731":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"29:6628:14741":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:11406:12530":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"0:3441:2423":{"crate_id":0,"path":["clap","builder","AppSettings","PropagateVersion"],"kind":"variant"},"2:46502:8729":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:46214:10016":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"26:217:8853":{"crate_id":26,"path":["termcolor","NoColor"],"kind":"struct"},"0:3975:2898":{"crate_id":0,"path":["clap","builder","ArgSettings","MultipleOccurrences"],"kind":"variant"},"2:3329:8451":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:24547:10781":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"16:6101:11700":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"29:6856:14747":{"crate_id":29,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"6:1744:14089":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"16:7786:11715":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:51404:11067":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"24:692:8695":{"crate_id":24,"path":["hashbrown","map","IterMut"],"kind":"struct"},"16:3714:13211":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:4419:8680":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"16:7174:11771":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:10546:10752":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:14475:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"16:5407:11593":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:5360:10834":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"16:6605:11719":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:47745:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"29:6902:14759":{"crate_id":29,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"6:1729:10847":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:786:2593":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"1:15234:10834":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:13834:62966":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"1:823:2593":{"crate_id":1,"path":["std","thread","local","os","Key"],"kind":"struct"},"2:3472:8468":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:9719:12426":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"9:41:11445":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"5:7604:9831":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"18:820:12065":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"6:4215:14262":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:13222:13581":{"crate_id":2,"path":["core","str","lossy","Utf8Lossy"],"kind":"struct"},"17:10377:11990":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:3245:2000":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:51111:13646":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"26:92:8848":{"crate_id":26,"path":["termcolor","StandardStreamLock"],"kind":"struct"},"0:3983:2426":{"crate_id":0,"path":["clap","builder","ArgSettings","Hidden"],"kind":"variant"},"6:5548:14578":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:2166:9827":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:10897:203":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:12480:12751":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:1136:6718":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"16:7279:11922":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"6:4470:14362":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"16:4995:13236":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"18:720:12311":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"29:4133:14257":{"crate_id":29,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:3607:12213":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"16:2889:11892":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:12789:8606":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:15174:10678":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"0:105:1829":{"crate_id":0,"path":["clap","arg"],"kind":"macro"},"2:23556:10619":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"29:5937:14596":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"12:2323:14767":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"16:6682:11718":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:10236:11970":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"29:4171:14259":{"crate_id":29,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:13282:12990":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"6:4293:14284":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:9065:53232":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:9404:12329":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:11750:12601":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"0:3401:2344":{"crate_id":0,"path":["clap","builder","AppSettings","DontDelimitTrailingValues"],"kind":"variant"},"1:11118:10669":{"crate_id":1,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"2:52447:11054":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:46227:8618":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"6:4095:14232":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:15845:8320":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"29:5159:14412":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:11207:14906":{"crate_id":1,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"18:790:12062":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"0:4823:1587":{"crate_id":0,"path":["clap","parser","ValueSource"],"kind":"enum"},"17:12632:12783":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:10543:12451":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:3981:10749":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"16:7250:11778":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:6597:66515":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"2:3707:8472":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:14449:10652":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"0:3437:2416":{"crate_id":0,"path":["clap","builder","AppSettings","DisableHelpSubcommand"],"kind":"variant"},"2:22565:66380":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"29:0:785":{"crate_id":29,"path":["libc"],"kind":"module"},"23:1264:10700":{"crate_id":23,"path":["indexmap","set","Union"],"kind":"struct"},"16:6964:9122":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:4932:7599":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"18:636:12310":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"29:6844:14745":{"crate_id":29,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"6:525:13890":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:12208:12691":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"29:4398:14334":{"crate_id":29,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"18:169:21969":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"5:4638:12195":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"5:1602:8695":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:8143:5887":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:11388:8784":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"29:5274:14467":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:3344:1931":{"crate_id":1,"path":["std","io"],"kind":"module"},"0:4588:6777":{"crate_id":0,"path":["clap","error","ErrorKind","InvalidValue"],"kind":"variant"},"16:2991:11886":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:8374:8573":{"crate_id":1,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"17:10477:12019":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"24:1555:7109":{"crate_id":24,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:12645:12784":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:9614:12229":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"1:11568:8576":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"17:13942:13180":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"0:4610:6768":{"crate_id":0,"path":["clap","error","ErrorKind","ArgumentConflict"],"kind":"variant"},"18:136:21965":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"29:5540:14578":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"6:670:46701":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"22:510:12095":{"crate_id":22,"path":["os_str_bytes","EncodingError"],"kind":"struct"},"1:11920:171":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:3377:8459":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"24:1852:14764":{"crate_id":24,"path":["hashbrown","raw","inner","sse2","Group"],"kind":"struct"},"2:49916:10951":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"0:4373:6259":{"crate_id":0,"path":["clap","builder","ValueHint","CommandWithArguments"],"kind":"variant"},"17:12168:12468":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:13306:12992":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"29:5961:14613":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"6:4241:14264":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"0:4548:6914":{"crate_id":0,"path":["clap","error","ContextKind","Custom"],"kind":"variant"},"1:4340:10818":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:12157:8530":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:10538:8870":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"29:5990:14625":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"9:963:11460":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:6445:10658":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:11032:8682":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"5:7764:223":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"24:1582:10698":{"crate_id":24,"path":["hashbrown","set","Difference"],"kind":"struct"},"13:120:51551":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"0:5074:4812":{"crate_id":0,"path":["clap","ColorChoice","Always"],"kind":"variant"},"2:51303:11072":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:9942:11161":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:7719:8726":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"29:5461:14552":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:55977:225":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:5421:11594":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"22:435:8643":{"crate_id":22,"path":["os_str_bytes","raw_str","RawOsString"],"kind":"struct"},"5:5882:12202":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"2:22954:10621":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"17:9809:68212":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:5967:10890":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:6543:10654":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:10938:12506":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:2920:170":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"6:5210:14430":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"26:95:8849":{"crate_id":26,"path":["termcolor","BufferedStandardStream"],"kind":"struct"},"2:47398:7109":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"16:5456:11596":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"0:4381:6268":{"crate_id":0,"path":["clap","builder","ValueHint","EmailAddress"],"kind":"variant"},"16:2866:11873":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:10975:12509":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"6:4371:14321":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:13685:13117":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"0:4009:3607":{"crate_id":0,"path":["clap","builder","ArgSettings","HiddenShortHelp"],"kind":"variant"},"16:6176:11750":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:3394:8463":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:13465:13034":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"29:3939:14162":{"crate_id":29,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"16:4671:13226":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:14880:10234":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:12741:12794":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:299:12334":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:8632:8525":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"5:5832:8602":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"16:7195:11773":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"29:4269:14277":{"crate_id":29,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"6:4387:14327":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"29:4419:14344":{"crate_id":29,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:11640:12582":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"18:667:12077":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"23:1464:8792":{"crate_id":23,"path":["indexmap","HashValue"],"kind":"struct"},"29:5122:14386":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:11270:10836":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"0:4538:6782":{"crate_id":0,"path":["clap","error","ContextKind","SuggestedSubcommand"],"kind":"variant"},"5:4301:8695":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"27:0:1530":{"crate_id":27,"path":["strsim"],"kind":"module"},"17:13780:13136":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:46151:13614":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:8625:8524":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"6:4377:14324":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:45721:186":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"16:7342:11737":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"13:0:8291":{"crate_id":13,"path":["std_detect"],"kind":"module"},"16:6644:11763":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"12:2013:9827":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"5:8099:7522":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"16:2912:11874":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"5:3035:14830":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"0:4791:1586":{"crate_id":0,"path":["clap","parser","OsValues"],"kind":"struct"},"2:24513:11218":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:11099:8610":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"0:1543:2167":{"crate_id":0,"path":["clap","builder","ValueParserFactory"],"kind":"trait"},"17:12095:12673":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"29:4319:14299":{"crate_id":29,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"6:543:13898":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:9160:13705":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"6:4511:14377":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:13574:13064":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:13172:12962":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"16:3800:13213":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"16:3320:11936":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"5:8375:10597":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:9125:8536":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:15852:8325":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"16:3218:11880":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"0:4515:6699":{"crate_id":0,"path":["clap","error","ContextKind"],"kind":"enum"},"17:8929:53229":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"29:5979:14620":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"23:312:10077":{"crate_id":23,"path":["indexmap","map","core","VacantEntry"],"kind":"struct"},"1:6683:14642":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"5:6681:11311":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"5:3391:10700":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:24047:21370":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"5:3295:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:23984:11109":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"23:1070:7109":{"crate_id":23,"path":["indexmap","set","Iter"],"kind":"struct"},"1:2192:10700":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"24:154:8793":{"crate_id":24,"path":["hashbrown","raw","inner","Bucket"],"kind":"struct"},"2:51943:11061":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:9961:12431":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"23:45:10070":{"crate_id":23,"path":["indexmap","mutable_keys","MutableKeys"],"kind":"trait"},"1:2576:127":{"crate_id":1,"path":["std","error","Error"],"kind":"trait"},"26:237:8854":{"crate_id":26,"path":["termcolor","Ansi"],"kind":"struct"},"2:52104:11053":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"16:5472:11599":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"16:7406:11708":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:51069:11059":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"16:6424:11757":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"18:152:21966":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:46274:8616":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"16:5736:11612":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:50052:11190":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:11264:10835":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"16:7467:11706":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:23006:11027":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:4585:8652":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"6:1622:14013":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"0:3409:2358":{"crate_id":0,"path":["clap","builder","AppSettings","SubcommandRequiredElseHelp"],"kind":"variant"},"17:13842:13157":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:9619:65434":{"crate_id":1,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"29:1623:14018":{"crate_id":29,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:9344:8597":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"16:5295:51656":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"12:968:10706":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:46612:8737":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"17:13772:13133":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:8396:11347":{"crate_id":1,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"24:1595:10700":{"crate_id":24,"path":["hashbrown","set","Union"],"kind":"struct"},"17:13318:12995":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"0:4361:3969":{"crate_id":0,"path":["clap","builder","ValueHint","AnyPath"],"kind":"variant"},"2:45885:8471":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"18:729:68217":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"5:8247:8558":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"6:5414:14537":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:13227:21389":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunksIter"],"kind":"struct"},"2:8411:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:11367:14629":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:12172:10714":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"29:4034:14205":{"crate_id":29,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:1501:10069":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:15838:8314":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"29:6891:14755":{"crate_id":29,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"16:5927:11622":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:1505:10703":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"29:3993:14188":{"crate_id":29,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:50309:8495":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:14073:191":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"1:10633:16152":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"6:5185:14425":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:5175:8810":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"0:4686:7087":{"crate_id":0,"path":["clap","parser","MatchesError"],"kind":"enum"},"29:1710:14079":{"crate_id":29,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:12097:10733":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:24025:21378":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"0:3348:2237":{"crate_id":0,"path":["clap","builder","ArgAction","Set"],"kind":"variant"},"5:3767:8695":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"6:5371:14522":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:10253:11989":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:3685:8675":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"0:4590:6810":{"crate_id":0,"path":["clap","error","ErrorKind","UnknownArgument"],"kind":"variant"},"29:5351:14515":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:10516:12023":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:13801:177":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"17:13163:12961":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"29:4346:14316":{"crate_id":29,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:4458:8677":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"16:7295:11722":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:6849:10630":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"14:189:13489":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"5:920:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"5:2325:11362":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"24:812:10704":{"crate_id":24,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"16:5632:11607":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:13007:8597":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"16:7420:11725":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"29:4329:14305":{"crate_id":29,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:4246:8685":{"crate_id":1,"path":["std","io","readbuf","ReadBuf"],"kind":"struct"},"16:6768:11913":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"6:519:13887":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:4417:4721":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"0:4409:2177":{"crate_id":0,"path":["clap","builder","PathBufValueParser"],"kind":"struct"},"17:10266:11988":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:12754:11179":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:50202:191":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:12598:12770":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"16:5505:11601":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"5:3033:4115":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:22802:10621":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:47661:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"0:4564:6291":{"crate_id":0,"path":["clap","error","ContextValue","Bool"],"kind":"variant"},"2:49488:8623":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"0:3985:2932":{"crate_id":0,"path":["clap","builder","ArgSettings","TakesValue"],"kind":"variant"},"17:11434:12532":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:3388:8462":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"18:694:12078":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"0:4542:6778":{"crate_id":0,"path":["clap","error","ContextKind","SuggestedValue"],"kind":"variant"},"1:1497:10067":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:12192:10715":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"16:5231:13238":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:7103:9218":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"1:14462:13789":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"5:5410:8652":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:14:1764":{"crate_id":2,"path":["core","write"],"kind":"macro"},"17:9440:12330":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"6:1708:14073":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:13637:13080":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:14970:10241":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:50036:11188":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:5594:766":{"crate_id":2,"path":["core","iter"],"kind":"module"},"0:4528:6806":{"crate_id":0,"path":["clap","error","ContextKind","ExpectedNumValues"],"kind":"variant"},"16:7971:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:13564:13061":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:9607:65435":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"2:47483:195":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"12:937:10704":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"24:993:10076":{"crate_id":24,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:24479:10780":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:6923:10631":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"0:4003:3579":{"crate_id":0,"path":["clap","builder","ArgSettings","HideDefaultValue"],"kind":"variant"},"5:1689:11358":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"0:3421:2379":{"crate_id":0,"path":["clap","builder","AppSettings","ArgsNegateSubcommands"],"kind":"variant"},"1:1511:10704":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"11:46:14818":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"5:7437:12191":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:13402:13017":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:13760:13130":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:1522:10705":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"29:4181:14260":{"crate_id":29,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:48140:8509":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"5:792:108":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:51531:11044":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"5:3483:9825":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"1:8474:10729":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:3218:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"1:10557:63524":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"29:557:13915":{"crate_id":29,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:49424:8629":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"12:0:8297":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"2:52654:11074":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:4157:11957":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"17:12552:12763":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:23655:11004":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:50256:11194":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"12:556:143":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:50032:11186":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"12:2331:8557":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"29:4335:14308":{"crate_id":29,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:50297:8496":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:46850:8710":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"6:4419:14340":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:11254:11973":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:3323:8448":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"29:3960:14170":{"crate_id":29,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"23:670:7109":{"crate_id":23,"path":["indexmap","map","Iter"],"kind":"struct"},"6:5522:14563":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"23:628:10068":{"crate_id":23,"path":["indexmap","map","ValuesMut"],"kind":"struct"},"0:3816:1564":{"crate_id":0,"path":["clap","builder","Arg"],"kind":"struct"},"16:4955:13235":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"18:866:12069":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:51679:13649":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:24115:11237":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:8326:8718":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"9:234:11420":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"0:4534:6794":{"crate_id":0,"path":["clap","error","ContextKind","MaxOccurrences"],"kind":"variant"},"2:3411:8467":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"6:6005:14629":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:7241:13703":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"0:4425:2161":{"crate_id":0,"path":["clap","builder","PossibleValuesParser"],"kind":"struct"},"29:6206:14728":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:12026:7109":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"16:6391:11756":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:14138:4721":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"1:6685:14644":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"17:13054:12920":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:9186:11952":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"0:3407:2354":{"crate_id":0,"path":["clap","builder","AppSettings","SubcommandRequired"],"kind":"variant"},"5:5088:648":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"17:11539:12563":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"6:5228:14440":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"5:5310:190":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"24:1019:10077":{"crate_id":24,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"5:8363:10596":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"24:0:8297":{"crate_id":24,"path":["hashbrown"],"kind":"module"},"16:4448:13220":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"14:0:8298":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:3313:8452":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"6:5987:14620":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:9746:12230":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"2:50909:13645":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"0:127:1574":{"crate_id":0,"path":["clap","Parser"],"kind":"trait"},"17:13377:13012":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:13906:66513":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"16:3064:11934":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"5:7366:7522":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:12315:1571":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"23:1054:7522":{"crate_id":23,"path":["indexmap","set","IntoIter"],"kind":"struct"},"1:10618:16150":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"5:3043:66945":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"5:8314:8417":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"16:3392:11889":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:12756:12798":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"6:4046:14205":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:46600:8736":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"0:4570:6767":{"crate_id":0,"path":["clap","error","ContextValue","Strings"],"kind":"variant"},"12:774:7522":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"29:3893:14128":{"crate_id":29,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:10788:12495":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"29:4447:14356":{"crate_id":29,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"0:4367:6246":{"crate_id":0,"path":["clap","builder","ValueHint","ExecutablePath"],"kind":"variant"},"17:14000:13190":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"5:8090:2895":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"6:4133:14248":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:11060:7672":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:3252:209":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"21:107:7691":{"crate_id":21,"path":["clap_lex","ParsedArg"],"kind":"struct"},"16:6691:11764":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:4694:6693":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:8070:8682":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"6:6935:14762":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:9296:12327":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"6:4425:14341":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:10448:12021":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"16:3365:11627":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:7601:8264":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:2890:404":{"crate_id":2,"path":["core","cmp"],"kind":"module"},"16:6554:11760":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"29:1753:14094":{"crate_id":29,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:10160:12442":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:47703:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:9005:53230":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"29:5247:14460":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:5006:8800":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"16:6731:11910":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:3240:200":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"9:722:11396":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"29:3985:14186":{"crate_id":29,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:53113:11031":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"9:927:51307":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:11822:12628":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:49139:8772":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:10656:12464":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"25:89:7954":{"crate_id":25,"path":["textwrap","core","display_width"],"kind":"function"},"17:12142:12681":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"29:505:1908":{"crate_id":29,"path":["libc","unix","group"],"kind":"struct"},"18:829:12066":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:12275:12700":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"0:3439:2420":{"crate_id":0,"path":["clap","builder","AppSettings","DisableVersionFlag"],"kind":"variant"},"0:3397:2337":{"crate_id":0,"path":["clap","builder","AppSettings","AllowMissingPositional"],"kind":"variant"},"12:160:8793":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:7913:10776":{"crate_id":1,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"16:3172:11878":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:45972:11122":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"18:0:8302":{"crate_id":18,"path":["memchr"],"kind":"module"},"29:4288:14285":{"crate_id":29,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"6:616:13943":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"29:4061:14219":{"crate_id":29,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"5:2772:11365":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"22:400:6584":{"crate_id":22,"path":["os_str_bytes","raw_str","RawOsStr"],"kind":"struct"},"1:4678:63135":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"6:6200:14719":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:11030:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:2176:9928":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:13986:13187":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"12:2039:10699":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"6:6614:14740":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:10279:11999":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:52183:11041":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"9:469:15373":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:10266:8501":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"29:4313:14297":{"crate_id":29,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:2274:11010":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"16:6014:11747":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:14492:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:46173:11088":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:49817:10946":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:8363:136":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"0:4356:1583":{"crate_id":0,"path":["clap","builder","ValueHint"],"kind":"enum"},"2:46879:8714":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"29:6083:14657":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:45852:6462":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"22:373:4723":{"crate_id":22,"path":["os_str_bytes","raw_str","Buffer"],"kind":"struct"},"1:14424:10633":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:3075:8640":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"6:4364:14319":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"25:90:8839":{"crate_id":25,"path":["textwrap","core","Fragment"],"kind":"trait"},"17:11767:12609":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:13205:12973":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"5:8152:184":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:3181:10791":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1:10802:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"6:5969:14613":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"5:8234:8557":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"29:4011:14197":{"crate_id":29,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:49895:10949":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"22:190:12091":{"crate_id":22,"path":["os_str_bytes","pattern","Encoded"],"kind":"trait"},"17:12712:12791":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:53361:13680":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:13192:12968":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:13554:10740":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"17:10458:12379":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"5:6468:9827":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"0:3354:2247":{"crate_id":0,"path":["clap","builder","ArgAction","IncOccurrence"],"kind":"variant"},"0:4606:6793":{"crate_id":0,"path":["clap","error","ErrorKind","TooManyOccurrences"],"kind":"variant"},"17:9659:68209":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"29:4243:10853":{"crate_id":29,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:15839:8315":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:48119:8501":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"29:4071:14226":{"crate_id":29,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"5:8130:66812":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"16:4852:13232":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:48410:107":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"29:604:13940":{"crate_id":29,"path":["libc","unix","itimerval"],"kind":"struct"},"1:11145:10671":{"crate_id":1,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"1:4026:195":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"1:3178:10790":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"6:5998:14625":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"16:5815:11618":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:49752:10944":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"0:3362:2271":{"crate_id":0,"path":["clap","builder","ArgAction","Help"],"kind":"variant"},"2:14183:8760":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"6:6185:14712":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:5078:8806":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"29:4281:14284":{"crate_id":29,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:51783:13652":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"29:1515:13956":{"crate_id":29,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"0:3453:2440":{"crate_id":0,"path":["clap","builder","AppSettings","NoAutoVersion"],"kind":"variant"},"2:5001:8799":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"29:3906:14138":{"crate_id":29,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:3329:10805":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:15856:8329":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"1:14893:10715":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"0:4630:6880":{"crate_id":0,"path":["clap","error","ErrorKind","Format"],"kind":"variant"},"2:12997:8603":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"17:13532:13053":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"24:1877:14767":{"crate_id":24,"path":["hashbrown","raw","inner","TableLayout"],"kind":"struct"},"0:3429:2402":{"crate_id":0,"path":["clap","builder","AppSettings","DontCollapseArgsInUsage"],"kind":"variant"},"6:4083:14226":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"5:6250:9831":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"29:5284:14474":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:46520:13625":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:15844:8319":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:3597:8673":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"14:216:51585":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"29:5451:14550":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:48126:8502":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:23008:11026":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"29:4294:14288":{"crate_id":29,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"0:4532:6850":{"crate_id":0,"path":["clap","error","ContextKind","ActualNumOccurrences"],"kind":"variant"},"9:0:8294":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"0:3358:2262":{"crate_id":0,"path":["clap","builder","ArgAction","SetFalse"],"kind":"variant"},"2:4695:10988":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"29:519:13890":{"crate_id":29,"path":["libc","unix","timeval"],"kind":"struct"},"6:4341:14305":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"6:5953:14601":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:0:1310":{"crate_id":1,"path":["std"],"kind":"module"},"17:13978:13184":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:4750:9796":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:3146:135":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"29:593:13935":{"crate_id":29,"path":["libc","unix","linger"],"kind":"struct"},"0:4628:6879":{"crate_id":0,"path":["clap","error","ErrorKind","Io"],"kind":"variant"},"1:11508:8574":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:49612:8604":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"5:5896:1319":{"crate_id":5,"path":["alloc","str"],"kind":"module"},"16:7024:11920":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:3631:8668":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:9751:12231":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"1:6773:10623":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"6:5167:14412":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"0:4567:205":{"crate_id":0,"path":["clap","error","ContextValue","String"],"kind":"variant"},"16:4417:13219":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"12:2032:10698":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:12659:12785":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:51381:11064":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"0:3415:2368":{"crate_id":0,"path":["clap","builder","AppSettings","AllowInvalidUtf8ForExternalSubcommands"],"kind":"variant"},"1:9574:12228":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:11835:12629":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"12:930:10703":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:7272:13703":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"0:3386:1579":{"crate_id":0,"path":["clap","builder","AppSettings"],"kind":"enum"},"6:1690:14066":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"0:4614:6789":{"crate_id":0,"path":["clap","error","ErrorKind","MissingSubcommand"],"kind":"variant"},"2:11169:8606":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:12738:11178":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"16:7185:11772":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"5:8144:7522":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:49584:8621":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:50888:13644":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:47457:9123":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:10052:12438":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:12771:12526":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:5783:10640":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:11363:10624":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"0:4540:6811":{"crate_id":0,"path":["clap","error","ContextKind","SuggestedArg"],"kind":"variant"},"0:3449:2436":{"crate_id":0,"path":["clap","builder","AppSettings","NoBinaryName"],"kind":"variant"},"2:11871:8776":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:10776:10789":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:11337:12017":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:47406:8695":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:10410:13580":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"0:3989:2405":{"crate_id":0,"path":["clap","builder","ArgSettings","NextLineHelp"],"kind":"variant"},"5:8181:7522":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"5:5868:12199":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"1:1450:7105":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"5:7626:9832":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"24:678:7109":{"crate_id":24,"path":["hashbrown","map","Iter"],"kind":"struct"},"5:3889:11348":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:46204:10015":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"5:8282:8419":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"16:4762:13229":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"23:550:7105":{"crate_id":23,"path":["indexmap","map","Keys"],"kind":"struct"},"1:1045:10657":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"16:6949:11917":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:4553:8683":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"29:4458:14362":{"crate_id":29,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"16:2968:11875":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:56003:225":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:2213:11329":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:22550:66380":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"16:5029:13237":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:5152:8809":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:3258:6436":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:9769:68211":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:8376:8410":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"12:429:11527":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:45913:6312":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"9:809:8573":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"6:5159:14410":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"24:767:11517":{"crate_id":24,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"0:4444:2163":{"crate_id":0,"path":["clap","builder","RangedU64ValueParser"],"kind":"struct"},"16:7928:6312":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"6:5407:14536":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"5:5783:12191":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"16:6569:11906":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:7615:10228":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:8367:151":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:49542:8625":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"6:1665:14047":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"26:416:8855":{"crate_id":26,"path":["termcolor","ParseColorError"],"kind":"struct"},"1:4612:8660":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"12:1651:11534":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"16:3939:13214":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:14800:12239":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:50086:10718":{"crate_id":2,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"2:3372:1929":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:8724:8539":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"6:1584:13989":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:3301:10794":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:6845:10627":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:13497:13042":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"18:857:12068":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:10844:12001":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:3684:8470":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"12:2309:14765":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"12:1100:7107":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"17:10224:12446":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"12:1200:11525":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"0:167:1571":{"crate_id":0,"path":["clap","Args"],"kind":"trait"},"2:22865:11026":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:24751:11223":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"0:4379:6266":{"crate_id":0,"path":["clap","builder","ValueHint","Url"],"kind":"variant"},"16:3522:12344":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"12:377:11529":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:49121:8770":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"16:5960:11624":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"0:4596:6212":{"crate_id":0,"path":["clap","error","ErrorKind","EmptyValue"],"kind":"variant"},"3:300:195":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:11077:7109":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"12:840:7105":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"16:7226:11776":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:46543:8733":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:13453:13028":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:294:12333":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:10836:8674":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:24063:21379":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:2314:11991":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:9896:68213":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:11178:10743":{"crate_id":1,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"6:3881:14110":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:10950:12507":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"29:4121:14248":{"crate_id":29,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"0:3981:2895":{"crate_id":0,"path":["clap","builder","ArgSettings","Global"],"kind":"variant"},"17:10200:12444":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"12:2009:7522":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"5:1235:11361":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"5:3336:11326":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:49306:8610":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"24:1563:9827":{"crate_id":24,"path":["hashbrown","set","Drain"],"kind":"struct"},"12:877:9825":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"2:5568:11076":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"5:2257:11363":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:12442:12746":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"6:4120:14244":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"0:4618:6790":{"crate_id":0,"path":["clap","error","ErrorKind","InvalidUtf8"],"kind":"variant"},"1:11148:10675":{"crate_id":1,"path":["std","net","ip","IpAddr"],"kind":"enum"},"17:13810:13142":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"5:1486:10708":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:2170:9825":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"1:11525:8575":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"16:6591:11762":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:14509:62941":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"0:4640:127":{"crate_id":0,"path":["clap","error","Error"],"kind":"struct"},"2:46160:10014":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"17:11915:12634":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"6:6091:14657":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"19:117:14769":{"crate_id":19,"path":["panic_unwind","dwarf","eh","EHContext"],"kind":"struct"},"6:591:13930":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"0:3451:2439":{"crate_id":0,"path":["clap","builder","AppSettings","NoAutoHelp"],"kind":"variant"},"29:1901:47673":{"crate_id":29,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:0:8301":{"crate_id":17,"path":["object"],"kind":"module"},"29:6192:14719":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:3966:14169":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:12936:1756":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"6:6124:14671":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"11:54:11515":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"17:12234:12694":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"12:1688:11536":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:2862:104":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"6:5221:14438":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:46364:11245":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"6:4013:14191":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:56042:225":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:50212:13643":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"16:5433:11595":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"0:3973:3036":{"crate_id":0,"path":["clap","builder","ArgSettings","MultipleValues"],"kind":"variant"},"5:8447:9826":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:47527:7109":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:14962:13790":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:11595:8579":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:8565:157":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"29:1520:13958":{"crate_id":29,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:14002:12237":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"6:4517:14379":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"0:4524:6777":{"crate_id":0,"path":["clap","error","ContextKind","InvalidValue"],"kind":"variant"},"1:15821:62932":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"6:5269:14461":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"16:4704:13227":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"12:463:21960":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"18:660:12076":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"5:5828:8601":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"12:2005:7109":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:53238:11034":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"23:1476:8793":{"crate_id":23,"path":["indexmap","Bucket"],"kind":"struct"},"0:4622:6763":{"crate_id":0,"path":["clap","error","ErrorKind","DisplayHelpOnMissingArgumentOrSubcommand"],"kind":"variant"},"2:49185:8761":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:50060:11185":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"16:6219:11752":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:15255:10841":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"24:110:21959":{"crate_id":24,"path":["hashbrown","raw","inner","bitmask","BitMaskIter"],"kind":"struct"},"2:52987:11046":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:2381:8813":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"0:4365:6244":{"crate_id":0,"path":["clap","builder","ValueHint","DirPath"],"kind":"variant"},"2:48383:133":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"17:9592:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"29:4152:14258":{"crate_id":29,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:12287:12701":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"18:712:8485":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:7318:176":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"1:15333:11552":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:10814:11943":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"5:6947:11303":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"6:3945:14161":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:10106:12045":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"16:5360:11591":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"29:4383:14330":{"crate_id":29,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"9:157:11412":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"29:5304:14490":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:22605:66473":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:5633:10665":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:46552:8741":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:11555:12567":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:3176:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"16:6744:11911":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:14867:10233":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:48444:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"17:9799:12428":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"18:801:12063":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:3367:8458":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"5:3965:12191":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"0:1854:195":{"crate_id":0,"path":["clap","error","Result"],"kind":"typedef"},"0:3411:2362":{"crate_id":0,"path":["clap","builder","AppSettings","AllowExternalSubcommands"],"kind":"variant"},"2:11208:8775":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:22997:10621":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:15859:8332":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"1:10673:9859":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:51602:11032":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"29:5392:14535":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"5:6645:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:32278:66499":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"17:13933:13178":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"6:5563:14589":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:3184:8661":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"6:3951:14162":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:3725:10972":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:15851:8324":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"29:5233:14449":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:48656:8873":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"0:3413:2365":{"crate_id":0,"path":["clap","builder","AppSettings","Multicall"],"kind":"variant"},"16:6238:11707":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:10820:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:607:12337":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:3742:8477":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:32037:11264":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"0:4015:2875":{"crate_id":0,"path":["clap","builder","ArgSettings","Exclusive"],"kind":"variant"},"0:3425:2387":{"crate_id":0,"path":["clap","builder","AppSettings","ArgRequiredElseHelp"],"kind":"variant"},"1:15854:8327":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"23:698:8695":{"crate_id":23,"path":["indexmap","map","IterMut"],"kind":"struct"},"1:6305:10852":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:57312:13692":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"6:4523:14382":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"29:5428:14544":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:10919:6914":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"1:12654:12236":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:23651:10621":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"0:3987:3236":{"crate_id":0,"path":["clap","builder","ArgSettings","UseValueDelimiter"],"kind":"variant"},"6:4255:10853":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:11105:8627":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:9731:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:51727:13650":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"29:6177:14712":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"6:563:13915":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"0:4626:6815":{"crate_id":0,"path":["clap","error","ErrorKind","ArgumentNotFound"],"kind":"variant"},"16:7378:11709":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:55990:225":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"23:648:10069":{"crate_id":23,"path":["indexmap","map","IntoValues"],"kind":"struct"},"2:9223:7158":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:13554:13058":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:5916:10884":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"6:5945:14596":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"6:4227:14263":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"6:6887:14753":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:10827:11944":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"0:3360:107":{"crate_id":0,"path":["clap","builder","ArgAction","Count"],"kind":"variant"},"1:15850:8323":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"6:1602:13999":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"12:866:9827":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"0:1362:2165":{"crate_id":0,"path":["clap","builder","TypedValueParser"],"kind":"trait"},"17:13348:13005":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"5:4438:7109":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:15589:12241":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"6:1630:14018":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:48496:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"5:8114:9827":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:49159:8763":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"16:6999:11767":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"24:851:10707":{"crate_id":24,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"6:5282:14467":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"6:632:13953":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:3486:130":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:46653:8739":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:24093:6890":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"0:3347:1562":{"crate_id":0,"path":["clap","builder","ArgAction"],"kind":"enum"},"6:6214:14728":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"9:603:15383":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"16:7205:11774":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"16:3338:11626":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"9:27:11444":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"29:4389:14331":{"crate_id":29,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:46632:8724":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:11975:62933":{"crate_id":1,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"5:1838:12191":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"5:1669:10069":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:49603:8605":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:46329:100":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"22:92:12096":{"crate_id":22,"path":["os_str_bytes","OsStringBytes"],"kind":"trait"},"2:10258:109":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"12:2018:9825":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"24:1863:14765":{"crate_id":24,"path":["hashbrown","raw","inner","bitmask","BitMask"],"kind":"struct"},"16:7119:11635":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"12:761:8695":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"12:784:10067":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:11227:62755":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"2:49628:8617":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"0:4561:6700":{"crate_id":0,"path":["clap","error","ContextValue"],"kind":"enum"},"8:0:8293":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2:56029:225":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"18:644:12075":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:11416:9219":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"29:6873:14752":{"crate_id":29,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"29:4100:14239":{"crate_id":29,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:15846:8321":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"29:6020:14647":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:11963:10235":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"1:12048:10730":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:49198:8762":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"5:8328:8418":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"6:6176:14709":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:6423:10625":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:1655:10708":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:52908:11062":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"6:4033:14200":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"24:535:143":{"crate_id":24,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:7649:10230":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:14669:10235":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"1:14216:10762":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"1:10788:10653":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"26:97:8850":{"crate_id":26,"path":["termcolor","WriterInner"],"kind":"enum"},"2:49700:10937":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"23:0:1631":{"crate_id":23,"path":["indexmap"],"kind":"module"},"29:4499:14377":{"crate_id":29,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:14135:8678":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"15:0:8299":{"crate_id":15,"path":["addr2line"],"kind":"module"},"0:4594:6785":{"crate_id":0,"path":["clap","error","ErrorKind","UnrecognizedSubcommand"],"kind":"variant"},"1:5771:10645":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"6:6100:14660":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"5:2305:11379":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:56055:225":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:6021:11871":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"25:165:8829":{"crate_id":25,"path":["textwrap","wrap_algorithms","WrapAlgorithm"],"kind":"enum"},"6:3905:14128":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:12068:10731":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:11082:8492":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"5:7250:12191":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:12028:12660":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:45783:188":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"29:1615:14013":{"crate_id":29,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"24:741:9827":{"crate_id":24,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:11319:8782":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:2366:589":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:2169:567":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:53453:13684":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"29:4489:14372":{"crate_id":29,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"27:93:10085":{"crate_id":27,"path":["strsim","StrSimError"],"kind":"enum"},"2:51864:11073":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:2484:53320":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:49769:10945":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:8825:13705":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"6:4300:14285":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"0:755:1563":{"crate_id":0,"path":["clap","builder","Command"],"kind":"typedef"},"2:3382:8461":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"14:11:13489":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"5:6665:8523":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:51197:11043":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:46422:8436":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"0:4001:2828":{"crate_id":0,"path":["clap","builder","ArgSettings","Last"],"kind":"variant"},"29:1693:14072":{"crate_id":29,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"5:374:9802":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"26:357:8232":{"crate_id":26,"path":["termcolor","ColorSpec"],"kind":"struct"},"2:57291:13691":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"25:155:8139":{"crate_id":25,"path":["textwrap","word_splitters","WordSplitter"],"kind":"enum"},"16:7477:11726":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:14012:9798":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"1:7718:10232":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"29:1526:13961":{"crate_id":29,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:32218:9930":{"crate_id":2,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"6:5528:14564":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"7:85:51210":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"26:377:8239":{"crate_id":26,"path":["termcolor","Color"],"kind":"enum"},"14:250:13496":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"12:1762:12189":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:11389:10628":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"0:4371:6250":{"crate_id":0,"path":["clap","builder","ValueHint","CommandString"],"kind":"variant"},"29:3966:14173":{"crate_id":29,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"6:4494:14369":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"29:6231:14734":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"29:4260:14272":{"crate_id":29,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"29:5202:14430":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"24:176:11530":{"crate_id":24,"path":["hashbrown","raw","inner","RawTable"],"kind":"struct"},"1:14652:9859":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:49239:8780":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:13098:12951":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"16:7549:11713":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:10623:12461":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:2163:7522":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:11001:12511":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:51255:13648":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"23:269:7107":{"crate_id":23,"path":["indexmap","map","core","Entry"],"kind":"enum"},"0:4546:4475":{"crate_id":0,"path":["clap","error","ContextKind","Usage"],"kind":"variant"},"0:4624:6730":{"crate_id":0,"path":["clap","error","ErrorKind","DisplayVersion"],"kind":"variant"},"0:3427:2398":{"crate_id":0,"path":["clap","builder","AppSettings","DeriveDisplayOrder"],"kind":"variant"},"17:11304:53238":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:11246:8785":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"5:3039:66943":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:47619:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:9447:21658":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:3249:206":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"17:13788:13137":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:10140:12001":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"23:924:7953":{"crate_id":23,"path":["indexmap","set","IndexSet"],"kind":"struct"},"1:10567:10760":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:52021:11068":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"5:7833:12208":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"29:5406:14537":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:13856:10232":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"16:7453:11705":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:11312:10669":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:22961:16158":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"2:5132:8808":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:46145:8617":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"0:4530:6802":{"crate_id":0,"path":["clap","error","ContextKind","MinValues"],"kind":"variant"},"2:48711:13636":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:12307:12707":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"5:8264:101":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:15810:16155":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:49442:8628":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:11186:12520":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:10545:10621":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"6:5436:14544":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:1021:10777":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"17:9245:11945":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"16:5766:11616":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:10407:12232":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"29:3933:14161":{"crate_id":29,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"6:1676:14055":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"5:3743:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:13818:1563":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:3492:132":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:53323:13678":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:5357:10833":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"29:578:13927":{"crate_id":29,"path":["libc","unix","pollfd"],"kind":"struct"},"29:6879:14753":{"crate_id":29,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:2187:10699":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:10656:9852":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"0:3364:2281":{"crate_id":0,"path":["clap","builder","ArgAction","Version"],"kind":"variant"},"17:10529:12450":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:49524:8624":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:51350:11060":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:13370:13010":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"26:90:8847":{"crate_id":26,"path":["termcolor","StandardStream"],"kind":"struct"},"29:1540:13966":{"crate_id":29,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:49844:10947":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:49211:8778":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:51174:11039":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:10205:1932":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"6:1547:13966":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"26:310:8857":{"crate_id":26,"path":["termcolor","LossyStandardStream"],"kind":"struct"},"16:4350:13217":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"16:7216:11775":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:53266:13673":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:47466:9253":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"5:2195:12192":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"29:563:13918":{"crate_id":29,"path":["libc","unix","hostent"],"kind":"struct"},"0:3352:2244":{"crate_id":0,"path":["clap","builder","ArgAction","StoreValue"],"kind":"variant"},"0:3417:2371":{"crate_id":0,"path":["clap","builder","AppSettings","UseLongFormatForHelpSubcommand"],"kind":"variant"},"1:8366:10777":{"crate_id":1,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"2:10888:10621":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:903:10756":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:8954:11954":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:9726:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:37488:168":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:3347:8455":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:14784:12238":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:7821:11023":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:50982:11050":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"6:4439:14349":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"24:1589:10699":{"crate_id":24,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:10001:53282":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:23913:11113":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:11402:8783":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"5:1457:10077":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"6:1533:13961":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:11904:8777":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"5:8430:9825":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"29:5555:14589":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:12118:12679":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"6:157:46371":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"17:13221:12976":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"0:3403:2347":{"crate_id":0,"path":["clap","builder","AppSettings","InferLongArgs"],"kind":"variant"},"17:11981:12654":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:47475:178":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"16:7042:11921":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:11485:8573":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:46451:8492":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:13041:12913":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:15858:8331":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"17:9971:68207":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:9280:12418":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"6:4325:14297":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"16:6518:11759":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"6:5379:14523":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"6:6644:14743":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"6:4040:14203":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:2465:4663":{"crate_id":1,"path":["std","env","args_os"],"kind":"function"},"0:153:1572":{"crate_id":0,"path":["clap","CommandFactory"],"kind":"trait"},"17:12610:12772":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"23:115:12305":{"crate_id":23,"path":["indexmap","map","core","raw","DebugIndices"],"kind":"struct"},"29:1669:14055":{"crate_id":29,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:3398:8464":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"24:843:10706":{"crate_id":24,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"0:3999:3213":{"crate_id":0,"path":["clap","builder","ArgSettings","RequireEquals"],"kind":"variant"},"17:10041:12437":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"0:4369:6248":{"crate_id":0,"path":["clap","builder","ValueHint","CommandName"],"kind":"variant"},"2:46189:10013":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"9:1056:11455":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"29:4407:14340":{"crate_id":29,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"16:2773:11898":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:47829:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"0:4357:221":{"crate_id":0,"path":["clap","builder","ValueHint","Unknown"],"kind":"variant"},"2:3483:8409":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"0:3971:2847":{"crate_id":0,"path":["clap","builder","ArgSettings","Required"],"kind":"variant"},"2:3143:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"1:10677:11369":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"17:9034:53231":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:3317:10799":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:46622:8738":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:14656:10666":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"19:0:981":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:8118:10777":{"crate_id":1,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"2:23946:6795":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"0:3423:2383":{"crate_id":0,"path":["clap","builder","AppSettings","SubcommandPrecedenceOverArg"],"kind":"variant"},"0:4690:6810":{"crate_id":0,"path":["clap","parser","MatchesError","UnknownArgument"],"kind":"variant"},"29:618:13948":{"crate_id":29,"path":["libc","unix","servent"],"kind":"struct"},"2:47543:7522":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"16:3287:11883":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:49220:8781":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"16:4641:13225":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:13924:13174":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:12715:11177":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:14444:14954":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:50934:11070":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"0:4462:2174":{"crate_id":0,"path":["clap","builder","FalseyValueParser"],"kind":"struct"},"22:76:12093":{"crate_id":22,"path":["os_str_bytes","OsStrBytes"],"kind":"trait"},"5:3324:7109":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:23930:14947":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:47552:168":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"0:3399:2340":{"crate_id":0,"path":["clap","builder","AppSettings","TrailingVarArg"],"kind":"variant"},"2:49061:11174":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:13884:13163":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:11275:10837":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"6:5420:14540":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"16:3506:11884":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:49574:8620":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"6:6155:14695":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"16:7823:11716":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:50957:11058":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:5946:10887":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:1463:1588":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"29:3978:14182":{"crate_id":29,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:48133:8508":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:12521:12757":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"12:1180:11524":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:47577:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:7891:8706":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"17:12073:12672":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:49470:8622":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"12:1253:10708":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:7961:12214":{"crate_id":1,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"12:1159:11523":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"0:3431:2405":{"crate_id":0,"path":["clap","builder","AppSettings","NextLineHelp"],"kind":"variant"},"2:46314:10012":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:542:11638":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:12582:12766":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:10801:12497":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:13027:8596":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"6:4501:14372":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"5:1195:21971":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"12:925:10068":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"0:215:1561":{"crate_id":0,"path":["clap","builder"],"kind":"module"},"16:2816:11891":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:11142:10670":{"crate_id":1,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"2:50040:11187":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:10353:11992":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:51554:11047":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"16:6136:11743":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"29:1565:13980":{"crate_id":29,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"5:4623:224":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:13598:13068":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"21:75:4701":{"crate_id":21,"path":["clap_lex","RawArgs"],"kind":"struct"},"2:48392:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"2:3268:9584":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"23:740:9827":{"crate_id":23,"path":["indexmap","map","Drain"],"kind":"struct"},"17:11482:12547":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"6:4127:14246":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:13119:12956":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"29:5371:14523":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"16:5717:11611":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:13482:21973":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"2:3701:137":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"0:4432:2162":{"crate_id":0,"path":["clap","builder","RangedI64ValueParser"],"kind":"struct"},"6:161:46372":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:1646:10077":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"18:782:12310":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:49881:10948":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:8894:8529":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:13272:12989":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:14022:11196":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"0:3445:2430":{"crate_id":0,"path":["clap","builder","AppSettings","HidePossibleValues"],"kind":"variant"},"17:9528:8610":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:15805:15391":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"6:4272:14272":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:32212:9824":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:4719:102":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"6:1908:47673":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:5844:10881":{"crate_id":1,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"6:3972:14170":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"16:6577:11761":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:4343:10819":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"7:38:51203":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:3360:8460":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"6:1527:13958":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:49723:10938":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"0:4359:6239":{"crate_id":0,"path":["clap","builder","ValueHint","Other"],"kind":"variant"},"2:3281:5920":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"29:81:46305":{"crate_id":29,"path":["libc","unix","DIR"],"kind":"enum"},"2:10268:8508":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"29:1547:13969":{"crate_id":29,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"29:4365:14324":{"crate_id":29,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"18:620:12309":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"0:3443:2426":{"crate_id":0,"path":["clap","builder","AppSettings","Hidden"],"kind":"variant"},"29:5970:14619":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"29:6043:14648":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"16:7392:11710":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:12645:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"6:5359:14515":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"0:4518:6769":{"crate_id":0,"path":["clap","error","ContextKind","InvalidArg"],"kind":"variant"},"6:6881:14752":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:12652:10789":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"1:2175:10697":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"23:600:1588":{"crate_id":23,"path":["indexmap","map","Values"],"kind":"struct"},"5:7808:12204":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"14:56:12547":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"16:4506:13222":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:10357:13793":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:11360:8629":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"29:5399:14536":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:12537:12759":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"6:584:13927":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"0:3903:1565":{"crate_id":0,"path":["clap","builder","ArgGroup"],"kind":"struct"},"6:5386:14524":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:3489:131":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"16:7236:11777":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:11231:11975":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"6:5469:14552":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:2437:9857":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"6:6910:14759":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"29:1651:14043":{"crate_id":29,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:10215:134":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"13:232:14817":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"0:3405:2350":{"crate_id":0,"path":["clap","builder","AppSettings","InferSubcommands"],"kind":"variant"},"12:2303:14764":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:4997:8798":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"16:4614:13224":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"24:327:14943":{"crate_id":24,"path":["hashbrown","raw","inner","RawIterRange"],"kind":"struct"},"29:1701:14073":{"crate_id":29,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:49229:8779":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:11101:8695":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:13865:13158":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"5:8187:7522":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:10489:12022":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:11319:10885":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:11324:10888":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:13746:13124":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:5639:10664":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:46464:7172":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"16:2843:11872":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"6:5191:14428":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:15837:8313":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"17:11970:12651":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"29:150:46371":{"crate_id":29,"path":["libc","unix","FILE"],"kind":"enum"},"1:6681:14640":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"29:1577:13989":{"crate_id":29,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"0:4005:3173":{"crate_id":0,"path":["clap","builder","ArgSettings","IgnoreCase"],"kind":"variant"},"17:11604:12575":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:11344:10854":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"1:11172:10676":{"crate_id":1,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"1:6671:10637":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"29:6116:14671":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"29:4437:14355":{"crate_id":29,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"16:3118:11888":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:6776:10625":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"5:1091:12191":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"16:3264:11882":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"29:4108:14244":{"crate_id":29,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"0:4013:3198":{"crate_id":0,"path":["clap","builder","ArgSettings","AllowInvalidUtf8"],"kind":"variant"},"29:6927:14762":{"crate_id":29,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"5:8160:11308":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:47389:2018":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"12:354:14943":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:48377:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"6:4023:14197":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"12:853:1588":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"5:69:9801":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:24581:11219":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"29:572:13924":{"crate_id":29,"path":["libc","unix","iovec"],"kind":"struct"},"2:32226:66501":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"17:11993:12656":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:12982:12861":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:24377:11215":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"5:3331:10698":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:46281:10009":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"1:5484:10841":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:4456:1943":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"18:610:12073":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:2512:11985":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"6:6085:14655":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:3248:207":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"16:2945:11897":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:11048:8663":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:48907:8764":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:9689:68205":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"29:5261:14461":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:9937:11160":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:8179:12214":{"crate_id":1,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"29:1556:13974":{"crate_id":29,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"16:4304:13216":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:46482:8727":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"14:244:13494":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:11330:10846":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:2251:11007":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"0:4587:1584":{"crate_id":0,"path":["clap","error","ErrorKind"],"kind":"enum"},"17:12946:12830":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:9222:7159":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:27932:10921":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"16:6152:11704":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:11378:11947":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:10926:12505":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:52261:11048":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:8846:8696":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:38732:9585":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:1236:12339":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:11519:12562":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:1419:7109":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:4380:8679":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:12034:10727":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"5:1680:184":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:10828:10812":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:13394:13015":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"9:749:11397":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"2:25121:11091":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"29:4466:14364":{"crate_id":29,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:12795:12808":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:11277:12523":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:1637:10076":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:52230:11045":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:21:660":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"15:269:11548":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:12327:12708":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"24:824:10705":{"crate_id":24,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:4345:7522":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"18:704:12310":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"24:1885:8557":{"crate_id":24,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:4630:8662":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"0:3995:2326":{"crate_id":0,"path":["clap","builder","ArgSettings","AllowHyphenValues"],"kind":"variant"},"17:12051:12663":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:49290:8612":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"17:13258:12985":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"6:6852:14745":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"16:6032:11634":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"16:7804:11714":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"29:5378:14524":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:23891:13585":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"1:2401:9847":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:11809:12624":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:10346:12338":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:11434:8563":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"17:13520:13050":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"26:430:8856":{"crate_id":26,"path":["termcolor","ParseColorErrorKind"],"kind":"enum"},"2:77:1469":{"crate_id":2,"path":["core","usize"],"kind":"module"},"0:4612:6787":{"crate_id":0,"path":["clap","error","ErrorKind","MissingRequiredArgument"],"kind":"variant"},"20:0:1629":{"crate_id":20,"path":["bitflags"],"kind":"module"},"2:12004:12211":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"1:2923:169":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"5:7205:9827":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"28:0:1528":{"crate_id":28,"path":["atty"],"kind":"module"},"16:7303:11779":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"0:3993:2430":{"crate_id":0,"path":["clap","builder","ArgSettings","HidePossibleValues"],"kind":"variant"},"17:12010:12659":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"16:3145:11887":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:15860:8333":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:46581:8734":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"29:4191:14261":{"crate_id":29,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:24:589":{"crate_id":2,"path":["core","env"],"kind":"macro"},"6:4164:14258":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"5:6757:8652":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:5547:8435":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"29:4021:14200":{"crate_id":29,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:2751:8493":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"12:892:11517":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"6:531:13893":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"16:6620:11904":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"12:396:11528":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"0:162:1573":{"crate_id":0,"path":["clap","FromArgMatches"],"kind":"trait"},"16:7146:11769":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:10543:8871":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"24:1568:9825":{"crate_id":24,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"2:50099:11252":{"crate_id":2,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"29:5177:14425":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"0:4602:6798":{"crate_id":0,"path":["clap","error","ErrorKind","TooManyValues"],"kind":"variant"},"0:3970:1581":{"crate_id":0,"path":["clap","builder","ArgSettings"],"kind":"enum"},"17:9368:12328":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"6:4073:14219":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:45673:8476":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"29:5339:14510":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:11572:12569":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:12262:12699":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"26:29:8233":{"crate_id":26,"path":["termcolor","WriteColor"],"kind":"trait"},"6:4347:14308":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"25:146:8828":{"crate_id":25,"path":["textwrap","word_separators","WordSeparator"],"kind":"enum"},"15:248:11544":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:12373:12732":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"6:1658:14043":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:53338:13679":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:12725:12792":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:7781:10236":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:13073:10940":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"21:138:7730":{"crate_id":21,"path":["clap_lex","ShortFlags"],"kind":"struct"},"2:45737:184":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"12:2025:10697":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"29:6804:14744":{"crate_id":29,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:11328:12526":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:3526:8475":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"16:5330:12418":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"23:44:12100":{"crate_id":23,"path":["indexmap","mutable_keys","PrivateMarker"],"kind":"struct"},"2:49278:8615":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:4852:8814":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:10781:10652":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"0:1294:2166":{"crate_id":0,"path":["clap","builder","ValueParser"],"kind":"struct"},"17:11159:12519":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:45829:189":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:48903:11300":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"0:3447:2433":{"crate_id":0,"path":["clap","builder","AppSettings","HelpExpected"],"kind":"variant"},"2:8436:7524":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"24:1318:12189":{"crate_id":24,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:10639:10073":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"6:5978:14619":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"6:5292:14474":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"16:3549:13210":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:12431:12744":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:13154:12957":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:46643:8666":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:53297:13676":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:11847:12632":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"6:3997:14186":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"0:3389:2322":{"crate_id":0,"path":["clap","builder","AppSettings","WaitOnError"],"kind":"variant"},"1:7493:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"16:7761:11781":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:12699:12790":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"0:4801:1585":{"crate_id":0,"path":["clap","parser","Indices"],"kind":"struct"},"6:6864:14747":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:10420:11983":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"25:178:8840":{"crate_id":25,"path":["textwrap","core","Word"],"kind":"struct"},"16:5855:11619":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"5:923:11350":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"6:1563:13974":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:1432:8695":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:11578:7109":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"9:686:11393":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"12:1855:145":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:53286:13675":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:10493:142":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"16:5561:11604":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"9:996:11461":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"29:4048:14213":{"crate_id":29,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:699:10751":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:3459:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:24683:11221":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"2:50220:180":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"17:12685:12787":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:8330:8717":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"16:7514:11724":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:8911:10867":{"crate_id":1,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"1:7635:10229":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:10255:109":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"16:6636:11721":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:11714:12596":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"16:5595:11606":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:2181:10698":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"18:739:12316":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"27:52:10090":{"crate_id":27,"path":["strsim","StringWrapper"],"kind":"struct"},"5:3877:8676":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:10590:10762":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"25:0:1632":{"crate_id":25,"path":["textwrap"],"kind":"module"},"1:2506:1566":{"crate_id":1,"path":["std","error"],"kind":"module"},"9:900:14819":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:10432:12234":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"0:4573:6795":{"crate_id":0,"path":["clap","error","ContextValue","Number"],"kind":"variant"},"1:11250:13762":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"2:49637:8618":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"5:8105:11352":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:10924:1584":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"29:1589:13997":{"crate_id":29,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:3246:8812":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"1:5761:10644":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:12408:12743":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"24:715:7105":{"crate_id":24,"path":["hashbrown","map","Keys"],"kind":"struct"},"29:4054:14216":{"crate_id":29,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:11175:10677":{"crate_id":1,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"2:24717:11222":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"29:5945:14601":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"16:5941:179":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"6:3862:14100":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"6:511:1908":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:32177:9823":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:9476:12331":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:897:10755":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:11100:11978":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:9886:12429":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:9933:12430":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:12081:10732":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"29:6147:14695":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:3339:8453":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:12195:12689":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:47414:7522":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"1:1079:1759":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"6:1554:13969":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:49929:13638":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunk"],"kind":"struct"},"1:8275:10777":{"crate_id":1,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"17:9849:68210":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:22806:10618":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:2840:8484":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:13317:10848":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"2:11281:8626":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:9841:2593":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"2:3250:106":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"1:8467:10728":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:13710:138":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:51500:11040":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:11082:11953":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"16:6780:11765":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"16:4230:13215":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:51216:13647":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"12:2315:68203":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:8460:192":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"29:1729:14085":{"crate_id":29,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:48672:8872":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:46511:8730":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:46258:10008":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"1:1476:9827":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"29:6092:14660":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"29:6606:14740":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:37512:8485":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"6:1736:14085":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:14499:8663":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"29:5412:14540":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"16:5707:11609":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"2:3967:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"1:8789:162":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"12:747:7109":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:4028:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:12343:12713":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:48681:146":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"18:766:12321":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:3335:8450":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:8013:10777":{"crate_id":1,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"1:13463:9857":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"16:5273:11632":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:47913:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"29:1595:13999":{"crate_id":29,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"18:677:142":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:4669:1932":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"6:3892:14118":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"12:469:21961":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"6:1522:13956":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"9:1075:11463":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:51759:13651":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:3779:8478":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:49112:8771":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:13733:13118":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:11199:12522":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"6:5241:14449":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:9210:53235":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:49149:8773":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:38669:7701":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"1:11933:10233":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:53312:13677":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"0:4826:7596":{"crate_id":0,"path":["clap","parser","ValueSource","EnvVariable"],"kind":"variant"},"2:2933:167":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"proc_derive"},"2:3149:217":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"1:15849:8322":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:46295:10011":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:50044:11191":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"6:4112:14239":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:1153:13693":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:48664:13630":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"16:547:11613":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:11039:8684":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"6:4066:14216":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:11738:12600":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:13488:13039":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"23:22:8796":{"crate_id":23,"path":["indexmap","equivalent","Equivalent"],"kind":"trait"},"1:14439:14952":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"17:12507:12754":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"0:4600:6803":{"crate_id":0,"path":["clap","error","ErrorKind","ValueValidation"],"kind":"variant"},"2:0:477":{"crate_id":2,"path":["core"],"kind":"module"},"1:2793:8494":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:6474:7173":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:10611:12460":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"16:6208:11751":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"16:4477:13221":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"5:3357:10699":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:3743:11940":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:15069:10693":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"29:6098:14661":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:4018:8498":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"2:24007:13592":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"12:2045:10700":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"1:9049:8534":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:10264:8502":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:10272:179":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:50064:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"1:5938:10886":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:5068:8805":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:13819:13144":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:4378:8678":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:13429:13020":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"29:1610:14011":{"crate_id":29,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"29:6060:14650":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"6:4193:14260":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"0:174:1576":{"crate_id":0,"path":["clap","ValueEnum"],"kind":"trait"},"0:4750:7086":{"crate_id":0,"path":["clap","parser","ValuesRef"],"kind":"struct"},"6:3957:14164":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:9264:12417":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"29:5997:14629":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"29:585:13930":{"crate_id":29,"path":["libc","unix","winsize"],"kind":"struct"},"2:24411:11216":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"22:0:8641":{"crate_id":22,"path":["os_str_bytes"],"kind":"module"},"0:4616:6808":{"crate_id":0,"path":["clap","error","ErrorKind","UnexpectedMultipleUsage"],"kind":"variant"},"17:12783:12801":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:13547:13057":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"6:5197:14429":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:15862:8335":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"16:6464:11717":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"29:3850:14100":{"crate_id":29,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:53391:13682":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:13609:13072":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:53414:13683":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:12167:8538":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"18:849:12067":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:14912:14910":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:7778:2009":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"6:6239:14734":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"29:3869:14110":{"crate_id":29,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:6068:10843":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"16:6366:11541":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"16:7360:184":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:13620:13073":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:13062:12922":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:15196:10833":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"12:812:10069":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"29:3880:14118":{"crate_id":29,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:10331:12001":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"5:8352:205":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:9713:10828":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"17:11588:12574":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"16:5580:11605":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"0:4375:6261":{"crate_id":0,"path":["clap","builder","ValueHint","Username"],"kind":"variant"},"29:4375:14327":{"crate_id":29,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"24:445:21961":{"crate_id":24,"path":["hashbrown","raw","inner","RawIterHashInner"],"kind":"struct"},"29:4001:14191":{"crate_id":29,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"5:1215:11360":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"0:1606:2158":{"crate_id":0,"path":["clap","value_parser"],"kind":"macro"},"6:569:13918":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:9046:8533":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"29:4203:14262":{"crate_id":29,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"29:626:13953":{"crate_id":29,"path":["libc","unix","protoent"],"kind":"struct"},"29:4505:14379":{"crate_id":29,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"16:3041:11877":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:13836:13583":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:1161:16153":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"6:1540:13964":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"6:6106:14661":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"0:4468:2172":{"crate_id":0,"path":["clap","builder","BoolishValueParser"],"kind":"struct"},"2:51092:11063":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:5727:10637":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"16:5314:12417":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"16:6252:11753":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"29:5520:14564":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"6:610:13940":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:12568:12764":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"29:1722:10847":{"crate_id":29,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"6:3990:14182":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:10468:12020":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:46868:8712":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"29:5213:14438":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"0:3991:3275":{"crate_id":0,"path":["clap","builder","ArgSettings","RequireDelimiter"],"kind":"variant"},"2:48359:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"29:4413:14341":{"crate_id":29,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"0:3393:2330":{"crate_id":0,"path":["clap","builder","AppSettings","AllowNegativeNumbers"],"kind":"variant"},"6:6221:14731":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"6:5255:14460":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:1492:10068":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"5:3370:11327":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"0:4363:6242":{"crate_id":0,"path":["clap","builder","ValueHint","FilePath"],"kind":"variant"},"5:1639:1588":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"18:811:12064":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"12:1144:10077":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:2598:13700":{"crate_id":1,"path":["std","error","from","StringError"],"kind":"struct"},"2:51453:11052":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:4423:8235":{"crate_id":1,"path":["std","io","stdio","stdout"],"kind":"function"},"12:1667:11535":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:46859:8683":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"5:4694:12195":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:49388:8630":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"28:8:1942":{"crate_id":28,"path":["atty","Stream"],"kind":"enum"},"2:6856:8742":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:46473:8721":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"5:3034:66946":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:6847:10629":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"21:0:1630":{"crate_id":21,"path":["clap_lex"],"kind":"module"},"17:11696:12595":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"26:78:8846":{"crate_id":26,"path":["termcolor","IoStandardStreamLock"],"kind":"enum"},"17:13296:12991":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"6:5274:14462":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:1723:14082":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"24:1575:10697":{"crate_id":24,"path":["hashbrown","set","Intersection"],"kind":"struct"},"26:0:1532":{"crate_id":26,"path":["termcolor"],"kind":"module"},"9:776:11442":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"2:46235:10007":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"24:439:21960":{"crate_id":24,"path":["hashbrown","raw","inner","RawIterHash"],"kind":"struct"},"5:4510:11337":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"0:5076:4813":{"crate_id":0,"path":["clap","ColorChoice","Never"],"kind":"variant"},"1:2460:1571":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"0:4544:6813":{"crate_id":0,"path":["clap","error","ContextKind","TrailingArg"],"kind":"variant"},"1:10844:8676":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:46252:8617":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:8676:8526":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:4972:10667":{"crate_id":1,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"6:4052:14208":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"16:3091:11935":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"16:4922:13234":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"29:5514:14563":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:13356:13008":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:22603:66471":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"5:4594:12193":{"crate_id":5,"path":["alloc","collections","vec_deque","spec_extend","spec_extend","WrapAddOnDrop"],"kind":"struct"},"1:11986:62757":{"crate_id":1,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"22:394:12092":{"crate_id":22,"path":["os_str_bytes","pattern","EncodedChar"],"kind":"struct"},"6:6858:14746":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"9:692:11395":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"29:1658:14047":{"crate_id":29,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:46492:8728":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:12468:8608":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"29:4040:14208":{"crate_id":29,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"0:4298:1582":{"crate_id":0,"path":["clap","builder","PossibleValue"],"kind":"struct"},"1:2462:9864":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"16:5488:11600":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:49130:8774":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"29:3856:14101":{"crate_id":29,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:3137:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"29:6885:14754":{"crate_id":29,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:7633:8719":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:24615:11220":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"5:3946:9825":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"2:47423:9122":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:5123:8807":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"24:1559:7522":{"crate_id":24,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:10571:12457":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:6185:10851":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"6:0:785":{"crate_id":6,"path":["libc"],"kind":"module"},"29:4115:14246":{"crate_id":29,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:8902:53228":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:10204:195":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"1:10771:10638":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:1442:7522":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"14:231:10599":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"0:3979:3202":{"crate_id":0,"path":["clap","builder","ArgSettings","ForbidEmptyValues"],"kind":"variant"},"1:9698:10827":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"16:5384:11592":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"29:1533:13964":{"crate_id":29,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:51038:11071":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"0:4706:1568":{"crate_id":0,"path":["clap","parser","ArgMatches"],"kind":"struct"},"17:11947:12644":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:3544:4471":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"17:13898:13165":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"0:4687:7150":{"crate_id":0,"path":["clap","parser","MatchesError","Downcast"],"kind":"variant"},"6:4431:14344":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"24:705:7522":{"crate_id":24,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:10270:8509":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"6:5312:14490":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:9574:11977":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"29:6636:14743":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:8849:11971":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:9649:12425":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"23:1197:10697":{"crate_id":23,"path":["indexmap","set","Intersection"],"kind":"struct"},"29:4359:14321":{"crate_id":29,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"29:4511:14382":{"crate_id":29,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:23820:11212":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:2938:174":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:13760:66588":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"6:6812:14744":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"12:181:11530":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"6:4410:14334":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"29:3945:14164":{"crate_id":29,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:5954:10889":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"6:4317:14293":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:3318:8449":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"29:5420:14542":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:13963:13183":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"0:3435:2412":{"crate_id":0,"path":["clap","builder","AppSettings","DisableHelpFlag"],"kind":"variant"},"18:650:12072":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"0:4763:7085":{"crate_id":0,"path":["clap","parser","RawValues"],"kind":"struct"},"1:6945:10626":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"26:105:8851":{"crate_id":26,"path":["termcolor","WriterInnerLock"],"kind":"enum"},"29:6077:14655":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:4008:12342":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:55897:11000":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"5:994:11351":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"5:8346:14831":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"26:59:8845":{"crate_id":26,"path":["termcolor","IoStandardStream"],"kind":"enum"},"6:88:46305":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"5:7104:12204":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"16:6166:11749":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"23:1091:9827":{"crate_id":23,"path":["indexmap","set","Drain"],"kind":"struct"},"6:599:13935":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"16:6269:11754":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:50279:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"26:329:1570":{"crate_id":26,"path":["termcolor","ColorChoice"],"kind":"enum"},"1:13929:10231":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"24:405:11527":{"crate_id":24,"path":["hashbrown","raw","inner","RawDrain"],"kind":"struct"},"12:1235:11526":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"0:4011:3613":{"crate_id":0,"path":["clap","builder","ArgSettings","HiddenLongHelp"],"kind":"variant"},"17:12182:12688":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"16:6807:11766":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"16:3604:12348":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"5:1613:7522":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"16:7894:11740":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:15840:8316":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"17:10887:12499":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"6:624:13948":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"0:4516:6781":{"crate_id":0,"path":["clap","error","ContextKind","InvalidSubcommand"],"kind":"variant"},"17:10095:12044":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"6:3918:14138":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:15075:10694":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:13681:10239":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"17:12221:12692":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"24:350:11529":{"crate_id":24,"path":["hashbrown","raw","inner","RawIter"],"kind":"struct"},"2:47787:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:5705:10641":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:15857:8330":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"15:230:11543":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"5:0:266":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:12152:8528":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:9729:68208":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"18:744:68215":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:4:966":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"5:1648:10068":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"0:3356:2258":{"crate_id":0,"path":["clap","builder","ArgAction","SetTrue"],"kind":"variant"},"1:11584:8578":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"5:1630:7105":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:3319:10800":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"17:11118:53237":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"18:837:8599":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"6:1717:14079":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"6:3978:14173":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:3351:8454":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:9162:11974":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:50048:11189":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:56016:225":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"25:203:8136":{"crate_id":25,"path":["textwrap","Options"],"kind":"struct"},"16:5753:11615":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:1306:143":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:10502:12449":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:2159:7109":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:22537:8485":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"6:1572:13980":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:14932:10714":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"0:3419:2375":{"crate_id":0,"path":["clap","builder","AppSettings","SubcommandsNegateReqs"],"kind":"variant"},"16:4386:13218":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"17:9943:68214":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"6:4459:14356":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"16:3772:13212":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"29:5151:14410":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:9551:11972":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:10558:12454":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"29:1683:14066":{"crate_id":29,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"0:4828:7121":{"crate_id":0,"path":["clap","parser","ValueSource","CommandLine"],"kind":"variant"},"6:6028:14647":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:13627:13075":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:7918:62967":{"crate_id":1,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"17:11015:12512":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"29:4305:14293":{"crate_id":29,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:10179:12443":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:11993:14908":{"crate_id":1,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"24:1869:68203":{"crate_id":24,"path":["hashbrown","raw","inner","Fallibility"],"kind":"enum"},"5:4237:12191":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"16:3195:11879":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:2897:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"14:194:51579":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"24:1034:10708":{"crate_id":24,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:10912:12501":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:11665:12585":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"6:6051:14648":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"6:6636:14741":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:5713:10642":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"24:752:9825":{"crate_id":24,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"16:7333:11723":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"16:6718:11909":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"16:7073:11768":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"16:7571:11701":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:15863:8336":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"16:3488:11885":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"0:4598:6774":{"crate_id":0,"path":["clap","error","ErrorKind","NoEquals"],"kind":"variant"},"17:13912:13172":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:14109:141":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"18:885:12070":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:4687:8664":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"0:3433:2409":{"crate_id":0,"path":["clap","builder","AppSettings","DisableColoredHelp"],"kind":"variant"},"17:13799:13141":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"5:2548:11366":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:10962:12508":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"6:4449:14355":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"0:4526:6796":{"crate_id":0,"path":["clap","error","ContextKind","ActualNumValues"],"kind":"variant"},"1:1486:9825":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"1:11948:10234":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"24:800:10068":{"crate_id":24,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:510:12335":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"18:774:12310":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:11045:53236":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"16:5346:11703":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"0:4456:2171":{"crate_id":0,"path":["clap","builder","BoolValueParser"],"kind":"struct"},"0:170:1575":{"crate_id":0,"path":["clap","Subcommand"],"kind":"trait"},"6:4331:14299":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"16:6126:11748":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:12247:12696":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:51627:11033":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:53257:13672":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"0:1943:1567":{"crate_id":0,"path":["clap","parser"],"kind":"module"},"17:11794:12618":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"16:4535:13223":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"5:8297:11244":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"21:90:5755":{"crate_id":21,"path":["clap_lex","ArgCursor"],"kind":"struct"},"5:1441:7107":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"16:5522:11602":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"6:1596:13997":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"6:605:13938":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:51236:11028":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:9088:53233":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:13180:12963":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"6:5347:14510":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"5:8122:11353":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"5:5531:8523":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"}},"external_crates":{"26":{"name":"termcolor","html_root_url":null},"21":{"name":"clap_lex","html_root_url":null},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"29":{"name":"libc","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"os_str_bytes","html_root_url":null},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"28":{"name":"atty","html_root_url":null},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"23":{"name":"indexmap","html_root_url":"https://docs.rs/indexmap/1/"},"27":{"name":"strsim","html_root_url":null},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"20":{"name":"bitflags","html_root_url":"https://docs.rs/bitflags/1.3.2/"},"25":{"name":"textwrap","html_root_url":"https://docs.rs/textwrap/0.15.0/"},"24":{"name":"hashbrown","html_root_url":null},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"}},"format_version":15}