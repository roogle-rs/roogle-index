{"root":"0:0:1685","crate_version":"4.1.1","includes_private":false,"index":{"0:927":{"id":"0:927","crate_id":0,"name":null,"span":{"filename":"src/builder/str.rs","begin":[85,0],"end":[89,1]},"visibility":{"restricted":{"parent":"0:912:1352","path":"::builder::str"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"std::ffi::OsString","id":"1:2026:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:928:673"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:303":{"id":"0:303","crate_id":0,"name":null,"span":{"filename":"src/builder/arg.rs","begin":[4249,0],"end":[4253,1]},"visibility":{"restricted":{"parent":"0:124:1849","path":"::builder::arg"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2285:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3195:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3195:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:304:600"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:7736:6523-0:3783:2169":{"id":"a:2:7736:6523-0:3783:2169","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7736:6523","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValuesParser","id":"0:3783:2169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:93:2018":{"id":"0:93:2018","crate_id":0,"name":"from_arg_matches_mut","span":{"filename":"src/derive.rs","begin":[436,4],"end":[438,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["matches",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4112:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48278:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:12:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:77:2023":{"id":"0:77:2023","crate_id":0,"name":"try_parse","span":{"filename":"src/derive.rs","begin":[402,4],"end":[404,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48278:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:12:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:734:227":{"id":"0:734:227","crate_id":0,"name":"Target","span":{"filename":"src/builder/os_str.rs","begin":[155,4],"end":[155,34]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"OsStr","id":"1:2029:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"b:2:3321-0:3791:2170":{"id":"b:2:3321-0:3791:2170","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3319:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:3791:2170","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:3323:1440"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1218":{"id":"0:1218","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1407,0],"end":[1411,1]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"std::convert::TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2564:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:3791:2170","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:1220:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:841:655":{"id":"0:841:655","crate_id":0,"name":"fmt","span":{"filename":"src/builder/range.rs","begin":[174,4],"end":[181,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"std::fmt::Formatter","id":"2:8556:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"std::fmt::Result","id":"2:8545:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2241-0:3768:2163":{"id":"b:2:2241-0:3768:2163","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2235:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EnumValueParser","id":"0:3768:2163","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"items":["2:2243:26835"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:2754":{"id":"0:2754","crate_id":0,"name":null,"span":{"filename":"src/util/id.rs","begin":[140,0],"end":[145,1]},"visibility":{"restricted":{"parent":"0:2715:1860","path":"::util::id"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2285:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2755:600"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2513-0:3852:2166":{"id":"b:2:2513-0:3852:2166","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"NonEmptyStringValueParser","id":"0:3852:2166","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2516:2263"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4282":{"id":"0:4282","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/value_source.rs","begin":[2,9],"end":[2,14]},"visibility":{"restricted":{"parent":"0:2069:6527","path":"::parser::matches::value_source"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8596:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4275:6462","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4283:655"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:305":{"id":"0:305","crate_id":0,"name":null,"span":{"filename":"src/builder/arg.rs","begin":[4255,0],"end":[4259,1]},"visibility":{"restricted":{"parent":"0:124:1849","path":"::builder::arg"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["gt","ge","le","lt"],"trait":{"name":"PartialOrd","id":"2:2327:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3195:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3195:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:306:1003"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:457:1836":{"id":"0:457:1836","crate_id":0,"name":"author","span":{"filename":"src/builder/command.rs","begin":[1471,4],"end":[1474,5]},"visibility":"public","docs":"Sets the author(s) for the help message.\n\n**Pro-tip:** Use `clap`s convenience macro [`crate_authors!`] to\nautomatically set your application's author(s) to the same thing as your\ncrate at compile time.\n\n**NOTE:** A custom [`help_template`][Command::help_template] is needed for author to show\nup.\n\n# Examples\n\n```no_run\n# use clap::Command;\nCommand::new(\"myprog\")\n     .author(\"Me, me@mymain.com\")\n# ;\n```","links":{"Command::help_template":"0:468:4574"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["author",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl IntoResettable<Str>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2662:217-0:3248:2155":{"id":"a:2:2662:217-0:3248:2155","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgPredicate","id":"0:3248:2155","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3742":{"id":"0:3742","crate_id":0,"name":null,"span":{"filename":"src/builder/value_hint.rs","begin":[27,37],"end":[27,41]},"visibility":{"restricted":{"parent":"0:1042:2150","path":"::builder::value_hint"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2674:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:3704:1651","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:945:310":{"id":"0:945:310","crate_id":0,"name":"as_ref","span":{"filename":"src/builder/str.rs","begin":[143,4],"end":[145,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"std::path::Path","id":"1:5506:187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1149":{"id":"0:1149","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[888,0],"end":[892,1]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2564:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StringValueParser","id":"0:3749:2172","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1150:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:2728":{"id":"0:2728","crate_id":0,"name":null,"span":{"filename":"src/util/id.rs","begin":[42,0],"end":[46,1]},"visibility":{"restricted":{"parent":"0:2715:1860","path":"::util::id"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2729:673"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1590:5774":{"id":"0:1590:5774","crate_id":0,"name":"with_cmd","span":{"filename":"src/error/mod.rs","begin":[144,4],"end":[148,5]},"visibility":"public","docs":"Apply [`Command`]'s formatting to the error\n\nGenerally, this is used with [`Error::new`]","links":{"`Command`":"0:3505:1650","`Error::new`":"0:1589:915"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["cmd",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Command","id":"0:3505:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:880":{"id":"0:880","crate_id":0,"name":null,"span":{"filename":"src/builder/resettable.rs","begin":[141,0],"end":[145,1]},"visibility":{"restricted":{"parent":"0:844:2148","path":"::builder::resettable"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Resettable","id":"0:3603:2158","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:882:2452"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:205:2393":{"id":"0:205:2393","crate_id":0,"name":"long_help","span":{"filename":"src/builder/arg.rs","begin":[2105,4],"end":[2108,5]},"visibility":"public","docs":"Sets the description of the argument for long help (`--help`).\n\nTypically this a more detailed (multi-line) message\nthat describes the arg.\n\nIf [`Arg::help`] is not specified, this message will be displayed for `-h`.\n\n**NOTE:** Only [`Arg::help`] is used in completion script generation in order to be concise\n\n# Examples\n\nAny valid UTF-8 is allowed in the help text. The one exception is when one wishes to\ninclude a newline in the help text and have the following text be properly aligned with all\nthe other help text.\n\nSetting `help` displays a short message to the side of the argument when the user passes\n`-h` or `--help` (by default).\n\n ```\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .long(\"config\")\n        .long_help(\n\"The config file used by the myprog must be in JSON format\nwith only valid keys and may not contain other nonsense\nthat cannot be read by this program. Obviously I'm going on\nand on, so I'll stop now.\"))\n    .get_matches_from(vec![\n        \"prog\", \"--help\"\n    ]);\n```\n\nThe above example displays\n\n```text\nprog\n\nUsage: prog [OPTIONS]\n\nOptions:\n        --config\n            The config file used by the myprog must be in JSON format\n            with only valid keys and may not contain other nonsense\n            that cannot be read by this program. Obviously I'm going on\n            and on, so I'll stop now.\n\n    -h, --help\n            Print help information\n\n    -V, --version\n            Print version information\n```\n[`Arg::help`]: Arg::help()","links":{"Arg::help()":"0:204:1563"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["h",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl IntoResettable<StyledStr>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:499:3188":{"id":"0:499:3188","crate_id":0,"name":"display_order","span":{"filename":"src/builder/command.rs","begin":[2649,4],"end":[2652,5]},"visibility":"public","docs":"Set the placement of this subcommand within the help.\n\nSubcommands with a lower value will be displayed first in the help message.  Subcommands\nwith duplicate display orders will be displayed in alphabetical order.\n\nThis is helpful when one would like to emphasize frequently used subcommands, or prioritize\nthose towards the top of the list.\n\n**NOTE:** The default is 999 for all subcommands.\n\n# Examples\n\n ```\n# use clap::{Command, };\nlet m = Command::new(\"cust-ord\")\n    .subcommand(Command::new(\"alpha\") // typically subcommands are grouped\n                                               // alphabetically by name. Subcommands\n                                               // without a display_order have a value of\n                                               // 999 and are displayed alphabetically with\n                                               // all other 999 subcommands\n        .about(\"Some help and text\"))\n    .subcommand(Command::new(\"beta\")\n        .display_order(1)   // In order to force this subcommand to appear *first*\n                            // all we have to do is give it a value lower than 999.\n                            // Any other subcommands with a value of 1 will be displayed\n                            // alphabetically with this one...then 2 values, then 3, etc.\n        .about(\"I should be first!\"))\n    .get_matches_from(vec![\n        \"cust-ord\", \"--help\"\n    ]);\n```\n\nThe above example displays the following help message\n\n```text\ncust-ord\n\nUsage: cust-ord [OPTIONS]\n\nCommands:\n    beta    I should be first!\n    alpha   Some help and text\n\nOptions:\n    -h, --help       Print help\n    -V, --version    Print version\n```","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["ord",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl IntoResettable<usize>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2676:225-0:4009:3985":{"id":"a:2:2676:225-0:4009:3985","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4009:3985","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:2662:217-0:3978:6082":{"id":"a:2:2662:217-0:3978:6082","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextValue","id":"0:3978:6082","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2517-0:3791:2170":{"id":"b:2:2517-0:3791:2170","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:3791:2170","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2519:673"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:2745:5354":{"id":"0:2745:5354","crate_id":0,"name":"borrow","span":{"filename":"src/util/id.rs","begin":[109,4],"end":[111,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3576":{"id":"0:3576","crate_id":0,"name":null,"span":{"filename":"src/builder/possible_value.rs","begin":[34,9],"end":[34,14]},"visibility":{"restricted":{"parent":"0:780:2146","path":"::builder::possible_value"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8596:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:3571:1966","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3577:655"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:467:4533":{"id":"0:467:4533","crate_id":0,"name":"override_help","span":{"filename":"src/builder/command.rs","begin":[1732,4],"end":[1735,5]},"visibility":"public","docs":"Overrides the `clap` generated help message (both `-h` and `--help`).\n\nThis should only be used when the auto-generated message does not suffice.\n\n**NOTE:** This **only** replaces the help message for the current\ncommand, meaning if you are using subcommands, those help messages will\nstill be auto-generated unless you specify a [`Command::override_help`] for\nthem as well.\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg};\nCommand::new(\"myapp\")\n    .override_help(\"myapp v1.0\\n\\\n           Does awesome things\\n\\\n           (C) me@mail.com\\n\\n\\\n\n           Usage: myapp <opts> <command>\\n\\n\\\n\n           Options:\\n\\\n           -h, --help       Display this message\\n\\\n           -V, --version    Display version info\\n\\\n           -s <stuff>       Do something with stuff\\n\\\n           -v               Be verbose\\n\\n\\\n\n           Commands:\\n\\\n           help             Print this message\\n\\\n           work             Do some work\")\n# ;\n```","links":{"`Command::override_help`":"0:467:4533"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["help",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl IntoResettable<StyledStr>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11441:7855":{"id":"2:11441:7855","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:50096:7985","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1534":{"id":"0:1534","crate_id":0,"name":null,"span":{"filename":"src/error/context.rs","begin":[42,0],"end":[65,1]},"visibility":{"restricted":{"parent":"0:1533:479","path":"::error::context"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:3929:6081","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1535:311"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3628":{"id":"0:3628","crate_id":0,"name":null,"span":{"filename":"src/builder/resettable.rs","begin":[31,44],"end":[31,54]},"visibility":{"restricted":{"parent":"0:844:2148","path":"::builder::resettable"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::cmp::PartialOrd","id":"2:2327:186","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["gt","ge","le","lt"],"trait":{"name":"PartialOrd","id":"2:2327:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Resettable","id":"0:3603:2158","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Resettable","id":"0:3603:2158","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:3630:1003"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11453:29187":{"id":"2:11453:29187","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"2:11116:8056","prim@char":"1:12300:408"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11121:8050","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11121:8050","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11136:8051","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:940":{"id":"0:940","crate_id":0,"name":null,"span":{"filename":"src/builder/str.rs","begin":[127,0],"end":[132,1]},"visibility":{"restricted":{"parent":"0:912:1352","path":"::builder::str"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"2:2481:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:941:310"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:65:2105":{"id":"0:65:2105","crate_id":0,"name":"augment_subcommands_for_update","span":{"filename":"src/derive.rs","begin":[340,4],"end":[340,63]},"visibility":"default","docs":"Append to [`Command`] so it can update `self`.\n\nThis is used to implement `#[command(flatten)]`\n\nSee also [`CommandFactory`].","links":{"`CommandFactory`":"0:51:1665","`Command`":"0:3505:1650"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["cmd",{"kind":"resolved_path","inner":{"name":"Command","id":"0:3505:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Command","id":"0:3505:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:164:2577":{"id":"0:164:2577","crate_id":0,"name":"trailing_var_arg","span":{"filename":"src/builder/arg.rs","begin":[519,4],"end":[525,5]},"visibility":"public","docs":"This is a \"VarArg\" and everything that follows should be captured by it, as if the user had\nused a `--`.\n\n**NOTE:** To start the trailing \"VarArg\" on unknown flags (and not just a positional\nvalue), set [`allow_hyphen_values`][Arg::allow_hyphen_values].  Either way, users still\nhave the option to explicitly escape ambiguous arguments with `--`.\n\n**NOTE:** [`Arg::value_delimiter`] still applies if set.\n\n**NOTE:** Setting this requires [`Arg::num_args(..)`].\n\n# Examples\n\n```rust\n# use clap::{Command, arg};\nlet m = Command::new(\"myprog\")\n    .arg(arg!(<cmd> ... \"commands to run\").trailing_var_arg(true))\n    .get_matches_from(vec![\"myprog\", \"arg1\", \"-r\", \"val1\"]);\n\nlet trail: Vec<_> = m.get_many::<String>(\"cmd\").unwrap().collect();\nassert_eq!(trail, [\"arg1\", \"-r\", \"val1\"]);\n```\n[`Arg::num_args(..)`]: crate::Arg::num_args()","links":{"crate::Arg::num_args()":"0:178:1872","`Arg::value_delimiter`":"0:189:2942","Arg::allow_hyphen_values":"0:185:2910"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:103:2105":{"id":"0:103:2105","crate_id":0,"name":"augment_subcommands_for_update","span":{"filename":"src/derive.rs","begin":[460,4],"end":[462,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["cmd",{"kind":"resolved_path","inner":{"name":"Command","id":"0:3505:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Command","id":"0:3505:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:949:600":{"id":"0:949:600","crate_id":0,"name":"eq","span":{"filename":"src/builder/str.rs","begin":[157,4],"end":[159,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3836":{"id":"0:3836","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1711,9],"end":[1711,13]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2674:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FalseyValueParser","id":"0:3835:2164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:461:4027":{"id":"0:461:4027","crate_id":0,"name":"after_long_help","span":{"filename":"src/builder/command.rs","begin":[1563,4],"end":[1566,5]},"visibility":"public","docs":"Free-form help text for after auto-generated long help (`--help`).\n\nThis is often used to describe how to use the arguments, caveats to be noted, or license\nand contact information.\n\nIf [`Command::after_help`] is not specified, this message will be displayed for `-h`.\n\n# Examples\n\n```no_run\n# use clap::Command;\nCommand::new(\"myprog\")\n    .after_long_help(\"Does really amazing things to great people... but be careful with -R, \\\n                     like, for real, be careful with this!\")\n# ;\n```","links":{"`Command::after_help`":"0:460:4026"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["help",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl IntoResettable<StyledStr>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1241:915":{"id":"0:1241:915","crate_id":0,"name":"new","span":{"filename":"src/builder/value_parser.rs","begin":[1618,4],"end":[1620,5]},"visibility":"public","docs":"Implementation for [`ValueParser::bool`]","links":{"`ValueParser::bool`":"0:1072:366"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2523-0:3248:2155":{"id":"b:2:2523-0:3248:2155","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2493:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgPredicate","id":"0:3248:2155","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2526:127","2:2527:1427"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:7736:6523-0:1549:6080":{"id":"a:2:7736:6523-0:1549:6080","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7736:6523","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"KindFormatter","id":"0:1549:6080","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2520-0:3603:2158":{"id":"b:2:2520-0:3603:2158","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"never"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Resettable","id":"0:3603:2158","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2522:673"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2238-0:3842:2162":{"id":"b:2:2238-0:3842:2162","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2232:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BoolishValueParser","id":"0:3842:2162","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2240:5354"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:100":{"id":"0:100","crate_id":0,"name":null,"span":{"filename":"src/derive.rs","begin":[456,0],"end":[466,1]},"visibility":{"restricted":{"parent":"0:29:544","path":"::derive"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Subcommand","id":"0:63:1668","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Subcommand","id":"0:63:1668","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:2137","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:102:2104","0:103:2105","0:104:2107"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1144:915":{"id":"0:1144:915","crate_id":0,"name":"new","span":{"filename":"src/builder/value_parser.rs","begin":[855,4],"end":[857,5]},"visibility":"public","docs":"Implementation for [`ValueParser::string`]","links":{"`ValueParser::string`":"0:1073:1842"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:7046-0:4254:6461":{"id":"b:2:7046-0:4254:6461","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:7156:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:7042:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:4254:6461","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:7048:2029","2:7049:6930","2:7050:762"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"0:610:4170":{"id":"0:610:4170","crate_id":0,"name":"build","span":{"filename":"src/builder/command.rs","begin":[3816,4],"end":[3819,5]},"visibility":"public","docs":"Prepare for introspecting on all included [`Command`]s\n\nCall this on the top-level [`Command`] when done building and before reading state for\ncases like completions, custom help output, etc.","links":{"`Command`":"0:3505:1650"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1575":{"id":"0:1575","crate_id":0,"name":null,"span":{"filename":"src/error/mod.rs","begin":[40,0],"end":[40,30]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"error-context\")]"],"deprecation":null,"kind":"import","inner":{"source":"context::ContextValue","name":"ContextValue","id":"0:3978:6082","glob":false}},"0:251:3556":{"id":"0:251:3556","crate_id":0,"name":"get_visible_aliases","span":{"filename":"src/builder/arg.rs","begin":[3785,4],"end":[3796,5]},"visibility":"public","docs":"Get visible aliases for this argument, if any","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:6400:240","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:324:3604":{"id":"0:324:3604","crate_id":0,"name":"is_multiple","span":{"filename":"src/builder/arg_group.rs","begin":[273,4],"end":[275,5]},"visibility":"public","docs":"Return true if the group allows more than one of the arguments\nin this group to be used. (Default: `false`)\n\n# Example\n\n```rust\n# use clap::{ArgGroup};\nlet mut group = ArgGroup::new(\"myprog\")\n    .args([\"f\", \"c\"])\n    .multiple(true);\n\nassert!(group.is_multiple());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:465:4022":{"id":"0:465:4022","crate_id":0,"name":"long_version","span":{"filename":"src/builder/command.rs","begin":[1652,4],"end":[1655,5]},"visibility":"public","docs":"Sets the version for the long version (`--version`) and help messages.\n\nIf [`Command::version`] is not specified, this message will be displayed for `-V`.\n\n**Pro-tip:** Use `clap`s convenience macro [`crate_version!`] to\nautomatically set your application's version to the same thing as your\ncrate at compile time.\n\n# Examples\n\n```no_run\n# use clap::Command;\nCommand::new(\"myprog\")\n    .long_version(\n\"v0.1.24\n commit: abcdef89726d\n revision: 123\n release: 2\n binary: myprog\")\n# ;\n```","links":{"`Command::version`":"0:464:1515"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["ver",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl IntoResettable<Str>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2243:26835":{"id":"2:2243:26835","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:681-0:4142:6457":{"id":"b:5:681-0:4142:6457","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:677:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IdsRef","id":"0:4142:6457","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["5:683:5351","5:684:3662","5:685:8969"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2523-0:3704:1651":{"id":"b:2:2523-0:3704:1651","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2493:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:3704:1651","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2526:127","2:2527:1427"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11450:5959":{"id":"2:11450:5959","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12300:408","self::pattern":"2:11116:8056"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11121:8050","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2517-0:4275:6462":{"id":"b:2:2517-0:4275:6462","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4275:6462","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2519:673"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:415:2033":{"id":"0:415:2033","crate_id":0,"name":"try_get_matches_from","span":{"filename":"src/builder/command.rs","begin":[619,4],"end":[625,5]},"visibility":"public","docs":"Parse the specified arguments, returning a [`clap::Result`] on failure.\n\n**NOTE:** This method WILL NOT exit when `--help` or `--version` (or short versions) are\nused. It will return a [`clap::Error`], where the [`kind`] is a [`ErrorKind::DisplayHelp`]\nor [`ErrorKind::DisplayVersion`] respectively. You must call [`Error::exit`] or\nperform a [`std::process::exit`] yourself.\n\n**NOTE:** The first argument will be parsed as the binary name unless\n[`Command::no_binary_name`] is used.\n\n# Panics\n\nIf contradictory arguments or settings exist.\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg};\nlet arg_vec = vec![\"my_prog\", \"some\", \"args\", \"to\", \"parse\"];\n\nlet matches = Command::new(\"myprog\")\n    // Args and options go here...\n    .try_get_matches_from(arg_vec)\n    .unwrap_or_else(|e| e.exit());\n```\n[`Command::get_matches_from`]: Command::get_matches_from()\n[`Command::try_get_matches`]: Command::try_get_matches()\n[`Error::exit`]: crate::Error::exit()\n[`std::process::exit`]: std::process::exit()\n[`clap::Error`]: crate::Error\n[`Error::exit`]: crate::Error::exit()\n[`kind`]: crate::Error\n[`ErrorKind::DisplayHelp`]: crate::error::ErrorKind::DisplayHelp\n[`ErrorKind::DisplayVersion`]: crate::error::ErrorKind::DisplayVersion\n[`clap::Result`]: Result","links":{"std::process::exit()":"1:5823:2021","Result":"2:48278:207","`Command::no_binary_name`":"0:435:4298","crate::Error":"0:12:127","crate::error::ErrorKind::DisplayHelp":"0:4034:6131","crate::error::ErrorKind::DisplayVersion":"0:4038:6132","crate::Error::exit()":"0:1600:2021"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["itr",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"ClapResult","id":"0:1578:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4112:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7042:149","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsString","id":"1:2026:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:310":{"id":"0:310","crate_id":0,"name":null,"span":{"filename":"src/builder/arg.rs","begin":[4269,0],"end":[4273,1]},"visibility":{"restricted":{"parent":"0:124:1849","path":"::builder::arg"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:8601:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3195:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:311:655"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:67:1669":{"id":"0:67:1669","crate_id":0,"name":"ValueEnum","span":{"filename":"src/derive.rs","begin":[374,0],"end":[395,1]},"visibility":"public","docs":"Parse arguments into enums.\n\nWhen deriving [`Parser`], a field whose type implements `ValueEnum` can have the attribute\n`#[arg(value_enum)]` which will\n- Call [`EnumValueParser`][crate::builder::EnumValueParser]\n- Allowing using the `#[arg(default_value_t)]` attribute without implementing `Display`.\n\nSee the [derive reference](crate::_derive) for attributes and best practices.\n\n**NOTE:** Deriving requires the [`derive` feature flag][crate::_features]\n\n# Example\n\n ```ignore\n#[derive(clap::Parser)]\nstruct Args {\n    #[arg(value_enum)]\n    level: Level,\n}\n\n#[derive(clap::ValueEnum, Clone)]\nenum Level {\n    Debug,\n    Info,\n    Warning,\n    Error,\n}\n```","links":{"crate::builder::EnumValueParser":"0:3768:2163","`Parser`":"0:36:1667"},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:68:2122","0:70:2125","0:73:2130"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:2786"]}},"0:3740:707":{"id":"0:3740:707","crate_id":0,"name":"hash","span":{"filename":"src/builder/value_hint.rs","begin":[27,31],"end":[27,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["state",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"__H"}}}]],"output":{"kind":"tuple","inner":[]},"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:8833:144","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2726:5340-0:4174:6458":{"id":"a:2:2726:5340-0:4174:6458","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2726:5340","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawValues","id":"0:4174:6458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1867":{"id":"0:1867","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1470,0],"end":[1479,1]},"visibility":{"restricted":{"parent":"0:1754:6526","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["flat_map","array_chunks","reduce","try_collect","take_while","any","step_by","advance_by","all","copied","find","size_hint","is_sorted_by_key","product","try_reduce","sum","collect_into","map_while","intersperse","min_by","flatten","le","find_map","__iterator_get_unchecked","zip","map","cmp_by","try_find","position","partition","fold","scan","intersperse_with","enumerate","max_by","eq","partial_cmp_by","last","rposition","gt","partition_in_place","fuse","for_each","partial_cmp","max_by_key","rev","take","eq_by","chain","unzip","is_partitioned","try_for_each","inspect","ge","count","skip","next_chunk","peekable","min","cmp","filter_map","cloned","filter","is_sorted","cycle","try_fold","min_by_key","by_ref","lt","skip_while","nth","collect","max","ne","is_sorted_by"],"trait":{"name":"Iterator","id":"2:7156:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValuesRef","id":"0:4161:6460","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:1870:2029","0:1871:928","0:1872:6919"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:311:655":{"id":"0:311:655","crate_id":0,"name":"fmt","span":{"filename":"src/builder/arg.rs","begin":[4270,4],"end":[4272,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Formatter","id":"2:8556:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8545:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3800":{"id":"0:3800","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1251,22],"end":[1251,27]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"2:8596:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"std::convert::TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8596:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:3791:2170","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:3802:655"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:736":{"id":"0:736","crate_id":0,"name":null,"span":{"filename":"src/builder/os_str.rs","begin":[163,0],"end":[168,1]},"visibility":{"restricted":{"parent":"0:707:2145","path":"::builder::os_str"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"2:2481:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"1:2029:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:737:310"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2241-0:1054:2174":{"id":"b:2:2241-0:1054:2174","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2235:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1054:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2243:26835"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:7735:6524-0:3588:2156":{"id":"a:2:7735:6524-0:3588:2156","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7735:6524","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueRange","id":"0:3588:2156","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:890:2452":{"id":"0:890:2452","crate_id":0,"name":"into_resettable","span":{"filename":"src/builder/resettable.rs","begin":[166,4],"end":[168,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Resettable","id":"0:3603:2158","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:3704:1651","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:681-0:3248:2155":{"id":"b:5:681-0:3248:2155","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:677:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgPredicate","id":"0:3248:2155","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:683:5351","5:684:3662","5:685:8969"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3542":{"id":"0:3542","crate_id":0,"name":null,"span":{"filename":"src/builder/command.rs","begin":[70,9],"end":[70,14]},"visibility":{"restricted":{"parent":"0:346:1834","path":"::builder::command"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8596:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Command","id":"0:3505:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3543:655"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1331:1667":{"id":"0:1331:1667","crate_id":0,"name":"Parser","span":{"filename":"src/builder/value_parser.rs","begin":[2149,4],"end":[2149,44]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:3791:2170","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i16"}}],"bindings":[]}}}}}},"b:2:3321-0:4542:1657":{"id":"b:2:3321-0:4542:1657","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3319:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:4542:1657","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3323:1440"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3321-0:3842:2162":{"id":"b:2:3321-0:3842:2162","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3319:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BoolishValueParser","id":"0:3842:2162","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3323:1440"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3969":{"id":"0:3969","crate_id":0,"name":null,"span":{"filename":"src/error/context.rs","begin":[2,29],"end":[2,38]},"visibility":{"restricted":{"parent":"0:1533:479","path":"::error::context"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2672:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:3929:6081","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3321-0:3835:2164":{"id":"b:2:3321-0:3835:2164","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3319:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FalseyValueParser","id":"0:3835:2164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3323:1440"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:460:4026":{"id":"0:460:4026","crate_id":0,"name":"after_help","span":{"filename":"src/builder/command.rs","begin":[1541,4],"end":[1544,5]},"visibility":"public","docs":"Free-form help text for after auto-generated short help (`-h`).\n\nThis is often used to describe how to use the arguments, caveats to be noted, or license\nand contact information.\n\nIf [`Command::after_long_help`] is not specified, this message will be displayed for `--help`.\n\n# Examples\n\n```no_run\n# use clap::Command;\nCommand::new(\"myprog\")\n    .after_help(\"Does really amazing things for great people... but be careful with -R!\")\n# ;\n```\n","links":{"`Command::after_long_help`":"0:461:4027"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["help",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl IntoResettable<StyledStr>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1240":{"id":"0:1240","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1616,0],"end":[1628,1]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"BoolValueParser","id":"0:3829:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1241:915"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2528-0:3768:2163":{"id":"b:2:2528-0:3768:2163","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EnumValueParser","id":"0:3768:2163","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"items":["2:2531:127","2:2532:1426"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3965":{"id":"0:3965","crate_id":0,"name":null,"span":{"filename":"src/error/context.rs","begin":[2,15],"end":[2,20]},"visibility":{"restricted":{"parent":"0:1533:479","path":"::error::context"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:3929:6081","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3966:412"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3857:655":{"id":"0:3857:655","crate_id":0,"name":"fmt","span":{"filename":"src/builder/value_parser.rs","begin":[1897,22],"end":[1897,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:8556:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8545:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1404:5906":{"id":"0:1404:5906","crate_id":0,"name":"_ValueParserViaValueEnumSealed","span":{"filename":"src/builder/value_parser.rs","begin":[2383,4],"end":[2383,47]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:2517-0:3859:2165":{"id":"b:2:2517-0:3859:2165","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MapValueParser","id":"0:3859:2165","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"P"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["2:2519:673"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3615":{"id":"0:3615","crate_id":0,"name":null,"span":{"filename":"src/builder/resettable.rs","begin":[31,22],"end":[31,27]},"visibility":{"restricted":{"parent":"0:844:2148","path":"::builder::resettable"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"2:8596:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8596:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Resettable","id":"0:3603:2158","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:3617:655"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:7736:6523-0:3842:2162":{"id":"a:2:7736:6523-0:3842:2162","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7736:6523","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BoolishValueParser","id":"0:3842:2162","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3764":{"id":"0:3764","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[939,15],"end":[939,20]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PathBufValueParser","id":"0:3762:2168","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3765:412"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11529:29204":{"id":"2:11529:29204","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:11116:8056","prim@char":"1:12300:408"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11121:8050","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11121:8050","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11136:8051","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1421:5919":{"id":"0:1421:5919","crate_id":0,"name":"_ValueParserViaParseSealed","span":{"filename":"src/builder/value_parser.rs","begin":[2410,4],"end":[2410,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:2734":{"id":"0:2734","crate_id":0,"name":null,"span":{"filename":"src/util/id.rs","begin":[74,0],"end":[78,1]},"visibility":{"restricted":{"parent":"0:2715:1860","path":"::util::id"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2735:673"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2241-0:4091:6463":{"id":"b:2:2241-0:4091:6463","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2235:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4091:6463","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2243:26835"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3739":{"id":"0:3739","crate_id":0,"name":null,"span":{"filename":"src/builder/value_hint.rs","begin":[27,31],"end":[27,35]},"visibility":{"restricted":{"parent":"0:1042:2150","path":"::builder::value_hint"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:8819:140","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:3704:1651","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3740:707"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:596:5173":{"id":"0:596:5173","crate_id":0,"name":"is_multicall_set","span":{"filename":"src/builder/command.rs","begin":[3729,4],"end":[3731,5]},"visibility":"public","docs":"Report whether [`Command::multicall`] is set","links":{"`Command::multicall`":"0:507:5016"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:681-0:4112:1655":{"id":"b:5:681-0:4112:1655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:677:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4112:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:683:5351","5:684:3662","5:685:8969"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1098":{"id":"0:1098","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[501,0],"end":[509,1]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":"Create a [`ValueParser`] with [`PossibleValuesParser`]\n\nSee [`PossibleValuesParser`] for more flexibility in creating the\n[`PossibleValue`][crate::builder::PossibleValue]s.\n\n# Examples\n\n```rust\nlet mut cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"color\")\n            .long(\"color\")\n            .value_parser([\"always\", \"auto\", \"never\"])\n            .default_value(\"auto\")\n    );\n\nlet m = cmd.try_get_matches_from_mut(\n    [\"cmd\", \"--color\", \"never\"]\n).unwrap();\n\nlet color: &String = m.get_one(\"color\")\n    .expect(\"default\");\nassert_eq!(color, \"never\");\n```","links":{"`PossibleValuesParser`":"0:3783:2169","crate::builder::PossibleValue":"0:3571:1966","`ValueParser`":"0:1054:2174"},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"C","kind":{"const":{"type":{"kind":"primitive","inner":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"super::PossibleValue","id":"0:3571:1966","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"array","inner":{"type":{"kind":"generic","inner":"P"},"len":"C"}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1054:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1102:673"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2241-0:3248:2155":{"id":"b:2:2241-0:3248:2155","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2235:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgPredicate","id":"0:3248:2155","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2243:26835"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2238-0:4522:1658":{"id":"b:2:2238-0:4522:1658","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2232:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2240:5354"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:454:894":{"id":"0:454:894","crate_id":0,"name":"name","span":{"filename":"src/builder/command.rs","begin":[1406,4],"end":[1409,5]},"visibility":"public","docs":"(Re)Sets the program's name.\n\nSee [`Command::new`] for more details.\n\n# Examples\n\n```ignore\nlet cmd = clap::command!()\n    .name(\"foo\");\n\n// continued logic goes here, such as `cmd.get_matches()` etc.\n```","links":{"`Command::new`":"0:388:915"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["name",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl Into<Str>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3596:600":{"id":"0:3596:600","crate_id":0,"name":"eq","span":{"filename":"src/builder/range.rs","begin":[2,22],"end":[2,31]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ValueRange","id":"0:3588:2156","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7735:6524-0:1054:2174":{"id":"a:2:7735:6524-0:1054:2174","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7735:6524","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1054:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"0:165:2624":{"id":"0:165:2624","crate_id":0,"name":"last","span":{"filename":"src/builder/arg.rs","begin":[605,4],"end":[611,5]},"visibility":"public","docs":"This arg is the last, or final, positional argument (i.e. has the highest\nindex) and is *only* able to be accessed via the `--` syntax (i.e. `$ prog args --\nlast_arg`).\n\nEven, if no other arguments are left to parse, if the user omits the `--` syntax\nthey will receive an [`UnknownArgument`] error. Setting an argument to `.last(true)` also\nallows one to access this arg early using the `--` syntax. Accessing an arg early, even with\nthe `--` syntax is otherwise not possible.\n\n**NOTE:** This will change the usage string to look like `$ prog [OPTIONS] [-- <ARG>]` if\n`ARG` is marked as `.last(true)`.\n\n**NOTE:** This setting will imply [`crate::Command::dont_collapse_args_in_usage`] because failing\nto set this can make the usage string very confusing.\n\n**NOTE**: This setting only applies to positional arguments, and has no effect on OPTIONS\n\n**NOTE:** Setting this requires [taking values][Arg::num_args]\n\n**CAUTION:** Using this setting *and* having child subcommands is not\nrecommended with the exception of *also* using\n[`crate::Command::args_conflicts_with_subcommands`]\n(or [`crate::Command::subcommand_negates_reqs`] if the argument marked `Last` is also\nmarked [`Arg::required`])\n\n# Examples\n\n```rust\n# use clap::{Arg, ArgAction};\nArg::new(\"args\")\n    .action(ArgAction::Set)\n    .last(true)\n# ;\n```\n\nSetting `last` ensures the arg has the highest [index] of all positional args\nand requires that the `--` syntax be used to access it early.\n\n```rust\n# use clap::{Command, Arg, ArgAction};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"first\"))\n    .arg(Arg::new(\"second\"))\n    .arg(Arg::new(\"third\")\n        .action(ArgAction::Set)\n        .last(true))\n    .try_get_matches_from(vec![\n        \"prog\", \"one\", \"--\", \"three\"\n    ]);\n\nassert!(res.is_ok());\nlet m = res.unwrap();\nassert_eq!(m.get_one::<String>(\"third\").unwrap(), \"three\");\nassert_eq!(m.get_one::<String>(\"second\"), None);\n```\n\nEven if the positional argument marked `Last` is the only argument left to parse,\nfailing to use the `--` syntax results in an error.\n\n```rust\n# use clap::{Command, Arg, error::ErrorKind, ArgAction};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"first\"))\n    .arg(Arg::new(\"second\"))\n    .arg(Arg::new(\"third\")\n        .action(ArgAction::Set)\n        .last(true))\n    .try_get_matches_from(vec![\n        \"prog\", \"one\", \"two\", \"three\"\n    ]);\n\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind(), ErrorKind::UnknownArgument);\n```\n[index]: Arg::index()\n[`UnknownArgument`]: crate::error::ErrorKind::UnknownArgument","links":{"`Arg::required`":"0:166:1870","Arg::num_args":"0:178:1872","`crate::Command::dont_collapse_args_in_usage`":"0:449:4398","Arg::index()":"0:163:747","crate::error::ErrorKind::UnknownArgument":"0:4012:6208","`crate::Command::args_conflicts_with_subcommands`":"0:504:4888","`crate::Command::subcommand_negates_reqs`":"0:506:4931"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2676:225-0:3762:2168":{"id":"a:2:2676:225-0:3762:2168","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PathBufValueParser","id":"0:3762:2168","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:168:2671":{"id":"0:168:2671","crate_id":0,"name":"exclusive","span":{"filename":"src/builder/arg.rs","begin":[773,4],"end":[779,5]},"visibility":"public","docs":"This argument must be passed alone; it conflicts with all other arguments.\n\n# Examples\n\n```rust\n# use clap::Arg;\nArg::new(\"config\")\n    .exclusive(true)\n# ;\n```\n\nSetting an exclusive argument and having any other arguments present at runtime\nis an error.\n\n```rust\n# use clap::{Command, Arg, error::ErrorKind, ArgAction};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"exclusive\")\n        .action(ArgAction::Set)\n        .exclusive(true)\n        .long(\"exclusive\"))\n    .arg(Arg::new(\"debug\")\n        .long(\"debug\"))\n    .arg(Arg::new(\"input\"))\n    .try_get_matches_from(vec![\n        \"prog\", \"--exclusive\", \"file.conf\", \"file.txt\"\n    ]);\n\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind(), ErrorKind::ArgumentConflict);\n```","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:836":{"id":"0:836","crate_id":0,"name":null,"span":{"filename":"src/builder/range.rs","begin":[157,0],"end":[163,1]},"visibility":{"restricted":{"parent":"0:807:2147","path":"::builder::range"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"RangeInclusive","id":"2:46523:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueRange","id":"0:3588:2156","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:837:673"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:107:1648":{"id":"0:107:1648","crate_id":0,"name":"builder","span":{"filename":"src/builder/mod.rs","begin":[1,0],"end":[60,53]},"visibility":"public","docs":"Define [`Command`] line [arguments][`Arg`]","links":{"`Command`":"0:3505:1650","`Arg`":"0:3195:1652"},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1473","0:1474","0:1475","0:1476","0:1477","0:1478","0:1479","0:1480","0:1481","0:1482","0:1483","0:1484","0:1485","0:1488","0:1489","0:1490","0:1491","0:1492","0:1493","0:1494","0:1495","0:1496","0:1497","0:1498","0:1499","0:1500","0:1501","0:1502"],"is_stripped":false}},"0:3968:655":{"id":"0:3968:655","crate_id":0,"name":"fmt","span":{"filename":"src/error/context.rs","begin":[2,22],"end":[2,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:8556:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8545:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11443:29184":{"id":"2:11443:29184","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11442:29183"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:50393:8058","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:406:1662":{"id":"0:406:1662","crate_id":0,"name":"error","span":{"filename":"src/builder/command.rs","begin":[468,4],"end":[470,5]},"visibility":"public","docs":"Custom error message for post-parsing validation\n\n# Examples\n\n```rust\n# use clap::{Command, error::ErrorKind};\nlet mut cmd = Command::new(\"myprog\");\nlet err = cmd.error(ErrorKind::InvalidValue, \"Some failure case\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["kind",{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4009:3985","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["message",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"std::fmt::Display","id":"2:8601:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"resolved_path","inner":{"name":"Error","id":"0:12:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"impl std::fmt::Display","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"std::fmt::Display","id":"2:8601:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11503:5503":{"id":"2:11503:5503","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2513-0:3588:2156":{"id":"b:2:2513-0:3588:2156","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueRange","id":"0:3588:2156","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2516:2263"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:5:681-0:3756:2167":{"id":"b:5:681-0:3756:2167","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:677:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsStringValueParser","id":"0:3756:2167","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:683:5351","5:684:3662","5:685:8969"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1262:915":{"id":"0:1262:915","crate_id":0,"name":"new","span":{"filename":"src/builder/value_parser.rs","begin":[1814,4],"end":[1816,5]},"visibility":"public","docs":"Parse bool-like string values, everything else is `true`","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2238-0:3571:1966":{"id":"b:2:2238-0:3571:1966","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2232:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:3571:1966","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2240:5354"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:207:2412":{"id":"0:207:2412","crate_id":0,"name":"help_heading","span":{"filename":"src/builder/arg.rs","begin":[2175,4],"end":[2178,5]},"visibility":"public","docs":"Override the [current] help section.\n\n[current]: crate::Command::next_help_heading","links":{"crate::Command::next_help_heading":"0:475:4582"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["heading",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl IntoResettable<Str>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:441:4351":{"id":"0:441:4351","crate_id":0,"name":"max_term_width","span":{"filename":"src/builder/command.rs","begin":[1105,4],"end":[1108,5]},"visibility":"public","docs":"Limit the line length for wrapping help when using the current terminal's width.\n\nThis only applies when [`term_width`][Command::term_width] is unset so that the current\nterminal's width will be used.  See [`Command::term_width`] for more details.\n\nUsing `0` will ignore terminal widths and use source formatting (default).\n\n**NOTE:** This setting applies globally and *not* on a per-command basis.\n\n**NOTE:** This requires the [`wrap_help` feature][crate::_features]\n\n# Examples\n\n```no_run\n# use clap::Command;\nCommand::new(\"myprog\")\n    .max_term_width(100)\n# ;\n```","links":{"Command::term_width":"0:440:4345","`Command::term_width`":"0:440:4345"},"attrs":["#[inline]","#[must_use]","#[cfg(any(not(feature = \"unstable-v5\"), feature = \"wrap_help\"))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["w",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:448:4396":{"id":"0:448:4396","crate_id":0,"name":"help_expected","span":{"filename":"src/builder/command.rs","begin":[1292,4],"end":[1298,5]},"visibility":"public","docs":" Panic if help descriptions are omitted.\n\n **NOTE:** When deriving [`Parser`][crate::Parser], you could instead check this at\n compile-time with `#![deny(missing_docs)]`\n\n **NOTE:** This choice is propagated to all child subcommands.\n\n # Examples\n\n ```rust\n # use clap::{Command, Arg};\n Command::new(\"myprog\")\n     .help_expected(true)\n     .arg(\n         Arg::new(\"foo\").help(\"It does foo stuff\")\n         // As required via `help_expected`, a help message was supplied\n      )\n #    .get_matches();\n ```\n\n # Panics\n\n ```rust,no_run\n # use clap::{Command, Arg};\n Command::new(\"myapp\")\n     .help_expected(true)\n     .arg(\n         Arg::new(\"foo\")\n         // Someone forgot to put .about(\"...\") here\n         // Since the setting `help_expected` is activated, this will lead to\n         // a panic (if you are in debug mode)\n     )\n #   .get_matches();\n```","links":{"crate::Parser":"0:36:1667"},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4294:1003":{"id":"0:4294:1003","crate_id":0,"name":"partial_cmp","span":{"filename":"src/parser/matches/value_source.rs","begin":[2,44],"end":[2,54]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4275:6462","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::option::Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"$crate::cmp::Ordering","id":"2:38204:180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7736:6523-0:3662:1951":{"id":"a:2:7736:6523-0:3662:1951","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7736:6523","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3970":{"id":"0:3970","crate_id":0,"name":null,"span":{"filename":"src/error/context.rs","begin":[2,29],"end":[2,38]},"visibility":{"restricted":{"parent":"0:1533:479","path":"::error::context"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2285:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:3929:6081","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:3929:6081","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3971:600"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3248:2155":{"id":"0:3248:2155","crate_id":0,"name":"ArgPredicate","span":{"filename":"src/builder/arg_predicate.rs","begin":[8,0],"end":[13,1]},"visibility":"public","docs":"Operations to perform on argument values\n\nThese do not apply to [`ValueSource::DefaultValue`][crate::parser::ValueSource::DefaultValue]","links":{"crate::parser::ValueSource::DefaultValue":"0:4276:6989"},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:3249:2660","0:3251:3955"],"impls":["a:2:7735:6524-0:3248:2155","a:2:2676:225-0:3248:2155","a:2:2662:217-0:3248:2155","a:2:2726:5340-0:3248:2155","a:2:7736:6523-0:3248:2155","b:2:2523-0:3248:2155","b:2:2238-0:3248:2155","b:2:2517-0:3248:2155","b:2:2513-0:3248:2155","b:2:2241-0:3248:2155","b:2:2528-0:3248:2155","b:2:3321-0:3248:2155","b:5:681-0:3248:2155","0:3254","0:3256","0:3258","0:3259","0:3261","0:3262","0:337"]}},"b:5:681-0:3603:2158":{"id":"b:5:681-0:3603:2158","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:677:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Resettable","id":"0:3603:2158","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["5:683:5351","5:684:3662","5:685:8969"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:7736:6523-0:4142:6457":{"id":"a:2:7736:6523-0:4142:6457","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7736:6523","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IdsRef","id":"0:4142:6457","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:2748":{"id":"0:2748","crate_id":0,"name":null,"span":{"filename":"src/util/id.rs","begin":[120,0],"end":[125,1]},"visibility":{"restricted":{"parent":"0:2715:1860","path":"::util::id"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2285:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"primitive","inner":"str"},"items":["0:2749:600"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2241-0:2796:1649":{"id":"b:2:2241-0:2796:1649","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2235:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgAction","id":"0:2796:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2243:26835"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:703:655":{"id":"0:703:655","crate_id":0,"name":"fmt","span":{"filename":"src/builder/command.rs","begin":[4682,4],"end":[4684,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:8556:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8545:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1329:2151":{"id":"0:1329:2151","crate_id":0,"name":"value_parser","span":{"filename":"src/builder/value_parser.rs","begin":[2142,4],"end":[2146,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"qualified_path","inner":{"name":"Parser","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:1306:2175","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7736:6523-0:4275:6462":{"id":"a:2:7736:6523-0:4275:6462","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7736:6523","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4275:6462","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1824:6699":{"id":"0:1824:6699","crate_id":0,"name":"try_remove_occurrences","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1194,4],"end":[1209,5]},"visibility":"public","docs":"Non-panicking version of [`ArgMatches::remove_occurrences`]","links":{"`ArgMatches::remove_occurrences`":"0:1789:6697"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48278:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Occurrences","id":"0:4194:6698","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4091:6463","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Any","id":"2:3319:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2726:5340-0:3978:6082":{"id":"a:2:2726:5340-0:3978:6082","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2726:5340","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextValue","id":"0:3978:6082","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:748":{"id":"0:748","crate_id":0,"name":null,"span":{"filename":"src/builder/os_str.rs","begin":[203,0],"end":[208,1]},"visibility":{"restricted":{"parent":"0:707:2145","path":"::builder::os_str"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2285:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"items":["0:749:600"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2517-0:3810:2171":{"id":"b:2:2517-0:3810:2171","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangedU64ValueParser","id":"0:3810:2171","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2519:673"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3648":{"id":"0:3648","crate_id":0,"name":null,"span":{"filename":"src/builder/str.rs","begin":[5,29],"end":[5,38]},"visibility":{"restricted":{"parent":"0:912:1352","path":"::builder::str"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2285:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3649:600"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1822:6691":{"id":"0:1822:6691","crate_id":0,"name":"try_remove_many","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1175,4],"end":[1191,5]},"visibility":"public","docs":"Non-panicking version of [`ArgMatches::remove_many`]","links":{"`ArgMatches::remove_many`":"0:1787:6690"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48278:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Values","id":"0:4151:6459","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4091:6463","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Any","id":"2:3319:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2733:673":{"id":"0:2733:673","crate_id":0,"name":"from","span":{"filename":"src/util/id.rs","begin":[69,4],"end":[71,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"borrowed_ref","inner":{"lifetime":"'static","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:235:3499":{"id":"0:235:3499","crate_id":0,"name":"conflicts_with_all","span":{"filename":"src/builder/arg.rs","begin":[3612,4],"end":[3615,5]},"visibility":"public","docs":"This argument is mutually exclusive with the specified arguments.\n\nSee [`Arg::conflicts_with`].\n\n**NOTE:** Conflicting rules take precedence over being required by default. Conflict rules\nonly need to be set for one of the two arguments, they do not need to be set for each.\n\n**NOTE:** Defining a conflict is two-way, but does *not* need to defined for both arguments\n(i.e. if A conflicts with B, defining A.conflicts_with(B) is sufficient. You do not need\nneed to also do B.conflicts_with(A))\n\n**NOTE:** [`Arg::exclusive(true)`] allows specifying an argument which conflicts with every other argument.\n\n# Examples\n\n```rust\n# use clap::Arg;\nArg::new(\"config\")\n    .conflicts_with_all([\"debug\", \"input\"])\n# ;\n```\n\nSetting conflicting argument, and having any of the arguments present at runtime with a\nconflicting argument is an error.\n\n```rust\n# use clap::{Command, Arg, error::ErrorKind, ArgAction};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .action(ArgAction::Set)\n        .conflicts_with_all([\"debug\", \"input\"])\n        .long(\"config\"))\n    .arg(Arg::new(\"debug\")\n        .long(\"debug\"))\n    .arg(Arg::new(\"input\"))\n    .try_get_matches_from(vec![\n        \"prog\", \"--config\", \"file.conf\", \"file.txt\"\n    ]);\n\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind(), ErrorKind::ArgumentConflict);\n```\n[`Arg::conflicts_with`]: Arg::conflicts_with()\n[`Arg::exclusive(true)`]: Arg::exclusive()","links":{"Arg::conflicts_with()":"0:234:3488","Arg::exclusive()":"0:168:2671"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["names",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7042:149","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}}}}]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl Into<Id>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}},{"name":"impl IntoIterator<Item = impl Into<Id>>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7042:149","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:51:1665":{"id":"0:51:1665","crate_id":0,"name":"CommandFactory","span":{"filename":"src/derive.rs","begin":[162,0],"end":[171,1]},"visibility":"public","docs":"Create a [`Command`] relevant for a user-defined container.\n\nDerived as part of [`Parser`].","links":{"`Parser`":"0:36:1667","`Command`":"0:3505:1650"},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:52:1834","0:53:2036"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:84"]}},"0:1184:59":{"id":"0:1184:59","crate_id":0,"name":"default","span":{"filename":"src/builder/value_parser.rs","begin":[1096,4],"end":[1098,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:333":{"id":"0:333","crate_id":0,"name":null,"span":{"filename":"src/builder/arg_group.rs","begin":[512,0],"end":[516,1]},"visibility":{"restricted":{"parent":"0:314:2142","path":"::builder::arg_group"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3229:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3229:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:334:673"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2513-0:1553:6083":{"id":"b:2:2513-0:1553:6083","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RichFormatter","id":"0:1553:6083","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2516:2263"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:328:3488":{"id":"0:328:3488","crate_id":0,"name":"conflicts_with","span":{"filename":"src/builder/arg_group.rs","begin":[443,4],"end":[450,5]},"visibility":"public","docs":"Specify an argument or group that must **not** be present when this group is.\n\nExclusion (aka conflict) rules function just like [argument exclusion rules], you can name\nother arguments or groups that must *not* be present when one of the arguments from this\ngroup are used.\n\n**NOTE:** The name provided may be an argument, or group name\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ArgGroup, error::ErrorKind, ArgAction};\nlet result = Command::new(\"myprog\")\n    .arg(Arg::new(\"flag\")\n        .short('f')\n        .action(ArgAction::SetTrue))\n    .arg(Arg::new(\"color\")\n        .short('c')\n        .action(ArgAction::SetTrue))\n    .arg(Arg::new(\"debug\")\n        .short('d')\n        .action(ArgAction::SetTrue))\n    .group(ArgGroup::new(\"req_flags\")\n        .args([\"flag\", \"color\"])\n        .conflicts_with(\"debug\"))\n    .try_get_matches_from(vec![\"myprog\", \"-c\", \"-d\"]);\n// because we used an arg from the group, and the group conflicts with \"-d\", it's an error\nassert!(result.is_err());\nlet err = result.unwrap_err();\nassert_eq!(err.kind(), ErrorKind::ArgumentConflict);\n```\n[argument exclusion rules]: crate::Arg::conflicts_with()","links":{"crate::Arg::conflicts_with()":"0:234:3488"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["id",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl IntoResettable<Id>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:681-0:3810:2171":{"id":"b:5:681-0:3810:2171","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:677:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangedU64ValueParser","id":"0:3810:2171","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["5:683:5351","5:684:3662","5:685:8969"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2726:5340-0:3638:2154":{"id":"a:2:2726:5340-0:3638:2154","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2726:5340","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:2726:5340-0:3547:181":{"id":"a:2:2726:5340-0:3547:181","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2726:5340","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3934:6165":{"id":"0:3934:6165","crate_id":0,"name":"PriorArg","span":{"filename":"src/error/context.rs","begin":[11,4],"end":[11,12]},"visibility":"default","docs":"Existing arguments","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"a:2:7736:6523-0:3638:2154":{"id":"a:2:7736:6523-0:3638:2154","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7736:6523","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3987:6163":{"id":"0:3987:6163","crate_id":0,"name":"Strings","span":{"filename":"src/error/context.rs","begin":[85,4],"end":[85,24]},"visibility":"default","docs":"Many values","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":{"tuple":["0:3989:1553"]},"discriminant":null}},"0:452:4427":{"id":"0:452:4427","crate_id":0,"name":"infer_subcommands","span":{"filename":"src/builder/command.rs","begin":[1380,4],"end":[1386,5]},"visibility":"public","docs":"Allow partial matches of [subcommand] names and their [aliases].\n\nFor example, to match a subcommand named `test`, one could use `t`, `te`, `tes`, and\n`test`.\n\n**NOTE:** The match *must not* be ambiguous at all in order to succeed. i.e. to match `te`\nto `test` there could not also be a subcommand or alias `temp` because both start with `te`\n\n**CAUTION:** This setting can interfere with [positional/free arguments], take care when\ndesigning CLIs which allow inferred subcommands and have potential positional/free\narguments whose values could start with the same characters as subcommands. If this is the\ncase, it's recommended to use settings such as [`Command::args_conflicts_with_subcommands`] in\nconjunction with this setting.\n\n**NOTE:** This choice is propagated to all child subcommands.\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n    .infer_subcommands(true)\n    .subcommand(Command::new(\"test\"))\n    .get_matches_from(vec![\n        \"prog\", \"te\"\n    ]);\nassert_eq!(m.subcommand_name(), Some(\"test\"));\n```\n\n[subcommand]: crate::Command::subcommand()\n[positional/free arguments]: crate::Arg::index()\n[aliases]: crate::Command::aliases()","links":{"`Command::args_conflicts_with_subcommands`":"0:504:4888","crate::Arg::index()":"0:163:747","crate::Command::subcommand()":"0:402:4142","crate::Command::aliases()":"0:488:2402"},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7736:6523-0:3829:2161":{"id":"a:2:7736:6523-0:3829:2161","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7736:6523","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BoolValueParser","id":"0:3829:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:528:5066":{"id":"0:528:5066","crate_id":0,"name":"get_visible_short_flag_aliases","span":{"filename":"src/builder/command.rs","begin":[3311,4],"end":[3316,5]},"visibility":"public","docs":"Iterate through the *visible* short aliases for this subcommand.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:7156:156","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"primitive","inner":"char"}}}}]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'_"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3644":{"id":"0:3644","crate_id":0,"name":null,"span":{"filename":"src/builder/str.rs","begin":[5,25],"end":[5,27]},"visibility":{"restricted":{"parent":"0:912:1352","path":"::builder::str"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2673:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:486:4748":{"id":"0:486:4748","crate_id":0,"name":"short_flag_alias","span":{"filename":"src/builder/command.rs","begin":[2293,4],"end":[2301,5]},"visibility":"public","docs":"Add an alias, which functions as  \"hidden\" short flag subcommand\n\nThis will automatically dispatch as if this subcommand was used. This is more efficient,\nand easier than creating multiple hidden subcommands as one only needs to check for the\nexistence of this command, and not all variants.\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg, };\nlet m = Command::new(\"myprog\")\n            .subcommand(Command::new(\"test\").short_flag('t')\n                .short_flag_alias('d'))\n            .get_matches_from(vec![\"myprog\", \"-d\"]);\nassert_eq!(m.subcommand_name(), Some(\"test\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["name",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"char"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl IntoResettable<char>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"char"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1244:5472":{"id":"0:1244:5472","crate_id":0,"name":"Value","span":{"filename":"src/builder/value_parser.rs","begin":[1631,4],"end":[1631,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"primitive","inner":"bool"}}},"0:3989:1553":{"id":"0:3989:1553","crate_id":0,"name":"0","span":{"filename":"src/error/context.rs","begin":[85,12],"end":[85,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:6400:240","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:6967:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},"2:11444:10769":{"id":"2:11444:10769","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:50364:7988","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2528-0:3829:2161":{"id":"b:2:2528-0:3829:2161","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BoolValueParser","id":"0:3829:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2531:127","2:2532:1426"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1410:5911":{"id":"0:1410:5911","crate_id":0,"name":"_ValueParserViaFromOsStrSealed","span":{"filename":"src/builder/value_parser.rs","begin":[2392,4],"end":[2392,47]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3321-0:3749:2172":{"id":"b:2:3321-0:3749:2172","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3319:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StringValueParser","id":"0:3749:2172","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3323:1440"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:934:655":{"id":"0:934:655","crate_id":0,"name":"fmt","span":{"filename":"src/builder/str.rs","begin":[106,4],"end":[108,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"std::fmt::Formatter","id":"2:8556:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"std::fmt::Result","id":"2:8545:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:423:4244":{"id":"0:423:4244","crate_id":0,"name":"print_long_help","span":{"filename":"src/builder/command.rs","begin":[750,4],"end":[760,5]},"visibility":"public","docs":"Prints the long help message (`--help`) to [`io::stdout()`].\n\nSee also [`Command::print_help`].\n\n# Examples\n\n```rust\n# use clap::Command;\nlet mut cmd = Command::new(\"myprog\");\ncmd.print_long_help();\n```\n[`io::stdout()`]: std::io::stdout()\n[`BufWriter`]: std::io::BufWriter\n[`-h` (short)]: Arg::help()\n[`--help` (long)]: Arg::long_help()","links":{"`Command::print_help`":"0:422:4234","std::io::stdout()":"1:3236:7559"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2903:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3321-0:1581:127":{"id":"b:2:3321-0:1581:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3319:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1581:127","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["2:3323:1440"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:514:5042":{"id":"0:514:5042","crate_id":0,"name":"set_bin_name","span":{"filename":"src/builder/command.rs","begin":[3230,4],"end":[3232,5]},"visibility":"public","docs":"Set binary name. Uses `&mut self` instead of `self`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["name",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:6967:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"impl Into<String>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:6967:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1845:2029":{"id":"0:1845:2029","crate_id":0,"name":"Item","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1369,4],"end":[1369,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"0:397:4098":{"id":"0:397:4098","crate_id":0,"name":"mut_subcommand","span":{"filename":"src/builder/command.rs","begin":[280,4],"end":[295,5]},"visibility":"public","docs":"Allows one to mutate a [`Command`] after it's been added as a subcommand.\n\nThis can be useful for modifying auto-generated arguments of nested subcommands with\n[`Command::mut_arg`].\n\n# Panics\n\nIf the subcommand is undefined\n\n# Examples\n\n```rust\n# use clap::Command;\n\nlet mut cmd = Command::new(\"foo\")\n        .subcommand(Command::new(\"bar\"))\n        .mut_subcommand(\"bar\", |subcmd| subcmd.disable_help_flag(true));\n\nlet res = cmd.try_get_matches_from_mut(vec![\"foo\", \"bar\", \"--help\"]);\n\n// Since we disabled the help flag on the \"bar\" subcommand, this should err.\n\nassert!(res.is_err());\n\nlet res = cmd.try_get_matches_from_mut(vec![\"foo\", \"bar\"]);\nassert!(res.is_ok());\n```","links":{"`Command::mut_arg`":"0:394:4085","`Command`":"0:3505:1650"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["name",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2481:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"impl AsRef<str>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2481:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2938:4086","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"Self"}],"output":{"kind":"generic","inner":"Self"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2726:5340-0:3603:2158":{"id":"a:2:2726:5340-0:3603:2158","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:2726:5340","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2726:5340","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Resettable","id":"0:3603:2158","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:307":{"id":"0:307","crate_id":0,"name":null,"span":{"filename":"src/builder/arg.rs","begin":[4261,0],"end":[4265,1]},"visibility":{"restricted":{"parent":"0:124:1849","path":"::builder::arg"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["min","max","clamp"],"trait":{"name":"Ord","id":"2:2321:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3195:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:308:419"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3733":{"id":"0:3733","crate_id":0,"name":null,"span":{"filename":"src/builder/value_hint.rs","begin":[27,16],"end":[27,25]},"visibility":{"restricted":{"parent":"0:1042:2150","path":"::builder::value_hint"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2672:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:3704:1651","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4526:59":{"id":"0:4526:59","crate_id":0,"name":"default","span":{"filename":"src/util/id.rs","begin":[8,9],"end":[8,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:722:673":{"id":"0:722:673","crate_id":0,"name":"from","span":{"filename":"src/builder/os_str.rs","begin":[118,4],"end":[120,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"borrowed_ref","inner":{"lifetime":"'static","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"std::ffi::OsStr","id":"1:2029:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:858":{"id":"0:858","crate_id":0,"name":null,"span":{"filename":"src/builder/resettable.rs","begin":[54,0],"end":[61,1]},"visibility":{"restricted":{"parent":"0:844:2148","path":"::builder::resettable"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Resettable","id":"0:3603:2158","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:860:673"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:323:3822":{"id":"0:323:3822","crate_id":0,"name":"multiple","span":{"filename":"src/builder/arg_group.rs","begin":[255,4],"end":[258,5]},"visibility":"public","docs":"Allows more than one of the [`Arg`]s in this group to be used. (Default: `false`)\n\n# Examples\n\nNotice in this example we use *both* the `-f` and `-c` flags which are both part of the\ngroup\n\n```rust\n# use clap::{Command, Arg, ArgGroup, ArgAction};\nlet m = Command::new(\"myprog\")\n    .arg(Arg::new(\"flag\")\n        .short('f')\n        .action(ArgAction::SetTrue))\n    .arg(Arg::new(\"color\")\n        .short('c')\n        .action(ArgAction::SetTrue))\n    .group(ArgGroup::new(\"req_flags\")\n        .args([\"flag\", \"color\"])\n        .multiple(true))\n    .get_matches_from(vec![\"myprog\", \"-f\", \"-c\"]);\n// maybe we don't know which of the two flags was used...\nassert!(m.contains_id(\"req_flags\"));\n```\nIn this next example, we show the default behavior (i.e. `multiple(false)) which will throw\nan error if more than one of the args in the group was used.\n\n```rust\n# use clap::{Command, Arg, ArgGroup, error::ErrorKind, ArgAction};\nlet result = Command::new(\"myprog\")\n    .arg(Arg::new(\"flag\")\n        .short('f')\n        .action(ArgAction::SetTrue))\n    .arg(Arg::new(\"color\")\n        .short('c')\n        .action(ArgAction::SetTrue))\n    .group(ArgGroup::new(\"req_flags\")\n        .args([\"flag\", \"color\"]))\n    .try_get_matches_from(vec![\"myprog\", \"-f\", \"-c\"]);\n// Because we used both args in the group it's an error\nassert!(result.is_err());\nlet err = result.unwrap_err();\nassert_eq!(err.kind(), ErrorKind::ArgumentConflict);\n```\n\n[`Arg`]: crate::Arg","links":{"crate::Arg":"0:3195:1652"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1473":{"id":"0:1473","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[25,0],"end":[25,23]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::str::Str","name":"Str","id":"0:3638:2154","glob":false}},"0:4147:412":{"id":"0:4147:412","crate_id":0,"name":"clone","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1363,9],"end":[1363,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"IdsRef","id":"0:4142:6457","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:247:3550":{"id":"0:247:3550","crate_id":0,"name":"get_all_short_aliases","span":{"filename":"src/builder/arg.rs","begin":[3756,4],"end":[3762,5]},"visibility":"public","docs":"Get *all* short aliases for this argument, if any, both visible and hidden.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:6400:240","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"char"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:553:5098":{"id":"0:553:5098","crate_id":0,"name":"find_subcommand_mut","span":{"filename":"src/builder/command.rs","begin":[3438,4],"end":[3444,5]},"visibility":"public","docs":"Find subcommand such that its name or one of aliases equals `name`, returning\na mutable reference to the subcommand.\n\nThis does not recurse through subcommands of subcommands.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["name",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2481:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"std::ffi::OsStr","id":"1:2029:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Command","id":"0:3505:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"impl AsRef<std::ffi::OsStr>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2481:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"std::ffi::OsStr","id":"1:2029:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1578:207":{"id":"0:1578:207","crate_id":0,"name":"Result","span":{"filename":"src/error/mod.rs","begin":[52,0],"end":[52,48]},"visibility":"public","docs":"Short hand for [`Result`] type\n\n[`Result`]: std::result::Result","links":{"std::result::Result":"2:48278:207"},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"StdResult","id":"2:48278:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1581:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]}}},"0:17":{"id":"0:17","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[115,62],"end":[115,68]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::derive::Parser","name":"Parser","id":"0:36:1667","glob":false}},"0:1642":{"id":"0:1642","crate_id":0,"name":null,"span":{"filename":"src/error/mod.rs","begin":[768,0],"end":[773,1]},"visibility":{"restricted":{"parent":"0:1509:1662","path":"::error"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ErrorFormatter","id":"0:1547:6079","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["source","type_id","description","cause","provide"],"trait":{"name":"Error","id":"2:2578:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1581:127","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["0:1644:6088"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1537:655":{"id":"0:1537:655","crate_id":0,"name":"fmt","span":{"filename":"src/error/context.rs","begin":[68,4],"end":[70,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"std::fmt::Formatter","id":"2:8556:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"std::fmt::Result","id":"2:8545:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:225:3420":{"id":"0:225:3420","crate_id":0,"name":"required_if_eq_any","span":{"filename":"src/builder/arg.rs","begin":[3271,4],"end":[3278,5]},"visibility":"public","docs":"Specify this argument is [required] based on multiple conditions.\n\nThe conditions are set up in a `(arg, val)` style tuple. The requirement will only become\nvalid if one of the specified `arg`'s value equals its corresponding `val`.\n\n# Examples\n\n```rust\n# use clap::Arg;\nArg::new(\"config\")\n    .required_if_eq_any([\n        (\"extra\", \"val\"),\n        (\"option\", \"spec\")\n    ])\n# ;\n```\n\nSetting `Arg::required_if_eq_any([(arg, val)])` makes this arg required if any of the `arg`s\nare used at runtime and it's corresponding value is equal to `val`. If the `arg`'s value is\nanything other than `val`, this argument isn't required.\n\n```rust\n# use clap::{Command, Arg, ArgAction};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .required_if_eq_any([\n            (\"extra\", \"val\"),\n            (\"option\", \"spec\")\n        ])\n        .action(ArgAction::Set)\n        .long(\"config\"))\n    .arg(Arg::new(\"extra\")\n        .action(ArgAction::Set)\n        .long(\"extra\"))\n    .arg(Arg::new(\"option\")\n        .action(ArgAction::Set)\n        .long(\"option\"))\n    .try_get_matches_from(vec![\n        \"prog\", \"--option\", \"other\"\n    ]);\n\nassert!(res.is_ok()); // We didn't use --option=spec, or --extra=val so \"cfg\" isn't required\n```\n\nSetting `Arg::required_if_eq_any([(arg, val)])` and having any of the `arg`s used with its\nvalue of `val` but *not* using this arg is an error.\n\n```rust\n# use clap::{Command, Arg, error::ErrorKind, ArgAction};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .required_if_eq_any([\n            (\"extra\", \"val\"),\n            (\"option\", \"spec\")\n        ])\n        .action(ArgAction::Set)\n        .long(\"config\"))\n    .arg(Arg::new(\"extra\")\n        .action(ArgAction::Set)\n        .long(\"extra\"))\n    .arg(Arg::new(\"option\")\n        .action(ArgAction::Set)\n        .long(\"option\"))\n    .try_get_matches_from(vec![\n        \"prog\", \"--option\", \"spec\"\n    ]);\n\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind(), ErrorKind::MissingRequiredArgument);\n```\n[`Arg::requires(name)`]: Arg::requires()\n[Conflicting]: Arg::conflicts_with()\n[required]: Arg::required()","links":{"Arg::required()":"0:166:1870"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["ifs",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7042:149","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"tuple","inner":[{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]},{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]}}}}]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl Into<Id>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}},{"name":"impl Into<OsStr>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}},{"name":"impl IntoIterator<Item = (impl Into<Id>, impl Into<OsStr>)>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7042:149","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"tuple","inner":[{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]},{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2241-0:3603:2158":{"id":"b:2:2241-0:3603:2158","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2235:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Resettable","id":"0:3603:2158","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2243:26835"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:56:2018":{"id":"0:56:2018","crate_id":0,"name":"from_arg_matches_mut","span":{"filename":"src/derive.rs","begin":[243,4],"end":[245,5]},"visibility":"default","docs":"Instantiate `Self` from [`ArgMatches`], parsing the arguments as needed.\n\nMotivation: If our application had two CLI options, `--name\n<STRING>` and the flag `--debug`, we may create a struct as follows:\n\n ```ignore\nstruct Context {\n    name: String,\n    debug: bool\n}\n```\n\nWe then need to convert the `ArgMatches` that `clap` generated into our struct.\n`from_arg_matches_mut` serves as the equivalent of:\n\n ```ignore\n# use clap::ArgMatches;\n# struct Context {\n#   name: String,\n#   debug: bool\n# }\nimpl From<ArgMatches> for Context {\n   fn from(m: ArgMatches) -> Self {\n       Context {\n           name: m.get_one::<String>(\"name\").unwrap().to_string(),\n           debug: *m.get_one::<bool>(\"debug\").expect(\"defaulted by clap\"),\n       }\n   }\n}\n```","links":{"`ArgMatches`":"0:4112:1655"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["matches",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4112:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48278:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:12:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:99:2091":{"id":"0:99:2091","crate_id":0,"name":"augment_args_for_update","span":{"filename":"src/derive.rs","begin":[451,4],"end":[453,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["cmd",{"kind":"resolved_path","inner":{"name":"Command","id":"0:3505:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Command","id":"0:3505:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1324":{"id":"0:1324","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[2132,0],"end":[2139,1]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ValueParserFactory","id":"0:1306:2175","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"i8"},"items":["0:1325:1667","0:1326:2151"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4254:6461":{"id":"0:4254:6461","crate_id":0,"name":"Indices","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1829,0],"end":[1832,1]},"visibility":"public","docs":"Iterate over indices for where an argument appeared when parsing, via [`ArgMatches::indices_of`]\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ArgAction};\nlet m = Command::new(\"myapp\")\n    .arg(Arg::new(\"output\")\n        .short('o')\n        .num_args(1..)\n        .action(ArgAction::Set))\n    .get_matches_from(vec![\"myapp\", \"-o\", \"val1\", \"val2\"]);\n\nlet mut indices = m.indices_of(\"output\").unwrap();\n\nassert_eq!(indices.next(), Some(2));\nassert_eq!(indices.next(), Some(3));\nassert_eq!(indices.next(), None);\n```\n[`ArgMatches::indices_of`]: ArgMatches::indices_of()","links":{"ArgMatches::indices_of()":"0:1796:6822"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:2:7735:6524-0:4254:6461","a:2:2676:225-0:4254:6461","a:2:2662:217-0:4254:6461","a:2:2726:5340-0:4254:6461","a:2:7736:6523-0:4254:6461","b:2:2523-0:4254:6461","b:2:2238-0:4254:6461","b:2:2517-0:4254:6461","b:2:2513-0:4254:6461","b:2:2241-0:4254:6461","b:2:2528-0:4254:6461","b:2:7046-0:4254:6461","b:2:3321-0:4254:6461","b:5:681-0:4254:6461","0:4258","0:4261","0:2001","0:2006","0:2009","0:2011"]}},"0:3242":{"id":"0:3242","crate_id":0,"name":null,"span":{"filename":"src/builder/arg_group.rs","begin":[85,32],"end":[85,41]},"visibility":{"restricted":{"parent":"0:314:2142","path":"::builder::arg_group"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2672:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3229:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1337:1667":{"id":"0:1337:1667","crate_id":0,"name":"Parser","span":{"filename":"src/builder/value_parser.rs","begin":[2165,4],"end":[2165,44]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:3791:2170","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i32"}}],"bindings":[]}}}}}},"a:2:2662:217-0:4174:6458":{"id":"a:2:2662:217-0:4174:6458","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawValues","id":"0:4174:6458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3837":{"id":"0:3837","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1711,15],"end":[1711,20]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FalseyValueParser","id":"0:3835:2164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3838:412"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4123":{"id":"0:4123","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[65,32],"end":[65,41]},"visibility":{"restricted":{"parent":"0:1754:6526","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2672:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4112:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11479:29191":{"id":"2:11479:29191","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"self::pattern":"2:11116:8056","prim@char":"1:12300:408","str::rsplitn":"2:11482:29192"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:50214:8078","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11121:8050","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2726:5340-0:4542:1657":{"id":"a:2:2726:5340-0:4542:1657","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2726:5340","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:4542:1657","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:7046-0:4174:6458":{"id":"b:2:7046-0:4174:6458","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:7156:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:7042:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawValues","id":"0:4174:6458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:7048:2029","2:7049:6930","2:7050:762"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"0:897":{"id":"0:897","crate_id":0,"name":null,"span":{"filename":"src/builder/resettable.rs","begin":[183,0],"end":[187,1]},"visibility":{"restricted":{"parent":"0:844:2148","path":"::builder::resettable"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:6967:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:6967:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"generic","inner":"I"},"items":["0:899:2452"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2241-0:4142:6457":{"id":"b:2:2241-0:4142:6457","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2235:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IdsRef","id":"0:4142:6457","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2243:26835"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1290:2015":{"id":"0:1290:2015","crate_id":0,"name":"parse","span":{"filename":"src/builder/value_parser.rs","begin":[1982,4],"end":[1991,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["cmd",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Command","id":"0:3505:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["arg",{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Arg","id":"0:3195:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}}}],["value",{"kind":"resolved_path","inner":{"name":"std::ffi::OsString","id":"1:2026:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48278:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Value","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:1125:2173","args":null}}}},{"type":{"kind":"resolved_path","inner":{"name":"crate::Error","id":"0:12:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:887":{"id":"0:887","crate_id":0,"name":null,"span":{"filename":"src/builder/resettable.rs","begin":[159,0],"end":[163,1]},"visibility":{"restricted":{"parent":"0:844:2148","path":"::builder::resettable"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ArgAction","id":"0:2796:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgAction","id":"0:2796:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:888:2452"],"negative":false,"synthetic":false,"blanket_impl":null}},"25:54:64568":{"id":"25:54:64568","crate_id":25,"name":"from_into_filelike","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/io-lifetimes-1.0.3/src/portability.rs","begin":[406,4],"end":[406,68]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["owned",{"kind":"generic","inner":"Owned"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[{"name":"Owned","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Owned"},"bounds":[{"trait_bound":{"trait":{"name":"IntoFilelike","id":"25:37:11389","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7735:6524-0:3571:1966":{"id":"a:2:7735:6524-0:3571:1966","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7735:6524","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:3571:1966","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:3321-0:3756:2167":{"id":"b:2:3321-0:3756:2167","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3319:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsStringValueParser","id":"0:3756:2167","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3323:1440"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1146:5472":{"id":"0:1146:5472","crate_id":0,"name":"Value","span":{"filename":"src/builder/value_parser.rs","begin":[861,4],"end":[861,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"String","id":"5:6967:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:313:655":{"id":"0:313:655","crate_id":0,"name":"fmt","span":{"filename":"src/builder/arg.rs","begin":[4276,4],"end":[4315,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Formatter","id":"2:8556:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48278:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"fmt::Error","id":"2:49176:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4532":{"id":"0:4532","crate_id":0,"name":null,"span":{"filename":"src/util/id.rs","begin":[8,29],"end":[8,38]},"visibility":{"restricted":{"parent":"0:2715:1860","path":"::util::id"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2672:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:7736:6523-0:4091:6463":{"id":"a:2:7736:6523-0:4091:6463","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7736:6523","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4091:6463","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4289:600":{"id":"0:4289:600","crate_id":0,"name":"eq","span":{"filename":"src/parser/matches/value_source.rs","begin":[2,29],"end":[2,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4275:6462","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:422:4234":{"id":"0:422:4234","crate_id":0,"name":"print_help","span":{"filename":"src/builder/command.rs","begin":[723,4],"end":[733,5]},"visibility":"public","docs":"Prints the short help message (`-h`) to [`io::stdout()`].\n\nSee also [`Command::print_long_help`].\n\n# Examples\n\n```rust\n# use clap::Command;\nlet mut cmd = Command::new(\"myprog\");\ncmd.print_help();\n```\n[`io::stdout()`]: std::io::stdout()","links":{"std::io::stdout()":"1:3236:7559","`Command::print_long_help`":"0:423:4244"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2903:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:263:3580":{"id":"0:263:3580","crate_id":0,"name":"get_index","span":{"filename":"src/builder/arg.rs","begin":[3870,4],"end":[3872,5]},"visibility":"public","docs":"Get the index of this argument, if any","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3983:1553":{"id":"0:3983:1553","crate_id":0,"name":"0","span":{"filename":"src/error/context.rs","begin":[81,9],"end":[81,13]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"primitive","inner":"bool"}},"0:3634":{"id":"0:3634","crate_id":0,"name":null,"span":{"filename":"src/builder/resettable.rs","begin":[31,61],"end":[31,65]},"visibility":{"restricted":{"parent":"0:844:2148","path":"::builder::resettable"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hash","id":"2:8819:140","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:8819:140","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Resettable","id":"0:3603:2158","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:3636:707"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3756:2167":{"id":"0:3756:2167","crate_id":0,"name":"OsStringValueParser","span":{"filename":"src/builder/value_parser.rs","begin":[899,0],"end":[899,33]},"visibility":"public","docs":"Implementation for [`ValueParser::os_string`]\n\nUseful for composing new [`TypedValueParser`]s","links":{"`TypedValueParser`":"0:1125:2173","`ValueParser::os_string`":"0:1074:5164"},"attrs":["#[non_exhaustive]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":false}},"generics":{"params":[],"where_predicates":[]},"impls":["0:1151","a:2:7735:6524-0:3756:2167","a:2:2676:225-0:3756:2167","a:2:2662:217-0:3756:2167","a:2:2726:5340-0:3756:2167","a:2:7736:6523-0:3756:2167","b:2:2523-0:3756:2167","b:2:2238-0:3756:2167","b:2:2517-0:3756:2167","b:2:2513-0:3756:2167","b:2:2241-0:3756:2167","b:2:2528-0:3756:2167","b:2:3321-0:3756:2167","b:5:681-0:3756:2167","0:3757","0:3758","0:3760","0:1153","0:1157"]}},"0:2749:600":{"id":"0:2749:600","crate_id":0,"name":"eq","span":{"filename":"src/util/id.rs","begin":[122,4],"end":[124,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:752":{"id":"0:752","crate_id":0,"name":null,"span":{"filename":"src/builder/os_str.rs","begin":[216,0],"end":[221,1]},"visibility":{"restricted":{"parent":"0:707:2145","path":"::builder::os_str"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2285:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"std::ffi::OsStr","id":"1:2029:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"items":["0:753:600"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3321-0:3505:1650":{"id":"b:2:3321-0:3505:1650","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3319:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Command","id":"0:3505:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3323:1440"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4170":{"id":"0:4170","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1463,16],"end":[1463,21]},"visibility":{"restricted":{"parent":"0:1754:6526","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"2:8596:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8596:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValuesRef","id":"0:4161:6460","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:4173:655"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:958":{"id":"0:958","crate_id":0,"name":null,"span":{"filename":"src/builder/str.rs","begin":[187,0],"end":[192,1]},"visibility":{"restricted":{"parent":"0:912:1352","path":"::builder::str"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2285:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"std::ffi::OsStr","id":"1:2029:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:959:600"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:835:673":{"id":"0:835:673","crate_id":0,"name":"from","span":{"filename":"src/builder/range.rs","begin":[150,4],"end":[154,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["range",{"kind":"resolved_path","inner":{"name":"std::ops::RangeTo","id":"2:46501:199","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1200:673":{"id":"0:1200:673","crate_id":0,"name":"from","span":{"filename":"src/builder/value_parser.rs","begin":[1206,4],"end":[1208,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["values",{"kind":"generic","inner":"I"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:726:673":{"id":"0:726:673","crate_id":0,"name":"from","span":{"filename":"src/builder/os_str.rs","begin":[130,4],"end":[132,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"borrowed_ref","inner":{"lifetime":"'static","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1636":{"id":"0:1636","crate_id":0,"name":null,"span":{"filename":"src/error/mod.rs","begin":[756,0],"end":[760,1]},"visibility":{"restricted":{"parent":"0:1509:1662","path":"::error"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ErrorFormatter","id":"0:1547:6079","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"2:49176:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1581:127","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["0:1638:673"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:785":{"id":"0:785","crate_id":0,"name":null,"span":{"filename":"src/builder/possible_value.rs","begin":[42,0],"end":[143,1]},"visibility":{"restricted":{"parent":"0:780:2146","path":"::builder::possible_value"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:3571:1966","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:786:915","0:787:1563","0:788:3217","0:789:277","0:790:2402"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:308:419":{"id":"0:308:419","crate_id":0,"name":"cmp","span":{"filename":"src/builder/arg.rs","begin":[4262,4],"end":[4264,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3195:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Ordering","id":"2:38204:180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3321-0:3810:2171":{"id":"b:2:3321-0:3810:2171","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3319:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangedU64ValueParser","id":"0:3810:2171","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:3323:1440"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3962:6240":{"id":"0:3962:6240","crate_id":0,"name":"Custom","span":{"filename":"src/error/context.rs","begin":[39,4],"end":[39,10]},"visibility":"default","docs":"An opaque message to the user","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"b:25:60-0:3603:2158":{"id":"b:25:60-0:3603:2158","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/io-lifetimes-1.0.3/src/portability.rs","begin":[482,0],"end":[482,43]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OwnedFd","id":"1:5064:9877","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"FromSocketlike","id":"25:56:11397","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Resettable","id":"0:3603:2158","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["25:62:64563","25:63:64564"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2241-0:3829:2161":{"id":"b:2:2241-0:3829:2161","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2235:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BoolValueParser","id":"0:3829:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2243:26835"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:331:1859":{"id":"0:331:1859","crate_id":0,"name":"get_id","span":{"filename":"src/builder/arg_group.rs","begin":[501,4],"end":[503,5]},"visibility":"public","docs":"Get the name of the group","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3753":{"id":"0:3753","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[849,22],"end":[849,27]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8596:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StringValueParser","id":"0:3749:2172","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3754:655"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3598":{"id":"0:3598","crate_id":0,"name":null,"span":{"filename":"src/builder/range.rs","begin":[2,33],"end":[2,35]},"visibility":{"restricted":{"parent":"0:807:2147","path":"::builder::range"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2290:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueRange","id":"0:3588:2156","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2513-0:3571:1966":{"id":"b:2:2513-0:3571:1966","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:3571:1966","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2516:2263"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:2725:673":{"id":"0:2725:673","crate_id":0,"name":"from","span":{"filename":"src/util/id.rs","begin":[31,4],"end":[33,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["id",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1307:1667":{"id":"0:1307:1667","crate_id":0,"name":"Parser","span":{"filename":"src/builder/value_parser.rs","begin":[2095,4],"end":[2095,16]},"visibility":"default","docs":"Generated parser, usually [`ValueParser`].\n\nIt should at least be a type that supports `Into<ValueParser>`.  A non-`ValueParser` type\nallows the caller to do further initialization on the parser.","links":{"`ValueParser`":"0:1054:2174"},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"a:2:2726:5340-0:4009:3985":{"id":"a:2:2726:5340-0:4009:3985","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2726:5340","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4009:3985","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:586:5154":{"id":"0:586:5154","crate_id":0,"name":"is_allow_missing_positional_set","span":{"filename":"src/builder/command.rs","begin":[3670,4],"end":[3672,5]},"visibility":"public","docs":"Report whether [`Command::allow_missing_positional`] is set","links":{"`Command::allow_missing_positional`":"0:481:4703"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2585-0:4091:6463":{"id":"b:2:2585-0:4091:6463","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"2:2578:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Provider","id":"2:3370:8105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4091:6463","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2587:9385"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"E"}}},"0:508:4041":{"id":"0:508:4041","crate_id":0,"name":"subcommand_value_name","span":{"filename":"src/builder/command.rs","begin":[3139,4],"end":[3142,5]},"visibility":"public","docs":"Sets the value name used for subcommands when printing usage and help.\n\nBy default, this is \"COMMAND\".\n\nSee also [`Command::subcommand_help_heading`]\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg};\nCommand::new(\"myprog\")\n    .subcommand(Command::new(\"sub1\"))\n    .print_help()\n# ;\n```\n\nwill produce\n\n```text\nmyprog\n\nUsage: myprog [COMMAND]\n\nCommands:\n    help    Print this message or the help of the given subcommand(s)\n    sub1\n\nOptions:\n    -h, --help       Print help\n    -V, --version    Print version\n```\n\nbut usage of `subcommand_value_name`\n\n```no_run\n# use clap::{Command, Arg};\nCommand::new(\"myprog\")\n    .subcommand(Command::new(\"sub1\"))\n    .subcommand_value_name(\"THING\")\n    .print_help()\n# ;\n```\n\nwill produce\n\n```text\nmyprog\n\nUsage: myprog [THING]\n\nCommands:\n    help    Print this message or the help of the given subcommand(s)\n    sub1\n\nOptions:\n    -h, --help       Print help\n    -V, --version    Print version\n```","links":{"`Command::subcommand_help_heading`":"0:509:5036"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["value_name",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl IntoResettable<Str>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2513-0:1549:6080":{"id":"b:2:2513-0:1549:6080","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"KindFormatter","id":"0:1549:6080","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2516:2263"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2528-0:4254:6461":{"id":"b:2:2528-0:4254:6461","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:4254:6461","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2531:127","2:2532:1426"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1284":{"id":"0:1284","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1962,0],"end":[1998,1]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"TypedValueParser","id":"0:1125:2173","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Value","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"","id":"0:1125:2173","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Fn","id":"2:2932:5247","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Value","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"","id":"0:1125:2173","args":null}}}],"output":{"kind":"generic","inner":"T"}}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["map","possible_values","parse","try_map"],"trait":{"name":"TypedValueParser","id":"0:1125:2173","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MapValueParser","id":"0:3859:2165","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"P"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["0:1288:5472","0:1289:5682","0:1290:2015","0:1291:3567"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1802:6874":{"id":"0:1802:6874","crate_id":0,"name":"subcommand_matches","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1019,4],"end":[1021,5]},"visibility":"public","docs":"The `ArgMatches` for the current [subcommand].\n\nSubcommand values are put in a child [`ArgMatches`]\n\nReturns `None` if the subcommand wasn't present at runtime,\n\n# Panics\n\nIf `id` is not a valid subcommand.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ArgAction};\nlet app_m = Command::new(\"myprog\")\n    .arg(Arg::new(\"debug\")\n        .short('d')\n        .action(ArgAction::SetTrue)\n    )\n    .subcommand(Command::new(\"test\")\n        .arg(Arg::new(\"opt\")\n            .long(\"option\")\n            .action(ArgAction::Set)))\n    .get_matches_from(vec![\n        \"myprog\", \"-d\", \"test\", \"--option\", \"val\"\n    ]);\n\n// Both parent commands, and child subcommands can have arguments present at the same times\nassert!(*app_m.get_one::<bool>(\"debug\").expect(\"defaulted by clap\"));\n\n// Get the subcommand's ArgMatches instance\nif let Some(sub_m) = app_m.subcommand_matches(\"test\") {\n    // Use the struct like normal\n    assert_eq!(sub_m.get_one::<String>(\"opt\").map(|s| s.as_str()), Some(\"val\"));\n}\n```\n\n[subcommand]: crate::Command::subcommand\n[`Command`]: crate::Command","links":{"`ArgMatches`":"0:4112:1655","crate::Command::subcommand":"0:402:4142"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4112:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7735:6524-0:1581:127":{"id":"a:2:7735:6524-0:1581:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"RichFormatter","id":"0:1553:6083","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7735:6524","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1581:127","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"0:280:3625":{"id":"0:280:3625","crate_id":0,"name":"is_hide_default_value_set","span":{"filename":"src/builder/arg.rs","begin":[4003,4],"end":[4005,5]},"visibility":"public","docs":"Report whether [`Arg::hide_default_value`] is set","links":{"`Arg::hide_default_value`":"0:211:3235"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:271:3606":{"id":"0:271:3606","crate_id":0,"name":"is_allow_hyphen_values_set","span":{"filename":"src/builder/arg.rs","begin":[3948,4],"end":[3950,5]},"visibility":"public","docs":"Report whether [`Arg::allow_hyphen_values`] is set","links":{"`Arg::allow_hyphen_values`":"0:185:2910"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1847:6919":{"id":"0:1847:6919","crate_id":0,"name":"size_hint","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1374,4],"end":[1376,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:12:127":{"id":"0:12:127","crate_id":0,"name":"Error","span":{"filename":"src/lib.rs","begin":[113,0],"end":[113,69]},"visibility":"public","docs":"Command Line Argument Parser Error\n\nSee [`Command::error`] to create an error.\n\n[`Command::error`]: crate::Command::error","links":{"crate::Command::error":"0:406:1662"},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"crate::error::Error","id":"0:1581:127","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"crate::error::DefaultFormatter","id":"0:1553:6083","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"0:1591:6121":{"id":"0:1591:6121","crate_id":0,"name":"apply","span":{"filename":"src/error/mod.rs","begin":[165,4],"end":[170,5]},"visibility":"public","docs":"Apply an alternative formatter to the error\n\n# Example\n\n```rust\n# use clap::Command;\n# use clap::Arg;\n# use clap::error::KindFormatter;\nlet cmd = Command::new(\"foo\")\n    .arg(Arg::new(\"input\").required(true));\nlet matches = cmd\n    .try_get_matches_from([\"foo\", \"input.txt\"])\n    .map_err(|e| e.apply::<KindFormatter>())\n    .unwrap_or_else(|e| e.exit());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1581:127","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"EF"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"EF","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ErrorFormatter","id":"0:1547:6079","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1022:673":{"id":"0:1022:673","crate_id":0,"name":"from","span":{"filename":"src/builder/styled_str.rs","begin":[255,4],"end":[259,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"std::string::String","id":"5:6967:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:944":{"id":"0:944","crate_id":0,"name":null,"span":{"filename":"src/builder/str.rs","begin":[141,0],"end":[146,1]},"visibility":{"restricted":{"parent":"0:912:1352","path":"::builder::str"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"2:2481:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Path","id":"1:5506:187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:945:310"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:947:5354":{"id":"0:947:5354","crate_id":0,"name":"borrow","span":{"filename":"src/builder/str.rs","begin":[150,4],"end":[152,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3760":{"id":"0:3760","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[897,22],"end":[897,27]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8596:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsStringValueParser","id":"0:3756:2167","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3761:655"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2676:225-0:1549:6080":{"id":"a:2:2676:225-0:1549:6080","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"KindFormatter","id":"0:1549:6080","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:2662:217-0:4142:6457":{"id":"a:2:2662:217-0:4142:6457","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IdsRef","id":"0:4142:6457","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4280:6496":{"id":"0:4280:6496","crate_id":0,"name":"CommandLine","span":{"filename":"src/parser/matches/value_source.rs","begin":[10,4],"end":[10,15]},"visibility":"default","docs":"Value was passed in on the command-line","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"2:11482:29192":{"id":"2:11482:29192","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12300:408","self::pattern":"2:11116:8056","str::splitn":"2:11479:29191"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:50232:8077","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11121:8050","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11121:8050","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11136:8051","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3709:3584":{"id":"0:3709:3584","crate_id":0,"name":"AnyPath","span":{"filename":"src/builder/value_hint.rs","begin":[36,4],"end":[36,11]},"visibility":"default","docs":"Any existing path.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"0:3976:707":{"id":"0:3976:707","crate_id":0,"name":"hash","span":{"filename":"src/error/context.rs","begin":[2,44],"end":[2,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["state",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"__H"}}}]],"output":{"kind":"tuple","inner":[]},"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:8833:144","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4003":{"id":"0:4003","crate_id":0,"name":null,"span":{"filename":"src/error/context.rs","begin":[74,23],"end":[74,32]},"visibility":{"restricted":{"parent":"0:1533:479","path":"::error::context"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2672:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextValue","id":"0:3978:6082","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:259:3571":{"id":"0:259:3571","crate_id":0,"name":"get_num_args","span":{"filename":"src/builder/arg.rs","begin":[3846,4],"end":[3848,5]},"visibility":"public","docs":"Get the number of values for this argument.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ValueRange","id":"0:3588:2156","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1267:5682":{"id":"0:1267:5682","crate_id":0,"name":"parse_ref","span":{"filename":"src/builder/value_parser.rs","begin":[1830,4],"end":[1850,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["cmd",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Command","id":"0:3505:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["arg",{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Arg","id":"0:3195:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}}}],["value",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"std::ffi::OsStr","id":"1:2029:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48278:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Value","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:1125:2173","args":null}}}},{"type":{"kind":"resolved_path","inner":{"name":"crate::Error","id":"0:12:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11485:7353":{"id":"2:11485:7353","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11121:8050","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2241-0:1581:127":{"id":"b:2:2241-0:1581:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2235:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1581:127","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["2:2243:26835"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2517-0:3829:2161":{"id":"b:2:2517-0:3829:2161","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BoolValueParser","id":"0:3829:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2519:673"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1164:2015":{"id":"0:1164:2015","crate_id":0,"name":"parse","span":{"filename":"src/builder/value_parser.rs","begin":[962,4],"end":[977,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["cmd",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Command","id":"0:3505:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["arg",{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Arg","id":"0:3195:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}}}],["value",{"kind":"resolved_path","inner":{"name":"std::ffi::OsString","id":"1:2026:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48278:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Value","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:1125:2173","args":null}}}},{"type":{"kind":"resolved_path","inner":{"name":"crate::Error","id":"0:12:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:521:5055":{"id":"0:521:5055","crate_id":0,"name":"get_long_flag","span":{"filename":"src/builder/command.rs","begin":[3272,4],"end":[3274,5]},"visibility":"public","docs":"Get the long flag of the subcommand.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2780:59":{"id":"0:2780:59","crate_id":0,"name":"default","span":{"filename":"src/util/color.rs","begin":[62,4],"end":[64,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1536":{"id":"0:1536","crate_id":0,"name":null,"span":{"filename":"src/error/context.rs","begin":[67,0],"end":[71,1]},"visibility":{"restricted":{"parent":"0:1533:479","path":"::error::context"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:8601:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:3929:6081","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1537:655"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2676:225-0:3810:2171":{"id":"a:2:2676:225-0:3810:2171","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangedU64ValueParser","id":"0:3810:2171","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:58:2037":{"id":"0:58:2037","crate_id":0,"name":"update_from_arg_matches_mut","span":{"filename":"src/derive.rs","begin":[251,4],"end":[253,5]},"visibility":"default","docs":"Assign values from `ArgMatches` to `self`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["matches",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4112:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48278:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:12:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:681-0:3547:181":{"id":"b:5:681-0:3547:181","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:677:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:683:5351","5:684:3662","5:685:8969"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:5:5352-0:3929:6081":{"id":"b:5:5352-0:3929:6081","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:8601:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5350:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:3929:6081","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5354:1406"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4284":{"id":"0:4284","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/value_source.rs","begin":[2,16],"end":[2,21]},"visibility":{"restricted":{"parent":"0:2069:6527","path":"::parser::matches::value_source"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4275:6462","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4285:412"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:838":{"id":"0:838","crate_id":0,"name":null,"span":{"filename":"src/builder/range.rs","begin":[165,0],"end":[171,1]},"visibility":{"restricted":{"parent":"0:807:2147","path":"::builder::range"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"RangeToInclusive","id":"2:46545:200","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueRange","id":"0:3588:2156","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:839:673"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2662:217-0:3929:6081":{"id":"a:2:2662:217-0:3929:6081","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:3929:6081","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1070:915":{"id":"0:1070:915","crate_id":0,"name":"new","span":{"filename":"src/builder/value_parser.rs","begin":[107,4],"end":[112,5]},"visibility":"public","docs":"Custom parser for argument values\n\nPre-existing [`TypedValueParser`] implementations include:\n- `Fn(&str) -> Result<T, E>`\n- [`EnumValueParser`] and  [`PossibleValuesParser`] for static enumerated values\n- [`BoolishValueParser`] and [`FalseyValueParser`] for alternative `bool` implementations\n- [`RangedI64ValueParser`] and [`RangedU64ValueParser`]\n- [`NonEmptyStringValueParser`]\n\n# Example\n\n```rust\ntype EnvVar = (String, Option<String>);\nfn parse_env_var(env: &str) -> Result<EnvVar, std::io::Error> {\n    if let Some((var, value)) = env.split_once('=') {\n        Ok((var.to_owned(), Some(value.to_owned())))\n    } else {\n        Ok((env.to_owned(), None))\n    }\n}\n\nlet mut cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"env\")\n            .value_parser(clap::builder::ValueParser::new(parse_env_var))\n            .required(true)\n    );\n\nlet m = cmd.try_get_matches_from_mut([\"cmd\", \"key=value\"]).unwrap();\nlet port: &EnvVar = m.get_one(\"env\")\n    .expect(\"required\");\nassert_eq!(*port, (\"key\".into(), Some(\"value\".into())));\n```","links":{"`RangedU64ValueParser`":"0:3810:2171","`RangedI64ValueParser`":"0:3791:2170","`NonEmptyStringValueParser`":"0:3852:2166","`FalseyValueParser`":"0:3835:2164","`TypedValueParser`":"0:1125:2173","`PossibleValuesParser`":"0:3783:2169","`EnumValueParser`":"0:3768:2163","`BoolishValueParser`":"0:3842:2162"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["other",{"kind":"generic","inner":"P"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"TypedValueParser","id":"0:1125:2173","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1593:778":{"id":"0:1593:778","crate_id":0,"name":"kind","span":{"filename":"src/error/mod.rs","begin":[173,4],"end":[175,5]},"visibility":"public","docs":"Type of error for programmatic processing","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4009:3985","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1323:2151":{"id":"0:1323:2151","crate_id":0,"name":"value_parser","span":{"filename":"src/builder/value_parser.rs","begin":[2126,4],"end":[2130,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"qualified_path","inner":{"name":"Parser","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:1306:2175","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3594":{"id":"0:3594","crate_id":0,"name":null,"span":{"filename":"src/builder/range.rs","begin":[2,22],"end":[2,31]},"visibility":{"restricted":{"parent":"0:807:2147","path":"::builder::range"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2672:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueRange","id":"0:3588:2156","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2662:217-0:1581:127":{"id":"a:2:2662:217-0:1581:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1581:127","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:855":{"id":"0:855","crate_id":0,"name":null,"span":{"filename":"src/builder/resettable.rs","begin":[48,0],"end":[52,1]},"visibility":{"restricted":{"parent":"0:844:2148","path":"::builder::resettable"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Resettable","id":"0:3603:2158","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:857:673"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2517-0:3756:2167":{"id":"b:2:2517-0:3756:2167","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsStringValueParser","id":"0:3756:2167","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2519:673"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3944:6205":{"id":"0:3944:6205","crate_id":0,"name":"ExpectedNumValues","span":{"filename":"src/error/context.rs","begin":[21,4],"end":[21,21]},"visibility":"default","docs":"Number of allowed values","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"0:804":{"id":"0:804","crate_id":0,"name":null,"span":{"filename":"src/builder/possible_value.rs","begin":[230,0],"end":[234,1]},"visibility":{"restricted":{"parent":"0:780:2146","path":"::builder::possible_value"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:3571:1966","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:806:673"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1249":{"id":"0:1249","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1667,0],"end":[1671,1]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2564:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BoolValueParser","id":"0:3829:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1250:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:7050:762":{"id":"2:7050:762","crate_id":2,"name":"into_iter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"I"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:212:3263":{"id":"0:212:3263","crate_id":0,"name":"hide_short_help","span":{"filename":"src/builder/arg.rs","begin":[2469,4],"end":[2475,5]},"visibility":"public","docs":"Hides an argument from short help (`-h`).\n\n**NOTE:** This does **not** hide the argument from usage strings on error\n\n**NOTE:** Setting this option will cause next-line-help output style to be used\nwhen long help (`--help`) is called.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg};\nArg::new(\"debug\")\n    .hide_short_help(true);\n```\n\nSetting `hide_short_help(true)` will hide the argument when displaying short help text\n\n ```\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .long(\"config\")\n        .hide_short_help(true)\n        .help(\"Some help text describing the --config arg\"))\n    .get_matches_from(vec![\n        \"prog\", \"-h\"\n    ]);\n```\n\nThe above example displays\n\n```text\nhelptest\n\nUsage: helptest [OPTIONS]\n\nOptions:\n-h, --help       Print help information\n-V, --version    Print version information\n```\n\nHowever, when --help is called\n\n ```\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .long(\"config\")\n        .hide_short_help(true)\n        .help(\"Some help text describing the --config arg\"))\n    .get_matches_from(vec![\n        \"prog\", \"--help\"\n    ]);\n```\n\nThen the following would be displayed\n\n```text\nhelptest\n\nUsage: helptest [OPTIONS]\n\nOptions:\n    --config     Some help text describing the --config arg\n-h, --help       Print help information\n-V, --version    Print version information\n```","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1827:6707":{"id":"0:1827:6707","crate_id":0,"name":"try_contains_id","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1212,4],"end":[1217,5]},"visibility":"public","docs":"Non-panicking version of [`ArgMatches::contains_id`]","links":{"`ArgMatches::contains_id`":"0:1791:6706"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48278:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"bool"}},{"type":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4091:6463","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7735:6524-0:4174:6458":{"id":"a:2:7735:6524-0:4174:6458","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7735:6524","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawValues","id":"0:4174:6458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1266:5472":{"id":"0:1266:5472","crate_id":0,"name":"Value","span":{"filename":"src/builder/value_parser.rs","begin":[1828,4],"end":[1828,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"primitive","inner":"bool"}}},"0:902:2452":{"id":"0:902:2452","crate_id":0,"name":"into_resettable","span":{"filename":"src/builder/resettable.rs","begin":[190,4],"end":[192,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Resettable","id":"0:3603:2158","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:447:4379":{"id":"0:447:4379","crate_id":0,"name":"disable_colored_help","span":{"filename":"src/builder/command.rs","begin":[1249,4],"end":[1255,5]},"visibility":"public","docs":"Disables colorized help messages.\n\n**NOTE:** This choice is propagated to all child subcommands.\n\n# Examples\n\n```no_run\n# use clap::Command;\nCommand::new(\"myprog\")\n    .disable_colored_help(true)\n    .get_matches();\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2531:127":{"id":"2:2531:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:39378:7093","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"2:11526:29203":{"id":"2:11526:29203","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:11116:8056","prim@char":"1:12300:408"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11121:8050","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3650":{"id":"0:3650","crate_id":0,"name":null,"span":{"filename":"src/builder/str.rs","begin":[5,40],"end":[5,50]},"visibility":{"restricted":{"parent":"0:912:1352","path":"::builder::str"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["gt","ge","le","lt"],"trait":{"name":"PartialOrd","id":"2:2327:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3651:1003"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1335:2151":{"id":"0:1335:2151","crate_id":0,"name":"value_parser","span":{"filename":"src/builder/value_parser.rs","begin":[2158,4],"end":[2162,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"qualified_path","inner":{"name":"Parser","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:1306:2175","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1861":{"id":"0:1861","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1430,0],"end":[1430,42]},"visibility":{"restricted":{"parent":"0:1754:6526","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["len","is_empty"],"trait":{"name":"ExactSizeIterator","id":"2:7102:6921","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:4151:6459","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3725:5595":{"id":"0:3725:5595","crate_id":0,"name":"Hostname","span":{"filename":"src/builder/value_hint.rs","begin":[62,4],"end":[62,12]},"visibility":"default","docs":"Host name of a computer.\nShells usually parse `/etc/hosts` and `.ssh/known_hosts` to complete hostnames.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"b:2:2513-0:3662:1951":{"id":"b:2:2513-0:3662:1951","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2516:2263"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:930:673":{"id":"0:930:673","crate_id":0,"name":"from","span":{"filename":"src/builder/str.rs","begin":[92,4],"end":[94,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["name",{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2662:217-0:3662:1951":{"id":"a:2:2662:217-0:3662:1951","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:753:600":{"id":"0:753:600","crate_id":0,"name":"eq","span":{"filename":"src/builder/os_str.rs","begin":[218,4],"end":[220,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3719:5581":{"id":"0:3719:5581","crate_id":0,"name":"CommandString","span":{"filename":"src/builder/value_hint.rs","begin":[46,4],"end":[46,17]},"visibility":"default","docs":"A single string containing a command and its arguments.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"0:505:4912":{"id":"0:505:4912","crate_id":0,"name":"subcommand_precedence_over_arg","span":{"filename":"src/builder/command.rs","begin":[2895,4],"end":[2901,5]},"visibility":"public","docs":"Prevent subcommands from being consumed as an arguments value.\n\nBy default, if an option taking multiple values is followed by a subcommand, the\nsubcommand will be parsed as another value.\n\n```text\ncmd --foo val1 val2 subcommand\n          --------- ----------\n            values   another value\n```\n\nThis setting instructs the parser to stop when encountering a subcommand instead of\ngreedily consuming arguments.\n\n```text\ncmd --foo val1 val2 subcommand\n          --------- ----------\n            values   subcommand\n```\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ArgAction};\nlet cmd = Command::new(\"cmd\").subcommand(Command::new(\"sub\")).arg(\n    Arg::new(\"arg\")\n        .long(\"arg\")\n        .num_args(1..)\n        .action(ArgAction::Set),\n);\n\nlet matches = cmd\n    .clone()\n    .try_get_matches_from(&[\"cmd\", \"--arg\", \"1\", \"2\", \"3\", \"sub\"])\n    .unwrap();\nassert_eq!(\n    matches.get_many::<String>(\"arg\").unwrap().collect::<Vec<_>>(),\n    &[\"1\", \"2\", \"3\", \"sub\"]\n);\nassert!(matches.subcommand_matches(\"sub\").is_none());\n\nlet matches = cmd\n    .subcommand_precedence_over_arg(true)\n    .try_get_matches_from(&[\"cmd\", \"--arg\", \"1\", \"2\", \"3\", \"sub\"])\n    .unwrap();\nassert_eq!(\n    matches.get_many::<String>(\"arg\").unwrap().collect::<Vec<_>>(),\n    &[\"1\", \"2\", \"3\"]\n);\nassert!(matches.subcommand_matches(\"sub\").is_some());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2528-0:3662:1951":{"id":"b:2:2528-0:3662:1951","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2531:127","2:2532:1426"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11431:26926":{"id":"2:11431:26926","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9298:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9298:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:268:3602":{"id":"0:268:3602","crate_id":0,"name":"is_required_set","span":{"filename":"src/builder/arg.rs","begin":[3935,4],"end":[3937,5]},"visibility":"public","docs":"Reports whether [`Arg::required`] is set","links":{"`Arg::required`":"0:166:1870"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2513-0:3829:2161":{"id":"b:2:2513-0:3829:2161","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BoolValueParser","id":"0:3829:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2516:2263"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:332:3602":{"id":"0:332:3602","crate_id":0,"name":"is_required_set","span":{"filename":"src/builder/arg_group.rs","begin":[507,4],"end":[509,5]},"visibility":"public","docs":"Reports whether [`ArgGroup::required`] is set","links":{"`ArgGroup::required`":"0:325:1870"},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:95:2037":{"id":"0:95:2037","crate_id":0,"name":"update_from_arg_matches_mut","span":{"filename":"src/derive.rs","begin":[442,4],"end":[444,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["matches",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4112:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48278:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:12:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4024:6204":{"id":"0:4024:6204","crate_id":0,"name":"WrongNumberOfValues","span":{"filename":"src/error/kind.rs","begin":[153,4],"end":[153,23]},"visibility":"default","docs":"Occurs when the user provides a different number of values for an argument than what's\nbeen defined by setting [`Arg::num_args`] or than was implicitly set by\n[`Arg::value_names`].\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, error::ErrorKind, ArgAction};\nlet result = Command::new(\"prog\")\n    .arg(Arg::new(\"some_opt\")\n        .long(\"opt\")\n        .action(ArgAction::Set)\n        .num_args(2))\n    .try_get_matches_from(vec![\"prog\", \"--opt\", \"wrong\"]);\nassert!(result.is_err());\nassert_eq!(result.unwrap_err().kind(), ErrorKind::WrongNumberOfValues);\n```\n\n[`Arg::num_args`]: crate::Arg::num_args()\n[`Arg::value_names`]: crate::Arg::value_names()","links":{"crate::Arg::num_args()":"0:178:1872","crate::Arg::value_names()":"0:181:2831"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"b:5:681-0:4091:6463":{"id":"b:5:681-0:4091:6463","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:677:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4091:6463","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:683:5351","5:684:3662","5:685:8969"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3595":{"id":"0:3595","crate_id":0,"name":null,"span":{"filename":"src/builder/range.rs","begin":[2,22],"end":[2,31]},"visibility":{"restricted":{"parent":"0:807:2147","path":"::builder::range"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2285:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ValueRange","id":"0:3588:2156","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueRange","id":"0:3588:2156","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3596:600"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2662:217-0:3829:2161":{"id":"a:2:2662:217-0:3829:2161","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BoolValueParser","id":"0:3829:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:2662:217-0:3762:2168":{"id":"a:2:2662:217-0:3762:2168","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PathBufValueParser","id":"0:3762:2168","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:957:600":{"id":"0:957:600","crate_id":0,"name":"eq","span":{"filename":"src/builder/str.rs","begin":[183,4],"end":[185,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"std::ffi::OsStr","id":"1:2029:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4000:412":{"id":"0:4000:412","crate_id":0,"name":"clone","span":{"filename":"src/error/context.rs","begin":[74,9],"end":[74,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"ContextValue","id":"0:3978:6082","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:523:5059":{"id":"0:523:5059","crate_id":0,"name":"get_long_about","span":{"filename":"src/builder/command.rs","begin":[3288,4],"end":[3290,5]},"visibility":"public","docs":"Get the help message specified via [`Command::long_about`].\n\n[`Command::long_about`]: Command::long_about()","links":{"Command::long_about()":"0:459:4023"},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:512:5039":{"id":"0:512:5039","crate_id":0,"name":"get_display_name","span":{"filename":"src/builder/command.rs","begin":[3219,4],"end":[3221,5]},"visibility":"public","docs":"Get the name of the binary.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4093:6517":{"id":"0:4093:6517","crate_id":0,"name":"actual","span":{"filename":"src/parser/error.rs","begin":[10,8],"end":[10,33]},"visibility":"default","docs":"Type for value stored in [`ArgMatches`][crate::ArgMatches]","links":{"crate::ArgMatches":"0:4112:1655"},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"super::AnyValueId","id":"0:4106:2265","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"b:2:2528-0:3791:2170":{"id":"b:2:2528-0:3791:2170","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:3791:2170","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2531:127","2:2532:1426"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2726:5340-0:3195:1652":{"id":"a:2:2726:5340-0:3195:1652","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2726:5340","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3195:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:411:2030":{"id":"0:411:2030","crate_id":0,"name":"get_matches_from","span":{"filename":"src/builder/command.rs","begin":[573,4],"end":[582,5]},"visibility":"public","docs":"Parse the specified arguments, exiting on failure.\n\n**NOTE:** The first argument will be parsed as the binary name unless\n[`Command::no_binary_name`] is used.\n\n# Panics\n\nIf contradictory arguments or settings exist.\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg};\nlet arg_vec = vec![\"my_prog\", \"some\", \"args\", \"to\", \"parse\"];\n\nlet matches = Command::new(\"myprog\")\n    // Args and options go here...\n    .get_matches_from(arg_vec);\n```\n[`Command::get_matches`]: Command::get_matches()\n[`clap::Result`]: Result\n[`Vec`]: std::vec::Vec","links":{"`Command::no_binary_name`":"0:435:4298"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["itr",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4112:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7042:149","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsString","id":"1:2026:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:504:4888":{"id":"0:504:4888","crate_id":0,"name":"args_conflicts_with_subcommands","span":{"filename":"src/builder/command.rs","begin":[2836,4],"end":[2842,5]},"visibility":"public","docs":"Specifies that use of an argument prevents the use of [`subcommands`].\n\nBy default `clap` allows arguments between subcommands such\nas `<cmd> [cmd_args] <subcmd> [subcmd_args] <subsubcmd> [subsubcmd_args]`.\n\nThis setting disables that functionality and says that arguments can\nonly follow the *final* subcommand. For instance using this setting\nmakes only the following invocations possible:\n\n* `<cmd> <subcmd> <subsubcmd> [subsubcmd_args]`\n* `<cmd> <subcmd> [subcmd_args]`\n* `<cmd> [cmd_args]`\n\n# Examples\n\n```rust\n# use clap::Command;\nCommand::new(\"myprog\")\n    .args_conflicts_with_subcommands(true);\n```\n\n[`subcommands`]: crate::Command::subcommand()","links":{"crate::Command::subcommand()":"0:402:4142"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:953:600":{"id":"0:953:600","crate_id":0,"name":"eq","span":{"filename":"src/builder/str.rs","begin":[170,4],"end":[172,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:407:2016":{"id":"0:407:2016","crate_id":0,"name":"get_matches","span":{"filename":"src/builder/command.rs","begin":[489,4],"end":[491,5]},"visibility":"public","docs":"Parse [`env::args_os`], exiting on failure.\n\n# Panics\n\nIf contradictory arguments or settings exist.\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg};\nlet matches = Command::new(\"myprog\")\n    // Args and options go here...\n    .get_matches();\n```\n[`env::args_os`]: std::env::args_os()\n[`Command::try_get_matches_from_mut`]: Command::try_get_matches_from_mut()","links":{"std::env::args_os()":"1:1892:4181"},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4112:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2238-0:1553:6083":{"id":"b:2:2238-0:1553:6083","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2232:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RichFormatter","id":"0:1553:6083","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2240:5354"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1720":{"id":"0:1720","crate_id":0,"name":null,"span":{"filename":"src/parser/error.rs","begin":[39,0],"end":[54,1]},"visibility":{"restricted":{"parent":"0:1715:1662","path":"::parser::error"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:8601:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4091:6463","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1721:655"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:387":{"id":"0:387","crate_id":0,"name":null,"span":{"filename":"src/builder/command.rs","begin":[112,0],"end":[913,1]},"visibility":{"restricted":{"parent":"0:346:1834","path":"::builder::command"}},"docs":"# Basic API","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Command","id":"0:3505:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:388:915","0:390:1849","0:393:303","0:394:4085","0:397:4098","0:400:3282","0:401:2396","0:402:4142","0:404:4037","0:405:1854","0:406:1662","0:407:2016","0:408:4186","0:410:2024","0:411:2030","0:415:2033","0:418:4187","0:422:4234","0:423:4244","0:424:4252","0:425:4256","0:430:4275","0:431:4280","0:432:4283"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1798:4142":{"id":"0:1798:4142","crate_id":0,"name":"subcommand","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[918,4],"end":[920,5]},"visibility":"public","docs":"The name and `ArgMatches` of the current [subcommand].\n\nSubcommand values are put in a child [`ArgMatches`]\n\nReturns `None` if the subcommand wasn't present at runtime,\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg, };\n let app_m = Command::new(\"git\")\n     .subcommand(Command::new(\"clone\"))\n     .subcommand(Command::new(\"push\"))\n     .subcommand(Command::new(\"commit\"))\n     .get_matches();\n\nmatch app_m.subcommand() {\n    Some((\"clone\",  sub_m)) => {}, // clone was used\n    Some((\"push\",   sub_m)) => {}, // push was used\n    Some((\"commit\", sub_m)) => {}, // commit was used\n    _                       => {}, // Either no subcommand or one not tested for...\n}\n```\n\nAnother useful scenario is when you want to support third party, or external, subcommands.\nIn these cases you can't know the subcommand name ahead of time, so use a variable instead\nwith pattern matching!\n\n```rust\n# use std::ffi::OsString;\n# use std::ffi::OsStr;\n# use clap::Command;\n// Assume there is an external subcommand named \"subcmd\"\nlet app_m = Command::new(\"myprog\")\n    .allow_external_subcommands(true)\n    .get_matches_from(vec![\n        \"myprog\", \"subcmd\", \"--option\", \"value\", \"-fff\", \"--flag\"\n    ]);\n\n// All trailing arguments will be stored under the subcommand's sub-matches using an empty\n// string argument name\nmatch app_m.subcommand() {\n    Some((external, sub_m)) => {\n         let ext_args: Vec<&OsStr> = sub_m.get_many::<OsString>(\"\")\n            .unwrap().map(|s| s.as_os_str()).collect();\n         assert_eq!(external, \"subcmd\");\n         assert_eq!(ext_args, [\"--option\", \"value\", \"-fff\", \"--flag\"]);\n    },\n    _ => {},\n}\n```\n[subcommand]: crate::Command::subcommand","links":{"`ArgMatches`":"0:4112:1655","crate::Command::subcommand":"0:402:4142"},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4112:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2003:2029":{"id":"0:2003:2029","crate_id":0,"name":"Item","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1835,4],"end":[1835,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"primitive","inner":"usize"}}},"0:199:3062":{"id":"0:199:3062","crate_id":0,"name":"default_missing_value_os","span":{"filename":"src/builder/arg.rs","begin":[1797,4],"end":[1799,5]},"visibility":"public","docs":"Value for the argument when the flag is present but no value is specified.\n\nSee [`Arg::default_missing_value`].\n\n[`Arg::default_missing_value`]: Arg::default_missing_value()\n[`OsStr`]: std::ffi::OsStr","links":{"Arg::default_missing_value()":"0:198:2261"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["val",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl Into<OsStr>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:302:673":{"id":"0:302:673","crate_id":0,"name":"from","span":{"filename":"src/builder/arg.rs","begin":[4244,4],"end":[4246,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["a",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3195:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1877":{"id":"0:1877","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1487,0],"end":[1487,57]},"visibility":{"restricted":{"parent":"0:1754:6526","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["len","is_empty"],"trait":{"name":"ExactSizeIterator","id":"2:7102:6921","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValuesRef","id":"0:4161:6460","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1800:6861":{"id":"0:1800:6861","crate_id":0,"name":"remove_subcommand","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[976,4],"end":[978,5]},"visibility":"public","docs":"Return the name and `ArgMatches` of the current [subcommand].\n\nSubcommand values are put in a child [`ArgMatches`]\n\nReturns `None` if the subcommand wasn't present at runtime,\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg, };\n let mut app_m = Command::new(\"git\")\n     .subcommand(Command::new(\"clone\"))\n     .subcommand(Command::new(\"push\"))\n     .subcommand(Command::new(\"commit\"))\n     .subcommand_required(true)\n     .get_matches();\n\nlet (name, sub_m) = app_m.remove_subcommand().expect(\"required\");\nmatch (name.as_str(), sub_m) {\n    (\"clone\",  sub_m) => {}, // clone was used\n    (\"push\",   sub_m) => {}, // push was used\n    (\"commit\", sub_m) => {}, // commit was used\n    (name, _)         => unimplemented!(\"{}\", name),\n}\n```\n\nAnother useful scenario is when you want to support third party, or external, subcommands.\nIn these cases you can't know the subcommand name ahead of time, so use a variable instead\nwith pattern matching!\n\n```rust\n# use std::ffi::OsString;\n# use clap::Command;\n// Assume there is an external subcommand named \"subcmd\"\nlet mut app_m = Command::new(\"myprog\")\n    .allow_external_subcommands(true)\n    .get_matches_from(vec![\n        \"myprog\", \"subcmd\", \"--option\", \"value\", \"-fff\", \"--flag\"\n    ]);\n\n// All trailing arguments will be stored under the subcommand's sub-matches using an empty\n// string argument name\nmatch app_m.remove_subcommand() {\n    Some((external, mut sub_m)) => {\n         let ext_args: Vec<OsString> = sub_m.remove_many(\"\")\n            .expect(\"`file`is required\")\n            .collect();\n         assert_eq!(external, \"subcmd\");\n         assert_eq!(ext_args, [\"--option\", \"value\", \"-fff\", \"--flag\"]);\n    },\n    _ => {},\n}\n```\n[subcommand]: crate::Command::subcommand","links":{"crate::Command::subcommand":"0:402:4142","`ArgMatches`":"0:4112:1655"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"resolved_path","inner":{"name":"String","id":"5:6967:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4112:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:875:2452":{"id":"0:875:2452","crate_id":0,"name":"into_resettable","span":{"filename":"src/builder/resettable.rs","begin":[115,4],"end":[120,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Resettable","id":"0:3603:2158","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:320:1849":{"id":"0:320:1849","crate_id":0,"name":"arg","span":{"filename":"src/builder/arg_group.rs","begin":[152,4],"end":[159,5]},"visibility":"public","docs":"Adds an [argument] to this group by name\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ArgGroup, ArgAction};\nlet m = Command::new(\"myprog\")\n    .arg(Arg::new(\"flag\")\n        .short('f')\n        .action(ArgAction::SetTrue))\n    .arg(Arg::new(\"color\")\n        .short('c')\n        .action(ArgAction::SetTrue))\n    .group(ArgGroup::new(\"req_flags\")\n        .arg(\"flag\")\n        .arg(\"color\"))\n    .get_matches_from(vec![\"myprog\", \"-f\"]);\n// maybe we don't know which of the two flags was used...\nassert!(m.contains_id(\"req_flags\"));\n// but we can also check individually if needed\nassert!(m.contains_id(\"flag\"));\n```\n[argument]: crate::Arg","links":{"crate::Arg":"0:3195:1652"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["arg_id",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl IntoResettable<Id>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3259":{"id":"0:3259","crate_id":0,"name":null,"span":{"filename":"src/builder/arg_predicate.rs","begin":[6,23],"end":[6,32]},"visibility":{"restricted":{"parent":"0:335:2143","path":"::builder::arg_predicate"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2285:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ArgPredicate","id":"0:3248:2155","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgPredicate","id":"0:3248:2155","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3260:600"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11429:6476":{"id":"2:11429:6476","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:48136:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9298:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9298:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4160:655":{"id":"0:4160:655","crate_id":0,"name":"fmt","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1406,16],"end":[1406,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:8556:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8545:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:451:4411":{"id":"0:451:4411","crate_id":0,"name":"infer_long_args","span":{"filename":"src/builder/command.rs","begin":[1339,4],"end":[1345,5]},"visibility":"public","docs":"Allow partial matches of long arguments or their [aliases].\n\nFor example, to match an argument named `--test`, one could use `--t`, `--te`, `--tes`, and\n`--test`.\n\n**NOTE:** The match *must not* be ambiguous at all in order to succeed. i.e. to match\n`--te` to `--test` there could not also be another argument or alias `--temp` because both\nstart with `--te`\n\n**NOTE:** This choice is propagated to all child subcommands.\n\n[aliases]: crate::Command::aliases()","links":{"crate::Command::aliases()":"0:488:2402"},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3958:6182":{"id":"0:3958:6182","crate_id":0,"name":"Suggested","span":{"filename":"src/error/context.rs","begin":[35,4],"end":[35,13]},"visibility":"default","docs":"Potential fix for the user","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"0:1843":{"id":"0:1843","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1368,0],"end":[1377,1]},"visibility":{"restricted":{"parent":"0:1754:6526","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["flat_map","array_chunks","reduce","try_collect","take_while","any","step_by","advance_by","all","copied","find","size_hint","is_sorted_by_key","product","try_reduce","sum","collect_into","map_while","intersperse","min_by","flatten","le","find_map","__iterator_get_unchecked","zip","map","cmp_by","try_find","position","partition","fold","scan","intersperse_with","enumerate","max_by","eq","partial_cmp_by","last","rposition","gt","partition_in_place","fuse","for_each","partial_cmp","max_by_key","rev","take","eq_by","chain","unzip","is_partitioned","try_for_each","inspect","ge","count","skip","next_chunk","peekable","min","cmp","filter_map","cloned","filter","is_sorted","cycle","try_fold","min_by_key","by_ref","lt","skip_while","nth","collect","max","ne","is_sorted_by"],"trait":{"name":"Iterator","id":"2:7156:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IdsRef","id":"0:4142:6457","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:1845:2029","0:1846:928","0:1847:6919"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:2782:655":{"id":"0:2782:655","crate_id":0,"name":"fmt","span":{"filename":"src/util/color.rs","begin":[68,4],"end":[73,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"std::fmt::Formatter","id":"2:8556:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"std::fmt::Result","id":"2:8545:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1791:6706":{"id":"0:1791:6706","crate_id":0,"name":"contains_id","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[495,4],"end":[497,5]},"visibility":"public","docs":"Check if values are present for the argument or group id\n\n*NOTE:* This will always return `true` if [`default_value`] has been set.\n[`ArgMatches::value_source`] can be used to check if a value is present at runtime.\n\n# Panics\n\nIf `id` is not a valid argument or group name.  To handle this case programmatically, see\n[`ArgMatches::try_contains_id`].\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ArgAction};\nlet m = Command::new(\"myprog\")\n    .arg(Arg::new(\"debug\")\n        .short('d')\n        .action(ArgAction::SetTrue))\n    .get_matches_from(vec![\n        \"myprog\", \"-d\"\n    ]);\n\nassert!(m.contains_id(\"debug\"));\n```\n\n[`default_value`]: crate::Arg::default_value()","links":{"`ArgMatches::try_contains_id`":"0:1827:6707","`ArgMatches::value_source`":"0:1794:6527","crate::Arg::default_value()":"0:193:2260"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4120:412":{"id":"0:4120:412","crate_id":0,"name":"clone","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[65,16],"end":[65,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4112:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2523-0:3638:2154":{"id":"b:2:2523-0:3638:2154","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2493:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2526:127","2:2527:1427"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:732:655":{"id":"0:732:655","crate_id":0,"name":"fmt","span":{"filename":"src/builder/os_str.rs","begin":[149,4],"end":[151,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"std::fmt::Formatter","id":"2:8556:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"std::fmt::Result","id":"2:8545:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3766":{"id":"0:3766","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[939,22],"end":[939,27]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8596:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PathBufValueParser","id":"0:3762:2168","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3767:655"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1168":{"id":"0:1168","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1028,0],"end":[1034,1]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"crate::ValueEnum","id":"0:67:1669","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"EnumValueParser","id":"0:3768:2163","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"items":["0:1170:915"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1142:5682":{"id":"0:1142:5682","crate_id":0,"name":"parse_ref","span":{"filename":"src/builder/value_parser.rs","begin":[824,4],"end":[843,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["cmd",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Command","id":"0:3505:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["arg",{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Arg","id":"0:3195:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}}}],["value",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"std::ffi::OsStr","id":"1:2029:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48278:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Value","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:1125:2173","args":null}}}},{"type":{"kind":"resolved_path","inner":{"name":"crate::Error","id":"0:12:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2676:225-0:3505:1650":{"id":"a:2:2676:225-0:3505:1650","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Command","id":"0:3505:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11460:8931":{"id":"2:11460:8931","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"self::pattern":"2:11116:8056","`None`":"2:48136:176","prim@char":"1:12300:408"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11121:8050","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11121:8050","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11136:8051","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:933":{"id":"0:933","crate_id":0,"name":null,"span":{"filename":"src/builder/str.rs","begin":[104,0],"end":[109,1]},"visibility":{"restricted":{"parent":"0:912:1352","path":"::builder::str"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8596:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:934:655"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2726:5340-0:3768:2163":{"id":"a:2:2726:5340-0:3768:2163","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:2726:5340","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2726:5340","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EnumValueParser","id":"0:3768:2163","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3768:2163":{"id":"0:3768:2163","crate_id":0,"name":"EnumValueParser","span":{"filename":"src/builder/value_parser.rs","begin":[1024,0],"end":[1026,2]},"visibility":"public","docs":"Parse an [`ValueEnum`][crate::ValueEnum] value.\n\nSee also:\n- [`PossibleValuesParser`]\n\n# Example\n\n```rust\n# use std::ffi::OsStr;\n# use clap::ColorChoice;\n# use clap::builder::TypedValueParser;\n# let cmd = clap::Command::new(\"test\");\n# let arg = None;\n\n// Usage\nlet mut cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"color\")\n            .value_parser(clap::builder::EnumValueParser::<ColorChoice>::new())\n            .required(true)\n    );\n\nlet m = cmd.try_get_matches_from_mut([\"cmd\", \"always\"]).unwrap();\nlet port: ColorChoice = *m.get_one(\"color\")\n    .expect(\"required\");\nassert_eq!(port, ColorChoice::Always);\n\n// Semantics\nlet value_parser = clap::builder::EnumValueParser::<ColorChoice>::new();\n// or\nlet value_parser = clap::value_parser!(ColorChoice);\nassert!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"random\")).is_err());\nassert!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"\")).is_err());\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"always\")).unwrap(), ColorChoice::Always);\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"auto\")).unwrap(), ColorChoice::Auto);\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"never\")).unwrap(), ColorChoice::Never);\n```","links":{"`PossibleValuesParser`":"0:3783:2169","crate::ValueEnum":"0:67:1669"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"tuple":[null]},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"crate::ValueEnum","id":"0:67:1669","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:1168","a:2:7735:6524-0:3768:2163","a:2:2676:225-0:3768:2163","a:2:2662:217-0:3768:2163","a:2:2726:5340-0:3768:2163","a:2:7736:6523-0:3768:2163","b:2:2523-0:3768:2163","b:2:2238-0:3768:2163","b:2:2517-0:3768:2163","b:2:2513-0:3768:2163","b:2:2241-0:3768:2163","b:2:2528-0:3768:2163","b:2:3321-0:3768:2163","b:5:681-0:3768:2163","0:3772","0:3775","0:1171","0:1182"]}},"b:2:7046-0:4151:6459":{"id":"b:2:7046-0:4151:6459","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:7156:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:7042:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:4151:6459","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:7048:2029","2:7049:6930","2:7050:762"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"b:5:681-0:4174:6458":{"id":"b:5:681-0:4174:6458","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:677:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawValues","id":"0:4174:6458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["5:683:5351","5:684:3662","5:685:8969"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:788:3217":{"id":"0:788:3217","crate_id":0,"name":"hide","span":{"filename":"src/builder/possible_value.rs","begin":[103,4],"end":[106,5]},"visibility":"public","docs":"Hides this value from help and shell completions.\n\nThis is an alternative to hiding through [`Arg::hide_possible_values(true)`], if you only\nwant to hide some values.\n\n# Examples\n\n```rust\n# use clap::builder::PossibleValue;\nPossibleValue::new(\"secret\")\n    .hide(true)\n# ;\n```\n[`Arg::hide_possible_values(true)`]: crate::Arg::hide_possible_values()","links":{"crate::Arg::hide_possible_values()":"0:210:3227"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7736:6523-0:3547:181":{"id":"a:2:7736:6523-0:3547:181","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7736:6523","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:863:2452":{"id":"0:863:2452","crate_id":0,"name":"into_resettable","span":{"filename":"src/builder/resettable.rs","begin":[66,4],"end":[66,46]},"visibility":"default","docs":"Convert to the intended resettable type","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Resettable","id":"0:3603:2158","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:4283:655":{"id":"0:4283:655","crate_id":0,"name":"fmt","span":{"filename":"src/parser/matches/value_source.rs","begin":[2,9],"end":[2,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:8556:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8545:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2517-0:3603:2158":{"id":"b:2:2517-0:3603:2158","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Resettable","id":"0:3603:2158","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2519:673"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4148":{"id":"0:4148","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1363,16],"end":[1363,21]},"visibility":{"restricted":{"parent":"0:1754:6526","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8596:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IdsRef","id":"0:4142:6457","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:4150:655"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2662:217-0:3810:2171":{"id":"a:2:2662:217-0:3810:2171","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangedU64ValueParser","id":"0:3810:2171","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:932:655":{"id":"0:932:655","crate_id":0,"name":"fmt","span":{"filename":"src/builder/str.rs","begin":[99,4],"end":[101,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"std::fmt::Formatter","id":"2:8556:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"std::fmt::Result","id":"2:8545:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2513-0:4091:6463":{"id":"b:2:2513-0:4091:6463","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4091:6463","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2516:2263"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1147:5682":{"id":"0:1147:5682","crate_id":0,"name":"parse_ref","span":{"filename":"src/builder/value_parser.rs","begin":[863,4],"end":[870,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["cmd",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Command","id":"0:3505:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["arg",{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Arg","id":"0:3195:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}}}],["value",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"std::ffi::OsStr","id":"1:2029:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48278:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Value","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:1125:2173","args":null}}}},{"type":{"kind":"resolved_path","inner":{"name":"crate::Error","id":"0:12:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1476":{"id":"0:1476","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[28,0],"end":[28,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"arg_group::ArgGroup","name":"ArgGroup","id":"0:3229:1653","glob":false}},"0:2009":{"id":"0:2009","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1851,0],"end":[1851,45]},"visibility":{"restricted":{"parent":"0:1754:6526","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["len","is_empty"],"trait":{"name":"ExactSizeIterator","id":"2:7102:6921","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:4254:6461","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:181:2831":{"id":"0:181:2831","crate_id":0,"name":"value_names","span":{"filename":"src/builder/arg.rs","begin":[1219,4],"end":[1222,5]},"visibility":"public","docs":"Placeholders for the argument's values in the help message / usage.\n\nThese names are cosmetic only, used for help and usage strings only. The names are **not**\nused to access arguments. The values of the arguments are accessed in numeric order (i.e.\nif you specify two names `one` and `two` `one` will be the first matched value, `two` will\nbe the second).\n\nThis setting can be very helpful when describing the type of input the user should be\nusing, such as `FILE`, `INTERFACE`, etc. Although not required, it's somewhat convention to\nuse all capital letters for the value name.\n\n**Pro Tip:** It may help to use [`Arg::next_line_help(true)`] if there are long, or\nmultiple value names in order to not throw off the help text alignment of all options.\n\n**NOTE:** implicitly sets [`Arg::action(ArgAction::Set)`] and [`Arg::num_args(1..)`].\n\n# Examples\n\n```rust\n# use clap::{Command, Arg};\nArg::new(\"speed\")\n    .short('s')\n    .value_names([\"fast\", \"slow\"]);\n```\n\n ```\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"io\")\n        .long(\"io-files\")\n        .value_names([\"INFILE\", \"OUTFILE\"]))\n    .get_matches_from(vec![\n        \"prog\", \"--help\"\n    ]);\n```\n\nRunning the above program produces the following output\n\n```text\nvalnames\n\nUsage: valnames [OPTIONS]\n\nOptions:\n    -h, --help                       Print help information\n    --io-files <INFILE> <OUTFILE>    Some help text\n    -V, --version                    Print version information\n```\n[`Arg::next_line_help(true)`]: Arg::next_line_help()\n[`Arg::num_args`]: Arg::num_args()\n[`Arg::action(ArgAction::Set)`]: Arg::action()\n[`Arg::num_args(1..)`]: Arg::num_args()","links":{"Arg::action()":"0:176:1861","Arg::num_args()":"0:178:1872","Arg::next_line_help()":"0:208:3212"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["names",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7042:149","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}}}}]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl Into<Str>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}},{"name":"impl IntoIterator<Item = impl Into<Str>>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7042:149","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3653:419":{"id":"0:3653:419","crate_id":0,"name":"cmp","span":{"filename":"src/builder/str.rs","begin":[5,52],"end":[5,55]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::cmp::Ordering","id":"2:38204:180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2523-0:3588:2156":{"id":"b:2:2523-0:3588:2156","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2493:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueRange","id":"0:3588:2156","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2526:127","2:2527:1427"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:2813":{"id":"0:2813","crate_id":0,"name":null,"span":{"filename":"src/builder/action.rs","begin":[24,16],"end":[24,21]},"visibility":{"restricted":{"parent":"0:108:1861","path":"::builder::action"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(missing_copy_implementations)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8596:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgAction","id":"0:2796:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2814:655"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3734":{"id":"0:3734","crate_id":0,"name":null,"span":{"filename":"src/builder/value_hint.rs","begin":[27,16],"end":[27,25]},"visibility":{"restricted":{"parent":"0:1042:2150","path":"::builder::value_hint"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2285:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:3704:1651","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:3704:1651","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3735:600"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:2750":{"id":"0:2750","crate_id":0,"name":null,"span":{"filename":"src/util/id.rs","begin":[127,0],"end":[132,1]},"visibility":{"restricted":{"parent":"0:2715:1860","path":"::util::id"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2285:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2751:600"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2662:217-0:4112:1655":{"id":"a:2:2662:217-0:4112:1655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4112:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3638:2154":{"id":"0:3638:2154","crate_id":0,"name":"Str","span":{"filename":"src/builder/str.rs","begin":[6,0],"end":[8,1]},"visibility":"public","docs":"A UTF-8-encoded fixed string\n\n**NOTE:** To support dynamic values (i.e. `String`), enable the [`string`\nfeature][crate::_features]","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:913","a:2:7735:6524-0:3638:2154","a:2:2676:225-0:3638:2154","a:2:2662:217-0:3638:2154","a:2:2726:5340-0:3638:2154","a:2:7736:6523-0:3638:2154","b:2:2523-0:3638:2154","b:2:2238-0:3638:2154","b:2:2517-0:3638:2154","b:2:2513-0:3638:2154","b:2:2241-0:3638:2154","b:2:2528-0:3638:2154","b:2:3321-0:3638:2154","b:5:5352-0:3638:2154","b:5:681-0:3638:2154","0:715","0:717","0:878","0:906","0:3640","0:3642","0:3644","0:3645","0:3647","0:3648","0:3650","0:3652","0:3654","0:917","0:919","0:921","0:923","0:925","0:927","0:929","0:931","0:933","0:935","0:938","0:940","0:942","0:944","0:946","0:948","0:950","0:952","0:954","0:956","0:958","0:960","0:962","0:964","0:966","0:2726","0:2728","0:2734","0:2754","0:2756"]}},"b:2:2528-0:3571:1966":{"id":"b:2:2528-0:3571:1966","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:3571:1966","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2531:127","2:2532:1426"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1774":{"id":"0:1774","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[76,0],"end":[861,1]},"visibility":{"restricted":{"parent":"0:1754:6526","path":"::parser::matches::arg_matches"}},"docs":"# Arguments","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4112:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1775:6587","0:1777:6591","0:1778:6597","0:1779:6610","0:1781:6626","0:1783:6654","0:1784:6671","0:1785:6682","0:1787:6690","0:1789:6697","0:1791:6706","0:1792:3472","0:1793:6727","0:1794:6527","0:1795:6800","0:1796:6822"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3195:1652":{"id":"0:3195:1652","crate_id":0,"name":"Arg","span":{"filename":"src/builder/arg.rs","begin":[54,0],"end":[86,1]},"visibility":"public","docs":"The abstract representation of a command line argument. Used to set all the options and\nrelationships that define a valid argument for the program.\n\nThere are two methods for constructing [`Arg`]s, using the builder pattern and setting options\nmanually, or using a usage string which is far less verbose but has fewer options. You can also\nuse a combination of the two methods to achieve the best of both worlds.\n\n- [Basic API][crate::Arg#basic-api]\n- [Value Handling][crate::Arg#value-handling]\n- [Help][crate::Arg#help-1]\n- [Advanced Argument Relations][crate::Arg#advanced-argument-relations]\n- [Reflection][crate::Arg#reflection]\n\n# Examples\n\n```rust\n# use clap::{Arg, arg, ArgAction};\n// Using the traditional builder pattern and setting each option manually\nlet cfg = Arg::new(\"config\")\n      .short('c')\n      .long(\"config\")\n      .action(ArgAction::Set)\n      .value_name(\"FILE\")\n      .help(\"Provides a config file to myprog\");\n// Using a usage string (setting a similar argument to the one above)\nlet input = arg!(-i --input <FILE> \"Provides an input file to the program\");\n```","links":{"`Arg`":"0:3195:1652","crate::Arg#basic-api":"0:3195:1652","crate::Arg#help-1":"0:3195:1652","crate::Arg#advanced-argument-relations":"0:3195:1652","crate::Arg#reflection":"0:3195:1652","crate::Arg#value-handling":"0:3195:1652"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:148","0:175","0:203","0:214","0:238","a:2:7735:6524-0:3195:1652","a:2:2676:225-0:3195:1652","a:2:2662:217-0:3195:1652","a:2:2726:5340-0:3195:1652","a:2:7736:6523-0:3195:1652","b:2:2523-0:3195:1652","b:2:2238-0:3195:1652","b:2:2517-0:3195:1652","b:2:2513-0:3195:1652","b:2:2241-0:3195:1652","b:2:2528-0:3195:1652","b:2:3321-0:3195:1652","b:5:5352-0:3195:1652","b:5:681-0:3195:1652","0:3225","0:3227","0:301","0:303","0:305","0:307","0:309","0:310","0:312"]}},"0:3622:600":{"id":"0:3622:600","crate_id":0,"name":"eq","span":{"filename":"src/builder/resettable.rs","begin":[31,29],"end":[31,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Resettable","id":"0:3603:2158","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:943:310":{"id":"0:943:310","crate_id":0,"name":"as_ref","span":{"filename":"src/builder/str.rs","begin":[136,4],"end":[138,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"std::ffi::OsStr","id":"1:2029:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7736:6523-0:3768:2163":{"id":"a:2:7736:6523-0:3768:2163","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:7736:6523","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7736:6523","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EnumValueParser","id":"0:3768:2163","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:163:747":{"id":"0:163:747","crate_id":0,"name":"index","span":{"filename":"src/builder/arg.rs","begin":[491,4],"end":[494,5]},"visibility":"public","docs":"Specifies the index of a positional argument **starting at** 1.\n\n**NOTE:** The index refers to position according to **other positional argument**. It does\nnot define position in the argument list as a whole.\n\n**NOTE:** You can optionally leave off the `index` method, and the index will be\nassigned in order of evaluation. Utilizing the `index` method allows for setting\nindexes out of order\n\n**NOTE:** This is only meant to be used for positional arguments and shouldn't to be used\nwith [`Arg::short`] or [`Arg::long`].\n\n**NOTE:** When utilized with [`Arg::num_args(1..)`], only the **last** positional argument\nmay be defined as having a variable number of arguments (i.e. with the highest index)\n\n# Panics\n\n[`Command`] will [`panic!`] if indexes are skipped (such as defining `index(1)` and `index(3)`\nbut not `index(2)`, or a positional argument is defined as multiple and is not the highest\nindex\n\n# Examples\n\n```rust\n# use clap::{Command, Arg};\nArg::new(\"config\")\n    .index(1)\n# ;\n```\n\n```rust\n# use clap::{Command, Arg, ArgAction};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"mode\")\n        .index(1))\n    .arg(Arg::new(\"debug\")\n        .long(\"debug\")\n        .action(ArgAction::SetTrue))\n    .get_matches_from(vec![\n        \"prog\", \"--debug\", \"fast\"\n    ]);\n\nassert!(m.contains_id(\"mode\"));\nassert_eq!(m.get_one::<String>(\"mode\").unwrap(), \"fast\"); // notice index(1) means \"first positional\"\n                                                          // *not* first argument\n```\n[`Arg::short`]: Arg::short()\n[`Arg::long`]: Arg::long()\n[`Arg::num_args(true)`]: Arg::num_args()\n[`Command`]: crate::Command","links":{"Arg::long()":"0:152:1850","Arg::short()":"0:151:1863","`panic!`":"1:10:983","crate::Command":"0:3505:1650"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["idx",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl IntoResettable<usize>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2786":{"id":"0:2786","crate_id":0,"name":null,"span":{"filename":"src/util/color.rs","begin":[89,0],"end":[103,1]},"visibility":{"restricted":{"parent":"0:2776:1564","path":"::util::color"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["from_str"],"trait":{"name":"ValueEnum","id":"0:67:1669","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:4542:1657","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2787:2122","0:2789:2130"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4554":{"id":"0:4554","crate_id":0,"name":null,"span":{"filename":"src/util/color.rs","begin":[5,29],"end":[5,31]},"visibility":{"restricted":{"parent":"0:2776:1564","path":"::util::color"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2673:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:4542:1657","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2517-0:4112:1655":{"id":"b:2:2517-0:4112:1655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4112:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2519:673"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2238-0:3749:2172":{"id":"b:2:2238-0:3749:2172","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2232:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StringValueParser","id":"0:3749:2172","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2240:5354"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11511:29199":{"id":"2:11511:29199","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12300:408","self::pattern":"2:11116:8056"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11121:8050","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11121:8050","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11141:8049","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3321-0:4091:6463":{"id":"b:2:3321-0:4091:6463","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3319:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4091:6463","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3323:1440"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:229:3446":{"id":"0:229:3446","crate_id":0,"name":"requires_if","span":{"filename":"src/builder/arg.rs","begin":[3417,4],"end":[3420,5]},"visibility":"public","docs":"Require another argument if this arg matches the [`ArgPredicate`]\n\nThis method takes `value, another_arg` pair. At runtime, clap will check\nif this arg (`self`) matches the [`ArgPredicate`].\nIf it does, `another_arg` will be marked as required.\n\n# Examples\n\n```rust\n# use clap::Arg;\nArg::new(\"config\")\n    .requires_if(\"val\", \"arg\")\n# ;\n```\n\nSetting `Arg::requires_if(val, arg)` requires that the `arg` be used at runtime if the\ndefining argument's value is equal to `val`. If the defining argument is anything other than\n`val`, the other argument isn't required.\n\n```rust\n# use clap::{Command, Arg, ArgAction};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .action(ArgAction::Set)\n        .requires_if(\"my.cfg\", \"other\")\n        .long(\"config\"))\n    .arg(Arg::new(\"other\"))\n    .try_get_matches_from(vec![\n        \"prog\", \"--config\", \"some.cfg\"\n    ]);\n\nassert!(res.is_ok()); // We didn't use --config=my.cfg, so other wasn't required\n```\n\nSetting `Arg::requires_if(val, arg)` and setting the value to `val` but *not* supplying\n`arg` is an error.\n\n```rust\n# use clap::{Command, Arg, error::ErrorKind, ArgAction};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .action(ArgAction::Set)\n        .requires_if(\"my.cfg\", \"input\")\n        .long(\"config\"))\n    .arg(Arg::new(\"input\"))\n    .try_get_matches_from(vec![\n        \"prog\", \"--config\", \"my.cfg\"\n    ]);\n\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind(), ErrorKind::MissingRequiredArgument);\n```\n[`Arg::requires(name)`]: Arg::requires()\n[Conflicting]: Arg::conflicts_with()\n[override]: Arg::overrides_with()","links":{"`ArgPredicate`":"0:3248:2155"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["val",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ArgPredicate","id":"0:3248:2155","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}],["arg_id",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl Into<ArgPredicate>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ArgPredicate","id":"0:3248:2155","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}},{"name":"impl Into<Id>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:491:4029":{"id":"0:491:4029","crate_id":0,"name":"long_flag_aliases","span":{"filename":"src/builder/command.rs","begin":[2412,4],"end":[2417,5]},"visibility":"public","docs":"Add aliases, which function as \"hidden\" long flag subcommands.\n\nThese will automatically dispatch as if this subcommand was used. This is more efficient,\nand easier than creating multiple hidden subcommands as one only needs to check for the\nexistence of this command, and not all variants.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, };\nlet m = Command::new(\"myprog\")\n            .subcommand(Command::new(\"test\").long_flag(\"test\")\n                .long_flag_aliases([\"testing\", \"testall\", \"test_all\"]))\n                .arg(Arg::new(\"input\")\n                            .help(\"the file to add\")\n                            .required(false))\n            .get_matches_from(vec![\"myprog\", \"--testing\"]);\nassert_eq!(m.subcommand_name(), Some(\"test\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["names",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7042:149","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}}}}]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl Into<Str>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}},{"name":"impl IntoIterator<Item = impl Into<Str>>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7042:149","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3956:6237":{"id":"0:3956:6237","crate_id":0,"name":"TrailingArg","span":{"filename":"src/error/context.rs","begin":[33,4],"end":[33,15]},"visibility":"default","docs":"Trailing argument","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"5:5103:5600":{"id":"5:5103:5600","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:11537:20771"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6967:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4275:6462":{"id":"0:4275:6462","crate_id":0,"name":"ValueSource","span":{"filename":"src/parser/matches/value_source.rs","begin":[4,0],"end":[11,1]},"visibility":"public","docs":"Origin of the argument's value","links":{},"attrs":["#[non_exhaustive]"],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:4276:6989","0:4278:6991","0:4280:6496"],"impls":["a:2:7735:6524-0:4275:6462","a:2:2676:225-0:4275:6462","a:2:2662:217-0:4275:6462","a:2:2726:5340-0:4275:6462","a:2:7736:6523-0:4275:6462","b:2:2523-0:4275:6462","b:2:2238-0:4275:6462","b:2:2517-0:4275:6462","b:2:2513-0:4275:6462","b:2:2241-0:4275:6462","b:2:2528-0:4275:6462","b:2:3321-0:4275:6462","b:5:681-0:4275:6462","0:4282","0:4284","0:4286","0:4287","0:4288","0:4290","0:4291","0:4293","0:4295"]}},"a:2:7735:6524-0:1549:6080":{"id":"a:2:7735:6524-0:1549:6080","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7735:6524","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"KindFormatter","id":"0:1549:6080","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3940:6171":{"id":"0:3940:6171","crate_id":0,"name":"InvalidValue","span":{"filename":"src/error/context.rs","begin":[17,4],"end":[17,16]},"visibility":"default","docs":"Rejected values","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"0:730:673":{"id":"0:730:673","crate_id":0,"name":"from","span":{"filename":"src/builder/os_str.rs","begin":[142,4],"end":[144,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["name",{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1182":{"id":"0:1182","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1095,0],"end":[1099,1]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"crate::ValueEnum","id":"0:67:1669","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2564:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EnumValueParser","id":"0:3768:2163","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"items":["0:1184:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4099:655":{"id":"0:4099:655","crate_id":0,"name":"fmt","span":{"filename":"src/parser/error.rs","begin":[2,16],"end":[2,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:8556:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8545:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1851":{"id":"0:1851","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1385,0],"end":[1385,44]},"visibility":{"restricted":{"parent":"0:1754:6526","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["len","is_empty"],"trait":{"name":"ExactSizeIterator","id":"2:7102:6921","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IdsRef","id":"0:4142:6457","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3649:600":{"id":"0:3649:600","crate_id":0,"name":"eq","span":{"filename":"src/builder/str.rs","begin":[5,29],"end":[5,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1245:5682":{"id":"0:1245:5682","crate_id":0,"name":"parse_ref","span":{"filename":"src/builder/value_parser.rs","begin":[1633,4],"end":[1658,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["cmd",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Command","id":"0:3505:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["arg",{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Arg","id":"0:3195:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}}}],["value",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"std::ffi::OsStr","id":"1:2029:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48278:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Value","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:1125:2173","args":null}}}},{"type":{"kind":"resolved_path","inner":{"name":"crate::Error","id":"0:12:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1196:3567":{"id":"0:1196:3567","crate_id":0,"name":"possible_values","span":{"filename":"src/builder/value_parser.rs","begin":[1194,4],"end":[1198,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:2137","args":{"angle_bracketed":{"args":[{"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Iterator","id":"2:7156:156","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"resolved_path","inner":{"name":"crate::builder::PossibleValue","id":"0:3571:1966","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}]}}},"generic_params":[]}],"lifetime":"'_"}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:109":{"id":"0:109","crate_id":0,"name":null,"span":{"filename":"src/builder/action.rs","begin":[275,0],"end":[342,1]},"visibility":{"restricted":{"parent":"0:108:1861","path":"::builder::action"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"ArgAction","id":"0:2796:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:110:2259"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4557":{"id":"0:4557","crate_id":0,"name":null,"span":{"filename":"src/util/color.rs","begin":[5,33],"end":[5,42]},"visibility":{"restricted":{"parent":"0:2776:1564","path":"::util::color"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2672:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:4542:1657","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1150:59":{"id":"0:1150:59","crate_id":0,"name":"default","span":{"filename":"src/builder/value_parser.rs","begin":[889,4],"end":[891,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1332:2151":{"id":"0:1332:2151","crate_id":0,"name":"value_parser","span":{"filename":"src/builder/value_parser.rs","begin":[2150,4],"end":[2154,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"qualified_path","inner":{"name":"Parser","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:1306:2175","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:281:3627":{"id":"0:281:3627","crate_id":0,"name":"is_hide_possible_values_set","span":{"filename":"src/builder/arg.rs","begin":[4008,4],"end":[4010,5]},"visibility":"public","docs":"Report whether [`Arg::hide_possible_values`] is set","links":{"`Arg::hide_possible_values`":"0:210:3227"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:582:5149":{"id":"0:582:5149","crate_id":0,"name":"is_arg_required_else_help_set","span":{"filename":"src/builder/command.rs","begin":[3632,4],"end":[3634,5]},"visibility":"public","docs":"Report whether [`Command::arg_required_else_help`] is set","links":{"`Command::arg_required_else_help`":"0:477:4655"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2241-0:3810:2171":{"id":"b:2:2241-0:3810:2171","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2235:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangedU64ValueParser","id":"0:3810:2171","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2243:26835"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1414:5914":{"id":"0:1414:5914","crate_id":0,"name":"_ValueParserViaFromStringSealed","span":{"filename":"src/builder/value_parser.rs","begin":[2398,4],"end":[2398,48]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:2513-0:3835:2164":{"id":"b:2:2513-0:3835:2164","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FalseyValueParser","id":"0:3835:2164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2516:2263"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:498:4813":{"id":"0:498:4813","crate_id":0,"name":"visible_long_flag_aliases","span":{"filename":"src/builder/command.rs","begin":[2589,4],"end":[2597,5]},"visibility":"public","docs":"Add aliases, which function as *visible* long flag subcommands.\n\nSee [`Command::long_flag_aliases`].\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg, };\nlet m = Command::new(\"myprog\")\n            .subcommand(Command::new(\"test\").long_flag(\"test\")\n                .visible_long_flag_aliases([\"testing\", \"testall\", \"test_all\"]))\n            .get_matches_from(vec![\"myprog\", \"--testing\"]);\nassert_eq!(m.subcommand_name(), Some(\"test\"));\n```\n[`Command::long_flag_aliases`]: Command::long_flag_aliases()","links":{"Command::long_flag_aliases()":"0:491:4029"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["names",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7042:149","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}}}}]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl Into<Str>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}},{"name":"impl IntoIterator<Item = impl Into<Str>>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7042:149","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3946:6199":{"id":"0:3946:6199","crate_id":0,"name":"MinValues","span":{"filename":"src/error/context.rs","begin":[23,4],"end":[23,13]},"visibility":"default","docs":"Minimum number of allowed values","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"2:11523:29202":{"id":"2:11523:29202","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:11116:8056","prim@char":"1:12300:408"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11121:8050","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11121:8050","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11136:8051","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3834:655":{"id":"0:3834:655","crate_id":0,"name":"fmt","span":{"filename":"src/builder/value_parser.rs","begin":[1612,22],"end":[1612,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:8556:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8545:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2523-0:3195:1652":{"id":"b:2:2523-0:3195:1652","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2493:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3195:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2526:127","2:2527:1427"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2676:225-0:3835:2164":{"id":"a:2:2676:225-0:3835:2164","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FalseyValueParser","id":"0:3835:2164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:2726:5340-0:3749:2172":{"id":"a:2:2726:5340-0:3749:2172","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2726:5340","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StringValueParser","id":"0:3749:2172","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:442:4355":{"id":"0:442:4355","crate_id":0,"name":"disable_version_flag","span":{"filename":"src/builder/command.rs","begin":[1125,4],"end":[1131,5]},"visibility":"public","docs":"Disables `-V` and `--version` flag.\n\n# Examples\n\n```rust\n# use clap::{Command, error::ErrorKind};\nlet res = Command::new(\"myprog\")\n    .disable_version_flag(true)\n    .try_get_matches_from(vec![\n        \"myprog\", \"-V\"\n    ]);\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind(), ErrorKind::UnknownArgument);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:515:5044":{"id":"0:515:5044","crate_id":0,"name":"get_name","span":{"filename":"src/builder/command.rs","begin":[3236,4],"end":[3238,5]},"visibility":"public","docs":"Get the name of the cmd.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2238-0:3603:2158":{"id":"b:2:2238-0:3603:2158","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2232:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Resettable","id":"0:3603:2158","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2240:5354"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1016":{"id":"0:1016","crate_id":0,"name":null,"span":{"filename":"src/builder/styled_str.rs","begin":[239,0],"end":[244,1]},"visibility":{"restricted":{"parent":"0:986:2149","path":"::builder::styled_str"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2564:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"items":["0:1017:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:7735:6524-0:3638:2154":{"id":"a:2:7735:6524-0:3638:2154","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7735:6524","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4535":{"id":"0:4535","crate_id":0,"name":null,"span":{"filename":"src/util/id.rs","begin":[8,40],"end":[8,50]},"visibility":{"restricted":{"parent":"0:2715:1860","path":"::util::id"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["gt","ge","le","lt"],"trait":{"name":"PartialOrd","id":"2:2327:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4536:1003"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4127":{"id":"0:4127","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[65,43],"end":[65,45]},"visibility":{"restricted":{"parent":"0:1754:6526","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2290:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4112:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:937:540":{"id":"0:937:540","crate_id":0,"name":"deref","span":{"filename":"src/builder/str.rs","begin":[115,4],"end":[117,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3321-0:4112:1655":{"id":"b:2:3321-0:4112:1655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3319:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4112:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3323:1440"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4180:412":{"id":"0:4180:412","crate_id":0,"name":"clone","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1524,9],"end":[1524,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"RawValues","id":"0:4174:6458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1097:673":{"id":"0:1097:673","crate_id":0,"name":"from","span":{"filename":"src/builder/value_parser.rs","begin":[471,4],"end":[474,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["value",{"kind":"resolved_path","inner":{"name":"std::ops::RangeFull","id":"2:46441:197","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1162:5472":{"id":"0:1162:5472","crate_id":0,"name":"Value","span":{"filename":"src/builder/value_parser.rs","begin":[951,4],"end":[951,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"PathBuf","id":"1:5394:188","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:1208":{"id":"0:1208","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1337,0],"end":[1394,1]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"std::convert::TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"name":"std::convert::TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i64"}}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"},{"trait_bound":{"trait":{"name":"std::error::Error","id":"2:2578:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"ToString","id":"5:5350:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["map","possible_values","parse","try_map"],"trait":{"name":"TypedValueParser","id":"0:1125:2173","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:3791:2170","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:1210:5472","0:1211:5682"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2528-0:3229:1653":{"id":"b:2:2528-0:3229:1653","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3229:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2531:127","2:2532:1426"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1479":{"id":"0:1479","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[31,0],"end":[31,22]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"os_str::OsStr","name":"OsStr","id":"0:3547:181","glob":false}},"b:2:2513-0:3229:1653":{"id":"b:2:2513-0:3229:1653","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3229:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2516:2263"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1858":{"id":"0:1858","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1424,0],"end":[1428,1]},"visibility":{"restricted":{"parent":"0:1754:6526","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["nth_back","rfold","advance_back_by","try_rfold","rfind"],"trait":{"name":"DoubleEndedIterator","id":"2:7079:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:4151:6459","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:1860:6920"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1027":{"id":"0:1027","crate_id":0,"name":null,"span":{"filename":"src/builder/styled_str.rs","begin":[276,0],"end":[280,1]},"visibility":{"restricted":{"parent":"0:986:2149","path":"::builder::styled_str"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["gt","ge","le","lt"],"trait":{"name":"PartialOrd","id":"2:2327:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1028:1003"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:237:3530":{"id":"0:237:3530","crate_id":0,"name":"overrides_with_all","span":{"filename":"src/builder/arg.rs","begin":[3688,4],"end":[3691,5]},"visibility":"public","docs":"Sets multiple mutually overridable arguments by name.\n\ni.e. this argument and the following argument will override each other in POSIX style\n(whichever argument was specified at runtime **last** \"wins\")\n\n**NOTE:** When an argument is overridden it is essentially as if it never was used, any\nconflicts, requirements, etc. are evaluated **after** all \"overrides\" have been removed\n\n**NOTE:** Overriding an argument implies they [conflict][Arg::conflicts_with_all`].\n\n# Examples\n\n```rust\n# use clap::{Command, arg};\nlet m = Command::new(\"prog\")\n    .arg(arg!(-f --flag \"some flag\")\n        .conflicts_with(\"color\"))\n    .arg(arg!(-d --debug \"other flag\"))\n    .arg(arg!(-c --color \"third flag\")\n        .overrides_with_all([\"flag\", \"debug\"]))\n    .get_matches_from(vec![\n        \"prog\", \"-f\", \"-d\", \"-c\"]);\n            //    ^~~~~~^~~~~~~~~ flag and debug are overridden by color\n\nassert!(*m.get_one::<bool>(\"color\").unwrap()); // even though flag conflicts with color, it's as if flag\n                                // and debug were never used because they were overridden\n                                // with color\nassert!(!*m.get_one::<bool>(\"debug\").unwrap());\nassert!(!*m.get_one::<bool>(\"flag\").unwrap());\n```","links":{"Arg::conflicts_with_all`":"0:235:3499"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["names",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7042:149","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}}}}]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl Into<Id>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}},{"name":"impl IntoIterator<Item = impl Into<Id>>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7042:149","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:59:1664":{"id":"0:59:1664","crate_id":0,"name":"Args","span":{"filename":"src/derive.rs","begin":[284,0],"end":[299,1]},"visibility":"public","docs":"Parse a set of arguments into a user-defined container.\n\nImplementing this trait lets a parent container delegate argument parsing behavior to `Self`.\nwith:\n- `#[command(flatten)] args: ChildArgs`: Attribute can only be used with struct fields that impl\n  `Args`.\n- `Variant(ChildArgs)`: No attribute is used with enum variants that impl `Args`.\n\nSee the [derive reference](crate::_derive) for attributes and best practices.\n\n**NOTE:** Deriving requires the [`derive` feature flag][crate::_features]\n\n# Example\n\n ```ignore\n#[derive(clap::Parser)]\nstruct Args {\n    #[command(flatten)]\n    logging: LogArgs,\n}\n\n#[derive(clap::Args)]\nstruct LogArgs {\n    #[arg(long, short = 'v', action = clap::ArgAction::Count)]\n    verbose: u8,\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:60:2085","0:61:2088","0:62:2091"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FromArgMatches","id":"0:54:1666","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:96"]}},"0:1086":{"id":"0:1086","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[320,0],"end":[325,1]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":"Create an `i64` [`ValueParser`] from a `N..M` range\n\nSee [`RangedI64ValueParser`] for more control over the output type.\n\nSee also [`RangedU64ValueParser`]\n\n# Examples\n\n```rust\nlet mut cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"port\")\n            .long(\"port\")\n            .value_parser(3000..4000)\n            .action(clap::ArgAction::Set)\n            .required(true)\n    );\n\nlet m = cmd.try_get_matches_from_mut([\"cmd\", \"--port\", \"3001\"]).unwrap();\nlet port: i64 = *m.get_one(\"port\")\n    .expect(\"required\");\nassert_eq!(port, 3001);\n```","links":{"`RangedU64ValueParser`":"0:3810:2171","`RangedI64ValueParser`":"0:3791:2170","`ValueParser`":"0:1054:2174"},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Range","id":"2:46457:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i64"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1054:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1087:673"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:963:600":{"id":"0:963:600","crate_id":0,"name":"eq","span":{"filename":"src/builder/str.rs","begin":[202,4],"end":[204,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1639":{"id":"0:1639","crate_id":0,"name":null,"span":{"filename":"src/error/mod.rs","begin":[762,0],"end":[766,1]},"visibility":{"restricted":{"parent":"0:1509:1662","path":"::error"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ErrorFormatter","id":"0:1547:6079","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8596:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1581:127","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["0:1641:655"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:2799:1857":{"id":"0:2799:1857","crate_id":0,"name":"Append","span":{"filename":"src/builder/action.rs","begin":[75,4],"end":[75,10]},"visibility":"default","docs":"When encountered, store the associated value(s) in [`ArgMatches`][crate::ArgMatches]\n\n# Examples\n\n```rust\n# use clap::Command;\n# use clap::Arg;\nlet cmd = Command::new(\"mycmd\")\n    .arg(\n        Arg::new(\"flag\")\n            .long(\"flag\")\n            .action(clap::ArgAction::Append)\n    );\n\nlet matches = cmd.try_get_matches_from([\"mycmd\", \"--flag\", \"value1\", \"--flag\", \"value2\"]).unwrap();\nassert!(matches.contains_id(\"flag\"));\nassert_eq!(\n    matches.get_many::<String>(\"flag\").unwrap_or_default().map(|v| v.as_str()).collect::<Vec<_>>(),\n    vec![\"value1\", \"value2\"]\n);\n```","links":{"crate::ArgMatches":"0:4112:1655"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"0:1395:2151":{"id":"0:1395:2151","crate_id":0,"name":"value_parser","span":{"filename":"src/builder/value_parser.rs","begin":[2365,0],"end":[2371,1]},"visibility":"public","docs":"Select a [`ValueParser`] implementation from the intended type\n\nSupported types\n- [`ValueParserFactory` types][ValueParserFactory], including\n  - [Native types][ValueParser]: `bool`, `String`, `OsString`, `PathBuf`\n  - [Ranged numeric types][RangedI64ValueParser]: `u8`, `i8`, `u16`, `i16`, `u32`, `i32`, `u64`, `i64`\n- [`ValueEnum` types][crate::ValueEnum]\n- [`From<OsString>` types][std::convert::From] and [`From<&OsStr>` types][std::convert::From]\n- [`From<String>` types][std::convert::From] and [`From<&str>` types][std::convert::From]\n- [`FromStr` types][std::str::FromStr], including usize, isize\n\n# Example\n\nUsage:\n```rust\n# use std::path::PathBuf;\n# use std::path::Path;\nlet mut cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"output\")\n            .value_parser(clap::value_parser!(PathBuf))\n            .required(true)\n    );\n\nlet m = cmd.try_get_matches_from_mut([\"cmd\", \"file.txt\"]).unwrap();\nlet port: &PathBuf = m.get_one(\"output\")\n    .expect(\"required\");\nassert_eq!(port, Path::new(\"file.txt\"));\n```\n\nExample mappings:\n```rust\n# use clap::ColorChoice;\n// Built-in types\nlet parser = clap::value_parser!(String);\nassert_eq!(format!(\"{:?}\", parser), \"ValueParser::string\");\nlet parser = clap::value_parser!(std::ffi::OsString);\nassert_eq!(format!(\"{:?}\", parser), \"ValueParser::os_string\");\nlet parser = clap::value_parser!(std::path::PathBuf);\nassert_eq!(format!(\"{:?}\", parser), \"ValueParser::path_buf\");\nclap::value_parser!(u16).range(3000..);\nclap::value_parser!(u64).range(3000..);\n\n// FromStr types\nlet parser = clap::value_parser!(usize);\nassert_eq!(format!(\"{:?}\", parser), \"_AnonymousValueParser(ValueParser::other(usize))\");\n\n// ValueEnum types\nclap::value_parser!(ColorChoice);\n```","links":{"std::convert::From":"2:2490:132","crate::ValueEnum":"0:67:1669","std::str::FromStr":"2:11077:5547","RangedI64ValueParser":"0:3791:2170","`ValueParser`":"0:1054:2174","ValueParserFactory":"0:1306:2175","ValueParser":"0:1054:2174"},"attrs":["#[macro_export]"],"deprecation":null,"kind":"macro","inner":"macro_rules! value_parser {\n    ($name:ty) => { ... };\n}"},"0:3584:600":{"id":"0:3584:600","crate_id":0,"name":"eq","span":{"filename":"src/builder/possible_value.rs","begin":[34,32],"end":[34,41]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:3571:1966","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2726:5340-0:1581:127":{"id":"a:2:2726:5340-0:1581:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:2726:5340","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2726:5340","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1581:127","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:215:3282":{"id":"0:215:3282","crate_id":0,"name":"group","span":{"filename":"src/builder/arg.rs","begin":[2588,4],"end":[2595,5]},"visibility":"public","docs":"The name of the [`ArgGroup`] the argument belongs to.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ArgAction};\nArg::new(\"debug\")\n    .long(\"debug\")\n    .action(ArgAction::SetTrue)\n    .group(\"mode\")\n# ;\n```\n\nMultiple arguments can be a member of a single group and then the group checked as if it\nwas one of said arguments.\n\n```rust\n# use clap::{Command, Arg, ArgAction};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"debug\")\n        .long(\"debug\")\n        .action(ArgAction::SetTrue)\n        .group(\"mode\"))\n    .arg(Arg::new(\"verbose\")\n        .long(\"verbose\")\n        .action(ArgAction::SetTrue)\n        .group(\"mode\"))\n    .get_matches_from(vec![\n        \"prog\", \"--debug\"\n    ]);\nassert!(m.contains_id(\"mode\"));\n```\n\n[`ArgGroup`]: crate::ArgGroup","links":{"crate::ArgGroup":"0:3229:1653"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["group_id",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl IntoResettable<Id>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1087:673":{"id":"0:1087:673","crate_id":0,"name":"from","span":{"filename":"src/builder/value_parser.rs","begin":[321,4],"end":[324,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["value",{"kind":"resolved_path","inner":{"name":"std::ops::Range","id":"2:46457:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i64"}}],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3585":{"id":"0:3585","crate_id":0,"name":null,"span":{"filename":"src/builder/possible_value.rs","begin":[34,43],"end":[34,45]},"visibility":{"restricted":{"parent":"0:780:2146","path":"::builder::possible_value"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2673:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:3571:1966","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1152:915":{"id":"0:1152:915","crate_id":0,"name":"new","span":{"filename":"src/builder/value_parser.rs","begin":[903,4],"end":[905,5]},"visibility":"public","docs":"Implementation for [`ValueParser::os_string`]","links":{"`ValueParser::os_string`":"0:1074:5164"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:493:4791":{"id":"0:493:4791","crate_id":0,"name":"visible_short_flag_alias","span":{"filename":"src/builder/command.rs","begin":[2476,4],"end":[2484,5]},"visibility":"public","docs":"Add an alias, which functions as  \"visible\" short flag subcommand\n\nThis will automatically dispatch as if this subcommand was used. This is more efficient,\nand easier than creating multiple hidden subcommands as one only needs to check for the\nexistence of this command, and not all variants.\n\nSee also [`Command::short_flag_alias`].\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg, };\nlet m = Command::new(\"myprog\")\n            .subcommand(Command::new(\"test\").short_flag('t')\n                .visible_short_flag_alias('d'))\n            .get_matches_from(vec![\"myprog\", \"-d\"]);\nassert_eq!(m.subcommand_name(), Some(\"test\"));\n```\n[`Command::short_flag_alias`]: Command::short_flag_alias()","links":{"Command::short_flag_alias()":"0:486:4748"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["name",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"char"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl IntoResettable<char>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"char"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4555":{"id":"0:4555","crate_id":0,"name":null,"span":{"filename":"src/util/color.rs","begin":[5,29],"end":[5,31]},"visibility":{"restricted":{"parent":"0:2776:1564","path":"::util::color"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2290:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:4542:1657","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4559:600":{"id":"0:4559:600","crate_id":0,"name":"eq","span":{"filename":"src/util/color.rs","begin":[5,33],"end":[5,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:4542:1657","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:458:1838":{"id":"0:458:1838","crate_id":0,"name":"about","span":{"filename":"src/builder/command.rs","begin":[1494,4],"end":[1497,5]},"visibility":"public","docs":"Sets the program's description for the short help (`-h`).\n\nIf [`Command::long_about`] is not specified, this message will be displayed for `--help`.\n\n**NOTE:** Only `Command::about` (short format) is used in completion\nscript generation in order to be concise.\n\nSee also [`crate_description!`](crate::crate_description!).\n\n# Examples\n\n```no_run\n# use clap::Command;\nCommand::new(\"myprog\")\n    .about(\"Does really amazing things for great people\")\n# ;\n```","links":{"`Command::long_about`":"0:459:4023"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["about",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl IntoResettable<StyledStr>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4276:6989":{"id":"0:4276:6989","crate_id":0,"name":"DefaultValue","span":{"filename":"src/parser/matches/value_source.rs","begin":[6,4],"end":[6,16]},"visibility":"default","docs":"Value came [`Arg::default_value`][crate::Arg::default_value]","links":{"crate::Arg::default_value":"0:193:2260"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"0:1547:6079":{"id":"0:1547:6079","crate_id":0,"name":"ErrorFormatter","span":{"filename":"src/error/format.rs","begin":[16,0],"end":[19,1]},"visibility":"public","docs":"Defines how to format an error for displaying to the user","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:1548:2020"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:1551","0:1555"]}},"0:987":{"id":"0:987","crate_id":0,"name":null,"span":{"filename":"src/builder/styled_str.rs","begin":[13,0],"end":[237,1]},"visibility":{"restricted":{"parent":"0:986:2149","path":"::builder::styled_str"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:988:915","0:989:5489"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:2532:1426":{"id":"2:2532:1426","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48278:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:261:3575":{"id":"0:261:3575","crate_id":0,"name":"get_value_delimiter","span":{"filename":"src/builder/arg.rs","begin":[3857,4],"end":[3859,5]},"visibility":"public","docs":"Get the delimiter between multiple values","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"char"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2528-0:2796:1649":{"id":"b:2:2528-0:2796:1649","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgAction","id":"0:2796:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2531:127","2:2532:1426"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:799:5410":{"id":"0:799:5410","crate_id":0,"name":"get_name_and_aliases","span":{"filename":"src/builder/possible_value.rs","begin":[200,4],"end":[202,5]},"visibility":"public","docs":"Returns all valid values of the argument value.\n\nNamely the name and all aliases.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:7156:156","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}}]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'_"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2676:225-0:3229:1653":{"id":"a:2:2676:225-0:3229:1653","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3229:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:264:3582":{"id":"0:264:3582","crate_id":0,"name":"get_value_hint","span":{"filename":"src/builder/arg.rs","begin":[3875,4],"end":[3888,5]},"visibility":"public","docs":"Get the value hint of this argument","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:3704:1651","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:891":{"id":"0:891","crate_id":0,"name":null,"span":{"filename":"src/builder/resettable.rs","begin":[171,0],"end":[175,1]},"visibility":{"restricted":{"parent":"0:844:2148","path":"::builder::resettable"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ValueRange","id":"0:3588:2156","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ValueRange","id":"0:3588:2156","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"generic","inner":"I"},"items":["0:893:2452"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:866":{"id":"0:866","crate_id":0,"name":null,"span":{"filename":"src/builder/resettable.rs","begin":[78,0],"end":[85,1]},"visibility":{"restricted":{"parent":"0:844:2148","path":"::builder::resettable"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"items":["0:867:2452"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4052":{"id":"0:4052","crate_id":0,"name":null,"span":{"filename":"src/error/kind.rs","begin":[2,40],"end":[2,42]},"visibility":{"restricted":{"parent":"0:1566:778","path":"::error::kind"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2673:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4009:3985","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:7736:6523-0:1553:6083":{"id":"a:2:7736:6523-0:1553:6083","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7736:6523","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RichFormatter","id":"0:1553:6083","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:7735:6524-0:3603:2158":{"id":"a:2:7735:6524-0:3603:2158","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:7735:6524","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7735:6524","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Resettable","id":"0:3603:2158","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1814:6628":{"id":"0:1814:6628","crate_id":0,"name":"try_get_occurrences","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1110,4],"end":[1124,5]},"visibility":"public","docs":"Non-panicking version of [`ArgMatches::get_occurrences`]","links":{"`ArgMatches::get_occurrences`":"0:1781:6626"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48278:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OccurrencesRef","id":"0:4212:6627","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4091:6463","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Any","id":"2:3319:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3845:412":{"id":"0:3845:412","crate_id":0,"name":"clone","span":{"filename":"src/builder/value_parser.rs","begin":[1808,15],"end":[1808,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"BoolishValueParser","id":"0:3842:2162","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1210:5472":{"id":"0:1210:5472","crate_id":0,"name":"Value","span":{"filename":"src/builder/value_parser.rs","begin":[1342,4],"end":[1342,19]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"0:1499":{"id":"0:1499","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[51,0],"end":[51,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"value_parser::StringValueParser","name":"StringValueParser","id":"0:3749:2172","glob":false}},"b:2:2241-0:4009:3985":{"id":"b:2:2241-0:4009:3985","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2235:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4009:3985","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2243:26835"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2513-0:4151:6459":{"id":"b:2:2513-0:4151:6459","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:4151:6459","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2516:2263"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:38:2023":{"id":"0:38:2023","crate_id":0,"name":"try_parse","span":{"filename":"src/derive.rs","begin":[96,4],"end":[99,5]},"visibility":"default","docs":"Parse from `std::env::args_os()`, return Err on error.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48278:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:12:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3549":{"id":"0:3549","crate_id":0,"name":null,"span":{"filename":"src/builder/os_str.rs","begin":[7,9],"end":[7,16]},"visibility":{"restricted":{"parent":"0:707:2145","path":"::builder::os_str"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2564:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3550:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:224:3397":{"id":"0:224:3397","crate_id":0,"name":"required_if_eq","span":{"filename":"src/builder/arg.rs","begin":[3192,4],"end":[3195,5]},"visibility":"public","docs":"This argument is [required] only if the specified `arg` is present at runtime and its value\nequals `val`.\n\n# Examples\n\n```rust\n# use clap::Arg;\nArg::new(\"config\")\n    .required_if_eq(\"other_arg\", \"value\")\n# ;\n```\n\n```rust\n# use clap::{Command, Arg, error::ErrorKind, ArgAction};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .action(ArgAction::Set)\n        .required_if_eq(\"other\", \"special\")\n        .long(\"config\"))\n    .arg(Arg::new(\"other\")\n        .long(\"other\")\n        .action(ArgAction::Set))\n    .try_get_matches_from(vec![\n        \"prog\", \"--other\", \"not-special\"\n    ]);\n\nassert!(res.is_ok()); // We didn't use --other=special, so \"cfg\" wasn't required\n\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .action(ArgAction::Set)\n        .required_if_eq(\"other\", \"special\")\n        .long(\"config\"))\n    .arg(Arg::new(\"other\")\n        .long(\"other\")\n        .action(ArgAction::Set))\n    .try_get_matches_from(vec![\n        \"prog\", \"--other\", \"special\"\n    ]);\n\n// We did use --other=special so \"cfg\" had become required but was missing.\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind(), ErrorKind::MissingRequiredArgument);\n\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .action(ArgAction::Set)\n        .required_if_eq(\"other\", \"special\")\n        .long(\"config\"))\n    .arg(Arg::new(\"other\")\n        .long(\"other\")\n        .action(ArgAction::Set))\n    .try_get_matches_from(vec![\n        \"prog\", \"--other\", \"SPECIAL\"\n    ]);\n\n// By default, the comparison is case-sensitive, so \"cfg\" wasn't required\nassert!(res.is_ok());\n\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .action(ArgAction::Set)\n        .required_if_eq(\"other\", \"special\")\n        .long(\"config\"))\n    .arg(Arg::new(\"other\")\n        .long(\"other\")\n        .ignore_case(true)\n        .action(ArgAction::Set))\n    .try_get_matches_from(vec![\n        \"prog\", \"--other\", \"SPECIAL\"\n    ]);\n\n// However, case-insensitive comparisons can be enabled.  This typically occurs when using Arg::possible_values().\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind(), ErrorKind::MissingRequiredArgument);\n```\n[`Arg::requires(name)`]: Arg::requires()\n[Conflicting]: Arg::conflicts_with()\n[required]: Arg::required()","links":{"Arg::required()":"0:166:1870"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["arg_id",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}],["val",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl Into<Id>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}},{"name":"impl Into<OsStr>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3975":{"id":"0:3975","crate_id":0,"name":null,"span":{"filename":"src/error/context.rs","begin":[2,44],"end":[2,48]},"visibility":{"restricted":{"parent":"0:1533:479","path":"::error::context"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:8819:140","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:3929:6081","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3976:707"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:5:5352-0:4542:1657":{"id":"b:5:5352-0:4542:1657","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:8601:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5350:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:4542:1657","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5354:1406"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2517-0:3929:6081":{"id":"b:2:2517-0:3929:6081","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:3929:6081","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2519:673"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:304:600":{"id":"0:304:600","crate_id":0,"name":"eq","span":{"filename":"src/builder/arg.rs","begin":[4250,4],"end":[4252,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3195:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3942:6201":{"id":"0:3942:6201","crate_id":0,"name":"ActualNumValues","span":{"filename":"src/error/context.rs","begin":[19,4],"end":[19,19]},"visibility":"default","docs":"Number of values present","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"0:60:2085":{"id":"0:60:2085","crate_id":0,"name":"group_id","span":{"filename":"src/derive.rs","begin":[286,4],"end":[288,5]},"visibility":"default","docs":"Report the [`ArgGroup::id`][crate::ArgGroup::id] for this set of arguments","links":{"crate::ArgGroup::id":"0:319:1860"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"crate::Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3799:412":{"id":"0:3799:412","crate_id":0,"name":"clone","span":{"filename":"src/builder/value_parser.rs","begin":[1251,15],"end":[1251,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:3791:2170","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:462:4024":{"id":"0:462:4024","crate_id":0,"name":"before_help","span":{"filename":"src/builder/command.rs","begin":[1583,4],"end":[1586,5]},"visibility":"public","docs":"Free-form help text for before auto-generated short help (`-h`).\n\nThis is often used for header, copyright, or license information.\n\nIf [`Command::before_long_help`] is not specified, this message will be displayed for `--help`.\n\n# Examples\n\n```no_run\n# use clap::Command;\nCommand::new(\"myprog\")\n    .before_help(\"Some info I'd like to appear before the help info\")\n# ;\n```","links":{"`Command::before_long_help`":"0:463:4025"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["help",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl IntoResettable<StyledStr>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1028:1003":{"id":"0:1028:1003","crate_id":0,"name":"partial_cmp","span":{"filename":"src/builder/styled_str.rs","begin":[277,4],"end":[279,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"std::cmp::Ordering","id":"2:38204:180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2073":{"id":"0:2073","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/mod.rs","begin":[7,0],"end":[7,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"arg_matches::IdsRef","name":"IdsRef","id":"0:4142:6457","glob":false}},"0:4126":{"id":"0:4126","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[65,43],"end":[65,45]},"visibility":{"restricted":{"parent":"0:1754:6526","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2673:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4112:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2523-0:4522:1658":{"id":"b:2:2523-0:4522:1658","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2493:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2526:127","2:2527:1427"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2513-0:4009:3985":{"id":"b:2:2513-0:4009:3985","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4009:3985","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2516:2263"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2517-0:1553:6083":{"id":"b:2:2517-0:1553:6083","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RichFormatter","id":"0:1553:6083","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2519:673"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11509:29197":{"id":"2:11509:29197","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2741:655":{"id":"0:2741:655","crate_id":0,"name":"fmt","span":{"filename":"src/util/id.rs","begin":[95,4],"end":[97,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"std::fmt::Formatter","id":"2:8556:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"std::fmt::Result","id":"2:8545:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:5352-0:3638:2154":{"id":"b:5:5352-0:3638:2154","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:8601:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5350:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5354:1406"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2662:217-0:3195:1652":{"id":"a:2:2662:217-0:3195:1652","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3195:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1787:6690":{"id":"0:1787:6690","crate_id":0,"name":"remove_many","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[424,4],"end":[429,5]},"visibility":"public","docs":"Return values of a specific option or positional argument.\n\ni.e. an argument that takes multiple values at runtime.\n\nReturns an error if the wrong type was used.  No item will have been removed.\n\nReturns `None` if the option wasn't present.\n\n# Panic\n\nIf the argument definition and access mismatch.  To handle this case programmatically, see\n[`ArgMatches::try_remove_many`].\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, value_parser, ArgAction};\nlet mut m = Command::new(\"myprog\")\n    .arg(Arg::new(\"file\")\n        .action(ArgAction::Append)\n        .num_args(1..)\n        .required(true))\n    .get_matches_from(vec![\n        \"myprog\", \"file1.txt\", \"file2.txt\", \"file3.txt\", \"file4.txt\",\n    ]);\nlet vals: Vec<String> = m.remove_many(\"file\")\n    .expect(\"`file`is required\")\n    .collect();\nassert_eq!(vals, [\"file1.txt\", \"file2.txt\", \"file3.txt\", \"file4.txt\"]);\n```","links":{"`ArgMatches::try_remove_many`":"0:1822:6691"},"attrs":["#[track_caller]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Values","id":"0:4151:6459","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Any","id":"2:3319:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2726:5340-0:4161:6460":{"id":"a:2:2726:5340-0:4161:6460","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2726:5340","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValuesRef","id":"0:4161:6460","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:7736:6523-0:3762:2168":{"id":"a:2:7736:6523-0:3762:2168","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7736:6523","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PathBufValueParser","id":"0:3762:2168","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:244:1869":{"id":"0:244:1869","crate_id":0,"name":"get_short","span":{"filename":"src/builder/arg.rs","begin":[3734,4],"end":[3736,5]},"visibility":"public","docs":"Get the short option name for this argument, if any","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"char"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7736:6523-0:3852:2166":{"id":"a:2:7736:6523-0:3852:2166","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7736:6523","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"NonEmptyStringValueParser","id":"0:3852:2166","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4045:655":{"id":"0:4045:655","crate_id":0,"name":"fmt","span":{"filename":"src/error/kind.rs","begin":[2,9],"end":[2,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:8556:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8545:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11494:29194":{"id":"2:11494:29194","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"prim@char":"1:12300:408","str::matches":"2:11491:1855","self::pattern":"2:11116:8056","`DoubleEndedIterator`":"2:7079:120"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:50332:8075","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11121:8050","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11121:8050","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11136:8051","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11442:29183":{"id":"2:11442:29183","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11443:29184"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:50384:8060","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:185:2910":{"id":"0:185:2910","crate_id":0,"name":"allow_hyphen_values","span":{"filename":"src/builder/arg.rs","begin":[1371,4],"end":[1377,5]},"visibility":"public","docs":"Allows values which start with a leading hyphen (`-`)\n\nTo limit values to just numbers, see\n[`allow_negative_numbers`][Arg::allow_negative_numbers].\n\nSee also [`trailing_var_arg`][Arg::trailing_var_arg].\n\n**NOTE:** Setting this requires [taking values][Arg::num_args]\n\n**WARNING:** Prior arguments with `allow_hyphen_values(true)` get precedence over known\nflags but known flags get precedence over the next possible positional argument with\n`allow_hyphen_values(true)`.  When combined with [`Arg::num_args(..)`],\n[`Arg::value_terminator`] is one way to ensure processing stops.\n\n**WARNING**: Take caution when using this setting combined with another argument using\n[`Arg::num_args`], as this becomes ambiguous `$ prog --arg -- -- val`. All\nthree `--, --, val` will be values when the user may have thought the second `--` would\nconstitute the normal, \"Only positional args follow\" idiom.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ArgAction};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"pat\")\n        .action(ArgAction::Set)\n        .allow_hyphen_values(true)\n        .long(\"pattern\"))\n    .get_matches_from(vec![\n        \"prog\", \"--pattern\", \"-file\"\n    ]);\n\nassert_eq!(m.get_one::<String>(\"pat\").unwrap(), \"-file\");\n```\n\nNot setting `Arg::allow_hyphen_values(true)` and supplying a value which starts with a\nhyphen is an error.\n\n```rust\n# use clap::{Command, Arg, error::ErrorKind, ArgAction};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"pat\")\n        .action(ArgAction::Set)\n        .long(\"pattern\"))\n    .try_get_matches_from(vec![\n        \"prog\", \"--pattern\", \"-file\"\n    ]);\n\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind(), ErrorKind::UnknownArgument);\n```\n[`Arg::num_args(1)`]: Arg::num_args()","links":{"`Arg::num_args`":"0:178:1872","Arg::trailing_var_arg":"0:164:2577","Arg::num_args":"0:178:1872","`Arg::value_terminator`":"0:190:2967","Arg::allow_negative_numbers":"0:186:2918"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1054:2174":{"id":"0:1054:2174","crate_id":0,"name":"ValueParser","span":{"filename":"src/builder/value_parser.rs","begin":[59,0],"end":[59,41]},"visibility":"public","docs":"Parse/validate argument values\n\nSpecified with [`Arg::value_parser`][crate::Arg::value_parser].\n\n`ValueParser` defines how to convert a raw argument value into a validated and typed value for\nuse within an application.\n\nSee\n- [`value_parser!`][crate::value_parser] for automatically selecting an implementation for a given type\n- [`ValueParser::new`] for additional [`TypedValueParser`] that can be used\n\n# Example\n\n```rust\nlet mut cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"color\")\n            .long(\"color\")\n            .value_parser([\"always\", \"auto\", \"never\"])\n            .default_value(\"auto\")\n    )\n    .arg(\n        clap::Arg::new(\"hostname\")\n            .long(\"hostname\")\n            .value_parser(clap::builder::NonEmptyStringValueParser::new())\n            .action(clap::ArgAction::Set)\n            .required(true)\n    )\n    .arg(\n        clap::Arg::new(\"port\")\n            .long(\"port\")\n            .value_parser(clap::value_parser!(u16).range(3000..))\n            .action(clap::ArgAction::Set)\n            .required(true)\n    );\n\nlet m = cmd.try_get_matches_from_mut(\n    [\"cmd\", \"--hostname\", \"rust-lang.org\", \"--port\", \"3001\"]\n).unwrap();\n\nlet color: &String = m.get_one(\"color\")\n    .expect(\"default\");\nassert_eq!(color, \"auto\");\n\nlet hostname: &String = m.get_one(\"hostname\")\n    .expect(\"required\");\nassert_eq!(hostname, \"rust-lang.org\");\n\nlet port: u16 = *m.get_one(\"port\")\n    .expect(\"required\");\nassert_eq!(port, 3001);\n```","links":{"`ValueParser::new`":"0:1070:915","crate::Arg::value_parser":"0:177:2151","crate::value_parser":"0:1395:2151","`TypedValueParser`":"0:1125:2173"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:1069","0:1076","a:2:7735:6524-0:1054:2174","a:2:2676:225-0:1054:2174","a:2:2662:217-0:1054:2174","a:2:2726:5340-0:1054:2174","a:2:7736:6523-0:1054:2174","b:2:2523-0:1054:2174","b:2:2238-0:1054:2174","b:2:2517-0:1054:2174","b:2:2513-0:1054:2174","b:2:2241-0:1054:2174","b:2:2528-0:1054:2174","b:2:3321-0:1054:2174","b:5:681-0:1054:2174","0:872","0:894","0:1081","0:1086","0:1088","0:1090","0:1092","0:1094","0:1096","0:1098","0:1104","0:1107","0:1109"]}},"0:286:3641":{"id":"0:286:3641","crate_id":0,"name":"is_trailing_var_arg_set","span":{"filename":"src/builder/arg.rs","begin":[4045,4],"end":[4047,5]},"visibility":"public","docs":"Report whether [`Arg::trailing_var_arg`] is set","links":{"`Arg::trailing_var_arg`":"0:164:2577"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2726:5340-0:4151:6459":{"id":"a:2:2726:5340-0:4151:6459","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2726:5340","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:4151:6459","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3930:6175":{"id":"0:3930:6175","crate_id":0,"name":"InvalidSubcommand","span":{"filename":"src/error/context.rs","begin":[7,4],"end":[7,21]},"visibility":"default","docs":"The cause of the error","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"0:3257:655":{"id":"0:3257:655","crate_id":0,"name":"fmt","span":{"filename":"src/builder/arg_predicate.rs","begin":[6,16],"end":[6,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:8556:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8545:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4530":{"id":"0:4530","crate_id":0,"name":null,"span":{"filename":"src/util/id.rs","begin":[8,25],"end":[8,27]},"visibility":{"restricted":{"parent":"0:2715:1860","path":"::util::id"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2290:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:7736:6523-0:4009:3985":{"id":"a:2:7736:6523-0:4009:3985","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7736:6523","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4009:3985","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3262":{"id":"0:3262","crate_id":0,"name":null,"span":{"filename":"src/builder/arg_predicate.rs","begin":[6,34],"end":[6,36]},"visibility":{"restricted":{"parent":"0:335:2143","path":"::builder::arg_predicate"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2290:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgPredicate","id":"0:3248:2155","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1804:6482":{"id":"0:1804:6482","crate_id":0,"name":"subcommand_name","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1047,4],"end":[1049,5]},"visibility":"public","docs":"The name of the current [subcommand].\n\nReturns `None` if the subcommand wasn't present at runtime,\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg, };\n let app_m = Command::new(\"git\")\n     .subcommand(Command::new(\"clone\"))\n     .subcommand(Command::new(\"push\"))\n     .subcommand(Command::new(\"commit\"))\n     .get_matches();\n\nmatch app_m.subcommand_name() {\n    Some(\"clone\")  => {}, // clone was used\n    Some(\"push\")   => {}, // push was used\n    Some(\"commit\") => {}, // commit was used\n    _              => {}, // Either no subcommand or one not tested for...\n}\n```\n[subcommand]: crate::Command::subcommand\n[`Command`]: crate::Command","links":{"crate::Command::subcommand":"0:402:4142"},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:935":{"id":"0:935","crate_id":0,"name":null,"span":{"filename":"src/builder/str.rs","begin":[111,0],"end":[118,1]},"visibility":{"restricted":{"parent":"0:912:1352","path":"::builder::str"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"2:2904:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:936:227","0:937:540"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3831":{"id":"0:3831","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1612,15],"end":[1612,20]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BoolValueParser","id":"0:3829:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3832:412"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:886:2452":{"id":"0:886:2452","crate_id":0,"name":"into_resettable","span":{"filename":"src/builder/resettable.rs","begin":[154,4],"end":[156,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Resettable","id":"0:3603:2158","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1646":{"id":"0:1646","crate_id":0,"name":null,"span":{"filename":"src/error/mod.rs","begin":[775,0],"end":[786,1]},"visibility":{"restricted":{"parent":"0:1509:1662","path":"::error"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ErrorFormatter","id":"0:1547:6079","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:8601:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1581:127","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["0:1648:655"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:893:2452":{"id":"0:893:2452","crate_id":0,"name":"into_resettable","span":{"filename":"src/builder/resettable.rs","begin":[172,4],"end":[174,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Resettable","id":"0:3603:2158","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ValueRange","id":"0:3588:2156","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3636:707":{"id":"0:3636:707","crate_id":0,"name":"hash","span":{"filename":"src/builder/resettable.rs","begin":[31,61],"end":[31,65]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["state",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"__H"}}}]],"output":{"kind":"tuple","inner":[]},"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:8833:144","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4169:412":{"id":"0:4169:412","crate_id":0,"name":"clone","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1463,9],"end":[1463,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"ValuesRef","id":"0:4161:6460","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:318:915":{"id":"0:318:915","crate_id":0,"name":"new","span":{"filename":"src/builder/arg_group.rs","begin":[109,4],"end":[111,5]},"visibility":"public","docs":"Create a `ArgGroup` using a unique name.\n\nThe name will be used to get values from the group or refer to the group inside of conflict\nand requirement rules.\n\n# Examples\n\n```rust\n# use clap::{Command, ArgGroup};\nArgGroup::new(\"config\")\n# ;\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["id",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl Into<Id>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:917":{"id":"0:917","crate_id":0,"name":null,"span":{"filename":"src/builder/str.rs","begin":[41,0],"end":[45,1]},"visibility":{"restricted":{"parent":"0:912:1352","path":"::builder::str"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:918:673"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1873":{"id":"0:1873","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1481,0],"end":[1485,1]},"visibility":{"restricted":{"parent":"0:1754:6526","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["nth_back","rfold","advance_back_by","try_rfold","rfind"],"trait":{"name":"DoubleEndedIterator","id":"2:7079:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValuesRef","id":"0:4161:6460","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:1876:6920"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3967":{"id":"0:3967","crate_id":0,"name":null,"span":{"filename":"src/error/context.rs","begin":[2,22],"end":[2,27]},"visibility":{"restricted":{"parent":"0:1533:479","path":"::error::context"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8596:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:3929:6081","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3968:655"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:169:2691":{"id":"0:169:2691","crate_id":0,"name":"global","span":{"filename":"src/builder/arg.rs","begin":[816,4],"end":[822,5]},"visibility":"public","docs":"Specifies that an argument can be matched to all child [`Subcommand`]s.\n\n**NOTE:** Global arguments *only* propagate down, **not** up (to parent commands), however\ntheir values once a user uses them will be propagated back up to parents. In effect, this\nmeans one should *define* all global arguments at the top level, however it doesn't matter\nwhere the user *uses* the global argument.\n\n# Examples\n\nAssume an application with two subcommands, and you'd like to define a\n`--verbose` flag that can be called on any of the subcommands and parent, but you don't\nwant to clutter the source with three duplicate [`Arg`] definitions.\n\n```rust\n# use clap::{Command, Arg, ArgAction};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"verb\")\n        .long(\"verbose\")\n        .short('v')\n        .action(ArgAction::SetTrue)\n        .global(true))\n    .subcommand(Command::new(\"test\"))\n    .subcommand(Command::new(\"do-stuff\"))\n    .get_matches_from(vec![\n        \"prog\", \"do-stuff\", \"--verbose\"\n    ]);\n\nassert_eq!(m.subcommand_name(), Some(\"do-stuff\"));\nlet sub_m = m.subcommand_matches(\"do-stuff\").unwrap();\nassert_eq!(*sub_m.get_one::<bool>(\"verb\").expect(\"defaulted by clap\"), true);\n```\n\n[`Subcommand`]: crate::Subcommand","links":{"crate::Subcommand":"0:63:1668","`Arg`":"0:3195:1652"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3872:5771":{"id":"0:3872:5771","crate_id":0,"name":"TryMapValueParser","span":{"filename":"src/builder/value_parser.rs","begin":[2004,0],"end":[2007,1]},"visibility":"public","docs":"Adapt a `TypedValueParser` from one value to another\n\nSee [`TypedValueParser::try_map`]","links":{"`TypedValueParser::try_map`":"0:1133:5769"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":[]}},"0:4032:6192":{"id":"0:4032:6192","crate_id":0,"name":"InvalidUtf8","span":{"filename":"src/error/kind.rs","begin":[243,4],"end":[243,15]},"visibility":"default","docs":"Occurs when the user provides a value containing invalid UTF-8.\n\nTo allow arbitrary data\n- Set [`Arg::value_parser(value_parser!(OsString))`] for argument values\n- Set [`Command::external_subcommand_value_parser`] for external-subcommand\n  values\n\n# Platform Specific\n\nNon-Windows platforms only (such as Linux, Unix, OSX, etc.)\n\n# Examples\n\n ```\n# use clap::{Command, Arg, error::ErrorKind, ArgAction};\n# use std::os::unix::ffi::OsStringExt;\n# use std::ffi::OsString;\nlet result = Command::new(\"prog\")\n    .arg(Arg::new(\"utf8\")\n        .short('u')\n        .action(ArgAction::Set))\n    .try_get_matches_from(vec![OsString::from(\"myprog\"),\n                                OsString::from(\"-u\"),\n                                OsString::from_vec(vec![0xE9])]);\nassert!(result.is_err());\nassert_eq!(result.unwrap_err().kind(), ErrorKind::InvalidUtf8);\n```\n\n[`Arg::allow_invalid_utf8`]: crate::Arg::allow_invalid_utf8\n[`Command::external_subcommand_value_parser`]: crate::Command::external_subcommand_value_parser","links":{"crate::Command::external_subcommand_value_parser":"0:503:4877"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"0:931":{"id":"0:931","crate_id":0,"name":null,"span":{"filename":"src/builder/str.rs","begin":[97,0],"end":[102,1]},"visibility":{"restricted":{"parent":"0:912:1352","path":"::builder::str"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:8601:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:932:655"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2517-0:3505:1650":{"id":"b:2:2517-0:3505:1650","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Command","id":"0:3505:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2519:673"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:55:2065":{"id":"0:55:2065","crate_id":0,"name":"from_arg_matches","span":{"filename":"src/derive.rs","begin":[209,4],"end":[209,69]},"visibility":"default","docs":"Instantiate `Self` from [`ArgMatches`], parsing the arguments as needed.\n\nMotivation: If our application had two CLI options, `--name\n<STRING>` and the flag `--debug`, we may create a struct as follows:\n\n ```ignore\nstruct Context {\n    name: String,\n    debug: bool\n}\n```\n\nWe then need to convert the `ArgMatches` that `clap` generated into our struct.\n`from_arg_matches` serves as the equivalent of:\n\n ```ignore\n# use clap::ArgMatches;\n# struct Context {\n#   name: String,\n#   debug: bool\n# }\nimpl From<ArgMatches> for Context {\n   fn from(m: ArgMatches) -> Self {\n       Context {\n           name: m.get_one::<String>(\"name\").unwrap().clone(),\n           debug: *m.get_one::<bool>(\"debug\").expect(\"defaulted by clap\"),\n       }\n   }\n}\n```","links":{"`ArgMatches`":"0:4112:1655"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["matches",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4112:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48278:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:12:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:3704:1651":{"id":"0:3704:1651","crate_id":0,"name":"ValueHint","span":{"filename":"src/builder/value_hint.rs","begin":[29,0],"end":[67,1]},"visibility":"public","docs":"Provide shell with hint on how to complete an argument.\n\nSee [Arg::value_hint][crate::Arg::value_hint] to set this on an argument.\n\nSee the `clap_complete` crate for completion script generation.\n\nOverview of which hints are supported by which shell:\n\n| Hint                   | zsh | fish[^1]|\n| ---------------------- | --- | ------- |\n| `AnyPath`              | Yes | Yes     |\n| `FilePath`             | Yes | Yes     |\n| `DirPath`              | Yes | Yes     |\n| `ExecutablePath`       | Yes | Partial |\n| `CommandName`          | Yes | Yes     |\n| `CommandString`        | Yes | Partial |\n| `CommandWithArguments` | Yes |         |\n| `Username`             | Yes | Yes     |\n| `Hostname`             | Yes | Yes     |\n| `Url`                  | Yes |         |\n| `EmailAddress`         | Yes |         |\n\n[^1]: fish completions currently only support named arguments (e.g. -o or --opt), not\n      positional arguments.","links":{"crate::Arg::value_hint":"0:183:2150"},"attrs":["#[non_exhaustive]"],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:3705:238","0:3707:5570","0:3709:3584","0:3711:5573","0:3713:5575","0:3715:5577","0:3717:5579","0:3719:5581","0:3721:5590","0:3723:5592","0:3725:5595","0:3727:5597","0:3729:5599"],"impls":["a:2:7735:6524-0:3704:1651","a:2:2676:225-0:3704:1651","a:2:2662:217-0:3704:1651","a:2:2726:5340-0:3704:1651","a:2:7736:6523-0:3704:1651","b:2:2523-0:3704:1651","b:2:2238-0:3704:1651","b:2:2517-0:3704:1651","b:2:2513-0:3704:1651","b:2:2241-0:3704:1651","b:2:2528-0:3704:1651","b:2:3321-0:3704:1651","b:5:681-0:3704:1651","0:870","0:889","0:3731","0:3733","0:3734","0:3736","0:3737","0:3739","0:3742","0:3743","0:1044","0:1046"]}},"0:790:2402":{"id":"0:790:2402","crate_id":0,"name":"aliases","span":{"filename":"src/builder/possible_value.rs","begin":[139,4],"end":[142,5]},"visibility":"public","docs":"Sets multiple *hidden* aliases for this argument value.\n\n# Examples\n\n```rust\n# use clap::builder::PossibleValue;\nPossibleValue::new(\"slow\")\n    .aliases([\"not-fast\", \"snake-like\"])\n# ;\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["names",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7042:149","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}}}}]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl Into<Str>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}},{"name":"impl IntoIterator<Item = impl Into<Str>>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7042:149","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1083:673":{"id":"0:1083:673","crate_id":0,"name":"from","span":{"filename":"src/builder/value_parser.rs","begin":[286,4],"end":[288,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["p",{"kind":"generic","inner":"P"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1154:5472":{"id":"0:1154:5472","crate_id":0,"name":"Value","span":{"filename":"src/builder/value_parser.rs","begin":[909,4],"end":[909,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"OsString","id":"1:2026:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:1553:6083":{"id":"0:1553:6083","crate_id":0,"name":"RichFormatter","span":{"filename":"src/error/format.rs","begin":[51,0],"end":[51,25]},"visibility":"public","docs":"Richly formatted error context\n\nThis follows the [rustc diagnostic style guide](https://rustc-dev-guide.rust-lang.org/diagnostics.html#suggestion-style-guide).","links":{},"attrs":["#[non_exhaustive]","#[cfg(feature = \"error-context\")]"],"deprecation":null,"kind":"struct","inner":{"kind":"unit","generics":{"params":[],"where_predicates":[]},"impls":["a:2:7735:6524-0:1553:6083","a:2:2676:225-0:1553:6083","a:2:2662:217-0:1553:6083","a:2:2726:5340-0:1553:6083","a:2:7736:6523-0:1553:6083","b:2:2523-0:1553:6083","b:2:2238-0:1553:6083","b:2:2517-0:1553:6083","b:2:2513-0:1553:6083","b:2:2241-0:1553:6083","b:2:2528-0:1553:6083","b:2:3321-0:1553:6083","0:1555"]}},"b:2:2528-0:4151:6459":{"id":"b:2:2528-0:4151:6459","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:4151:6459","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2531:127","2:2532:1426"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1091:673":{"id":"0:1091:673","crate_id":0,"name":"from","span":{"filename":"src/builder/value_parser.rs","begin":[381,4],"end":[384,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["value",{"kind":"resolved_path","inner":{"name":"std::ops::RangeFrom","id":"2:46481:196","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i64"}}],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4095:6208":{"id":"0:4095:6208","crate_id":0,"name":"UnknownArgument","span":{"filename":"src/parser/error.rs","begin":[16,4],"end":[18,5]},"visibility":"default","docs":"Argument not defined in [`Command`][crate::Command]","links":{"crate::Command":"0:3505:1650"},"attrs":["#[non_exhaustive]"],"deprecation":null,"kind":"variant","inner":{"kind":{"struct":{"fields":[],"fields_stripped":false}},"discriminant":null}},"0:1088":{"id":"0:1088","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[350,0],"end":[355,1]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":"Create an `i64` [`ValueParser`] from a `N..=M` range\n\nSee [`RangedI64ValueParser`] for more control over the output type.\n\nSee also [`RangedU64ValueParser`]\n\n# Examples\n\n```rust\nlet mut cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"port\")\n            .long(\"port\")\n            .value_parser(3000..=4000)\n            .action(clap::ArgAction::Set)\n            .required(true)\n    );\n\nlet m = cmd.try_get_matches_from_mut([\"cmd\", \"--port\", \"3001\"]).unwrap();\nlet port: i64 = *m.get_one(\"port\")\n    .expect(\"required\");\nassert_eq!(port, 3001);\n```","links":{"`ValueParser`":"0:1054:2174","`RangedI64ValueParser`":"0:3791:2170","`RangedU64ValueParser`":"0:3810:2171"},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"RangeInclusive","id":"2:46523:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i64"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1054:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1089:673"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:713":{"id":"0:713","crate_id":0,"name":null,"span":{"filename":"src/builder/os_str.rs","begin":[44,0],"end":[48,1]},"visibility":{"restricted":{"parent":"0:707:2145","path":"::builder::os_str"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:714:673"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3732:655":{"id":"0:3732:655","crate_id":0,"name":"fmt","span":{"filename":"src/builder/value_hint.rs","begin":[27,9],"end":[27,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:8556:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8545:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:193:2260":{"id":"0:193:2260","crate_id":0,"name":"default_value","span":{"filename":"src/builder/arg.rs","begin":[1646,4],"end":[1653,5]},"visibility":"public","docs":"Value for the argument when not present.\n\n**NOTE:** If the user *does not* use this argument at runtime [`ArgMatches::contains_id`] will\nstill return `true`. If you wish to determine whether the argument was used at runtime or\nnot, consider [`ArgMatches::value_source`][crate::ArgMatches::value_source].\n\n**NOTE:** This setting is perfectly compatible with [`Arg::default_value_if`] but slightly\ndifferent. `Arg::default_value` *only* takes effect when the user has not provided this arg\nat runtime. `Arg::default_value_if` however only takes effect when the user has not provided\na value at runtime **and** these other conditions are met as well. If you have set\n`Arg::default_value` and `Arg::default_value_if`, and the user **did not** provide this arg\nat runtime, nor were the conditions met for `Arg::default_value_if`, the `Arg::default_value`\nwill be applied.\n\n**NOTE:** This implicitly sets [`Arg::action(ArgAction::Set)`].\n\n# Examples\n\nFirst we use the default value without providing any value at runtime.\n\n```rust\n# use clap::{Command, Arg, parser::ValueSource};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"opt\")\n        .long(\"myopt\")\n        .default_value(\"myval\"))\n    .get_matches_from(vec![\n        \"prog\"\n    ]);\n\nassert_eq!(m.get_one::<String>(\"opt\").unwrap(), \"myval\");\nassert!(m.contains_id(\"opt\"));\nassert_eq!(m.value_source(\"opt\"), Some(ValueSource::DefaultValue));\n```\n\nNext we provide a value at runtime to override the default.\n\n```rust\n# use clap::{Command, Arg, parser::ValueSource};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"opt\")\n        .long(\"myopt\")\n        .default_value(\"myval\"))\n    .get_matches_from(vec![\n        \"prog\", \"--myopt=non_default\"\n    ]);\n\nassert_eq!(m.get_one::<String>(\"opt\").unwrap(), \"non_default\");\nassert!(m.contains_id(\"opt\"));\nassert_eq!(m.value_source(\"opt\"), Some(ValueSource::CommandLine));\n```\n[`Arg::action(ArgAction::Set)`]: Arg::action()\n[`ArgMatches::contains_id`]: crate::ArgMatches::contains_id()\n[`Arg::default_value_if`]: Arg::default_value_if()","links":{"crate::ArgMatches::contains_id()":"0:1791:6706","Arg::action()":"0:176:1861","crate::ArgMatches::value_source":"0:1794:6527","Arg::default_value_if()":"0:217:3317"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["val",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl IntoResettable<OsStr>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:272:3608":{"id":"0:272:3608","crate_id":0,"name":"is_allow_negative_numbers_set","span":{"filename":"src/builder/arg.rs","begin":[3953,4],"end":[3955,5]},"visibility":"public","docs":"Report whether [`Arg::allow_negative_numbers`] is set","links":{"`Arg::allow_negative_numbers`":"0:186:2918"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2662:217-0:3835:2164":{"id":"a:2:2662:217-0:3835:2164","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FalseyValueParser","id":"0:3835:2164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1261":{"id":"0:1261","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1812,0],"end":[1825,1]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"BoolishValueParser","id":"0:3842:2162","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1262:915"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:7046-0:4161:6460":{"id":"b:2:7046-0:4161:6460","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:7156:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:7042:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValuesRef","id":"0:4161:6460","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:7048:2029","2:7049:6930","2:7050:762"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"b:2:2528-0:3762:2168":{"id":"b:2:2528-0:3762:2168","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PathBufValueParser","id":"0:3762:2168","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2531:127","2:2532:1426"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2517-0:3768:2163":{"id":"b:2:2517-0:3768:2163","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EnumValueParser","id":"0:3768:2163","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"items":["2:2519:673"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2528-0:4275:6462":{"id":"b:2:2528-0:4275:6462","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4275:6462","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2531:127","2:2532:1426"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11427:5181":{"id":"2:11427:5181","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:48136:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9298:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9298:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1779:6610":{"id":"0:1779:6610","crate_id":0,"name":"get_many","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[212,4],"end":[217,5]},"visibility":"public","docs":"Iterate over values of a specific option or positional argument.\n\ni.e. an argument that takes multiple values at runtime.\n\nReturns an error if the wrong type was used.\n\nReturns `None` if the option wasn't present.\n\n# Panic\n\nIf the argument definition and access mismatch.  To handle this case programmatically, see\n[`ArgMatches::try_get_many`].\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, value_parser, ArgAction};\nlet m = Command::new(\"myprog\")\n    .arg(Arg::new(\"ports\")\n        .action(ArgAction::Append)\n        .value_parser(value_parser!(usize))\n        .short('p')\n        .required(true))\n    .get_matches_from(vec![\n        \"myprog\", \"-p\", \"22\", \"-p\", \"80\", \"-p\", \"2020\"\n    ]);\nlet vals: Vec<usize> = m.get_many(\"ports\")\n    .expect(\"`port`is required\")\n    .copied()\n    .collect();\nassert_eq!(vals, [22, 80, 2020]);\n```","links":{"`ArgMatches::try_get_many`":"0:1812:6611"},"attrs":["#[track_caller]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ValuesRef","id":"0:4161:6460","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Any","id":"2:3319:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1883:59":{"id":"0:1883:59","crate_id":0,"name":"default","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1491,4],"end":[1497,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2011":{"id":"0:2011","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1854,0],"end":[1863,1]},"visibility":{"restricted":{"parent":"0:1754:6526","path":"::parser::matches::arg_matches"}},"docs":"Creates an empty iterator.","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2564:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:4254:6461","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:2013:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:5:681-0:3835:2164":{"id":"b:5:681-0:3835:2164","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:677:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FalseyValueParser","id":"0:3835:2164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:683:5351","5:684:3662","5:685:8969"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:150:1860":{"id":"0:150:1860","crate_id":0,"name":"id","span":{"filename":"src/builder/arg.rs","begin":[115,4],"end":[118,5]},"visibility":"public","docs":"Set the identifier used for referencing this argument in the clap API.\n\nSee [`Arg::new`] for more details.","links":{"`Arg::new`":"0:149:915"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["id",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl Into<Id>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3932:6164":{"id":"0:3932:6164","crate_id":0,"name":"InvalidArg","span":{"filename":"src/error/context.rs","begin":[9,4],"end":[9,14]},"visibility":"default","docs":"The cause of the error","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"0:4203:6909":{"id":"0:4203:6909","crate_id":0,"name":"OccurrenceValues","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1644,0],"end":[1647,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":[]}},"0:547:5088":{"id":"0:547:5088","crate_id":0,"name":"get_before_help","span":{"filename":"src/builder/command.rs","begin":[3402,4],"end":[3404,5]},"visibility":"public","docs":"Returns the help heading for listing subcommands.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:187:2928":{"id":"0:187:2928","crate_id":0,"name":"require_equals","span":{"filename":"src/builder/arg.rs","begin":[1452,4],"end":[1458,5]},"visibility":"public","docs":"Requires that options use the `--option=val` syntax\n\ni.e. an equals between the option and associated value.\n\n**NOTE:** Setting this requires [taking values][Arg::num_args]\n\n# Examples\n\nSetting `require_equals` requires that the option have an equals sign between\nit and the associated value.\n\n```rust\n# use clap::{Command, Arg, ArgAction};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .action(ArgAction::Set)\n        .require_equals(true)\n        .long(\"config\"))\n    .try_get_matches_from(vec![\n        \"prog\", \"--config=file.conf\"\n    ]);\n\nassert!(res.is_ok());\n```\n\nSetting `require_equals` and *not* supplying the equals will cause an\nerror.\n\n```rust\n# use clap::{Command, Arg, error::ErrorKind, ArgAction};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .action(ArgAction::Set)\n        .require_equals(true)\n        .long(\"config\"))\n    .try_get_matches_from(vec![\n        \"prog\", \"--config\", \"file.conf\"\n    ]);\n\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind(), ErrorKind::NoEquals);\n```","links":{"Arg::num_args":"0:178:1872"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4295":{"id":"0:4295","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/value_source.rs","begin":[2,56],"end":[2,59]},"visibility":{"restricted":{"parent":"0:2069:6527","path":"::parser::matches::value_source"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["min","max","clamp"],"trait":{"name":"Ord","id":"2:2321:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4275:6462","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4296:419"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2517-0:4142:6457":{"id":"b:2:2517-0:4142:6457","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IdsRef","id":"0:4142:6457","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2519:673"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1485":{"id":"0:1485","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[37,0],"end":[37,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"value_hint::ValueHint","name":"ValueHint","id":"0:3704:1651","glob":false}},"0:1248:3567":{"id":"0:1248:3567","crate_id":0,"name":"possible_values","span":{"filename":"src/builder/value_parser.rs","begin":[1660,4],"end":[1664,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:2137","args":{"angle_bracketed":{"args":[{"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Iterator","id":"2:7156:156","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"resolved_path","inner":{"name":"crate::builder::PossibleValue","id":"0:3571:1966","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}]}}},"generic_params":[]}],"lifetime":"'_"}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5099:29209":{"id":"5:5099:29209","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:6967:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6967:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1309":{"id":"0:1309","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[2100,0],"end":[2105,1]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ValueParserFactory","id":"0:1306:2175","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"5:6967:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1310:1667","0:1311:2151"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:870":{"id":"0:870","crate_id":0,"name":null,"span":{"filename":"src/builder/resettable.rs","begin":[96,0],"end":[103,1]},"visibility":{"restricted":{"parent":"0:844:2148","path":"::builder::resettable"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:3704:1651","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:3704:1651","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:871:2452"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:7736:6523-0:4254:6461":{"id":"a:2:7736:6523-0:4254:6461","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7736:6523","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:4254:6461","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:2717":{"id":"0:2717","crate_id":0,"name":null,"span":{"filename":"src/util/id.rs","begin":[11,0],"end":[28,1]},"visibility":{"restricted":{"parent":"0:2715:1860","path":"::util::id"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2722:311"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1161":{"id":"0:1161","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[950,0],"end":[978,1]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["map","possible_values","parse","try_map"],"trait":{"name":"TypedValueParser","id":"0:1125:2173","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PathBufValueParser","id":"0:3762:2168","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1162:5472","0:1163:5682","0:1164:2015"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1863":{"id":"0:1863","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1433,0],"end":[1441,1]},"visibility":{"restricted":{"parent":"0:1754:6526","path":"::parser::matches::arg_matches"}},"docs":"Creates an empty iterator.","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2564:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:4151:6459","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:1865:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:198:2261":{"id":"0:198:2261","crate_id":0,"name":"default_missing_value","span":{"filename":"src/builder/arg.rs","begin":[1780,4],"end":[1787,5]},"visibility":"public","docs":"Value for the argument when the flag is present but no value is specified.\n\nThis configuration option is often used to give the user a shortcut and allow them to\nefficiently specify an option argument without requiring an explicitly value. The `--color`\nargument is a common example. By, supplying an default, such as `default_missing_value(\"always\")`,\nthe user can quickly just add `--color` to the command line to produce the desired color output.\n\n**NOTE:** using this configuration option requires the use of the\n[`.num_args(0..N)`][Arg::num_args] and the\n[`.require_equals(true)`][Arg::require_equals] configuration option. These are required in\norder to unambiguously determine what, if any, value was supplied for the argument.\n\n# Examples\n\nFor POSIX style `--color`:\n```rust\n# use clap::{Command, Arg, parser::ValueSource};\nfn cli() -> Command {\n    Command::new(\"prog\")\n        .arg(Arg::new(\"color\").long(\"color\")\n            .value_name(\"WHEN\")\n            .value_parser([\"always\", \"auto\", \"never\"])\n            .default_value(\"auto\")\n            .num_args(0..=1)\n            .require_equals(true)\n            .default_missing_value(\"always\")\n            .help(\"Specify WHEN to colorize output.\")\n        )\n}\n\n// first, we'll provide no arguments\nlet m  = cli().get_matches_from(vec![\n        \"prog\"\n    ]);\nassert_eq!(m.get_one::<String>(\"color\").unwrap(), \"auto\");\nassert_eq!(m.value_source(\"color\"), Some(ValueSource::DefaultValue));\n\n// next, we'll provide a runtime value to override the default (as usually done).\nlet m  = cli().get_matches_from(vec![\n        \"prog\", \"--color=never\"\n    ]);\nassert_eq!(m.get_one::<String>(\"color\").unwrap(), \"never\");\nassert_eq!(m.value_source(\"color\"), Some(ValueSource::CommandLine));\n\n// finally, we will use the shortcut and only provide the argument without a value.\nlet m  = cli().get_matches_from(vec![\n        \"prog\", \"--color\"\n    ]);\nassert_eq!(m.get_one::<String>(\"color\").unwrap(), \"always\");\nassert_eq!(m.value_source(\"color\"), Some(ValueSource::CommandLine));\n```\n\nFor bool literals:\n```rust\n# use clap::{Command, Arg, parser::ValueSource, value_parser};\nfn cli() -> Command {\n    Command::new(\"prog\")\n        .arg(Arg::new(\"create\").long(\"create\")\n            .value_name(\"BOOL\")\n            .value_parser(value_parser!(bool))\n            .num_args(0..=1)\n            .require_equals(true)\n            .default_missing_value(\"true\")\n        )\n}\n\n// first, we'll provide no arguments\nlet m  = cli().get_matches_from(vec![\n        \"prog\"\n    ]);\nassert_eq!(m.get_one::<bool>(\"create\").copied(), None);\n\n// next, we'll provide a runtime value to override the default (as usually done).\nlet m  = cli().get_matches_from(vec![\n        \"prog\", \"--create=false\"\n    ]);\nassert_eq!(m.get_one::<bool>(\"create\").copied(), Some(false));\nassert_eq!(m.value_source(\"create\"), Some(ValueSource::CommandLine));\n\n// finally, we will use the shortcut and only provide the argument without a value.\nlet m  = cli().get_matches_from(vec![\n        \"prog\", \"--create\"\n    ]);\nassert_eq!(m.get_one::<bool>(\"create\").copied(), Some(true));\nassert_eq!(m.value_source(\"create\"), Some(ValueSource::CommandLine));\n```\n\n[`Arg::action(ArgAction::Set)`]: Arg::action()\n[`Arg::default_value`]: Arg::default_value()","links":{"Arg::require_equals":"0:187:2928","Arg::num_args":"0:178:1872"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["val",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl IntoResettable<OsStr>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:810:3653":{"id":"0:810:3653","crate_id":0,"name":"SINGLE","span":{"filename":"src/builder/range.rs","begin":[16,4],"end":[19,6]},"visibility":"public","docs":"A single argument value, the most common case for options","links":{},"attrs":[],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"generic","inner":"Self"},"default":"_"}},"0:888:2452":{"id":"0:888:2452","crate_id":0,"name":"into_resettable","span":{"filename":"src/builder/resettable.rs","begin":[160,4],"end":[162,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Resettable","id":"0:3603:2158","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ArgAction","id":"0:2796:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:701:673":{"id":"0:701:673","crate_id":0,"name":"from","span":{"filename":"src/builder/command.rs","begin":[4676,4],"end":[4678,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["cmd",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Command","id":"0:3505:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2238-0:4091:6463":{"id":"b:2:2238-0:4091:6463","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2232:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4091:6463","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2240:5354"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:7736:6523-0:4112:1655":{"id":"a:2:7736:6523-0:4112:1655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7736:6523","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4112:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"0:1596:5181":{"id":"0:1596:5181","crate_id":0,"name":"get","span":{"filename":"src/error/mod.rs","begin":[186,4],"end":[188,5]},"visibility":"public","docs":"Lookup a piece of context","links":{},"attrs":["#[inline(never)]","#[cfg(feature = \"error-context\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["kind",{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:3929:6081","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ContextValue","id":"0:3978:6082","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1223:915":{"id":"0:1223:915","crate_id":0,"name":"new","span":{"filename":"src/builder/value_parser.rs","begin":[1457,4],"end":[1459,5]},"visibility":"public","docs":"Select full range of `u64`","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:492:2516":{"id":"0:492:2516","crate_id":0,"name":"visible_alias","span":{"filename":"src/builder/command.rs","begin":[2447,4],"end":[2454,5]},"visibility":"public","docs":"Sets a visible alias to this subcommand.\n\nThis allows the subcommand to be accessed via *either* the\noriginal name or the given alias. This is more efficient and easier\nthan creating hidden subcommands as one only needs to check for\nthe existence of this command and not all aliased variants.\n\n**NOTE:** The alias defined with this method is *visible* from the help\nmessage and displayed as if it were just another regular subcommand. If\nlooking for an alias that will not be displayed in the help message, see\n[`Command::alias`].\n\n**NOTE:** When using aliases and checking for the existence of a\nparticular subcommand within an [`ArgMatches`] struct, one only needs to\nsearch for the original name and not all aliases.\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg};\nlet m = Command::new(\"myprog\")\n    .subcommand(Command::new(\"test\")\n        .visible_alias(\"do-stuff\"))\n    .get_matches_from(vec![\"myprog\", \"do-stuff\"]);\nassert_eq!(m.subcommand_name(), Some(\"test\"));\n```\n[`Command::alias`]: Command::alias()","links":{"Command::alias()":"0:485:277","`ArgMatches`":"0:4112:1655"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["name",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl IntoResettable<Str>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2517-0:3749:2172":{"id":"b:2:2517-0:3749:2172","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StringValueParser","id":"0:3749:2172","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2519:673"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3671":{"id":"0:3671","crate_id":0,"name":null,"span":{"filename":"src/builder/styled_str.rs","begin":[5,32],"end":[5,41]},"visibility":{"restricted":{"parent":"0:986:2149","path":"::builder::styled_str"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2285:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3672:600"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3950:6181":{"id":"0:3950:6181","crate_id":0,"name":"SuggestedSubcommand","span":{"filename":"src/error/context.rs","begin":[27,4],"end":[27,23]},"visibility":"default","docs":"Potential fix for the user","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"0:167:2397":{"id":"0:167:2397","crate_id":0,"name":"requires","span":{"filename":"src/builder/arg.rs","begin":[731,4],"end":[738,5]},"visibility":"public","docs":"Sets an argument that is required when this one is present\n\ni.e. when using this argument, the following argument *must* be present.\n\n**NOTE:** [Conflicting] rules and [override] rules take precedence over being required\n\n# Examples\n\n```rust\n# use clap::Arg;\nArg::new(\"config\")\n    .requires(\"input\")\n# ;\n```\n\nSetting [`Arg::requires(name)`] requires that the argument be used at runtime if the\ndefining argument is used. If the defining argument isn't used, the other argument isn't\nrequired\n\n```rust\n# use clap::{Command, Arg, ArgAction};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .action(ArgAction::Set)\n        .requires(\"input\")\n        .long(\"config\"))\n    .arg(Arg::new(\"input\"))\n    .try_get_matches_from(vec![\n        \"prog\"\n    ]);\n\nassert!(res.is_ok()); // We didn't use cfg, so input wasn't required\n```\n\nSetting [`Arg::requires(name)`] and *not* supplying that argument is an error.\n\n```rust\n# use clap::{Command, Arg, error::ErrorKind, ArgAction};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .action(ArgAction::Set)\n        .requires(\"input\")\n        .long(\"config\"))\n    .arg(Arg::new(\"input\"))\n    .try_get_matches_from(vec![\n        \"prog\", \"--config\", \"file.conf\"\n    ]);\n\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind(), ErrorKind::MissingRequiredArgument);\n```\n[`Arg::requires(name)`]: Arg::requires()\n[Conflicting]: Arg::conflicts_with()\n[override]: Arg::overrides_with()","links":{"Arg::conflicts_with()":"0:234:3488","Arg::overrides_with()":"0:236:3518","Arg::requires()":"0:167:2397"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["arg_id",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl IntoResettable<Id>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1046":{"id":"0:1046","crate_id":0,"name":null,"span":{"filename":"src/builder/value_hint.rs","begin":[75,0],"end":[95,1]},"visibility":{"restricted":{"parent":"0:1042:2150","path":"::builder::value_hint"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromStr","id":"2:11077:5547","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:3704:1651","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1047:126","0:1048:2125"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1314:2151":{"id":"0:1314:2151","crate_id":0,"name":"value_parser","span":{"filename":"src/builder/value_parser.rs","begin":[2108,4],"end":[2110,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"qualified_path","inner":{"name":"Parser","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:1306:2175","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7735:6524-0:3842:2162":{"id":"a:2:7735:6524-0:3842:2162","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7735:6524","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BoolishValueParser","id":"0:3842:2162","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1601:1960":{"id":"0:1601:1960","crate_id":0,"name":"print","span":{"filename":"src/error/mod.rs","begin":[243,4],"end":[252,5]},"visibility":"public","docs":"Prints formatted and colored error to `stdout` or `stderr` according to its error kind\n\n# Example\n```no_run\nuse clap::Command;\n\nmatch Command::new(\"Command\").try_get_matches() {\n    Ok(matches) => {\n        // do_something\n    },\n    Err(err) => {\n        err.print().expect(\"Error writing Error\");\n        // do_something\n    },\n};\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2903:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3731":{"id":"0:3731","crate_id":0,"name":null,"span":{"filename":"src/builder/value_hint.rs","begin":[27,9],"end":[27,14]},"visibility":{"restricted":{"parent":"0:1042:2150","path":"::builder::value_hint"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8596:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:3704:1651","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3732:655"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2238-0:1054:2174":{"id":"b:2:2238-0:1054:2174","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2232:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1054:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2240:5354"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1310:1667":{"id":"0:1310:1667","crate_id":0,"name":"Parser","span":{"filename":"src/builder/value_parser.rs","begin":[2101,4],"end":[2101,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1054:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"b:2:2528-0:3588:2156":{"id":"b:2:2528-0:3588:2156","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueRange","id":"0:3588:2156","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2531:127","2:2532:1426"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3763":{"id":"0:3763","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[939,9],"end":[939,13]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2674:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PathBufValueParser","id":"0:3762:2168","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1488":{"id":"0:1488","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[40,0],"end":[40,38]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"value_parser::BoolValueParser","name":"BoolValueParser","id":"0:3829:2161","glob":false}},"0:1548:2020":{"id":"0:1548:2020","crate_id":0,"name":"format_error","span":{"filename":"src/error/format.rs","begin":[18,4],"end":[18,68]},"visibility":"default","docs":"Stylize the error for the terminal","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["error",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::error::Error","id":"0:1581:127","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:3654":{"id":"0:3654","crate_id":0,"name":null,"span":{"filename":"src/builder/str.rs","begin":[5,57],"end":[5,61]},"visibility":{"restricted":{"parent":"0:912:1352","path":"::builder::str"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:8819:140","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3655:707"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1484":{"id":"0:1484","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[36,0],"end":[36,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"styled_str::StyledStr","name":"StyledStr","id":"0:3662:1951","glob":false}},"b:5:681-0:4254:6461":{"id":"b:5:681-0:4254:6461","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:677:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:4254:6461","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["5:683:5351","5:684:3662","5:685:8969"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:488:2402":{"id":"0:488:2402","crate_id":0,"name":"aliases","span":{"filename":"src/builder/command.rs","begin":[2358,4],"end":[2362,5]},"visibility":"public","docs":"Sets multiple hidden aliases to this subcommand.\n\nThis allows the subcommand to be accessed via *either* the original name or any of the\ngiven aliases. This is more efficient, and easier than creating multiple hidden subcommands\nas one only needs to check for the existence of this command and not all aliased variants.\n\n**NOTE:** Aliases defined with this method are *hidden* from the help\nmessage. If looking for aliases that will be displayed in the help\nmessage, see [`Command::visible_aliases`].\n\n**NOTE:** When using aliases and checking for the existence of a\nparticular subcommand within an [`ArgMatches`] struct, one only needs to\nsearch for the original name and not all aliases.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"myprog\")\n    .subcommand(Command::new(\"test\")\n        .aliases([\"do-stuff\", \"do-tests\", \"tests\"]))\n        .arg(Arg::new(\"input\")\n            .help(\"the file to add\")\n            .required(false))\n    .get_matches_from(vec![\"myprog\", \"do-tests\"]);\nassert_eq!(m.subcommand_name(), Some(\"test\"));\n```\n[`Command::visible_aliases`]: Command::visible_aliases()","links":{"Command::visible_aliases()":"0:495:2528","`ArgMatches`":"0:4112:1655"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["names",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7042:149","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}}}}]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl Into<Str>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}},{"name":"impl IntoIterator<Item = impl Into<Str>>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7042:149","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:475:4582":{"id":"0:475:4582","crate_id":0,"name":"next_help_heading","span":{"filename":"src/builder/command.rs","begin":[1856,4],"end":[1859,5]},"visibility":"public","docs":"Set the default section heading for future args.\n\nThis will be used for any arg that hasn't had [`Arg::help_heading`] called.\n\nThis is useful if the default `Options` or `Arguments` headings are\nnot specific enough for one's use case.\n\nFor subcommands, see [`Command::subcommand_help_heading`]\n\n[`Command::arg`]: Command::arg()\n[`Arg::help_heading`]: crate::Arg::help_heading()","links":{"crate::Arg::help_heading()":"0:207:2412","`Command::subcommand_help_heading`":"0:509:5036"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["heading",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl IntoResettable<Str>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:714:673":{"id":"0:714:673","crate_id":0,"name":"from","span":{"filename":"src/builder/os_str.rs","begin":[45,4],"end":[47,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["id",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1588:664":{"id":"0:1588:664","crate_id":0,"name":"format","span":{"filename":"src/error/mod.rs","begin":[92,4],"end":[99,5]},"visibility":"public","docs":"Format the existing message with the Command's context","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["cmd",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Command","id":"0:3505:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2238-0:3195:1652":{"id":"b:2:2238-0:3195:1652","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2232:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3195:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2240:5354"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3505:1650":{"id":"0:3505:1650","crate_id":0,"name":"Command","span":{"filename":"src/builder/command.rs","begin":[71,0],"end":[109,1]},"visibility":"public","docs":"Build a command-line interface.\n\nThis includes defining arguments, subcommands, parser behavior, and help output.\nOnce all configuration is complete,\nthe [`Command::get_matches`] family of methods starts the runtime-parsing\nprocess. These methods then return information about the user supplied\narguments (or lack thereof).\n\nWhen deriving a [`Parser`][crate::Parser], you can use\n[`CommandFactory::command`][crate::CommandFactory::command] to access the\n`Command`.\n\n- [Basic API][crate::Command#basic-api]\n- [Application-wide Settings][crate::Command#application-wide-settings]\n- [Command-specific Settings][crate::Command#command-specific-settings]\n- [Subcommand-specific Settings][crate::Command#subcommand-specific-settings]\n- [Reflection][crate::Command#reflection]\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg};\nlet m = Command::new(\"My Program\")\n    .author(\"Me, me@mail.com\")\n    .version(\"1.0.2\")\n    .about(\"Explains in brief what the program does\")\n    .arg(\n        Arg::new(\"in_file\")\n    )\n    .after_help(\"Longer explanation to appear after the options when \\\n                 displaying the help information from --help or -h\")\n    .get_matches();\n\n// Your program logic starts here...\n```\n[`Command::get_matches`]: Command::get_matches()","links":{"crate::Parser":"0:36:1667","crate::CommandFactory::command":"0:52:1834","Command::get_matches()":"0:407:2016","crate::Command#reflection":"0:3505:1650","crate::Command#subcommand-specific-settings":"0:3505:1650","crate::Command#command-specific-settings":"0:3505:1650","crate::Command#application-wide-settings":"0:3505:1650","crate::Command#basic-api":"0:3505:1650"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:387","0:434","0:453","0:482","0:510","0:597","a:2:7735:6524-0:3505:1650","a:2:2676:225-0:3505:1650","a:2:2662:217-0:3505:1650","a:2:2726:5340-0:3505:1650","a:2:7736:6523-0:3505:1650","b:2:2523-0:3505:1650","b:2:2238-0:3505:1650","b:2:2517-0:3505:1650","b:2:2513-0:3505:1650","b:2:2241-0:3505:1650","b:2:2528-0:3505:1650","b:2:3321-0:3505:1650","b:5:5352-0:3505:1650","b:5:681-0:3505:1650","0:3542","0:3544","0:695","0:697","0:700","0:702"]}},"0:541:5075":{"id":"0:541:5075","crate_id":0,"name":"get_color","span":{"filename":"src/builder/command.rs","begin":[3351,4],"end":[3368,5]},"visibility":"public","docs":"Should we color the output?","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:4542:1657","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:743:600":{"id":"0:743:600","crate_id":0,"name":"eq","span":{"filename":"src/builder/os_str.rs","begin":[186,4],"end":[188,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2513-0:4542:1657":{"id":"b:2:2513-0:4542:1657","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:4542:1657","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2516:2263"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:7":{"id":"0:7","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[103,25],"end":[103,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::builder::Arg","name":"Arg","id":"0:3195:1652","glob":false}},"0:1075:5679":{"id":"0:1075:5679","crate_id":0,"name":"path_buf","span":{"filename":"src/builder/value_parser.rs","begin":[216,4],"end":[218,5]},"visibility":"public","docs":"[`PathBuf`][std::path::PathBuf] parser for argument values\n\n# Example\n\n```rust\n# use std::path::PathBuf;\n# use std::path::Path;\nlet mut cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"output\")\n            .value_parser(clap::value_parser!(PathBuf))\n            .required(true)\n    );\n\nlet m = cmd.try_get_matches_from_mut([\"cmd\", \"hello.txt\"]).unwrap();\nlet port: &PathBuf = m.get_one(\"output\")\n    .expect(\"required\");\nassert_eq!(port, Path::new(\"hello.txt\"));\n\nassert!(cmd.try_get_matches_from_mut([\"cmd\", \"\"]).is_err());\n```","links":{"std::path::PathBuf":"1:5394:188"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:84":{"id":"0:84","crate_id":0,"name":null,"span":{"filename":"src/derive.rs","begin":[423,0],"end":[430,1]},"visibility":{"restricted":{"parent":"0:29:544","path":"::derive"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"CommandFactory","id":"0:51:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"CommandFactory","id":"0:51:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:2137","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:86:1834","0:88:2036"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4056:707":{"id":"0:4056:707","crate_id":0,"name":"hash","span":{"filename":"src/error/kind.rs","begin":[2,44],"end":[2,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["state",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"__H"}}}]],"output":{"kind":"tuple","inner":[]},"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:8833:144","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3846":{"id":"0:3846","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1808,22],"end":[1808,27]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8596:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BoolishValueParser","id":"0:3842:2162","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3847:655"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1777:6591":{"id":"0:1777:6591","crate_id":0,"name":"get_count","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[141,4],"end":[145,5]},"visibility":"public","docs":"Gets the value of a specific [`ArgAction::Count`][crate::ArgAction::Count] flag\n\n# Panic\n\nIf the argument's action is not [`ArgAction::Count`][crate::ArgAction::Count]\n\n# Examples\n\n```rust\n# use clap::Command;\n# use clap::Arg;\nlet cmd = Command::new(\"mycmd\")\n    .arg(\n        Arg::new(\"flag\")\n            .long(\"flag\")\n            .action(clap::ArgAction::Count)\n    );\n\nlet matches = cmd.clone().try_get_matches_from([\"mycmd\", \"--flag\", \"--flag\"]).unwrap();\nassert_eq!(\n    matches.get_count(\"flag\"),\n    2\n);\n```","links":{"crate::ArgAction::Count":"0:2805:109"},"attrs":["#[track_caller]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"u8"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2238-0:3505:1650":{"id":"b:2:2238-0:3505:1650","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2232:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Command","id":"0:3505:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2240:5354"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1594:479":{"id":"0:1594:479","crate_id":0,"name":"context","span":{"filename":"src/error/mod.rs","begin":[179,4],"end":[181,5]},"visibility":"public","docs":"Additional information to further qualify the error","links":{},"attrs":["#[cfg(feature = \"error-context\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:7156:156","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"tuple","inner":[{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:3929:6081","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ContextValue","id":"0:3978:6082","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]}}}}]}}},"generic_params":[],"modifier":"none"}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2517-0:3762:2168":{"id":"b:2:2517-0:3762:2168","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PathBufValueParser","id":"0:3762:2168","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2519:673"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2241-0:3704:1651":{"id":"b:2:2241-0:3704:1651","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2235:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:3704:1651","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2243:26835"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:5:5352-0:3978:6082":{"id":"b:5:5352-0:3978:6082","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:8601:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5350:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextValue","id":"0:3978:6082","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5354:1406"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:729":{"id":"0:729","crate_id":0,"name":null,"span":{"filename":"src/builder/os_str.rs","begin":[141,0],"end":[145,1]},"visibility":{"restricted":{"parent":"0:707:2145","path":"::builder::os_str"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"std::path::PathBuf","id":"1:5394:188","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:730:673"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:2516:2263":{"id":"2:2516:2263","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2490:132"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3929:6081":{"id":"0:3929:6081","crate_id":0,"name":"ContextKind","span":{"filename":"src/error/context.rs","begin":[5,0],"end":[40,1]},"visibility":"public","docs":"Semantics for a piece of error information","links":{},"attrs":["#[non_exhaustive]","#[cfg(feature = \"error-context\")]"],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:3930:6175","0:3932:6164","0:3934:6165","0:3936:6191","0:3938:6172","0:3940:6171","0:3942:6201","0:3944:6205","0:3946:6199","0:3948:6235","0:3950:6181","0:3952:6211","0:3954:6173","0:3956:6237","0:3958:6182","0:3960:3989","0:3962:6240"],"impls":["0:1534","a:2:7735:6524-0:3929:6081","a:2:2676:225-0:3929:6081","a:2:2662:217-0:3929:6081","a:2:2726:5340-0:3929:6081","a:2:7736:6523-0:3929:6081","b:2:2523-0:3929:6081","b:2:2238-0:3929:6081","b:2:2517-0:3929:6081","b:2:2513-0:3929:6081","b:2:2241-0:3929:6081","b:2:2528-0:3929:6081","b:2:3321-0:3929:6081","b:5:5352-0:3929:6081","b:5:681-0:3929:6081","0:3964","0:3965","0:3967","0:3969","0:3970","0:3972","0:3973","0:3975","0:1536"]}},"0:811:915":{"id":"0:811:915","crate_id":0,"name":"new","span":{"filename":"src/builder/range.rs","begin":[44,4],"end":[46,5]},"visibility":"public","docs":"Create a range\n\n# Panics\n\nIf the end is less than the start\n\n# Examples\n\n```\n# use clap::builder::ValueRange;\nlet range = ValueRange::new(5);\nlet range = ValueRange::new(5..10);\nlet range = ValueRange::new(5..=10);\nlet range = ValueRange::new(5..);\nlet range = ValueRange::new(..10);\nlet range = ValueRange::new(..=10);\n```\n\nWhile this will panic:\n```should_panic\n# use clap::builder::ValueRange;\nlet range = ValueRange::new(10..5);  // Panics!\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["range",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl Into<Self>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:548:5089":{"id":"0:548:5089","crate_id":0,"name":"get_before_long_help","span":{"filename":"src/builder/command.rs","begin":[3408,4],"end":[3410,5]},"visibility":"public","docs":"Returns the help heading for listing subcommands.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2662:217-0:1549:6080":{"id":"a:2:2662:217-0:1549:6080","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"KindFormatter","id":"0:1549:6080","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3588:2156":{"id":"0:3588:2156","crate_id":0,"name":"ValueRange","span":{"filename":"src/builder/range.rs","begin":[3,0],"end":[6,1]},"visibility":"public","docs":"Values per occurrence for an argument","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:808","a:2:7735:6524-0:3588:2156","a:2:2676:225-0:3588:2156","a:2:2662:217-0:3588:2156","a:2:2726:5340-0:3588:2156","a:2:7736:6523-0:3588:2156","b:2:2523-0:3588:2156","b:2:2238-0:3588:2156","b:2:2517-0:3588:2156","b:2:2513-0:3588:2156","b:2:2241-0:3588:2156","b:2:2528-0:3588:2156","b:2:3321-0:3588:2156","b:5:5352-0:3588:2156","b:5:681-0:3588:2156","0:3591","0:3592","0:3594","0:3595","0:3597","0:3598","0:3600","0:821","0:824","0:826","0:828","0:830","0:832","0:834","0:836","0:838","0:840","0:842","0:891"]}},"0:1549:6080":{"id":"0:1549:6080","crate_id":0,"name":"KindFormatter","span":{"filename":"src/error/format.rs","begin":[28,0],"end":[28,25]},"visibility":"public","docs":"Report [`ErrorKind`]\n\nNo context is included.\n\n**NOTE:** Consider removing the [`error-context`][crate::_features] default feature if using this to remove all\noverhead for [`RichFormatter`].","links":{"`ErrorKind`":"0:4009:3985","`RichFormatter`":"0:1553:6083"},"attrs":["#[non_exhaustive]"],"deprecation":null,"kind":"struct","inner":{"kind":"unit","generics":{"params":[],"where_predicates":[]},"impls":["a:2:7735:6524-0:1549:6080","a:2:2676:225-0:1549:6080","a:2:2662:217-0:1549:6080","a:2:2726:5340-0:1549:6080","a:2:7736:6523-0:1549:6080","b:2:2523-0:1549:6080","b:2:2238-0:1549:6080","b:2:2517-0:1549:6080","b:2:2513-0:1549:6080","b:2:2241-0:1549:6080","b:2:2528-0:1549:6080","b:2:3321-0:1549:6080","0:1551"]}},"0:3547:181":{"id":"0:3547:181","crate_id":0,"name":"OsStr","span":{"filename":"src/builder/os_str.rs","begin":[8,0],"end":[10,1]},"visibility":"public","docs":"A UTF-8-encoded fixed string\n\n**NOTE:** To support dynamic values (i.e. `OsString`), enable the [`string`\nfeature][crate::_features]","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:709","a:2:7735:6524-0:3547:181","a:2:2676:225-0:3547:181","a:2:2662:217-0:3547:181","a:2:2726:5340-0:3547:181","a:2:7736:6523-0:3547:181","b:2:2523-0:3547:181","b:2:2238-0:3547:181","b:2:2517-0:3547:181","b:2:2513-0:3547:181","b:2:2241-0:3547:181","b:2:2528-0:3547:181","b:2:3321-0:3547:181","b:5:681-0:3547:181","0:3549","0:3551","0:3553","0:3554","0:3556","0:3557","0:3559","0:3561","0:3563","0:713","0:715","0:717","0:719","0:721","0:723","0:725","0:727","0:729","0:731","0:733","0:736","0:738","0:740","0:742","0:744","0:746","0:748","0:750","0:752","0:754","0:756","0:758","0:760","0:876","0:903"]}},"b:2:2513-0:3929:6081":{"id":"b:2:2513-0:3929:6081","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:3929:6081","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2516:2263"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3238":{"id":"0:3238","crate_id":0,"name":null,"span":{"filename":"src/builder/arg_group.rs","begin":[85,18],"end":[85,23]},"visibility":{"restricted":{"parent":"0:314:2142","path":"::builder::arg_group"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3229:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3239:412"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1497":{"id":"0:1497","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[49,0],"end":[49,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"value_parser::RangedI64ValueParser","name":"RangedI64ValueParser","id":"0:3791:2170","glob":false}},"0:4009:3985":{"id":"0:4009:3985","crate_id":0,"name":"ErrorKind","span":{"filename":"src/error/kind.rs","begin":[4,0],"end":[313,1]},"visibility":"public","docs":"Command line argument parser kind of error","links":{},"attrs":["#[non_exhaustive]"],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:4010:6171","0:4012:6208","0:4014:6175","0:4016:6168","0:4018:6202","0:4020:6194","0:4022:6198","0:4024:6204","0:4026:6162","0:4028:6186","0:4030:6190","0:4032:6192","0:4034:6131","0:4036:6158","0:4038:6132","0:4040:6216","0:4042:6217"],"impls":["0:1567","a:2:7735:6524-0:4009:3985","a:2:2676:225-0:4009:3985","a:2:2662:217-0:4009:3985","a:2:2726:5340-0:4009:3985","a:2:7736:6523-0:4009:3985","b:2:2523-0:4009:3985","b:2:2238-0:4009:3985","b:2:2517-0:4009:3985","b:2:2513-0:4009:3985","b:2:2241-0:4009:3985","b:2:2528-0:4009:3985","b:2:3321-0:4009:3985","b:5:5352-0:4009:3985","b:5:681-0:4009:3985","0:4044","0:4046","0:4047","0:4049","0:4050","0:4052","0:4053","0:4055","0:1569"]}},"0:939:310":{"id":"0:939:310","crate_id":0,"name":"as_ref","span":{"filename":"src/builder/str.rs","begin":[122,4],"end":[124,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:524:5062":{"id":"0:524:5062","crate_id":0,"name":"get_next_help_heading","span":{"filename":"src/builder/command.rs","begin":[3296,4],"end":[3298,5]},"visibility":"public","docs":"Get the custom section heading specified via [`Command::next_help_heading`].\n\n[`Command::help_heading`]: Command::help_heading()","links":{"`Command::next_help_heading`":"0:475:4582"},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1045:59":{"id":"0:1045:59","crate_id":0,"name":"default","span":{"filename":"src/builder/value_hint.rs","begin":[70,4],"end":[72,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3735:600":{"id":"0:3735:600","crate_id":0,"name":"eq","span":{"filename":"src/builder/value_hint.rs","begin":[27,16],"end":[27,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:3704:1651","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2513-0:1054:2174":{"id":"b:2:2513-0:1054:2174","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1054:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2516:2263"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4245:6901":{"id":"0:4245:6901","crate_id":0,"name":"RawOccurrenceValues","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1777,0],"end":[1780,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":[]}},"0:1846:928":{"id":"0:1846:928","crate_id":0,"name":"next","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1371,4],"end":[1373,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:827:673":{"id":"0:827:673","crate_id":0,"name":"from","span":{"filename":"src/builder/range.rs","begin":[120,4],"end":[122,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["fixed",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1069":{"id":"0:1069","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[73,0],"end":[219,1]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1054:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1070:915","0:1072:366","0:1073:1842","0:1074:5164","0:1075:5679"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:210:3227":{"id":"0:210:3227","crate_id":0,"name":"hide_possible_values","span":{"filename":"src/builder/arg.rs","begin":[2300,4],"end":[2306,5]},"visibility":"public","docs":"Do not display the [possible values][crate::builder::ValueParser::possible_values] in the help message.\n\nThis is useful for args with many values, or ones which are explained elsewhere in the\nhelp text.\n\n**NOTE:** Setting this requires [taking values][Arg::num_args]\n\nTo set this for all arguments, see\n[`Command::hide_possible_values`][crate::Command::hide_possible_values].\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ArgAction};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"mode\")\n        .long(\"mode\")\n        .value_parser([\"fast\", \"slow\"])\n        .action(ArgAction::Set)\n        .hide_possible_values(true));\n```\nIf we were to run the above program with `--help` the `[values: fast, slow]` portion of\nthe help text would be omitted.","links":{"crate::builder::ValueParser::possible_values":"0:1079:3567","Arg::num_args":"0:178:1872","crate::Command::hide_possible_values":"0:450:3227"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:404:4037":{"id":"0:404:4037","crate_id":0,"name":"subcommands","span":{"filename":"src/builder/command.rs","begin":[417,4],"end":[422,5]},"visibility":"public","docs":"Adds multiple subcommands to the list of valid possibilities.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, };\n# Command::new(\"myprog\")\n.subcommands( [\n       Command::new(\"config\").about(\"Controls configuration functionality\")\n                                .arg(Arg::new(\"config_file\")),\n       Command::new(\"debug\").about(\"Controls debug functionality\")])\n# ;\n```\n[`IntoIterator`]: std::iter::IntoIterator","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["subcmds",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7042:149","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}}}}]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl Into<Self>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}},{"name":"impl IntoIterator<Item = impl Into<Self>>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7042:149","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4005:600":{"id":"0:4005:600","crate_id":0,"name":"eq","span":{"filename":"src/error/context.rs","begin":[74,23],"end":[74,32]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ContextValue","id":"0:3978:6082","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2523-0:1553:6083":{"id":"b:2:2523-0:1553:6083","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2493:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RichFormatter","id":"0:1553:6083","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2526:127","2:2527:1427"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11535:7667":{"id":"2:11535:7667","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2517-0:3662:1951":{"id":"b:2:2517-0:3662:1951","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2519:673"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3552:412":{"id":"0:3552:412","crate_id":0,"name":"clone","span":{"filename":"src/builder/os_str.rs","begin":[7,18],"end":[7,23]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7736:6523-0:1054:2174":{"id":"a:2:7736:6523-0:1054:2174","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7736:6523","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1054:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"0:3840:655":{"id":"0:3840:655","crate_id":0,"name":"fmt","span":{"filename":"src/builder/value_parser.rs","begin":[1711,22],"end":[1711,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:8556:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8545:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1572":{"id":"0:1572","crate_id":0,"name":null,"span":{"filename":"src/error/mod.rs","begin":[34,0],"end":[34,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"format::KindFormatter","name":"KindFormatter","id":"0:1549:6080","glob":false}},"0:1102:673":{"id":"0:1102:673","crate_id":0,"name":"from","span":{"filename":"src/builder/value_parser.rs","begin":[505,4],"end":[508,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["values",{"kind":"array","inner":{"type":{"kind":"generic","inner":"P"},"len":"C"}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:487:4753":{"id":"0:487:4753","crate_id":0,"name":"long_flag_alias","span":{"filename":"src/builder/command.rs","begin":[2320,4],"end":[2327,5]},"visibility":"public","docs":"Add an alias, which functions as a \"hidden\" long flag subcommand.\n\nThis will automatically dispatch as if this subcommand was used. This is more efficient,\nand easier than creating multiple hidden subcommands as one only needs to check for the\nexistence of this command, and not all variants.\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg, };\nlet m = Command::new(\"myprog\")\n            .subcommand(Command::new(\"test\").long_flag(\"test\")\n                .long_flag_alias(\"testing\"))\n            .get_matches_from(vec![\"myprog\", \"--testing\"]);\nassert_eq!(m.subcommand_name(), Some(\"test\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["name",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl IntoResettable<Str>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5085:1814":{"id":"5:5085:1814","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:6967:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6967:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11121:8050","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11470:29188":{"id":"2:11470:29188","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11116:8056","prim@char":"1:12300:408","str::split":"2:11464:6068","`DoubleEndedIterator`":"2:7079:120"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:50128:8076","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11121:8050","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11121:8050","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11136:8051","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2528-0:1054:2174":{"id":"b:2:2528-0:1054:2174","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1054:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2531:127","2:2532:1426"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:153:277":{"id":"0:153:277","crate_id":0,"name":"alias","span":{"filename":"src/builder/arg.rs","begin":[231,4],"end":[238,5]},"visibility":"public","docs":"Add an alias, which functions as a hidden long flag.\n\nThis is more efficient, and easier than creating multiple hidden arguments as one only\nneeds to check for the existence of this command, and not all variants.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ArgAction};\nlet m = Command::new(\"prog\")\n            .arg(Arg::new(\"test\")\n            .long(\"test\")\n            .alias(\"alias\")\n            .action(ArgAction::Set))\n       .get_matches_from(vec![\n            \"prog\", \"--alias\", \"cool\"\n        ]);\nassert_eq!(m.get_one::<String>(\"test\").unwrap(), \"cool\");\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["name",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl IntoResettable<Str>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:277:3619":{"id":"0:277:3619","crate_id":0,"name":"is_global_set","span":{"filename":"src/builder/arg.rs","begin":[3988,4],"end":[3990,5]},"visibility":"public","docs":"Report whether [`Arg::global`] is set","links":{"`Arg::global`":"0:169:2691"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3960:3989":{"id":"0:3960:3989","crate_id":0,"name":"Usage","span":{"filename":"src/error/context.rs","begin":[37,4],"end":[37,9]},"visibility":"default","docs":"A usage string","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"0:695":{"id":"0:695","crate_id":0,"name":null,"span":{"filename":"src/builder/command.rs","begin":[4623,0],"end":[4665,1]},"visibility":{"restricted":{"parent":"0:346:1834","path":"::builder::command"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2564:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Command","id":"0:3505:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:696:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1577":{"id":"0:1577","crate_id":0,"name":null,"span":{"filename":"src/error/mod.rs","begin":[47,0],"end":[47,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"error-context\")]"],"deprecation":null,"kind":"import","inner":{"source":"RichFormatter","name":"DefaultFormatter","id":"0:1553:6083","glob":false}},"2:11440:10137":{"id":"2:11440:10137","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12300:408"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:50086:8062","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2304":{"id":"0:2304","crate_id":0,"name":null,"span":{"filename":"src/parser/mod.rs","begin":[22,0],"end":[22,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::matches::IdsRef","name":"IdsRef","id":"0:4142:6457","glob":false}},"0:2004:928":{"id":"0:2004:928","crate_id":0,"name":"next","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1837,4],"end":[1839,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2726:5340-0:4275:6462":{"id":"a:2:2726:5340-0:4275:6462","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2726:5340","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4275:6462","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:597":{"id":"0:597","crate_id":0,"name":null,"span":{"filename":"src/builder/command.rs","begin":[3735,0],"end":[4362,1]},"visibility":{"restricted":{"parent":"0:346:1834","path":"::builder::command"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Command","id":"0:3505:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:610:4170"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2676:225-0:3704:1651":{"id":"a:2:2676:225-0:3704:1651","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:3704:1651","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:180:1866":{"id":"0:180:1866","crate_id":0,"name":"value_name","span":{"filename":"src/builder/arg.rs","begin":[1156,4],"end":[1163,5]},"visibility":"public","docs":"Placeholder for the argument's value in the help message / usage.\n\nThis name is cosmetic only; the name is **not** used to access arguments.\nThis setting can be very helpful when describing the type of input the user should be\nusing, such as `FILE`, `INTERFACE`, etc. Although not required, it's somewhat convention to\nuse all capital letters for the value name.\n\n**NOTE:** implicitly sets [`Arg::action(ArgAction::Set)`]\n\n# Examples\n\n```rust\n# use clap::{Command, Arg};\nArg::new(\"cfg\")\n    .long(\"config\")\n    .value_name(\"FILE\")\n# ;\n```\n\n ```\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"config\")\n        .long(\"config\")\n        .value_name(\"FILE\")\n        .help(\"Some help text\"))\n    .get_matches_from(vec![\n        \"prog\", \"--help\"\n    ]);\n```\nRunning the above program produces the following output\n\n```text\nvalnames\n\nUsage: valnames [OPTIONS]\n\nOptions:\n    --config <FILE>     Some help text\n    -h, --help          Print help information\n    -V, --version       Print version information\n```\n[positional]: Arg::index()\n[`Arg::action(ArgAction::Set)`]: Arg::action()","links":{"Arg::action()":"0:176:1861"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["name",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl IntoResettable<Str>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4112:1655":{"id":"0:4112:1655","crate_id":0,"name":"ArgMatches","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[66,0],"end":[73,1]},"visibility":"public","docs":"Container for parse results.\n\nUsed to get information about the arguments that were supplied to the program at runtime by\nthe user. New instances of this struct are obtained by using the [`Command::get_matches`] family of\nmethods.\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg, ArgAction};\n# use clap::parser::ValueSource;\nlet matches = Command::new(\"MyApp\")\n    .arg(Arg::new(\"out\")\n        .long(\"output\")\n        .required(true)\n        .action(ArgAction::Set)\n        .default_value(\"-\"))\n    .arg(Arg::new(\"cfg\")\n        .short('c')\n        .action(ArgAction::Set))\n    .get_matches(); // builds the instance of ArgMatches\n\n// to get information about the \"cfg\" argument we created, such as the value supplied we use\n// various ArgMatches methods, such as [ArgMatches::get_one]\nif let Some(c) = matches.get_one::<String>(\"cfg\") {\n    println!(\"Value for -c: {}\", c);\n}\n\n// The ArgMatches::get_one method returns an Option because the user may not have supplied\n// that argument at runtime. But if we specified that the argument was \"required\" as we did\n// with the \"out\" argument, we can safely unwrap because `clap` verifies that was actually\n// used at runtime.\nprintln!(\"Value for --output: {}\", matches.get_one::<String>(\"out\").unwrap());\n\n// You can check the presence of an argument's values\nif matches.contains_id(\"out\") {\n    // However, if you want to know where the value came from\n    if matches.value_source(\"out\").expect(\"checked contains_id\") == ValueSource::CommandLine {\n        println!(\"`out` set by user\");\n    } else {\n        println!(\"`out` is defaulted\");\n    }\n}\n```\n[`Command::get_matches`]: crate::Command::get_matches()","links":{"crate::Command::get_matches()":"0:407:2016"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:1774","0:1797","0:1808","a:2:7735:6524-0:4112:1655","a:2:2676:225-0:4112:1655","a:2:2662:217-0:4112:1655","a:2:2726:5340-0:4112:1655","a:2:7736:6523-0:4112:1655","b:2:2523-0:4112:1655","b:2:2238-0:4112:1655","b:2:2517-0:4112:1655","b:2:2513-0:4112:1655","b:2:2241-0:4112:1655","b:2:2528-0:4112:1655","b:2:3321-0:4112:1655","b:5:681-0:4112:1655","0:4117","0:4119","0:4121","0:4123","0:4124","0:4126","0:4127"]}},"0:4158":{"id":"0:4158","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1406,16],"end":[1406,21]},"visibility":{"restricted":{"parent":"0:1754:6526","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"2:8596:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8596:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:4151:6459","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:4160:655"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1795:6800":{"id":"0:1795:6800","crate_id":0,"name":"index_of","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[771,4],"end":[775,5]},"visibility":"public","docs":"The first index of that an argument showed up.\n\nIndices are similar to argv indices, but are not exactly 1:1.\n\nFor flags (i.e. those arguments which don't have an associated value), indices refer\nto occurrence of the switch, such as `-f`, or `--flag`. However, for options the indices\nrefer to the *values* `-o val` would therefore not represent two distinct indices, only the\nindex for `val` would be recorded. This is by design.\n\nBesides the flag/option discrepancy, the primary difference between an argv index and clap\nindex, is that clap continues counting once all arguments have properly separated, whereas\nan argv index does not.\n\nThe examples should clear this up.\n\n*NOTE:* If an argument is allowed multiple times, this method will only give the *first*\nindex.  See [`ArgMatches::indices_of`].\n\n# Panics\n\nIf `id` is not a valid argument or group id.\n\n# Examples\n\nThe argv indices are listed in the comments below. See how they correspond to the clap\nindices. Note that if it's not listed in a clap index, this is because it's not saved in\nin an `ArgMatches` struct for querying.\n\n```rust\n# use clap::{Command, Arg, ArgAction};\nlet m = Command::new(\"myapp\")\n    .arg(Arg::new(\"flag\")\n        .short('f')\n        .action(ArgAction::SetTrue))\n    .arg(Arg::new(\"option\")\n        .short('o')\n        .action(ArgAction::Set))\n    .get_matches_from(vec![\"myapp\", \"-f\", \"-o\", \"val\"]);\n           // ARGV indices: ^0       ^1    ^2    ^3\n           // clap indices:          ^1          ^3\n\nassert_eq!(m.index_of(\"flag\"), Some(1));\nassert_eq!(m.index_of(\"option\"), Some(3));\n```\n\nNow notice, if we use one of the other styles of options:\n\n```rust\n# use clap::{Command, Arg, ArgAction};\nlet m = Command::new(\"myapp\")\n    .arg(Arg::new(\"flag\")\n        .short('f')\n        .action(ArgAction::SetTrue))\n    .arg(Arg::new(\"option\")\n        .short('o')\n        .action(ArgAction::Set))\n    .get_matches_from(vec![\"myapp\", \"-f\", \"-o=val\"]);\n           // ARGV indices: ^0       ^1    ^2\n           // clap indices:          ^1       ^3\n\nassert_eq!(m.index_of(\"flag\"), Some(1));\nassert_eq!(m.index_of(\"option\"), Some(3));\n```\n\nThings become much more complicated, or clear if we look at a more complex combination of\nflags. Let's also throw in the final option style for good measure.\n\n```rust\n# use clap::{Command, Arg, ArgAction};\nlet m = Command::new(\"myapp\")\n    .arg(Arg::new(\"flag\")\n        .short('f')\n        .action(ArgAction::SetTrue))\n    .arg(Arg::new(\"flag2\")\n        .short('F')\n        .action(ArgAction::SetTrue))\n    .arg(Arg::new(\"flag3\")\n        .short('z')\n        .action(ArgAction::SetTrue))\n    .arg(Arg::new(\"option\")\n        .short('o')\n        .action(ArgAction::Set))\n    .get_matches_from(vec![\"myapp\", \"-fzF\", \"-oval\"]);\n           // ARGV indices: ^0      ^1       ^2\n           // clap indices:         ^1,2,3    ^5\n           //\n           // clap sees the above as 'myapp -f -z -F -o val'\n           //                         ^0    ^1 ^2 ^3 ^4 ^5\nassert_eq!(m.index_of(\"flag\"), Some(1));\nassert_eq!(m.index_of(\"flag2\"), Some(3));\nassert_eq!(m.index_of(\"flag3\"), Some(2));\nassert_eq!(m.index_of(\"option\"), Some(5));\n```\n\nOne final combination of flags/options to see how they combine:\n\n```rust\n# use clap::{Command, Arg, ArgAction};\nlet m = Command::new(\"myapp\")\n    .arg(Arg::new(\"flag\")\n        .short('f')\n        .action(ArgAction::SetTrue))\n    .arg(Arg::new(\"flag2\")\n        .short('F')\n        .action(ArgAction::SetTrue))\n    .arg(Arg::new(\"flag3\")\n        .short('z')\n        .action(ArgAction::SetTrue))\n    .arg(Arg::new(\"option\")\n        .short('o')\n        .action(ArgAction::Set))\n    .get_matches_from(vec![\"myapp\", \"-fzFoval\"]);\n           // ARGV indices: ^0       ^1\n           // clap indices:          ^1,2,3^5\n           //\n           // clap sees the above as 'myapp -f -z -F -o val'\n           //                         ^0    ^1 ^2 ^3 ^4 ^5\nassert_eq!(m.index_of(\"flag\"), Some(1));\nassert_eq!(m.index_of(\"flag2\"), Some(3));\nassert_eq!(m.index_of(\"flag3\"), Some(2));\nassert_eq!(m.index_of(\"option\"), Some(5));\n```\n\nThe last part to mention is when values are sent in multiple groups with a [delimiter].\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"myapp\")\n    .arg(Arg::new(\"option\")\n        .short('o')\n        .value_delimiter(',')\n        .num_args(1..))\n    .get_matches_from(vec![\"myapp\", \"-o=val1,val2,val3\"]);\n           // ARGV indices: ^0       ^1\n           // clap indices:             ^2   ^3   ^4\n           //\n           // clap sees the above as 'myapp -o val1 val2 val3'\n           //                         ^0    ^1 ^2   ^3   ^4\nassert_eq!(m.index_of(\"option\"), Some(2));\nassert_eq!(m.indices_of(\"option\").unwrap().collect::<Vec<_>>(), &[2, 3, 4]);\n```\n[delimiter]: crate::Arg::value_delimiter()","links":{"crate::Arg::value_delimiter()":"0:189:2942","`ArgMatches::indices_of`":"0:1796:6822"},"attrs":["#[track_caller]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:808":{"id":"0:808","crate_id":0,"name":null,"span":{"filename":"src/builder/range.rs","begin":[8,0],"end":[101,1]},"visibility":{"restricted":{"parent":"0:807:2147","path":"::builder::range"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"ValueRange","id":"0:3588:2156","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:809:3648","0:810:3653","0:811:915","0:813:3573","0:814:3689","0:815:2259"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:531:5068":{"id":"0:531:5068","crate_id":0,"name":"get_visible_long_flag_aliases","span":{"filename":"src/builder/command.rs","begin":[3320,4],"end":[3325,5]},"visibility":"public","docs":"Iterate through the *visible* long aliases for this subcommand.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:7156:156","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}}]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'_"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3765:412":{"id":"0:3765:412","crate_id":0,"name":"clone","span":{"filename":"src/builder/value_parser.rs","begin":[939,15],"end":[939,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"PathBufValueParser","id":"0:3762:2168","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:824":{"id":"0:824","crate_id":0,"name":null,"span":{"filename":"src/builder/range.rs","begin":[113,0],"end":[117,1]},"visibility":{"restricted":{"parent":"0:807:2147","path":"::builder::range"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2564:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueRange","id":"0:3588:2156","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:825:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:5:681-0:3505:1650":{"id":"b:5:681-0:3505:1650","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:677:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Command","id":"0:3505:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:683:5351","5:684:3662","5:685:8969"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11467:5521":{"id":"2:11467:5521","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"self::pattern":"2:11116:8056","prim@char":"1:12300:408"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:10940:8059","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11121:8050","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2528-0:3638:2154":{"id":"b:2:2528-0:3638:2154","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2531:127","2:2532:1426"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:587:3623":{"id":"0:587:3623","crate_id":0,"name":"is_hide_set","span":{"filename":"src/builder/command.rs","begin":[3675,4],"end":[3677,5]},"visibility":"public","docs":"Report whether [`Command::hide`] is set","links":{"`Command::hide`":"0:500:3217"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1855:2029":{"id":"0:1855:2029","crate_id":0,"name":"Item","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1414,4],"end":[1414,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"0:1148:2015":{"id":"0:1148:2015","crate_id":0,"name":"parse","span":{"filename":"src/builder/value_parser.rs","begin":[872,4],"end":[885,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["cmd",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Command","id":"0:3505:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["_arg",{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Arg","id":"0:3195:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}}}],["value",{"kind":"resolved_path","inner":{"name":"std::ffi::OsString","id":"1:2026:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48278:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Value","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:1125:2173","args":null}}}},{"type":{"kind":"resolved_path","inner":{"name":"crate::Error","id":"0:12:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3762:2168":{"id":"0:3762:2168","crate_id":0,"name":"PathBufValueParser","span":{"filename":"src/builder/value_parser.rs","begin":[941,0],"end":[941,32]},"visibility":"public","docs":"Implementation for [`ValueParser::path_buf`]\n\nUseful for composing new [`TypedValueParser`]s","links":{"`ValueParser::path_buf`":"0:1075:5679","`TypedValueParser`":"0:1125:2173"},"attrs":["#[non_exhaustive]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":false}},"generics":{"params":[],"where_predicates":[]},"impls":["0:1159","a:2:7735:6524-0:3762:2168","a:2:2676:225-0:3762:2168","a:2:2662:217-0:3762:2168","a:2:2726:5340-0:3762:2168","a:2:7736:6523-0:3762:2168","b:2:2523-0:3762:2168","b:2:2238-0:3762:2168","b:2:2517-0:3762:2168","b:2:2513-0:3762:2168","b:2:2241-0:3762:2168","b:2:2528-0:3762:2168","b:2:3321-0:3762:2168","b:5:681-0:3762:2168","0:3763","0:3764","0:3766","0:1161","0:1166"]}},"a:2:7735:6524-0:3756:2167":{"id":"a:2:7735:6524-0:3756:2167","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7735:6524","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsStringValueParser","id":"0:3756:2167","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4552":{"id":"0:4552","crate_id":0,"name":null,"span":{"filename":"src/util/color.rs","begin":[5,22],"end":[5,27]},"visibility":{"restricted":{"parent":"0:2776:1564","path":"::util::color"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:4542:1657","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4553:412"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:2735:673":{"id":"0:2735:673","crate_id":0,"name":"from","span":{"filename":"src/util/id.rs","begin":[75,4],"end":[77,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["name",{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:90":{"id":"0:90","crate_id":0,"name":null,"span":{"filename":"src/derive.rs","begin":[432,0],"end":[445,1]},"visibility":{"restricted":{"parent":"0:29:544","path":"::derive"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FromArgMatches","id":"0:54:1666","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["update_from_arg_matches_mut","from_arg_matches_mut"],"trait":{"name":"FromArgMatches","id":"0:54:1666","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:2137","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:92:2065","0:93:2018","0:94:2069","0:95:2037"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4539":{"id":"0:4539","crate_id":0,"name":null,"span":{"filename":"src/util/id.rs","begin":[8,57],"end":[8,61]},"visibility":{"restricted":{"parent":"0:2715:1860","path":"::util::id"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:8819:140","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4540:707"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:7735:6524-0:2796:1649":{"id":"a:2:7735:6524-0:2796:1649","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7735:6524","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgAction","id":"0:2796:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:828":{"id":"0:828","crate_id":0,"name":null,"span":{"filename":"src/builder/range.rs","begin":[125,0],"end":[131,1]},"visibility":{"restricted":{"parent":"0:807:2147","path":"::builder::range"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Range","id":"2:46457:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueRange","id":"0:3588:2156","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:829:673"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4525":{"id":"0:4525","crate_id":0,"name":null,"span":{"filename":"src/util/id.rs","begin":[8,9],"end":[8,16]},"visibility":{"restricted":{"parent":"0:2715:1860","path":"::util::id"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2564:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4526:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4540:707":{"id":"0:4540:707","crate_id":0,"name":"hash","span":{"filename":"src/util/id.rs","begin":[8,57],"end":[8,61]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["state",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"__H"}}}]],"output":{"kind":"tuple","inner":[]},"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:8833:144","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:325:1870":{"id":"0:325:1870","crate_id":0,"name":"required","span":{"filename":"src/builder/arg_group.rs","begin":[316,4],"end":[319,5]},"visibility":"public","docs":"Require an argument from the group to be present when parsing.\n\nThis is unless conflicting with another argument.  A required group will be displayed in\nthe usage string of the application in the format `<arg|arg2|arg3>`.\n\n**NOTE:** This setting only applies to the current [`Command`] / [`Subcommand`]s, and not\nglobally.\n\n**NOTE:** By default, [`ArgGroup::multiple`] is set to `false` which when combined with\n`ArgGroup::required(true)` states, \"One and *only one* arg must be used from this group.\nUse of more than one arg is an error.\" Vice setting `ArgGroup::multiple(true)` which\nstates, '*At least* one arg from this group must be used. Using multiple is OK.\"\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ArgGroup, error::ErrorKind, ArgAction};\nlet result = Command::new(\"myprog\")\n    .arg(Arg::new(\"flag\")\n        .short('f')\n        .action(ArgAction::SetTrue))\n    .arg(Arg::new(\"color\")\n        .short('c')\n        .action(ArgAction::SetTrue))\n    .group(ArgGroup::new(\"req_flags\")\n        .args([\"flag\", \"color\"])\n        .required(true))\n    .try_get_matches_from(vec![\"myprog\"]);\n// Because we didn't use any of the args in the group, it's an error\nassert!(result.is_err());\nlet err = result.unwrap_err();\nassert_eq!(err.kind(), ErrorKind::MissingRequiredArgument);\n```\n\n[`Subcommand`]: crate::Subcommand\n[`ArgGroup::multiple`]: ArgGroup::multiple()\n[`Command`]: crate::Command","links":{"crate::Command":"0:3505:1650","crate::Subcommand":"0:63:1668","ArgGroup::multiple()":"0:323:3822"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1104":{"id":"0:1104","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[536,0],"end":[544,1]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":"Create a [`ValueParser`] with [`PossibleValuesParser`]\n\nSee [`PossibleValuesParser`] for more flexibility in creating the\n[`PossibleValue`][crate::builder::PossibleValue]s.\n\n# Examples\n\n```rust\nlet possible = vec![\"always\", \"auto\", \"never\"];\nlet mut cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"color\")\n            .long(\"color\")\n            .value_parser(possible)\n            .default_value(\"auto\")\n    );\n\nlet m = cmd.try_get_matches_from_mut(\n    [\"cmd\", \"--color\", \"never\"]\n).unwrap();\n\nlet color: &String = m.get_one(\"color\")\n    .expect(\"default\");\nassert_eq!(color, \"never\");\n```","links":{"`ValueParser`":"0:1054:2174","`PossibleValuesParser`":"0:3783:2169","crate::builder::PossibleValue":"0:3571:1966"},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"super::PossibleValue","id":"0:3571:1966","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:6400:240","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"P"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6718:2692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1054:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1106:673"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11500:29196":{"id":"2:11500:29196","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11116:8056","prim@char":"1:12300:408","`DoubleEndedIterator`":"2:7079:120","str::match_indices":"2:11497:29195"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:50278:8073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11121:8050","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11121:8050","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11136:8051","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3954:6173":{"id":"0:3954:6173","crate_id":0,"name":"SuggestedValue","span":{"filename":"src/error/context.rs","begin":[31,4],"end":[31,18]},"visibility":"default","docs":"Potential fix for the user","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"0:1252:915":{"id":"0:1252:915","crate_id":0,"name":"new","span":{"filename":"src/builder/value_parser.rs","begin":[1717,4],"end":[1719,5]},"visibility":"public","docs":"Parse false-like string values, everything else is `true`","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2528-0:3835:2164":{"id":"b:2:2528-0:3835:2164","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FalseyValueParser","id":"0:3835:2164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2531:127","2:2532:1426"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:16":{"id":"0:16","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[115,46],"end":[115,60]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::derive::FromArgMatches","name":"FromArgMatches","id":"0:54:1666","glob":false}},"0:724:673":{"id":"0:724:673","crate_id":0,"name":"from","span":{"filename":"src/builder/os_str.rs","begin":[124,4],"end":[126,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["name",{"kind":"borrowed_ref","inner":{"lifetime":"'static","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7736:6523-0:3229:1653":{"id":"a:2:7736:6523-0:3229:1653","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7736:6523","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3229:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:148":{"id":"0:148","crate_id":0,"name":null,"span":{"filename":"src/builder/arg.rs","begin":[89,0],"end":[848,1]},"visibility":{"restricted":{"parent":"0:124:1849","path":"::builder::arg"}},"docs":"# Basic API","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3195:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:149:915","0:150:1860","0:151:1863","0:152:1850","0:153:277","0:154:2489","0:155:2402","0:157:2403","0:158:2516","0:159:2521","0:160:2528","0:162:2534","0:163:747","0:164:2577","0:165:2624","0:166:1870","0:167:2397","0:168:2671","0:169:2691"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2517-0:3842:2162":{"id":"b:2:2517-0:3842:2162","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BoolishValueParser","id":"0:3842:2162","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2519:673"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:941:310":{"id":"0:941:310","crate_id":0,"name":"as_ref","span":{"filename":"src/builder/str.rs","begin":[129,4],"end":[131,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:39:2026":{"id":"0:39:2026","crate_id":0,"name":"parse_from","span":{"filename":"src/derive.rs","begin":[102,4],"end":[118,5]},"visibility":"default","docs":"Parse from iterator, exit on error","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["itr",{"kind":"generic","inner":"I"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7042:149","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsString","id":"1:2026:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:455:4021":{"id":"0:455:4021","crate_id":0,"name":"bin_name","span":{"filename":"src/builder/command.rs","begin":[1432,4],"end":[1435,5]},"visibility":"public","docs":"Overrides the runtime-determined name of the binary for help and error messages.\n\nThis should only be used when absolutely necessary, such as when the binary name for your\napplication is misleading, or perhaps *not* how the user should invoke your program.\n\n**Pro-tip:** When building things such as third party `cargo`\nsubcommands, this setting **should** be used!\n\n**NOTE:** This *does not* change or set the name of the binary file on\ndisk. It only changes what clap thinks the name is for the purposes of\nerror or help messages.\n\n# Examples\n\n```no_run\n# use clap::Command;\nCommand::new(\"My Program\")\n     .bin_name(\"my_binary\")\n# ;\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["name",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:6967:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl IntoResettable<String>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:6967:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1023":{"id":"0:1023","crate_id":0,"name":null,"span":{"filename":"src/builder/styled_str.rs","begin":[262,0],"end":[268,1]},"visibility":{"restricted":{"parent":"0:986:2149","path":"::builder::styled_str"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'static","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1024:673"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3707:5570":{"id":"0:3707:5570","crate_id":0,"name":"Other","span":{"filename":"src/builder/value_hint.rs","begin":[34,4],"end":[34,9]},"visibility":"default","docs":"None of the hints below apply. Disables shell completion for this argument.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"0:3971:600":{"id":"0:3971:600","crate_id":0,"name":"eq","span":{"filename":"src/error/context.rs","begin":[2,29],"end":[2,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:3929:6081","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3617:655":{"id":"0:3617:655","crate_id":0,"name":"fmt","span":{"filename":"src/builder/resettable.rs","begin":[31,22],"end":[31,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:8556:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8545:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7736:6523-0:3810:2171":{"id":"a:2:7736:6523-0:3810:2171","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:7736:6523","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7736:6523","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangedU64ValueParser","id":"0:3810:2171","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:3321-0:1549:6080":{"id":"b:2:3321-0:1549:6080","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3319:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"KindFormatter","id":"0:1549:6080","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3323:1440"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4119":{"id":"0:4119","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[65,16],"end":[65,21]},"visibility":{"restricted":{"parent":"0:1754:6526","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4112:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4120:412"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2676:225-0:4091:6463":{"id":"a:2:2676:225-0:4091:6463","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4091:6463","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:157:2403":{"id":"0:157:2403","crate_id":0,"name":"short_aliases","span":{"filename":"src/builder/arg.rs","begin":[320,4],"end":[326,5]},"visibility":"public","docs":"Add aliases, which functions as a hidden short flag.\n\nThis is more efficient, and easier than creating multiple hidden subcommands as one only\nneeds to check for the existence of this command, and not all variants.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ArgAction};\nlet m = Command::new(\"prog\")\n            .arg(Arg::new(\"test\")\n                    .short('t')\n                    .short_aliases(['e', 's'])\n                    .action(ArgAction::SetTrue)\n                    .help(\"the file to add\")\n                    .required(false))\n            .get_matches_from(vec![\n                \"prog\", \"-s\"\n            ]);\nassert_eq!(*m.get_one::<bool>(\"test\").expect(\"defaulted by clap\"), true);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["names",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7042:149","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"primitive","inner":"char"}}}}]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl IntoIterator<Item = char>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7042:149","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"primitive","inner":"char"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:459:4023":{"id":"0:459:4023","crate_id":0,"name":"long_about","span":{"filename":"src/builder/command.rs","begin":[1519,4],"end":[1522,5]},"visibility":"public","docs":"Sets the program's description for the long help (`--help`).\n\nIf [`Command::about`] is not specified, this message will be displayed for `-h`.\n\n**NOTE:** Only [`Command::about`] (short format) is used in completion\nscript generation in order to be concise.\n\n# Examples\n\n```no_run\n# use clap::Command;\nCommand::new(\"myprog\")\n    .long_about(\n\"Does really amazing things to great people. Now let's talk a little\n more in depth about how this subcommand really works. It may take about\n a few lines of text, but that's ok!\")\n# ;\n```\n[`Command::about`]: Command::about()","links":{"Command::about()":"0:458:1838"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["long_about",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl IntoResettable<StyledStr>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3721:5590":{"id":"0:3721:5590","crate_id":0,"name":"CommandWithArguments","span":{"filename":"src/builder/value_hint.rs","begin":[57,4],"end":[57,24]},"visibility":"default","docs":"Capture the remaining arguments as a command name and arguments for that command. This is\ncommon when writing shell wrappers that execute anther command, for example `sudo` or `env`.\n\nThis hint is special, the argument must be a positional argument and have\n[`.num_args(1..)`] and Command must use [`Command::trailing_var_arg(true)`]. The result is that the\ncommand line `my_app ls -la /` will be parsed as `[\"ls\", \"-la\", \"/\"]` and clap won't try to\nparse the `-la` argument itself.\n\n[`Command::trailing_var_arg(true)`]: crate::Command::trailing_var_arg\n[`.num_args(1..)`]: crate::Arg::num_args()","links":{"crate::Arg::num_args()":"0:178:1872","crate::Command::trailing_var_arg":"0:480:2577"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"b:2:2241-0:3835:2164":{"id":"b:2:2241-0:3835:2164","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2235:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FalseyValueParser","id":"0:3835:2164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2243:26835"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:236:3518":{"id":"0:236:3518","crate_id":0,"name":"overrides_with","span":{"filename":"src/builder/arg.rs","begin":[3648,4],"end":[3655,5]},"visibility":"public","docs":"Sets an overridable argument.\n\ni.e. this argument and the following argument\nwill override each other in POSIX style (whichever argument was specified at runtime\n**last** \"wins\")\n\n**NOTE:** When an argument is overridden it is essentially as if it never was used, any\nconflicts, requirements, etc. are evaluated **after** all \"overrides\" have been removed\n\n**NOTE:** Overriding an argument implies they [conflict][Arg::conflicts_with`].\n\n# Examples\n\n```rust\n# use clap::{Command, arg};\nlet m = Command::new(\"prog\")\n    .arg(arg!(-f --flag \"some flag\")\n        .conflicts_with(\"debug\"))\n    .arg(arg!(-d --debug \"other flag\"))\n    .arg(arg!(-c --color \"third flag\")\n        .overrides_with(\"flag\"))\n    .get_matches_from(vec![\n        \"prog\", \"-f\", \"-d\", \"-c\"]);\n            //    ^~~~~~~~~~~~^~~~~ flag is overridden by color\n\nassert!(*m.get_one::<bool>(\"color\").unwrap());\nassert!(*m.get_one::<bool>(\"debug\").unwrap()); // even though flag conflicts with debug, it's as if flag\n                                // was never used because it was overridden with color\nassert!(!*m.get_one::<bool>(\"flag\").unwrap());\n```","links":{"Arg::conflicts_with`":"0:234:3488"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["arg_id",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl IntoResettable<Id>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3797":{"id":"0:3797","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1251,15],"end":[1251,20]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"std::convert::TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:3791:2170","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:3799:412"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1259":{"id":"0:1259","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1760,0],"end":[1764,1]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2564:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FalseyValueParser","id":"0:3835:2164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1260:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11415:789":{"id":"2:11415:789","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12300:408"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7735:6524-0:3662:1951":{"id":"a:2:7735:6524-0:3662:1951","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7735:6524","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:2722:311":{"id":"0:2722:311","crate_id":0,"name":"as_str","span":{"filename":"src/util/id.rs","begin":[21,4],"end":[23,5]},"visibility":"public","docs":"Get the raw string of the `Id`","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2513-0:3749:2172":{"id":"b:2:2513-0:3749:2172","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StringValueParser","id":"0:3749:2172","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2516:2263"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:477:4655":{"id":"0:477:4655","crate_id":0,"name":"arg_required_else_help","span":{"filename":"src/builder/command.rs","begin":[2006,4],"end":[2012,5]},"visibility":"public","docs":"Exit gracefully if no arguments are present (e.g. `$ myprog`).\n\n**NOTE:** [`subcommands`] count as arguments\n\n# Examples\n\n```rust\n# use clap::{Command};\nCommand::new(\"myprog\")\n    .arg_required_else_help(true);\n```\n\n[`subcommands`]: crate::Command::subcommand()\n[`Arg::default_value`]: crate::Arg::default_value()","links":{"crate::Command::subcommand()":"0:402:4142"},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1313:1667":{"id":"0:1313:1667","crate_id":0,"name":"Parser","span":{"filename":"src/builder/value_parser.rs","begin":[2107,4],"end":[2107,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1054:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:3743":{"id":"0:3743","crate_id":0,"name":null,"span":{"filename":"src/builder/value_hint.rs","begin":[27,43],"end":[27,48]},"visibility":{"restricted":{"parent":"0:1042:2150","path":"::builder::value_hint"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:3704:1651","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3744:412"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:2781":{"id":"0:2781","crate_id":0,"name":null,"span":{"filename":"src/util/color.rs","begin":[67,0],"end":[74,1]},"visibility":{"restricted":{"parent":"0:2776:1564","path":"::util::color"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:8601:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:4542:1657","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2782:655"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:239:1859":{"id":"0:239:1859","crate_id":0,"name":"get_id","span":{"filename":"src/builder/arg.rs","begin":[3698,4],"end":[3700,5]},"visibility":"public","docs":"Get the name of the argument","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:5352-0:3195:1652":{"id":"b:5:5352-0:3195:1652","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:8601:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5350:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3195:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5354:1406"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4278:6991":{"id":"0:4278:6991","crate_id":0,"name":"EnvVariable","span":{"filename":"src/parser/matches/value_source.rs","begin":[8,4],"end":[8,15]},"visibility":"default","docs":"Value came [`Arg::env`][crate::Arg::env]","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"0:3789:655":{"id":"0:3789:655","crate_id":0,"name":"fmt","span":{"filename":"src/builder/value_parser.rs","begin":[1138,16],"end":[1138,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:8556:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8545:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2676:225-0:1553:6083":{"id":"a:2:2676:225-0:1553:6083","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RichFormatter","id":"0:1553:6083","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:8":{"id":"0:8","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[103,30],"end":[103,38]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::builder::ArgGroup","name":"ArgGroup","id":"0:3229:1653","glob":false}},"0:287:3643":{"id":"0:287:3643","crate_id":0,"name":"is_last_set","span":{"filename":"src/builder/arg.rs","begin":[4050,4],"end":[4052,5]},"visibility":"public","docs":"Reports whether [`Arg::last`] is set","links":{"`Arg::last`":"0:165:2624"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3713:5575":{"id":"0:3713:5575","crate_id":0,"name":"DirPath","span":{"filename":"src/builder/value_hint.rs","begin":[40,4],"end":[40,11]},"visibility":"default","docs":"Path to a directory.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"b:2:2523-0:3852:2166":{"id":"b:2:2523-0:3852:2166","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2493:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"NonEmptyStringValueParser","id":"0:3852:2166","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2526:127","2:2527:1427"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4096":{"id":"0:4096","crate_id":0,"name":null,"span":{"filename":"src/parser/error.rs","begin":[2,9],"end":[2,14]},"visibility":{"restricted":{"parent":"0:1715:1662","path":"::parser::error"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(missing_copy_implementations)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4091:6463","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4097:412"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2241-0:4174:6458":{"id":"b:2:2241-0:4174:6458","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2235:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawValues","id":"0:4174:6458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2243:26835"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2662:217-0:4091:6463":{"id":"a:2:2662:217-0:4091:6463","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4091:6463","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:2676:225-0:3571:1966":{"id":"a:2:2676:225-0:3571:1966","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:3571:1966","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:2076":{"id":"0:2076","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/mod.rs","begin":[10,0],"end":[10,31]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"arg_matches::ValuesRef","name":"ValuesRef","id":"0:4161:6460","glob":false}},"0:4018:6202":{"id":"0:4018:6202","crate_id":0,"name":"ValueValidation","span":{"filename":"src/error/kind.rs","begin":[96,4],"end":[96,19]},"visibility":"default","docs":"Occurs when the user provides a value for an argument with a custom validation and the\nvalue fails that validation.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, error::ErrorKind, value_parser};\nfn is_numeric(val: &str) -> Result<(), String> {\n    match val.parse::<i64>() {\n        Ok(..) => Ok(()),\n        Err(..) => Err(String::from(\"value wasn't a number!\")),\n    }\n}\n\nlet result = Command::new(\"prog\")\n    .arg(Arg::new(\"num\")\n         .value_parser(value_parser!(u8)))\n    .try_get_matches_from(vec![\"prog\", \"NotANumber\"]);\nassert!(result.is_err());\nassert_eq!(result.unwrap_err().kind(), ErrorKind::ValueValidation);\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"0:1880":{"id":"0:1880","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1490,0],"end":[1498,1]},"visibility":{"restricted":{"parent":"0:1754:6526","path":"::parser::matches::arg_matches"}},"docs":"Creates an empty iterator.","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2564:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValuesRef","id":"0:4161:6460","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:1883:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2676:225-0:3547:181":{"id":"a:2:2676:225-0:3547:181","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:76:2015":{"id":"0:76:2015","crate_id":0,"name":"parse","span":{"filename":"src/derive.rs","begin":[398,4],"end":[400,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4157:412":{"id":"0:4157:412","crate_id":0,"name":"clone","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1406,9],"end":[1406,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Values","id":"0:4151:6459","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3736":{"id":"0:3736","crate_id":0,"name":null,"span":{"filename":"src/builder/value_hint.rs","begin":[27,27],"end":[27,29]},"visibility":{"restricted":{"parent":"0:1042:2150","path":"::builder::value_hint"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2673:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:3704:1651","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1781:6626":{"id":"0:1781:6626","crate_id":0,"name":"get_occurrences","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[249,4],"end":[254,5]},"visibility":"public","docs":"Iterate over the values passed to each occurrence of an option.\n\nEach item is itself an iterator containing the arguments passed to a single occurrence\nof the option.\n\nIf the option doesn't support multiple occurrences, or there was only a single occurrence,\nthe iterator will only contain a single item.\n\nReturns `None` if the option wasn't present.\n\n# Panics\n\nIf the argument definition and access mismatch. To handle this case programmatically, see\n[`ArgMatches::try_get_occurrences`].\n\n# Examples\n```rust\n# use clap::{Command,Arg, ArgAction, value_parser};\nlet m = Command::new(\"myprog\")\n    .arg(Arg::new(\"x\")\n        .short('x')\n        .num_args(2)\n        .action(ArgAction::Append)\n        .value_parser(value_parser!(String)))\n    .get_matches_from(vec![\n        \"myprog\", \"-x\", \"a\", \"b\", \"-x\", \"c\", \"d\"]);\nlet vals: Vec<Vec<&String>> = m.get_occurrences(\"x\").unwrap().map(Iterator::collect).collect();\nassert_eq!(vals, [[\"a\", \"b\"], [\"c\", \"d\"]]);\n```","links":{"`ArgMatches::try_get_occurrences`":"0:1814:6628"},"attrs":["#[track_caller]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OccurrencesRef","id":"0:4212:6627","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Any","id":"2:3319:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1173:5472":{"id":"0:1173:5472","crate_id":0,"name":"Value","span":{"filename":"src/builder/value_parser.rs","begin":[1037,4],"end":[1037,19]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"E"}}},"0:1334:1667":{"id":"0:1334:1667","crate_id":0,"name":"Parser","span":{"filename":"src/builder/value_parser.rs","begin":[2157,4],"end":[2157,44]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:3791:2170","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u32"}}],"bindings":[]}}}}}},"a:2:2676:225-0:3783:2169":{"id":"a:2:2676:225-0:3783:2169","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValuesParser","id":"0:3783:2169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11505:5504":{"id":"2:11505:5504","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:211:3235":{"id":"0:211:3235","crate_id":0,"name":"hide_default_value","span":{"filename":"src/builder/arg.rs","begin":[2331,4],"end":[2337,5]},"visibility":"public","docs":"Do not display the default value of the argument in the help message.\n\nThis is useful when default behavior of an arg is explained elsewhere in the help text.\n\n**NOTE:** Setting this requires [taking values][Arg::num_args]\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ArgAction};\nlet m = Command::new(\"connect\")\n    .arg(Arg::new(\"host\")\n        .long(\"host\")\n        .default_value(\"localhost\")\n        .action(ArgAction::Set)\n        .hide_default_value(true));\n\n```\n\nIf we were to run the above program with `--help` the `[default: localhost]` portion of\nthe help text would be omitted.","links":{"Arg::num_args":"0:178:1872"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:482":{"id":"0:482","crate_id":0,"name":null,"span":{"filename":"src/builder/command.rs","begin":[2171,0],"end":[3207,1]},"visibility":{"restricted":{"parent":"0:346:1834","path":"::builder::command"}},"docs":"# Subcommand-specific Settings","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Command","id":"0:3505:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:483:4019","0:484:4018","0:485:277","0:486:4748","0:487:4753","0:488:2402","0:490:4028","0:491:4029","0:492:2516","0:493:4791","0:494:4796","0:495:2528","0:497:4808","0:498:4813","0:499:3188","0:500:3217","0:501:4846","0:502:4869","0:503:4877","0:504:4888","0:505:4912","0:506:4931","0:507:5016","0:508:4041","0:509:5036"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1074:5164":{"id":"0:1074:5164","crate_id":0,"name":"os_string","span":{"filename":"src/builder/value_parser.rs","begin":[191,4],"end":[193,5]},"visibility":"public","docs":"[`OsString`][std::ffi::OsString] parser for argument values\n\n# Example\n\n ```rust\n# use clap::{Command, Arg, builder::ValueParser};\nuse std::ffi::OsString;\nuse std::os::unix::ffi::{OsStrExt,OsStringExt};\nlet r = Command::new(\"myprog\")\n    .arg(\n        Arg::new(\"arg\")\n        .required(true)\n        .value_parser(ValueParser::os_string())\n    )\n    .try_get_matches_from(vec![\n        OsString::from(\"myprog\"),\n        OsString::from_vec(vec![0xe9])\n    ]);\n\nassert!(r.is_ok());\nlet m = r.unwrap();\nlet arg: &OsString = m.get_one(\"arg\")\n    .expect(\"required\");\nassert_eq!(arg.as_bytes(), &[0xe9]);\n```","links":{"std::ffi::OsString":"1:2026:182"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5":{"id":"0:5","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[102,0],"end":[102,34]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::builder::ValueHint","name":"ValueHint","id":"0:3704:1651","glob":false}},"0:443:4363":{"id":"0:443:4363","crate_id":0,"name":"propagate_version","span":{"filename":"src/builder/command.rs","begin":[1154,4],"end":[1160,5]},"visibility":"public","docs":"Specifies to use the version of the current command for all [`subcommands`].\n\nDefaults to `false`; subcommands have independent version strings from their parents.\n\n**NOTE:** This choice is propagated to all child subcommands.\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg};\nCommand::new(\"myprog\")\n    .version(\"v1.1\")\n    .propagate_version(true)\n    .subcommand(Command::new(\"test\"))\n    .get_matches();\n// running `$ myprog test --version` will display\n// \"myprog-test v1.1\"\n```\n\n[`subcommands`]: crate::Command::subcommand()","links":{"crate::Command::subcommand()":"0:402:4142"},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1202":{"id":"0:1202","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1257,0],"end":[1335,1]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"std::convert::TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:3791:2170","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:1204:915","0:1205:2147"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3582":{"id":"0:3582","crate_id":0,"name":null,"span":{"filename":"src/builder/possible_value.rs","begin":[34,32],"end":[34,41]},"visibility":{"restricted":{"parent":"0:780:2146","path":"::builder::possible_value"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2672:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:3571:1966","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3557":{"id":"0:3557","crate_id":0,"name":null,"span":{"filename":"src/builder/os_str.rs","begin":[7,29],"end":[7,38]},"visibility":{"restricted":{"parent":"0:707:2145","path":"::builder::os_str"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2285:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3558:600"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5084:29207":{"id":"5:5084:29207","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:2137","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6718:2692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:2137","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6718:2692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:445:4368":{"id":"0:445:4368","crate_id":0,"name":"disable_help_flag","span":{"filename":"src/builder/command.rs","begin":[1200,4],"end":[1206,5]},"visibility":"public","docs":"Disables `-h` and `--help` flag.\n\n**NOTE:** This choice is propagated to all child subcommands.\n\n# Examples\n\n```rust\n# use clap::{Command, error::ErrorKind};\nlet res = Command::new(\"myprog\")\n    .disable_help_flag(true)\n    .try_get_matches_from(vec![\n        \"myprog\", \"-h\"\n    ]);\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind(), ErrorKind::UnknownArgument);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:967:600":{"id":"0:967:600","crate_id":0,"name":"eq","span":{"filename":"src/builder/str.rs","begin":[215,4],"end":[217,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1316:1667":{"id":"0:1316:1667","crate_id":0,"name":"Parser","span":{"filename":"src/builder/value_parser.rs","begin":[2113,4],"end":[2113,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1054:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"b:2:2523-0:1549:6080":{"id":"b:2:2523-0:1549:6080","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2493:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"KindFormatter","id":"0:1549:6080","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2526:127","2:2527:1427"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:509:5036":{"id":"0:509:5036","crate_id":0,"name":"subcommand_help_heading","span":{"filename":"src/builder/command.rs","begin":[3203,4],"end":[3206,5]},"visibility":"public","docs":"Sets the help heading used for subcommands when printing usage and help.\n\nBy default, this is \"Commands\".\n\nSee also [`Command::subcommand_value_name`]\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg};\nCommand::new(\"myprog\")\n    .subcommand(Command::new(\"sub1\"))\n    .print_help()\n# ;\n```\n\nwill produce\n\n```text\nmyprog\n\nUsage: myprog [COMMAND]\n\nCommands:\n    help    Print this message or the help of the given subcommand(s)\n    sub1\n\nOptions:\n    -h, --help       Print help\n    -V, --version    Print version\n```\n\nbut usage of `subcommand_help_heading`\n\n```no_run\n# use clap::{Command, Arg};\nCommand::new(\"myprog\")\n    .subcommand(Command::new(\"sub1\"))\n    .subcommand_help_heading(\"Things\")\n    .print_help()\n# ;\n```\n\nwill produce\n\n```text\nmyprog\n\nUsage: myprog [COMMAND]\n\nThings:\n    help    Print this message or the help of the given subcommand(s)\n    sub1\n\nOptions:\n    -h, --help       Print help\n    -V, --version    Print version\n```","links":{"`Command::subcommand_value_name`":"0:508:4041"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["heading",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl IntoResettable<Str>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2241-0:4161:6460":{"id":"b:2:2241-0:4161:6460","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2235:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValuesRef","id":"0:4161:6460","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2243:26835"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3321-0:3859:2165":{"id":"b:2:3321-0:3859:2165","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3319:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MapValueParser","id":"0:3859:2165","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"P"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["2:3323:1440"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1336":{"id":"0:1336","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[2164,0],"end":[2171,1]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ValueParserFactory","id":"0:1306:2175","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"i32"},"items":["0:1337:1667","0:1338:2151"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1890:928":{"id":"0:1890:928","crate_id":0,"name":"next","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1534,4],"end":[1536,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"1:2029:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1170:915":{"id":"0:1170:915","crate_id":0,"name":"new","span":{"filename":"src/builder/value_parser.rs","begin":[1030,4],"end":[1033,5]},"visibility":"public","docs":"Parse an [`ValueEnum`][crate::ValueEnum]","links":{"crate::ValueEnum":"0:67:1669"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4286":{"id":"0:4286","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/value_source.rs","begin":[2,23],"end":[2,27]},"visibility":{"restricted":{"parent":"0:2069:6527","path":"::parser::matches::value_source"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2674:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4275:6462","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1030:419":{"id":"0:1030:419","crate_id":0,"name":"cmp","span":{"filename":"src/builder/styled_str.rs","begin":[283,4],"end":[285,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"std::cmp::Ordering","id":"2:38204:180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:216:2396":{"id":"0:216:2396","crate_id":0,"name":"groups","span":{"filename":"src/builder/arg.rs","begin":[2633,4],"end":[2636,5]},"visibility":"public","docs":"The names of [`ArgGroup`]'s the argument belongs to.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ArgAction};\nArg::new(\"debug\")\n    .long(\"debug\")\n    .action(ArgAction::SetTrue)\n    .groups([\"mode\", \"verbosity\"])\n# ;\n```\n\nArguments can be members of multiple groups and then the group checked as if it\nwas one of said arguments.\n\n```rust\n# use clap::{Command, Arg, ArgAction};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"debug\")\n        .long(\"debug\")\n        .action(ArgAction::SetTrue)\n        .groups([\"mode\", \"verbosity\"]))\n    .arg(Arg::new(\"verbose\")\n        .long(\"verbose\")\n        .action(ArgAction::SetTrue)\n        .groups([\"mode\", \"verbosity\"]))\n    .get_matches_from(vec![\n        \"prog\", \"--debug\"\n    ]);\nassert!(m.contains_id(\"mode\"));\nassert!(m.contains_id(\"verbosity\"));\n```\n\n[`ArgGroup`]: crate::ArgGroup","links":{"crate::ArgGroup":"0:3229:1653"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["group_ids",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7042:149","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}}}}]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl Into<Id>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}},{"name":"impl IntoIterator<Item = impl Into<Id>>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7042:149","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2676:225-0:3662:1951":{"id":"a:2:2676:225-0:3662:1951","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:2803:2237":{"id":"0:2803:2237","crate_id":0,"name":"SetFalse","span":{"filename":"src/builder/action.rs","begin":[186,4],"end":[186,12]},"visibility":"default","docs":"When encountered, act as if `\"false\"` was encountered on the command-line\n\nIf no [`default_value`][super::Arg::default_value] is set, it will be `true`.\n\nNo value is allowed. To optionally accept a value, see\n[`Arg::default_missing_value`][super::Arg::default_missing_value]\n\n**NOTE:** If the argument has previously been seen, it will result in a\n[`ArgumentConflict`][crate::error::ErrorKind::ArgumentConflict] unless\n[`Command::args_override_self(true)`][crate::Command::args_override_self] is set.\n\n# Examples\n\n```rust\n# use clap::Command;\n# use clap::Arg;\nlet cmd = Command::new(\"mycmd\")\n    .arg(\n        Arg::new(\"flag\")\n            .long(\"flag\")\n            .action(clap::ArgAction::SetFalse)\n    );\n\nlet matches = cmd.clone().try_get_matches_from([\"mycmd\", \"--flag\"]).unwrap();\nassert!(matches.contains_id(\"flag\"));\nassert_eq!(\n    matches.get_one::<bool>(\"flag\").copied(),\n    Some(false)\n);\n\nlet matches = cmd.try_get_matches_from([\"mycmd\"]).unwrap();\nassert!(matches.contains_id(\"flag\"));\nassert_eq!(\n    matches.get_one::<bool>(\"flag\").copied(),\n    Some(true)\n);\n```","links":{"super::Arg::default_missing_value":"0:198:2261","crate::error::ErrorKind::ArgumentConflict":"0:4026:6162","crate::Command::args_override_self":"0:437:4321","super::Arg::default_value":"0:193:2260"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"0:2311":{"id":"0:2311","crate_id":0,"name":null,"span":{"filename":"src/parser/mod.rs","begin":[26,45],"end":[26,56]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::matches::ValueSource","name":"ValueSource","id":"0:4275:6462","glob":false}},"0:1189:5682":{"id":"0:1189:5682","crate_id":0,"name":"parse_ref","span":{"filename":"src/builder/value_parser.rs","begin":[1151,4],"end":[1158,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["cmd",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Command","id":"0:3505:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["arg",{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Arg","id":"0:3195:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}}}],["value",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"std::ffi::OsStr","id":"1:2029:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48278:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Value","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:1125:2173","args":null}}}},{"type":{"kind":"resolved_path","inner":{"name":"crate::Error","id":"0:12:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:536:5071":{"id":"0:536:5071","crate_id":0,"name":"get_all_short_flag_aliases","span":{"filename":"src/builder/command.rs","begin":[3335,4],"end":[3337,5]},"visibility":"public","docs":"Iterate through the set of *all* the short aliases for this subcommand, both visible and hidden.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:7156:156","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"primitive","inner":"char"}}}}]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'_"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3225":{"id":"0:3225","crate_id":0,"name":null,"span":{"filename":"src/builder/arg.rs","begin":[53,9],"end":[53,16]},"visibility":{"restricted":{"parent":"0:124:1849","path":"::builder::arg"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2564:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3195:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3226:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:555:5100":{"id":"0:555:5100","crate_id":0,"name":"get_groups","span":{"filename":"src/builder/command.rs","begin":[3448,4],"end":[3450,5]},"visibility":"public","docs":"Iterate through the set of groups.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:7156:156","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3229:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}}]}}},"generic_params":[],"modifier":"none"}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2306":{"id":"0:2306","crate_id":0,"name":null,"span":{"filename":"src/parser/mod.rs","begin":[24,0],"end":[24,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::matches::Values","name":"Values","id":"0:4151:6459","glob":false}},"0:1174:5682":{"id":"0:1174:5682","crate_id":0,"name":"parse_ref","span":{"filename":"src/builder/value_parser.rs","begin":[1039,4],"end":[1082,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["cmd",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Command","id":"0:3505:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["arg",{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Arg","id":"0:3195:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}}}],["value",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"std::ffi::OsStr","id":"1:2029:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48278:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Value","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:1125:2173","args":null}}}},{"type":{"kind":"resolved_path","inner":{"name":"crate::Error","id":"0:12:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:576:5138":{"id":"0:576:5138","crate_id":0,"name":"is_disable_help_subcommand_set","span":{"filename":"src/builder/command.rs","begin":[3597,4],"end":[3599,5]},"visibility":"public","docs":"Report whether [`Command::disable_help_subcommand`] is set","links":{"`Command::disable_help_subcommand`":"0:446:4376"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2238-0:3859:2165":{"id":"b:2:2238-0:3859:2165","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2232:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MapValueParser","id":"0:3859:2165","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"P"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["2:2240:5354"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1274:5472":{"id":"0:1274:5472","crate_id":0,"name":"Value","span":{"filename":"src/builder/value_parser.rs","begin":[1909,4],"end":[1909,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"String","id":"5:6967:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:4161:6460":{"id":"0:4161:6460","crate_id":0,"name":"ValuesRef","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1464,0],"end":[1468,1]},"visibility":"public","docs":"Iterate over multiple values for an argument via [`ArgMatches::get_many`].\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ArgAction};\nlet m = Command::new(\"myapp\")\n    .arg(Arg::new(\"output\")\n        .short('o')\n        .action(ArgAction::Append))\n    .get_matches_from(vec![\"myapp\", \"-o\", \"val1\", \"-o\", \"val2\"]);\n\nlet mut values = m.get_many::<String>(\"output\")\n    .unwrap()\n    .map(|s| s.as_str());\n\nassert_eq!(values.next(), Some(\"val1\"));\nassert_eq!(values.next(), Some(\"val2\"));\nassert_eq!(values.next(), None);\n```","links":{"`ArgMatches::get_many`":"0:1779:6610"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:2:7735:6524-0:4161:6460","a:2:2676:225-0:4161:6460","a:2:2662:217-0:4161:6460","a:2:2726:5340-0:4161:6460","a:2:7736:6523-0:4161:6460","b:2:2523-0:4161:6460","b:2:2238-0:4161:6460","b:2:2517-0:4161:6460","b:2:2513-0:4161:6460","b:2:2241-0:4161:6460","b:2:2528-0:4161:6460","b:2:7046-0:4161:6460","b:2:3321-0:4161:6460","b:5:681-0:4161:6460","0:4166","0:4170","0:1867","0:1873","0:1877","0:1880"]}},"0:4529":{"id":"0:4529","crate_id":0,"name":null,"span":{"filename":"src/util/id.rs","begin":[8,25],"end":[8,27]},"visibility":{"restricted":{"parent":"0:2715:1860","path":"::util::id"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2673:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:2078":{"id":"0:2078","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/mod.rs","begin":[11,22],"end":[11,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"arg_matches::ArgMatches","name":"ArgMatches","id":"0:4112:1655","glob":false}},"0:1585":{"id":"0:1585","crate_id":0,"name":null,"span":{"filename":"src/error/mod.rs","begin":[77,0],"end":[748,1]},"visibility":{"restricted":{"parent":"0:1509:1662","path":"::error"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ErrorFormatter","id":"0:1547:6079","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1581:127","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["0:1587:61","0:1588:664","0:1589:915","0:1590:5774","0:1591:6121","0:1593:778","0:1594:479","0:1596:5181","0:1597:1939","0:1598:6129","0:1600:2021","0:1601:1960","0:1602:6148"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2726:5340-0:3229:1653":{"id":"a:2:2726:5340-0:3229:1653","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2726:5340","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3229:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:928:673":{"id":"0:928:673","crate_id":0,"name":"from","span":{"filename":"src/builder/str.rs","begin":[86,4],"end":[88,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["name",{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4046":{"id":"0:4046","crate_id":0,"name":null,"span":{"filename":"src/error/kind.rs","begin":[2,16],"end":[2,20]},"visibility":{"restricted":{"parent":"0:1566:778","path":"::error::kind"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2674:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4009:3985","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2662:217-0:3571:1966":{"id":"a:2:2662:217-0:3571:1966","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:3571:1966","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:5083":{"id":"5:5083","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:4994:1352","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5084:29207","5:5085:1814","5:5088:29208","5:5091:7699","5:5099:29209","5:5100:5479","5:5101:7469","5:5102:20769","5:5103:5600"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1567":{"id":"0:1567","crate_id":0,"name":null,"span":{"filename":"src/error/kind.rs","begin":[315,0],"end":[342,1]},"visibility":{"restricted":{"parent":"0:1566:778","path":"::error::kind"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4009:3985","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1568:311"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:738":{"id":"0:738","crate_id":0,"name":null,"span":{"filename":"src/builder/os_str.rs","begin":[170,0],"end":[175,1]},"visibility":{"restricted":{"parent":"0:707:2145","path":"::builder::os_str"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"2:2481:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Path","id":"1:5506:187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:739:310"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2517-0:3835:2164":{"id":"b:2:2517-0:3835:2164","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FalseyValueParser","id":"0:3835:2164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2519:673"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:410:2024":{"id":"0:410:2024","crate_id":0,"name":"try_get_matches","span":{"filename":"src/builder/command.rs","begin":[546,4],"end":[549,5]},"visibility":"public","docs":"Parse [`env::args_os`], returning a [`clap::Result`] on failure.\n\n**NOTE:** This method WILL NOT exit when `--help` or `--version` (or short versions) are\nused. It will return a [`clap::Error`], where the [`kind`] is a\n[`ErrorKind::DisplayHelp`] or [`ErrorKind::DisplayVersion`] respectively. You must call\n[`Error::exit`] or perform a [`std::process::exit`].\n\n# Panics\n\nIf contradictory arguments or settings exist.\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg};\nlet matches = Command::new(\"myprog\")\n    // Args and options go here...\n    .try_get_matches()\n    .unwrap_or_else(|e| e.exit());\n```\n[`env::args_os`]: std::env::args_os()\n[`Error::exit`]: crate::Error::exit()\n[`std::process::exit`]: std::process::exit()\n[`clap::Result`]: Result\n[`clap::Error`]: crate::Error\n[`kind`]: crate::Error\n[`ErrorKind::DisplayHelp`]: crate::error::ErrorKind::DisplayHelp\n[`ErrorKind::DisplayVersion`]: crate::error::ErrorKind::DisplayVersion","links":{"std::env::args_os()":"1:1892:4181","crate::error::ErrorKind::DisplayHelp":"0:4034:6131","Result":"2:48278:207","crate::Error::exit()":"0:1600:2021","std::process::exit()":"1:5823:2021","crate::error::ErrorKind::DisplayVersion":"0:4038:6132","crate::Error":"0:12:127"},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"ClapResult","id":"0:1578:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4112:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3651:1003":{"id":"0:3651:1003","crate_id":0,"name":"partial_cmp","span":{"filename":"src/builder/str.rs","begin":[5,40],"end":[5,50]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::option::Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"$crate::cmp::Ordering","id":"2:38204:180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:681-0:3588:2156":{"id":"b:5:681-0:3588:2156","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:677:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueRange","id":"0:3588:2156","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:683:5351","5:684:3662","5:685:8969"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3559":{"id":"0:3559","crate_id":0,"name":null,"span":{"filename":"src/builder/os_str.rs","begin":[7,40],"end":[7,50]},"visibility":{"restricted":{"parent":"0:707:2145","path":"::builder::os_str"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["gt","ge","le","lt"],"trait":{"name":"PartialOrd","id":"2:2327:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3560:1003"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:278:3621":{"id":"0:278:3621","crate_id":0,"name":"is_next_line_help_set","span":{"filename":"src/builder/arg.rs","begin":[3993,4],"end":[3995,5]},"visibility":"public","docs":"Report whether [`Arg::next_line_help`] is set","links":{"`Arg::next_line_help`":"0:208:3212"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1633":{"id":"0:1633","crate_id":0,"name":null,"span":{"filename":"src/error/mod.rs","begin":[750,0],"end":[754,1]},"visibility":{"restricted":{"parent":"0:1509:1662","path":"::error"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ErrorFormatter","id":"0:1547:6079","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"1:2905:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1581:127","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["0:1635:673"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:245:3545":{"id":"0:245:3545","crate_id":0,"name":"get_visible_short_aliases","span":{"filename":"src/builder/arg.rs","begin":[3740,4],"end":[3752,5]},"visibility":"public","docs":"Get visible short aliases for this argument, if any","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:6400:240","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"char"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3670":{"id":"0:3670","crate_id":0,"name":null,"span":{"filename":"src/builder/styled_str.rs","begin":[5,32],"end":[5,41]},"visibility":{"restricted":{"parent":"0:986:2149","path":"::builder::styled_str"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2672:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:497:4808":{"id":"0:497:4808","crate_id":0,"name":"visible_short_flag_aliases","span":{"filename":"src/builder/command.rs","begin":[2565,4],"end":[2571,5]},"visibility":"public","docs":"Add aliases, which function as *visible* short flag subcommands.\n\nSee [`Command::short_flag_aliases`].\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg, };\nlet m = Command::new(\"myprog\")\n            .subcommand(Command::new(\"test\").short_flag('b')\n                .visible_short_flag_aliases(['t']))\n            .get_matches_from(vec![\"myprog\", \"-t\"]);\nassert_eq!(m.subcommand_name(), Some(\"test\"));\n```\n[`Command::short_flag_aliases`]: Command::short_flag_aliases()","links":{"Command::short_flag_aliases()":"0:490:4028"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["names",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7042:149","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"primitive","inner":"char"}}}}]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl IntoIterator<Item = char>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7042:149","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"primitive","inner":"char"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:503:4877":{"id":"0:503:4877","crate_id":0,"name":"external_subcommand_value_parser","span":{"filename":"src/builder/command.rs","begin":[2806,4],"end":[2812,5]},"visibility":"public","docs":"Specifies how to parse external subcommand arguments.\n\nThe default parser is for `OsString`.  This can be used to switch it to `String` or another\ntype.\n\n**NOTE:** Setting this requires [`Command::allow_external_subcommands`]\n\n# Examples\n\n ```\n# use std::ffi::OsString;\n# use clap::Command;\n# use clap::value_parser;\n// Assume there is an external subcommand named \"subcmd\"\nlet m = Command::new(\"myprog\")\n    .allow_external_subcommands(true)\n    .get_matches_from(vec![\n        \"myprog\", \"subcmd\", \"--option\", \"value\", \"-fff\", \"--flag\"\n    ]);\n\n// All trailing arguments will be stored under the subcommand's sub-matches using an empty\n// string argument name\nmatch m.subcommand() {\n    Some((external, ext_m)) => {\n         let ext_args: Vec<_> = ext_m.get_many::<OsString>(\"\").unwrap().collect();\n         assert_eq!(external, \"subcmd\");\n         assert_eq!(ext_args, [\"--option\", \"value\", \"-fff\", \"--flag\"]);\n    },\n    _ => {},\n}\n```\n\n```\n# use clap::Command;\n# use clap::value_parser;\n// Assume there is an external subcommand named \"subcmd\"\nlet m = Command::new(\"myprog\")\n    .external_subcommand_value_parser(value_parser!(String))\n    .get_matches_from(vec![\n        \"myprog\", \"subcmd\", \"--option\", \"value\", \"-fff\", \"--flag\"\n    ]);\n\n// All trailing arguments will be stored under the subcommand's sub-matches using an empty\n// string argument name\nmatch m.subcommand() {\n    Some((external, ext_m)) => {\n         let ext_args: Vec<_> = ext_m.get_many::<String>(\"\").unwrap().collect();\n         assert_eq!(external, \"subcmd\");\n         assert_eq!(ext_args, [\"--option\", \"value\", \"-fff\", \"--flag\"]);\n    },\n    _ => {},\n}\n```\n\n[`subcommands`]: crate::Command::subcommand()","links":{"`Command::allow_external_subcommands`":"0:502:4869"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["parser",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"super::ValueParser","id":"0:1054:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl IntoResettable<super::ValueParser>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"super::ValueParser","id":"0:1054:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:5352-0:3505:1650":{"id":"b:5:5352-0:3505:1650","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:8601:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5350:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Command","id":"0:3505:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5354:1406"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:152:1850":{"id":"0:152:1850","crate_id":0,"name":"long","span":{"filename":"src/builder/arg.rs","begin":[206,4],"end":[209,5]},"visibility":"public","docs":"Sets the long version of the argument without the preceding `--`.\n\nBy default `version` and `help` are used by the auto-generated `version` and `help`\narguments, respectively. You may use the word `version` or `help` for the long form of your\nown arguments, in which case `clap` simply will not assign those to the auto-generated\n`version` or `help` arguments.\n\n**NOTE:** Any leading `-` characters will be stripped\n\n# Examples\n\nTo set `long` use a word containing valid UTF-8. If you supply a double leading\n`--` such as `--config` they will be stripped. Hyphens in the middle of the word, however,\nwill *not* be stripped (i.e. `config-file` is allowed).\n\nSetting `long` allows using the argument via a double hyphen (`--`) such as `--config`\n\n```rust\n# use clap::{Command, Arg, ArgAction};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .long(\"config\")\n        .action(ArgAction::Set))\n    .get_matches_from(vec![\n        \"prog\", \"--config\", \"file.toml\"\n    ]);\n\nassert_eq!(m.get_one::<String>(\"cfg\").map(String::as_str), Some(\"file.toml\"));\n```","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["l",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl IntoResettable<Str>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3715:5577":{"id":"0:3715:5577","crate_id":0,"name":"ExecutablePath","span":{"filename":"src/builder/value_hint.rs","begin":[42,4],"end":[42,18]},"visibility":"default","docs":"Path to an executable file.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"0:507:5016":{"id":"0:507:5016","crate_id":0,"name":"multicall","span":{"filename":"src/builder/command.rs","begin":[3072,4],"end":[3078,5]},"visibility":"public","docs":"Multiple-personality program dispatched on the binary name (`argv[0]`)\n\nA \"multicall\" executable is a single executable\nthat contains a variety of applets,\nand decides which applet to run based on the name of the file.\nThe executable can be called from different names by creating hard links\nor symbolic links to it.\n\nThis is desirable for:\n- Easy distribution, a single binary that can install hardlinks to access the different\n  personalities.\n- Minimal binary size by sharing common code (e.g. standard library, clap)\n- Custom shells or REPLs where there isn't a single top-level command\n\nSetting `multicall` will cause\n- `argv[0]` to be stripped to the base name and parsed as the first argument, as if\n  [`Command::no_binary_name`][Command::no_binary_name] was set.\n- Help and errors to report subcommands as if they were the top-level command\n\nWhen the subcommand is not present, there are several strategies you may employ, depending\non your needs:\n- Let the error percolate up normally\n- Print a specialized error message using the\n  [`Error::context`][crate::Error::context]\n- Print the [help][Command::write_help] but this might be ambiguous\n- Disable `multicall` and re-parse it\n- Disable `multicall` and re-parse it with a specific subcommand\n\nWhen detecting the error condition, the [`ErrorKind`] isn't sufficient as a sub-subcommand\nmight report the same error.  Enable\n[`allow_external_subcommands`][Command::allow_external_subcommands] if you want to specifically\nget the unrecognized binary name.\n\n**NOTE:** Multicall can't be used with [`no_binary_name`] since they interpret\nthe command name in incompatible ways.\n\n**NOTE:** The multicall command cannot have arguments.\n\n**NOTE:** Applets are slightly semantically different from subcommands,\nso it's recommended to use [`Command::subcommand_help_heading`] and\n[`Command::subcommand_value_name`] to change the descriptive text as above.\n\n# Examples\n\n`hostname` is an example of a multicall executable.\nBoth `hostname` and `dnsdomainname` are provided by the same executable\nand which behaviour to use is based on the executable file name.\n\nThis is desirable when the executable has a primary purpose\nbut there is related functionality that would be convenient to provide\nand implement it to be in the same executable.\n\nThe name of the cmd is essentially unused\nand may be the same as the name of a subcommand.\n\nThe names of the immediate subcommands of the Command\nare matched against the basename of the first argument,\nwhich is conventionally the path of the executable.\n\nThis does not allow the subcommand to be passed as the first non-path argument.\n\n```rust\n# use clap::{Command, error::ErrorKind};\nlet mut cmd = Command::new(\"hostname\")\n    .multicall(true)\n    .subcommand(Command::new(\"hostname\"))\n    .subcommand(Command::new(\"dnsdomainname\"));\nlet m = cmd.try_get_matches_from_mut(&[\"/usr/bin/hostname\", \"dnsdomainname\"]);\nassert!(m.is_err());\nassert_eq!(m.unwrap_err().kind(), ErrorKind::UnknownArgument);\nlet m = cmd.get_matches_from(&[\"/usr/bin/dnsdomainname\"]);\nassert_eq!(m.subcommand_name(), Some(\"dnsdomainname\"));\n```\n\nBusybox is another common example of a multicall executable\nwith a subcommmand for each applet that can be run directly,\ne.g. with the `cat` applet being run by running `busybox cat`,\nor with `cat` as a link to the `busybox` binary.\n\nThis is desirable when the launcher program has additional options\nor it is useful to run the applet without installing a symlink\ne.g. to test the applet without installing it\nor there may already be a command of that name installed.\n\nTo make an applet usable as both a multicall link and a subcommand\nthe subcommands must be defined both in the top-level Command\nand as subcommands of the \"main\" applet.\n\n```rust\n# use clap::Command;\nfn applet_commands() -> [Command; 2] {\n    [Command::new(\"true\"), Command::new(\"false\")]\n}\nlet mut cmd = Command::new(\"busybox\")\n    .multicall(true)\n    .subcommand(\n        Command::new(\"busybox\")\n            .subcommand_value_name(\"APPLET\")\n            .subcommand_help_heading(\"APPLETS\")\n            .subcommands(applet_commands()),\n    )\n    .subcommands(applet_commands());\n// When called from the executable's canonical name\n// its applets can be matched as subcommands.\nlet m = cmd.try_get_matches_from_mut(&[\"/usr/bin/busybox\", \"true\"]).unwrap();\nassert_eq!(m.subcommand_name(), Some(\"busybox\"));\nassert_eq!(m.subcommand().unwrap().1.subcommand_name(), Some(\"true\"));\n// When called from a link named after an applet that applet is matched.\nlet m = cmd.get_matches_from(&[\"/usr/bin/true\"]);\nassert_eq!(m.subcommand_name(), Some(\"true\"));\n```\n\n[`no_binary_name`]: crate::Command::no_binary_name\n[`Command::subcommand_value_name`]: crate::Command::subcommand_value_name\n[`Command::subcommand_help_heading`]: crate::Command::subcommand_help_heading","links":{"Command::allow_external_subcommands":"0:502:4869","crate::Command::subcommand_value_name":"0:508:4041","crate::Command::no_binary_name":"0:435:4298","crate::Command::subcommand_help_heading":"0:509:5036","crate::Error::context":"0:1594:479","Command::no_binary_name":"0:435:4298","Command::write_help":"0:426:3988","`ErrorKind`":"0:4009:3985"},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:102:2104":{"id":"0:102:2104","crate_id":0,"name":"augment_subcommands","span":{"filename":"src/derive.rs","begin":[457,4],"end":[459,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["cmd",{"kind":"resolved_path","inner":{"name":"Command","id":"0:3505:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Command","id":"0:3505:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3999":{"id":"0:3999","crate_id":0,"name":null,"span":{"filename":"src/error/context.rs","begin":[74,9],"end":[74,14]},"visibility":{"restricted":{"parent":"0:1533:479","path":"::error::context"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextValue","id":"0:3978:6082","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4000:412"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2238-0:3783:2169":{"id":"b:2:2238-0:3783:2169","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2232:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValuesParser","id":"0:3783:2169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2240:5354"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:7736:6523-0:4161:6460":{"id":"a:2:7736:6523-0:4161:6460","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7736:6523","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValuesRef","id":"0:4161:6460","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"a:2:2726:5340-0:2796:1649":{"id":"a:2:2726:5340-0:2796:1649","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2726:5340","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgAction","id":"0:2796:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:926:673":{"id":"0:926:673","crate_id":0,"name":"from","span":{"filename":"src/builder/str.rs","begin":[80,4],"end":[82,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["name",{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2241-0:3662:1951":{"id":"b:2:2241-0:3662:1951","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2235:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2243:26835"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2523-0:3229:1653":{"id":"b:2:2523-0:3229:1653","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2493:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3229:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2526:127","2:2527:1427"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:715":{"id":"0:715","crate_id":0,"name":null,"span":{"filename":"src/builder/os_str.rs","begin":[61,0],"end":[65,1]},"visibility":{"restricted":{"parent":"0:707:2145","path":"::builder::os_str"}},"docs":null,"links":{},"attrs":["#[cfg(not(feature = \"string\"))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:716:673"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:5:681-0:3929:6081":{"id":"b:5:681-0:3929:6081","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:677:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:3929:6081","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:683:5351","5:684:3662","5:685:8969"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3558:600":{"id":"0:3558:600","crate_id":0,"name":"eq","span":{"filename":"src/builder/os_str.rs","begin":[7,29],"end":[7,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2814:655":{"id":"0:2814:655","crate_id":0,"name":"fmt","span":{"filename":"src/builder/action.rs","begin":[24,16],"end":[24,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:8556:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8545:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3723:5592":{"id":"0:3723:5592","crate_id":0,"name":"Username","span":{"filename":"src/builder/value_hint.rs","begin":[59,4],"end":[59,12]},"visibility":"default","docs":"Name of a local operating system user.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"0:1034:655":{"id":"0:1034:655","crate_id":0,"name":"fmt","span":{"filename":"src/builder/styled_str.rs","begin":[296,4],"end":[302,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"std::fmt::Formatter","id":"2:8556:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"std::fmt::Result","id":"2:8545:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:22:1834":{"id":"0:22:1834","crate_id":0,"name":"command","span":{"filename":"src/macros.rs","begin":[157,0],"end":[164,1]},"visibility":"public","docs":"Requires `cargo` feature flag to be enabled.","links":{},"attrs":["#[cfg(not(feature = \"cargo\"))]","#[macro_export]"],"deprecation":null,"kind":"macro","inner":"macro_rules! command {\n    () => { ... };\n    ($name:expr) => { ... };\n}"},"0:1812:6611":{"id":"0:1812:6611","crate_id":0,"name":"try_get_many","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1091,4],"end":[1107,5]},"visibility":"public","docs":"Non-panicking version of [`ArgMatches::get_many`]","links":{"`ArgMatches::get_many`":"0:1779:6610"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48278:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ValuesRef","id":"0:4161:6460","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4091:6463","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Any","id":"2:3319:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:867:2452":{"id":"0:867:2452","crate_id":0,"name":"into_resettable","span":{"filename":"src/builder/resettable.rs","begin":[79,4],"end":[84,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Resettable","id":"0:3603:2158","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:741:5354":{"id":"0:741:5354","crate_id":0,"name":"borrow","span":{"filename":"src/builder/os_str.rs","begin":[179,4],"end":[181,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"std::ffi::OsStr","id":"1:2029:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1236:673":{"id":"0:1236:673","crate_id":0,"name":"from","span":{"filename":"src/builder/value_parser.rs","begin":[1595,4],"end":[1600,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["range",{"kind":"generic","inner":"B"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1197":{"id":"0:1197","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1201,0],"end":[1209,1]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7042:149","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"super::PossibleValue","id":"0:3571:1966","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"I"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValuesParser","id":"0:3783:2169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1200:673"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:326:2397":{"id":"0:326:2397","crate_id":0,"name":"requires","span":{"filename":"src/builder/arg_group.rs","begin":[356,4],"end":[363,5]},"visibility":"public","docs":"Specify an argument or group that must be present when this group is.\n\nThis is not to be confused with a [required group]. Requirement rules function just like\n[argument requirement rules], you can name other arguments or groups that must be present\nwhen any one of the arguments from this group is used.\n\n**NOTE:** The name provided may be an argument or group name\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ArgGroup, error::ErrorKind, ArgAction};\nlet result = Command::new(\"myprog\")\n    .arg(Arg::new(\"flag\")\n        .short('f')\n        .action(ArgAction::SetTrue))\n    .arg(Arg::new(\"color\")\n        .short('c')\n        .action(ArgAction::SetTrue))\n    .arg(Arg::new(\"debug\")\n        .short('d')\n        .action(ArgAction::SetTrue))\n    .group(ArgGroup::new(\"req_flags\")\n        .args([\"flag\", \"color\"])\n        .requires(\"debug\"))\n    .try_get_matches_from(vec![\"myprog\", \"-c\"]);\n// because we used an arg from the group, and the group requires \"-d\" to be used, it's an\n// error\nassert!(result.is_err());\nlet err = result.unwrap_err();\nassert_eq!(err.kind(), ErrorKind::MissingRequiredArgument);\n```\n[required group]: ArgGroup::required()\n[argument requirement rules]: crate::Arg::requires()","links":{"ArgGroup::required()":"0:325:1870","crate::Arg::requires()":"0:167:2397"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["id",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl IntoResettable<Id>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:960":{"id":"0:960","crate_id":0,"name":null,"span":{"filename":"src/builder/str.rs","begin":[194,0],"end":[199,1]},"visibility":{"restricted":{"parent":"0:912:1352","path":"::builder::str"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2285:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"1:2029:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:961:600"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:5:681-0:3662:1951":{"id":"b:5:681-0:3662:1951","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:677:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:683:5351","5:684:3662","5:685:8969"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4549":{"id":"0:4549","crate_id":0,"name":null,"span":{"filename":"src/util/color.rs","begin":[5,9],"end":[5,14]},"visibility":{"restricted":{"parent":"0:2776:1564","path":"::util::color"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8596:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:4542:1657","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4550:655"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:760":{"id":"0:760","crate_id":0,"name":null,"span":{"filename":"src/builder/os_str.rs","begin":[242,0],"end":[247,1]},"visibility":{"restricted":{"parent":"0:707:2145","path":"::builder::os_str"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2285:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"std::ffi::OsString","id":"1:2026:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:761:600"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:495:2528":{"id":"0:495:2528","crate_id":0,"name":"visible_aliases","span":{"filename":"src/builder/command.rs","begin":[2543,4],"end":[2547,5]},"visibility":"public","docs":"Sets multiple visible aliases to this subcommand.\n\nThis allows the subcommand to be accessed via *either* the\noriginal name or any of the given aliases. This is more efficient and easier\nthan creating multiple hidden subcommands as one only needs to check for\nthe existence of this command and not all aliased variants.\n\n**NOTE:** The alias defined with this method is *visible* from the help\nmessage and displayed as if it were just another regular subcommand. If\nlooking for an alias that will not be displayed in the help message, see\n[`Command::alias`].\n\n**NOTE:** When using aliases, and checking for the existence of a\nparticular subcommand within an [`ArgMatches`] struct, one only needs to\nsearch for the original name and not all aliases.\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg, };\nlet m = Command::new(\"myprog\")\n    .subcommand(Command::new(\"test\")\n        .visible_aliases([\"do-stuff\", \"tests\"]))\n    .get_matches_from(vec![\"myprog\", \"do-stuff\"]);\nassert_eq!(m.subcommand_name(), Some(\"test\"));\n```\n[`Command::alias`]: Command::alias()","links":{"Command::alias()":"0:485:277","`ArgMatches`":"0:4112:1655"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["names",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7042:149","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}}}}]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl Into<Str>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}},{"name":"impl IntoIterator<Item = impl Into<Str>>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7042:149","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2732":{"id":"0:2732","crate_id":0,"name":null,"span":{"filename":"src/util/id.rs","begin":[68,0],"end":[72,1]},"visibility":{"restricted":{"parent":"0:2715:1860","path":"::util::id"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"borrowed_ref","inner":{"lifetime":"'static","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2733:673"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2662:217-0:3768:2163":{"id":"a:2:2662:217-0:3768:2163","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EnumValueParser","id":"0:3768:2163","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4020:6194":{"id":"0:4020:6194","crate_id":0,"name":"TooManyValues","span":{"filename":"src/error/kind.rs","begin":[113,4],"end":[113,17]},"visibility":"default","docs":"Occurs when a user provides more values for an argument than were defined by setting\n[`Arg::num_args`].\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, error::ErrorKind};\nlet result = Command::new(\"prog\")\n    .arg(Arg::new(\"arg\")\n        .num_args(1..=2))\n    .try_get_matches_from(vec![\"prog\", \"too\", \"many\", \"values\"]);\nassert!(result.is_err());\nassert_eq!(result.unwrap_err().kind(), ErrorKind::TooManyValues);\n```\n[`Arg::num_args`]: crate::Arg::num_args()","links":{"crate::Arg::num_args()":"0:178:1872"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"0:1576":{"id":"0:1576","crate_id":0,"name":null,"span":{"filename":"src/error/mod.rs","begin":[42,0],"end":[42,30]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"error-context\")]"],"deprecation":null,"kind":"import","inner":{"source":"format::RichFormatter","name":"RichFormatter","id":"0:1553:6083","glob":false}},"b:2:2528-0:3783:2169":{"id":"b:2:2528-0:3783:2169","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValuesParser","id":"0:3783:2169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2531:127","2:2532:1426"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:877:2452":{"id":"0:877:2452","crate_id":0,"name":"into_resettable","span":{"filename":"src/builder/resettable.rs","begin":[124,4],"end":[129,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Resettable","id":"0:3603:2158","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:53:2036":{"id":"0:53:2036","crate_id":0,"name":"command_for_update","span":{"filename":"src/derive.rs","begin":[170,4],"end":[170,39]},"visibility":"default","docs":"Build a [`Command`] that can update `self`.\n\nSee [`FromArgMatches::update_from_arg_matches_mut`] for updating `self`.","links":{"`Command`":"0:3505:1650","`FromArgMatches::update_from_arg_matches_mut`":"0:58:2037"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Command","id":"0:3505:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:154:2489":{"id":"0:154:2489","crate_id":0,"name":"short_alias","span":{"filename":"src/builder/arg.rs","begin":[260,4],"end":[268,5]},"visibility":"public","docs":"Add an alias, which functions as a hidden short flag.\n\nThis is more efficient, and easier than creating multiple hidden arguments as one only\nneeds to check for the existence of this command, and not all variants.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ArgAction};\nlet m = Command::new(\"prog\")\n            .arg(Arg::new(\"test\")\n            .short('t')\n            .short_alias('e')\n            .action(ArgAction::Set))\n       .get_matches_from(vec![\n            \"prog\", \"-e\", \"cool\"\n        ]);\nassert_eq!(m.get_one::<String>(\"test\").unwrap(), \"cool\");\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["name",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"char"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl IntoResettable<char>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"char"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3251:3955":{"id":"0:3251:3955","crate_id":0,"name":"Equals","span":{"filename":"src/builder/arg_predicate.rs","begin":[12,4],"end":[12,17]},"visibility":"default","docs":"Does the argument match the specified value?","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":{"tuple":["0:3253:1553"]},"discriminant":null}},"0:3759:412":{"id":"0:3759:412","crate_id":0,"name":"clone","span":{"filename":"src/builder/value_parser.rs","begin":[897,15],"end":[897,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"OsStringValueParser","id":"0:3756:2167","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3553":{"id":"0:3553","crate_id":0,"name":null,"span":{"filename":"src/builder/os_str.rs","begin":[7,25],"end":[7,27]},"visibility":{"restricted":{"parent":"0:707:2145","path":"::builder::os_str"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2673:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4288":{"id":"0:4288","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/value_source.rs","begin":[2,29],"end":[2,38]},"visibility":{"restricted":{"parent":"0:2069:6527","path":"::parser::matches::value_source"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2285:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4275:6462","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4275:6462","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4289:600"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1489":{"id":"0:1489","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[41,0],"end":[41,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"value_parser::BoolishValueParser","name":"BoolishValueParser","id":"0:3842:2162","glob":false}},"0:2730":{"id":"0:2730","crate_id":0,"name":null,"span":{"filename":"src/util/id.rs","begin":[62,0],"end":[66,1]},"visibility":{"restricted":{"parent":"0:2715:1860","path":"::util::id"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'static","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2731:673"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:253:3558":{"id":"0:253:3558","crate_id":0,"name":"get_all_aliases","span":{"filename":"src/builder/arg.rs","begin":[3800,4],"end":[3806,5]},"visibility":"public","docs":"Get *all* aliases for this argument, if any, both visible and hidden.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:6400:240","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2513-0:3505:1650":{"id":"b:2:2513-0:3505:1650","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Command","id":"0:3505:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2516:2263"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:2768":{"id":"0:2768","crate_id":0,"name":null,"span":{"filename":"src/util/mod.rs","begin":[9,0],"end":[9,21]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::id::Id","name":"Id","id":"0:4522:1658","glob":false}},"0:878":{"id":"0:878","crate_id":0,"name":null,"span":{"filename":"src/builder/resettable.rs","begin":[132,0],"end":[139,1]},"visibility":{"restricted":{"parent":"0:844:2148","path":"::builder::resettable"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'static","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"items":["0:879:2452"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:158:2516":{"id":"0:158:2516","crate_id":0,"name":"visible_alias","span":{"filename":"src/builder/arg.rs","begin":[348,4],"end":[355,5]},"visibility":"public","docs":"Add an alias, which functions as a visible long flag.\n\nLike [`Arg::alias`], except that they are visible inside the help message.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ArgAction};\nlet m = Command::new(\"prog\")\n            .arg(Arg::new(\"test\")\n                .visible_alias(\"something-awesome\")\n                .long(\"test\")\n                .action(ArgAction::Set))\n       .get_matches_from(vec![\n            \"prog\", \"--something-awesome\", \"coffee\"\n        ]);\nassert_eq!(m.get_one::<String>(\"test\").unwrap(), \"coffee\");\n```\n[`Command::alias`]: Arg::alias()","links":{"`Arg::alias`":"0:153:277"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["name",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl IntoResettable<Str>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2528-0:4112:1655":{"id":"b:2:2528-0:4112:1655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4112:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2531:127","2:2532:1426"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1853":{"id":"0:1853","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1413,0],"end":[1422,1]},"visibility":{"restricted":{"parent":"0:1754:6526","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["flat_map","array_chunks","reduce","try_collect","take_while","any","step_by","advance_by","all","copied","find","size_hint","is_sorted_by_key","product","try_reduce","sum","collect_into","map_while","intersperse","min_by","flatten","le","find_map","__iterator_get_unchecked","zip","map","cmp_by","try_find","position","partition","fold","scan","intersperse_with","enumerate","max_by","eq","partial_cmp_by","last","rposition","gt","partition_in_place","fuse","for_each","partial_cmp","max_by_key","rev","take","eq_by","chain","unzip","is_partitioned","try_for_each","inspect","ge","count","skip","next_chunk","peekable","min","cmp","filter_map","cloned","filter","is_sorted","cycle","try_fold","min_by_key","by_ref","lt","skip_while","nth","collect","max","ne","is_sorted_by"],"trait":{"name":"Iterator","id":"2:7156:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:4151:6459","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:1855:2029","0:1856:928","0:1857:6919"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1020:673":{"id":"0:1020:673","crate_id":0,"name":"from","span":{"filename":"src/builder/styled_str.rs","begin":[247,4],"end":[251,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["name",{"kind":"resolved_path","inner":{"name":"std::string::String","id":"5:6967:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:418:4187":{"id":"0:418:4187","crate_id":0,"name":"try_get_matches_from_mut","span":{"filename":"src/builder/command.rs","begin":[658,4],"end":[709,5]},"visibility":"public","docs":"Parse the specified arguments, returning a [`clap::Result`] on failure.\n\nLike [`Command::try_get_matches_from`] but doesn't consume the `Command`.\n\n**NOTE:** This method WILL NOT exit when `--help` or `--version` (or short versions) are\nused. It will return a [`clap::Error`], where the [`kind`] is a [`ErrorKind::DisplayHelp`]\nor [`ErrorKind::DisplayVersion`] respectively. You must call [`Error::exit`] or\nperform a [`std::process::exit`] yourself.\n\n**NOTE:** The first argument will be parsed as the binary name unless\n[`Command::no_binary_name`] is used.\n\n# Panics\n\nIf contradictory arguments or settings exist.\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg};\nlet arg_vec = vec![\"my_prog\", \"some\", \"args\", \"to\", \"parse\"];\n\nlet mut cmd = Command::new(\"myprog\");\n    // Args and options go here...\nlet matches = cmd.try_get_matches_from_mut(arg_vec)\n    .unwrap_or_else(|e| e.exit());\n```\n[`Command::try_get_matches_from`]: Command::try_get_matches_from()\n[`clap::Result`]: Result\n[`clap::Error`]: crate::Error\n[`kind`]: crate::Error","links":{"`ErrorKind::DisplayVersion`":"0:4038:6132","Result":"2:48278:207","`ErrorKind::DisplayHelp`":"0:4034:6131","crate::Error":"0:12:127","`Command::no_binary_name`":"0:435:4298","`std::process::exit`":"1:5823:2021","`Error::exit`":"0:1600:2021","Command::try_get_matches_from()":"0:415:2033"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["itr",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"ClapResult","id":"0:1578:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4112:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7042:149","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsString","id":"1:2026:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:696:59":{"id":"0:696:59","crate_id":0,"name":"default","span":{"filename":"src/builder/command.rs","begin":[4624,4],"end":[4664,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7735:6524-0:3195:1652":{"id":"a:2:7735:6524-0:3195:1652","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7735:6524","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3195:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"0:3249:2660":{"id":"0:3249:2660","crate_id":0,"name":"IsPresent","span":{"filename":"src/builder/arg_predicate.rs","begin":[10,4],"end":[10,13]},"visibility":"default","docs":"Is the argument present?","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"0:490:4028":{"id":"0:490:4028","crate_id":0,"name":"short_flag_aliases","span":{"filename":"src/builder/command.rs","begin":[2384,4],"end":[2390,5]},"visibility":"public","docs":"Add aliases, which function as \"hidden\" short flag subcommands.\n\nThese will automatically dispatch as if this subcommand was used. This is more efficient,\nand easier than creating multiple hidden subcommands as one only needs to check for the\nexistence of this command, and not all variants.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, };\nlet m = Command::new(\"myprog\")\n    .subcommand(Command::new(\"test\").short_flag('t')\n        .short_flag_aliases(['a', 'b', 'c']))\n        .arg(Arg::new(\"input\")\n            .help(\"the file to add\")\n            .required(false))\n    .get_matches_from(vec![\"myprog\", \"-a\"]);\nassert_eq!(m.subcommand_name(), Some(\"test\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["names",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7042:149","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"primitive","inner":"char"}}}}]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl IntoIterator<Item = char>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7042:149","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"primitive","inner":"char"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2080":{"id":"0:2080","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/mod.rs","begin":[12,0],"end":[12,34]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"value_source::ValueSource","name":"ValueSource","id":"0:4275:6462","glob":false}},"b:2:2517-0:4161:6460":{"id":"b:2:2517-0:4161:6460","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValuesRef","id":"0:4161:6460","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2519:673"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1026:673":{"id":"0:1026:673","crate_id":0,"name":"from","span":{"filename":"src/builder/styled_str.rs","begin":[271,4],"end":[273,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"borrowed_ref","inner":{"lifetime":"'static","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:956":{"id":"0:956","crate_id":0,"name":null,"span":{"filename":"src/builder/str.rs","begin":[181,0],"end":[186,1]},"visibility":{"restricted":{"parent":"0:912:1352","path":"::builder::str"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2285:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"1:2029:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:957:600"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1260:59":{"id":"0:1260:59","crate_id":0,"name":"default","span":{"filename":"src/builder/value_parser.rs","begin":[1761,4],"end":[1763,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2789:2130":{"id":"0:2789:2130","crate_id":0,"name":"to_possible_value","span":{"filename":"src/util/color.rs","begin":[94,4],"end":[102,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:3571:1966","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2238-0:3762:2168":{"id":"b:2:2238-0:3762:2168","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2232:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PathBufValueParser","id":"0:3762:2168","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2240:5354"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2726:5340-0:3756:2167":{"id":"a:2:2726:5340-0:3756:2167","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2726:5340","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsStringValueParser","id":"0:3756:2167","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:2758":{"id":"0:2758","crate_id":0,"name":null,"span":{"filename":"src/util/id.rs","begin":[153,0],"end":[158,1]},"visibility":{"restricted":{"parent":"0:2715:1860","path":"::util::id"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2285:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:6967:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2759:600"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2676:225-0:4522:1658":{"id":"a:2:2676:225-0:4522:1658","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:2662:217-0:3783:2169":{"id":"a:2:2662:217-0:3783:2169","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValuesParser","id":"0:3783:2169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2241-0:1549:6080":{"id":"b:2:2241-0:1549:6080","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2235:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"KindFormatter","id":"0:1549:6080","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2243:26835"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2513-0:4174:6458":{"id":"b:2:2513-0:4174:6458","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawValues","id":"0:4174:6458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2516:2263"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2528-0:3929:6081":{"id":"b:2:2528-0:3929:6081","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:3929:6081","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2531:127","2:2532:1426"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1258:3567":{"id":"0:1258:3567","crate_id":0,"name":"possible_values","span":{"filename":"src/builder/value_parser.rs","begin":[1753,4],"end":[1757,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:2137","args":{"angle_bracketed":{"args":[{"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Iterator","id":"2:7156:156","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"resolved_path","inner":{"name":"crate::builder::PossibleValue","id":"0:3571:1966","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}]}}},"generic_params":[]}],"lifetime":"'_"}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3833":{"id":"0:3833","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1612,22],"end":[1612,27]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8596:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BoolValueParser","id":"0:3829:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3834:655"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1163:5682":{"id":"0:1163:5682","crate_id":0,"name":"parse_ref","span":{"filename":"src/builder/value_parser.rs","begin":[953,4],"end":[960,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["cmd",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Command","id":"0:3505:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["arg",{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Arg","id":"0:3195:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}}}],["value",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"std::ffi::OsStr","id":"1:2029:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48278:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Value","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:1125:2173","args":null}}}},{"type":{"kind":"resolved_path","inner":{"name":"crate::Error","id":"0:12:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:255:3560":{"id":"0:255:3560","crate_id":0,"name":"get_long_and_visible_aliases","span":{"filename":"src/builder/arg.rs","begin":[3810,4],"end":[3819,5]},"visibility":"public","docs":"Get the long option name and its visible aliases, if any","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:6400:240","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4142:6457":{"id":"0:4142:6457","crate_id":0,"name":"IdsRef","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1364,0],"end":[1366,1]},"visibility":"public","docs":"Iterate over [`Arg`][crate::Arg] and [`ArgGroup`][crate::ArgGroup] [`Id`][crate::Id]s via [`ArgMatches::ids`].\n\n# Examples\n\n```\n# use clap::{Command, arg, value_parser};\n\nlet m = Command::new(\"myprog\")\n    .arg(arg!(--color <when>)\n        .value_parser([\"auto\", \"always\", \"never\"]))\n    .arg(arg!(--config <path>)\n        .value_parser(value_parser!(std::path::PathBuf)))\n    .get_matches_from([\"myprog\", \"--config=config.toml\", \"--color=auto\"]);\nassert_eq!(\n    m.ids()\n        .map(|id| id.as_str())\n        .collect::<Vec<_>>(),\n    [\"config\", \"color\"]\n);\n```","links":{"`ArgMatches::ids`":"0:1792:3472","crate::ArgGroup":"0:3229:1653","crate::Id":"0:4522:1658","crate::Arg":"0:3195:1652"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:2:7735:6524-0:4142:6457","a:2:2676:225-0:4142:6457","a:2:2662:217-0:4142:6457","a:2:2726:5340-0:4142:6457","a:2:7736:6523-0:4142:6457","b:2:2523-0:4142:6457","b:2:2238-0:4142:6457","b:2:2517-0:4142:6457","b:2:2513-0:4142:6457","b:2:2241-0:4142:6457","b:2:2528-0:4142:6457","b:2:7046-0:4142:6457","b:2:3321-0:4142:6457","b:5:681-0:4142:6457","0:4145","0:4148","0:1843","0:1848","0:1851"]}},"b:2:3321-0:4254:6461":{"id":"b:2:3321-0:4254:6461","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3319:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:4254:6461","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3323:1440"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:571:5129":{"id":"0:571:5129","crate_id":0,"name":"is_dont_delimit_trailing_values_set","span":{"filename":"src/builder/command.rs","begin":[3571,4],"end":[3573,5]},"visibility":"public","docs":"Report whether [`Command::dont_delimit_trailing_values`] is set","links":{"`Command::dont_delimit_trailing_values`":"0:438:4329"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2517-0:3783:2169":{"id":"b:2:2517-0:3783:2169","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValuesParser","id":"0:3783:2169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2519:673"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2528-0:4542:1657":{"id":"b:2:2528-0:4542:1657","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:4542:1657","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2531:127","2:2532:1426"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1130:837":{"id":"0:1130:837","crate_id":0,"name":"map","span":{"filename":"src/builder/value_parser.rs","begin":[757,4],"end":[763,5]},"visibility":"default","docs":"Adapt a `TypedValueParser` from one value to another\n\n# Example\n\n```rust\n# use clap::Command;\n# use clap::Arg;\n# use clap::builder::TypedValueParser as _;\n# use clap::builder::BoolishValueParser;\nlet cmd = Command::new(\"mycmd\")\n    .arg(\n        Arg::new(\"flag\")\n            .long(\"flag\")\n            .action(clap::ArgAction::SetTrue)\n            .value_parser(\n                BoolishValueParser::new()\n                .map(|b| -> usize {\n                    if b { 10 } else { 5 }\n                })\n            )\n    );\n\nlet matches = cmd.clone().try_get_matches_from([\"mycmd\", \"--flag\"]).unwrap();\nassert!(matches.contains_id(\"flag\"));\nassert_eq!(\n    matches.get_one::<usize>(\"flag\").copied(),\n    Some(10)\n);\n\nlet matches = cmd.try_get_matches_from([\"mycmd\"]).unwrap();\nassert!(matches.contains_id(\"flag\"));\nassert_eq!(\n    matches.get_one::<usize>(\"flag\").copied(),\n    Some(5)\n);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["func",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"MapValueParser","id":"0:3859:2165","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Fn","id":"2:2932:5247","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Value","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:1125:2173","args":null}}}],"output":{"kind":"generic","inner":"T"}}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11447:1810":{"id":"2:11447:1810","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"self::pattern":"2:11116:8056","prim@char":"1:12300:408"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11121:8050","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3938:6172":{"id":"0:3938:6172","crate_id":0,"name":"ValidValue","span":{"filename":"src/error/context.rs","begin":[15,4],"end":[15,14]},"visibility":"default","docs":"Accepted values","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"b:2:2528-0:3859:2165":{"id":"b:2:2528-0:3859:2165","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MapValueParser","id":"0:3859:2165","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"P"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["2:2531:127","2:2532:1426"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:900":{"id":"0:900","crate_id":0,"name":null,"span":{"filename":"src/builder/resettable.rs","begin":[189,0],"end":[193,1]},"visibility":{"restricted":{"parent":"0:844:2148","path":"::builder::resettable"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"generic","inner":"I"},"items":["0:902:2452"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1495":{"id":"0:1495","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[47,0],"end":[47,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"value_parser::PathBufValueParser","name":"PathBufValueParser","id":"0:3762:2168","glob":false}},"a:2:2662:217-0:3859:2165":{"id":"a:2:2662:217-0:3859:2165","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MapValueParser","id":"0:3859:2165","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"P"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:283:3635":{"id":"0:283:3635","crate_id":0,"name":"is_hide_long_help_set","span":{"filename":"src/builder/arg.rs","begin":[4030,4],"end":[4032,5]},"visibility":"public","docs":"Report whether [`Arg::hide_long_help`] is set","links":{"`Arg::hide_long_help`":"0:213:3270"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4194:6698":{"id":"0:4194:6698","crate_id":0,"name":"Occurrences","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1609,0],"end":[1612,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":[]}},"a:2:7735:6524-0:4254:6461":{"id":"a:2:7735:6524-0:4254:6461","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7735:6524","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:4254:6461","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:9":{"id":"0:9","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[104,0],"end":[104,34]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::parser::ArgMatches","name":"ArgMatches","id":"0:4112:1655","glob":false}},"0:306:1003":{"id":"0:306:1003","crate_id":0,"name":"partial_cmp","span":{"filename":"src/builder/arg.rs","begin":[4256,4],"end":[4258,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Ordering","id":"2:38204:180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:873:2452":{"id":"0:873:2452","crate_id":0,"name":"into_resettable","span":{"filename":"src/builder/resettable.rs","begin":[106,4],"end":[111,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Resettable","id":"0:3603:2158","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1054:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:250:1864":{"id":"0:250:1864","crate_id":0,"name":"get_long","span":{"filename":"src/builder/arg.rs","begin":[3779,4],"end":[3781,5]},"visibility":"public","docs":"Get the long option name for this argument, if any","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:557:5104":{"id":"0:557:5104","crate_id":0,"name":"get_positionals","span":{"filename":"src/builder/command.rs","begin":[3460,4],"end":[3462,5]},"visibility":"public","docs":"Iterate through the *positionals* arguments.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:7156:156","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3195:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}}]}}},"generic_params":[],"modifier":"none"}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2811":{"id":"0:2811","crate_id":0,"name":null,"span":{"filename":"src/builder/action.rs","begin":[24,9],"end":[24,14]},"visibility":{"restricted":{"parent":"0:108:1861","path":"::builder::action"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(missing_copy_implementations)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgAction","id":"0:2796:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2812:412"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1110:412":{"id":"0:1110:412","crate_id":0,"name":"clone","span":{"filename":"src/builder/value_parser.rs","begin":[559,4],"end":[567,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3253:1553":{"id":"0:3253:1553","crate_id":0,"name":"0","span":{"filename":"src/builder/arg_predicate.rs","begin":[12,11],"end":[12,16]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"0:3729:5599":{"id":"0:3729:5599","crate_id":0,"name":"EmailAddress","span":{"filename":"src/builder/value_hint.rs","begin":[66,4],"end":[66,16]},"visibility":"default","docs":"Email address.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"a:2:2676:225-0:3852:2166":{"id":"a:2:2676:225-0:3852:2166","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"NonEmptyStringValueParser","id":"0:3852:2166","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:950":{"id":"0:950","crate_id":0,"name":null,"span":{"filename":"src/builder/str.rs","begin":[161,0],"end":[166,1]},"visibility":{"restricted":{"parent":"0:912:1352","path":"::builder::str"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2285:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"primitive","inner":"str"},"items":["0:951:600"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4236:6672":{"id":"0:4236:6672","crate_id":0,"name":"RawOccurrences","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1742,0],"end":[1745,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":[]}},"2:11540:9839":{"id":"2:11540:9839","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4468:9839"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:50418:8068","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4028:6186":{"id":"0:4028:6186","crate_id":0,"name":"MissingRequiredArgument","span":{"filename":"src/error/kind.rs","begin":[189,4],"end":[189,27]},"visibility":"default","docs":"Occurs when the user does not provide one or more required arguments.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, error::ErrorKind};\nlet result = Command::new(\"prog\")\n    .arg(Arg::new(\"debug\")\n        .required(true))\n    .try_get_matches_from(vec![\"prog\"]);\nassert!(result.is_err());\nassert_eq!(result.unwrap_err().kind(), ErrorKind::MissingRequiredArgument);\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"0:3810:2171":{"id":"0:3810:2171","crate_id":0,"name":"RangedU64ValueParser","span":{"filename":"src/builder/value_parser.rs","begin":[1450,0],"end":[1453,1]},"visibility":"public","docs":"Parse number that fall within a range of values\n\n# Example\n\nUsage:\n```rust\nlet mut cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"port\")\n            .long(\"port\")\n            .value_parser(clap::value_parser!(u64).range(3000..))\n            .action(clap::ArgAction::Set)\n            .required(true)\n    );\n\nlet m = cmd.try_get_matches_from_mut([\"cmd\", \"--port\", \"3001\"]).unwrap();\nlet port: u64 = *m.get_one(\"port\")\n    .expect(\"required\");\nassert_eq!(port, 3001);\n```\n\nSemantics:\n```rust\n# use std::ffi::OsStr;\n# use clap::builder::TypedValueParser;\n# let cmd = clap::Command::new(\"test\");\n# let arg = None;\nlet value_parser = clap::builder::RangedU64ValueParser::<u32>::new().range(0..200);\nassert!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"random\")).is_err());\nassert!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"\")).is_err());\nassert!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"-200\")).is_err());\nassert!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"300\")).is_err());\nassert!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"-1\")).is_err());\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"0\")).unwrap(), 0);\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"50\")).unwrap(), 50);\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"std::convert::TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"kind":"primitive","inner":"u64"},"synthetic":false}}}],"where_predicates":[]},"impls":["0:1221","a:2:7735:6524-0:3810:2171","a:2:2676:225-0:3810:2171","a:2:2662:217-0:3810:2171","a:2:2726:5340-0:3810:2171","a:2:7736:6523-0:3810:2171","b:2:2523-0:3810:2171","b:2:2238-0:3810:2171","b:2:2517-0:3810:2171","b:2:2513-0:3810:2171","b:2:2241-0:3810:2171","b:2:2528-0:3810:2171","b:2:3321-0:3810:2171","b:5:681-0:3810:2171","0:3814","0:3816","0:3819","0:1227","0:1233","0:1237"]}},"0:544:5083":{"id":"0:544:5083","crate_id":0,"name":"has_subcommands","span":{"filename":"src/builder/command.rs","begin":[3384,4],"end":[3386,5]},"visibility":"public","docs":"Returns `true` if this `Command` has subcommands.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1025":{"id":"0:1025","crate_id":0,"name":null,"span":{"filename":"src/builder/styled_str.rs","begin":[270,0],"end":[274,1]},"visibility":{"restricted":{"parent":"0:986:2149","path":"::builder::styled_str"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"borrowed_ref","inner":{"lifetime":"'static","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1026:673"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:502:4869":{"id":"0:502:4869","crate_id":0,"name":"allow_external_subcommands","span":{"filename":"src/builder/command.rs","begin":[2742,4],"end":[2748,5]},"visibility":"public","docs":"Assume unexpected positional arguments are a [`subcommand`].\n\nArguments will be stored in the `\"\"` argument in the [`ArgMatches`]\n\n**NOTE:** Use this setting with caution,\nas a truly unexpected argument (i.e. one that is *NOT* an external subcommand)\nwill **not** cause an error and instead be treated as a potential subcommand.\nOne should check for such cases manually and inform the user appropriately.\n\n**NOTE:** A built-in subcommand will be parsed as an external subcommand when escaped with\n`--`.\n\n# Examples\n\n```rust\n# use std::ffi::OsString;\n# use clap::Command;\n// Assume there is an external subcommand named \"subcmd\"\nlet m = Command::new(\"myprog\")\n    .allow_external_subcommands(true)\n    .get_matches_from(vec![\n        \"myprog\", \"subcmd\", \"--option\", \"value\", \"-fff\", \"--flag\"\n    ]);\n\n// All trailing arguments will be stored under the subcommand's sub-matches using an empty\n// string argument name\nmatch m.subcommand() {\n    Some((external, ext_m)) => {\n         let ext_args: Vec<_> = ext_m.get_many::<OsString>(\"\").unwrap().collect();\n         assert_eq!(external, \"subcmd\");\n         assert_eq!(ext_args, [\"--option\", \"value\", \"-fff\", \"--flag\"]);\n    },\n    _ => {},\n}\n```\n\n[`subcommand`]: crate::Command::subcommand()\n[`ArgMatches`]: crate::ArgMatches\n[`ErrorKind::UnknownArgument`]: crate::error::ErrorKind::UnknownArgument","links":{"crate::ArgMatches":"0:4112:1655","crate::Command::subcommand()":"0:402:4142"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1478":{"id":"0:1478","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[30,0],"end":[30,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"command::Command","name":"Command","id":"0:3505:1650","glob":false}},"0:2779":{"id":"0:2779","crate_id":0,"name":null,"span":{"filename":"src/util/color.rs","begin":[61,0],"end":[65,1]},"visibility":{"restricted":{"parent":"0:2776:1564","path":"::util::color"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2564:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:4542:1657","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2780:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:879:2452":{"id":"0:879:2452","crate_id":0,"name":"into_resettable","span":{"filename":"src/builder/resettable.rs","begin":[133,4],"end":[138,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Resettable","id":"0:3603:2158","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2528-0:1553:6083":{"id":"b:2:2528-0:1553:6083","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RichFormatter","id":"0:1553:6083","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2531:127","2:2532:1426"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2726:5340-0:3842:2162":{"id":"a:2:2726:5340-0:3842:2162","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2726:5340","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BoolishValueParser","id":"0:3842:2162","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3652":{"id":"0:3652","crate_id":0,"name":null,"span":{"filename":"src/builder/str.rs","begin":[5,52],"end":[5,55]},"visibility":{"restricted":{"parent":"0:912:1352","path":"::builder::str"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["min","max","clamp"],"trait":{"name":"Ord","id":"2:2321:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3653:419"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:709":{"id":"0:709","crate_id":0,"name":null,"span":{"filename":"src/builder/os_str.rs","begin":[12,0],"end":[42,1]},"visibility":{"restricted":{"parent":"0:707:2145","path":"::builder::os_str"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:711:3590","0:712:5349"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2513-0:3842:2162":{"id":"b:2:2513-0:3842:2162","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BoolishValueParser","id":"0:3842:2162","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2516:2263"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3744:412":{"id":"0:3744:412","crate_id":0,"name":"clone","span":{"filename":"src/builder/value_hint.rs","begin":[27,43],"end":[27,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:3704:1651","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3867:412":{"id":"0:3867:412","crate_id":0,"name":"clone","span":{"filename":"src/builder/value_parser.rs","begin":[1944,9],"end":[1944,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"MapValueParser","id":"0:3859:2165","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"P"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:681-0:3783:2169":{"id":"b:5:681-0:3783:2169","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:677:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValuesParser","id":"0:3783:2169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:683:5351","5:684:3662","5:685:8969"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3996:6200":{"id":"0:3996:6200","crate_id":0,"name":"Number","span":{"filename":"src/error/context.rs","begin":[91,4],"end":[91,17]},"visibility":"default","docs":"A single value","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":{"tuple":["0:3998:1553"]},"discriminant":null}},"0:1895":{"id":"0:1895","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1548,0],"end":[1548,47]},"visibility":{"restricted":{"parent":"0:1754:6526","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["len","is_empty"],"trait":{"name":"ExactSizeIterator","id":"2:7102:6921","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawValues","id":"0:4174:6458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:81:2032":{"id":"0:81:2032","crate_id":0,"name":"try_parse_from","span":{"filename":"src/derive.rs","begin":[414,4],"end":[420,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["itr",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48278:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:12:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"It","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7042:149","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"It"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"It"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsString","id":"1:2026:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2513-0:3859:2165":{"id":"b:2:2513-0:3859:2165","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MapValueParser","id":"0:3859:2165","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"P"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["2:2516:2263"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4049":{"id":"0:4049","crate_id":0,"name":null,"span":{"filename":"src/error/kind.rs","begin":[2,29],"end":[2,38]},"visibility":{"restricted":{"parent":"0:1566:778","path":"::error::kind"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2672:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4009:3985","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2238-0:3756:2167":{"id":"b:2:2238-0:3756:2167","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2232:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsStringValueParser","id":"0:3756:2167","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2240:5354"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:394:4085":{"id":"0:394:4085","crate_id":0,"name":"mut_arg","span":{"filename":"src/builder/command.rs","begin":[238,4],"end":[250,5]},"visibility":"public","docs":"Allows one to mutate an [`Arg`] after it's been added to a [`Command`].\n\nThis can be useful for modifying the auto-generated help or version arguments.\n\n# Panics\n\nIf the argument is undefined\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ArgAction};\n\nlet mut cmd = Command::new(\"foo\")\n    .arg(Arg::new(\"bar\")\n        .short('b')\n        .action(ArgAction::SetTrue))\n    .mut_arg(\"bar\", |a| a.short('B'));\n\nlet res = cmd.try_get_matches_from_mut(vec![\"foo\", \"-b\"]);\n\n// Since we changed `bar`'s short to \"B\" this should err as there\n// is no `-b` anymore, only `-B`\n\nassert!(res.is_err());\n\nlet res = cmd.try_get_matches_from_mut(vec![\"foo\", \"-B\"]);\nassert!(res.is_ok());\n```","links":{"`Arg`":"0:3195:1652","`Command`":"0:3505:1650"},"attrs":["#[must_use]","#[track_caller]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["arg_id",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2481:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"impl AsRef<str>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2481:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2938:4086","args":{"parenthesized":{"inputs":[{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3195:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],"output":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3195:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2662:217-0:3588:2156":{"id":"a:2:2662:217-0:3588:2156","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueRange","id":"0:3588:2156","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11425:309":{"id":"2:11425:309","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:11426:29178","`u8`":"1:12317:1448"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2517-0:4254:6461":{"id":"b:2:2517-0:4254:6461","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:4254:6461","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2519:673"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4047":{"id":"0:4047","crate_id":0,"name":null,"span":{"filename":"src/error/kind.rs","begin":[2,22],"end":[2,27]},"visibility":{"restricted":{"parent":"0:1566:778","path":"::error::kind"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4009:3985","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4048:412"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1268:3567":{"id":"0:1268:3567","crate_id":0,"name":"possible_values","span":{"filename":"src/builder/value_parser.rs","begin":[1852,4],"end":[1856,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:2137","args":{"angle_bracketed":{"args":[{"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Iterator","id":"2:7156:156","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"resolved_path","inner":{"name":"crate::builder::PossibleValue","id":"0:3571:1966","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}]}}},"generic_params":[]}],"lifetime":"'_"}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:829:673":{"id":"0:829:673","crate_id":0,"name":"from","span":{"filename":"src/builder/range.rs","begin":[126,4],"end":[130,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["range",{"kind":"resolved_path","inner":{"name":"std::ops::Range","id":"2:46457:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:104:2107":{"id":"0:104:2107","crate_id":0,"name":"has_subcommand","span":{"filename":"src/derive.rs","begin":[463,4],"end":[465,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:57:2069":{"id":"0:57:2069","crate_id":0,"name":"update_from_arg_matches","span":{"filename":"src/derive.rs","begin":[248,4],"end":[248,85]},"visibility":"default","docs":"Assign values from `ArgMatches` to `self`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["matches",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4112:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48278:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:12:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:4166":{"id":"0:4166","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1463,9],"end":[1463,14]},"visibility":{"restricted":{"parent":"0:1754:6526","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValuesRef","id":"0:4161:6460","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:4169:412"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3321-0:4275:6462":{"id":"b:2:3321-0:4275:6462","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3319:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4275:6462","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3323:1440"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2523-0:3571:1966":{"id":"b:2:2523-0:3571:1966","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2493:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:3571:1966","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2526:127","2:2527:1427"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3666":{"id":"0:3666","crate_id":0,"name":null,"span":{"filename":"src/builder/styled_str.rs","begin":[5,16],"end":[5,23]},"visibility":{"restricted":{"parent":"0:986:2149","path":"::builder::styled_str"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2564:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3667:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2517-0:1054:2174":{"id":"b:2:2517-0:1054:2174","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1054:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2519:673"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:839:673":{"id":"0:839:673","crate_id":0,"name":"from","span":{"filename":"src/builder/range.rs","begin":[166,4],"end":[170,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["range",{"kind":"resolved_path","inner":{"name":"std::ops::RangeToInclusive","id":"2:46545:200","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3321-0:4142:6457":{"id":"b:2:3321-0:4142:6457","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3319:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IdsRef","id":"0:4142:6457","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3323:1440"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2676:225-0:4112:1655":{"id":"a:2:2676:225-0:4112:1655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4112:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:5:5352-0:3662:1951":{"id":"b:5:5352-0:3662:1951","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:8601:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5350:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5354:1406"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2517-0:3248:2155":{"id":"b:2:2517-0:3248:2155","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgPredicate","id":"0:3248:2155","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2519:673"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2238-0:3978:6082":{"id":"b:2:2238-0:3978:6082","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2232:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextValue","id":"0:3978:6082","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2240:5354"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2528-0:3756:2167":{"id":"b:2:2528-0:3756:2167","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsStringValueParser","id":"0:3756:2167","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2531:127","2:2532:1426"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1166":{"id":"0:1166","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[980,0],"end":[984,1]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2564:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PathBufValueParser","id":"0:3762:2168","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1167:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2517-0:3588:2156":{"id":"b:2:2517-0:3588:2156","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueRange","id":"0:3588:2156","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2519:673"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1876:6920":{"id":"0:1876:6920","crate_id":0,"name":"next_back","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1482,4],"end":[1484,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"2:7156:156","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"25:53:64567":{"id":"25:53:64567","crate_id":25,"name":"from_filelike","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/io-lifetimes-1.0.3/src/portability.rs","begin":[401,4],"end":[401,50]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["owned",{"kind":"resolved_path","inner":{"name":"OwnedFd","id":"1:5064:9877","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:282:3633":{"id":"0:282:3633","crate_id":0,"name":"is_hide_short_help_set","span":{"filename":"src/builder/arg.rs","begin":[4025,4],"end":[4027,5]},"visibility":"public","docs":"Report whether [`Arg::hide_short_help`] is set","links":{"`Arg::hide_short_help`":"0:212:3263"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1277":{"id":"0:1277","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1935,0],"end":[1939,1]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2564:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"NonEmptyStringValueParser","id":"0:3852:2166","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1278:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1784:6671":{"id":"0:1784:6671","crate_id":0,"name":"get_raw_occurrences","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[351,4],"end":[353,5]},"visibility":"public","docs":"Iterate over the original values for each occurrence of an option.\n\nSimilar to [`ArgMatches::get_occurrences`] but returns raw values.\n\nAn `OsStr` on Unix-like systems is any series of bytes, regardless of whether or not they\ncontain valid UTF-8. Since [`String`]s in Rust are guaranteed to be valid UTF-8, a valid\nfilename on a Unix system as an argument value may contain invalid UTF-8.\n\nReturns `None` if the option wasn't present.\n\n# Panic\n\nIf the argument definition and access mismatch.  To handle this case programmatically, see\n[`ArgMatches::try_get_raw_occurrences`].\n\n# Examples\n\n ```\n# use clap::{Command, arg, value_parser, ArgAction, Arg};\n# use std::ffi::{OsStr,OsString};\n# use std::os::unix::ffi::{OsStrExt,OsStringExt};\nuse std::path::PathBuf;\n\nlet m = Command::new(\"myprog\")\n    .arg(Arg::new(\"x\")\n        .short('x')\n        .num_args(2)\n        .action(ArgAction::Append)\n        .value_parser(value_parser!(PathBuf)))\n    .get_matches_from(vec![OsString::from(\"myprog\"),\n                            OsString::from(\"-x\"),\n                            OsString::from(\"a\"), OsString::from(\"b\"),\n                            OsString::from(\"-x\"),\n                            OsString::from(\"c\"),\n                            // \"{0xe9}!\"\n                            OsString::from_vec(vec![0xe9, b'!'])]);\nlet mut itr = m.get_raw_occurrences(\"x\")\n    .expect(\"`-x`is required\")\n    .map(Iterator::collect::<Vec<_>>);\nassert_eq!(itr.next(), Some(vec![OsStr::new(\"a\"), OsStr::new(\"b\")]));\nassert_eq!(itr.next(), Some(vec![OsStr::new(\"c\"), OsStr::from_bytes(&[0xe9, b'!'])]));\nassert_eq!(itr.next(), None);\n```\n[`Iterator`]: std::iter::Iterator\n[`OsStr`]: std::ffi::OsStr\n[values]: OsValues\n[`String`]: std::string::String","links":{"std::string::String":"5:6967:221","`ArgMatches::try_get_raw_occurrences`":"0:1818:6673","`ArgMatches::get_occurrences`":"0:1781:6626"},"attrs":["#[track_caller]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"RawOccurrences","id":"0:4236:6672","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3586":{"id":"0:3586","crate_id":0,"name":null,"span":{"filename":"src/builder/possible_value.rs","begin":[34,43],"end":[34,45]},"visibility":{"restricted":{"parent":"0:780:2146","path":"::builder::possible_value"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2290:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:3571:1966","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1474":{"id":"0:1474","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[26,0],"end":[26,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"action::ArgAction","name":"ArgAction","id":"0:2796:1649","glob":false}},"0:1538":{"id":"0:1538","crate_id":0,"name":null,"span":{"filename":"src/error/context.rs","begin":[94,0],"end":[114,1]},"visibility":{"restricted":{"parent":"0:1533:479","path":"::error::context"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:8601:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextValue","id":"0:3978:6082","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1539:655"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:814:3689":{"id":"0:814:3689","crate_id":0,"name":"max_values","span":{"filename":"src/builder/range.rs","begin":[62,4],"end":[64,5]},"visibility":"public","docs":"Most number of values the argument accepts","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1555":{"id":"0:1555","crate_id":0,"name":null,"span":{"filename":"src/error/format.rs","begin":[54,0],"end":[116,1]},"visibility":{"restricted":{"parent":"0:1540:664","path":"::error::format"}},"docs":null,"links":{},"attrs":["#[cfg(feature = \"error-context\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ErrorFormatter","id":"0:1547:6079","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RichFormatter","id":"0:1553:6083","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1556:2020"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2662:217-0:4275:6462":{"id":"a:2:2662:217-0:4275:6462","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4275:6462","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2513-0:3195:1652":{"id":"b:2:2513-0:3195:1652","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3195:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2516:2263"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11488:29193":{"id":"2:11488:29193","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11121:8050","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11121:8050","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11136:8051","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:551:5094":{"id":"0:551:5094","crate_id":0,"name":"find_subcommand","span":{"filename":"src/builder/command.rs","begin":[3428,4],"end":[3431,5]},"visibility":"public","docs":"Find subcommand such that its name or one of aliases equals `name`.\n\nThis does not recurse through subcommands of subcommands.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["name",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2481:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"std::ffi::OsStr","id":"1:2029:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Command","id":"0:3505:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"impl AsRef<std::ffi::OsStr>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2481:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"std::ffi::OsStr","id":"1:2029:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4527":{"id":"0:4527","crate_id":0,"name":null,"span":{"filename":"src/util/id.rs","begin":[8,18],"end":[8,23]},"visibility":{"restricted":{"parent":"0:2715:1860","path":"::util::id"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4528:412"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:177:2151":{"id":"0:177:2151","crate_id":0,"name":"value_parser","span":{"filename":"src/builder/arg.rs","begin":[943,4],"end":[946,5]},"visibility":"public","docs":"Specify the typed behavior of the argument.\n\nThis allows parsing and validating a value before storing it into\n[`ArgMatches`][crate::ArgMatches] as the given type.\n\nPossible value parsers include:\n- [`value_parser!(T)`][crate::value_parser!] for auto-selecting a value parser for a given type\n  - Or [range expressions like `0..=1`][std::ops::RangeBounds] as a shorthand for [`RangedI64ValueParser`][crate::builder::RangedI64ValueParser]\n- `Fn(&str) -> Result<T, E>`\n- `[&str]` and [`PossibleValuesParser`][crate::builder::PossibleValuesParser] for static enumerated values\n- [`BoolishValueParser`][crate::builder::BoolishValueParser], and [`FalseyValueParser`][crate::builder::FalseyValueParser] for alternative `bool` implementations\n- [`NonEmptyStringValueParser`][crate::builder::NonEmptyStringValueParser] for basic validation for strings\n- or any other [`TypedValueParser`][crate::builder::TypedValueParser] implementation\n\nThe default value is [`ValueParser::string`][crate::builder::ValueParser::string].\n\n```rust\n# use clap::ArgAction;\nlet mut cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"color\")\n            .long(\"color\")\n            .value_parser([\"always\", \"auto\", \"never\"])\n            .default_value(\"auto\")\n    )\n    .arg(\n        clap::Arg::new(\"hostname\")\n            .long(\"hostname\")\n            .value_parser(clap::builder::NonEmptyStringValueParser::new())\n            .action(ArgAction::Set)\n            .required(true)\n    )\n    .arg(\n        clap::Arg::new(\"port\")\n            .long(\"port\")\n            .value_parser(clap::value_parser!(u16).range(3000..))\n            .action(ArgAction::Set)\n            .required(true)\n    );\n\nlet m = cmd.try_get_matches_from_mut(\n    [\"cmd\", \"--hostname\", \"rust-lang.org\", \"--port\", \"3001\"]\n).unwrap();\n\nlet color: &String = m.get_one(\"color\")\n    .expect(\"default\");\nassert_eq!(color, \"auto\");\n\nlet hostname: &String = m.get_one(\"hostname\")\n    .expect(\"required\");\nassert_eq!(hostname, \"rust-lang.org\");\n\nlet port: u16 = *m.get_one(\"port\")\n    .expect(\"required\");\nassert_eq!(port, 3001);\n```","links":{"crate::value_parser!":"0:1395:2151","crate::builder::FalseyValueParser":"0:3835:2164","crate::builder::BoolishValueParser":"0:3842:2162","crate::builder::TypedValueParser":"0:1125:2173","crate::ArgMatches":"0:4112:1655","crate::builder::PossibleValuesParser":"0:3783:2169","std::ops::RangeBounds":"2:3084:5446","crate::builder::NonEmptyStringValueParser":"0:3852:2166","crate::builder::ValueParser::string":"0:1073:1842","crate::builder::RangedI64ValueParser":"0:3791:2170"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["parser",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"super::ValueParser","id":"0:1054:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl IntoResettable<super::ValueParser>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"super::ValueParser","id":"0:1054:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2528-0:3505:1650":{"id":"b:2:2528-0:3505:1650","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Command","id":"0:3505:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2531:127","2:2532:1426"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2238-0:4112:1655":{"id":"b:2:2238-0:4112:1655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2232:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4112:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2240:5354"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3240":{"id":"0:3240","crate_id":0,"name":null,"span":{"filename":"src/builder/arg_group.rs","begin":[85,25],"end":[85,30]},"visibility":{"restricted":{"parent":"0:314:2142","path":"::builder::arg_group"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8596:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3229:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3241:655"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2523-0:3835:2164":{"id":"b:2:2523-0:3835:2164","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2493:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FalseyValueParser","id":"0:3835:2164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2526:127","2:2527:1427"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2513-0:3762:2168":{"id":"b:2:2513-0:3762:2168","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PathBufValueParser","id":"0:3762:2168","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2516:2263"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1108:655":{"id":"0:1108:655","crate_id":0,"name":"fmt","span":{"filename":"src/builder/value_parser.rs","begin":[547,4],"end":[555,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"std::fmt::Formatter","id":"2:8556:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48278:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"std::fmt::Error","id":"2:49176:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3795":{"id":"0:3795","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1251,9],"end":[1251,13]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::marker::Copy","id":"2:2674:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"std::convert::TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2674:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:3791:2170","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4004":{"id":"0:4004","crate_id":0,"name":null,"span":{"filename":"src/error/context.rs","begin":[74,23],"end":[74,32]},"visibility":{"restricted":{"parent":"0:1533:479","path":"::error::context"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2285:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ContextValue","id":"0:3978:6082","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextValue","id":"0:3978:6082","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4005:600"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:183:2150":{"id":"0:183:2150","crate_id":0,"name":"value_hint","span":{"filename":"src/builder/arg.rs","begin":[1254,4],"end":[1257,5]},"visibility":"public","docs":"Provide the shell a hint about how to complete this argument.\n\nSee [`ValueHint`][crate::ValueHint] for more information.\n\n**NOTE:** implicitly sets [`Arg::action(ArgAction::Set)`].\n\nFor example, to take a username as argument:\n\n```\n# use clap::{Arg, ValueHint};\nArg::new(\"user\")\n    .short('u')\n    .long(\"user\")\n    .value_hint(ValueHint::Username);\n```\n\nTo take a full command line and its arguments (for example, when writing a command wrapper):\n\n```\n# use clap::{Command, Arg, ValueHint, ArgAction};\nCommand::new(\"prog\")\n    .trailing_var_arg(true)\n    .arg(\n        Arg::new(\"command\")\n            .action(ArgAction::Set)\n            .num_args(1..)\n            .value_hint(ValueHint::CommandWithArguments)\n    );\n```","links":{"crate::ValueHint":"0:3704:1651"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["value_hint",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:3704:1651","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl IntoResettable<ValueHint>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:3704:1651","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2241-0:3859:2165":{"id":"b:2:2241-0:3859:2165","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2235:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MapValueParser","id":"0:3859:2165","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"P"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["2:2243:26835"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4":{"id":"0:4","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[101,0],"end":[101,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::builder::Command","name":"Command","id":"0:3505:1650","glob":false}},"b:2:2241-0:3756:2167":{"id":"b:2:2241-0:3756:2167","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2235:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsStringValueParser","id":"0:3756:2167","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2243:26835"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:15":{"id":"0:15","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[115,30],"end":[115,44]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::derive::CommandFactory","name":"CommandFactory","id":"0:51:1665","glob":false}},"0:10":{"id":"0:10","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[105,0],"end":[105,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::util::color::ColorChoice","name":"ColorChoice","id":"0:4542:1657","glob":false}},"2:11414":{"id":"2:11414","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:10679:1352","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11415:789","2:11416:1837","2:11417:29174","2:11418:29175","2:11420:29176","2:11423:5480","2:11424:29177","2:11425:309","2:11426:29178","2:11427:5181","2:11429:6476","2:11431:26926","2:11433:26927","2:11435:29179","2:11436:29180","2:11437:29181","2:11438:29182","2:11439:1848","2:11440:10137","2:11441:7855","2:11442:29183","2:11443:29184","2:11444:10769","2:11445:29185","2:11446:29186","2:11447:1810","2:11450:5959","2:11453:29187","2:11456:2128","2:11460:8931","2:11464:6068","2:11467:5521","2:11470:29188","2:11473:29189","2:11476:29190","2:11479:29191","2:11482:29192","2:11485:7353","2:11488:29193","2:11491:1855","2:11494:29194","2:11497:29195","2:11500:29196","2:11503:5503","2:11505:5504","2:11507:5505","2:11509:29197","2:11510:29198","2:11511:29199","2:11514:29200","2:11517:7140","2:11520:29201","2:11523:29202","2:11526:29203","2:11529:29204","2:11532:2015","2:11534:10472","2:11535:7667","2:11536:20770","2:11537:20771","2:11538:29205","2:11540:9839","2:11541:29206"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2662:217-0:4542:1657":{"id":"a:2:2662:217-0:4542:1657","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:4542:1657","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3229:1653":{"id":"0:3229:1653","crate_id":0,"name":"ArgGroup","span":{"filename":"src/builder/arg_group.rs","begin":[86,0],"end":[93,1]},"visibility":"public","docs":"Family of related [arguments].\n\nBy placing arguments in a logical group, you can create easier requirement and\nexclusion rules instead of having to list each argument individually, or when you want a rule\nto apply \"any but not all\" arguments.\n\nFor instance, you can make an entire `ArgGroup` required. If [`ArgGroup::multiple(true)`] is\nset, this means that at least one argument from that group must be present. If\n[`ArgGroup::multiple(false)`] is set (the default), one and *only* one must be present.\n\nYou can also do things such as name an entire `ArgGroup` as a [conflict] or [requirement] for\nanother argument, meaning any of the arguments that belong to that group will cause a failure\nif present, or must be present respectively.\n\nPerhaps the most common use of `ArgGroup`s is to require one and *only* one argument to be\npresent out of a given set. Imagine that you had multiple arguments, and you want one of them\nto be required, but making all of them required isn't feasible because perhaps they conflict\nwith each other. For example, lets say that you were building an application where one could\nset a given version number by supplying a string with an option argument, i.e.\n`--set-ver v1.2.3`, you also wanted to support automatically using a previous version number\nand simply incrementing one of the three numbers. So you create three flags `--major`,\n`--minor`, and `--patch`. All of these arguments shouldn't be used at one time but you want to\nspecify that *at least one* of them is used. For this, you can create a group.\n\nFinally, you may use `ArgGroup`s to pull a value from a group of arguments when you don't care\nexactly which argument was actually used at runtime.\n\n# Examples\n\nThe following example demonstrates using an `ArgGroup` to ensure that one, and only one, of\nthe arguments from the specified group is present at runtime.\n\n```rust\n# use clap::{Command, arg, ArgGroup, error::ErrorKind};\nlet result = Command::new(\"cmd\")\n    .arg(arg!(--\"set-ver\" <ver> \"set the version manually\"))\n    .arg(arg!(--major           \"auto increase major\"))\n    .arg(arg!(--minor           \"auto increase minor\"))\n    .arg(arg!(--patch           \"auto increase patch\"))\n    .group(ArgGroup::new(\"vers\")\n         .args([\"set-ver\", \"major\", \"minor\", \"patch\"])\n         .required(true))\n    .try_get_matches_from(vec![\"cmd\", \"--major\", \"--patch\"]);\n// Because we used two args in the group it's an error\nassert!(result.is_err());\nlet err = result.unwrap_err();\nassert_eq!(err.kind(), ErrorKind::ArgumentConflict);\n```\n\nThis next example shows a passing parse of the same scenario\n```rust\n# use clap::{Command, arg, ArgGroup, Id};\nlet result = Command::new(\"cmd\")\n    .arg(arg!(--\"set-ver\" <ver> \"set the version manually\"))\n    .arg(arg!(--major           \"auto increase major\"))\n    .arg(arg!(--minor           \"auto increase minor\"))\n    .arg(arg!(--patch           \"auto increase patch\"))\n    .group(ArgGroup::new(\"vers\")\n         .args([\"set-ver\", \"major\", \"minor\",\"patch\"])\n         .required(true))\n    .try_get_matches_from(vec![\"cmd\", \"--major\"]);\nassert!(result.is_ok());\nlet matches = result.unwrap();\n// We may not know which of the args was used, so we can test for the group...\nassert!(matches.contains_id(\"vers\"));\n// We can also ask the group which arg was used\nassert_eq!(matches\n    .get_one::<Id>(\"vers\")\n    .expect(\"`vers` is required\")\n    .as_str(),\n    \"major\"\n);\n// we could also alternatively check each arg individually (not shown here)\n```\n[`ArgGroup::multiple(true)`]: ArgGroup::multiple()\n\n[`ArgGroup::multiple(false)`]: ArgGroup::multiple()\n[arguments]: crate::Arg\n[conflict]: crate::Arg::conflicts_with()\n[requirement]: crate::Arg::requires()","links":{"crate::Arg":"0:3195:1652","crate::Arg::requires()":"0:167:2397","ArgGroup::multiple()":"0:323:3822","crate::Arg::conflicts_with()":"0:234:3488"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:317","0:330","a:2:7735:6524-0:3229:1653","a:2:2676:225-0:3229:1653","a:2:2662:217-0:3229:1653","a:2:2726:5340-0:3229:1653","a:2:7736:6523-0:3229:1653","b:2:2523-0:3229:1653","b:2:2238-0:3229:1653","b:2:2517-0:3229:1653","b:2:2513-0:3229:1653","b:2:2241-0:3229:1653","b:2:2528-0:3229:1653","b:2:3321-0:3229:1653","b:5:681-0:3229:1653","0:3236","0:3238","0:3240","0:3242","0:3243","0:3245","0:3246","0:333"]}},"0:96":{"id":"0:96","crate_id":0,"name":null,"span":{"filename":"src/derive.rs","begin":[447,0],"end":[454,1]},"visibility":{"restricted":{"parent":"0:29:544","path":"::derive"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Args","id":"0:59:1664","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["group_id"],"trait":{"name":"Args","id":"0:59:1664","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:2137","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:98:2088","0:99:2091"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:717":{"id":"0:717","crate_id":0,"name":null,"span":{"filename":"src/builder/os_str.rs","begin":[77,0],"end":[81,1]},"visibility":{"restricted":{"parent":"0:707:2145","path":"::builder::os_str"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:718:673"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5091:7699":{"id":"5:5091:7699","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:6967:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6967:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4094:612":{"id":"0:4094:612","crate_id":0,"name":"expected","span":{"filename":"src/parser/error.rs","begin":[12,8],"end":[12,35]},"visibility":"default","docs":"The target type to downcast to","links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"super::AnyValueId","id":"0:4106:2265","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"b:2:2238-0:3791:2170":{"id":"b:2:2238-0:3791:2170","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2232:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:3791:2170","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2240:5354"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:301":{"id":"0:301","crate_id":0,"name":null,"span":{"filename":"src/builder/arg.rs","begin":[4243,0],"end":[4247,1]},"visibility":{"restricted":{"parent":"0:124:1849","path":"::builder::arg"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3195:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3195:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:302:673"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:919":{"id":"0:919","crate_id":0,"name":null,"span":{"filename":"src/builder/str.rs","begin":[61,0],"end":[65,1]},"visibility":{"restricted":{"parent":"0:912:1352","path":"::builder::str"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'static","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:920:673"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1570:655":{"id":"0:1570:655","crate_id":0,"name":"fmt","span":{"filename":"src/error/kind.rs","begin":[345,4],"end":[347,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"std::fmt::Formatter","id":"2:8556:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"std::fmt::Result","id":"2:8545:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4048:412":{"id":"0:4048:412","crate_id":0,"name":"clone","span":{"filename":"src/error/kind.rs","begin":[2,22],"end":[2,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4009:3985","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3544":{"id":"0:3544","crate_id":0,"name":null,"span":{"filename":"src/builder/command.rs","begin":[70,16],"end":[70,21]},"visibility":{"restricted":{"parent":"0:346:1834","path":"::builder::command"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Command","id":"0:3505:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3545:412"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3972":{"id":"0:3972","crate_id":0,"name":null,"span":{"filename":"src/error/context.rs","begin":[2,40],"end":[2,42]},"visibility":{"restricted":{"parent":"0:1533:479","path":"::error::context"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2673:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:3929:6081","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1569":{"id":"0:1569","crate_id":0,"name":null,"span":{"filename":"src/error/kind.rs","begin":[344,0],"end":[348,1]},"visibility":{"restricted":{"parent":"0:1566:778","path":"::error::kind"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:8601:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4009:3985","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1570:655"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11426:29178":{"id":"2:11426:29178","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12317:1448"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2676:225-0:3978:6082":{"id":"a:2:2676:225-0:3978:6082","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextValue","id":"0:3978:6082","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:2075":{"id":"0:2075","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/mod.rs","begin":[9,0],"end":[9,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"arg_matches::Values","name":"Values","id":"0:4151:6459","glob":false}},"0:4014:6175":{"id":"0:4014:6175","crate_id":0,"name":"InvalidSubcommand","span":{"filename":"src/error/kind.rs","begin":[57,4],"end":[57,21]},"visibility":"default","docs":"Occurs when the user provides an unrecognized [`Subcommand`] which meets the threshold for\nbeing similar enough to an existing subcommand.\nIf it doesn't meet the threshold, or the 'suggestions' feature is disabled,\nthe more general [`UnknownArgument`] error is returned.\n\n# Examples\n\n ```\n# use clap::{Command, Arg, error::ErrorKind, };\nlet result = Command::new(\"prog\")\n    .subcommand(Command::new(\"config\")\n        .about(\"Used for configuration\")\n        .arg(Arg::new(\"config_file\")\n            .help(\"The configuration file to use\")))\n    .try_get_matches_from(vec![\"prog\", \"confi\"]);\nassert!(result.is_err());\nassert_eq!(result.unwrap_err().kind(), ErrorKind::InvalidSubcommand);\n```\n\n[`Subcommand`]: crate::Subcommand\n[`UnknownArgument`]: ErrorKind::UnknownArgument","links":{"ErrorKind::UnknownArgument":"0:4012:6208","crate::Subcommand":"0:63:1668"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"0:796:3623":{"id":"0:796:3623","crate_id":0,"name":"is_hide_set","span":{"filename":"src/builder/possible_value.rs","begin":[173,4],"end":[175,5]},"visibility":"public","docs":"Report if [`PossibleValue::hide`] is set","links":{"`PossibleValue::hide`":"0:788:3217"},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2676:225-0:4174:6458":{"id":"a:2:2676:225-0:4174:6458","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawValues","id":"0:4174:6458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3563":{"id":"0:3563","crate_id":0,"name":null,"span":{"filename":"src/builder/os_str.rs","begin":[7,57],"end":[7,61]},"visibility":{"restricted":{"parent":"0:707:2145","path":"::builder::os_str"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:8819:140","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3564:707"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:388:915":{"id":"0:388:915","crate_id":0,"name":"new","span":{"filename":"src/builder/command.rs","begin":[128,4],"end":[141,5]},"visibility":"public","docs":"Creates a new instance of an `Command`.\n\nIt is common, but not required, to use binary name as the `name`. This\nname will only be displayed to the user when they request to print\nversion or help and usage information.\n\nSee also [`command!`](crate::command!) and [`crate_name!`](crate::crate_name!).\n\n# Examples\n\n```no_run\n# use clap::Command;\nCommand::new(\"My Program\")\n# ;\n```","links":{"crate::command!":"0:22:1834"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["name",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl Into<Str>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2241-0:3852:2166":{"id":"b:2:2241-0:3852:2166","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2235:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"NonEmptyStringValueParser","id":"0:3852:2166","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2243:26835"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3948:6235":{"id":"0:3948:6235","crate_id":0,"name":"SuggestedCommand","span":{"filename":"src/error/context.rs","begin":[25,4],"end":[25,20]},"visibility":"default","docs":"Potential fix for the user","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"b:2:2523-0:3603:2158":{"id":"b:2:2523-0:3603:2158","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2493:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Resettable","id":"0:3603:2158","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2526:127","2:2527:1427"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1721:655":{"id":"0:1721:655","crate_id":0,"name":"fmt","span":{"filename":"src/parser/error.rs","begin":[40,4],"end":[53,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"std::fmt::Formatter","id":"2:8556:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"std::fmt::Result","id":"2:8545:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:966":{"id":"0:966","crate_id":0,"name":null,"span":{"filename":"src/builder/str.rs","begin":[213,0],"end":[218,1]},"visibility":{"restricted":{"parent":"0:912:1352","path":"::builder::str"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2285:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"std::string::String","id":"5:6967:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:967:600"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2517-0:3852:2166":{"id":"b:2:2517-0:3852:2166","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"NonEmptyStringValueParser","id":"0:3852:2166","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2519:673"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:869:2452":{"id":"0:869:2452","crate_id":0,"name":"into_resettable","span":{"filename":"src/builder/resettable.rs","begin":[88,4],"end":[93,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Resettable","id":"0:3603:2158","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ArgAction","id":"0:2796:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2513-0:3756:2167":{"id":"b:2:2513-0:3756:2167","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsStringValueParser","id":"0:3756:2167","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2516:2263"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4001":{"id":"0:4001","crate_id":0,"name":null,"span":{"filename":"src/error/context.rs","begin":[74,16],"end":[74,21]},"visibility":{"restricted":{"parent":"0:1533:479","path":"::error::context"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8596:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextValue","id":"0:3978:6082","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4002:655"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3321-0:3248:2155":{"id":"b:2:3321-0:3248:2155","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3319:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgPredicate","id":"0:3248:2155","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3323:1440"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2523-0:1581:127":{"id":"b:2:2523-0:1581:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2493:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1581:127","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["2:2526:127","2:2527:1427"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:2731:673":{"id":"0:2731:673","crate_id":0,"name":"from","span":{"filename":"src/util/id.rs","begin":[63,4],"end":[65,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["name",{"kind":"borrowed_ref","inner":{"lifetime":"'static","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3321-0:3571:1966":{"id":"b:2:3321-0:3571:1966","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3319:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:3571:1966","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3323:1440"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2241-0:3588:2156":{"id":"b:2:2241-0:3588:2156","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2235:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueRange","id":"0:3588:2156","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2243:26835"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1552:2020":{"id":"0:1552:2020","crate_id":0,"name":"format_error","span":{"filename":"src/error/format.rs","begin":[31,4],"end":[43,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["error",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::error::Error","id":"0:1581:127","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2523-0:4009:3985":{"id":"b:2:2523-0:4009:3985","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2493:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4009:3985","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2526:127","2:2527:1427"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1243":{"id":"0:1243","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1630,0],"end":[1665,1]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["map","possible_values","parse","try_map"],"trait":{"name":"TypedValueParser","id":"0:1125:2173","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BoolValueParser","id":"0:3829:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1244:5472","0:1245:5682","0:1248:3567"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4012:6208":{"id":"0:4012:6208","crate_id":0,"name":"UnknownArgument","span":{"filename":"src/error/kind.rs","begin":[33,4],"end":[33,19]},"visibility":"default","docs":"Occurs when a user provides a flag, option, argument or subcommand which isn't defined.\n\n# Examples\n\n```rust\n# use clap::{Command, arg, error::ErrorKind};\nlet result = Command::new(\"prog\")\n    .arg(arg!(--flag \"some flag\"))\n    .try_get_matches_from(vec![\"prog\", \"--other\"]);\nassert!(result.is_err());\nassert_eq!(result.unwrap_err().kind(), ErrorKind::UnknownArgument);\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"0:4258":{"id":"0:4258","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1828,9],"end":[1828,14]},"visibility":{"restricted":{"parent":"0:1754:6526","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:4254:6461","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:4260:412"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:731":{"id":"0:731","crate_id":0,"name":null,"span":{"filename":"src/builder/os_str.rs","begin":[147,0],"end":[152,1]},"visibility":{"restricted":{"parent":"0:707:2145","path":"::builder::os_str"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8596:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:732:655"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1865:59":{"id":"0:1865:59","crate_id":0,"name":"default","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1434,4],"end":[1440,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2662:217-0:3791:2170":{"id":"a:2:2662:217-0:3791:2170","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:3791:2170","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:948":{"id":"0:948","crate_id":0,"name":null,"span":{"filename":"src/builder/str.rs","begin":[155,0],"end":[160,1]},"visibility":{"restricted":{"parent":"0:912:1352","path":"::builder::str"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2285:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:949:600"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3321-0:3638:2154":{"id":"b:2:3321-0:3638:2154","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3319:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3323:1440"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4124":{"id":"0:4124","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[65,32],"end":[65,41]},"visibility":{"restricted":{"parent":"0:1754:6526","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2285:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4112:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4112:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4125:600"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2662:217-0:3603:2158":{"id":"a:2:2662:217-0:3603:2158","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Resettable","id":"0:3603:2158","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:543:5080":{"id":"0:543:5080","crate_id":0,"name":"get_subcommands_mut","span":{"filename":"src/builder/command.rs","begin":[3378,4],"end":[3380,5]},"visibility":"public","docs":"Iterate through the set of subcommands, getting a mutable reference to each.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:7156:156","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Command","id":"0:3505:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}}]}}},"generic_params":[],"modifier":"none"}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:830":{"id":"0:830","crate_id":0,"name":null,"span":{"filename":"src/builder/range.rs","begin":[133,0],"end":[139,1]},"visibility":{"restricted":{"parent":"0:807:2147","path":"::builder::range"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"RangeFull","id":"2:46441:197","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueRange","id":"0:3588:2156","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:831:673"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1850:6920":{"id":"0:1850:6920","crate_id":0,"name":"next_back","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1380,4],"end":[1382,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:312":{"id":"0:312","crate_id":0,"name":null,"span":{"filename":"src/builder/arg.rs","begin":[4275,0],"end":[4316,1]},"visibility":{"restricted":{"parent":"0:124:1849","path":"::builder::arg"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8596:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3195:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:313:655"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2241-0:3978:6082":{"id":"b:2:2241-0:3978:6082","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2235:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextValue","id":"0:3978:6082","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2243:26835"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3614:412":{"id":"0:3614:412","crate_id":0,"name":"clone","span":{"filename":"src/builder/resettable.rs","begin":[31,15],"end":[31,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Resettable","id":"0:3603:2158","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1044":{"id":"0:1044","crate_id":0,"name":null,"span":{"filename":"src/builder/value_hint.rs","begin":[69,0],"end":[73,1]},"visibility":{"restricted":{"parent":"0:1042:2150","path":"::builder::value_hint"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2564:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:3704:1651","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1045:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4293":{"id":"0:4293","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/value_source.rs","begin":[2,44],"end":[2,54]},"visibility":{"restricted":{"parent":"0:2069:6527","path":"::parser::matches::value_source"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["gt","ge","le","lt"],"trait":{"name":"PartialOrd","id":"2:2327:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4275:6462","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4275:6462","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4294:1003"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3321-0:3704:1651":{"id":"b:2:3321-0:3704:1651","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3319:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:3704:1651","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3323:1440"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:208:3212":{"id":"0:208:3212","crate_id":0,"name":"next_line_help","span":{"filename":"src/builder/arg.rs","begin":[2225,4],"end":[2231,5]},"visibility":"public","docs":"Render the [help][Arg::help] on the line after the argument.\n\nThis can be helpful for arguments with very long or complex help messages.\nThis can also be helpful for arguments with very long flag names, or many/long value names.\n\n**NOTE:** To apply this setting to all arguments and subcommands, consider using\n[`crate::Command::next_line_help`]\n\n# Examples\n\n ```\n# use clap::{Command, Arg, ArgAction};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"opt\")\n        .long(\"long-option-flag\")\n        .short('o')\n        .action(ArgAction::Set)\n        .next_line_help(true)\n        .value_names([\"value1\", \"value2\"])\n        .help(\"Some really long help and complex\\n\\\n               help that makes more sense to be\\n\\\n               on a line after the option\"))\n    .get_matches_from(vec![\n        \"prog\", \"--help\"\n    ]);\n```\n\nThe above example displays the following help message\n\n```text\nnlh\n\nUsage: nlh [OPTIONS]\n\nOptions:\n    -h, --help       Print help information\n    -V, --version    Print version information\n    -o, --long-option-flag <value1> <value2>\n        Some really long help and complex\n        help that makes more sense to be\n        on a line after the option\n```","links":{"Arg::help":"0:204:1563","`crate::Command::next_line_help`":"0:444:3212"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:699:747":{"id":"0:699:747","crate_id":0,"name":"index","span":{"filename":"src/builder/command.rs","begin":[4670,4],"end":[4672,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["key",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"2:2987:3984","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2528-0:1549:6080":{"id":"b:2:2528-0:1549:6080","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"KindFormatter","id":"0:1549:6080","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2531:127","2:2532:1426"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1180:3567":{"id":"0:1180:3567","crate_id":0,"name":"possible_values","span":{"filename":"src/builder/value_parser.rs","begin":[1084,4],"end":[1092,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:2137","args":{"angle_bracketed":{"args":[{"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Iterator","id":"2:7156:156","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"resolved_path","inner":{"name":"crate::builder::PossibleValue","id":"0:3571:1966","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}]}}},"generic_params":[]}],"lifetime":"'_"}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3672:600":{"id":"0:3672:600","crate_id":0,"name":"eq","span":{"filename":"src/builder/styled_str.rs","begin":[5,32],"end":[5,41]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1151":{"id":"0:1151","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[901,0],"end":[906,1]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"OsStringValueParser","id":"0:3756:2167","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1152:915"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4183:655":{"id":"0:4183:655","crate_id":0,"name":"fmt","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1524,16],"end":[1524,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:8556:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8545:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7736:6523-0:4522:1658":{"id":"a:2:7736:6523-0:4522:1658","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7736:6523","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3236":{"id":"0:3236","crate_id":0,"name":null,"span":{"filename":"src/builder/arg_group.rs","begin":[85,9],"end":[85,16]},"visibility":{"restricted":{"parent":"0:314:2142","path":"::builder::arg_group"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2564:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3229:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3237:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3321-0:3762:2168":{"id":"b:2:3321-0:3762:2168","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3319:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PathBufValueParser","id":"0:3762:2168","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3323:1440"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2238-0:4275:6462":{"id":"b:2:2238-0:4275:6462","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2232:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4275:6462","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2240:5354"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1889:2029":{"id":"0:1889:2029","crate_id":0,"name":"Item","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1532,4],"end":[1532,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"1:2029:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"0:1477":{"id":"0:1477","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[29,0],"end":[29,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"arg_predicate::ArgPredicate","name":"ArgPredicate","id":"0:3248:2155","glob":false}},"0:4174:6458":{"id":"0:4174:6458","crate_id":0,"name":"RawValues","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1525,0],"end":[1529,1]},"visibility":"public","docs":"Iterate over raw argument values via [`ArgMatches::get_raw`].\n\n# Examples\n\n ```\n# use clap::{Command, arg, value_parser};\nuse std::ffi::OsString;\nuse std::os::unix::ffi::{OsStrExt,OsStringExt};\n\nlet m = Command::new(\"utf8\")\n    .arg(arg!(<arg> \"some arg\")\n        .value_parser(value_parser!(OsString)))\n    .get_matches_from(vec![OsString::from(\"myprog\"),\n                            // \"Hi {0xe9}!\"\n                            OsString::from_vec(vec![b'H', b'i', b' ', 0xe9, b'!'])]);\nassert_eq!(\n    &*m.get_raw(\"arg\")\n        .unwrap()\n        .next().unwrap()\n        .as_bytes(),\n    [b'H', b'i', b' ', 0xe9, b'!']\n);\n```","links":{"`ArgMatches::get_raw`":"0:1783:6654"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:2:7735:6524-0:4174:6458","a:2:2676:225-0:4174:6458","a:2:2662:217-0:4174:6458","a:2:2726:5340-0:4174:6458","a:2:7736:6523-0:4174:6458","b:2:2523-0:4174:6458","b:2:2238-0:4174:6458","b:2:2517-0:4174:6458","b:2:2513-0:4174:6458","b:2:2241-0:4174:6458","b:2:2528-0:4174:6458","b:2:7046-0:4174:6458","b:2:3321-0:4174:6458","b:5:681-0:4174:6458","0:4178","0:4181","0:1887","0:1892","0:1895","0:1897"]}},"0:1024:673":{"id":"0:1024:673","crate_id":0,"name":"from","span":{"filename":"src/builder/styled_str.rs","begin":[263,4],"end":[267,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["name",{"kind":"borrowed_ref","inner":{"lifetime":"'static","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:434":{"id":"0:434","crate_id":0,"name":null,"span":{"filename":"src/builder/command.rs","begin":[919,0],"end":[1387,1]},"visibility":{"restricted":{"parent":"0:346:1834","path":"::builder::command"}},"docs":"# Application-wide Settings\n\nThese settings will apply to the top-level command and all subcommands, by default.  Some\nsettings can be overridden in subcommands.","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Command","id":"0:3505:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:435:4298","0:436:4314","0:437:4321","0:438:4329","0:439:1564","0:440:4345","0:441:4351","0:442:4355","0:443:4363","0:444:3212","0:445:4368","0:446:4376","0:447:4379","0:448:4396","0:450:3227","0:451:4411","0:452:4427"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:2755:600":{"id":"0:2755:600","crate_id":0,"name":"eq","span":{"filename":"src/util/id.rs","begin":[142,4],"end":[144,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3321-0:3978:6082":{"id":"b:2:3321-0:3978:6082","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3319:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextValue","id":"0:3978:6082","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3323:1440"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:7736:6523-0:3929:6081":{"id":"a:2:7736:6523-0:3929:6081","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7736:6523","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:3929:6081","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:924:673":{"id":"0:924:673","crate_id":0,"name":"from","span":{"filename":"src/builder/str.rs","begin":[74,4],"end":[76,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["name",{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3625":{"id":"0:3625","crate_id":0,"name":null,"span":{"filename":"src/builder/resettable.rs","begin":[31,40],"end":[31,42]},"visibility":{"restricted":{"parent":"0:844:2148","path":"::builder::resettable"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::cmp::Eq","id":"2:2290:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2290:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Resettable","id":"0:3603:2158","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:574:3621":{"id":"0:574:3621","crate_id":0,"name":"is_next_line_help_set","span":{"filename":"src/builder/command.rs","begin":[3587,4],"end":[3589,5]},"visibility":"public","docs":"Report whether [`Command::next_line_help`] is set","links":{"`Command::next_line_help`":"0:444:3212"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2726:5340-0:1054:2174":{"id":"a:2:2726:5340-0:1054:2174","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2726:5340","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1054:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:2676:225-0:3638:2154":{"id":"a:2:2676:225-0:3638:2154","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2517-0:3638:2154":{"id":"b:2:2517-0:3638:2154","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2519:673"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3853":{"id":"0:3853","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1897,9],"end":[1897,13]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2674:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"NonEmptyStringValueParser","id":"0:3852:2166","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:711:3590":{"id":"0:711:3590","crate_id":0,"name":"as_os_str","span":{"filename":"src/builder/os_str.rs","begin":[34,4],"end":[36,5]},"visibility":"public","docs":"Get the raw string as an `std::ffi::OsStr`","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"std::ffi::OsStr","id":"1:2029:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:42:2032":{"id":"0:42:2032","crate_id":0,"name":"try_parse_from","span":{"filename":"src/derive.rs","begin":[121,4],"end":[128,5]},"visibility":"default","docs":"Parse from iterator, return Err on error.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["itr",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48278:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:12:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7042:149","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsString","id":"1:2026:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3847:655":{"id":"0:3847:655","crate_id":0,"name":"fmt","span":{"filename":"src/builder/value_parser.rs","begin":[1808,22],"end":[1808,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:8556:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8545:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2747:600":{"id":"0:2747:600","crate_id":0,"name":"eq","span":{"filename":"src/util/id.rs","begin":[116,4],"end":[118,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4125:600":{"id":"0:4125:600","crate_id":0,"name":"eq","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[65,32],"end":[65,41]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4112:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11438:29182":{"id":"2:11438:29182","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:11437:29181"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3228:412":{"id":"0:3228:412","crate_id":0,"name":"clone","span":{"filename":"src/builder/arg.rs","begin":[53,18],"end":[53,23]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3195:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:166:1870":{"id":"0:166:1870","crate_id":0,"name":"required","span":{"filename":"src/builder/arg.rs","begin":[668,4],"end":[674,5]},"visibility":"public","docs":"Specifies that the argument must be present.\n\nRequired by default means it is required, when no other conflicting rules or overrides have\nbeen evaluated. Conflicting rules take precedence over being required.\n\n**Pro tip:** Flags (i.e. not positional, or arguments that take values) shouldn't be\nrequired by default. This is because if a flag were to be required, it should simply be\nimplied. No additional information is required from user. Flags by their very nature are\nsimply boolean on/off switches. The only time a user *should* be required to use a flag\nis if the operation is destructive in nature, and the user is essentially proving to you,\n\"Yes, I know what I'm doing.\"\n\n# Examples\n\n```rust\n# use clap::Arg;\nArg::new(\"config\")\n    .required(true)\n# ;\n```\n\nSetting required requires that the argument be used at runtime.\n\n```rust\n# use clap::{Command, Arg, ArgAction};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .required(true)\n        .action(ArgAction::Set)\n        .long(\"config\"))\n    .try_get_matches_from(vec![\n        \"prog\", \"--config\", \"file.conf\",\n    ]);\n\nassert!(res.is_ok());\n```\n\nSetting required and then *not* supplying that argument at runtime is an error.\n\n```rust\n# use clap::{Command, Arg, error::ErrorKind, ArgAction};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .required(true)\n        .action(ArgAction::Set)\n        .long(\"config\"))\n    .try_get_matches_from(vec![\n        \"prog\"\n    ]);\n\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind(), ErrorKind::MissingRequiredArgument);\n```","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2238-0:3229:1653":{"id":"b:2:2238-0:3229:1653","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2232:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3229:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2240:5354"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:5:681-0:3768:2163":{"id":"b:5:681-0:3768:2163","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:677:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EnumValueParser","id":"0:3768:2163","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"items":["5:683:5351","5:684:3662","5:685:8969"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:484:4018":{"id":"0:484:4018","crate_id":0,"name":"long_flag","span":{"filename":"src/builder/command.rs","begin":[2236,4],"end":[2239,5]},"visibility":"public","docs":"Sets the long version of the subcommand flag without the preceding `--`.\n\nAllows the subcommand to be used as if it were an [`Arg::long`].\n\n**NOTE:** Any leading `-` characters will be stripped.\n\n# Examples\n\nTo set `long_flag` use a word containing valid UTF-8 codepoints. If you supply a double leading\n`--` such as `--sync` they will be stripped. Hyphens in the middle of the word; however,\nwill *not* be stripped (i.e. `sync-file` is allowed).\n\n```\n# use clap::{Command, Arg, ArgAction};\nlet matches = Command::new(\"pacman\")\n    .subcommand(\n        Command::new(\"sync\").long_flag(\"sync\").arg(\n            Arg::new(\"search\")\n                .short('s')\n                .long(\"search\")\n                .action(ArgAction::SetTrue)\n                .help(\"search remote repositories for matching strings\"),\n        ),\n    )\n    .get_matches_from(vec![\"pacman\", \"--sync\", \"--search\"]);\n\nassert_eq!(matches.subcommand_name().unwrap(), \"sync\");\nlet sync_matches = matches.subcommand_matches(\"sync\").unwrap();\nassert!(*sync_matches.get_one::<bool>(\"search\").expect(\"defaulted by clap\"));\n```\n\n[`Arg::long`]: Arg::long()","links":{"Arg::long()":"0:152:1850"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["long",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl Into<Str>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4091:6463":{"id":"0:4091:6463","crate_id":0,"name":"MatchesError","span":{"filename":"src/parser/error.rs","begin":[5,0],"end":[19,1]},"visibility":"public","docs":"Violation of [`ArgMatches`][crate::ArgMatches] assumptions","links":{"crate::ArgMatches":"0:4112:1655"},"attrs":["#[allow(missing_copy_implementations)]","#[non_exhaustive]"],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:4092:6515","0:4095:6208"],"impls":["a:2:7735:6524-0:4091:6463","a:2:2676:225-0:4091:6463","a:2:2662:217-0:4091:6463","a:2:2726:5340-0:4091:6463","a:2:7736:6523-0:4091:6463","b:2:2523-0:4091:6463","b:2:2238-0:4091:6463","b:2:2517-0:4091:6463","b:2:2513-0:4091:6463","b:2:2241-0:4091:6463","b:2:2528-0:4091:6463","b:2:2585-0:4091:6463","b:2:3321-0:4091:6463","b:5:5352-0:4091:6463","b:5:681-0:4091:6463","0:4096","0:4098","0:1719","0:1720"]}},"0:697":{"id":"0:697","crate_id":0,"name":null,"span":{"filename":"src/builder/command.rs","begin":[4667,0],"end":[4673,1]},"visibility":{"restricted":{"parent":"0:346:1834","path":"::builder::command"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Index","id":"2:2987:3984","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Command","id":"0:3505:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:698:183","0:699:747"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2238-0:3810:2171":{"id":"b:2:2238-0:3810:2171","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2232:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangedU64ValueParser","id":"0:3810:2171","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2240:5354"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2528-0:3842:2162":{"id":"b:2:2528-0:3842:2162","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BoolishValueParser","id":"0:3842:2162","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2531:127","2:2532:1426"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3321-0:4161:6460":{"id":"b:2:3321-0:4161:6460","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3319:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValuesRef","id":"0:4161:6460","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:3323:1440"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:857:673":{"id":"0:857:673","crate_id":0,"name":"from","span":{"filename":"src/builder/resettable.rs","begin":[49,4],"end":[51,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["other",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1475":{"id":"0:1475","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[27,0],"end":[27,17]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"arg::Arg","name":"Arg","id":"0:3195:1652","glob":false}},"0:1417:5917":{"id":"0:1417:5917","crate_id":0,"name":"_ValueParserViaFromStrSealed","span":{"filename":"src/builder/value_parser.rs","begin":[2404,4],"end":[2404,45]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:3854":{"id":"0:3854","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1897,15],"end":[1897,20]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"NonEmptyStringValueParser","id":"0:3852:2166","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3855:412"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:823:5450":{"id":"0:823:5450","crate_id":0,"name":"end_bound","span":{"filename":"src/builder/range.rs","begin":[108,4],"end":[110,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"std::ops::Bound","id":"2:46567:5448","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"usize"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:758":{"id":"0:758","crate_id":0,"name":null,"span":{"filename":"src/builder/os_str.rs","begin":[236,0],"end":[241,1]},"visibility":{"restricted":{"parent":"0:707:2145","path":"::builder::os_str"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2285:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsString","id":"1:2026:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:759:600"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11507:5505":{"id":"2:11507:5505","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3842:2162":{"id":"0:3842:2162","crate_id":0,"name":"BoolishValueParser","span":{"filename":"src/builder/value_parser.rs","begin":[1810,0],"end":[1810,32]},"visibility":"public","docs":"Parse bool-like string values, everything else is `true`\n\nSee also:\n- [`ValueParser::bool`] for different human readable bool representations\n- [`FalseyValueParser`] for assuming non-false is true\n\n# Example\n\nUsage:\n```rust\nlet mut cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"append\")\n            .value_parser(clap::builder::BoolishValueParser::new())\n            .required(true)\n    );\n\nlet m = cmd.try_get_matches_from_mut([\"cmd\", \"true\"]).unwrap();\nlet port: bool = *m.get_one(\"append\")\n    .expect(\"required\");\nassert_eq!(port, true);\n```\n\nSemantics:\n```rust\n# use std::ffi::OsStr;\n# use clap::builder::TypedValueParser;\n# let cmd = clap::Command::new(\"test\");\n# let arg = None;\nlet value_parser = clap::builder::BoolishValueParser::new();\nassert!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"random\")).is_err());\nassert!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"\")).is_err());\nassert!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"100\")).is_err());\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"true\")).unwrap(), true);\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"Yes\")).unwrap(), true);\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"oN\")).unwrap(), true);\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"1\")).unwrap(), true);\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"false\")).unwrap(), false);\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"No\")).unwrap(), false);\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"oFF\")).unwrap(), false);\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"0\")).unwrap(), false);\n```","links":{"`ValueParser::bool`":"0:1072:366","`FalseyValueParser`":"0:3835:2164"},"attrs":["#[non_exhaustive]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":false}},"generics":{"params":[],"where_predicates":[]},"impls":["0:1261","a:2:7735:6524-0:3842:2162","a:2:2676:225-0:3842:2162","a:2:2662:217-0:3842:2162","a:2:2726:5340-0:3842:2162","a:2:7736:6523-0:3842:2162","b:2:2523-0:3842:2162","b:2:2238-0:3842:2162","b:2:2517-0:3842:2162","b:2:2513-0:3842:2162","b:2:2241-0:3842:2162","b:2:2528-0:3842:2162","b:2:3321-0:3842:2162","b:5:681-0:3842:2162","0:3843","0:3844","0:3846","0:1265","0:1269"]}},"2:11433:26927":{"id":"2:11433:26927","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9298:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9298:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:4224:6895":{"id":"0:4224:6895","crate_id":0,"name":"OccurrenceValuesRef","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1710,0],"end":[1713,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":[]}},"0:3966:412":{"id":"0:3966:412","crate_id":0,"name":"clone","span":{"filename":"src/error/context.rs","begin":[2,15],"end":[2,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:3929:6081","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4290":{"id":"0:4290","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/value_source.rs","begin":[2,40],"end":[2,42]},"visibility":{"restricted":{"parent":"0:2069:6527","path":"::parser::matches::value_source"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2673:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4275:6462","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:175":{"id":"0:175","crate_id":0,"name":null,"span":{"filename":"src/builder/arg.rs","begin":[851,0],"end":[1995,1]},"visibility":{"restricted":{"parent":"0:124:1849","path":"::builder::arg"}},"docs":"# Value Handling","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3195:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:176:1861","0:177:2151","0:178:1872","0:180:1866","0:181:2831","0:183:2150","0:184:2127","0:185:2910","0:186:2918","0:187:2928","0:189:2942","0:190:2967","0:191:61","0:193:2260","0:195:3008","0:198:2261","0:199:3062","0:200:3063","0:201:3058"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1817:6655":{"id":"0:1817:6655","crate_id":0,"name":"try_get_raw","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1127,4],"end":[1139,5]},"visibility":"public","docs":"Non-panicking version of [`ArgMatches::get_raw`]","links":{"`ArgMatches::get_raw`":"0:1783:6654"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48278:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"RawValues","id":"0:4174:6458","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4091:6463","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:712:5349":{"id":"0:712:5349","crate_id":0,"name":"to_os_string","span":{"filename":"src/builder/os_str.rs","begin":[39,4],"end":[41,5]},"visibility":"public","docs":"Get the raw string as an `OsString`","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"std::ffi::OsString","id":"1:2026:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2523-0:3762:2168":{"id":"b:2:2523-0:3762:2168","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2493:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PathBufValueParser","id":"0:3762:2168","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2526:127","2:2527:1427"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2726:5340-0:4254:6461":{"id":"a:2:2726:5340-0:4254:6461","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2726:5340","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:4254:6461","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4542:1657":{"id":"0:4542:1657","crate_id":0,"name":"ColorChoice","span":{"filename":"src/util/color.rs","begin":[6,0],"end":[59,1]},"visibility":"public","docs":"Represents the color preferences for program output","links":{},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:4543:1958","0:4545:4335","0:4547:4336"],"impls":["a:2:7735:6524-0:4542:1657","a:2:2676:225-0:4542:1657","a:2:2662:217-0:4542:1657","a:2:2726:5340-0:4542:1657","a:2:7736:6523-0:4542:1657","b:2:2523-0:4542:1657","b:2:2238-0:4542:1657","b:2:2517-0:4542:1657","b:2:2513-0:4542:1657","b:2:2241-0:4542:1657","b:2:2528-0:4542:1657","b:2:3321-0:4542:1657","b:5:5352-0:4542:1657","b:5:681-0:4542:1657","0:4549","0:4551","0:4552","0:4554","0:4555","0:4557","0:4558","0:2779","0:2781","0:2783","0:2786"]}},"b:2:2238-0:4142:6457":{"id":"b:2:2238-0:4142:6457","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2232:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IdsRef","id":"0:4142:6457","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2240:5354"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:36:1667":{"id":"0:36:1667","crate_id":0,"name":"Parser","span":{"filename":"src/derive.rs","begin":[79,0],"end":[157,1]},"visibility":"public","docs":"Parse command-line arguments into `Self`.\n\nThe primary one-stop-shop trait used to create an instance of a `clap`\n[`Command`], conduct the parsing, and turn the resulting [`ArgMatches`] back\ninto concrete instance of the user struct.\n\nThis trait is primarily a convenience on top of [`FromArgMatches`] +\n[`CommandFactory`] which uses those two underlying traits to build the two\nfundamental functions `parse` which uses the `std::env::args_os` iterator,\nand `parse_from` which allows the consumer to supply the iterator (along\nwith fallible options for each).\n\nSee also [`Subcommand`] and [`Args`].\n\nSee the [derive reference](crate::_derive) for attributes and best practices.\n\n**NOTE:** Deriving requires the [`derive` feature flag][crate::_features]\n\n# Examples\n\nThe following example creates a `Context` struct that would be used\nthroughout the application representing the normalized values coming from\nthe CLI.\n\n ```ignore\n/// My super CLI\n#[derive(clap::Parser)]\n#[command(name = \"demo\")]\nstruct Context {\n    /// More verbose output\n    #[arg(long)]\n    verbose: bool,\n    /// An optional name\n    #[arg(short, long)]\n    name: Option<String>,\n}\n```\n\nThe equivalent [`Command`] struct + `From` implementation:\n\n```rust\n# use clap::{Command, Arg, ArgMatches, ArgAction};\nCommand::new(\"demo\")\n    .about(\"My super CLI\")\n    .arg(Arg::new(\"verbose\")\n        .long(\"verbose\")\n        .action(ArgAction::SetTrue)\n        .help(\"More verbose output\"))\n    .arg(Arg::new(\"name\")\n        .long(\"name\")\n        .short('n')\n        .help(\"An optional name\")\n        .action(ArgAction::Set));\n\nstruct Context {\n    verbose: bool,\n    name: Option<String>,\n}\n\nimpl From<ArgMatches> for Context {\n    fn from(m: ArgMatches) -> Self {\n        Context {\n            verbose: *m.get_one::<bool>(\"verbose\").expect(\"defaulted_by_clap\"),\n            name: m.get_one::<String>(\"name\").cloned(),\n        }\n    }\n}\n```\n","links":{"`Args`":"0:59:1664","`ArgMatches`":"0:4112:1655","`Command`":"0:3505:1650","`FromArgMatches`":"0:54:1666","`CommandFactory`":"0:51:1665","`Subcommand`":"0:63:1668"},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:37:2015","0:38:2023","0:39:2026","0:42:2032","0:45:2035","0:48:2039"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FromArgMatches","id":"0:54:1666","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"CommandFactory","id":"0:51:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:74"]}},"0:68:2122":{"id":"0:68:2122","crate_id":0,"name":"value_variants","span":{"filename":"src/derive.rs","begin":[376,4],"end":[376,42]},"visibility":"default","docs":"All possible argument values, in display order.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"slice","inner":{"kind":"generic","inner":"Self"}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:594:5169":{"id":"0:594:5169","crate_id":0,"name":"is_subcommand_precedence_over_arg_set","span":{"filename":"src/builder/command.rs","begin":[3719,4],"end":[3721,5]},"visibility":"public","docs":"Report whether [`Command::subcommand_precedence_over_arg`] is set","links":{"`Command::subcommand_precedence_over_arg`":"0:505:4912"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2238-0:3638:2154":{"id":"b:2:2238-0:3638:2154","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2232:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2240:5354"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:5100:5479":{"id":"5:5100:5479","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`String`":"5:6967:221","`Box<str>`":"5:286:2137"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:2137","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6718:2692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6967:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11517:7140":{"id":"2:11517:7140","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12300:408","self::pattern":"2:11116:8056"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11121:8050","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2801:1862":{"id":"0:2801:1862","crate_id":0,"name":"SetTrue","span":{"filename":"src/builder/action.rs","begin":[148,4],"end":[148,11]},"visibility":"default","docs":"When encountered, act as if `\"true\"` was encountered on the command-line\n\nIf no [`default_value`][super::Arg::default_value] is set, it will be `false`.\n\nNo value is allowed. To optionally accept a value, see\n[`Arg::default_missing_value`][super::Arg::default_missing_value]\n\n**NOTE:** If the argument has previously been seen, it will result in a\n[`ArgumentConflict`][crate::error::ErrorKind::ArgumentConflict] unless\n[`Command::args_override_self(true)`][crate::Command::args_override_self] is set.\n\n# Examples\n\n```rust\n# use clap::Command;\n# use clap::Arg;\nlet cmd = Command::new(\"mycmd\")\n    .arg(\n        Arg::new(\"flag\")\n            .long(\"flag\")\n            .action(clap::ArgAction::SetTrue)\n    );\n\nlet matches = cmd.clone().try_get_matches_from([\"mycmd\", \"--flag\"]).unwrap();\nassert!(matches.contains_id(\"flag\"));\nassert_eq!(\n    matches.get_one::<bool>(\"flag\").copied(),\n    Some(true)\n);\n\nlet matches = cmd.try_get_matches_from([\"mycmd\"]).unwrap();\nassert!(matches.contains_id(\"flag\"));\nassert_eq!(\n    matches.get_one::<bool>(\"flag\").copied(),\n    Some(false)\n);\n```\n\nYou can use [`TypedValueParser::map`][crate::builder::TypedValueParser::map] to have the\nflag control an application-specific type:\n```rust\n# use clap::Command;\n# use clap::Arg;\n# use clap::builder::TypedValueParser as _;\n# use clap::builder::BoolishValueParser;\nlet cmd = Command::new(\"mycmd\")\n    .arg(\n        Arg::new(\"flag\")\n            .long(\"flag\")\n            .action(clap::ArgAction::SetTrue)\n            .value_parser(\n                BoolishValueParser::new()\n                .map(|b| -> usize {\n                    if b { 10 } else { 5 }\n                })\n            )\n    );\n\nlet matches = cmd.clone().try_get_matches_from([\"mycmd\", \"--flag\"]).unwrap();\nassert!(matches.contains_id(\"flag\"));\nassert_eq!(\n    matches.get_one::<usize>(\"flag\").copied(),\n    Some(10)\n);\n\nlet matches = cmd.try_get_matches_from([\"mycmd\"]).unwrap();\nassert!(matches.contains_id(\"flag\"));\nassert_eq!(\n    matches.get_one::<usize>(\"flag\").copied(),\n    Some(5)\n);\n```","links":{"super::Arg::default_missing_value":"0:198:2261","super::Arg::default_value":"0:193:2260","crate::Command::args_override_self":"0:437:4321","crate::builder::TypedValueParser::map":"0:1130:837","crate::error::ErrorKind::ArgumentConflict":"0:4026:6162"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"0:3579:59":{"id":"0:3579:59","crate_id":0,"name":"default","span":{"filename":"src/builder/possible_value.rs","begin":[34,16],"end":[34,23]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:3571:1966","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:155:2402":{"id":"0:155:2402","crate_id":0,"name":"aliases","span":{"filename":"src/builder/arg.rs","begin":[292,4],"end":[296,5]},"visibility":"public","docs":"Add aliases, which function as hidden long flags.\n\nThis is more efficient, and easier than creating multiple hidden subcommands as one only\nneeds to check for the existence of this command, and not all variants.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ArgAction};\nlet m = Command::new(\"prog\")\n            .arg(Arg::new(\"test\")\n                    .long(\"test\")\n                    .aliases([\"do-stuff\", \"do-tests\", \"tests\"])\n                    .action(ArgAction::SetTrue)\n                    .help(\"the file to add\")\n                    .required(false))\n            .get_matches_from(vec![\n                \"prog\", \"--do-tests\"\n            ]);\nassert_eq!(*m.get_one::<bool>(\"test\").expect(\"defaulted by clap\"), true);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["names",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7042:149","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}}}}]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl Into<Str>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}},{"name":"impl IntoIterator<Item = impl Into<Str>>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7042:149","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3607:1553":{"id":"0:3607:1553","crate_id":0,"name":"0","span":{"filename":"src/builder/resettable.rs","begin":[34,10],"end":[34,11]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"generic","inner":"T"}},"0:3981:5623":{"id":"0:3981:5623","crate_id":0,"name":"Bool","span":{"filename":"src/error/context.rs","begin":[81,4],"end":[81,14]},"visibility":"default","docs":"A single value","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":{"tuple":["0:3983:1553"]},"discriminant":null}},"a:2:2726:5340-0:3929:6081":{"id":"a:2:2726:5340-0:3929:6081","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2726:5340","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:3929:6081","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1143":{"id":"0:1143","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[853,0],"end":[858,1]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"StringValueParser","id":"0:3749:2172","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1144:915"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3864":{"id":"0:3864","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1944,9],"end":[1944,14]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MapValueParser","id":"0:3859:2165","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"P"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["0:3867:412"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:2305":{"id":"0:2305","crate_id":0,"name":null,"span":{"filename":"src/parser/mod.rs","begin":[23,0],"end":[23,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::matches::RawValues","name":"RawValues","id":"0:4174:6458","glob":false}},"0:742":{"id":"0:742","crate_id":0,"name":null,"span":{"filename":"src/builder/os_str.rs","begin":[184,0],"end":[189,1]},"visibility":{"restricted":{"parent":"0:707:2145","path":"::builder::os_str"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2285:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:743:600"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:909":{"id":"0:909","crate_id":0,"name":null,"span":{"filename":"src/builder/resettable.rs","begin":[207,0],"end":[211,1]},"visibility":{"restricted":{"parent":"0:844:2148","path":"::builder::resettable"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"crate::Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"generic","inner":"I"},"items":["0:911:2452"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2238-0:3547:181":{"id":"b:2:2238-0:3547:181","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2232:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2240:5354"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4010:6171":{"id":"0:4010:6171","crate_id":0,"name":"InvalidValue","span":{"filename":"src/error/kind.rs","begin":[19,4],"end":[19,16]},"visibility":"default","docs":"Occurs when an [`Arg`][crate::Arg] has a set of possible values,\nand the user provides a value which isn't in that set.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, error::ErrorKind};\nlet result = Command::new(\"prog\")\n    .arg(Arg::new(\"speed\")\n        .value_parser([\"fast\", \"slow\"]))\n    .try_get_matches_from(vec![\"prog\", \"other\"]);\nassert!(result.is_err());\nassert_eq!(result.unwrap_err().kind(), ErrorKind::InvalidValue);\n```","links":{"crate::Arg":"0:3195:1652"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"a:2:7736:6523-0:1581:127":{"id":"a:2:7736:6523-0:1581:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"RichFormatter","id":"0:1553:6083","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7736:6523","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1581:127","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"0:37:2015":{"id":"0:37:2015","crate_id":0,"name":"parse","span":{"filename":"src/derive.rs","begin":[81,4],"end":[93,5]},"visibility":"default","docs":"Parse from `std::env::args_os()`, exit on error","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1156:2015":{"id":"0:1156:2015","crate_id":0,"name":"parse","span":{"filename":"src/builder/value_parser.rs","begin":[920,4],"end":[927,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["_cmd",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Command","id":"0:3505:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["_arg",{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Arg","id":"0:3195:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}}}],["value",{"kind":"resolved_path","inner":{"name":"std::ffi::OsString","id":"1:2026:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48278:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Value","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:1125:2173","args":null}}}},{"type":{"kind":"resolved_path","inner":{"name":"crate::Error","id":"0:12:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"25:82:64565":{"id":"25:82:64565","crate_id":25,"name":"from_fd","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/io-lifetimes-1.0.3/src/lib.rs","begin":[96,4],"end":[96,41]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["owned_fd",{"kind":"resolved_path","inner":{"name":"OwnedFd","id":"1:5064:9877","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4550:655":{"id":"0:4550:655","crate_id":0,"name":"fmt","span":{"filename":"src/util/color.rs","begin":[5,9],"end":[5,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:8556:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8545:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3560:1003":{"id":"0:3560:1003","crate_id":0,"name":"partial_cmp","span":{"filename":"src/builder/os_str.rs","begin":[7,40],"end":[7,50]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::option::Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"$crate::cmp::Ordering","id":"2:38204:180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2726:5340-0:3588:2156":{"id":"a:2:2726:5340-0:3588:2156","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2726:5340","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueRange","id":"0:3588:2156","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1317:2151":{"id":"0:1317:2151","crate_id":0,"name":"value_parser","span":{"filename":"src/builder/value_parser.rs","begin":[2114,4],"end":[2116,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"qualified_path","inner":{"name":"Parser","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:1306:2175","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11497:29195":{"id":"2:11497:29195","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11116:8056","`DoubleEndedIterator`":"2:7079:120","prim@char":"1:12300:408","str::rmatch_indices":"2:11500:29196"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:50260:8072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11121:8050","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4016:6168":{"id":"0:4016:6168","crate_id":0,"name":"NoEquals","span":{"filename":"src/error/kind.rs","begin":[73,4],"end":[73,12]},"visibility":"default","docs":"Occurs when the user doesn't use equals for an option that requires equal\nsign to provide values.\n\n```rust\n# use clap::{Command, Arg, error::ErrorKind, ArgAction};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"color\")\n         .action(ArgAction::Set)\n         .require_equals(true)\n         .long(\"color\"))\n    .try_get_matches_from(vec![\"prog\", \"--color\", \"red\"]);\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind(), ErrorKind::NoEquals);\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"b:2:3321-0:3852:2166":{"id":"b:2:3321-0:3852:2166","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3319:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"NonEmptyStringValueParser","id":"0:3852:2166","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3323:1440"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:2727:673":{"id":"0:2727:673","crate_id":0,"name":"from","span":{"filename":"src/util/id.rs","begin":[37,4],"end":[39,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["name",{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2523-0:3505:1650":{"id":"b:2:2523-0:3505:1650","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2493:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Command","id":"0:3505:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2526:127","2:2527:1427"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:2796:1649":{"id":"0:2796:1649","crate_id":0,"name":"ArgAction","span":{"filename":"src/builder/action.rs","begin":[27,0],"end":[273,1]},"visibility":"public","docs":"Behavior of arguments when they are encountered while parsing\n\n# Examples\n\n ```\n# use clap::Command;\n# use clap::Arg;\nlet cmd = Command::new(\"mycmd\")\n    .arg(\n        Arg::new(\"special-help\")\n            .short('?')\n            .action(clap::ArgAction::Help)\n    );\n\n// Existing help still exists\nlet err = cmd.clone().try_get_matches_from([\"mycmd\", \"-h\"]).unwrap_err();\nassert_eq!(err.kind(), clap::error::ErrorKind::DisplayHelp);\n\n// New help available\nlet err = cmd.try_get_matches_from([\"mycmd\", \"-?\"]).unwrap_err();\nassert_eq!(err.kind(), clap::error::ErrorKind::DisplayHelp);\n```","links":{},"attrs":["#[non_exhaustive]","#[allow(missing_copy_implementations)]"],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:2797:1871","0:2799:1857","0:2801:1862","0:2803:2237","0:2805:109","0:2807:1873","0:2809:1874"],"impls":["0:109","a:2:7735:6524-0:2796:1649","a:2:2676:225-0:2796:1649","a:2:2662:217-0:2796:1649","a:2:2726:5340-0:2796:1649","a:2:7736:6523-0:2796:1649","b:2:2523-0:2796:1649","b:2:2238-0:2796:1649","b:2:2517-0:2796:1649","b:2:2513-0:2796:1649","b:2:2241-0:2796:1649","b:2:2528-0:2796:1649","b:2:3321-0:2796:1649","b:5:681-0:2796:1649","0:2811","0:2813","0:868","0:887"]}},"0:3737":{"id":"0:3737","crate_id":0,"name":null,"span":{"filename":"src/builder/value_hint.rs","begin":[27,27],"end":[27,29]},"visibility":{"restricted":{"parent":"0:1042:2150","path":"::builder::value_hint"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2290:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:3704:1651","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1129:3567":{"id":"0:1129:3567","crate_id":0,"name":"possible_values","span":{"filename":"src/builder/value_parser.rs","begin":[715,4],"end":[719,5]},"visibility":"default","docs":"Reflect on enumerated value properties\n\nError checking should not be done with this; it is mostly targeted at user-facing\napplications like errors and completion.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:2137","args":{"angle_bracketed":{"args":[{"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Iterator","id":"2:7156:156","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"resolved_path","inner":{"name":"crate::builder::PossibleValue","id":"0:3571:1966","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}]}}},"generic_params":[]}],"lifetime":"'_"}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2676:225-0:4542:1657":{"id":"a:2:2676:225-0:4542:1657","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:4542:1657","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:2726:5340-0:3662:1951":{"id":"a:2:2726:5340-0:3662:1951","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2726:5340","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4030:6190":{"id":"0:4030:6190","crate_id":0,"name":"MissingSubcommand","span":{"filename":"src/error/kind.rs","begin":[210,4],"end":[210,21]},"visibility":"default","docs":"Occurs when a subcommand is required (as defined by [`Command::subcommand_required`]),\nbut the user does not provide one.\n\n# Examples\n\n```rust\n# use clap::{Command, error::ErrorKind};\nlet err = Command::new(\"prog\")\n    .subcommand_required(true)\n    .subcommand(Command::new(\"test\"))\n    .try_get_matches_from(vec![\n        \"myprog\",\n    ]);\nassert!(err.is_err());\nassert_eq!(err.unwrap_err().kind(), ErrorKind::MissingSubcommand);\n# ;\n```\n\n[`Command::subcommand_required`]: crate::Command::subcommand_required","links":{"crate::Command::subcommand_required":"0:501:4846"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"0:213:3270":{"id":"0:213:3270","crate_id":0,"name":"hide_long_help","span":{"filename":"src/builder/arg.rs","begin":[2542,4],"end":[2548,5]},"visibility":"public","docs":"Hides an argument from long help (`--help`).\n\n**NOTE:** This does **not** hide the argument from usage strings on error\n\n**NOTE:** Setting this option will cause next-line-help output style to be used\nwhen long help (`--help`) is called.\n\n# Examples\n\nSetting `hide_long_help(true)` will hide the argument when displaying long help text\n\n ```\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .long(\"config\")\n        .hide_long_help(true)\n        .help(\"Some help text describing the --config arg\"))\n    .get_matches_from(vec![\n        \"prog\", \"--help\"\n    ]);\n```\n\nThe above example displays\n\n```text\nhelptest\n\nUsage: helptest [OPTIONS]\n\nOptions:\n-h, --help       Print help information\n-V, --version    Print version information\n```\n\nHowever, when -h is called\n\n ```\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .long(\"config\")\n        .hide_long_help(true)\n        .help(\"Some help text describing the --config arg\"))\n    .get_matches_from(vec![\n        \"prog\", \"-h\"\n    ]);\n```\n\nThen the following would be displayed\n\n```text\nhelptest\n\nUsage: helptest [OPTIONS]\n\nOPTIONS:\n    --config     Some help text describing the --config arg\n-h, --help       Print help information\n-V, --version    Print version information\n```","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1778:6597":{"id":"0:1778:6597","crate_id":0,"name":"get_flag","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[173,4],"end":[177,5]},"visibility":"public","docs":"Gets the value of a specific [`ArgAction::SetTrue`][crate::ArgAction::SetTrue] or [`ArgAction::SetFalse`][crate::ArgAction::SetFalse] flag\n\n# Panic\n\nIf the argument's action is not [`ArgAction::SetTrue`][crate::ArgAction::SetTrue] or [`ArgAction::SetFalse`][crate::ArgAction::SetFalse]\n\n# Examples\n\n```rust\n# use clap::Command;\n# use clap::Arg;\nlet cmd = Command::new(\"mycmd\")\n    .arg(\n        Arg::new(\"flag\")\n            .long(\"flag\")\n            .action(clap::ArgAction::SetTrue)\n    );\n\nlet matches = cmd.clone().try_get_matches_from([\"mycmd\", \"--flag\"]).unwrap();\nassert!(matches.contains_id(\"flag\"));\nassert_eq!(\n    matches.get_flag(\"flag\"),\n    true\n);\n```","links":{"crate::ArgAction::SetFalse":"0:2803:2237","crate::ArgAction::SetTrue":"0:2801:1862"},"attrs":["#[track_caller]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11473:29189":{"id":"2:11473:29189","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"`DoubleEndedIterator`":"2:7079:120","str::rsplit_terminator":"2:11476:29190","prim@char":"1:12300:408","str::split":"2:11464:6068","self::pattern":"2:11116:8056"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:50160:8080","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11121:8050","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4106:2265":{"id":"0:4106:2265","crate_id":0,"name":"AnyValueId","span":{"filename":"src/parser/matches/any_value.rs","begin":[42,0],"end":[46,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":[]}},"2:11439:1848":{"id":"2:11439:1848","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12300:408"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:50080:8063","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11536:20770":{"id":"2:11536:20770","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:681-0:3749:2172":{"id":"b:5:681-0:3749:2172","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:677:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StringValueParser","id":"0:3749:2172","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:683:5351","5:684:3662","5:685:8969"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2726:5340-0:3704:1651":{"id":"a:2:2726:5340-0:3704:1651","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2726:5340","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:3704:1651","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:334:673":{"id":"0:334:673","crate_id":0,"name":"from","span":{"filename":"src/builder/arg_group.rs","begin":[513,4],"end":[515,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["g",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3229:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3581:412":{"id":"0:3581:412","crate_id":0,"name":"clone","span":{"filename":"src/builder/possible_value.rs","begin":[34,25],"end":[34,30]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:3571:1966","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2241-0:3929:6081":{"id":"b:2:2241-0:3929:6081","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2235:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:3929:6081","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2243:26835"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3749:2172":{"id":"0:3749:2172","crate_id":0,"name":"StringValueParser","span":{"filename":"src/builder/value_parser.rs","begin":[851,0],"end":[851,31]},"visibility":"public","docs":"Implementation for [`ValueParser::string`]\n\nUseful for composing new [`TypedValueParser`]s","links":{"`ValueParser::string`":"0:1073:1842","`TypedValueParser`":"0:1125:2173"},"attrs":["#[non_exhaustive]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":false}},"generics":{"params":[],"where_predicates":[]},"impls":["0:1143","a:2:7735:6524-0:3749:2172","a:2:2676:225-0:3749:2172","a:2:2662:217-0:3749:2172","a:2:2726:5340-0:3749:2172","a:2:7736:6523-0:3749:2172","b:2:2523-0:3749:2172","b:2:2238-0:3749:2172","b:2:2517-0:3749:2172","b:2:2513-0:3749:2172","b:2:2241-0:3749:2172","b:2:2528-0:3749:2172","b:2:3321-0:3749:2172","b:5:681-0:3749:2172","0:3750","0:3751","0:3753","0:1145","0:1149"]}},"0:219:3338":{"id":"0:219:3338","crate_id":0,"name":"default_value_ifs","span":{"filename":"src/builder/arg.rs","begin":[2860,4],"end":[2874,5]},"visibility":"public","docs":"Specifies multiple values and conditions in the same manner as [`Arg::default_value_if`].\n\nThe method takes a slice of tuples in the `(arg, predicate, default)` format.\n\n**NOTE**: The conditions are stored in order and evaluated in the same order. I.e. the first\nif multiple conditions are true, the first one found will be applied and the ultimate value.\n\n# Examples\n\nFirst we use the default value only if another arg is present at runtime.\n\n```rust\n# use clap::{Command, Arg, ArgAction};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"flag\")\n        .long(\"flag\")\n        .action(ArgAction::SetTrue))\n    .arg(Arg::new(\"opt\")\n        .long(\"opt\")\n        .action(ArgAction::Set))\n    .arg(Arg::new(\"other\")\n        .long(\"other\")\n        .default_value_ifs([\n            (\"flag\", \"true\", Some(\"default\")),\n            (\"opt\", \"channal\", Some(\"chan\")),\n        ]))\n    .get_matches_from(vec![\n        \"prog\", \"--opt\", \"channal\"\n    ]);\n\nassert_eq!(m.get_one::<String>(\"other\").unwrap(), \"chan\");\n```\n\nNext we run the same test, but without providing `--flag`.\n\n```rust\n# use clap::{Command, Arg, ArgAction};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"flag\")\n        .long(\"flag\")\n        .action(ArgAction::SetTrue))\n    .arg(Arg::new(\"other\")\n        .long(\"other\")\n        .default_value_ifs([\n            (\"flag\", \"true\", Some(\"default\")),\n            (\"opt\", \"channal\", Some(\"chan\")),\n        ]))\n    .get_matches_from(vec![\n        \"prog\"\n    ]);\n\nassert_eq!(m.get_one::<String>(\"other\"), None);\n```\n\nWe can also see that these values are applied in order, and if more than one condition is\ntrue, only the first evaluated \"wins\"\n\n```rust\n# use clap::{Command, Arg, ArgAction};\n# use clap::builder::ArgPredicate;\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"flag\")\n        .long(\"flag\")\n        .action(ArgAction::SetTrue))\n    .arg(Arg::new(\"opt\")\n        .long(\"opt\")\n        .action(ArgAction::Set))\n    .arg(Arg::new(\"other\")\n        .long(\"other\")\n        .default_value_ifs([\n            (\"flag\", ArgPredicate::IsPresent, Some(\"default\")),\n            (\"opt\", ArgPredicate::Equals(\"channal\".into()), Some(\"chan\")),\n        ]))\n    .get_matches_from(vec![\n        \"prog\", \"--opt\", \"channal\", \"--flag\"\n    ]);\n\nassert_eq!(m.get_one::<String>(\"other\").unwrap(), \"default\");\n```\n[`Arg::action(ArgAction::Set)`]: Arg::action()\n[`Arg::default_value_if`]: Arg::default_value_if()","links":{"Arg::default_value_if()":"0:217:3317"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["ifs",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7042:149","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"tuple","inner":[{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]},{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ArgPredicate","id":"0:3248:2155","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]},{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]}}}}]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl Into<Id>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}},{"name":"impl Into<ArgPredicate>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ArgPredicate","id":"0:3248:2155","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}},{"name":"impl IntoResettable<OsStr>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}},{"name":"impl IntoIterator<Item =\n(impl Into<Id>, impl Into<ArgPredicate>, impl IntoResettable<OsStr>)>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7042:149","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"tuple","inner":[{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]},{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ArgPredicate","id":"0:3248:2155","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]},{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:5352-0:3588:2156":{"id":"b:5:5352-0:3588:2156","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:8601:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5350:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueRange","id":"0:3588:2156","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5354:1406"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:25:51-0:3603:2158":{"id":"b:25:51-0:3603:2158","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/io-lifetimes-1.0.3/src/portability.rs","begin":[399,0],"end":[399,41]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OwnedFd","id":"1:5064:9877","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"FromFilelike","id":"25:47:11396","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Resettable","id":"0:3603:2158","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["25:53:64567","25:54:64568"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1648:655":{"id":"0:1648:655","crate_id":0,"name":"fmt","span":{"filename":"src/error/mod.rs","begin":[776,4],"end":[785,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Formatter","id":"2:8556:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8545:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3258":{"id":"0:3258","crate_id":0,"name":null,"span":{"filename":"src/builder/arg_predicate.rs","begin":[6,23],"end":[6,32]},"visibility":{"restricted":{"parent":"0:335:2143","path":"::builder::arg_predicate"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2672:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgPredicate","id":"0:3248:2155","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4291":{"id":"0:4291","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/value_source.rs","begin":[2,40],"end":[2,42]},"visibility":{"restricted":{"parent":"0:2069:6527","path":"::parser::matches::value_source"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2290:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4275:6462","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5102:20769":{"id":"5:5102:20769","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:11536:20770"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6967:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2662:217-0:3852:2166":{"id":"a:2:2662:217-0:3852:2166","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"NonEmptyStringValueParser","id":"0:3852:2166","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:988:915":{"id":"0:988:915","crate_id":0,"name":"new","span":{"filename":"src/builder/styled_str.rs","begin":[16,4],"end":[18,5]},"visibility":"public","docs":"Create an empty buffer","links":{},"attrs":["#[cfg(feature = \"color\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:745:600":{"id":"0:745:600","crate_id":0,"name":"eq","span":{"filename":"src/builder/os_str.rs","begin":[192,4],"end":[194,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3321-0:3829:2161":{"id":"b:2:3321-0:3829:2161","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3319:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BoolValueParser","id":"0:3829:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3323:1440"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:7736:6523-0:3978:6082":{"id":"a:2:7736:6523-0:3978:6082","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7736:6523","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextValue","id":"0:3978:6082","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:203":{"id":"0:203","crate_id":0,"name":null,"span":{"filename":"src/builder/arg.rs","begin":[1998,0],"end":[2549,1]},"visibility":{"restricted":{"parent":"0:124:1849","path":"::builder::arg"}},"docs":"# Help","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3195:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:204:1563","0:205:2393","0:206:3188","0:207:2412","0:208:3212","0:209:3217","0:210:3227","0:211:3235","0:212:3263","0:213:3270"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1326:2151":{"id":"0:1326:2151","crate_id":0,"name":"value_parser","span":{"filename":"src/builder/value_parser.rs","begin":[2134,4],"end":[2138,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"qualified_path","inner":{"name":"Parser","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:1306:2175","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:809:3648":{"id":"0:809:3648","crate_id":0,"name":"EMPTY","span":{"filename":"src/builder/range.rs","begin":[10,4],"end":[13,6]},"visibility":"public","docs":"Nor argument values, or a flag","links":{},"attrs":[],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"generic","inner":"Self"},"default":"_"}},"a:2:2676:225-0:3859:2165":{"id":"a:2:2676:225-0:3859:2165","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MapValueParser","id":"0:3859:2165","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"P"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2523-0:1054:2174":{"id":"b:2:2523-0:1054:2174","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2493:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1054:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2526:127","2:2527:1427"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1229:5472":{"id":"0:1229:5472","crate_id":0,"name":"Value","span":{"filename":"src/builder/value_parser.rs","begin":[1540,4],"end":[1540,19]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"0:4545:4335":{"id":"0:4545:4335","crate_id":0,"name":"Always","span":{"filename":"src/util/color.rs","begin":[41,4],"end":[41,10]},"visibility":"default","docs":"Enables colored output regardless of whether or not the output is going to a terminal/TTY.\n\n# Platform Specific\n\nThis setting only applies to Unix, Linux, and macOS (i.e. non-Windows platforms).\n\n# Examples\n\n ```no_run\n# use clap::{Command, ColorChoice};\nCommand::new(\"myprog\")\n    .color(ColorChoice::Always)\n    .get_matches();\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"0:4002:655":{"id":"0:4002:655","crate_id":0,"name":"fmt","span":{"filename":"src/error/context.rs","begin":[74,16],"end":[74,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:8556:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8545:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2746":{"id":"0:2746","crate_id":0,"name":null,"span":{"filename":"src/util/id.rs","begin":[114,0],"end":[119,1]},"visibility":{"restricted":{"parent":"0:2715:1860","path":"::util::id"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2285:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2747:600"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3754:655":{"id":"0:3754:655","crate_id":0,"name":"fmt","span":{"filename":"src/builder/value_parser.rs","begin":[849,22],"end":[849,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:8556:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8545:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1481":{"id":"0:1481","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[33,0],"end":[33,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"range::ValueRange","name":"ValueRange","id":"0:3588:2156","glob":false}},"a:2:2676:225-0:3603:2158":{"id":"a:2:2676:225-0:3603:2158","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Resettable","id":"0:3603:2158","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1856:928":{"id":"0:1856:928","crate_id":0,"name":"next","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1416,4],"end":[1418,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"2:7156:156","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5354:1406":{"id":"5:5354:1406","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6967:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2662:217-0:1553:6083":{"id":"a:2:2662:217-0:1553:6083","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RichFormatter","id":"0:1553:6083","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1860:6920":{"id":"0:1860:6920","crate_id":0,"name":"next_back","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1425,4],"end":[1427,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"2:7156:156","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4118:655":{"id":"0:4118:655","crate_id":0,"name":"fmt","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[65,9],"end":[65,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:8556:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8545:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2528-0:3810:2171":{"id":"b:2:2528-0:3810:2171","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangedU64ValueParser","id":"0:3810:2171","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2531:127","2:2532:1426"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3830":{"id":"0:3830","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1612,9],"end":[1612,13]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2674:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BoolValueParser","id":"0:3829:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:834":{"id":"0:834","crate_id":0,"name":null,"span":{"filename":"src/builder/range.rs","begin":[149,0],"end":[155,1]},"visibility":{"restricted":{"parent":"0:807:2147","path":"::builder::range"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"RangeTo","id":"2:46501:199","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueRange","id":"0:3588:2156","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:835:673"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:92:2065":{"id":"0:92:2065","crate_id":0,"name":"from_arg_matches","span":{"filename":"src/derive.rs","begin":[433,4],"end":[435,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["matches",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4112:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48278:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:12:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:24:1849":{"id":"0:24:1849","crate_id":0,"name":"arg","span":{"filename":"src/macros.rs","begin":[544,0],"end":[557,1]},"visibility":"public","docs":"Create an [`Arg`] from a usage string.\n\nAllows creation of basic settings for the [`Arg`].\n\n**NOTE**: Not all settings may be set using the usage string method. Some properties are\nonly available via the builder pattern.\n\n# Syntax\n\nUsage strings typically following the form:\n\n```notrust\n[explicit name] [short] [long] [value names] [...] [help string]\n```\n\n### Explicit Name\n\nThe name may be either a bare-word or a string, followed by a `:`, like `name:` or\n`\"name\":`.\n\n*Note:* This is an optional field, if it's omitted the argument will use one of the additional\nfields as the name using the following priority order:\n\n 1. Explicit Name\n 2. Long\n 3. Value Name\n\nSee [`Arg::id`][crate::Arg::id].\n\n### Short\n\nA short flag is a `-` followed by either a bare-character or quoted character, like `-f` or\n`-'f'`.\n\nSee [`Arg::short`][crate::Arg::short].\n\n### Long\n\nA long flag is a `--` followed by either a bare-word or a string, like `--foo` or\n`--\"foo\"`.\n\n**NOTE:** Dashes in the long name (e.g. `--foo-bar`) is not supported and quoting is required\n(e.g. `--\"foo-bar\"`).\n\nSee [`Arg::long`][crate::Arg::long].\n\n### Values (Value Notation)\n\nThis is set by placing bare-word between:\n- `[]` like `[FOO]`\n  - Positional argument: optional\n  - Named argument: optional value\n- `<>` like `<FOO>`: required\n\nSee [`Arg::value_name`][crate::Arg::value_name].\n\n### `...`\n\n`...` (three consecutive dots/periods) specifies that this argument may occur multiple\ntimes (not to be confused with multiple values per occurrence).\n\nSee [`ArgAction::Count`][crate::ArgAction::Count] and [`ArgAction::Append`][crate::ArgAction::Append].\n\n### Help String\n\nThe help string is denoted between a pair of double quotes `\"\"` and may contain any\ncharacters.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, arg};\nlet cmd = Command::new(\"prog\")\n    .args(&[\n        arg!(--config <FILE> \"a required file for the configuration and no short\"),\n        arg!(-d --debug ... \"turns on debugging information and allows multiples\"),\n        arg!([input] \"an optional input file to use\")\n    ]);\n\nlet m = cmd.try_get_matches_from([\"prog\", \"--config\", \"file.toml\"]).unwrap();\nassert_eq!(m.get_one::<String>(\"config\").unwrap(), \"file.toml\");\nassert_eq!(*m.get_one::<u8>(\"debug\").unwrap(), 0);\nassert_eq!(m.get_one::<String>(\"input\"), None);\n```\n[`Arg`]: crate::Arg","links":{"crate::Arg":"0:3195:1652","crate::Arg::long":"0:152:1850","crate::Arg::value_name":"0:180:1866","crate::ArgAction::Append":"0:2799:1857","crate::Arg::short":"0:151:1863","crate::ArgAction::Count":"0:2805:109","crate::Arg::id":"0:150:1860"},"attrs":["#[macro_export]"],"deprecation":null,"kind":"macro","inner":"macro_rules! arg {\n    ( $name:ident: $($tail:tt)+ ) => { ... };\n    ( $($tail:tt)+ ) => { ... };\n}"},"b:2:2241-0:3638:2154":{"id":"b:2:2241-0:3638:2154","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2235:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2243:26835"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2662:217-0:1054:2174":{"id":"a:2:2662:217-0:1054:2174","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1054:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:317":{"id":"0:317","crate_id":0,"name":null,"span":{"filename":"src/builder/arg_group.rs","begin":[96,0],"end":[495,1]},"visibility":{"restricted":{"parent":"0:314:2142","path":"::builder::arg_group"}},"docs":"# Builder","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3229:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:318:915","0:319:1860","0:320:1849","0:321:303","0:322:3853","0:323:3822","0:324:3604","0:325:1870","0:326:2397","0:327:3471","0:328:3488","0:329:3499"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2523-0:4174:6458":{"id":"b:2:2523-0:4174:6458","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2493:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawValues","id":"0:4174:6458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2526:127","2:2527:1427"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:184:2127":{"id":"0:184:2127","crate_id":0,"name":"ignore_case","span":{"filename":"src/builder/arg.rs","begin":[1309,4],"end":[1315,5]},"visibility":"public","docs":"Match values against [`PossibleValuesParser`][crate::builder::PossibleValuesParser] without matching case.\n\nWhen other arguments are conditionally required based on the\nvalue of a case-insensitive argument, the equality check done\nby [`Arg::required_if_eq`], [`Arg::required_if_eq_any`], or\n[`Arg::required_if_eq_all`] is case-insensitive.\n\n\n**NOTE:** Setting this requires [taking values][Arg::num_args]\n\n**NOTE:** To do unicode case folding, enable the `unicode` feature flag.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ArgAction};\nlet m = Command::new(\"pv\")\n    .arg(Arg::new(\"option\")\n        .long(\"option\")\n        .action(ArgAction::Set)\n        .ignore_case(true)\n        .value_parser([\"test123\"]))\n    .get_matches_from(vec![\n        \"pv\", \"--option\", \"TeSt123\",\n    ]);\n\nassert!(m.get_one::<String>(\"option\").unwrap().eq_ignore_ascii_case(\"test123\"));\n```\n\nThis setting also works when multiple values can be defined:\n\n```rust\n# use clap::{Command, Arg, ArgAction};\nlet m = Command::new(\"pv\")\n    .arg(Arg::new(\"option\")\n        .short('o')\n        .long(\"option\")\n        .action(ArgAction::Set)\n        .ignore_case(true)\n        .num_args(1..)\n        .value_parser([\"test123\", \"test321\"]))\n    .get_matches_from(vec![\n        \"pv\", \"--option\", \"TeSt123\", \"teST123\", \"tESt321\"\n    ]);\n\nlet matched_vals = m.get_many::<String>(\"option\").unwrap().collect::<Vec<_>>();\nassert_eq!(&*matched_vals, &[\"TeSt123\", \"teST123\", \"tESt321\"]);\n```","links":{"`Arg::required_if_eq`":"0:224:3397","`Arg::required_if_eq_any`":"0:225:3420","`Arg::required_if_eq_all`":"0:227:3429","Arg::num_args":"0:178:1872","crate::builder::PossibleValuesParser":"0:3783:2169"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3839":{"id":"0:3839","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1711,22],"end":[1711,27]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8596:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FalseyValueParser","id":"0:3835:2164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3840:655"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2513-0:3978:6082":{"id":"b:2:2513-0:3978:6082","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextValue","id":"0:3978:6082","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2516:2263"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3641:59":{"id":"0:3641:59","crate_id":0,"name":"default","span":{"filename":"src/builder/str.rs","begin":[5,9],"end":[5,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:569:5125":{"id":"0:569:5125","crate_id":0,"name":"is_no_binary_name_set","span":{"filename":"src/builder/command.rs","begin":[3561,4],"end":[3563,5]},"visibility":"public","docs":"Report whether [`Command::no_binary_name`] is set","links":{"`Command::no_binary_name`":"0:435:4298"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:882:2452":{"id":"0:882:2452","crate_id":0,"name":"into_resettable","span":{"filename":"src/builder/resettable.rs","begin":[142,4],"end":[144,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Resettable","id":"0:3603:2158","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11417:29174":{"id":"2:11417:29174","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1333":{"id":"0:1333","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[2156,0],"end":[2163,1]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ValueParserFactory","id":"0:1306:2175","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"u32"},"items":["0:1334:1667","0:1335:2151"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1311:2151":{"id":"0:1311:2151","crate_id":0,"name":"value_parser","span":{"filename":"src/builder/value_parser.rs","begin":[2102,4],"end":[2104,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"qualified_path","inner":{"name":"Parser","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:1306:2175","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:929":{"id":"0:929","crate_id":0,"name":null,"span":{"filename":"src/builder/str.rs","begin":[91,0],"end":[95,1]},"visibility":{"restricted":{"parent":"0:912:1352","path":"::builder::str"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"std::path::PathBuf","id":"1:5394:188","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:930:673"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11534:10472":{"id":"2:11534:10472","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:337":{"id":"0:337","crate_id":0,"name":null,"span":{"filename":"src/builder/arg_predicate.rs","begin":[15,0],"end":[19,1]},"visibility":{"restricted":{"parent":"0:335:2143","path":"::builder::arg_predicate"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgPredicate","id":"0:3248:2155","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:339:673"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1239:59":{"id":"0:1239:59","crate_id":0,"name":"default","span":{"filename":"src/builder/value_parser.rs","begin":[1604,4],"end":[1606,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:965:600":{"id":"0:965:600","crate_id":0,"name":"eq","span":{"filename":"src/builder/str.rs","begin":[209,4],"end":[211,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"std::string::String","id":"5:6967:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3593:412":{"id":"0:3593:412","crate_id":0,"name":"clone","span":{"filename":"src/builder/range.rs","begin":[2,15],"end":[2,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"ValueRange","id":"0:3588:2156","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3868":{"id":"0:3868","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1944,16],"end":[1944,21]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"2:8596:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"2:8596:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8596:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MapValueParser","id":"0:3859:2165","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"P"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["0:3871:655"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:5:681-0:3842:2162":{"id":"b:5:681-0:3842:2162","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:677:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BoolishValueParser","id":"0:3842:2162","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:683:5351","5:684:3662","5:685:8969"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3859:2165":{"id":"0:3859:2165","crate_id":0,"name":"MapValueParser","span":{"filename":"src/builder/value_parser.rs","begin":[1945,0],"end":[1948,1]},"visibility":"public","docs":"Adapt a `TypedValueParser` from one value to another\n\nSee [`TypedValueParser::map`]","links":{"`TypedValueParser::map`":"0:1130:837"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:2:7735:6524-0:3859:2165","a:2:2676:225-0:3859:2165","a:2:2662:217-0:3859:2165","a:2:2726:5340-0:3859:2165","a:2:7736:6523-0:3859:2165","b:2:2523-0:3859:2165","b:2:2238-0:3859:2165","b:2:2517-0:3859:2165","b:2:2513-0:3859:2165","b:2:2241-0:3859:2165","b:2:2528-0:3859:2165","b:2:3321-0:3859:2165","b:5:681-0:3859:2165","0:3864","0:3868","0:1284"]}},"0:78:2026":{"id":"0:78:2026","crate_id":0,"name":"parse_from","span":{"filename":"src/derive.rs","begin":[406,4],"end":[412,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["itr",{"kind":"generic","inner":"I"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"It","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7042:149","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"It"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"It"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsString","id":"1:2026:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1327":{"id":"0:1327","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[2140,0],"end":[2147,1]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ValueParserFactory","id":"0:1306:2175","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"u16"},"items":["0:1328:1667","0:1329:2151"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:2760":{"id":"0:2760","crate_id":0,"name":null,"span":{"filename":"src/util/id.rs","begin":[159,0],"end":[164,1]},"visibility":{"restricted":{"parent":"0:2715:1860","path":"::util::id"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2285:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"std::string::String","id":"5:6967:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2761:600"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:7736:6523-0:4174:6458":{"id":"a:2:7736:6523-0:4174:6458","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7736:6523","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawValues","id":"0:4174:6458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2513-0:4254:6461":{"id":"b:2:2513-0:4254:6461","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:4254:6461","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2516:2263"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2241-0:3783:2169":{"id":"b:2:2241-0:3783:2169","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2235:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValuesParser","id":"0:3783:2169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2243:26835"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4034:6131":{"id":"0:4034:6131","crate_id":0,"name":"DisplayHelp","span":{"filename":"src/error/kind.rs","begin":[261,4],"end":[261,15]},"visibility":"default","docs":"Not a true \"error\" as it means `--help` or similar was used.\nThe help message will be sent to `stdout`.\n\n**Note**: If the help is displayed due to an error (such as missing subcommands) it will\nbe sent to `stderr` instead of `stdout`.\n\n# Examples\n\n ```\n# use clap::{Command, Arg, error::ErrorKind};\nlet result = Command::new(\"prog\")\n    .try_get_matches_from(vec![\"prog\", \"--help\"]);\nassert!(result.is_err());\nassert_eq!(result.unwrap_err().kind(), ErrorKind::DisplayHelp);\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"0:2729:673":{"id":"0:2729:673","crate_id":0,"name":"from","span":{"filename":"src/util/id.rs","begin":[43,4],"end":[45,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2312":{"id":"0:2312","crate_id":0,"name":null,"span":{"filename":"src/parser/mod.rs","begin":[27,0],"end":[27,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"error::MatchesError","name":"MatchesError","id":"0:4091:6463","glob":false}},"0:871:2452":{"id":"0:871:2452","crate_id":0,"name":"into_resettable","span":{"filename":"src/builder/resettable.rs","begin":[97,4],"end":[102,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Resettable","id":"0:3603:2158","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:3704:1651","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3321-0:4174:6458":{"id":"b:2:3321-0:4174:6458","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3319:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawValues","id":"0:4174:6458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3323:1440"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2528-0:4091:6463":{"id":"b:2:2528-0:4091:6463","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4091:6463","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2531:127","2:2532:1426"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1602:6148":{"id":"0:1602:6148","crate_id":0,"name":"render","span":{"filename":"src/error/mod.rs","begin":[271,4],"end":[273,5]},"visibility":"public","docs":"Render the error message to a [`StyledStr`].\n\n# Example\n```no_run\nuse clap::Command;\n\nmatch Command::new(\"Command\").try_get_matches() {\n    Ok(matches) => {\n        // do_something\n    },\n    Err(err) => {\n        let err = err.render();\n        println!(\"{}\", err);\n        // do_something\n    },\n};\n```","links":{"`StyledStr`":"0:3662:1951"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3323:1440":{"id":"2:3323:1440","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"2:46617:6533","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4155":{"id":"0:4155","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1406,9],"end":[1406,14]},"visibility":{"restricted":{"parent":"0:1754:6526","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:4151:6459","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:4157:412"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2726:5340-0:4112:1655":{"id":"a:2:2726:5340-0:4112:1655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2726:5340","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4112:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:481:4703":{"id":"0:481:4703","crate_id":0,"name":"allow_missing_positional","span":{"filename":"src/builder/command.rs","begin":[2161,4],"end":[2167,5]},"visibility":"public","docs":"Allows one to implement two styles of CLIs where positionals can be used out of order.\n\nThe first example is a CLI where the second to last positional argument is optional, but\nthe final positional argument is required. Such as `$ prog [optional] <required>` where one\nof the two following usages is allowed:\n\n* `$ prog [optional] <required>`\n* `$ prog <required>`\n\nThis would otherwise not be allowed. This is useful when `[optional]` has a default value.\n\n**Note:** when using this style of \"missing positionals\" the final positional *must* be\n[required] if `--` will not be used to skip to the final positional argument.\n\n**Note:** This style also only allows a single positional argument to be \"skipped\" without\nthe use of `--`. To skip more than one, see the second example.\n\nThe second example is when one wants to skip multiple optional positional arguments, and use\nof the `--` operator is OK (but not required if all arguments will be specified anyways).\n\nFor example, imagine a CLI which has three positional arguments `[foo] [bar] [baz]...` where\n`baz` accepts multiple values (similar to man `ARGS...` style training arguments).\n\nWith this setting the following invocations are posisble:\n\n* `$ prog foo bar baz1 baz2 baz3`\n* `$ prog foo -- baz1 baz2 baz3`\n* `$ prog -- baz1 baz2 baz3`\n\n# Examples\n\nStyle number one from above:\n\n```rust\n# use clap::{Command, Arg};\n// Assume there is an external subcommand named \"subcmd\"\nlet m = Command::new(\"myprog\")\n    .allow_missing_positional(true)\n    .arg(Arg::new(\"arg1\"))\n    .arg(Arg::new(\"arg2\")\n        .required(true))\n    .get_matches_from(vec![\n        \"prog\", \"other\"\n    ]);\n\nassert_eq!(m.get_one::<String>(\"arg1\"), None);\nassert_eq!(m.get_one::<String>(\"arg2\").unwrap(), \"other\");\n```\n\nNow the same example, but using a default value for the first optional positional argument\n\n```rust\n# use clap::{Command, Arg};\n// Assume there is an external subcommand named \"subcmd\"\nlet m = Command::new(\"myprog\")\n    .allow_missing_positional(true)\n    .arg(Arg::new(\"arg1\")\n        .default_value(\"something\"))\n    .arg(Arg::new(\"arg2\")\n        .required(true))\n    .get_matches_from(vec![\n        \"prog\", \"other\"\n    ]);\n\nassert_eq!(m.get_one::<String>(\"arg1\").unwrap(), \"something\");\nassert_eq!(m.get_one::<String>(\"arg2\").unwrap(), \"other\");\n```\n\nStyle number two from above:\n\n```rust\n# use clap::{Command, Arg, ArgAction};\n// Assume there is an external subcommand named \"subcmd\"\nlet m = Command::new(\"myprog\")\n    .allow_missing_positional(true)\n    .arg(Arg::new(\"foo\"))\n    .arg(Arg::new(\"bar\"))\n    .arg(Arg::new(\"baz\").action(ArgAction::Set).num_args(1..))\n    .get_matches_from(vec![\n        \"prog\", \"foo\", \"bar\", \"baz1\", \"baz2\", \"baz3\"\n    ]);\n\nassert_eq!(m.get_one::<String>(\"foo\").unwrap(), \"foo\");\nassert_eq!(m.get_one::<String>(\"bar\").unwrap(), \"bar\");\nassert_eq!(m.get_many::<String>(\"baz\").unwrap().collect::<Vec<_>>(), &[\"baz1\", \"baz2\", \"baz3\"]);\n```\n\nNow nofice if we don't specify `foo` or `baz` but use the `--` operator.\n\n```rust\n# use clap::{Command, Arg, ArgAction};\n// Assume there is an external subcommand named \"subcmd\"\nlet m = Command::new(\"myprog\")\n    .allow_missing_positional(true)\n    .arg(Arg::new(\"foo\"))\n    .arg(Arg::new(\"bar\"))\n    .arg(Arg::new(\"baz\").action(ArgAction::Set).num_args(1..))\n    .get_matches_from(vec![\n        \"prog\", \"--\", \"baz1\", \"baz2\", \"baz3\"\n    ]);\n\nassert_eq!(m.get_one::<String>(\"foo\"), None);\nassert_eq!(m.get_one::<String>(\"bar\"), None);\nassert_eq!(m.get_many::<String>(\"baz\").unwrap().collect::<Vec<_>>(), &[\"baz1\", \"baz2\", \"baz3\"]);\n```\n\n[required]: crate::Arg::required()","links":{"crate::Arg::required()":"0:166:1870"},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2528-0:3749:2172":{"id":"b:2:2528-0:3749:2172","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StringValueParser","id":"0:3749:2172","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2531:127","2:2532:1426"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:7736:6523-0:3859:2165":{"id":"a:2:7736:6523-0:3859:2165","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:7736:6523","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:7736:6523","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7736:6523","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MapValueParser","id":"0:3859:2165","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"P"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1204:915":{"id":"0:1204:915","crate_id":0,"name":"new","span":{"filename":"src/builder/value_parser.rs","begin":[1259,4],"end":[1261,5]},"visibility":"public","docs":"Select full range of `i64`","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:921":{"id":"0:921","crate_id":0,"name":null,"span":{"filename":"src/builder/str.rs","begin":[67,0],"end":[71,1]},"visibility":{"restricted":{"parent":"0:912:1352","path":"::builder::str"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"borrowed_ref","inner":{"lifetime":"'static","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:922:673"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4098":{"id":"0:4098","crate_id":0,"name":null,"span":{"filename":"src/parser/error.rs","begin":[2,16],"end":[2,21]},"visibility":{"restricted":{"parent":"0:1715:1662","path":"::parser::error"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(missing_copy_implementations)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8596:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4091:6463","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4099:655"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2241-0:4254:6461":{"id":"b:2:2241-0:4254:6461","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2235:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:4254:6461","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2243:26835"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2523-0:3756:2167":{"id":"b:2:2523-0:3756:2167","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2493:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsStringValueParser","id":"0:3756:2167","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2526:127","2:2527:1427"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:737:310":{"id":"0:737:310","crate_id":0,"name":"as_ref","span":{"filename":"src/builder/os_str.rs","begin":[165,4],"end":[167,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"std::ffi::OsStr","id":"1:2029:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:725":{"id":"0:725","crate_id":0,"name":null,"span":{"filename":"src/builder/os_str.rs","begin":[129,0],"end":[133,1]},"visibility":{"restricted":{"parent":"0:707:2145","path":"::builder::os_str"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"borrowed_ref","inner":{"lifetime":"'static","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:726:673"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:7735:6524-0:3859:2165":{"id":"a:2:7735:6524-0:3859:2165","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:7735:6524","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:7735:6524","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7735:6524","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MapValueParser","id":"0:3859:2165","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"P"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:2726:5340-0:3762:2168":{"id":"a:2:2726:5340-0:3762:2168","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2726:5340","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PathBufValueParser","id":"0:3762:2168","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3603:2158":{"id":"0:3603:2158","crate_id":0,"name":"Resettable","span":{"filename":"src/builder/resettable.rs","begin":[32,0],"end":[37,1]},"visibility":"public","docs":"Clearable builder value\n\nThis allows a builder function to both accept any value that can [`Into::into`] `T` (like\n`&str` into `OsStr`) as well as `None` to reset it to the default.  This is needed to\nworkaround a limitation where you can't have a function argument that is `impl Into<Option<T>>`\nwhere `T` is `impl Into<S>` accept `None` as its type is ambiguous.\n\n# Example\n\n```rust\n# use clap::Command;\n# use clap::Arg;\nfn common() -> Command {\n    Command::new(\"cli\")\n        .arg(Arg::new(\"input\").short('i').long(\"input\"))\n}\nlet mut command = common();\ncommand.mut_arg(\"input\", |arg| arg.short(None));\n```","links":{"`Into::into`":"2:2489:2263"},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"variants_stripped":false,"variants":["0:3605:5472","0:3608:5474"],"impls":["a:2:7735:6524-0:3603:2158","a:2:2676:225-0:3603:2158","a:2:2662:217-0:3603:2158","a:2:2726:5340-0:3603:2158","a:2:7736:6523-0:3603:2158","b:2:2523-0:3603:2158","b:2:2238-0:3603:2158","b:2:2517-0:3603:2158","b:2:2520-0:3603:2158","b:2:2513-0:3603:2158","b:2:2241-0:3603:2158","b:2:2528-0:3603:2158","b:2:3321-0:3603:2158","b:5:681-0:3603:2158","b:25:60-0:3603:2158","b:25:80-0:3603:2158","b:25:51-0:3603:2158","0:3610","0:3612","0:3615","0:3618","0:3620","0:3623","0:3625","0:3628","0:3631","0:3634","0:855","0:858","0:880"]}},"0:3237:59":{"id":"0:3237:59","crate_id":0,"name":"default","span":{"filename":"src/builder/arg_group.rs","begin":[85,9],"end":[85,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3229:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:925":{"id":"0:925","crate_id":0,"name":null,"span":{"filename":"src/builder/str.rs","begin":[79,0],"end":[83,1]},"visibility":{"restricted":{"parent":"0:912:1352","path":"::builder::str"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:6400:240","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}},"items":["0:926:673"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1047:126":{"id":"0:1047:126","crate_id":0,"name":"Err","span":{"filename":"src/builder/value_hint.rs","begin":[76,4],"end":[76,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"String","id":"5:6967:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:1480":{"id":"0:1480","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[32,0],"end":[32,38]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"possible_value::PossibleValue","name":"PossibleValue","id":"0:3571:1966","glob":false}},"0:1539:655":{"id":"0:1539:655","crate_id":0,"name":"fmt","span":{"filename":"src/error/context.rs","begin":[95,4],"end":[113,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"std::fmt::Formatter","id":"2:8556:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"std::fmt::Result","id":"2:8545:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2513-0:4275:6462":{"id":"b:2:2513-0:4275:6462","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4275:6462","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2516:2263"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4050":{"id":"0:4050","crate_id":0,"name":null,"span":{"filename":"src/error/kind.rs","begin":[2,29],"end":[2,38]},"visibility":{"restricted":{"parent":"0:1566:778","path":"::error::kind"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2285:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4009:3985","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4009:3985","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4051:600"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3978:6082":{"id":"0:3978:6082","crate_id":0,"name":"ContextValue","span":{"filename":"src/error/context.rs","begin":[77,0],"end":[92,1]},"visibility":"public","docs":"A piece of error information","links":{},"attrs":["#[non_exhaustive]","#[cfg(feature = \"error-context\")]"],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:3979:176","0:3981:5623","0:3984:221","0:3987:6163","0:3990:1951","0:3993:6183","0:3996:6200"],"impls":["a:2:7735:6524-0:3978:6082","a:2:2676:225-0:3978:6082","a:2:2662:217-0:3978:6082","a:2:2726:5340-0:3978:6082","a:2:7736:6523-0:3978:6082","b:2:2523-0:3978:6082","b:2:2238-0:3978:6082","b:2:2517-0:3978:6082","b:2:2513-0:3978:6082","b:2:2241-0:3978:6082","b:2:2528-0:3978:6082","b:2:3321-0:3978:6082","b:5:5352-0:3978:6082","b:5:681-0:3978:6082","0:3999","0:4001","0:4003","0:4004","0:4006","0:4007","0:1538"]}},"0:1556:2020":{"id":"0:1556:2020","crate_id":0,"name":"format_error","span":{"filename":"src/error/format.rs","begin":[55,4],"end":[115,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["error",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::error::Error","id":"0:1581:127","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:746":{"id":"0:746","crate_id":0,"name":null,"span":{"filename":"src/builder/os_str.rs","begin":[197,0],"end":[202,1]},"visibility":{"restricted":{"parent":"0:707:2145","path":"::builder::os_str"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2285:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:747:600"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:151:1863":{"id":"0:151:1863","crate_id":0,"name":"short","span":{"filename":"src/builder/arg.rs","begin":[165,4],"end":[173,5]},"visibility":"public","docs":"Sets the short version of the argument without the preceding `-`.\n\nBy default `V` and `h` are used by the auto-generated `version` and `help` arguments,\nrespectively. You will need to disable the auto-generated flags\n([`disable_help_flag`][crate::Command::disable_help_flag],\n[`disable_version_flag`][crate::Command::disable_version_flag]) and define your own.\n\n# Examples\n\nWhen calling `short`, use a single valid UTF-8 character which will allow using the\nargument via a single hyphen (`-`) such as `-c`:\n\n```rust\n# use clap::{Command, Arg,  ArgAction};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"config\")\n        .short('c')\n        .action(ArgAction::Set))\n    .get_matches_from(vec![\n        \"prog\", \"-c\", \"file.toml\"\n    ]);\n\nassert_eq!(m.get_one::<String>(\"config\").map(String::as_str), Some(\"file.toml\"));\n```\n\nTo use `-h` for your own flag and still have help:\n```rust\n# use clap::{Command, Arg,  ArgAction};\nlet m = Command::new(\"prog\")\n    .disable_help_flag(true)\n    .arg(Arg::new(\"host\")\n        .short('h')\n        .long(\"host\"))\n    .arg(Arg::new(\"help\")\n        .long(\"help\")\n        .global(true)\n        .action(ArgAction::Help))\n    .get_matches_from(vec![\n        \"prog\", \"-h\", \"wikipedia.org\"\n    ]);\n\nassert_eq!(m.get_one::<String>(\"host\").map(String::as_str), Some(\"wikipedia.org\"));\n```","links":{"crate::Command::disable_version_flag":"0:442:4355","crate::Command::disable_help_flag":"0:445:4368"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["s",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"char"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl IntoResettable<char>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"char"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4287":{"id":"0:4287","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/value_source.rs","begin":[2,29],"end":[2,38]},"visibility":{"restricted":{"parent":"0:2069:6527","path":"::parser::matches::value_source"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2672:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4275:6462","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2238-0:3929:6081":{"id":"b:2:2238-0:3929:6081","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2232:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:3929:6081","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2240:5354"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:727":{"id":"0:727","crate_id":0,"name":null,"span":{"filename":"src/builder/os_str.rs","begin":[135,0],"end":[139,1]},"visibility":{"restricted":{"parent":"0:707:2145","path":"::builder::os_str"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"std::ffi::OsString","id":"1:2026:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:728:673"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2513-0:3704:1651":{"id":"b:2:2513-0:3704:1651","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:3704:1651","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2516:2263"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:2527:1427":{"id":"2:2527:1427","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48278:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:468:4574":{"id":"0:468:4574","crate_id":0,"name":"help_template","span":{"filename":"src/builder/command.rs","begin":[1802,4],"end":[1805,5]},"visibility":"public","docs":"Sets the help template to be used, overriding the default format.\n\n**NOTE:** The template system is by design very simple. Therefore, the\ntags have to be written in the lowercase and without spacing.\n\nTags are given inside curly brackets.\n\nValid tags are:\n\n  * `{name}`                - Display name for the (sub-)command.\n  * `{bin}`                 - Binary name.(deprecated)\n  * `{version}`             - Version number.\n  * `{author}`              - Author information.\n  * `{author-with-newline}` - Author followed by `\\n`.\n  * `{author-section}`      - Author preceded and followed by `\\n`.\n  * `{about}`               - General description (from [`Command::about`] or\n                              [`Command::long_about`]).\n  * `{about-with-newline}`  - About followed by `\\n`.\n  * `{about-section}`       - About preceded and followed by '\\n'.\n  * `{usage-heading}`       - Automatically generated usage heading.\n  * `{usage}`               - Automatically generated or given usage string.\n  * `{all-args}`            - Help for all arguments (options, flags, positional\n                              arguments, and subcommands) including titles.\n  * `{options}`             - Help for options.\n  * `{positionals}`         - Help for positional arguments.\n  * `{subcommands}`         - Help for subcommands.\n  * `{tag}`                 - Standard tab sized used within clap\n  * `{after-help}`          - Help from [`Command::after_help`] or [`Command::after_long_help`].\n  * `{before-help}`         - Help from [`Command::before_help`] or [`Command::before_long_help`].\n\n# Examples\n\nFor a very brief help:\n\n```no_run\n# use clap::Command;\nCommand::new(\"myprog\")\n    .version(\"1.0\")\n    .help_template(\"{name} ({version}) - {usage}\")\n# ;\n```\n\nFor showing more application context:\n\n```no_run\n# use clap::Command;\nCommand::new(\"myprog\")\n    .version(\"1.0\")\n    .help_template(\"\\\n{before-help}{name} {version}\n{author-with-newline}{about-with-newline}\n{usage-heading} {usage}\n\n{all-args}{after-help}\n\")\n# ;\n```\n[`Command::about`]: Command::about()\n[`Command::long_about`]: Command::long_about()\n[`Command::after_help`]: Command::after_help()\n[`Command::after_long_help`]: Command::after_long_help()\n[`Command::before_help`]: Command::before_help()\n[`Command::before_long_help`]: Command::before_long_help()","links":{"Command::about()":"0:458:1838","Command::long_about()":"0:459:4023","Command::after_help()":"0:460:4026","Command::after_long_help()":"0:461:4027","Command::before_long_help()":"0:463:4025","Command::before_help()":"0:462:4024"},"attrs":["#[must_use]","#[cfg(feature = \"help\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["s",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl IntoResettable<StyledStr>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:70:2125":{"id":"0:70:2125","crate_id":0,"name":"from_str","span":{"filename":"src/derive.rs","begin":[379,4],"end":[389,5]},"visibility":"default","docs":"Parse an argument into `Self`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["input",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["ignore_case",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48278:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:6967:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2809:1874":{"id":"0:2809:1874","crate_id":0,"name":"Version","span":{"filename":"src/builder/action.rs","begin":[272,4],"end":[272,11]},"visibility":"default","docs":"When encountered, display [`Command::version`][super::Command::version]\n\nDepending on the flag, [`Command::long_version`][super::Command::long_version] may be shown\n\n# Examples\n\n```rust\n# use clap::Command;\n# use clap::Arg;\nlet cmd = Command::new(\"mycmd\")\n    .version(\"1.0.0\")\n    .arg(\n        Arg::new(\"special-version\")\n            .long(\"special-version\")\n            .action(clap::ArgAction::Version)\n    );\n\n// Existing help still exists\nlet err = cmd.clone().try_get_matches_from([\"mycmd\", \"--version\"]).unwrap_err();\nassert_eq!(err.kind(), clap::error::ErrorKind::DisplayVersion);\n\n// New help available\nlet err = cmd.try_get_matches_from([\"mycmd\", \"--special-version\"]).unwrap_err();\nassert_eq!(err.kind(), clap::error::ErrorKind::DisplayVersion);\n```","links":{"super::Command::long_version":"0:465:4022","super::Command::version":"0:464:1515"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"0:918:673":{"id":"0:918:673","crate_id":0,"name":"from","span":{"filename":"src/builder/str.rs","begin":[42,4],"end":[44,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["id",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:45:2035":{"id":"0:45:2035","crate_id":0,"name":"update_from","span":{"filename":"src/derive.rs","begin":[131,4],"end":[144,5]},"visibility":"default","docs":"Update from iterator, exit on error","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["itr",{"kind":"generic","inner":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7042:149","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsString","id":"1:2026:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:874":{"id":"0:874","crate_id":0,"name":null,"span":{"filename":"src/builder/resettable.rs","begin":[114,0],"end":[121,1]},"visibility":{"restricted":{"parent":"0:844:2148","path":"::builder::resettable"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'static","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"items":["0:875:2452"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:5:5352-0:1581:127":{"id":"b:5:5352-0:1581:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:8601:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5350:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1581:127","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["5:5354:1406"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2241-0:4151:6459":{"id":"b:2:2241-0:4151:6459","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2235:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:4151:6459","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2243:26835"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1090":{"id":"0:1090","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[380,0],"end":[385,1]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":"Create an `i64` [`ValueParser`] from a `N..` range\n\nSee [`RangedI64ValueParser`] for more control over the output type.\n\nSee also [`RangedU64ValueParser`]\n\n# Examples\n\n```rust\nlet mut cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"port\")\n            .long(\"port\")\n            .value_parser(3000..)\n            .action(clap::ArgAction::Set)\n            .required(true)\n    );\n\nlet m = cmd.try_get_matches_from_mut([\"cmd\", \"--port\", \"3001\"]).unwrap();\nlet port: i64 = *m.get_one(\"port\")\n    .expect(\"required\");\nassert_eq!(port, 3001);\n```","links":{"`RangedU64ValueParser`":"0:3810:2171","`RangedI64ValueParser`":"0:3791:2170","`ValueParser`":"0:1054:2174"},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"RangeFrom","id":"2:46481:196","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i64"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1054:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1091:673"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3241:655":{"id":"0:3241:655","crate_id":0,"name":"fmt","span":{"filename":"src/builder/arg_group.rs","begin":[85,25],"end":[85,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:8556:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8545:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2241-0:4522:1658":{"id":"b:2:2241-0:4522:1658","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2235:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2243:26835"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2241-0:4112:1655":{"id":"b:2:2241-0:4112:1655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2235:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4112:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2243:26835"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:5:681-0:3195:1652":{"id":"b:5:681-0:3195:1652","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:677:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3195:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:683:5351","5:684:3662","5:685:8969"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:190:2967":{"id":"0:190:2967","crate_id":0,"name":"value_terminator","span":{"filename":"src/builder/arg.rs","begin":[1554,4],"end":[1557,5]},"visibility":"public","docs":"Sentinel to **stop** parsing multiple values of a given argument.\n\nBy default when\none sets [`num_args(1..)`] on an argument, clap will continue parsing values for that\nargument until it reaches another valid argument, or one of the other more specific settings\nfor multiple values is used (such as [`num_args`]).\n\n**NOTE:** This setting only applies to [options] and [positional arguments]\n\n**NOTE:** When the terminator is passed in on the command line, it is **not** stored as one\nof the values\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ArgAction};\nArg::new(\"vals\")\n    .action(ArgAction::Set)\n    .num_args(1..)\n    .value_terminator(\";\")\n# ;\n```\n\nThe following example uses two arguments, a sequence of commands, and the location in which\nto perform them\n\n```rust\n# use clap::{Command, Arg, ArgAction};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"cmds\")\n        .action(ArgAction::Set)\n        .num_args(1..)\n        .allow_hyphen_values(true)\n        .value_terminator(\";\"))\n    .arg(Arg::new(\"location\"))\n    .get_matches_from(vec![\n        \"prog\", \"find\", \"-type\", \"f\", \"-name\", \"special\", \";\", \"/home/clap\"\n    ]);\nlet cmds: Vec<_> = m.get_many::<String>(\"cmds\").unwrap().collect();\nassert_eq!(&cmds, &[\"find\", \"-type\", \"f\", \"-name\", \"special\"]);\nassert_eq!(m.get_one::<String>(\"location\").unwrap(), \"/home/clap\");\n```\n[options]: Arg::action\n[positional arguments]: Arg::index()\n[`num_args(1..)`]: Arg::num_args()\n[`num_args`]: Arg::num_args()","links":{"Arg::index()":"0:163:747","Arg::num_args()":"0:178:1872","Arg::action":"0:176:1861"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["term",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl IntoResettable<Str>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3597":{"id":"0:3597","crate_id":0,"name":null,"span":{"filename":"src/builder/range.rs","begin":[2,33],"end":[2,35]},"visibility":{"restricted":{"parent":"0:807:2147","path":"::builder::range"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2673:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueRange","id":"0:3588:2156","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2528-0:4142:6457":{"id":"b:2:2528-0:4142:6457","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IdsRef","id":"0:4142:6457","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2531:127","2:2532:1426"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:519:5051":{"id":"0:519:5051","crate_id":0,"name":"get_author","span":{"filename":"src/builder/command.rs","begin":[3260,4],"end":[3262,5]},"visibility":"public","docs":"Get the authors of the cmd.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4044":{"id":"0:4044","crate_id":0,"name":null,"span":{"filename":"src/error/kind.rs","begin":[2,9],"end":[2,14]},"visibility":{"restricted":{"parent":"0:1566:778","path":"::error::kind"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8596:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4009:3985","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4045:655"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1809:6588":{"id":"0:1809:6588","crate_id":0,"name":"try_get_one","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1073,4],"end":[1088,5]},"visibility":"public","docs":"Non-panicking version of [`ArgMatches::get_one`]","links":{"`ArgMatches::get_one`":"0:1775:6587"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48278:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4091:6463","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Any","id":"2:3319:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3791:2170":{"id":"0:3791:2170","crate_id":0,"name":"RangedI64ValueParser","span":{"filename":"src/builder/value_parser.rs","begin":[1252,0],"end":[1255,1]},"visibility":"public","docs":"Parse number that fall within a range of values\n\n**NOTE:** To capture negative values, you will also need to set\n[`Arg::allow_negative_numbers`][crate::Arg::allow_negative_numbers] or\n[`Arg::allow_hyphen_values`][crate::Arg::allow_hyphen_values].\n\n# Example\n\nUsage:\n```rust\nlet mut cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"port\")\n            .long(\"port\")\n            .value_parser(clap::value_parser!(u16).range(3000..))\n            .action(clap::ArgAction::Set)\n            .required(true)\n    );\n\nlet m = cmd.try_get_matches_from_mut([\"cmd\", \"--port\", \"3001\"]).unwrap();\nlet port: u16 = *m.get_one(\"port\")\n    .expect(\"required\");\nassert_eq!(port, 3001);\n```\n\nSemantics:\n```rust\n# use std::ffi::OsStr;\n# use clap::builder::TypedValueParser;\n# let cmd = clap::Command::new(\"test\");\n# let arg = None;\nlet value_parser = clap::builder::RangedI64ValueParser::<i32>::new().range(-1..200);\nassert!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"random\")).is_err());\nassert!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"\")).is_err());\nassert!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"-200\")).is_err());\nassert!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"300\")).is_err());\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"-1\")).unwrap(), -1);\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"0\")).unwrap(), 0);\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"50\")).unwrap(), 50);\n```","links":{"crate::Arg::allow_negative_numbers":"0:186:2918","crate::Arg::allow_hyphen_values":"0:185:2910"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"std::convert::TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"kind":"primitive","inner":"i64"},"synthetic":false}}}],"where_predicates":[]},"impls":["0:1202","a:2:7735:6524-0:3791:2170","a:2:2676:225-0:3791:2170","a:2:2662:217-0:3791:2170","a:2:2726:5340-0:3791:2170","a:2:7736:6523-0:3791:2170","b:2:2523-0:3791:2170","b:2:2238-0:3791:2170","b:2:2517-0:3791:2170","b:2:2513-0:3791:2170","b:2:2241-0:3791:2170","b:2:2528-0:3791:2170","b:2:3321-0:3791:2170","b:5:681-0:3791:2170","0:3795","0:3797","0:3800","0:1208","0:1214","0:1218"]}},"0:405:1854":{"id":"0:405:1854","crate_id":0,"name":"debug_assert","span":{"filename":"src/builder/command.rs","begin":[455,4],"end":[457,5]},"visibility":"public","docs":"Catch problems earlier in the development cycle.\n\nMost error states are handled as asserts under the assumption they are programming mistake\nand not something to handle at runtime.  Rather than relying on tests (manual or automated)\nthat exhaustively test your CLI to ensure the asserts are evaluated, this will run those\nasserts in a way convenient for running as a test.\n\n**Note::** This will not help with asserts in [`ArgMatches`], those will need exhaustive\ntesting of your CLI.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ArgAction};\nfn cmd() -> Command {\n    Command::new(\"foo\")\n        .arg(\n            Arg::new(\"bar\").short('b').action(ArgAction::SetTrue)\n        )\n}\n\n#[test]\nfn verify_app() {\n    cmd().debug_assert();\n}\n\nfn main() {\n    let m = cmd().get_matches_from(vec![\"foo\", \"-b\"]);\n    println!(\"{}\", *m.get_one::<bool>(\"bar\").expect(\"defaulted by clap\"));\n}\n```","links":{"`ArgMatches`":"0:4112:1655"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2528-0:3978:6082":{"id":"b:2:2528-0:3978:6082","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextValue","id":"0:3978:6082","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2531:127","2:2532:1426"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:559:5106":{"id":"0:559:5106","crate_id":0,"name":"get_opts","span":{"filename":"src/builder/command.rs","begin":[3465,4],"end":[3468,5]},"visibility":"public","docs":"Iterate through the *options*.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:7156:156","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3195:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}}]}}},"generic_params":[],"modifier":"none"}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:739:310":{"id":"0:739:310","crate_id":0,"name":"as_ref","span":{"filename":"src/builder/os_str.rs","begin":[172,4],"end":[174,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"std::path::Path","id":"1:5506:187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:424:4252":{"id":"0:424:4252","crate_id":0,"name":"render_help","span":{"filename":"src/builder/command.rs","begin":[779,4],"end":[786,5]},"visibility":"public","docs":"Render the short help message (`-h`) to a [`StyledStr`]\n\nSee also [`Command::render_long_help`].\n\n# Examples\n\n```rust\n# use clap::Command;\nuse std::io;\nlet mut cmd = Command::new(\"myprog\");\nlet mut out = io::stdout();\nlet help = cmd.render_help();\nprintln!(\"{}\", help);\n```\n[`io::Write`]: std::io::Write\n[`-h` (short)]: Arg::help()\n[`--help` (long)]: Arg::long_help()","links":{"`Command::render_long_help`":"0:425:4256","`StyledStr`":"0:3662:1951"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2662:217-0:3638:2154":{"id":"a:2:2662:217-0:3638:2154","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:214":{"id":"0:214","crate_id":0,"name":null,"span":{"filename":"src/builder/arg.rs","begin":[2552,0],"end":[3692,1]},"visibility":{"restricted":{"parent":"0:124:1849","path":"::builder::arg"}},"docs":"# Advanced Argument Relations","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3195:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:215:3282","0:216:2396","0:217:3317","0:219:3338","0:221:3352","0:222:3370","0:223:3385","0:224:3397","0:225:3420","0:227:3429","0:229:3446","0:230:3469","0:234:3488","0:235:3499","0:236:3518","0:237:3530"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1048:2125":{"id":"0:1048:2125","crate_id":0,"name":"from_str","span":{"filename":"src/builder/value_hint.rs","begin":[77,4],"end":[94,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["s",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48278:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"FromStr","id":"2:11077:5547","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:747:600":{"id":"0:747:600","crate_id":0,"name":"eq","span":{"filename":"src/builder/os_str.rs","begin":[199,4],"end":[201,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3856":{"id":"0:3856","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1897,22],"end":[1897,27]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8596:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"NonEmptyStringValueParser","id":"0:3852:2166","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3857:655"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:2757:600":{"id":"0:2757:600","crate_id":0,"name":"eq","span":{"filename":"src/util/id.rs","begin":[148,4],"end":[150,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1891:6919":{"id":"0:1891:6919","crate_id":0,"name":"size_hint","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1537,4],"end":[1539,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:501:4846":{"id":"0:501:4846","crate_id":0,"name":"subcommand_required","span":{"filename":"src/builder/command.rs","begin":[2695,4],"end":[2701,5]},"visibility":"public","docs":"If no [`subcommand`] is present at runtime, error and exit gracefully.\n\n# Examples\n\n```rust\n# use clap::{Command, error::ErrorKind};\nlet err = Command::new(\"myprog\")\n    .subcommand_required(true)\n    .subcommand(Command::new(\"test\"))\n    .try_get_matches_from(vec![\n        \"myprog\",\n    ]);\nassert!(err.is_err());\nassert_eq!(err.unwrap_err().kind(), ErrorKind::MissingSubcommand);\n# ;\n```\n\n[`subcommand`]: crate::Command::subcommand()","links":{"crate::Command::subcommand()":"0:402:4142"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2797:1871":{"id":"0:2797:1871","crate_id":0,"name":"Set","span":{"filename":"src/builder/action.rs","begin":[53,4],"end":[53,7]},"visibility":"default","docs":"When encountered, store the associated value(s) in [`ArgMatches`][crate::ArgMatches]\n\n**NOTE:** If the argument has previously been seen, it will result in a\n[`ArgumentConflict`][crate::error::ErrorKind::ArgumentConflict] unless\n[`Command::args_override_self(true)`][crate::Command::args_override_self] is set.\n\n# Examples\n\n```rust\n# use clap::Command;\n# use clap::Arg;\nlet cmd = Command::new(\"mycmd\")\n    .arg(\n        Arg::new(\"flag\")\n            .long(\"flag\")\n            .action(clap::ArgAction::Set)\n    );\n\nlet matches = cmd.try_get_matches_from([\"mycmd\", \"--flag\", \"value\"]).unwrap();\nassert!(matches.contains_id(\"flag\"));\nassert_eq!(\n    matches.get_many::<String>(\"flag\").unwrap_or_default().map(|v| v.as_str()).collect::<Vec<_>>(),\n    vec![\"value\"]\n);\n```","links":{"crate::Command::args_override_self":"0:437:4321","crate::error::ErrorKind::ArgumentConflict":"0:4026:6162","crate::ArgMatches":"0:4112:1655"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"b:2:2513-0:3768:2163":{"id":"b:2:2513-0:3768:2163","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EnumValueParser","id":"0:3768:2163","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"items":["2:2516:2263"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:534:3558":{"id":"0:534:3558","crate_id":0,"name":"get_all_aliases","span":{"filename":"src/builder/command.rs","begin":[3329,4],"end":[3331,5]},"visibility":"public","docs":"Iterate through the set of *all* the aliases for this subcommand, both visible and hidden.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:7156:156","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}}]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'_"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:681-0:4275:6462":{"id":"b:5:681-0:4275:6462","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:677:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4275:6462","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:683:5351","5:684:3662","5:685:8969"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3936:6191":{"id":"0:3936:6191","crate_id":0,"name":"ValidSubcommand","span":{"filename":"src/error/context.rs","begin":[13,4],"end":[13,19]},"visibility":"default","docs":"Accepted subcommands","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"0:961:600":{"id":"0:961:600","crate_id":0,"name":"eq","span":{"filename":"src/builder/str.rs","begin":[196,4],"end":[198,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"std::ffi::OsStr","id":"1:2029:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3564:707":{"id":"0:3564:707","crate_id":0,"name":"hash","span":{"filename":"src/builder/os_str.rs","begin":[7,57],"end":[7,61]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["state",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"__H"}}}]],"output":{"kind":"tuple","inner":[]},"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:8833:144","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:683:5351":{"id":"5:683:5351","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"0:3852:2166":{"id":"0:3852:2166","crate_id":0,"name":"NonEmptyStringValueParser","span":{"filename":"src/builder/value_parser.rs","begin":[1899,0],"end":[1899,39]},"visibility":"public","docs":"Parse non-empty string values\n\nSee also:\n- [`ValueParser::string`]\n\n# Example\n\nUsage:\n```rust\nlet mut cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"append\")\n            .value_parser(clap::builder::NonEmptyStringValueParser::new())\n            .required(true)\n    );\n\nlet m = cmd.try_get_matches_from_mut([\"cmd\", \"true\"]).unwrap();\nlet port: &String = m.get_one(\"append\")\n    .expect(\"required\");\nassert_eq!(port, \"true\");\n```\n\nSemantics:\n```rust\n# use std::ffi::OsStr;\n# use clap::builder::TypedValueParser;\n# let cmd = clap::Command::new(\"test\");\n# let arg = None;\nlet value_parser = clap::builder::NonEmptyStringValueParser::new();\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"random\")).unwrap(), \"random\");\nassert!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"\")).is_err());\n```","links":{"`ValueParser::string`":"0:1073:1842"},"attrs":["#[non_exhaustive]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":false}},"generics":{"params":[],"where_predicates":[]},"impls":["0:1271","a:2:7735:6524-0:3852:2166","a:2:2676:225-0:3852:2166","a:2:2662:217-0:3852:2166","a:2:2726:5340-0:3852:2166","a:2:7736:6523-0:3852:2166","b:2:2523-0:3852:2166","b:2:2238-0:3852:2166","b:2:2517-0:3852:2166","b:2:2513-0:3852:2166","b:2:2241-0:3852:2166","b:2:2528-0:3852:2166","b:2:3321-0:3852:2166","b:5:681-0:3852:2166","0:3853","0:3854","0:3856","0:1273","0:1277"]}},"2:11437:29181":{"id":"2:11437:29181","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:11438:29182"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7736:6523-0:4151:6459":{"id":"a:2:7736:6523-0:4151:6459","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7736:6523","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:4151:6459","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"b:2:2585-0:1581:127":{"id":"b:2:2585-0:1581:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"2:2578:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Provider","id":"2:3370:8105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1581:127","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["2:2587:9385"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"E"}}},"b:2:2238-0:4254:6461":{"id":"b:2:2238-0:4254:6461","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2232:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:4254:6461","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2240:5354"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1265":{"id":"0:1265","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1827,0],"end":[1857,1]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["map","possible_values","parse","try_map"],"trait":{"name":"TypedValueParser","id":"0:1125:2173","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BoolishValueParser","id":"0:3842:2162","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1266:5472","0:1267:5682","0:1268:3567"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3642":{"id":"0:3642","crate_id":0,"name":null,"span":{"filename":"src/builder/str.rs","begin":[5,18],"end":[5,23]},"visibility":{"restricted":{"parent":"0:912:1352","path":"::builder::str"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3643:412"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2513-0:3248:2155":{"id":"b:2:2513-0:3248:2155","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgPredicate","id":"0:3248:2155","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2516:2263"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3321-0:4522:1658":{"id":"b:2:3321-0:4522:1658","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3319:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3323:1440"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:7736:6523-0:2796:1649":{"id":"a:2:7736:6523-0:2796:1649","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7736:6523","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgAction","id":"0:2796:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:222:3370":{"id":"0:222:3370","crate_id":0,"name":"required_unless_present_all","span":{"filename":"src/builder/arg.rs","begin":[3026,4],"end":[3032,5]},"visibility":"public","docs":"Sets this arg as [required] unless *all* of the specified arguments are present at runtime.\n\nIn other words, parsing will succeed only if user either\n* supplies the `self` arg.\n* supplies *all* of the `names` arguments.\n\n**NOTE:** If you wish for this argument to only be required unless *any of* these args are\npresent see [`Arg::required_unless_present_any`]\n\n# Examples\n\n```rust\n# use clap::Arg;\nArg::new(\"config\")\n    .required_unless_present_all([\"cfg\", \"dbg\"])\n# ;\n```\n\nIn the following example, the required argument is *not* provided, but it's not an error\nbecause *all* of the `names` args have been supplied.\n\n```rust\n# use clap::{Command, Arg, ArgAction};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .required_unless_present_all([\"dbg\", \"infile\"])\n        .action(ArgAction::Set)\n        .long(\"config\"))\n    .arg(Arg::new(\"dbg\")\n        .long(\"debug\")\n        .action(ArgAction::SetTrue))\n    .arg(Arg::new(\"infile\")\n        .short('i')\n        .action(ArgAction::Set))\n    .try_get_matches_from(vec![\n        \"prog\", \"--debug\", \"-i\", \"file\"\n    ]);\n\nassert!(res.is_ok());\n```\n\nSetting [`Arg::required_unless_present_all(names)`] and *not* supplying\neither *all* of `unless` args or the `self` arg is an error.\n\n```rust\n# use clap::{Command, Arg, error::ErrorKind, ArgAction};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .required_unless_present_all([\"dbg\", \"infile\"])\n        .action(ArgAction::Set)\n        .long(\"config\"))\n    .arg(Arg::new(\"dbg\")\n        .long(\"debug\")\n        .action(ArgAction::SetTrue))\n    .arg(Arg::new(\"infile\")\n        .short('i')\n        .action(ArgAction::Set))\n    .try_get_matches_from(vec![\n        \"prog\"\n    ]);\n\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind(), ErrorKind::MissingRequiredArgument);\n```\n[required]: Arg::required()\n[`Arg::required_unless_present_any`]: Arg::required_unless_present_any()\n[`Arg::required_unless_present_all(names)`]: Arg::required_unless_present_all()","links":{"Arg::required_unless_present_all()":"0:222:3370","Arg::required()":"0:166:1870","Arg::required_unless_present_any()":"0:223:3385"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["names",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7042:149","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}}}}]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl Into<Id>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}},{"name":"impl IntoIterator<Item = impl Into<Id>>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7042:149","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7735:6524-0:4112:1655":{"id":"a:2:7735:6524-0:4112:1655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7735:6524","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4112:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"0:1587:61":{"id":"0:1587:61","crate_id":0,"name":"raw","span":{"filename":"src/error/mod.rs","begin":[86,4],"end":[88,5]},"visibility":"public","docs":"Create an unformatted error\n\nThis is for you need to pass the error up to\na place that has access to the `Command` at which point you can call [`Error::format`].\n\nPrefer [`Command::error`] for generating errors.\n\n[`Command::error`]: crate::Command::error","links":{"`Error::format`":"0:1588:664","crate::Command::error":"0:406:1662"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["kind",{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4009:3985","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["message",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"std::fmt::Display","id":"2:8601:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl std::fmt::Display","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"std::fmt::Display","id":"2:8601:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4522:1658":{"id":"0:4522:1658","crate_id":0,"name":"Id","span":{"filename":"src/util/id.rs","begin":[9,0],"end":[9,19]},"visibility":"public","docs":"[`Arg`][crate::Arg] or [`ArgGroup`][crate::ArgGroup] identifier\n\nThis is used for accessing the value in [`ArgMatches`][crate::ArgMatches] or defining\nrelationships between `Arg`s and `ArgGroup`s with functions like\n[`Arg::conflicts_with`][crate::Arg::conflicts_with].","links":{"crate::ArgMatches":"0:4112:1655","crate::Arg":"0:3195:1652","crate::ArgGroup":"0:3229:1653","crate::Arg::conflicts_with":"0:234:3488"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:2717","a:2:7735:6524-0:4522:1658","a:2:2676:225-0:4522:1658","a:2:2662:217-0:4522:1658","a:2:2726:5340-0:4522:1658","a:2:7736:6523-0:4522:1658","b:2:2523-0:4522:1658","b:2:2238-0:4522:1658","b:2:2517-0:4522:1658","b:2:2513-0:4522:1658","b:2:2241-0:4522:1658","b:2:2528-0:4522:1658","b:2:3321-0:4522:1658","b:5:5352-0:4522:1658","b:5:681-0:4522:1658","0:697","0:909","0:4525","0:4527","0:4529","0:4530","0:4532","0:4533","0:4535","0:4537","0:4539","0:2724","0:2726","0:2728","0:2730","0:2732","0:2734","0:2736","0:2738","0:2740","0:2742","0:2744","0:2746","0:2748","0:2750","0:2752","0:2754","0:2756","0:2758","0:2760"]}},"0:73:2130":{"id":"0:73:2130","crate_id":0,"name":"to_possible_value","span":{"filename":"src/derive.rs","begin":[394,4],"end":[394,57]},"visibility":"default","docs":"The canonical argument value.\n\nThe value is `None` for skipped variants.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:3571:1966","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:11520:29201":{"id":"2:11520:29201","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12300:408","self::pattern":"2:11116:8056"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11121:8050","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11121:8050","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11136:8051","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4558":{"id":"0:4558","crate_id":0,"name":null,"span":{"filename":"src/util/color.rs","begin":[5,33],"end":[5,42]},"visibility":{"restricted":{"parent":"0:2776:1564","path":"::util::color"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2285:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:4542:1657","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:4542:1657","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4559:600"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3727:5597":{"id":"0:3727:5597","crate_id":0,"name":"Url","span":{"filename":"src/builder/value_hint.rs","begin":[64,4],"end":[64,7]},"visibility":"default","docs":"Complete web address.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"a:2:2726:5340-0:3791:2170":{"id":"a:2:2726:5340-0:3791:2170","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:2726:5340","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2726:5340","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:3791:2170","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4053":{"id":"0:4053","crate_id":0,"name":null,"span":{"filename":"src/error/kind.rs","begin":[2,40],"end":[2,42]},"visibility":{"restricted":{"parent":"0:1566:778","path":"::error::kind"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2290:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4009:3985","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:2726":{"id":"0:2726","crate_id":0,"name":null,"span":{"filename":"src/util/id.rs","begin":[36,0],"end":[40,1]},"visibility":{"restricted":{"parent":"0:2715:1860","path":"::util::id"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2727:673"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2523-0:3749:2172":{"id":"b:2:2523-0:3749:2172","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2493:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StringValueParser","id":"0:3749:2172","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2526:127","2:2527:1427"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1785:6682":{"id":"0:1785:6682","crate_id":0,"name":"remove_one","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[389,4],"end":[391,5]},"visibility":"public","docs":"Returns the value of a specific option or positional argument.\n\ni.e. an argument that [takes an additional value][crate::Arg::num_args] at runtime.\n\nReturns an error if the wrong type was used.  No item will have been removed.\n\nReturns `None` if the option wasn't present.\n\n*NOTE:* This will always return `Some(value)` if [`default_value`] has been set.\n[`ArgMatches::value_source`] can be used to check if a value is present at runtime.\n\n# Panic\n\nIf the argument definition and access mismatch.  To handle this case programmatically, see\n[`ArgMatches::try_remove_one`].\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, value_parser, ArgAction};\nlet mut m = Command::new(\"myprog\")\n    .arg(Arg::new(\"file\")\n        .required(true)\n        .action(ArgAction::Set))\n    .get_matches_from(vec![\n        \"myprog\", \"file.txt\",\n    ]);\nlet vals: String = m.remove_one(\"file\")\n    .expect(\"`file`is required\");\nassert_eq!(vals, \"file.txt\");\n```\n[positional]: crate::Arg::index()\n[`default_value`]: crate::Arg::default_value()","links":{"`ArgMatches::try_remove_one`":"0:1820:6683","`ArgMatches::value_source`":"0:1794:6527","crate::Arg::default_value()":"0:193:2260","crate::Arg::num_args":"0:178:1872"},"attrs":["#[track_caller]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Any","id":"2:3319:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2238-0:3248:2155":{"id":"b:2:2238-0:3248:2155","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2232:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgPredicate","id":"0:3248:2155","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2240:5354"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:273:1856":{"id":"0:273:1856","crate_id":0,"name":"get_action","span":{"filename":"src/builder/arg.rs","begin":[3958,4],"end":[3961,5]},"visibility":"public","docs":"Behavior when parsing the argument","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"super::ArgAction","id":"0:2796:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2513-0:2796:1649":{"id":"b:2:2513-0:2796:1649","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgAction","id":"0:2796:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2516:2263"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:258:1852":{"id":"0:258:1852","crate_id":0,"name":"get_value_names","span":{"filename":"src/builder/arg.rs","begin":[3836,4],"end":[3842,5]},"visibility":"public","docs":"Get the names of values for this argument.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:786:915":{"id":"0:786:915","crate_id":0,"name":"new","span":{"filename":"src/builder/possible_value.rs","begin":[60,4],"end":[65,5]},"visibility":"public","docs":"Create a [`PossibleValue`] with its name.\n\nThe name will be used to decide whether this value was provided by the user to an argument.\n\n**NOTE:** In case it is not [hidden] it will also be shown in help messages for arguments\nthat use it as a [possible value] and have not hidden them through [`Arg::hide_possible_values(true)`].\n\n# Examples\n\n```rust\n# use clap::builder::PossibleValue;\nPossibleValue::new(\"fast\")\n# ;\n```\n[hidden]: PossibleValue::hide\n[possible value]: crate::builder::PossibleValuesParser\n[`Arg::hide_possible_values(true)`]: crate::Arg::hide_possible_values()","links":{"PossibleValue::hide":"0:788:3217","`PossibleValue`":"0:3571:1966","crate::Arg::hide_possible_values()":"0:210:3227","crate::builder::PossibleValuesParser":"0:3783:2169"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["name",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl Into<Str>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2517-0:3195:1652":{"id":"b:2:2517-0:3195:1652","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3195:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2519:673"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:456:4020":{"id":"0:456:4020","crate_id":0,"name":"display_name","span":{"filename":"src/builder/command.rs","begin":[1448,4],"end":[1451,5]},"visibility":"public","docs":"Overrides the runtime-determined display name of the program for help and error messages.\n\n# Examples\n\n```no_run\n# use clap::Command;\nCommand::new(\"My Program\")\n     .display_name(\"my_program\")\n# ;\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["name",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:6967:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl IntoResettable<String>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:6967:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3640":{"id":"0:3640","crate_id":0,"name":null,"span":{"filename":"src/builder/str.rs","begin":[5,9],"end":[5,16]},"visibility":{"restricted":{"parent":"0:912:1352","path":"::builder::str"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2564:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3641:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2523-0:2796:1649":{"id":"b:2:2523-0:2796:1649","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2493:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgAction","id":"0:2796:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2526:127","2:2527:1427"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:573:5133":{"id":"0:573:5133","crate_id":0,"name":"is_propagate_version_set","span":{"filename":"src/builder/command.rs","begin":[3582,4],"end":[3584,5]},"visibility":"public","docs":"Report whether [`Command::propagate_version`] is set","links":{"`Command::propagate_version`":"0:443:4363"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1128:2015":{"id":"0:1128:2015","crate_id":0,"name":"parse","span":{"filename":"src/builder/value_parser.rs","begin":[702,4],"end":[709,5]},"visibility":"default","docs":"Parse the argument value\n\nWhen `arg` is `None`, an external subcommand value is being parsed.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["cmd",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Command","id":"0:3505:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["arg",{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Arg","id":"0:3195:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}}}],["value",{"kind":"resolved_path","inner":{"name":"std::ffi::OsString","id":"1:2026:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48278:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Value","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:1125:2173","args":null}}}},{"type":{"kind":"resolved_path","inner":{"name":"crate::Error","id":"0:12:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:865:2452":{"id":"0:865:2452","crate_id":0,"name":"into_resettable","span":{"filename":"src/builder/resettable.rs","begin":[70,4],"end":[75,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Resettable","id":"0:3603:2158","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"char"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7735:6524-0:3229:1653":{"id":"a:2:7735:6524-0:3229:1653","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7735:6524","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3229:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4007":{"id":"0:4007","crate_id":0,"name":null,"span":{"filename":"src/error/context.rs","begin":[74,34],"end":[74,36]},"visibility":{"restricted":{"parent":"0:1533:479","path":"::error::context"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2290:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextValue","id":"0:3978:6082","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:189:2942":{"id":"0:189:2942","crate_id":0,"name":"value_delimiter","span":{"filename":"src/builder/arg.rs","begin":[1501,4],"end":[1504,5]},"visibility":"public","docs":"Allow grouping of multiple values via a delimiter.\n\ni.e. should `--option=val1,val2,val3` be parsed as three values (`val1`, `val2`,\nand `val3`) or as a single value (`val1,val2,val3`). Defaults to using `,` (comma) as the\nvalue delimiter for all arguments that accept values (options and positional arguments)\n\n**NOTE:** implicitly sets [`Arg::action(ArgAction::Set)`]\n\n# Examples\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"config\")\n        .short('c')\n        .long(\"config\")\n        .value_delimiter(','))\n    .get_matches_from(vec![\n        \"prog\", \"--config=val1,val2,val3\"\n    ]);\n\nassert_eq!(m.get_many::<String>(\"config\").unwrap().collect::<Vec<_>>(), [\"val1\", \"val2\", \"val3\"])\n```\n[`Arg::value_delimiter(',')`]: Arg::value_delimiter()\n[`Arg::action(ArgAction::Set)`]: Arg::action()","links":{"Arg::action()":"0:176:1861"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["d",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"char"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl IntoResettable<char>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"char"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3844":{"id":"0:3844","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1808,15],"end":[1808,20]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BoolishValueParser","id":"0:3842:2162","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3845:412"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2517-0:1581:127":{"id":"b:2:2517-0:1581:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1581:127","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["2:2519:673"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:7736:6523-0:3791:2170":{"id":"a:2:7736:6523-0:3791:2170","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:7736:6523","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7736:6523","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:3791:2170","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1079:3567":{"id":"0:1079:3567","crate_id":0,"name":"possible_values","span":{"filename":"src/builder/value_parser.rs","begin":[243,4],"end":[247,5]},"visibility":"public","docs":"Reflect on enumerated value properties\n\nError checking should not be done with this; it is mostly targeted at user-facing\napplications like errors and completion.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:2137","args":{"angle_bracketed":{"args":[{"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Iterator","id":"2:7156:156","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"resolved_path","inner":{"name":"crate::builder::PossibleValue","id":"0:3571:1966","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}]}}},"generic_params":[]}],"lifetime":"'_"}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:545:5085":{"id":"0:545:5085","crate_id":0,"name":"get_subcommand_help_heading","span":{"filename":"src/builder/command.rs","begin":[3390,4],"end":[3392,5]},"visibility":"public","docs":"Returns the help heading for listing subcommands.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:402:4142":{"id":"0:402:4142","crate_id":0,"name":"subcommand","span":{"filename":"src/builder/command.rs","begin":[387,4],"end":[390,5]},"visibility":"public","docs":"Adds a subcommand to the list of valid possibilities.\n\nSubcommands are effectively sub-[`Command`]s, because they can contain their own arguments,\nsubcommands, version, usage, etc. They also function just like [`Command`]s, in that they get\ntheir own auto generated help, version, and usage.\n\nA subcommand's [`Command::name`] will be used for:\n- The argument the user passes in\n- Programmatically looking up the subcommand\n\n# Examples\n\n```no_run\n# use clap::{Command, arg};\nCommand::new(\"myprog\")\n    .subcommand(Command::new(\"config\")\n        .about(\"Controls configuration features\")\n        .arg(arg!(\"<config> 'Required configuration file to use'\")))\n# ;\n```","links":{"`Command::name`":"0:454:894","`Command`":"0:3505:1650"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["subcmd",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Command","id":"0:3505:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl Into<Command>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Command","id":"0:3505:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1145":{"id":"0:1145","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[860,0],"end":[886,1]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["map","possible_values","parse","try_map"],"trait":{"name":"TypedValueParser","id":"0:1125:2173","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StringValueParser","id":"0:3749:2172","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1146:5472","0:1147:5682","0:1148:2015"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3255:412":{"id":"0:3255:412","crate_id":0,"name":"clone","span":{"filename":"src/builder/arg_predicate.rs","begin":[6,9],"end":[6,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"ArgPredicate","id":"0:3248:2155","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2528-0:4161:6460":{"id":"b:2:2528-0:4161:6460","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValuesRef","id":"0:4161:6460","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2531:127","2:2532:1426"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:825:59":{"id":"0:825:59","crate_id":0,"name":"default","span":{"filename":"src/builder/range.rs","begin":[114,4],"end":[116,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1160:915":{"id":"0:1160:915","crate_id":0,"name":"new","span":{"filename":"src/builder/value_parser.rs","begin":[945,4],"end":[947,5]},"visibility":"public","docs":"Implementation for [`ValueParser::path_buf`]","links":{"`ValueParser::path_buf`":"0:1075:5679"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:98:2088":{"id":"0:98:2088","crate_id":0,"name":"augment_args","span":{"filename":"src/derive.rs","begin":[448,4],"end":[450,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["cmd",{"kind":"resolved_path","inner":{"name":"Command","id":"0:3505:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Command","id":"0:3505:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:5352-0:4522:1658":{"id":"b:5:5352-0:4522:1658","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:8601:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5350:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5354:1406"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:7735:6524-0:3978:6082":{"id":"a:2:7735:6524-0:3978:6082","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7735:6524","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextValue","id":"0:3978:6082","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:894":{"id":"0:894","crate_id":0,"name":null,"span":{"filename":"src/builder/resettable.rs","begin":[177,0],"end":[181,1]},"visibility":{"restricted":{"parent":"0:844:2148","path":"::builder::resettable"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1054:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1054:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"generic","inner":"I"},"items":["0:896:2452"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3986:1553":{"id":"0:3986:1553","crate_id":0,"name":"0","span":{"filename":"src/error/context.rs","begin":[83,11],"end":[83,17]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"String","id":"5:6967:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"0:1719":{"id":"0:1719","crate_id":0,"name":null,"span":{"filename":"src/parser/error.rs","begin":[37,0],"end":[37,42]},"visibility":{"restricted":{"parent":"0:1715:1662","path":"::parser::error"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["source","type_id","description","cause","provide"],"trait":{"name":"Error","id":"2:2578:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4091:6463","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:2587:9385":{"id":"2:2587:9385","crate_id":2,"name":"provide","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["demand",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Demand","id":"2:3382:8109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2528-0:3195:1652":{"id":"b:2:2528-0:3195:1652","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3195:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2531:127","2:2532:1426"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2726:5340-0:3829:2161":{"id":"a:2:2726:5340-0:3829:2161","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2726:5340","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BoolValueParser","id":"0:3829:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1094":{"id":"0:1094","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[440,0],"end":[445,1]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":"Create an `i64` [`ValueParser`] from a `..=M` range\n\nSee [`RangedI64ValueParser`] for more control over the output type.\n\nSee also [`RangedU64ValueParser`]\n\n# Examples\n\n```rust\nlet mut cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"port\")\n            .long(\"port\")\n            .value_parser(..=3000)\n            .action(clap::ArgAction::Set)\n            .required(true)\n    );\n\nlet m = cmd.try_get_matches_from_mut([\"cmd\", \"--port\", \"80\"]).unwrap();\nlet port: i64 = *m.get_one(\"port\")\n    .expect(\"required\");\nassert_eq!(port, 80);\n```","links":{"`ValueParser`":"0:1054:2174","`RangedU64ValueParser`":"0:3810:2171","`RangedI64ValueParser`":"0:3791:2170"},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"RangeToInclusive","id":"2:46545:200","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i64"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1054:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1095:673"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2662:217-0:2796:1649":{"id":"a:2:2662:217-0:2796:1649","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgAction","id":"0:2796:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2513-0:4142:6457":{"id":"b:2:2513-0:4142:6457","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IdsRef","id":"0:4142:6457","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2516:2263"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1158:59":{"id":"0:1158:59","crate_id":0,"name":"default","span":{"filename":"src/builder/value_parser.rs","begin":[931,4],"end":[933,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1342":{"id":"0:1342","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[2178,0],"end":[2183,1]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ValueParserFactory","id":"0:1306:2175","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"u64"},"items":["0:1343:1667","0:1344:2151"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3605:5472":{"id":"0:3605:5472","crate_id":0,"name":"Value","span":{"filename":"src/builder/resettable.rs","begin":[34,4],"end":[34,12]},"visibility":"default","docs":"Overwrite builder value","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":{"tuple":["0:3607:1553"]},"discriminant":null}},"0:522:5057":{"id":"0:522:5057","crate_id":0,"name":"get_about","span":{"filename":"src/builder/command.rs","begin":[3280,4],"end":[3282,5]},"visibility":"public","docs":"Get the help message specified via [`Command::about`].\n\n[`Command::about`]: Command::about()","links":{"Command::about()":"0:458:1838"},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3835:2164":{"id":"0:3835:2164","crate_id":0,"name":"FalseyValueParser","span":{"filename":"src/builder/value_parser.rs","begin":[1713,0],"end":[1713,31]},"visibility":"public","docs":"Parse false-like string values, everything else is `true`\n\nSee also:\n- [`ValueParser::bool`] for assuming non-false is true\n- [`BoolishValueParser`] for different human readable bool representations\n\n# Example\n\nUsage:\n```rust\nlet mut cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"append\")\n            .value_parser(clap::builder::FalseyValueParser::new())\n            .required(true)\n    );\n\nlet m = cmd.try_get_matches_from_mut([\"cmd\", \"true\"]).unwrap();\nlet port: bool = *m.get_one(\"append\")\n    .expect(\"required\");\nassert_eq!(port, true);\n```\n\nSemantics:\n```rust\n# use std::ffi::OsStr;\n# use clap::builder::TypedValueParser;\n# let cmd = clap::Command::new(\"test\");\n# let arg = None;\nlet value_parser = clap::builder::FalseyValueParser::new();\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"random\")).unwrap(), true);\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"100\")).unwrap(), true);\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"\")).unwrap(), false);\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"false\")).unwrap(), false);\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"No\")).unwrap(), false);\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"oFF\")).unwrap(), false);\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"0\")).unwrap(), false);\n```","links":{"`ValueParser::bool`":"0:1072:366","`BoolishValueParser`":"0:3842:2162"},"attrs":["#[non_exhaustive]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":false}},"generics":{"params":[],"where_predicates":[]},"impls":["0:1251","a:2:7735:6524-0:3835:2164","a:2:2676:225-0:3835:2164","a:2:2662:217-0:3835:2164","a:2:2726:5340-0:3835:2164","a:2:7736:6523-0:3835:2164","b:2:2523-0:3835:2164","b:2:2238-0:3835:2164","b:2:2517-0:3835:2164","b:2:2513-0:3835:2164","b:2:2241-0:3835:2164","b:2:2528-0:3835:2164","b:2:3321-0:3835:2164","b:5:681-0:3835:2164","0:3836","0:3837","0:3839","0:1255","0:1259"]}},"b:2:2528-0:3704:1651":{"id":"b:2:2528-0:3704:1651","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:3704:1651","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2531:127","2:2532:1426"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1220:59":{"id":"0:1220:59","crate_id":0,"name":"default","span":{"filename":"src/builder/value_parser.rs","begin":[1408,4],"end":[1410,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:401:2396":{"id":"0:401:2396","crate_id":0,"name":"groups","span":{"filename":"src/builder/command.rs","begin":[358,4],"end":[363,5]},"visibility":"public","docs":"Adds multiple [`ArgGroup`]s to the [`Command`] at once.\n\n# Examples\n\n```no_run\n# use clap::{Command, arg, ArgGroup};\nCommand::new(\"cmd\")\n    .arg(arg!(\"--set-ver [ver] 'set the version manually'\"))\n    .arg(arg!(\"--major         'auto increase major'\"))\n    .arg(arg!(\"--minor         'auto increase minor'\"))\n    .arg(arg!(\"--patch         'auto increase patch'\"))\n    .arg(arg!(\"-c [FILE]       'a config file'\"))\n    .arg(arg!(\"-i [IFACE]      'an interface'\"))\n    .groups([\n        ArgGroup::new(\"vers\")\n            .args([\"set-ver\", \"major\", \"minor\",\"patch\"])\n            .required(true),\n        ArgGroup::new(\"input\")\n            .args([\"c\", \"i\"])\n    ])\n# ;\n```","links":{"`ArgGroup`":"0:3229:1653","`Command`":"0:3505:1650"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["groups",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7042:149","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3229:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}}}}]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl Into<ArgGroup>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3229:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}},{"name":"impl IntoIterator<Item = impl Into<ArgGroup>>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7042:149","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3229:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2513-0:3791:2170":{"id":"b:2:2513-0:3791:2170","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:3791:2170","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2516:2263"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:285:3639":{"id":"0:285:3639","crate_id":0,"name":"is_exclusive_set","span":{"filename":"src/builder/arg.rs","begin":[4040,4],"end":[4042,5]},"visibility":"public","docs":"Reports whether [`Arg::exclusive`] is set","links":{"`Arg::exclusive`":"0:168:2671"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11418:29175":{"id":"2:11418:29175","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:962":{"id":"0:962","crate_id":0,"name":null,"span":{"filename":"src/builder/str.rs","begin":[200,0],"end":[205,1]},"visibility":{"restricted":{"parent":"0:912:1352","path":"::builder::str"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2285:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"std::ffi::OsStr","id":"1:2029:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"items":["0:963:600"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:485:277":{"id":"0:485:277","crate_id":0,"name":"alias","span":{"filename":"src/builder/command.rs","begin":[2267,4],"end":[2274,5]},"visibility":"public","docs":"Sets a hidden alias to this subcommand.\n\nThis allows the subcommand to be accessed via *either* the original name, or this given\nalias. This is more efficient and easier than creating multiple hidden subcommands as one\nonly needs to check for the existence of this command, and not all aliased variants.\n\n**NOTE:** Aliases defined with this method are *hidden* from the help\nmessage. If you're looking for aliases that will be displayed in the help\nmessage, see [`Command::visible_alias`].\n\n**NOTE:** When using aliases and checking for the existence of a\nparticular subcommand within an [`ArgMatches`] struct, one only needs to\nsearch for the original name and not all aliases.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, };\nlet m = Command::new(\"myprog\")\n    .subcommand(Command::new(\"test\")\n        .alias(\"do-stuff\"))\n    .get_matches_from(vec![\"myprog\", \"do-stuff\"]);\nassert_eq!(m.subcommand_name(), Some(\"test\"));\n```\n[`Command::visible_alias`]: Command::visible_alias()","links":{"Command::visible_alias()":"0:492:2516","`ArgMatches`":"0:4112:1655"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["name",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl IntoResettable<Str>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1078:1440":{"id":"0:1078:1440","crate_id":0,"name":"type_id","span":{"filename":"src/builder/value_parser.rs","begin":[235,4],"end":[237,5]},"visibility":"public","docs":"Describes the content of `AnyValue`","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"AnyValueId","id":"0:4106:2265","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:217:3317":{"id":"0:217:3317","crate_id":0,"name":"default_value_if","span":{"filename":"src/builder/arg.rs","begin":[2749,4],"end":[2761,5]},"visibility":"public","docs":"Specifies the value of the argument if `arg` has been used at runtime.\n\nIf `default` is set to `None`, `default_value` will be removed.\n\n**NOTE:** This setting is perfectly compatible with [`Arg::default_value`] but slightly\ndifferent. `Arg::default_value` *only* takes effect when the user has not provided this arg\nat runtime. This setting however only takes effect when the user has not provided a value at\nruntime **and** these other conditions are met as well. If you have set `Arg::default_value`\nand `Arg::default_value_if`, and the user **did not** provide this arg at runtime, nor were\nthe conditions met for `Arg::default_value_if`, the `Arg::default_value` will be applied.\n\n**NOTE:** This implicitly sets [`Arg::action(ArgAction::Set)`].\n\n# Examples\n\nFirst we use the default value only if another arg is present at runtime.\n\n```rust\n# use clap::{Command, Arg, ArgAction};\n# use clap::builder::{ArgPredicate};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"flag\")\n        .long(\"flag\")\n        .action(ArgAction::SetTrue))\n    .arg(Arg::new(\"other\")\n        .long(\"other\")\n        .default_value_if(\"flag\", ArgPredicate::IsPresent, Some(\"default\")))\n    .get_matches_from(vec![\n        \"prog\", \"--flag\"\n    ]);\n\nassert_eq!(m.get_one::<String>(\"other\").unwrap(), \"default\");\n```\n\nNext we run the same test, but without providing `--flag`.\n\n```rust\n# use clap::{Command, Arg, ArgAction};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"flag\")\n        .long(\"flag\")\n        .action(ArgAction::SetTrue))\n    .arg(Arg::new(\"other\")\n        .long(\"other\")\n        .default_value_if(\"flag\", \"true\", Some(\"default\")))\n    .get_matches_from(vec![\n        \"prog\"\n    ]);\n\nassert_eq!(m.get_one::<String>(\"other\"), None);\n```\n\nNow lets only use the default value if `--opt` contains the value `special`.\n\n```rust\n# use clap::{Command, Arg, ArgAction};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"opt\")\n        .action(ArgAction::Set)\n        .long(\"opt\"))\n    .arg(Arg::new(\"other\")\n        .long(\"other\")\n        .default_value_if(\"opt\", \"special\", Some(\"default\")))\n    .get_matches_from(vec![\n        \"prog\", \"--opt\", \"special\"\n    ]);\n\nassert_eq!(m.get_one::<String>(\"other\").unwrap(), \"default\");\n```\n\nWe can run the same test and provide any value *other than* `special` and we won't get a\ndefault value.\n\n```rust\n# use clap::{Command, Arg, ArgAction};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"opt\")\n        .action(ArgAction::Set)\n        .long(\"opt\"))\n    .arg(Arg::new(\"other\")\n        .long(\"other\")\n        .default_value_if(\"opt\", \"special\", Some(\"default\")))\n    .get_matches_from(vec![\n        \"prog\", \"--opt\", \"hahaha\"\n    ]);\n\nassert_eq!(m.get_one::<String>(\"other\"), None);\n```\n\nIf we want to unset the default value for an Arg based on the presence or\nvalue of some other Arg.\n\n```rust\n# use clap::{Command, Arg, ArgAction};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"flag\")\n        .long(\"flag\")\n        .action(ArgAction::SetTrue))\n    .arg(Arg::new(\"other\")\n        .long(\"other\")\n        .default_value(\"default\")\n        .default_value_if(\"flag\", \"true\", None))\n    .get_matches_from(vec![\n        \"prog\", \"--flag\"\n    ]);\n\nassert_eq!(m.get_one::<String>(\"other\"), None);\n```\n[`Arg::action(ArgAction::Set)`]: Arg::action()\n[`Arg::default_value`]: Arg::default_value()","links":{"Arg::default_value()":"0:193:2260","Arg::action()":"0:176:1861"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["arg_id",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}],["predicate",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ArgPredicate","id":"0:3248:2155","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}],["default",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl Into<Id>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}},{"name":"impl Into<ArgPredicate>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ArgPredicate","id":"0:3248:2155","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}},{"name":"impl IntoResettable<OsStr>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1892":{"id":"0:1892","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1542,0],"end":[1546,1]},"visibility":{"restricted":{"parent":"0:1754:6526","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["nth_back","rfold","advance_back_by","try_rfold","rfind"],"trait":{"name":"DoubleEndedIterator","id":"2:7079:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawValues","id":"0:4174:6458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:1894:6920"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1775:6587":{"id":"0:1775:6587","crate_id":0,"name":"get_one","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[112,4],"end":[114,5]},"visibility":"public","docs":"Gets the value of a specific option or positional argument.\n\ni.e. an argument that [takes an additional value][crate::Arg::num_args] at runtime.\n\nReturns an error if the wrong type was used.\n\nReturns `None` if the option wasn't present.\n\n*NOTE:* This will always return `Some(value)` if [`default_value`] has been set.\n[`ArgMatches::value_source`] can be used to check if a value is present at runtime.\n\n# Panic\n\nIf the argument definition and access mismatch.  To handle this case programmatically, see\n[`ArgMatches::try_get_one`].\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, value_parser, ArgAction};\nlet m = Command::new(\"myapp\")\n    .arg(Arg::new(\"port\")\n        .value_parser(value_parser!(usize))\n        .action(ArgAction::Set)\n        .required(true))\n    .get_matches_from(vec![\"myapp\", \"2020\"]);\n\nlet port: usize = *m\n    .get_one(\"port\")\n    .expect(\"`port`is required\");\nassert_eq!(port, 2020);\n```\n[positional]: crate::Arg::index()\n[`default_value`]: crate::Arg::default_value()","links":{"crate::Arg::default_value()":"0:193:2260","`ArgMatches::value_source`":"0:1794:6527","crate::Arg::num_args":"0:178:1872","`ArgMatches::try_get_one`":"0:1809:6588"},"attrs":["#[track_caller]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Any","id":"2:3319:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:588:5157":{"id":"0:588:5157","crate_id":0,"name":"is_subcommand_required_set","span":{"filename":"src/builder/command.rs","begin":[3680,4],"end":[3682,5]},"visibility":"public","docs":"Report whether [`Command::subcommand_required`] is set","links":{"`Command::subcommand_required`":"0:501:4846"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:18":{"id":"0:18","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[115,70],"end":[115,80]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::derive::Subcommand","name":"Subcommand","id":"0:63:1668","glob":false}},"0:1217:673":{"id":"0:1217:673","crate_id":0,"name":"from","span":{"filename":"src/builder/value_parser.rs","begin":[1399,4],"end":[1404,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["range",{"kind":"generic","inner":"B"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2517-0:3229:1653":{"id":"b:2:2517-0:3229:1653","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3229:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2519:673"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:700":{"id":"0:700","crate_id":0,"name":null,"span":{"filename":"src/builder/command.rs","begin":[4675,0],"end":[4679,1]},"visibility":{"restricted":{"parent":"0:346:1834","path":"::builder::command"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Command","id":"0:3505:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Command","id":"0:3505:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:701:673"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:7735:6524-0:4151:6459":{"id":"a:2:7735:6524-0:4151:6459","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7735:6524","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:4151:6459","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"0:721":{"id":"0:721","crate_id":0,"name":null,"span":{"filename":"src/builder/os_str.rs","begin":[117,0],"end":[121,1]},"visibility":{"restricted":{"parent":"0:707:2145","path":"::builder::os_str"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"borrowed_ref","inner":{"lifetime":"'static","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"1:2029:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:722:673"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:575:5136":{"id":"0:575:5136","crate_id":0,"name":"is_disable_help_flag_set","span":{"filename":"src/builder/command.rs","begin":[3592,4],"end":[3594,5]},"visibility":"public","docs":"Report whether [`Command::disable_help_flag`] is set","links":{"`Command::disable_help_flag`":"0:445:4368"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:159:2521":{"id":"0:159:2521","crate_id":0,"name":"visible_short_alias","span":{"filename":"src/builder/arg.rs","begin":[376,4],"end":[384,5]},"visibility":"public","docs":"Add an alias, which functions as a visible short flag.\n\nLike [`Arg::short_alias`], except that they are visible inside the help message.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ArgAction};\nlet m = Command::new(\"prog\")\n            .arg(Arg::new(\"test\")\n                .long(\"test\")\n                .visible_short_alias('t')\n                .action(ArgAction::Set))\n       .get_matches_from(vec![\n            \"prog\", \"-t\", \"coffee\"\n        ]);\nassert_eq!(m.get_one::<String>(\"test\").unwrap(), \"coffee\");\n```","links":{"`Arg::short_alias`":"0:154:2489"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["name",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"char"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl IntoResettable<char>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"char"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2662:217-0:3229:1653":{"id":"a:2:2662:217-0:3229:1653","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3229:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1574":{"id":"0:1574","crate_id":0,"name":null,"span":{"filename":"src/error/mod.rs","begin":[38,0],"end":[38,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"error-context\")]"],"deprecation":null,"kind":"import","inner":{"source":"context::ContextKind","name":"ContextKind","id":"0:3929:6081","glob":false}},"0:1641:655":{"id":"0:1641:655","crate_id":0,"name":"fmt","span":{"filename":"src/error/mod.rs","begin":[763,4],"end":[765,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"std::fmt::Formatter","id":"2:8556:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"0:1578:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"std::fmt::Error","id":"2:49176:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7735:6524-0:3929:6081":{"id":"a:2:7735:6524-0:3929:6081","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7735:6524","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:3929:6081","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3993:6183":{"id":"0:3993:6183","crate_id":0,"name":"StyledStrs","span":{"filename":"src/error/context.rs","begin":[89,4],"end":[89,46]},"visibility":"default","docs":"many value","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":{"tuple":["0:3995:1553"]},"discriminant":null}},"0:3995:1553":{"id":"0:3995:1553","crate_id":0,"name":"0","span":{"filename":"src/error/context.rs","begin":[89,15],"end":[89,45]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:6400:240","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"crate::builder::StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},"0:698:183":{"id":"0:698:183","crate_id":0,"name":"Output","span":{"filename":"src/builder/command.rs","begin":[4668,4],"end":[4668,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3195:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:723":{"id":"0:723","crate_id":0,"name":null,"span":{"filename":"src/builder/os_str.rs","begin":[123,0],"end":[127,1]},"visibility":{"restricted":{"parent":"0:707:2145","path":"::builder::os_str"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'static","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:724:673"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:7735:6524-0:3505:1650":{"id":"a:2:7735:6524-0:3505:1650","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7735:6524","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Command","id":"0:3505:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"b:2:2241-0:3195:1652":{"id":"b:2:2241-0:3195:1652","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2235:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3195:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2243:26835"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:483:4019":{"id":"0:483:4019","crate_id":0,"name":"short_flag","span":{"filename":"src/builder/command.rs","begin":[2198,4],"end":[2201,5]},"visibility":"public","docs":"Sets the short version of the subcommand flag without the preceding `-`.\n\nAllows the subcommand to be used as if it were an [`Arg::short`].\n\n# Examples\n\n```\n# use clap::{Command, Arg, ArgAction};\nlet matches = Command::new(\"pacman\")\n    .subcommand(\n        Command::new(\"sync\").short_flag('S').arg(\n            Arg::new(\"search\")\n                .short('s')\n                .long(\"search\")\n                .action(ArgAction::SetTrue)\n                .help(\"search remote repositories for matching strings\"),\n        ),\n    )\n    .get_matches_from(vec![\"pacman\", \"-Ss\"]);\n\nassert_eq!(matches.subcommand_name().unwrap(), \"sync\");\nlet sync_matches = matches.subcommand_matches(\"sync\").unwrap();\nassert!(*sync_matches.get_one::<bool>(\"search\").expect(\"defaulted by clap\"));\n```\n[`Arg::short`]: Arg::short()","links":{"Arg::short()":"0:151:1863"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["short",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"char"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl IntoResettable<char>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"char"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2726:5340-0:1553:6083":{"id":"a:2:2726:5340-0:1553:6083","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2726:5340","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RichFormatter","id":"0:1553:6083","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3556":{"id":"0:3556","crate_id":0,"name":null,"span":{"filename":"src/builder/os_str.rs","begin":[7,29],"end":[7,38]},"visibility":{"restricted":{"parent":"0:707:2145","path":"::builder::os_str"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2672:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2513-0:4522:1658":{"id":"b:2:2513-0:4522:1658","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2516:2263"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:906":{"id":"0:906","crate_id":0,"name":null,"span":{"filename":"src/builder/resettable.rs","begin":[201,0],"end":[205,1]},"visibility":{"restricted":{"parent":"0:844:2148","path":"::builder::resettable"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"generic","inner":"I"},"items":["0:908:2452"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:200:3063":{"id":"0:200:3063","crate_id":0,"name":"default_missing_values","span":{"filename":"src/builder/arg.rs","begin":[1808,4],"end":[1810,5]},"visibility":"public","docs":"Value for the argument when the flag is present but no value is specified.\n\nSee [`Arg::default_missing_value`].\n\n[`Arg::default_missing_value`]: Arg::default_missing_value()","links":{"Arg::default_missing_value()":"0:198:2261"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["vals",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7042:149","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}}}}]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl Into<OsStr>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}},{"name":"impl IntoIterator<Item = impl Into<OsStr>>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7042:149","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11538:29205":{"id":"2:11538:29205","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4467:29205"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:50409:8067","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:546:5087":{"id":"0:546:5087","crate_id":0,"name":"get_subcommand_value_name","span":{"filename":"src/builder/command.rs","begin":[3396,4],"end":[3398,5]},"visibility":"public","docs":"Returns the subcommand value name.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3787:412":{"id":"0:3787:412","crate_id":0,"name":"clone","span":{"filename":"src/builder/value_parser.rs","begin":[1138,9],"end":[1138,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"PossibleValuesParser","id":"0:3783:2169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2523-0:4151:6459":{"id":"b:2:2523-0:4151:6459","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2493:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:4151:6459","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2526:127","2:2527:1427"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3832:412":{"id":"0:3832:412","crate_id":0,"name":"clone","span":{"filename":"src/builder/value_parser.rs","begin":[1612,15],"end":[1612,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"BoolValueParser","id":"0:3829:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2241-0:3571:1966":{"id":"b:2:2241-0:3571:1966","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2235:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:3571:1966","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2243:26835"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2676:225-0:3829:2161":{"id":"a:2:2676:225-0:3829:2161","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BoolValueParser","id":"0:3829:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3260:600":{"id":"0:3260:600","crate_id":0,"name":"eq","span":{"filename":"src/builder/arg_predicate.rs","begin":[6,23],"end":[6,32]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ArgPredicate","id":"0:3248:2155","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2523-0:3768:2163":{"id":"b:2:2523-0:3768:2163","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2493:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EnumValueParser","id":"0:3768:2163","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"items":["2:2526:127","2:2527:1427"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:223:3385":{"id":"0:223:3385","crate_id":0,"name":"required_unless_present_any","span":{"filename":"src/builder/arg.rs","begin":[3104,4],"end":[3110,5]},"visibility":"public","docs":"Sets this arg as [required] unless *any* of the specified arguments are present at runtime.\n\nIn other words, parsing will succeed only if user either\n* supplies the `self` arg.\n* supplies *one or more* of the `unless` arguments.\n\n**NOTE:** If you wish for this argument to be required unless *all of* these args are\npresent see [`Arg::required_unless_present_all`]\n\n# Examples\n\n```rust\n# use clap::Arg;\nArg::new(\"config\")\n    .required_unless_present_any([\"cfg\", \"dbg\"])\n# ;\n```\n\nSetting [`Arg::required_unless_present_any(names)`] requires that the argument be used at runtime\n*unless* *at least one of* the args in `names` are present. In the following example, the\nrequired argument is *not* provided, but it's not an error because one the `unless` args\nhave been supplied.\n\n```rust\n# use clap::{Command, Arg, ArgAction};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .required_unless_present_any([\"dbg\", \"infile\"])\n        .action(ArgAction::Set)\n        .long(\"config\"))\n    .arg(Arg::new(\"dbg\")\n        .long(\"debug\")\n        .action(ArgAction::SetTrue))\n    .arg(Arg::new(\"infile\")\n        .short('i')\n        .action(ArgAction::Set))\n    .try_get_matches_from(vec![\n        \"prog\", \"--debug\"\n    ]);\n\nassert!(res.is_ok());\n```\n\nSetting [`Arg::required_unless_present_any(names)`] and *not* supplying *at least one of* `names`\nor this arg is an error.\n\n```rust\n# use clap::{Command, Arg, error::ErrorKind, ArgAction};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .required_unless_present_any([\"dbg\", \"infile\"])\n        .action(ArgAction::Set)\n        .long(\"config\"))\n    .arg(Arg::new(\"dbg\")\n        .long(\"debug\")\n        .action(ArgAction::SetTrue))\n    .arg(Arg::new(\"infile\")\n        .short('i')\n        .action(ArgAction::Set))\n    .try_get_matches_from(vec![\n        \"prog\"\n    ]);\n\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind(), ErrorKind::MissingRequiredArgument);\n```\n[required]: Arg::required()\n[`Arg::required_unless_present_any(names)`]: Arg::required_unless_present_any()\n[`Arg::required_unless_present_all`]: Arg::required_unless_present_all()","links":{"Arg::required()":"0:166:1870","Arg::required_unless_present_all()":"0:222:3370","Arg::required_unless_present_any()":"0:223:3385"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["names",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7042:149","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}}}}]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl Into<Id>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}},{"name":"impl IntoIterator<Item = impl Into<Id>>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7042:149","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4042:6217":{"id":"0:4042:6217","crate_id":0,"name":"Format","span":{"filename":"src/error/kind.rs","begin":[312,4],"end":[312,10]},"visibility":"default","docs":"Represents a [Format error] (which is a part of [`Display`]).\nTypically caused by writing to `stderr` or `stdout`.\n\n[`Display`]: std::fmt::Display\n[Format error]: std::fmt::Error","links":{"std::fmt::Display":"2:8601:119","std::fmt::Error":"2:49176:127"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"0:2744":{"id":"0:2744","crate_id":0,"name":null,"span":{"filename":"src/util/id.rs","begin":[107,0],"end":[112,1]},"visibility":{"restricted":{"parent":"0:2715:1860","path":"::util::id"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2232:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2745:5354"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3750":{"id":"0:3750","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[849,9],"end":[849,13]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2674:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StringValueParser","id":"0:3749:2172","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:952":{"id":"0:952","crate_id":0,"name":null,"span":{"filename":"src/builder/str.rs","begin":[168,0],"end":[173,1]},"visibility":{"restricted":{"parent":"0:912:1352","path":"::builder::str"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2285:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:953:600"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3577:655":{"id":"0:3577:655","crate_id":0,"name":"fmt","span":{"filename":"src/builder/possible_value.rs","begin":[34,9],"end":[34,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:8556:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8545:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1573":{"id":"0:1573","crate_id":0,"name":null,"span":{"filename":"src/error/mod.rs","begin":[35,0],"end":[35,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"kind::ErrorKind","name":"ErrorKind","id":"0:4009:3985","glob":false}},"0:3964":{"id":"0:3964","crate_id":0,"name":null,"span":{"filename":"src/error/context.rs","begin":[2,9],"end":[2,13]},"visibility":{"restricted":{"parent":"0:1533:479","path":"::error::context"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2674:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:3929:6081","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:868":{"id":"0:868","crate_id":0,"name":null,"span":{"filename":"src/builder/resettable.rs","begin":[87,0],"end":[94,1]},"visibility":{"restricted":{"parent":"0:844:2148","path":"::builder::resettable"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ArgAction","id":"0:2796:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ArgAction","id":"0:2796:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:869:2452"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4092:6515":{"id":"0:4092:6515","crate_id":0,"name":"Downcast","span":{"filename":"src/parser/error.rs","begin":[8,4],"end":[13,5]},"visibility":"default","docs":"Failed to downcast `AnyValue` to the specified type","links":{},"attrs":["#[non_exhaustive]"],"deprecation":null,"kind":"variant","inner":{"kind":{"struct":{"fields":["0:4093:6517","0:4094:612"],"fields_stripped":false}},"discriminant":null}},"0:1502":{"id":"0:1502","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[54,0],"end":[54,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"value_parser::ValueParserFactory","name":"ValueParserFactory","id":"0:1306:2175","glob":false}},"a:2:2676:225-0:3195:1652":{"id":"a:2:2676:225-0:3195:1652","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3195:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:7735:6524-0:3835:2164":{"id":"a:2:7735:6524-0:3835:2164","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7735:6524","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FalseyValueParser","id":"0:3835:2164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4181":{"id":"0:4181","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1524,16],"end":[1524,21]},"visibility":{"restricted":{"parent":"0:1754:6526","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8596:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawValues","id":"0:4174:6458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:4183:655"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1490":{"id":"0:1490","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[42,0],"end":[42,38]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"value_parser::EnumValueParser","name":"EnumValueParser","id":"0:3768:2163","glob":false}},"b:5:681-0:4009:3985":{"id":"b:5:681-0:4009:3985","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:677:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4009:3985","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:683:5351","5:684:3662","5:685:8969"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:946":{"id":"0:946","crate_id":0,"name":null,"span":{"filename":"src/builder/str.rs","begin":[148,0],"end":[153,1]},"visibility":{"restricted":{"parent":"0:912:1352","path":"::builder::str"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2232:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:947:5354"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2238-0:4161:6460":{"id":"b:2:2238-0:4161:6460","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2232:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValuesRef","id":"0:4161:6460","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2240:5354"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3591":{"id":"0:3591","crate_id":0,"name":null,"span":{"filename":"src/builder/range.rs","begin":[2,9],"end":[2,13]},"visibility":{"restricted":{"parent":"0:807:2147","path":"::builder::range"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2674:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueRange","id":"0:3588:2156","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2726:5340-0:3810:2171":{"id":"a:2:2726:5340-0:3810:2171","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:2726:5340","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2726:5340","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangedU64ValueParser","id":"0:3810:2171","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1857:6919":{"id":"0:1857:6919","crate_id":0,"name":"size_hint","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1419,4],"end":[1421,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3662:1951":{"id":"0:3662:1951","crate_id":0,"name":"StyledStr","span":{"filename":"src/builder/styled_str.rs","begin":[6,0],"end":[11,1]},"visibility":"public","docs":"Terminal-styling container\n\nFor now, this is the same as a [`Str`][crate::builder::Str].  This exists to reserve space in\nthe API for exposing terminal styling.","links":{"crate::builder::Str":"0:3638:2154"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:987","a:2:7735:6524-0:3662:1951","a:2:2676:225-0:3662:1951","a:2:2662:217-0:3662:1951","a:2:2726:5340-0:3662:1951","a:2:7736:6523-0:3662:1951","b:2:2523-0:3662:1951","b:2:2238-0:3662:1951","b:2:2517-0:3662:1951","b:2:2513-0:3662:1951","b:2:2241-0:3662:1951","b:2:2528-0:3662:1951","b:2:3321-0:3662:1951","b:5:5352-0:3662:1951","b:5:681-0:3662:1951","0:874","0:900","0:3664","0:3666","0:3668","0:3670","0:3671","0:3673","0:3674","0:1016","0:1019","0:1021","0:1023","0:1025","0:1027","0:1029","0:1033"]}},"b:2:2517-0:3978:6082":{"id":"b:2:2517-0:3978:6082","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextValue","id":"0:3978:6082","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2519:673"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2241-0:3791:2170":{"id":"b:2:2241-0:3791:2170","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2235:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:3791:2170","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2243:26835"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:577:5140":{"id":"0:577:5140","crate_id":0,"name":"is_disable_colored_help_set","span":{"filename":"src/builder/command.rs","begin":[3602,4],"end":[3604,5]},"visibility":"public","docs":"Report whether [`Command::disable_colored_help`] is set","links":{"`Command::disable_colored_help`":"0:447:4379"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3855:412":{"id":"0:3855:412","crate_id":0,"name":"clone","span":{"filename":"src/builder/value_parser.rs","begin":[1897,15],"end":[1897,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"NonEmptyStringValueParser","id":"0:3852:2166","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2523-0:3842:2162":{"id":"b:2:2523-0:3842:2162","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2493:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BoolishValueParser","id":"0:3842:2162","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2526:127","2:2527:1427"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2676:225-0:3588:2156":{"id":"a:2:2676:225-0:3588:2156","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueRange","id":"0:3588:2156","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:160:2528":{"id":"0:160:2528","crate_id":0,"name":"visible_aliases","span":{"filename":"src/builder/arg.rs","begin":[406,4],"end":[410,5]},"visibility":"public","docs":"Add aliases, which function as visible long flags.\n\nLike [`Arg::aliases`], except that they are visible inside the help message.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ArgAction};\nlet m = Command::new(\"prog\")\n            .arg(Arg::new(\"test\")\n                .long(\"test\")\n                .action(ArgAction::SetTrue)\n                .visible_aliases([\"something\", \"awesome\", \"cool\"]))\n       .get_matches_from(vec![\n            \"prog\", \"--awesome\"\n        ]);\nassert_eq!(*m.get_one::<bool>(\"test\").expect(\"defaulted by clap\"), true);\n```\n[`Command::aliases`]: Arg::aliases()","links":{"`Arg::aliases`":"0:155:2402"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["names",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7042:149","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}}}}]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl Into<Str>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}},{"name":"impl IntoIterator<Item = impl Into<Str>>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7042:149","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:400:3282":{"id":"0:400:3282","crate_id":0,"name":"group","span":{"filename":"src/builder/command.rs","begin":[330,4],"end":[333,5]},"visibility":"public","docs":"Adds an [`ArgGroup`] to the application.\n\n[`ArgGroup`]s are a family of related arguments.\nBy placing them in a logical group, you can build easier requirement and exclusion rules.\n\nExample use cases:\n- Make an entire [`ArgGroup`] required, meaning that one (and *only*\n  one) argument from that group must be present at runtime.\n- Name an [`ArgGroup`] as a conflict to another argument.\n  Meaning any of the arguments that belong to that group will cause a failure if present with\n  the conflicting argument.\n- Ensure exclusion between arguments.\n- Extract a value from a group instead of determining exactly which argument was used.\n\n# Examples\n\nThe following example demonstrates using an [`ArgGroup`] to ensure that one, and only one,\nof the arguments from the specified group is present at runtime.\n\n```no_run\n# use clap::{Command, arg, ArgGroup};\nCommand::new(\"cmd\")\n    .arg(arg!(\"--set-ver [ver] 'set the version manually'\"))\n    .arg(arg!(\"--major 'auto increase major'\"))\n    .arg(arg!(\"--minor 'auto increase minor'\"))\n    .arg(arg!(\"--patch 'auto increase patch'\"))\n    .group(ArgGroup::new(\"vers\")\n         .args([\"set-ver\", \"major\", \"minor\",\"patch\"])\n         .required(true))\n# ;\n```","links":{"`ArgGroup`":"0:3229:1653"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["group",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3229:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl Into<ArgGroup>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3229:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4117":{"id":"0:4117","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[65,9],"end":[65,14]},"visibility":{"restricted":{"parent":"0:1754:6526","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8596:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4112:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4118:655"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2238-0:4151:6459":{"id":"b:2:2238-0:4151:6459","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2232:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:4151:6459","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2240:5354"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4097:412":{"id":"0:4097:412","crate_id":0,"name":"clone","span":{"filename":"src/parser/error.rs","begin":[2,9],"end":[2,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4091:6463","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:556:5102":{"id":"0:556:5102","crate_id":0,"name":"get_arguments","span":{"filename":"src/builder/command.rs","begin":[3454,4],"end":[3456,5]},"visibility":"public","docs":"Iterate through the set of arguments.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:7156:156","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3195:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}}]}}},"generic_params":[],"modifier":"none"}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:517:5047":{"id":"0:517:5047","crate_id":0,"name":"get_version","span":{"filename":"src/builder/command.rs","begin":[3248,4],"end":[3250,5]},"visibility":"public","docs":"Get the version of the cmd.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1581:127":{"id":"0:1581:127","crate_id":0,"name":"Error","span":{"filename":"src/error/mod.rs","begin":[59,0],"end":[62,1]},"visibility":"public","docs":"Command Line Argument Parser Error\n\nSee [`Command::error`] to create an error.\n\n[`Command::error`]: crate::Command::error","links":{"crate::Command::error":"0:406:1662"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ErrorFormatter","id":"0:1547:6079","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"kind":"resolved_path","inner":{"name":"DefaultFormatter","id":"0:1553:6083","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:1585","a:2:7735:6524-0:1581:127","a:2:2676:225-0:1581:127","a:2:2662:217-0:1581:127","a:2:2726:5340-0:1581:127","a:2:7736:6523-0:1581:127","b:2:2523-0:1581:127","b:2:2238-0:1581:127","b:2:2517-0:1581:127","b:2:2513-0:1581:127","b:2:2241-0:1581:127","b:2:2528-0:1581:127","b:2:2585-0:1581:127","b:2:3321-0:1581:127","b:5:5352-0:1581:127","0:1633","0:1636","0:1639","0:1642","0:1646"]}},"b:5:5352-0:4091:6463":{"id":"b:5:5352-0:4091:6463","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:8601:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5350:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4091:6463","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5354:1406"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:178:1872":{"id":"0:178:1872","crate_id":0,"name":"num_args","span":{"filename":"src/builder/arg.rs","begin":[1095,4],"end":[1098,5]},"visibility":"public","docs":"Specifies the number of arguments parsed per occurrence\n\nFor example, if you had a `-f <file>` argument where you wanted exactly 3 'files' you would\nset `.num_args(3)`, and this argument wouldn't be satisfied unless the user\nprovided 3 and only 3 values.\n\nUsers may specify values for arguments in any of the following methods\n\n- Using a space such as `-o value` or `--option value`\n- Using an equals and no space such as `-o=value` or `--option=value`\n- Use a short and no space such as `-ovalue`\n\n**WARNING:**\n\nSetting a variable number of values (e.g. `1..=10`) for an argument without\nother details can be dangerous in some circumstances. Because multiple values are\nallowed, `--option val1 val2 val3` is perfectly valid. Be careful when designing a CLI\nwhere **positional arguments** or **subcommands** are *also* expected as `clap` will continue\nparsing *values* until one of the following happens:\n\n- It reaches the maximum number of values\n- It reaches a specific number of values\n- It finds another flag or option (i.e. something that starts with a `-`)\n- It reaches the [`Arg::value_terminator`] if set\n\nAlternatively,\n- Use a delimiter between values with [Arg::value_delimiter]\n- Require a flag occurrence per value with [`ArgAction::Append`]\n- Require positional arguments to appear after `--` with [`Arg::last`]\n\n# Examples\n\nOption:\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"mode\")\n        .long(\"mode\")\n        .num_args(1))\n    .get_matches_from(vec![\n        \"prog\", \"--mode\", \"fast\"\n    ]);\n\nassert_eq!(m.get_one::<String>(\"mode\").unwrap(), \"fast\");\n```\n\nFlag/option hybrid (see also [default_missing_value][Arg::default_missing_value])\n```rust\n# use clap::{Command, Arg, error::ErrorKind, ArgAction};\nlet cmd = Command::new(\"prog\")\n    .arg(Arg::new(\"mode\")\n        .long(\"mode\")\n        .default_missing_value(\"slow\")\n        .default_value(\"plaid\")\n        .num_args(0..=1));\n\nlet m = cmd.clone()\n    .get_matches_from(vec![\n        \"prog\", \"--mode\", \"fast\"\n    ]);\nassert_eq!(m.get_one::<String>(\"mode\").unwrap(), \"fast\");\n\nlet m = cmd.clone()\n    .get_matches_from(vec![\n        \"prog\", \"--mode\",\n    ]);\nassert_eq!(m.get_one::<String>(\"mode\").unwrap(), \"slow\");\n\nlet m = cmd.clone()\n    .get_matches_from(vec![\n        \"prog\",\n    ]);\nassert_eq!(m.get_one::<String>(\"mode\").unwrap(), \"plaid\");\n```\n\nTuples\n```rust\n# use clap::{Command, Arg, error::ErrorKind, ArgAction};\nlet cmd = Command::new(\"prog\")\n    .arg(Arg::new(\"file\")\n        .action(ArgAction::Set)\n        .num_args(2)\n        .short('F'));\n\nlet m = cmd.clone()\n    .get_matches_from(vec![\n        \"prog\", \"-F\", \"in-file\", \"out-file\"\n    ]);\nassert_eq!(\n    m.get_many::<String>(\"file\").unwrap_or_default().map(|v| v.as_str()).collect::<Vec<_>>(),\n    vec![\"in-file\", \"out-file\"]\n);\n\nlet res = cmd.clone()\n    .try_get_matches_from(vec![\n        \"prog\", \"-F\", \"file1\"\n    ]);\nassert_eq!(res.unwrap_err().kind(), ErrorKind::WrongNumberOfValues);\n```\n\nA common mistake is to define an option which allows multiple values and a positional\nargument.\n```rust\n# use clap::{Command, Arg, ArgAction};\nlet cmd = Command::new(\"prog\")\n    .arg(Arg::new(\"file\")\n        .action(ArgAction::Set)\n        .num_args(0..)\n        .short('F'))\n    .arg(Arg::new(\"word\"));\n\nlet m = cmd.clone().get_matches_from(vec![\n    \"prog\", \"-F\", \"file1\", \"file2\", \"file3\", \"word\"\n]);\nlet files: Vec<_> = m.get_many::<String>(\"file\").unwrap().collect();\nassert_eq!(files, [\"file1\", \"file2\", \"file3\", \"word\"]); // wait...what?!\nassert!(!m.contains_id(\"word\")); // but we clearly used word!\n\n// but this works\nlet m = cmd.clone().get_matches_from(vec![\n    \"prog\", \"word\", \"-F\", \"file1\", \"file2\", \"file3\",\n]);\nlet files: Vec<_> = m.get_many::<String>(\"file\").unwrap().collect();\nassert_eq!(files, [\"file1\", \"file2\", \"file3\"]);\nassert_eq!(m.get_one::<String>(\"word\").unwrap(), \"word\");\n```\nThe problem is `clap` doesn't know when to stop parsing values for \"file\".\n\nA solution for the example above is to limit how many values with a maximum, or specific\nnumber, or to say [`ArgAction::Append`] is ok, but multiple values are not.\n```rust\n# use clap::{Command, Arg, ArgAction};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"file\")\n        .action(ArgAction::Append)\n        .short('F'))\n    .arg(Arg::new(\"word\"))\n    .get_matches_from(vec![\n        \"prog\", \"-F\", \"file1\", \"-F\", \"file2\", \"-F\", \"file3\", \"word\"\n    ]);\n\nlet files: Vec<_> = m.get_many::<String>(\"file\").unwrap().collect();\nassert_eq!(files, [\"file1\", \"file2\", \"file3\"]);\nassert_eq!(m.get_one::<String>(\"word\").unwrap(), \"word\");\n```","links":{"`ArgAction::Append`":"0:2799:1857","Arg::value_delimiter":"0:189:2942","Arg::default_missing_value":"0:198:2261","`Arg::last`":"0:165:2624","`Arg::value_terminator`":"0:190:2967"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["qty",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ValueRange","id":"0:3588:2156","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl IntoResettable<ValueRange>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ValueRange","id":"0:3588:2156","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:905:2452":{"id":"0:905:2452","crate_id":0,"name":"into_resettable","span":{"filename":"src/builder/resettable.rs","begin":[196,4],"end":[198,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Resettable","id":"0:3603:2158","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2737:673":{"id":"0:2737:673","crate_id":0,"name":"from","span":{"filename":"src/util/id.rs","begin":[81,4],"end":[83,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["name",{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:506:4931":{"id":"0:506:4931","crate_id":0,"name":"subcommand_negates_reqs","span":{"filename":"src/builder/command.rs","begin":[2948,4],"end":[2954,5]},"visibility":"public","docs":"Allows [`subcommands`] to override all requirements of the parent command.\n\nFor example, if you had a subcommand or top level application with a required argument\nthat is only required as long as there is no subcommand present,\nusing this setting would allow you to set those arguments to [`Arg::required(true)`]\nand yet receive no error so long as the user uses a valid subcommand instead.\n\n**NOTE:** This defaults to false (using subcommand does *not* negate requirements)\n\n# Examples\n\nThis first example shows that it is an error to not use a required argument\n\n```rust\n# use clap::{Command, Arg, error::ErrorKind};\nlet err = Command::new(\"myprog\")\n    .subcommand_negates_reqs(true)\n    .arg(Arg::new(\"opt\").required(true))\n    .subcommand(Command::new(\"test\"))\n    .try_get_matches_from(vec![\n        \"myprog\"\n    ]);\nassert!(err.is_err());\nassert_eq!(err.unwrap_err().kind(), ErrorKind::MissingRequiredArgument);\n# ;\n```\n\nThis next example shows that it is no longer error to not use a required argument if a\nvalid subcommand is used.\n\n```rust\n# use clap::{Command, Arg, error::ErrorKind};\nlet noerr = Command::new(\"myprog\")\n    .subcommand_negates_reqs(true)\n    .arg(Arg::new(\"opt\").required(true))\n    .subcommand(Command::new(\"test\"))\n    .try_get_matches_from(vec![\n        \"myprog\", \"test\"\n    ]);\nassert!(noerr.is_ok());\n# ;\n```\n\n[`Arg::required(true)`]: crate::Arg::required()\n[`subcommands`]: crate::Command::subcommand()","links":{"crate::Command::subcommand()":"0:402:4142","crate::Arg::required()":"0:166:1870"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2241-0:3762:2168":{"id":"b:2:2241-0:3762:2168","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2235:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PathBufValueParser","id":"0:3762:2168","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2243:26835"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:66:2107":{"id":"0:66:2107","crate_id":0,"name":"has_subcommand","span":{"filename":"src/derive.rs","begin":[342,4],"end":[342,42]},"visibility":"default","docs":"Test whether `Self` can parse a specific subcommand","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1644:6088":{"id":"0:1644:6088","crate_id":0,"name":"source","span":{"filename":"src/error/mod.rs","begin":[770,4],"end":[772,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(trivial_casts)]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"error::Error","id":"2:2578:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:793:5044":{"id":"0:793:5044","crate_id":0,"name":"get_name","span":{"filename":"src/builder/possible_value.rs","begin":[149,4],"end":[151,5]},"visibility":"public","docs":"Get the name of the argument value","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:279:3623":{"id":"0:279:3623","crate_id":0,"name":"is_hide_set","span":{"filename":"src/builder/arg.rs","begin":[3998,4],"end":[4000,5]},"visibility":"public","docs":"Report whether [`Arg::hide`] is set","links":{"`Arg::hide`":"0:209:3217"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1227":{"id":"0:1227","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1535,0],"end":[1592,1]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"std::convert::TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"name":"std::convert::TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"},{"trait_bound":{"trait":{"name":"std::error::Error","id":"2:2578:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"ToString","id":"5:5350:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["map","possible_values","parse","try_map"],"trait":{"name":"TypedValueParser","id":"0:1125:2173","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangedU64ValueParser","id":"0:3810:2171","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:1229:5472","0:1230:5682"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4150:655":{"id":"0:4150:655","crate_id":0,"name":"fmt","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1363,16],"end":[1363,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:8556:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8545:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7736:6523-0:3571:1966":{"id":"a:2:7736:6523-0:3571:1966","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7736:6523","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:3571:1966","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:684:3662":{"id":"5:684:3662","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3757":{"id":"0:3757","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[897,9],"end":[897,13]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2674:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsStringValueParser","id":"0:3756:2167","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:262:3578":{"id":"0:262:3578","crate_id":0,"name":"get_value_terminator","span":{"filename":"src/builder/arg.rs","begin":[3864,4],"end":[3866,5]},"visibility":"public","docs":"Get the value terminator for this argument. The value_terminator is a value\nthat terminates parsing of multi-valued arguments.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1498":{"id":"0:1498","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[50,0],"end":[50,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"value_parser::RangedU64ValueParser","name":"RangedU64ValueParser","id":"0:3810:2171","glob":false}},"b:2:3321-0:1054:2174":{"id":"b:2:3321-0:1054:2174","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3319:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1054:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3323:1440"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3767:655":{"id":"0:3767:655","crate_id":0,"name":"fmt","span":{"filename":"src/builder/value_parser.rs","begin":[939,22],"end":[939,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:8556:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8545:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2742":{"id":"0:2742","crate_id":0,"name":null,"span":{"filename":"src/util/id.rs","begin":[100,0],"end":[105,1]},"visibility":{"restricted":{"parent":"0:2715:1860","path":"::util::id"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"2:2481:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2743:310"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2513-0:4161:6460":{"id":"b:2:2513-0:4161:6460","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValuesRef","id":"0:4161:6460","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2516:2263"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2513-0:3603:2158":{"id":"b:2:2513-0:3603:2158","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Resettable","id":"0:3603:2158","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2516:2263"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:5101:7469":{"id":"5:5101:7469","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:6967:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6967:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:833:673":{"id":"0:833:673","crate_id":0,"name":"from","span":{"filename":"src/builder/range.rs","begin":[142,4],"end":[146,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["range",{"kind":"resolved_path","inner":{"name":"std::ops::RangeFrom","id":"2:46481:196","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3600":{"id":"0:3600","crate_id":0,"name":null,"span":{"filename":"src/builder/range.rs","begin":[2,37],"end":[2,41]},"visibility":{"restricted":{"parent":"0:807:2147","path":"::builder::range"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:8819:140","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueRange","id":"0:3588:2156","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3601:707"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2662:217-0:3749:2172":{"id":"a:2:2662:217-0:3749:2172","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StringValueParser","id":"0:3749:2172","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2241-0:3229:1653":{"id":"b:2:2241-0:3229:1653","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2235:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3229:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2243:26835"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3254":{"id":"0:3254","crate_id":0,"name":null,"span":{"filename":"src/builder/arg_predicate.rs","begin":[6,9],"end":[6,14]},"visibility":{"restricted":{"parent":"0:335:2143","path":"::builder::arg_predicate"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgPredicate","id":"0:3248:2155","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3255:412"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3952:6211":{"id":"0:3952:6211","crate_id":0,"name":"SuggestedArg","span":{"filename":"src/error/context.rs","begin":[29,4],"end":[29,16]},"visibility":"default","docs":"Potential fix for the user","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"b:2:2238-0:3768:2163":{"id":"b:2:2238-0:3768:2163","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2232:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EnumValueParser","id":"0:3768:2163","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"items":["2:2240:5354"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:5:681-0:4161:6460":{"id":"b:5:681-0:4161:6460","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:677:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValuesRef","id":"0:4161:6460","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["5:683:5351","5:684:3662","5:685:8969"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:201:3058":{"id":"0:201:3058","crate_id":0,"name":"default_missing_values_os","span":{"filename":"src/builder/arg.rs","begin":[1820,4],"end":[1826,5]},"visibility":"public","docs":"Value for the argument when the flag is present but no value is specified.\n\nSee [`Arg::default_missing_values`].\n\n[`Arg::default_missing_values`]: Arg::default_missing_values()\n[`OsStr`]: std::ffi::OsStr","links":{"Arg::default_missing_values()":"0:200:3063"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["vals",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7042:149","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}}}}]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl Into<OsStr>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}},{"name":"impl IntoIterator<Item = impl Into<OsStr>>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7042:149","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:195:3008":{"id":"0:195:3008","crate_id":0,"name":"default_values","span":{"filename":"src/builder/arg.rs","begin":[1673,4],"end":[1676,5]},"visibility":"public","docs":"Value for the argument when not present.\n\nSee [`Arg::default_value`].\n\n[`Arg::default_value`]: Arg::default_value()","links":{"Arg::default_value()":"0:193:2260"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["vals",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7042:149","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}}}}]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl Into<OsStr>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}},{"name":"impl IntoIterator<Item = impl Into<OsStr>>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7042:149","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2526:127":{"id":"2:2526:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"0:3717:5579":{"id":"0:3717:5579","crate_id":0,"name":"CommandName","span":{"filename":"src/builder/value_hint.rs","begin":[44,4],"end":[44,15]},"visibility":"default","docs":"Name of a command, without arguments. May be relative to PATH, or full path to executable.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"0:3758":{"id":"0:3758","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[897,15],"end":[897,20]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsStringValueParser","id":"0:3756:2167","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3759:412"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1501":{"id":"0:1501","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[53,0],"end":[53,34]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"value_parser::ValueParser","name":"ValueParser","id":"0:1054:2174","glob":false}},"a:2:2676:225-0:3248:2155":{"id":"a:2:2676:225-0:3248:2155","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgPredicate","id":"0:3248:2155","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3665:412":{"id":"0:3665:412","crate_id":0,"name":"clone","span":{"filename":"src/builder/styled_str.rs","begin":[5,9],"end":[5,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11446:29186":{"id":"2:11446:29186","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:50402:8057","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1233":{"id":"0:1233","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1594,0],"end":[1601,1]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"std::convert::TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"2:3084:5446","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangedU64ValueParser","id":"0:3810:2171","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:1236:673"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1319:1667":{"id":"0:1319:1667","crate_id":0,"name":"Parser","span":{"filename":"src/builder/value_parser.rs","begin":[2119,4],"end":[2119,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1054:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:390:1849":{"id":"0:390:1849","crate_id":0,"name":"arg","span":{"filename":"src/builder/command.rs","begin":[165,4],"end":[169,5]},"visibility":"public","docs":"Adds an [argument] to the list of valid possibilities.\n\n# Examples\n\n```no_run\n# use clap::{Command, arg, Arg};\nCommand::new(\"myprog\")\n    // Adding a single \"flag\" argument with a short and help text, using Arg::new()\n    .arg(\n        Arg::new(\"debug\")\n           .short('d')\n           .help(\"turns on debugging mode\")\n    )\n    // Adding a single \"option\" argument with a short, a long, and help text using the less\n    // verbose Arg::from()\n    .arg(\n        arg!(-c --config <CONFIG> \"Optionally sets a config file to use\")\n    )\n# ;\n```\n[argument]: Arg","links":{"Arg":"0:3195:1652"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["a",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3195:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl Into<Arg>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3195:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2238-0:4009:3985":{"id":"b:2:2238-0:4009:3985","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2232:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4009:3985","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2240:5354"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:510":{"id":"0:510","crate_id":0,"name":null,"span":{"filename":"src/builder/command.rs","begin":[3210,0],"end":[3732,1]},"visibility":{"restricted":{"parent":"0:346:1834","path":"::builder::command"}},"docs":"# Reflection","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Command","id":"0:3505:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:512:5039","0:513:5040","0:514:5042","0:515:5044","0:517:5047","0:518:5049","0:519:5051","0:520:5053","0:521:5055","0:522:5057","0:523:5059","0:524:5062","0:525:3556","0:528:5066","0:531:5068","0:534:3558","0:536:5071","0:538:5073","0:541:5075","0:542:5078","0:543:5080","0:544:5083","0:545:5085","0:546:5087","0:547:5088","0:548:5089","0:549:5090","0:550:5091","0:551:5094","0:553:5098","0:555:5100","0:556:5102","0:557:5104","0:559:5106","0:561:5113","0:569:5125","0:571:5129","0:572:5131","0:573:5133","0:574:3621","0:575:5136","0:576:5138","0:577:5140","0:582:5149","0:586:5154","0:587:3623","0:588:5157","0:589:5159","0:590:5163","0:592:5166","0:594:5169","0:595:5171","0:596:5173"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1500":{"id":"0:1500","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[52,0],"end":[52,39]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"value_parser::TypedValueParser","name":"TypedValueParser","id":"0:1125:2173","glob":false}},"b:2:2238-0:1581:127":{"id":"b:2:2238-0:1581:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2232:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1581:127","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["2:2240:5354"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4038:6132":{"id":"0:4038:6132","crate_id":0,"name":"DisplayVersion","span":{"filename":"src/error/kind.rs","begin":[299,4],"end":[299,18]},"visibility":"default","docs":"Not a true \"error\" as it means `--version` or similar was used.\nThe message will be sent to `stdout`.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, error::ErrorKind};\nlet result = Command::new(\"prog\")\n    .version(\"3.0\")\n    .try_get_matches_from(vec![\"prog\", \"--version\"]);\nassert!(result.is_err());\nassert_eq!(result.unwrap_err().kind(), ErrorKind::DisplayVersion);\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"0:2738":{"id":"0:2738","crate_id":0,"name":null,"span":{"filename":"src/util/id.rs","begin":[86,0],"end":[91,1]},"visibility":{"restricted":{"parent":"0:2715:1860","path":"::util::id"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:8601:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2739:655"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:749:600":{"id":"0:749:600","crate_id":0,"name":"eq","span":{"filename":"src/builder/os_str.rs","begin":[205,4],"end":[207,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:685:8969":{"id":"5:685:8969","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7736:6523-0:3756:2167":{"id":"a:2:7736:6523-0:3756:2167","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7736:6523","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsStringValueParser","id":"0:3756:2167","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3246":{"id":"0:3246","crate_id":0,"name":null,"span":{"filename":"src/builder/arg_group.rs","begin":[85,43],"end":[85,45]},"visibility":{"restricted":{"parent":"0:314:2142","path":"::builder::arg_group"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2290:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3229:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:861:2157":{"id":"0:861:2157","crate_id":0,"name":"IntoResettable","span":{"filename":"src/builder/resettable.rs","begin":[64,0],"end":[67,1]},"visibility":"public","docs":"Convert to the intended resettable type","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:863:2452"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":["0:864","0:866","0:868","0:870","0:872","0:874","0:876","0:878","0:880","0:883","0:885","0:887","0:889","0:891","0:894","0:897","0:900","0:903","0:906","0:909"]}},"0:757:600":{"id":"0:757:600","crate_id":0,"name":"eq","span":{"filename":"src/builder/os_str.rs","begin":[231,4],"end":[233,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:86:1834":{"id":"0:86:1834","crate_id":0,"name":"command","span":{"filename":"src/derive.rs","begin":[424,4],"end":[426,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Command","id":"0:3505:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1551":{"id":"0:1551","crate_id":0,"name":null,"span":{"filename":"src/error/format.rs","begin":[30,0],"end":[44,1]},"visibility":{"restricted":{"parent":"0:1540:664","path":"::error::format"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ErrorFormatter","id":"0:1547:6079","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"KindFormatter","id":"0:1549:6080","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1552:2020"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3668":{"id":"0:3668","crate_id":0,"name":null,"span":{"filename":"src/builder/styled_str.rs","begin":[5,25],"end":[5,30]},"visibility":{"restricted":{"parent":"0:986:2149","path":"::builder::styled_str"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8596:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3669:655"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2513-0:4112:1655":{"id":"b:2:2513-0:4112:1655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4112:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2516:2263"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:920:673":{"id":"0:920:673","crate_id":0,"name":"from","span":{"filename":"src/builder/str.rs","begin":[62,4],"end":[64,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["name",{"kind":"borrowed_ref","inner":{"lifetime":"'static","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1509:1662":{"id":"0:1509:1662","crate_id":0,"name":"error","span":{"filename":"src/error/mod.rs","begin":[1,0],"end":[873,1]},"visibility":"public","docs":"Error reporting","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1571","0:1572","0:1573","0:1574","0:1575","0:1576","0:1577","0:1578:207","0:1581:127"],"is_stripped":false}},"0:549:5090":{"id":"0:549:5090","crate_id":0,"name":"get_after_help","span":{"filename":"src/builder/command.rs","begin":[3414,4],"end":[3416,5]},"visibility":"public","docs":"Returns the help heading for listing subcommands.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4296:419":{"id":"0:4296:419","crate_id":0,"name":"cmp","span":{"filename":"src/parser/matches/value_source.rs","begin":[2,56],"end":[2,59]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4275:6462","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::cmp::Ordering","id":"2:38204:180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3245":{"id":"0:3245","crate_id":0,"name":null,"span":{"filename":"src/builder/arg_group.rs","begin":[85,43],"end":[85,45]},"visibility":{"restricted":{"parent":"0:314:2142","path":"::builder::arg_group"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2673:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3229:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1492":{"id":"0:1492","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[44,0],"end":[44,37]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"value_parser::MapValueParser","name":"MapValueParser","id":"0:3859:2165","glob":false}},"0:922:673":{"id":"0:922:673","crate_id":0,"name":"from","span":{"filename":"src/builder/str.rs","begin":[68,4],"end":[70,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"borrowed_ref","inner":{"lifetime":"'static","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7736:6523-0:3749:2172":{"id":"a:2:7736:6523-0:3749:2172","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7736:6523","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StringValueParser","id":"0:3749:2172","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2528-0:3603:2158":{"id":"b:2:2528-0:3603:2158","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Resettable","id":"0:3603:2158","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2531:127","2:2532:1426"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1897":{"id":"0:1897","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1551,0],"end":[1559,1]},"visibility":{"restricted":{"parent":"0:1754:6526","path":"::parser::matches::arg_matches"}},"docs":"Creates an empty iterator.","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2564:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawValues","id":"0:4174:6458","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"items":["0:1898:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3543:655":{"id":"0:3543:655","crate_id":0,"name":"fmt","span":{"filename":"src/builder/command.rs","begin":[70,9],"end":[70,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:8556:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8545:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:408:4186":{"id":"0:408:4186","crate_id":0,"name":"get_matches_mut","span":{"filename":"src/builder/command.rs","begin":[512,4],"end":[515,5]},"visibility":"public","docs":"Parse [`env::args_os`], exiting on failure.\n\nLike [`Command::get_matches`] but doesn't consume the `Command`.\n\n# Panics\n\nIf contradictory arguments or settings exist.\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg};\nlet mut cmd = Command::new(\"myprog\")\n    // Args and options go here...\n    ;\nlet matches = cmd.get_matches_mut();\n```\n[`env::args_os`]: std::env::args_os()\n[`Command::get_matches`]: Command::get_matches()","links":{"Command::get_matches()":"0:407:2016","std::env::args_os()":"1:1892:4181"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4112:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11456:2128":{"id":"2:11456:2128","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"prim@char":"1:12300:408","self::pattern":"2:11116:8056","`None`":"2:48136:176"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11121:8050","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1291:3567":{"id":"0:1291:3567","crate_id":0,"name":"possible_values","span":{"filename":"src/builder/value_parser.rs","begin":[1993,4],"end":[1997,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:2137","args":{"angle_bracketed":{"args":[{"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Iterator","id":"2:7156:156","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"resolved_path","inner":{"name":"crate::builder::PossibleValue","id":"0:3571:1966","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}]}}},"generic_params":[]}],"lifetime":"'_"}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4533":{"id":"0:4533","crate_id":0,"name":null,"span":{"filename":"src/util/id.rs","begin":[8,29],"end":[8,38]},"visibility":{"restricted":{"parent":"0:2715:1860","path":"::util::id"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2285:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4534:600"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2523-0:4142:6457":{"id":"b:2:2523-0:4142:6457","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2493:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IdsRef","id":"0:4142:6457","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2526:127","2:2527:1427"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:436:4314":{"id":"0:436:4314","crate_id":0,"name":"ignore_errors","span":{"filename":"src/builder/command.rs","begin":[970,4],"end":[976,5]},"visibility":"public","docs":"Try not to fail on parse errors, like missing option values.\n\n**NOTE:** This choice is propagated to all child subcommands.\n\n# Examples\n\n```rust\n# use clap::{Command, arg};\nlet cmd = Command::new(\"cmd\")\n  .ignore_errors(true)\n  .arg(arg!(-c --config <FILE> \"Sets a custom config file\"))\n  .arg(arg!(-x --stuff <FILE> \"Sets a custom stuff file\"))\n  .arg(arg!(f: -f \"Flag\"));\n\nlet r = cmd.try_get_matches_from(vec![\"cmd\", \"-c\", \"file\", \"-f\", \"-x\"]);\n\nassert!(r.is_ok(), \"unexpected error: {:?}\", r);\nlet m = r.unwrap();\nassert_eq!(m.get_one::<String>(\"config\").unwrap(), \"file\");\nassert!(*m.get_one::<bool>(\"f\").expect(\"defaulted\"));\nassert_eq!(m.get_one::<String>(\"stuff\"), None);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2726:5340-0:3571:1966":{"id":"a:2:2726:5340-0:3571:1966","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2726:5340","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:3571:1966","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1793:6727":{"id":"0:1793:6727","crate_id":0,"name":"args_present","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[545,4],"end":[547,5]},"visibility":"public","docs":"Check if any args were present on the command line\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ArgAction};\nlet mut cmd = Command::new(\"myapp\")\n    .arg(Arg::new(\"output\")\n        .action(ArgAction::Set));\n\nlet m = cmd\n    .try_get_matches_from_mut(vec![\"myapp\", \"something\"])\n    .unwrap();\nassert!(m.args_present());\n\nlet m = cmd\n    .try_get_matches_from_mut(vec![\"myapp\"])\n    .unwrap();\nassert!(! m.args_present());","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3631":{"id":"0:3631","crate_id":0,"name":null,"span":{"filename":"src/builder/resettable.rs","begin":[31,56],"end":[31,59]},"visibility":{"restricted":{"parent":"0:844:2148","path":"::builder::resettable"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::cmp::Ord","id":"2:2321:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["min","max","clamp"],"trait":{"name":"Ord","id":"2:2321:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Resettable","id":"0:3603:2158","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:3633:419"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:450:3227":{"id":"0:450:3227","crate_id":0,"name":"hide_possible_values","span":{"filename":"src/builder/command.rs","begin":[1318,4],"end":[1324,5]},"visibility":"public","docs":"Tells `clap` *not* to print possible values when displaying help information.\n\nThis can be useful if there are many values, or they are explained elsewhere.\n\nTo set this per argument, see\n[`Arg::hide_possible_values`][crate::Arg::hide_possible_values].\n\n**NOTE:** This choice is propagated to all child subcommands.","links":{"crate::Arg::hide_possible_values":"0:210:3227"},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1109":{"id":"0:1109","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[558,0],"end":[568,1]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1054:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1110:412"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:2309":{"id":"0:2309","crate_id":0,"name":null,"span":{"filename":"src/parser/mod.rs","begin":[26,24],"end":[26,34]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::matches::ArgMatches","name":"ArgMatches","id":"0:4112:1655","glob":false}},"0:1107":{"id":"0:1107","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[546,0],"end":[556,1]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8596:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1054:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1108:655"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2523-0:3810:2171":{"id":"b:2:2523-0:3810:2171","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2493:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangedU64ValueParser","id":"0:3810:2171","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2526:127","2:2527:1427"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1638:673":{"id":"0:1638:673","crate_id":0,"name":"from","span":{"filename":"src/error/mod.rs","begin":[757,4],"end":[759,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["e",{"kind":"resolved_path","inner":{"name":"fmt::Error","id":"2:49176:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1126:5472":{"id":"0:1126:5472","crate_id":0,"name":"Value","span":{"filename":"src/builder/value_parser.rs","begin":[687,4],"end":[687,36]},"visibility":"default","docs":"Argument's value type","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null}},"0:4551":{"id":"0:4551","crate_id":0,"name":null,"span":{"filename":"src/util/color.rs","begin":[5,16],"end":[5,20]},"visibility":{"restricted":{"parent":"0:2776:1564","path":"::util::color"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2674:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:4542:1657","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:330":{"id":"0:330","crate_id":0,"name":null,"span":{"filename":"src/builder/arg_group.rs","begin":[498,0],"end":[510,1]},"visibility":{"restricted":{"parent":"0:314:2142","path":"::builder::arg_group"}},"docs":"# Reflection","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3229:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:331:1859","0:332:3602"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:2783":{"id":"0:2783","crate_id":0,"name":null,"span":{"filename":"src/util/color.rs","begin":[76,0],"end":[87,1]},"visibility":{"restricted":{"parent":"0:2776:1564","path":"::util::color"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromStr","id":"2:11077:5547","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:4542:1657","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2784:126","0:2785:2125"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:2005:6919":{"id":"0:2005:6919","crate_id":0,"name":"size_hint","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1840,4],"end":[1842,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1344:2151":{"id":"0:1344:2151","crate_id":0,"name":"value_parser","span":{"filename":"src/builder/value_parser.rs","begin":[2180,4],"end":[2182,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"qualified_path","inner":{"name":"Parser","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:1306:2175","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2740":{"id":"0:2740","crate_id":0,"name":null,"span":{"filename":"src/util/id.rs","begin":[93,0],"end":[98,1]},"visibility":{"restricted":{"parent":"0:2715:1860","path":"::util::id"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8596:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2741:655"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:321:303":{"id":"0:321:303","crate_id":0,"name":"args","span":{"filename":"src/builder/arg_group.rs","begin":[184,4],"end":[189,5]},"visibility":"public","docs":"Adds multiple [arguments] to this group by name\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ArgGroup, ArgAction};\nlet m = Command::new(\"myprog\")\n    .arg(Arg::new(\"flag\")\n        .short('f')\n        .action(ArgAction::SetTrue))\n    .arg(Arg::new(\"color\")\n        .short('c')\n        .action(ArgAction::SetTrue))\n    .group(ArgGroup::new(\"req_flags\")\n        .args([\"flag\", \"color\"]))\n    .get_matches_from(vec![\"myprog\", \"-f\"]);\n// maybe we don't know which of the two flags was used...\nassert!(m.contains_id(\"req_flags\"));\n// but we can also check individually if needed\nassert!(m.contains_id(\"flag\"));\n```\n[arguments]: crate::Arg","links":{"crate::Arg":"0:3195:1652"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["ns",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7042:149","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}}}}]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl Into<Id>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}},{"name":"impl IntoIterator<Item = impl Into<Id>>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7042:149","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2787:2122":{"id":"0:2787:2122","crate_id":0,"name":"value_variants","span":{"filename":"src/util/color.rs","begin":[90,4],"end":[92,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"slice","inner":{"kind":"generic","inner":"Self"}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1482":{"id":"0:1482","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[34,0],"end":[34,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"resettable::IntoResettable","name":"IntoResettable","id":"0:861:2157","glob":false}},"0:4553:412":{"id":"0:4553:412","crate_id":0,"name":"clone","span":{"filename":"src/util/color.rs","begin":[5,22],"end":[5,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:4542:1657","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1493":{"id":"0:1493","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[45,0],"end":[45,48]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"value_parser::NonEmptyStringValueParser","name":"NonEmptyStringValueParser","id":"0:3852:2166","glob":false}},"0:733":{"id":"0:733","crate_id":0,"name":null,"span":{"filename":"src/builder/os_str.rs","begin":[154,0],"end":[161,1]},"visibility":{"restricted":{"parent":"0:707:2145","path":"::builder::os_str"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"2:2904:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:734:227","0:735:540"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3578":{"id":"0:3578","crate_id":0,"name":null,"span":{"filename":"src/builder/possible_value.rs","begin":[34,16],"end":[34,23]},"visibility":{"restricted":{"parent":"0:780:2146","path":"::builder::possible_value"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2564:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:3571:1966","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3579:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:896:2452":{"id":"0:896:2452","crate_id":0,"name":"into_resettable","span":{"filename":"src/builder/resettable.rs","begin":[178,4],"end":[180,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Resettable","id":"0:3603:2158","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1054:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3973":{"id":"0:3973","crate_id":0,"name":null,"span":{"filename":"src/error/context.rs","begin":[2,40],"end":[2,42]},"visibility":{"restricted":{"parent":"0:1533:479","path":"::error::context"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2290:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:3929:6081","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3561":{"id":"0:3561","crate_id":0,"name":null,"span":{"filename":"src/builder/os_str.rs","begin":[7,52],"end":[7,55]},"visibility":{"restricted":{"parent":"0:707:2145","path":"::builder::os_str"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["min","max","clamp"],"trait":{"name":"Ord","id":"2:2321:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3562:419"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:2240:5354":{"id":"2:2240:5354","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1792:3472":{"id":"0:1792:3472","crate_id":0,"name":"ids","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[520,4],"end":[524,5]},"visibility":"public","docs":"Iterate over [`Arg`][crate::Arg] and [`ArgGroup`][crate::ArgGroup] [`Id`][crate::Id]s via [`ArgMatches::ids`].\n\n# Examples\n\n```\n# use clap::{Command, arg, value_parser};\n\nlet m = Command::new(\"myprog\")\n    .arg(arg!(--color <when>)\n        .value_parser([\"auto\", \"always\", \"never\"]))\n    .arg(arg!(--config <path>)\n        .value_parser(value_parser!(std::path::PathBuf)))\n    .get_matches_from([\"myprog\", \"--config=config.toml\", \"--color=auto\"]);\nassert_eq!(m.ids().len(), 2);\nassert_eq!(\n    m.ids()\n        .map(|id| id.as_str())\n        .collect::<Vec<_>>(),\n    [\"config\", \"color\"]\n);\n```","links":{"crate::Arg":"0:3195:1652","crate::ArgGroup":"0:3229:1653","`ArgMatches::ids`":"0:1792:3472","crate::Id":"0:4522:1658"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"IdsRef","id":"0:4142:6457","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2812:412":{"id":"0:2812:412","crate_id":0,"name":"clone","span":{"filename":"src/builder/action.rs","begin":[24,9],"end":[24,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"ArgAction","id":"0:2796:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:681-0:3791:2170":{"id":"b:5:681-0:3791:2170","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:677:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:3791:2170","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["5:683:5351","5:684:3662","5:685:8969"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:19":{"id":"0:19","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[115,82],"end":[115,91]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::derive::ValueEnum","name":"ValueEnum","id":"0:67:1669","glob":false}},"0:794:3534":{"id":"0:794:3534","crate_id":0,"name":"get_help","span":{"filename":"src/builder/possible_value.rs","begin":[155,4],"end":[157,5]},"visibility":"public","docs":"Get the help specified for this argument, if any","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:955:600":{"id":"0:955:600","crate_id":0,"name":"eq","span":{"filename":"src/builder/str.rs","begin":[176,4],"end":[178,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:221:3352":{"id":"0:221:3352","crate_id":0,"name":"required_unless_present","span":{"filename":"src/builder/arg.rs","begin":[2949,4],"end":[2956,5]},"visibility":"public","docs":"Set this arg as [required] as long as the specified argument is not present at runtime.\n\n**Pro Tip:** Using `Arg::required_unless_present` implies [`Arg::required`] and is therefore not\nmandatory to also set.\n\n# Examples\n\n```rust\n# use clap::Arg;\nArg::new(\"config\")\n    .required_unless_present(\"debug\")\n# ;\n```\n\nIn the following example, the required argument is *not* provided,\nbut it's not an error because the `unless` arg has been supplied.\n\n```rust\n# use clap::{Command, Arg, ArgAction};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .required_unless_present(\"dbg\")\n        .action(ArgAction::Set)\n        .long(\"config\"))\n    .arg(Arg::new(\"dbg\")\n        .long(\"debug\")\n        .action(ArgAction::SetTrue))\n    .try_get_matches_from(vec![\n        \"prog\", \"--debug\"\n    ]);\n\nassert!(res.is_ok());\n```\n\nSetting `Arg::required_unless_present(name)` and *not* supplying `name` or this arg is an error.\n\n```rust\n# use clap::{Command, Arg, error::ErrorKind, ArgAction};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .required_unless_present(\"dbg\")\n        .action(ArgAction::Set)\n        .long(\"config\"))\n    .arg(Arg::new(\"dbg\")\n        .long(\"debug\"))\n    .try_get_matches_from(vec![\n        \"prog\"\n    ]);\n\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind(), ErrorKind::MissingRequiredArgument);\n```\n[required]: Arg::required()","links":{"`Arg::required`":"0:166:1870","Arg::required()":"0:166:1870"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["arg_id",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl IntoResettable<Id>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1271":{"id":"0:1271","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1901,0],"end":[1906,1]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"NonEmptyStringValueParser","id":"0:3852:2166","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1272:915"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2241-0:4542:1657":{"id":"b:2:2241-0:4542:1657","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2235:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:4542:1657","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2243:26835"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2238-0:2796:1649":{"id":"b:2:2238-0:2796:1649","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2232:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgAction","id":"0:2796:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2240:5354"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1141:5472":{"id":"0:1141:5472","crate_id":0,"name":"Value","span":{"filename":"src/builder/value_parser.rs","begin":[822,4],"end":[822,19]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"0:923":{"id":"0:923","crate_id":0,"name":null,"span":{"filename":"src/builder/str.rs","begin":[73,0],"end":[77,1]},"visibility":{"restricted":{"parent":"0:912:1352","path":"::builder::str"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"5:6967:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:924:673"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:64:2104":{"id":"0:64:2104","crate_id":0,"name":"augment_subcommands","span":{"filename":"src/derive.rs","begin":[334,4],"end":[334,52]},"visibility":"default","docs":"Append to [`Command`] so it can instantiate `Self`.\n\nSee also [`CommandFactory`].","links":{"`Command`":"0:3505:1650","`CommandFactory`":"0:51:1665"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["cmd",{"kind":"resolved_path","inner":{"name":"Command","id":"0:3505:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Command","id":"0:3505:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:266:3594":{"id":"0:266:3594","crate_id":0,"name":"get_default_values","span":{"filename":"src/builder/arg.rs","begin":[3914,4],"end":[3916,5]},"visibility":"public","docs":"Get the default values specified for this argument, if any\n\n# Examples\n\n```rust\n# use clap::Arg;\nlet arg = Arg::new(\"foo\").default_value(\"default value\");\nassert_eq!(arg.get_default_values(), &[\"default value\"]);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3551":{"id":"0:3551","crate_id":0,"name":null,"span":{"filename":"src/builder/os_str.rs","begin":[7,18],"end":[7,23]},"visibility":{"restricted":{"parent":"0:707:2145","path":"::builder::os_str"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3552:412"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:241:3538":{"id":"0:241:3538","crate_id":0,"name":"get_long_help","span":{"filename":"src/builder/arg.rs","begin":[3719,4],"end":[3721,5]},"visibility":"public","docs":"Get the long help specified for this argument, if any\n\n# Examples\n\n```rust\n# use clap::Arg;\nlet arg = Arg::new(\"foo\").long_help(\"long help\");\nassert_eq!(Some(\"long help\".to_owned()), arg.get_long_help().map(|s| s.to_string()));\n```\n","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:759:600":{"id":"0:759:600","crate_id":0,"name":"eq","span":{"filename":"src/builder/os_str.rs","begin":[238,4],"end":[240,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"std::ffi::OsString","id":"1:2026:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2676:225-0:3791:2170":{"id":"a:2:2676:225-0:3791:2170","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:3791:2170","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3783:2169":{"id":"0:3783:2169","crate_id":0,"name":"PossibleValuesParser","span":{"filename":"src/builder/value_parser.rs","begin":[1139,0],"end":[1139,59]},"visibility":"public","docs":"Verify the value is from an enumerated set of [`PossibleValue`][crate::builder::PossibleValue].\n\nSee also:\n- [`EnumValueParser`] for directly supporting [`ValueEnum`][crate::ValueEnum] types\n- [`TypedValueParser::map`] for adapting values to a more specialized type, like an external\n  enums that can't implement [`ValueEnum`][crate::ValueEnum]\n\n# Example\n\nUsage:\n```rust\nlet mut cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"color\")\n            .value_parser(clap::builder::PossibleValuesParser::new([\"always\", \"auto\", \"never\"]))\n            .required(true)\n    );\n\nlet m = cmd.try_get_matches_from_mut([\"cmd\", \"always\"]).unwrap();\nlet port: &String = m.get_one(\"color\")\n    .expect(\"required\");\nassert_eq!(port, \"always\");\n```\n\nSemantics:\n```rust\n# use std::ffi::OsStr;\n# use clap::builder::TypedValueParser;\n# let cmd = clap::Command::new(\"test\");\n# let arg = None;\nlet value_parser = clap::builder::PossibleValuesParser::new([\"always\", \"auto\", \"never\"]);\nassert!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"random\")).is_err());\nassert!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"\")).is_err());\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"always\")).unwrap(), \"always\");\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"auto\")).unwrap(), \"auto\");\nassert_eq!(value_parser.parse_ref(&cmd, arg, OsStr::new(\"never\")).unwrap(), \"never\");\n```","links":{"`TypedValueParser::map`":"0:1130:837","crate::builder::PossibleValue":"0:3571:1966","crate::ValueEnum":"0:67:1669","`EnumValueParser`":"0:3768:2163"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:1185","a:2:7735:6524-0:3783:2169","a:2:2676:225-0:3783:2169","a:2:2662:217-0:3783:2169","a:2:2726:5340-0:3783:2169","a:2:7736:6523-0:3783:2169","b:2:2523-0:3783:2169","b:2:2238-0:3783:2169","b:2:2517-0:3783:2169","b:2:2513-0:3783:2169","b:2:2241-0:3783:2169","b:2:2528-0:3783:2169","b:2:3321-0:3783:2169","b:5:681-0:3783:2169","0:3786","0:3788","0:1187","0:1197"]}},"0:3545:412":{"id":"0:3545:412","crate_id":0,"name":"clone","span":{"filename":"src/builder/command.rs","begin":[70,16],"end":[70,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Command","id":"0:3505:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:831:673":{"id":"0:831:673","crate_id":0,"name":"from","span":{"filename":"src/builder/range.rs","begin":[134,4],"end":[138,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["_",{"kind":"resolved_path","inner":{"name":"std::ops::RangeFull","id":"2:46441:197","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1340:1667":{"id":"0:1340:1667","crate_id":0,"name":"Parser","span":{"filename":"src/builder/value_parser.rs","begin":[2173,4],"end":[2173,44]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:3791:2170","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i64"}}],"bindings":[]}}}}}},"0:1272:915":{"id":"0:1272:915","crate_id":0,"name":"new","span":{"filename":"src/builder/value_parser.rs","begin":[1903,4],"end":[1905,5]},"visibility":"public","docs":"Parse non-empty string values","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1870:2029":{"id":"0:1870:2029","crate_id":0,"name":"Item","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1471,4],"end":[1471,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}},"0:801:1855":{"id":"0:801:1855","crate_id":0,"name":"matches","span":{"filename":"src/builder/possible_value.rs","begin":[220,4],"end":[227,5]},"visibility":"public","docs":"Tests if the value is valid for this argument value\n\nThe value is valid if it is either the name or one of the aliases.\n\n# Examples\n\n```rust\n# use clap::builder::PossibleValue;\nlet arg_value = PossibleValue::new(\"fast\").alias(\"not-slow\");\n\nassert!(arg_value.matches(\"fast\", false));\nassert!(arg_value.matches(\"not-slow\", false));\n\nassert!(arg_value.matches(\"FAST\", true));\nassert!(!arg_value.matches(\"FAST\", false));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["value",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["ignore_case",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:899:2452":{"id":"0:899:2452","crate_id":0,"name":"into_resettable","span":{"filename":"src/builder/resettable.rs","begin":[184,4],"end":[186,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Resettable","id":"0:3603:2158","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:6967:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2517-0:2796:1649":{"id":"b:2:2517-0:2796:1649","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgAction","id":"0:2796:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2519:673"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1306:2175":{"id":"0:1306:2175","crate_id":0,"name":"ValueParserFactory","span":{"filename":"src/builder/value_parser.rs","begin":[2090,0],"end":[2099,1]},"visibility":"public","docs":"Register a type with [value_parser!][crate::value_parser!]\n\n# Example\n\n```rust\n#[derive(Copy, Clone, Debug)]\npub struct Custom(u32);\n\nimpl clap::builder::ValueParserFactory for Custom {\n    type Parser = CustomValueParser;\n    fn value_parser() -> Self::Parser {\n        CustomValueParser\n    }\n}\n\n#[derive(Clone, Debug)]\npub struct CustomValueParser;\nimpl clap::builder::TypedValueParser for CustomValueParser {\n    type Value = Custom;\n\n    fn parse_ref(\n        &self,\n        cmd: &clap::Command,\n        arg: Option<&clap::Arg>,\n        value: &std::ffi::OsStr,\n    ) -> Result<Self::Value, clap::Error> {\n        let inner = clap::value_parser!(u32);\n        let val = inner.parse_ref(cmd, arg, value)?;\n        Ok(Custom(val))\n    }\n}\n\nlet parser: CustomValueParser = clap::value_parser!(Custom);\n```","links":{"crate::value_parser!":"0:1395:2151"},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:1307:1667","0:1308:2151"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:1309","0:1312","0:1315","0:1318","0:1321","0:1324","0:1327","0:1330","0:1333","0:1336","0:1339","0:1342"]}},"a:2:2726:5340-0:3783:2169":{"id":"a:2:2726:5340-0:3783:2169","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2726:5340","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValuesParser","id":"0:3783:2169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2523-0:3791:2170":{"id":"b:2:2523-0:3791:2170","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2493:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:3791:2170","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2526:127","2:2527:1427"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1081":{"id":"0:1081","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[282,0],"end":[289,1]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":"Convert a [`TypedValueParser`] to [`ValueParser`]\n\n# Example\n\n```rust\nlet mut cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"hostname\")\n            .long(\"hostname\")\n            .value_parser(clap::builder::NonEmptyStringValueParser::new())\n            .action(clap::ArgAction::Set)\n            .required(true)\n    );\n\nlet m = cmd.try_get_matches_from_mut(\n    [\"cmd\", \"--hostname\", \"rust-lang.org\"]\n).unwrap();\n\nlet hostname: &String = m.get_one(\"hostname\")\n    .expect(\"required\");\nassert_eq!(hostname, \"rust-lang.org\");\n```","links":{"`TypedValueParser`":"0:1125:2173","`ValueParser`":"0:1054:2174"},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"TypedValueParser","id":"0:1125:2173","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1054:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1083:673"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4145":{"id":"0:4145","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1363,9],"end":[1363,14]},"visibility":{"restricted":{"parent":"0:1754:6526","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IdsRef","id":"0:4142:6457","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:4147:412"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:538:5073":{"id":"0:538:5073","crate_id":0,"name":"get_all_long_flag_aliases","span":{"filename":"src/builder/command.rs","begin":[3341,4],"end":[3343,5]},"visibility":"public","docs":"Iterate through the set of *all* the long aliases for this subcommand, both visible and hidden.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:7156:156","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}}]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'_"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3612":{"id":"0:3612","crate_id":0,"name":null,"span":{"filename":"src/builder/resettable.rs","begin":[31,15],"end":[31,20]},"visibility":{"restricted":{"parent":"0:844:2148","path":"::builder::resettable"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Resettable","id":"0:3603:2158","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:3614:412"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1073:1842":{"id":"0:1073:1842","crate_id":0,"name":"string","span":{"filename":"src/builder/value_parser.rs","begin":[161,4],"end":[163,5]},"visibility":"public","docs":"[`String`] parser for argument values\n\nSee also:\n- [`NonEmptyStringValueParser`]\n\n# Example\n\n```rust\nlet mut cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"port\")\n            .value_parser(clap::value_parser!(String))\n            .required(true)\n    );\n\nlet m = cmd.try_get_matches_from_mut([\"cmd\", \"80\"]).unwrap();\nlet port: &String = m.get_one(\"port\")\n    .expect(\"required\");\nassert_eq!(port, \"80\");\n```","links":{"`NonEmptyStringValueParser`":"0:3852:2166","`String`":"5:6967:221"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2662:217-0:4254:6461":{"id":"a:2:2662:217-0:4254:6461","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:4254:6461","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2238-0:3662:1951":{"id":"b:2:2238-0:3662:1951","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2232:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2240:5354"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2523-0:3929:6081":{"id":"b:2:2523-0:3929:6081","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2493:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:3929:6081","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2526:127","2:2527:1427"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1325:1667":{"id":"0:1325:1667","crate_id":0,"name":"Parser","span":{"filename":"src/builder/value_parser.rs","begin":[2133,4],"end":[2133,43]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:3791:2170","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i8"}}],"bindings":[]}}}}}},"0:3802:655":{"id":"0:3802:655","crate_id":0,"name":"fmt","span":{"filename":"src/builder/value_parser.rs","begin":[1251,22],"end":[1251,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:8556:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8545:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11537:20771":{"id":"2:11537:20771","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:728:673":{"id":"0:728:673","crate_id":0,"name":"from","span":{"filename":"src/builder/os_str.rs","begin":[136,4],"end":[138,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["name",{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3990:1951":{"id":"0:3990:1951","crate_id":0,"name":"StyledStr","span":{"filename":"src/error/context.rs","begin":[87,4],"end":[87,40]},"visibility":"default","docs":"A single value","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":{"tuple":["0:3992:1553"]},"discriminant":null}},"0:4285:412":{"id":"0:4285:412","crate_id":0,"name":"clone","span":{"filename":"src/parser/matches/value_source.rs","begin":[2,16],"end":[2,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4275:6462","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:463:4025":{"id":"0:463:4025","crate_id":0,"name":"before_long_help","span":{"filename":"src/builder/command.rs","begin":[1603,4],"end":[1606,5]},"visibility":"public","docs":"Free-form help text for before auto-generated long help (`--help`).\n\nThis is often used for header, copyright, or license information.\n\nIf [`Command::before_help`] is not specified, this message will be displayed for `-h`.\n\n# Examples\n\n```no_run\n# use clap::Command;\nCommand::new(\"myprog\")\n    .before_long_help(\"Some verbose and long info I'd like to appear before the help info\")\n# ;\n```","links":{"`Command::before_help`":"0:462:4024"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["help",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl IntoResettable<StyledStr>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2517-0:4174:6458":{"id":"b:2:2517-0:4174:6458","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawValues","id":"0:4174:6458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2519:673"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4055":{"id":"0:4055","crate_id":0,"name":null,"span":{"filename":"src/error/kind.rs","begin":[2,44],"end":[2,48]},"visibility":{"restricted":{"parent":"0:1566:778","path":"::error::kind"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:8819:140","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4009:3985","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4056:707"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:2013:59":{"id":"0:2013:59","crate_id":0,"name":"default","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1855,4],"end":[1862,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2238-0:3704:1651":{"id":"b:2:2238-0:3704:1651","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2232:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:3704:1651","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2240:5354"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:5:681-0:3978:6082":{"id":"b:5:681-0:3978:6082","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:677:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextValue","id":"0:3978:6082","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:683:5351","5:684:3662","5:685:8969"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:393:303":{"id":"0:393:303","crate_id":0,"name":"args","span":{"filename":"src/builder/command.rs","begin":[200,4],"end":[205,5]},"visibility":"public","docs":"Adds multiple [arguments] to the list of valid possibilities.\n\n# Examples\n\n```no_run\n# use clap::{Command, arg, Arg};\nCommand::new(\"myprog\")\n    .args([\n        arg!(\"[debug] -d 'turns on debugging info'\"),\n        Arg::new(\"input\").help(\"the input file to use\")\n    ])\n# ;\n```\n[arguments]: Arg","links":{"Arg":"0:3195:1652"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["args",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7042:149","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3195:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}}}}]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl Into<Arg>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3195:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}},{"name":"impl IntoIterator<Item = impl Into<Arg>>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7042:149","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3195:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1224:2147":{"id":"0:1224:2147","crate_id":0,"name":"range","span":{"filename":"src/builder/value_parser.rs","begin":[1462,4],"end":[1510,5]},"visibility":"public","docs":"Narrow the supported range","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["range",{"kind":"generic","inner":"B"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"2:3084:5446","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1312":{"id":"0:1312","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[2106,0],"end":[2111,1]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ValueParserFactory","id":"0:1306:2175","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"std::ffi::OsString","id":"1:2026:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1313:1667","0:1314:2151"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:542:5078":{"id":"0:542:5078","crate_id":0,"name":"get_subcommands","span":{"filename":"src/builder/command.rs","begin":[3372,4],"end":[3374,5]},"visibility":"public","docs":"Iterate through the set of subcommands, getting a reference to each.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:7156:156","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Command","id":"0:3505:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}}]}}},"generic_params":[],"modifier":"none"}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4543:1958":{"id":"0:4543:1958","crate_id":0,"name":"Auto","span":{"filename":"src/util/color.rs","begin":[24,4],"end":[24,8]},"visibility":"default","docs":"Enables colored output only when the output is going to a terminal or TTY.\n\n**NOTE:** This is the default behavior of `clap`.\n\n# Platform Specific\n\nThis setting only applies to Unix, Linux, and macOS (i.e. non-Windows platforms).\n\n# Examples\n\n ```no_run\n# use clap::{Command, ColorChoice};\nCommand::new(\"myprog\")\n    .color(ColorChoice::Auto)\n    .get_matches();\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"0:1133:5769":{"id":"0:1133:5769","crate_id":0,"name":"try_map","span":{"filename":"src/builder/value_parser.rs","begin":[806,4],"end":[813,5]},"visibility":"default","docs":"Adapt a `TypedValueParser` from one value to another\n\n# Example\n\n```rust\n# use std::ffi::OsString;\n# use std::ffi::OsStr;\n# use std::path::PathBuf;\n# use std::path::Path;\n# use clap::Command;\n# use clap::Arg;\n# use clap::builder::TypedValueParser as _;\n# use clap::builder::OsStringValueParser;\nlet cmd = Command::new(\"mycmd\")\n    .arg(\n        Arg::new(\"flag\")\n            .long(\"flag\")\n            .value_parser(\n                OsStringValueParser::new()\n                .try_map(verify_ext)\n            )\n    );\n\nfn verify_ext(os: OsString) -> Result<PathBuf, &'static str> {\n    let path = PathBuf::from(os);\n    if path.extension() != Some(OsStr::new(\"rs\")) {\n        return Err(\"only Rust files are supported\");\n    }\n    Ok(path)\n}\n\nlet error = cmd.clone().try_get_matches_from([\"mycmd\", \"--flag\", \"foo.txt\"]).unwrap_err();\nerror.print();\n\nlet matches = cmd.try_get_matches_from([\"mycmd\", \"--flag\", \"foo.rs\"]).unwrap();\nassert!(matches.contains_id(\"flag\"));\nassert_eq!(\n    matches.get_one::<PathBuf>(\"flag\").map(|s| s.as_path()),\n    Some(Path::new(\"foo.rs\"))\n);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["func",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"TryMapValueParser","id":"0:3872:5771","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Fn","id":"2:2932:5247","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Value","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:1125:2173","args":null}}}],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48278:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:2137","args":{"angle_bracketed":{"args":[{"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"std::error::Error","id":"2:2578:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2241-0:3547:181":{"id":"b:2:2241-0:3547:181","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2235:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2243:26835"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:7735:6524-0:3810:2171":{"id":"a:2:7735:6524-0:3810:2171","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:7735:6524","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7735:6524","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangedU64ValueParser","id":"0:3810:2171","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:3321-0:1553:6083":{"id":"b:2:3321-0:1553:6083","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3319:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RichFormatter","id":"0:1553:6083","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3323:1440"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:162:2534":{"id":"0:162:2534","crate_id":0,"name":"visible_short_aliases","span":{"filename":"src/builder/arg.rs","begin":[431,4],"end":[437,5]},"visibility":"public","docs":"Add aliases, which function as visible short flags.\n\nLike [`Arg::short_aliases`], except that they are visible inside the help message.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ArgAction};\nlet m = Command::new(\"prog\")\n            .arg(Arg::new(\"test\")\n                .long(\"test\")\n                .action(ArgAction::SetTrue)\n                .visible_short_aliases(['t', 'e']))\n       .get_matches_from(vec![\n            \"prog\", \"-t\"\n        ]);\nassert_eq!(*m.get_one::<bool>(\"test\").expect(\"defaulted by clap\"), true);\n```","links":{"`Arg::short_aliases`":"0:157:2403"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["names",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7042:149","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"primitive","inner":"char"}}}}]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl IntoIterator<Item = char>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7042:149","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"primitive","inner":"char"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3814":{"id":"0:3814","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1449,9],"end":[1449,13]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::marker::Copy","id":"2:2674:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"std::convert::TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2674:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangedU64ValueParser","id":"0:3810:2171","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:2805:109":{"id":"0:2805:109","crate_id":0,"name":"Count","span":{"filename":"src/builder/action.rs","begin":[220,4],"end":[220,9]},"visibility":"default","docs":"When encountered, increment a `u8` counter\n\nIf no [`default_value`][super::Arg::default_value] is set, it will be `0`.\n\nNo value is allowed. To optionally accept a value, see\n[`Arg::default_missing_value`][super::Arg::default_missing_value]\n\n# Examples\n\n```rust\n# use clap::Command;\n# use clap::Arg;\nlet cmd = Command::new(\"mycmd\")\n    .arg(\n        Arg::new(\"flag\")\n            .long(\"flag\")\n            .action(clap::ArgAction::Count)\n    );\n\nlet matches = cmd.clone().try_get_matches_from([\"mycmd\", \"--flag\", \"--flag\"]).unwrap();\nassert!(matches.contains_id(\"flag\"));\nassert_eq!(\n    matches.get_count(\"flag\"),\n    2\n);\n\nlet matches = cmd.try_get_matches_from([\"mycmd\"]).unwrap();\nassert!(matches.contains_id(\"flag\"));\nassert_eq!(\n    matches.get_count(\"flag\"),\n    0\n);\n```","links":{"super::Arg::default_missing_value":"0:198:2261","super::Arg::default_value":"0:193:2260"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"a:2:2662:217-0:3704:1651":{"id":"a:2:2662:217-0:3704:1651","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:3704:1651","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:63:1668":{"id":"0:63:1668","crate_id":0,"name":"Subcommand","span":{"filename":"src/derive.rs","begin":[330,0],"end":[343,1]},"visibility":"public","docs":"Parse a sub-command into a user-defined enum.\n\nImplementing this trait lets a parent container delegate subcommand behavior to `Self`.\nwith:\n- `#[command(subcommand)] field: SubCmd`: Attribute can be used with either struct fields or enum\n  variants that impl `Subcommand`.\n- `#[command(flatten)] Variant(SubCmd)`: Attribute can only be used with enum variants that impl\n  `Subcommand`.\n\nSee the [derive reference](crate::_derive) for attributes and best practices.\n\n**NOTE:** Deriving requires the [`derive` feature flag][crate::_features]\n\n# Example\n\n ```ignore\n#[derive(clap::Parser)]\nstruct Args {\n    #[command(subcommand)]\n    action: Action,\n}\n\n#[derive(clap::Subcommand)]\nenum Action {\n    Add,\n    Remove,\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:64:2104","0:65:2105","0:66:2107"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FromArgMatches","id":"0:54:1666","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:100"]}},"0:4036:6158":{"id":"0:4036:6158","crate_id":0,"name":"DisplayHelpOnMissingArgumentOrSubcommand","span":{"filename":"src/error/kind.rs","begin":[284,4],"end":[284,44]},"visibility":"default","docs":"Occurs when either an argument or a [`Subcommand`] is required, as defined by\n[`Command::arg_required_else_help`] , but the user did not provide\none.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, error::ErrorKind, };\nlet result = Command::new(\"prog\")\n    .arg_required_else_help(true)\n    .subcommand(Command::new(\"config\")\n        .about(\"Used for configuration\")\n        .arg(Arg::new(\"config_file\")\n            .help(\"The configuration file to use\")))\n    .try_get_matches_from(vec![\"prog\"]);\nassert!(result.is_err());\nassert_eq!(result.unwrap_err().kind(), ErrorKind::DisplayHelpOnMissingArgumentOrSubcommand);\n```\n\n[`Subcommand`]: crate::Subcommand\n[`Command::arg_required_else_help`]: crate::Command::arg_required_else_help","links":{"crate::Command::arg_required_else_help":"0:477:4655","crate::Subcommand":"0:63:1668"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"b:2:3321-0:3588:2156":{"id":"b:2:3321-0:3588:2156","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3319:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueRange","id":"0:3588:2156","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3323:1440"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3554":{"id":"0:3554","crate_id":0,"name":null,"span":{"filename":"src/builder/os_str.rs","begin":[7,25],"end":[7,27]},"visibility":{"restricted":{"parent":"0:707:2145","path":"::builder::os_str"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2290:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1256:5472":{"id":"0:1256:5472","crate_id":0,"name":"Value","span":{"filename":"src/builder/value_parser.rs","begin":[1731,4],"end":[1731,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"primitive","inner":"bool"}}},"0:1076":{"id":"0:1076","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[221,0],"end":[258,1]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1054:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1078:1440","0:1079:3567"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:7735:6524-0:3704:1651":{"id":"a:2:7735:6524-0:3704:1651","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7735:6524","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:3704:1651","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:5:681-0:3859:2165":{"id":"b:5:681-0:3859:2165","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:677:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MapValueParser","id":"0:3859:2165","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"P"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["5:683:5351","5:684:3662","5:685:8969"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1330":{"id":"0:1330","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[2148,0],"end":[2155,1]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ValueParserFactory","id":"0:1306:2175","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"i16"},"items":["0:1331:1667","0:1332:2151"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1289:5682":{"id":"0:1289:5682","crate_id":0,"name":"parse_ref","span":{"filename":"src/builder/value_parser.rs","begin":[1971,4],"end":[1980,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["cmd",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Command","id":"0:3505:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["arg",{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Arg","id":"0:3195:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}}}],["value",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"std::ffi::OsStr","id":"1:2029:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48278:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Value","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:1125:2173","args":null}}}},{"type":{"kind":"resolved_path","inner":{"name":"crate::Error","id":"0:12:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1190:2015":{"id":"0:1190:2015","crate_id":0,"name":"parse","span":{"filename":"src/builder/value_parser.rs","begin":[1160,4],"end":[1192,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["cmd",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Command","id":"0:3505:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["arg",{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Arg","id":"0:3195:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}}}],["value",{"kind":"resolved_path","inner":{"name":"std::ffi::OsString","id":"1:2026:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48278:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:6967:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"crate::Error","id":"0:12:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:951:600":{"id":"0:951:600","crate_id":0,"name":"eq","span":{"filename":"src/builder/str.rs","begin":[163,4],"end":[165,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2662:217-0:3842:2162":{"id":"a:2:2662:217-0:3842:2162","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BoolishValueParser","id":"0:3842:2162","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1096":{"id":"0:1096","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[470,0],"end":[475,1]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":"Create an `i64` [`ValueParser`] from a `..` range\n\nSee [`RangedI64ValueParser`] for more control over the output type.\n\nSee also [`RangedU64ValueParser`]\n\n# Examples\n\n```rust\nlet mut cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"port\")\n            .long(\"port\")\n            .value_parser(..)\n            .action(clap::ArgAction::Set)\n            .required(true)\n    );\n\nlet m = cmd.try_get_matches_from_mut([\"cmd\", \"--port\", \"3001\"]).unwrap();\nlet port: i64 = *m.get_one(\"port\")\n    .expect(\"required\");\nassert_eq!(port, 3001);\n```","links":{"`RangedU64ValueParser`":"0:3810:2171","`RangedI64ValueParser`":"0:3791:2170","`ValueParser`":"0:1054:2174"},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"RangeFull","id":"2:46441:197","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1054:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1097:673"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:7736:6523-0:3704:1651":{"id":"a:2:7736:6523-0:3704:1651","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7736:6523","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:3704:1651","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:959:600":{"id":"0:959:600","crate_id":0,"name":"eq","span":{"filename":"src/builder/str.rs","begin":[189,4],"end":[191,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:681-0:3762:2168":{"id":"b:5:681-0:3762:2168","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:677:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PathBufValueParser","id":"0:3762:2168","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:683:5351","5:684:3662","5:685:8969"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2726:5340-0:3505:1650":{"id":"a:2:2726:5340-0:3505:1650","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2726:5340","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Command","id":"0:3505:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2523-0:4161:6460":{"id":"b:2:2523-0:4161:6460","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2493:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValuesRef","id":"0:4161:6460","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2526:127","2:2527:1427"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:186:2918":{"id":"0:186:2918","crate_id":0,"name":"allow_negative_numbers","span":{"filename":"src/builder/arg.rs","begin":[1400,4],"end":[1406,5]},"visibility":"public","docs":"Allows negative numbers to pass as values.\n\nThis is similar to [`Arg::allow_hyphen_values`] except that it only allows numbers,\nall other undefined leading hyphens will fail to parse.\n\n**NOTE:** Setting this requires [taking values][Arg::num_args]\n\n# Examples\n\n```rust\n# use clap::{Command, Arg};\nlet res = Command::new(\"myprog\")\n    .arg(Arg::new(\"num\").allow_negative_numbers(true))\n    .try_get_matches_from(vec![\n        \"myprog\", \"-20\"\n    ]);\nassert!(res.is_ok());\nlet m = res.unwrap();\nassert_eq!(m.get_one::<String>(\"num\").unwrap(), \"-20\");\n```","links":{"`Arg::allow_hyphen_values`":"0:185:2910","Arg::num_args":"0:178:1872"},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2662:217-0:4151:6459":{"id":"a:2:2662:217-0:4151:6459","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:4151:6459","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3":{"id":"0:3","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[100,0],"end":[100,34]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::builder::ArgAction","name":"ArgAction","id":"0:2796:1649","glob":false}},"0:149:915":{"id":"0:149:915","crate_id":0,"name":"new","span":{"filename":"src/builder/arg.rs","begin":[107,4],"end":[109,5]},"visibility":"public","docs":"Create a new [`Arg`] with a unique name.\n\nThe name is used to check whether or not the argument was used at\nruntime, get values, set relationships with other args, etc..\n\n**NOTE:** In the case of arguments that take values (i.e. [`Arg::action(ArgAction::Set)`])\nand positional arguments (i.e. those without a preceding `-` or `--`) the name will also\nbe displayed when the user prints the usage/help information of the program.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg};\nArg::new(\"config\")\n# ;\n```\n[`Arg::action(ArgAction::Set)`]: Arg::action()","links":{"Arg::action()":"0:176:1861","`Arg`":"0:3195:1652"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["id",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl Into<Id>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1089:673":{"id":"0:1089:673","crate_id":0,"name":"from","span":{"filename":"src/builder/value_parser.rs","begin":[351,4],"end":[354,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["value",{"kind":"resolved_path","inner":{"name":"std::ops::RangeInclusive","id":"2:46523:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i64"}}],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:681-0:3829:2161":{"id":"b:5:681-0:3829:2161","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:677:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BoolValueParser","id":"0:3829:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:683:5351","5:684:3662","5:685:8969"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1491":{"id":"0:1491","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[43,0],"end":[43,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"value_parser::FalseyValueParser","name":"FalseyValueParser","id":"0:3835:2164","glob":false}},"b:2:3321-0:4009:3985":{"id":"b:2:3321-0:4009:3985","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3319:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4009:3985","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3323:1440"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:938":{"id":"0:938","crate_id":0,"name":null,"span":{"filename":"src/builder/str.rs","begin":[120,0],"end":[125,1]},"visibility":{"restricted":{"parent":"0:912:1352","path":"::builder::str"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"2:2481:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:939:310"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:821":{"id":"0:821","crate_id":0,"name":null,"span":{"filename":"src/builder/range.rs","begin":[103,0],"end":[111,1]},"visibility":{"restricted":{"parent":"0:807:2147","path":"::builder::range"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["contains"],"trait":{"name":"RangeBounds","id":"2:3084:5446","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueRange","id":"0:3588:2156","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:822:5447","0:823:5450"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4178":{"id":"0:4178","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1524,9],"end":[1524,14]},"visibility":{"restricted":{"parent":"0:1754:6526","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawValues","id":"0:4174:6458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:4180:412"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1598:6129":{"id":"0:1598:6129","crate_id":0,"name":"use_stderr","span":{"filename":"src/error/mod.rs","begin":[199,4],"end":[201,5]},"visibility":"public","docs":"Should the message be written to `stdout` or not?","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2662:217-0:4009:3985":{"id":"a:2:2662:217-0:4009:3985","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4009:3985","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:916:311":{"id":"0:916:311","crate_id":0,"name":"as_str","span":{"filename":"src/builder/str.rs","begin":[36,4],"end":[38,5]},"visibility":"public","docs":"Get the raw string of the `Str`","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:432:4283":{"id":"0:432:4283","crate_id":0,"name":"render_usage","span":{"filename":"src/builder/command.rs","begin":[902,4],"end":[904,5]},"visibility":"public","docs":"Usage statement\n\n### Examples\n\n```rust\n# use clap::Command;\nuse std::io;\nlet mut cmd = Command::new(\"myprog\");\nprintln!(\"{}\", cmd.render_usage());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4528:412":{"id":"0:4528:412","crate_id":0,"name":"clone","span":{"filename":"src/util/id.rs","begin":[8,18],"end":[8,23]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:227:3429":{"id":"0:227:3429","crate_id":0,"name":"required_if_eq_all","span":{"filename":"src/builder/arg.rs","begin":[3352,4],"end":[3359,5]},"visibility":"public","docs":"Specify this argument is [required] based on multiple conditions.\n\nThe conditions are set up in a `(arg, val)` style tuple. The requirement will only become\nvalid if every one of the specified `arg`'s value equals its corresponding `val`.\n\n# Examples\n\n```rust\n# use clap::Arg;\nArg::new(\"config\")\n    .required_if_eq_all([\n        (\"extra\", \"val\"),\n        (\"option\", \"spec\")\n    ])\n# ;\n```\n\nSetting `Arg::required_if_eq_all([(arg, val)])` makes this arg required if all of the `arg`s\nare used at runtime and every value is equal to its corresponding `val`. If the `arg`'s value is\nanything other than `val`, this argument isn't required.\n\n```rust\n# use clap::{Command, Arg, ArgAction};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .required_if_eq_all([\n            (\"extra\", \"val\"),\n            (\"option\", \"spec\")\n        ])\n        .action(ArgAction::Set)\n        .long(\"config\"))\n    .arg(Arg::new(\"extra\")\n        .action(ArgAction::Set)\n        .long(\"extra\"))\n    .arg(Arg::new(\"option\")\n        .action(ArgAction::Set)\n        .long(\"option\"))\n    .try_get_matches_from(vec![\n        \"prog\", \"--option\", \"spec\"\n    ]);\n\nassert!(res.is_ok()); // We didn't use --option=spec --extra=val so \"cfg\" isn't required\n```\n\nSetting `Arg::required_if_eq_all([(arg, val)])` and having all of the `arg`s used with its\nvalue of `val` but *not* using this arg is an error.\n\n```rust\n# use clap::{Command, Arg, error::ErrorKind, ArgAction};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .required_if_eq_all([\n            (\"extra\", \"val\"),\n            (\"option\", \"spec\")\n        ])\n        .action(ArgAction::Set)\n        .long(\"config\"))\n    .arg(Arg::new(\"extra\")\n        .action(ArgAction::Set)\n        .long(\"extra\"))\n    .arg(Arg::new(\"option\")\n        .action(ArgAction::Set)\n        .long(\"option\"))\n    .try_get_matches_from(vec![\n        \"prog\", \"--extra\", \"val\", \"--option\", \"spec\"\n    ]);\n\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind(), ErrorKind::MissingRequiredArgument);\n```\n[required]: Arg::required()","links":{"Arg::required()":"0:166:1870"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["ifs",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7042:149","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"tuple","inner":[{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]},{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]}}}}]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl Into<Id>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}},{"name":"impl Into<OsStr>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}},{"name":"impl IntoIterator<Item = (impl Into<Id>, impl Into<OsStr>)>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7042:149","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"tuple","inner":[{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]},{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7735:6524-0:4009:3985":{"id":"a:2:7735:6524-0:4009:3985","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7735:6524","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4009:3985","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:500:3217":{"id":"0:500:3217","crate_id":0,"name":"hide","span":{"filename":"src/builder/command.rs","begin":[2669,4],"end":[2675,5]},"visibility":"public","docs":"Specifies that this [`subcommand`] should be hidden from help messages\n\n# Examples\n\n```rust\n# use clap::{Command, Arg};\nCommand::new(\"myprog\")\n    .subcommand(\n        Command::new(\"test\").hide(true)\n    )\n# ;\n```\n\n[`subcommand`]: crate::Command::subcommand()","links":{"crate::Command::subcommand()":"0:402:4142"},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3321-0:3662:1951":{"id":"b:2:3321-0:3662:1951","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3319:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3323:1440"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2676:225-0:4275:6462":{"id":"a:2:2676:225-0:4275:6462","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4275:6462","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:11":{"id":"0:11","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[106,0],"end":[106,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::util::Id","name":"Id","id":"0:4522:1658","glob":false}},"a:2:2676:225-0:4151:6459":{"id":"a:2:2676:225-0:4151:6459","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:4151:6459","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2513-0:1581:127":{"id":"b:2:2513-0:1581:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1581:127","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["2:2516:2263"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:911:2452":{"id":"0:911:2452","crate_id":0,"name":"into_resettable","span":{"filename":"src/builder/resettable.rs","begin":[208,4],"end":[210,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Resettable","id":"0:3603:2158","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"crate::Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3321-0:2796:1649":{"id":"b:2:3321-0:2796:1649","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3319:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgAction","id":"0:2796:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3323:1440"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:5:681-0:3852:2166":{"id":"b:5:681-0:3852:2166","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:677:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"NonEmptyStringValueParser","id":"0:3852:2166","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:683:5351","5:684:3662","5:685:8969"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:884:2452":{"id":"0:884:2452","crate_id":0,"name":"into_resettable","span":{"filename":"src/builder/resettable.rs","begin":[148,4],"end":[150,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Resettable","id":"0:3603:2158","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"char"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:883":{"id":"0:883","crate_id":0,"name":null,"span":{"filename":"src/builder/resettable.rs","begin":[147,0],"end":[151,1]},"visibility":{"restricted":{"parent":"0:844:2148","path":"::builder::resettable"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"char"}}],"bindings":[]}}},"for":{"kind":"primitive","inner":"char"},"items":["0:884:2452"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:242:3540":{"id":"0:242:3540","crate_id":0,"name":"get_help_heading","span":{"filename":"src/builder/arg.rs","begin":[3725,4],"end":[3730,5]},"visibility":"public","docs":"Get the help heading specified for this argument, if any","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7735:6524-0:3768:2163":{"id":"a:2:7735:6524-0:3768:2163","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:7735:6524","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7735:6524","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EnumValueParser","id":"0:3768:2163","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1338:2151":{"id":"0:1338:2151","crate_id":0,"name":"value_parser","span":{"filename":"src/builder/value_parser.rs","begin":[2166,4],"end":[2170,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"qualified_path","inner":{"name":"Parser","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:1306:2175","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:681-0:1054:2174":{"id":"b:5:681-0:1054:2174","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:677:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1054:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:683:5351","5:684:3662","5:685:8969"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:5:681-0:3704:1651":{"id":"b:5:681-0:3704:1651","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:677:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:3704:1651","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:683:5351","5:684:3662","5:685:8969"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4151:6459":{"id":"0:4151:6459","crate_id":0,"name":"Values","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1407,0],"end":[1411,1]},"visibility":"public","docs":"Iterate over multiple values for an argument via [`ArgMatches::remove_many`].\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ArgAction};\nlet mut m = Command::new(\"myapp\")\n    .arg(Arg::new(\"output\")\n        .short('o')\n        .action(ArgAction::Append))\n    .get_matches_from(vec![\"myapp\", \"-o\", \"val1\", \"-o\", \"val2\"]);\n\nlet mut values = m.remove_many::<String>(\"output\")\n    .unwrap();\n\nassert_eq!(values.next(), Some(String::from(\"val1\")));\nassert_eq!(values.next(), Some(String::from(\"val2\")));\nassert_eq!(values.next(), None);\n```","links":{"`ArgMatches::remove_many`":"0:1787:6690"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:2:7735:6524-0:4151:6459","a:2:2676:225-0:4151:6459","a:2:2662:217-0:4151:6459","a:2:2726:5340-0:4151:6459","a:2:7736:6523-0:4151:6459","b:2:2523-0:4151:6459","b:2:2238-0:4151:6459","b:2:2517-0:4151:6459","b:2:2513-0:4151:6459","b:2:2241-0:4151:6459","b:2:2528-0:4151:6459","b:2:7046-0:4151:6459","b:2:3321-0:4151:6459","b:5:681-0:4151:6459","0:4155","0:4158","0:1853","0:1858","0:1861","0:1863"]}},"0:2079":{"id":"0:2079","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/mod.rs","begin":[11,34],"end":[11,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"arg_matches::Indices","name":"Indices","id":"0:4254:6461","glob":false}},"0:550:5091":{"id":"0:550:5091","crate_id":0,"name":"get_after_long_help","span":{"filename":"src/builder/command.rs","begin":[3420,4],"end":[3422,5]},"visibility":"public","docs":"Returns the help heading for listing subcommands.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1796:6822":{"id":"0:1796:6822","crate_id":0,"name":"indices_of","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[853,4],"end":[860,5]},"visibility":"public","docs":"All indices an argument appeared at when parsing.\n\nIndices are similar to argv indices, but are not exactly 1:1.\n\nFor flags (i.e. those arguments which don't have an associated value), indices refer\nto occurrence of the switch, such as `-f`, or `--flag`. However, for options the indices\nrefer to the *values* `-o val` would therefore not represent two distinct indices, only the\nindex for `val` would be recorded. This is by design.\n\n*NOTE:* For more information about how clap indices compared to argv indices, see\n[`ArgMatches::index_of`]\n\n# Panics\n\nIf `id` is not a valid argument or group id.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg};\nlet m = Command::new(\"myapp\")\n    .arg(Arg::new(\"option\")\n        .short('o')\n        .value_delimiter(','))\n    .get_matches_from(vec![\"myapp\", \"-o=val1,val2,val3\"]);\n           // ARGV indices: ^0       ^1\n           // clap indices:             ^2   ^3   ^4\n           //\n           // clap sees the above as 'myapp -o val1 val2 val3'\n           //                         ^0    ^1 ^2   ^3   ^4\nassert_eq!(m.indices_of(\"option\").unwrap().collect::<Vec<_>>(), &[2, 3, 4]);\n```\n\nAnother quick example is when flags and options are used together\n\n```rust\n# use clap::{Command, Arg, ArgAction};\nlet m = Command::new(\"myapp\")\n    .arg(Arg::new(\"option\")\n        .short('o')\n        .action(ArgAction::Set)\n        .action(ArgAction::Append))\n    .arg(Arg::new(\"flag\")\n        .short('f')\n        .action(ArgAction::Count))\n    .get_matches_from(vec![\"myapp\", \"-o\", \"val1\", \"-f\", \"-o\", \"val2\", \"-f\"]);\n           // ARGV indices: ^0       ^1    ^2      ^3    ^4    ^5      ^6\n           // clap indices:                ^2      ^3          ^5      ^6\n\nassert_eq!(m.indices_of(\"option\").unwrap().collect::<Vec<_>>(), &[2, 5]);\nassert_eq!(m.indices_of(\"flag\").unwrap().collect::<Vec<_>>(), &[6]);\n```\n\nOne final example, which is an odd case; if we *don't* use  value delimiter as we did with\nthe first example above instead of `val1`, `val2` and `val3` all being distinc values, they\nwould all be a single value of `val1,val2,val3`, in which case they'd only receive a single\nindex.\n\n```rust\n# use clap::{Command, Arg, ArgAction};\nlet m = Command::new(\"myapp\")\n    .arg(Arg::new(\"option\")\n        .short('o')\n        .action(ArgAction::Set)\n        .num_args(1..))\n    .get_matches_from(vec![\"myapp\", \"-o=val1,val2,val3\"]);\n           // ARGV indices: ^0       ^1\n           // clap indices:             ^2\n           //\n           // clap sees the above as 'myapp -o \"val1,val2,val3\"'\n           //                         ^0    ^1  ^2\nassert_eq!(m.indices_of(\"option\").unwrap().collect::<Vec<_>>(), &[2]);\n```\n[`ArgMatches::index_of`]: ArgMatches::index_of()\n[delimiter]: Arg::value_delimiter()","links":{"ArgMatches::index_of()":"0:1795:6800"},"attrs":["#[track_caller]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:4254:6461","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2523-0:3859:2165":{"id":"b:2:2523-0:3859:2165","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2493:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MapValueParser","id":"0:3859:2165","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"P"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["2:2526:127","2:2527:1427"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:446:4376":{"id":"0:446:4376","crate_id":0,"name":"disable_help_subcommand","span":{"filename":"src/builder/command.rs","begin":[1228,4],"end":[1234,5]},"visibility":"public","docs":"Disables the `help` [`subcommand`].\n\n# Examples\n\n```rust\n# use clap::{Command, error::ErrorKind};\nlet res = Command::new(\"myprog\")\n    .disable_help_subcommand(true)\n    // Normally, creating a subcommand causes a `help` subcommand to automatically\n    // be generated as well\n    .subcommand(Command::new(\"test\"))\n    .try_get_matches_from(vec![\n        \"myprog\", \"help\"\n    ]);\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind(), ErrorKind::InvalidSubcommand);\n```\n\n[`subcommand`]: crate::Command::subcommand()","links":{"crate::Command::subcommand()":"0:402:4142"},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:740":{"id":"0:740","crate_id":0,"name":null,"span":{"filename":"src/builder/os_str.rs","begin":[177,0],"end":[182,1]},"visibility":{"restricted":{"parent":"0:707:2145","path":"::builder::os_str"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2232:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"1:2029:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:741:5354"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2726:5340-0:3248:2155":{"id":"a:2:2726:5340-0:3248:2155","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2726:5340","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgPredicate","id":"0:3248:2155","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3788":{"id":"0:3788","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1138,16],"end":[1138,21]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8596:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValuesParser","id":"0:3783:2169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3789:655"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2662:217-0:3547:181":{"id":"a:2:2662:217-0:3547:181","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:2726:5340-0:4142:6457":{"id":"a:2:2726:5340-0:4142:6457","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2726:5340","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IdsRef","id":"0:4142:6457","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4261":{"id":"0:4261","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1828,16],"end":[1828,21]},"visibility":{"restricted":{"parent":"0:1754:6526","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8596:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:4254:6461","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:4263:655"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2523-0:3547:181":{"id":"b:2:2523-0:3547:181","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2493:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2526:127","2:2527:1427"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:840":{"id":"0:840","crate_id":0,"name":null,"span":{"filename":"src/builder/range.rs","begin":[173,0],"end":[182,1]},"visibility":{"restricted":{"parent":"0:807:2147","path":"::builder::range"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:8601:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueRange","id":"0:3588:2156","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:841:655"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1589:915":{"id":"0:1589:915","crate_id":0,"name":"new","span":{"filename":"src/error/mod.rs","begin":[124,4],"end":[139,5]},"visibility":"public","docs":"Create an error with a pre-defined message\n\nSee also\n- [`Error::insert`]\n- [`Error::with_cmd`]\n\n# Example\n\n ```\n# use clap::error::ErrorKind;\n# use clap::error::ContextKind;\n# use clap::error::ContextValue;\n\nlet cmd = clap::Command::new(\"prog\");\n\nlet mut err = clap::Error::new(ErrorKind::ValueValidation)\n    .with_cmd(&cmd);\nerr.insert(ContextKind::InvalidArg, ContextValue::String(\"--foo\".to_owned()));\nerr.insert(ContextKind::InvalidValue, ContextValue::String(\"bar\".to_owned()));\n\nerr.print();\n```","links":{"`Error::with_cmd`":"0:1590:5774","`Error::insert`":"0:1597:1939"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["kind",{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4009:3985","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1270:59":{"id":"0:1270:59","crate_id":0,"name":"default","span":{"filename":"src/builder/value_parser.rs","begin":[1860,4],"end":[1862,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7735:6524-0:4142:6457":{"id":"a:2:7735:6524-0:4142:6457","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7735:6524","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IdsRef","id":"0:4142:6457","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1106:673":{"id":"0:1106:673","crate_id":0,"name":"from","span":{"filename":"src/builder/value_parser.rs","begin":[540,4],"end":[543,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["values",{"kind":"resolved_path","inner":{"name":"Vec","id":"5:6400:240","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2807:1873":{"id":"0:2807:1873","crate_id":0,"name":"Help","span":{"filename":"src/builder/action.rs","begin":[246,4],"end":[246,8]},"visibility":"default","docs":"When encountered, display [`Command::print_help`][super::Command::print_help]\n\nDepending on the flag, [`Command::print_long_help`][super::Command::print_long_help] may be shown\n\n# Examples\n\n ```\n# use clap::Command;\n# use clap::Arg;\nlet cmd = Command::new(\"mycmd\")\n    .arg(\n        Arg::new(\"special-help\")\n            .short('?')\n            .action(clap::ArgAction::Help)\n    );\n\n// Existing help still exists\nlet err = cmd.clone().try_get_matches_from([\"mycmd\", \"-h\"]).unwrap_err();\nassert_eq!(err.kind(), clap::error::ErrorKind::DisplayHelp);\n\n// New help available\nlet err = cmd.try_get_matches_from([\"mycmd\", \"-?\"]).unwrap_err();\nassert_eq!(err.kind(), clap::error::ErrorKind::DisplayHelp);\n```","links":{"super::Command::print_help":"0:422:4234","super::Command::print_long_help":"0:423:4244"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"0:1483":{"id":"0:1483","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[35,0],"end":[35,31]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"resettable::Resettable","name":"Resettable","id":"0:3603:2158","glob":false}},"0:3998:1553":{"id":"0:3998:1553","crate_id":0,"name":"0","span":{"filename":"src/error/context.rs","begin":[91,11],"end":[91,16]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"primitive","inner":"isize"}},"0:4212:6627":{"id":"0:4212:6627","crate_id":0,"name":"OccurrencesRef","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1670,0],"end":[1673,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":[]}},"0:903":{"id":"0:903","crate_id":0,"name":null,"span":{"filename":"src/builder/resettable.rs","begin":[195,0],"end":[199,1]},"visibility":{"restricted":{"parent":"0:844:2148","path":"::builder::resettable"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"generic","inner":"I"},"items":["0:905:2452"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:756":{"id":"0:756","crate_id":0,"name":null,"span":{"filename":"src/builder/os_str.rs","begin":[229,0],"end":[234,1]},"visibility":{"restricted":{"parent":"0:707:2145","path":"::builder::os_str"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2285:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"std::string::String","id":"5:6967:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:757:600"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2726:5340-0:3859:2165":{"id":"a:2:2726:5340-0:3859:2165","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:2726:5340","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:2726:5340","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2726:5340","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MapValueParser","id":"0:3859:2165","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"P"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1343:1667":{"id":"0:1343:1667","crate_id":0,"name":"Parser","span":{"filename":"src/builder/value_parser.rs","begin":[2179,4],"end":[2179,44]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"RangedU64ValueParser","id":"0:3810:2171","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}}}}}},"0:2006":{"id":"0:2006","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1845,0],"end":[1849,1]},"visibility":{"restricted":{"parent":"0:1754:6526","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["nth_back","rfold","advance_back_by","try_rfold","rfind"],"trait":{"name":"DoubleEndedIterator","id":"2:7079:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:4254:6461","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:2008:6920"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:7735:6524-0:3547:181":{"id":"a:2:7735:6524-0:3547:181","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7735:6524","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:494:4796":{"id":"0:494:4796","crate_id":0,"name":"visible_long_flag_alias","span":{"filename":"src/builder/command.rs","begin":[2506,4],"end":[2513,5]},"visibility":"public","docs":"Add an alias, which functions as a \"visible\" long flag subcommand.\n\nThis will automatically dispatch as if this subcommand was used. This is more efficient,\nand easier than creating multiple hidden subcommands as one only needs to check for the\nexistence of this command, and not all variants.\n\nSee also [`Command::long_flag_alias`].\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg, };\nlet m = Command::new(\"myprog\")\n            .subcommand(Command::new(\"test\").long_flag(\"test\")\n                .visible_long_flag_alias(\"testing\"))\n            .get_matches_from(vec![\"myprog\", \"--testing\"]);\nassert_eq!(m.subcommand_name(), Some(\"test\"));\n```\n[`Command::long_flag_alias`]: Command::long_flag_alias()","links":{"Command::long_flag_alias()":"0:487:4753"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["name",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl IntoResettable<Str>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:110:2259":{"id":"0:110:2259","crate_id":0,"name":"takes_values","span":{"filename":"src/builder/action.rs","begin":[280,4],"end":[290,5]},"visibility":"public","docs":"Returns whether this action accepts values on the command-line\n\n[`default_values`][super::Arg::default_values] and [`env`][super::Arg::env] may still be\nprocessed.","links":{"super::Arg::default_values":"0:195:3008"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:513:5040":{"id":"0:513:5040","crate_id":0,"name":"get_bin_name","span":{"filename":"src/builder/command.rs","begin":[3225,4],"end":[3227,5]},"visibility":"public","docs":"Get the name of the binary.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3772":{"id":"0:3772","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1023,9],"end":[1023,14]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"crate::ValueEnum","id":"0:67:1669","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EnumValueParser","id":"0:3768:2163","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"items":["0:3774:412"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:14":{"id":"0:14","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[115,24],"end":[115,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::derive::Args","name":"Args","id":"0:59:1664","glob":false}},"0:238":{"id":"0:238","crate_id":0,"name":null,"span":{"filename":"src/builder/arg.rs","begin":[3695,0],"end":[4058,1]},"visibility":{"restricted":{"parent":"0:124:1849","path":"::builder::arg"}},"docs":"# Reflection","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3195:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:239:1859","0:240:3534","0:241:3538","0:242:3540","0:244:1869","0:245:3545","0:247:3550","0:249:3552","0:250:1864","0:251:3556","0:253:3558","0:255:3560","0:256:3564","0:258:1852","0:259:3571","0:261:3575","0:262:3578","0:263:3580","0:264:3582","0:266:3594","0:267:3600","0:268:3602","0:271:3606","0:272:3608","0:273:1856","0:275:3566","0:277:3619","0:278:3621","0:279:3623","0:280:3625","0:281:3627","0:282:3633","0:283:3635","0:284:3637","0:285:3639","0:286:3641","0:287:3643","0:288:3645"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1257:5682":{"id":"0:1257:5682","crate_id":0,"name":"parse_ref","span":{"filename":"src/builder/value_parser.rs","begin":[1733,4],"end":[1751,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["cmd",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Command","id":"0:3505:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["_arg",{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Arg","id":"0:3195:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}}}],["value",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"std::ffi::OsStr","id":"1:2029:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48278:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Value","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:1125:2173","args":null}}}},{"type":{"kind":"resolved_path","inner":{"name":"crate::Error","id":"0:12:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3571:1966":{"id":"0:3571:1966","crate_id":0,"name":"PossibleValue","span":{"filename":"src/builder/possible_value.rs","begin":[35,0],"end":[40,1]},"visibility":"public","docs":"A possible value of an argument.\n\nThis is used for specifying [possible values] of [Args].\n\nSee also [`PossibleValuesParser`][crate::builder::PossibleValuesParser]\n\n**NOTE:** Most likely you can use strings, rather than `PossibleValue` as it is only required\nto [hide] single values from help messages and shell completions or to attach [help] to\npossible values.\n\n# Examples\n\n```rust\n# use clap::{Arg, builder::PossibleValue, ArgAction};\nlet cfg = Arg::new(\"config\")\n    .action(ArgAction::Set)\n    .value_name(\"FILE\")\n    .value_parser([\n        PossibleValue::new(\"fast\"),\n        PossibleValue::new(\"slow\").help(\"slower than fast\"),\n        PossibleValue::new(\"secret speed\").hide(true)\n    ]);\n```\n\n[Args]: crate::Arg\n[possible values]: crate::builder::ValueParser::possible_values\n[hide]: PossibleValue::hide()\n[help]: PossibleValue::help()","links":{"crate::builder::ValueParser::possible_values":"0:1079:3567","PossibleValue::hide()":"0:788:3217","crate::builder::PossibleValuesParser":"0:3783:2169","crate::Arg":"0:3195:1652","PossibleValue::help()":"0:787:1563"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:785","0:792","a:2:7735:6524-0:3571:1966","a:2:2676:225-0:3571:1966","a:2:2662:217-0:3571:1966","a:2:2726:5340-0:3571:1966","a:2:7736:6523-0:3571:1966","b:2:2523-0:3571:1966","b:2:2238-0:3571:1966","b:2:2517-0:3571:1966","b:2:2513-0:3571:1966","b:2:2241-0:3571:1966","b:2:2528-0:3571:1966","b:2:3321-0:3571:1966","b:5:681-0:3571:1966","0:3576","0:3578","0:3580","0:3582","0:3583","0:3585","0:3586","0:804"]}},"a:2:7735:6524-0:4275:6462":{"id":"a:2:7735:6524-0:4275:6462","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7735:6524","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4275:6462","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:750":{"id":"0:750","crate_id":0,"name":null,"span":{"filename":"src/builder/os_str.rs","begin":[210,0],"end":[215,1]},"visibility":{"restricted":{"parent":"0:707:2145","path":"::builder::os_str"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2285:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"1:2029:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:751:600"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1017:59":{"id":"0:1017:59","crate_id":0,"name":"default","span":{"filename":"src/builder/styled_str.rs","begin":[240,4],"end":[243,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:327:3471":{"id":"0:327:3471","crate_id":0,"name":"requires_all","span":{"filename":"src/builder/arg_group.rs","begin":[403,4],"end":[408,5]},"visibility":"public","docs":"Specify arguments or groups that must be present when this group is.\n\nThis is not to be confused with a [required group]. Requirement rules function just like\n[argument requirement rules], you can name other arguments or groups that must be present\nwhen one of the arguments from this group is used.\n\n**NOTE:** The names provided may be an argument or group name\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ArgGroup, error::ErrorKind, ArgAction};\nlet result = Command::new(\"myprog\")\n    .arg(Arg::new(\"flag\")\n        .short('f')\n        .action(ArgAction::SetTrue))\n    .arg(Arg::new(\"color\")\n        .short('c')\n        .action(ArgAction::SetTrue))\n    .arg(Arg::new(\"debug\")\n        .short('d')\n        .action(ArgAction::SetTrue))\n    .arg(Arg::new(\"verb\")\n        .short('v')\n        .action(ArgAction::SetTrue))\n    .group(ArgGroup::new(\"req_flags\")\n        .args([\"flag\", \"color\"])\n        .requires_all([\"debug\", \"verb\"]))\n    .try_get_matches_from(vec![\"myprog\", \"-c\", \"-d\"]);\n// because we used an arg from the group, and the group requires \"-d\" and \"-v\" to be used,\n// yet we only used \"-d\" it's an error\nassert!(result.is_err());\nlet err = result.unwrap_err();\nassert_eq!(err.kind(), ErrorKind::MissingRequiredArgument);\n```\n[required group]: ArgGroup::required()\n[argument requirement rules]: crate::Arg::requires_ifs()","links":{"ArgGroup::required()":"0:325:1870","crate::Arg::requires_ifs()":"0:230:3469"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["ns",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7042:149","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}}}}]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl Into<Id>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}},{"name":"impl IntoIterator<Item = impl Into<Id>>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7042:149","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7735:6524-0:3783:2169":{"id":"a:2:7735:6524-0:3783:2169","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7735:6524","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValuesParser","id":"0:3783:2169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:2752":{"id":"0:2752","crate_id":0,"name":null,"span":{"filename":"src/util/id.rs","begin":[133,0],"end":[138,1]},"visibility":{"restricted":{"parent":"0:2715:1860","path":"::util::id"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2285:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"items":["0:2753:600"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3592":{"id":"0:3592","crate_id":0,"name":null,"span":{"filename":"src/builder/range.rs","begin":[2,15],"end":[2,20]},"visibility":{"restricted":{"parent":"0:807:2147","path":"::builder::range"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueRange","id":"0:3588:2156","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3593:412"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2523-0:3829:2161":{"id":"b:2:2523-0:3829:2161","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2493:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BoolValueParser","id":"0:3829:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2526:127","2:2527:1427"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2523-0:4091:6463":{"id":"b:2:2523-0:4091:6463","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2493:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4091:6463","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2526:127","2:2527:1427"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2517-0:1549:6080":{"id":"b:2:2517-0:1549:6080","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"KindFormatter","id":"0:1549:6080","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2519:673"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1092":{"id":"0:1092","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[410,0],"end":[415,1]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":"Create an `i64` [`ValueParser`] from a `..M` range\n\nSee [`RangedI64ValueParser`] for more control over the output type.\n\nSee also [`RangedU64ValueParser`]\n\n# Examples\n\n```rust\nlet mut cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"port\")\n            .long(\"port\")\n            .value_parser(..3000)\n            .action(clap::ArgAction::Set)\n            .required(true)\n    );\n\nlet m = cmd.try_get_matches_from_mut([\"cmd\", \"--port\", \"80\"]).unwrap();\nlet port: i64 = *m.get_one(\"port\")\n    .expect(\"required\");\nassert_eq!(port, 80);\n```","links":{"`ValueParser`":"0:1054:2174","`RangedU64ValueParser`":"0:3810:2171","`RangedI64ValueParser`":"0:3791:2170"},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"RangeTo","id":"2:46501:199","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i64"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1054:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1093:673"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3243":{"id":"0:3243","crate_id":0,"name":null,"span":{"filename":"src/builder/arg_group.rs","begin":[85,32],"end":[85,41]},"visibility":{"restricted":{"parent":"0:314:2142","path":"::builder::arg_group"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2285:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3229:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3229:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3244:600"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:440:4345":{"id":"0:440:4345","crate_id":0,"name":"term_width","span":{"filename":"src/builder/command.rs","begin":[1078,4],"end":[1081,5]},"visibility":"public","docs":"Sets the terminal width at which to wrap help messages.\n\nUsing `0` will ignore terminal widths and use source formatting.\n\nDefaults to current terminal width when `wrap_help` feature flag is enabled.  If the flag\nis disabled or it cannot be determined, the default is 100.\n\n**NOTE:** This setting applies globally and *not* on a per-command basis.\n\n**NOTE:** This requires the [`wrap_help` feature][crate::_features]\n\n# Examples\n\n```no_run\n# use clap::Command;\nCommand::new(\"myprog\")\n    .term_width(80)\n# ;\n```","links":{},"attrs":["#[inline]","#[must_use]","#[cfg(any(not(feature = \"unstable-v5\"), feature = \"wrap_help\"))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["width",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7735:6524-0:4522:1658":{"id":"a:2:7735:6524-0:4522:1658","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7735:6524","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:3321-0:3768:2163":{"id":"b:2:3321-0:3768:2163","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3319:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EnumValueParser","id":"0:3768:2163","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"items":["2:3323:1440"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:7049:6930":{"id":"2:7049:6930","crate_id":2,"name":"IntoIter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"I"}}},"0:1214":{"id":"0:1214","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1396,0],"end":[1405,1]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"std::convert::TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"2:3084:5446","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:3791:2170","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:1217:673"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11491:1855":{"id":"2:11491:1855","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"str::matches":"2:11491:1855","`DoubleEndedIterator`":"2:7079:120","prim@char":"1:12300:408","self::pattern":"2:11116:8056"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:50314:8074","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11121:8050","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2513-0:3783:2169":{"id":"b:2:2513-0:3783:2169","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValuesParser","id":"0:3783:2169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2516:2263"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:964":{"id":"0:964","crate_id":0,"name":null,"span":{"filename":"src/builder/str.rs","begin":[207,0],"end":[212,1]},"visibility":{"restricted":{"parent":"0:912:1352","path":"::builder::str"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2285:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:6967:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:965:600"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1328:1667":{"id":"0:1328:1667","crate_id":0,"name":"Parser","span":{"filename":"src/builder/value_parser.rs","begin":[2141,4],"end":[2141,44]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:3791:2170","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u16"}}],"bindings":[]}}}}}},"0:1322:1667":{"id":"0:1322:1667","crate_id":0,"name":"Parser","span":{"filename":"src/builder/value_parser.rs","begin":[2125,4],"end":[2125,43]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:3791:2170","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}}},"a:2:7736:6523-0:3588:2156":{"id":"a:2:7736:6523-0:3588:2156","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7736:6523","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueRange","id":"0:3588:2156","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:7735:6524-0:4091:6463":{"id":"a:2:7735:6524-0:4091:6463","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7735:6524","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4091:6463","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1237":{"id":"0:1237","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1603,0],"end":[1607,1]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"std::convert::TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2564:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangedU64ValueParser","id":"0:3810:2171","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:1239:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1818:6673":{"id":"0:1818:6673","crate_id":0,"name":"try_get_raw_occurrences","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1142,4],"end":[1157,5]},"visibility":"public","docs":"Non-panicking version of [`ArgMatches::get_raw_occurrences`]","links":{"`ArgMatches::get_raw_occurrences`":"0:1784:6671"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48278:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"RawOccurrences","id":"0:4236:6672","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4091:6463","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3256":{"id":"0:3256","crate_id":0,"name":null,"span":{"filename":"src/builder/arg_predicate.rs","begin":[6,16],"end":[6,21]},"visibility":{"restricted":{"parent":"0:335:2143","path":"::builder::arg_predicate"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8596:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgPredicate","id":"0:3248:2155","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3257:655"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2523-0:3978:6082":{"id":"b:2:2523-0:3978:6082","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2493:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextValue","id":"0:3978:6082","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2526:127","2:2527:1427"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2517-0:3547:181":{"id":"b:2:2517-0:3547:181","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2519:673"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:761:600":{"id":"0:761:600","crate_id":0,"name":"eq","span":{"filename":"src/builder/os_str.rs","begin":[244,4],"end":[246,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3321-0:3547:181":{"id":"b:2:3321-0:3547:181","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3319:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3323:1440"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:7735:6524-0:3791:2170":{"id":"a:2:7735:6524-0:3791:2170","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:7735:6524","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7735:6524","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangedI64ValueParser","id":"0:3791:2170","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11541:29206":{"id":"2:11541:29206","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4465:29206"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:50427:8069","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:681-0:3638:2154":{"id":"b:5:681-0:3638:2154","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:677:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:683:5351","5:684:3662","5:685:8969"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3645":{"id":"0:3645","crate_id":0,"name":null,"span":{"filename":"src/builder/str.rs","begin":[5,25],"end":[5,27]},"visibility":{"restricted":{"parent":"0:912:1352","path":"::builder::str"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2290:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:94:2069":{"id":"0:94:2069","crate_id":0,"name":"update_from_arg_matches","span":{"filename":"src/derive.rs","begin":[439,4],"end":[441,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["matches",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4112:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48278:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:12:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3321-0:4151:6459":{"id":"b:2:3321-0:4151:6459","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3319:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:4151:6459","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:3323:1440"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2676:225-0:3842:2162":{"id":"a:2:2676:225-0:3842:2162","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BoolishValueParser","id":"0:3842:2162","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:864":{"id":"0:864","crate_id":0,"name":null,"span":{"filename":"src/builder/resettable.rs","begin":[69,0],"end":[76,1]},"visibility":{"restricted":{"parent":"0:844:2148","path":"::builder::resettable"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"char"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"char"}}],"bindings":[]}}}},"items":["0:865:2452"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:7735:6524-0:1553:6083":{"id":"a:2:7735:6524-0:1553:6083","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7735:6524","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RichFormatter","id":"0:1553:6083","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1871:928":{"id":"0:1871:928","crate_id":0,"name":"next","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1473,4],"end":[1475,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"2:7156:156","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:681-0:4542:1657":{"id":"b:5:681-0:4542:1657","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:677:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:4542:1657","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:683:5351","5:684:3662","5:685:8969"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:719":{"id":"0:719","crate_id":0,"name":null,"span":{"filename":"src/builder/os_str.rs","begin":[111,0],"end":[115,1]},"visibility":{"restricted":{"parent":"0:707:2145","path":"::builder::os_str"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'static","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"1:2029:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:720:673"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3618":{"id":"0:3618","crate_id":0,"name":null,"span":{"filename":"src/builder/resettable.rs","begin":[31,29],"end":[31,38]},"visibility":{"restricted":{"parent":"0:844:2148","path":"::builder::resettable"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2672:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Resettable","id":"0:3603:2158","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:0:1685":{"id":"0:0:1685","crate_id":0,"name":"clap","span":{"filename":"src/lib.rs","begin":[6,0],"end":[154,84]},"visibility":"public","docs":"> **Command Line Argument Parser for Rust**\n\nQuick Links:\n- Derive [tutorial][_derive::_tutorial] and [reference][_derive]\n- Builder [tutorial][_tutorial] and [reference](index.html)\n- [Cookbook][_cookbook]\n- [FAQ][_faq]\n- [Discussions](https://github.com/clap-rs/clap/discussions)\n\n## Aspirations\n\n- Out of the box, users get a polished CLI experience\n  - Including common argument behavior, help generation, suggested fixes for users, colored output, [shell completions](https://github.com/clap-rs/clap/tree/master/clap_complete), etc\n- Flexible enough to port your existing CLI interface\n  - However, we won't necessarily streamline support for each use case\n- Reasonable parse performance\n- Resilient maintainership, including\n  - Willing to break compatibility rather than batching up breaking changes in large releases\n  - Leverage feature flags to keep to one active branch\n  - Being under [WG-CLI](https://github.com/rust-cli/team/) to increase the bus factor\n- We follow semver and will wait about 6-9 months between major breaking changes\n- We will support the last two minor Rust releases (MSRV, currently 1.64.0)\n\nWhile these aspirations can be at odds with fast build times and low binary\nsize, we will still strive to keep these reasonable for the flexibility you\nget.  Check out the\n[argparse-benchmarks](https://github.com/rust-cli/argparse-benchmarks-rs) for\nCLI parsers optimized for other use cases.\n\n## Example\n\nRun\n```console\n$ cargo add clap --features derive\n```\n*(See also [feature flag reference][_features])*\n\nThen define your CLI in `main.rs`:\n ```ignore\nuse clap::Parser;\n\n/// Simple program to greet a person\n#[derive(Parser, Debug)]\n#[command(author, version, about, long_about = None)]\nstruct Args {\n    /// Name of the person to greet\n    #[arg(short, long)]\n    name: String,\n\n    /// Number of times to greet\n    #[arg(short, long, default_value_t = 1)]\n    count: u8,\n}\n\nfn main() {\n    let args = Args::parse();\n\n    for _ in 0..args.count {\n        println!(\"Hello {}!\", args.name)\n    }\n}\n```\n\nAnd try it out:\n```console\n$ demo --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: demo[EXE] [OPTIONS] --name <NAME>\n\nOptions:\n  -n, --name <NAME>    Name of the person to greet\n  -c, --count <COUNT>  Number of times to greet [default: 1]\n  -h, --help           Print help\n  -V, --version        Print version\n\n$ demo --name Me\nHello Me!\n\n```\n*(version number and `.exe` extension on windows replaced by placeholders)*\n\nSee also the derive [tutorial][_derive::_tutorial] and [reference][_derive]\n\n### Related Projects\n\nAugment clap:\n- [wild](https://crates.io/crates/wild) for supporting wildcards (`*`) on Windows like you do Linux\n- [argfile](https://crates.io/crates/argfile) for loading additional arguments from a file (aka response files)\n- [shadow-rs](https://crates.io/crates/shadow-rs) for generating `Command::long_version`\n- [clap_mangen](https://crates.io/crates/clap_mangen) for generating man page source (roff)\n- [clap_complete](https://crates.io/crates/clap_complete) for shell completion support\n\nCLI Helpers\n- [clap-verbosity-flag](https://crates.io/crates/clap-verbosity-flag)\n- [clap-cargo](https://crates.io/crates/clap-cargo)\n- [concolor-clap](https://crates.io/crates/concolor-clap)\n\nTesting\n- [`trycmd`](https://crates.io/crates/trycmd):  Bulk snapshot testing\n- [`snapbox`](https://crates.io/crates/snapbox):  Specialized snapshot testing\n- [`assert_cmd`](https://crates.io/crates/assert_cmd) and [`assert_fs`](https://crates.io/crates/assert_fs): Customized testing\n\nDocumentation:\n- [Command-line Apps for Rust](https://rust-cli.github.io/book/index.html) book\n","links":{},"attrs":["#![doc(html_logo_url =\n\"https://raw.githubusercontent.com/clap-rs/clap/master/assets/clap.png\")]","#![warn(missing_docs, missing_debug_implementations,\nmissing_copy_implementations, trivial_casts, unused_allocation,\ntrivial_numeric_casts, clippy :: single_char_pattern)]","#![forbid(unsafe_code)]","#![allow(clippy :: single_component_path_imports)]","#![allow(clippy :: branches_sharing_code)]","#![allow(clippy :: if_same_then_else)]","#![allow(clippy :: collapsible_else_if)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:107:1648","0:1509:1662","0:1660:1654","0:3","0:4","0:5","0:7","0:8","0:9","0:10","0:11","0:12:127","0:14","0:15","0:16","0:17","0:18","0:19","0:22:1834","0:24:1849","0:1395:2151"],"is_stripped":false}},"0:755:600":{"id":"0:755:600","crate_id":0,"name":"eq","span":{"filename":"src/builder/os_str.rs","begin":[225,4],"end":[227,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"std::string::String","id":"5:6967:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2726:5340-0:4091:6463":{"id":"a:2:2726:5340-0:4091:6463","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2726:5340","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4091:6463","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2241-0:1553:6083":{"id":"b:2:2241-0:1553:6083","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2235:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RichFormatter","id":"0:1553:6083","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2243:26835"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:744":{"id":"0:744","crate_id":0,"name":null,"span":{"filename":"src/builder/os_str.rs","begin":[190,0],"end":[195,1]},"visibility":{"restricted":{"parent":"0:707:2145","path":"::builder::os_str"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2285:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"primitive","inner":"str"},"items":["0:745:600"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2517-0:4091:6463":{"id":"b:2:2517-0:4091:6463","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4091:6463","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2519:673"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2676:225-0:3749:2172":{"id":"a:2:2676:225-0:3749:2172","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StringValueParser","id":"0:3749:2172","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:2761:600":{"id":"0:2761:600","crate_id":0,"name":"eq","span":{"filename":"src/util/id.rs","begin":[161,4],"end":[163,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:837:673":{"id":"0:837:673","crate_id":0,"name":"from","span":{"filename":"src/builder/range.rs","begin":[158,4],"end":[162,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["range",{"kind":"resolved_path","inner":{"name":"std::ops::RangeInclusive","id":"2:46523:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3643:412":{"id":"0:3643:412","crate_id":0,"name":"clone","span":{"filename":"src/builder/str.rs","begin":[5,18],"end":[5,23]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:806:673":{"id":"0:806:673","crate_id":0,"name":"from","span":{"filename":"src/builder/possible_value.rs","begin":[231,4],"end":[233,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["s",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2676:225-0:4142:6457":{"id":"a:2:2676:225-0:4142:6457","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IdsRef","id":"0:4142:6457","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2238-0:4542:1657":{"id":"b:2:2238-0:4542:1657","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2232:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:4542:1657","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2240:5354"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3583":{"id":"0:3583","crate_id":0,"name":null,"span":{"filename":"src/builder/possible_value.rs","begin":[34,32],"end":[34,41]},"visibility":{"restricted":{"parent":"0:780:2146","path":"::builder::possible_value"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2285:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:3571:1966","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:3571:1966","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3584:600"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:7735:6524-0:3852:2166":{"id":"a:2:7735:6524-0:3852:2166","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7735:6524","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"NonEmptyStringValueParser","id":"0:3852:2166","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1188:5472":{"id":"0:1188:5472","crate_id":0,"name":"Value","span":{"filename":"src/builder/value_parser.rs","begin":[1149,4],"end":[1149,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"String","id":"5:6967:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"b:2:2241-0:4275:6462":{"id":"b:2:2241-0:4275:6462","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2235:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4275:6462","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2243:26835"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:2759:600":{"id":"0:2759:600","crate_id":0,"name":"eq","span":{"filename":"src/util/id.rs","begin":[155,4],"end":[157,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"std::string::String","id":"5:6967:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:681-0:4151:6459":{"id":"b:5:681-0:4151:6459","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:677:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:4151:6459","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["5:683:5351","5:684:3662","5:685:8969"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2528-0:4522:1658":{"id":"b:2:2528-0:4522:1658","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2531:127","2:2532:1426"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:954":{"id":"0:954","crate_id":0,"name":null,"span":{"filename":"src/builder/str.rs","begin":[174,0],"end":[179,1]},"visibility":{"restricted":{"parent":"0:912:1352","path":"::builder::str"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2285:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"items":["0:955:600"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:2756":{"id":"0:2756","crate_id":0,"name":null,"span":{"filename":"src/util/id.rs","begin":[146,0],"end":[151,1]},"visibility":{"restricted":{"parent":"0:2715:1860","path":"::util::id"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2285:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2757:600"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11423:5480":{"id":"2:11423:5480","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:10684:5546"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4263:655":{"id":"0:4263:655","crate_id":0,"name":"fmt","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1828,16],"end":[1828,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:8556:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8545:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5088:29208":{"id":"5:5088:29208","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:6967:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6967:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11121:8050","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3774:412":{"id":"0:3774:412","crate_id":0,"name":"clone","span":{"filename":"src/builder/value_parser.rs","begin":[1023,9],"end":[1023,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EnumValueParser","id":"0:3768:2163","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:525:3556":{"id":"0:525:3556","crate_id":0,"name":"get_visible_aliases","span":{"filename":"src/builder/command.rs","begin":[3302,4],"end":[3307,5]},"visibility":"public","docs":"Iterate through the *visible* aliases for this subcommand.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:7156:156","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}}]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'_"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:431:4280":{"id":"0:431:4280","crate_id":0,"name":"render_long_version","span":{"filename":"src/builder/command.rs","begin":[888,4],"end":[890,5]},"visibility":"public","docs":"Version message rendered as if the user ran `--version`.\n\nSee also [`Command::render_version`].\n\n### Coloring\n\nThis function does not try to color the message nor it inserts any [ANSI escape codes].\n\n### Examples\n\n```rust\n# use clap::Command;\nuse std::io;\nlet cmd = Command::new(\"myprog\");\nprintln!(\"{}\", cmd.render_long_version());\n```\n[`io::Write`]: std::io::Write\n[`-V` (short)]: Command::version()\n[`--version` (long)]: Command::long_version()\n[ANSI escape codes]: https://en.wikipedia.org/wiki/ANSI_escape_code","links":{"`Command::render_version`":"0:430:4275"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6967:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2523-0:4275:6462":{"id":"b:2:2523-0:4275:6462","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2493:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4275:6462","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2526:127","2:2527:1427"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11420:29176":{"id":"2:11420:29176","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:11418:29175"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2662:217-0:3756:2167":{"id":"a:2:2662:217-0:3756:2167","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsStringValueParser","id":"0:3756:2167","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:54:1666":{"id":"0:54:1666","crate_id":0,"name":"FromArgMatches","span":{"filename":"src/derive.rs","begin":[176,0],"end":[254,1]},"visibility":"public","docs":"Converts an instance of [`ArgMatches`] to a user-defined container.\n\nDerived as part of [`Parser`], [`Args`], and [`Subcommand`].","links":{"`Subcommand`":"0:63:1668","`Parser`":"0:36:1667","`ArgMatches`":"0:4112:1655","`Args`":"0:59:1664"},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:55:2065","0:56:2018","0:57:2069","0:58:2037"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:90"]}},"a:2:2676:225-0:1581:127":{"id":"a:2:2676:225-0:1581:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1581:127","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1820:6683":{"id":"0:1820:6683","crate_id":0,"name":"try_remove_one","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1160,4],"end":[1172,5]},"visibility":"public","docs":"Non-panicking version of [`ArgMatches::remove_one`]","links":{"`ArgMatches::remove_one`":"0:1785:6682"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48278:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"MatchesError","id":"0:4091:6463","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Any","id":"2:3319:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3562:419":{"id":"0:3562:419","crate_id":0,"name":"cmp","span":{"filename":"src/builder/os_str.rs","begin":[7,52],"end":[7,55]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::cmp::Ordering","id":"2:38204:180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3775":{"id":"0:3775","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1023,16],"end":[1023,21]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"2:8596:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"crate::ValueEnum","id":"0:67:1669","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8596:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EnumValueParser","id":"0:3768:2163","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"items":["0:3777:655"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2726:5340-0:1549:6080":{"id":"a:2:2726:5340-0:1549:6080","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2726:5340","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"KindFormatter","id":"0:1549:6080","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:439:1564":{"id":"0:439:1564","crate_id":0,"name":"color","span":{"filename":"src/builder/command.rs","begin":[1044,4],"end":[1054,5]},"visibility":"public","docs":"Sets when to color output.\n\n**NOTE:** This choice is propagated to all child subcommands.\n\n**NOTE:** Default behaviour is [`ColorChoice::Auto`].\n\n# Examples\n\n```no_run\n# use clap::{Command, ColorChoice};\nCommand::new(\"myprog\")\n    .color(ColorChoice::Never)\n    .get_matches();\n```\n[`ColorChoice::Auto`]: crate::ColorChoice::Auto","links":{"crate::ColorChoice::Auto":"0:4543:1958"},"attrs":["#[cfg(feature = \"color\")]","#[inline]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["color",{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:4542:1657","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1095:673":{"id":"0:1095:673","crate_id":0,"name":"from","span":{"filename":"src/builder/value_parser.rs","begin":[441,4],"end":[444,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["value",{"kind":"resolved_path","inner":{"name":"std::ops::RangeToInclusive","id":"2:46545:200","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i64"}}],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4173:655":{"id":"0:4173:655","crate_id":0,"name":"fmt","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1463,16],"end":[1463,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:8556:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8545:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3711:5573":{"id":"0:3711:5573","crate_id":0,"name":"FilePath","span":{"filename":"src/builder/value_hint.rs","begin":[38,4],"end":[38,12]},"visibility":"default","docs":"Path to a file.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"b:2:3321-0:3783:2169":{"id":"b:2:3321-0:3783:2169","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3319:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValuesParser","id":"0:3783:2169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3323:1440"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1848":{"id":"0:1848","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1379,0],"end":[1383,1]},"visibility":{"restricted":{"parent":"0:1754:6526","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["nth_back","rfold","advance_back_by","try_rfold","rfind"],"trait":{"name":"DoubleEndedIterator","id":"2:7079:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IdsRef","id":"0:4142:6457","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:1850:6920"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2726:5340-0:3835:2164":{"id":"a:2:2726:5340-0:3835:2164","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2726:5340","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FalseyValueParser","id":"0:3835:2164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11514:29200":{"id":"2:11514:29200","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:11116:8056","prim@char":"1:12300:408"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11121:8050","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1797":{"id":"0:1797","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[864,0],"end":[1068,1]},"visibility":{"restricted":{"parent":"0:1754:6526","path":"::parser::matches::arg_matches"}},"docs":"# Subcommands","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4112:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1798:4142","0:1800:6861","0:1802:6874","0:1804:6482"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1255":{"id":"0:1255","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1730,0],"end":[1758,1]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["map","possible_values","parse","try_map"],"trait":{"name":"TypedValueParser","id":"0:1125:2173","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FalseyValueParser","id":"0:3835:2164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1256:5472","0:1257:5682","0:1258:3567"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1021":{"id":"0:1021","crate_id":0,"name":null,"span":{"filename":"src/builder/styled_str.rs","begin":[254,0],"end":[260,1]},"visibility":{"restricted":{"parent":"0:986:2149","path":"::builder::styled_str"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:6967:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1022:673"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1033":{"id":"0:1033","crate_id":0,"name":null,"span":{"filename":"src/builder/styled_str.rs","begin":[295,0],"end":[303,1]},"visibility":{"restricted":{"parent":"0:986:2149","path":"::builder::styled_str"}},"docs":"Color-unaware printing. Never uses coloring.","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:8601:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1034:655"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11510:29198":{"id":"2:11510:29198","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4538:419":{"id":"0:4538:419","crate_id":0,"name":"cmp","span":{"filename":"src/util/id.rs","begin":[8,52],"end":[8,55]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::cmp::Ordering","id":"2:38204:180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3647":{"id":"0:3647","crate_id":0,"name":null,"span":{"filename":"src/builder/str.rs","begin":[5,29],"end":[5,38]},"visibility":{"restricted":{"parent":"0:912:1352","path":"::builder::str"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2672:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3623":{"id":"0:3623","crate_id":0,"name":null,"span":{"filename":"src/builder/resettable.rs","begin":[31,40],"end":[31,42]},"visibility":{"restricted":{"parent":"0:844:2148","path":"::builder::resettable"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2673:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Resettable","id":"0:3603:2158","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3664":{"id":"0:3664","crate_id":0,"name":null,"span":{"filename":"src/builder/styled_str.rs","begin":[5,9],"end":[5,14]},"visibility":{"restricted":{"parent":"0:986:2149","path":"::builder::styled_str"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3665:412"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:425:4256":{"id":"0:425:4256","crate_id":0,"name":"render_long_help","span":{"filename":"src/builder/command.rs","begin":[805,4],"end":[812,5]},"visibility":"public","docs":"Render the long help message (`--help`) to a [`StyledStr`].\n\nSee also [`Command::render_help`].\n\n# Examples\n\n```rust\n# use clap::Command;\nuse std::io;\nlet mut cmd = Command::new(\"myprog\");\nlet mut out = io::stdout();\nlet help = cmd.render_long_help();\nprintln!(\"{}\", help);\n```\n[`io::Write`]: std::io::Write\n[`-h` (short)]: Arg::help()\n[`--help` (long)]: Arg::long_help()","links":{"`StyledStr`":"0:3662:1951","`Command::render_help`":"0:424:4252"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2676:225-0:2796:1649":{"id":"a:2:2676:225-0:2796:1649","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgAction","id":"0:2796:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11532:2015":{"id":"2:11532:2015","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"`FromStr`":"2:11077:5547","FromStr::Err":"2:11078:126"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48278:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:11077:5547","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11077:5547","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:267:3600":{"id":"0:267:3600","crate_id":0,"name":"is_positional","span":{"filename":"src/builder/arg.rs","begin":[3930,4],"end":[3932,5]},"visibility":"public","docs":"Checks whether this argument is a positional or not.\n\n# Examples\n\n```\n# use clap::Arg;\nlet arg = Arg::new(\"foo\");\nassert_eq!(arg.is_positional(), true);\n\nlet arg = Arg::new(\"foo\").long(\"foo\");\nassert_eq!(arg.is_positional(), false);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3821:655":{"id":"0:3821:655","crate_id":0,"name":"fmt","span":{"filename":"src/builder/value_parser.rs","begin":[1449,22],"end":[1449,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:8556:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8545:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3871:655":{"id":"0:3871:655","crate_id":0,"name":"fmt","span":{"filename":"src/builder/value_parser.rs","begin":[1944,16],"end":[1944,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:8556:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8545:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7736:6523-0:3248:2155":{"id":"a:2:7736:6523-0:3248:2155","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7736:6523","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgPredicate","id":"0:3248:2155","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:2072":{"id":"0:2072","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/mod.rs","begin":[6,0],"end":[6,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"any_value::AnyValueId","name":"AnyValueId","id":"0:4106:2265","glob":false}},"0:240:3534":{"id":"0:240:3534","crate_id":0,"name":"get_help","span":{"filename":"src/builder/arg.rs","begin":[3704,4],"end":[3706,5]},"visibility":"public","docs":"Get the help specified for this argument, if any","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:842":{"id":"0:842","crate_id":0,"name":null,"span":{"filename":"src/builder/range.rs","begin":[184,0],"end":[188,1]},"visibility":{"restricted":{"parent":"0:807:2147","path":"::builder::range"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8596:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueRange","id":"0:3588:2156","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:843:655"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1185":{"id":"0:1185","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1141,0],"end":[1146,1]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"PossibleValuesParser","id":"0:3783:2169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1186:915"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2523-0:3662:1951":{"id":"b:2:2523-0:3662:1951","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2493:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2526:127","2:2527:1427"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2238-0:3588:2156":{"id":"b:2:2238-0:3588:2156","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2232:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueRange","id":"0:3588:2156","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2240:5354"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:2753:600":{"id":"0:2753:600","crate_id":0,"name":"eq","span":{"filename":"src/util/id.rs","begin":[135,4],"end":[137,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11464:6068":{"id":"2:11464:6068","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"`DoubleEndedIterator`":"2:7079:120","str::rsplit":"2:11470:29188","self::pattern":"2:11116:8056","str::split_whitespace":"2:11442:29183","prim@char":"1:12300:408"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:50110:7987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11121:8050","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2513-0:3638:2154":{"id":"b:2:2513-0:3638:2154","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2516:2263"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3843":{"id":"0:3843","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1808,9],"end":[1808,13]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2674:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BoolishValueParser","id":"0:3842:2162","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1019":{"id":"0:1019","crate_id":0,"name":null,"span":{"filename":"src/builder/styled_str.rs","begin":[246,0],"end":[252,1]},"visibility":{"restricted":{"parent":"0:986:2149","path":"::builder::styled_str"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:6967:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1020:673"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1535:311":{"id":"0:1535:311","crate_id":0,"name":"as_str","span":{"filename":"src/error/context.rs","begin":[44,4],"end":[64,5]},"visibility":"public","docs":"End-user description of the error case, where relevant","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'static","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2676:225-0:4161:6460":{"id":"a:2:2676:225-0:4161:6460","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValuesRef","id":"0:4161:6460","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:438:4329":{"id":"0:438:4329","crate_id":0,"name":"dont_delimit_trailing_values","span":{"filename":"src/builder/command.rs","begin":[1018,4],"end":[1024,5]},"visibility":"public","docs":"Disables the automatic delimiting of values after `--` or when [`Command::trailing_var_arg`]\nwas used.\n\n**NOTE:** The same thing can be done manually by setting the final positional argument to\n[`Arg::value_delimiter(None)`]. Using this setting is safer, because it's easier to locate\nwhen making changes.\n\n**NOTE:** This choice is propagated to all child subcommands.\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg};\nCommand::new(\"myprog\")\n    .dont_delimit_trailing_values(true)\n    .get_matches();\n```\n\n[`Arg::value_delimiter(None)`]: crate::Arg::value_delimiter()","links":{"`Command::trailing_var_arg`":"0:480:2577","crate::Arg::value_delimiter()":"0:189:2942"},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2238-0:3829:2161":{"id":"b:2:2238-0:3829:2161","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2232:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BoolValueParser","id":"0:3829:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2240:5354"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3786":{"id":"0:3786","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1138,9],"end":[1138,14]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValuesParser","id":"0:3783:2169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3787:412"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:815:2259":{"id":"0:815:2259","crate_id":0,"name":"takes_values","span":{"filename":"src/builder/range.rs","begin":[78,4],"end":[80,5]},"visibility":"public","docs":"Report whether the argument takes any values (ie is a flag)\n\n# Examples\n\n```\n# use clap::builder::ValueRange;\nlet range = ValueRange::new(5);\nassert!(range.takes_values());\n\nlet range = ValueRange::new(0);\nassert!(!range.takes_values());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2528-0:3547:181":{"id":"b:2:2528-0:3547:181","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2531:127","2:2532:1426"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:518:5049":{"id":"0:518:5049","crate_id":0,"name":"get_long_version","span":{"filename":"src/builder/command.rs","begin":[3254,4],"end":[3256,5]},"visibility":"public","docs":"Get the long version of the cmd.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:913":{"id":"0:913","crate_id":0,"name":null,"span":{"filename":"src/builder/str.rs","begin":[10,0],"end":[39,1]},"visibility":{"restricted":{"parent":"0:912:1352","path":"::builder::str"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:916:311"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:62:2091":{"id":"0:62:2091","crate_id":0,"name":"augment_args_for_update","span":{"filename":"src/derive.rs","begin":[298,4],"end":[298,56]},"visibility":"default","docs":"Append to [`Command`] so it can update `self`.\n\nThis is used to implement `#[command(flatten)]`\n\nSee also [`CommandFactory`].","links":{"`CommandFactory`":"0:51:1665","`Command`":"0:3505:1650"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["cmd",{"kind":"resolved_path","inner":{"name":"Command","id":"0:3505:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Command","id":"0:3505:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:936:227":{"id":"0:936:227","crate_id":0,"name":"Target","span":{"filename":"src/builder/str.rs","begin":[112,4],"end":[112,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"primitive","inner":"str"}}},"0:716:673":{"id":"0:716:673","crate_id":0,"name":"from","span":{"filename":"src/builder/os_str.rs","begin":[62,4],"end":[64,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["id",{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2008:6920":{"id":"0:2008:6920","crate_id":0,"name":"next_back","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1846,4],"end":[1848,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2517-0:3704:1651":{"id":"b:2:2517-0:3704:1651","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:3704:1651","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2519:673"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:989:5489":{"id":"0:989:5489","crate_id":0,"name":"ansi","span":{"filename":"src/builder/styled_str.rs","begin":[30,4],"end":[32,5]},"visibility":"public","docs":"Display using [ANSI Escape Code](https://en.wikipedia.org/wiki/ANSI_escape_code) styling","links":{},"attrs":["#[cfg(feature = \"color\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"std::fmt::Display","id":"2:8601:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'_"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3819":{"id":"0:3819","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1449,22],"end":[1449,27]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"2:8596:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"std::convert::TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8596:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangedU64ValueParser","id":"0:3810:2171","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:3821:655"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:5:681-0:3229:1653":{"id":"b:5:681-0:3229:1653","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:677:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3229:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:683:5351","5:684:3662","5:685:8969"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2238-0:3835:2164":{"id":"b:2:2238-0:3835:2164","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2232:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FalseyValueParser","id":"0:3835:2164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2240:5354"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1339":{"id":"0:1339","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[2172,0],"end":[2177,1]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ValueParserFactory","id":"0:1306:2175","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"i64"},"items":["0:1340:1667","0:1341:2151"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3674":{"id":"0:3674","crate_id":0,"name":null,"span":{"filename":"src/builder/styled_str.rs","begin":[5,43],"end":[5,45]},"visibility":{"restricted":{"parent":"0:986:2149","path":"::builder::styled_str"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2290:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:589:5159":{"id":"0:589:5159","crate_id":0,"name":"is_allow_external_subcommands_set","span":{"filename":"src/builder/command.rs","begin":[3685,4],"end":[3687,5]},"visibility":"public","docs":"Report whether [`Command::allow_external_subcommands`] is set","links":{"`Command::allow_external_subcommands`":"0:502:4869"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2517-0:4151:6459":{"id":"b:2:2517-0:4151:6459","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:4151:6459","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2519:673"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:2074":{"id":"0:2074","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/mod.rs","begin":[8,0],"end":[8,31]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"arg_matches::RawValues","name":"RawValues","id":"0:4174:6458","glob":false}},"a:2:2676:225-0:3768:2163":{"id":"a:2:2676:225-0:3768:2163","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EnumValueParser","id":"0:3768:2163","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:720:673":{"id":"0:720:673","crate_id":0,"name":"from","span":{"filename":"src/builder/os_str.rs","begin":[112,4],"end":[114,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["name",{"kind":"borrowed_ref","inner":{"lifetime":"'static","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"std::ffi::OsStr","id":"1:2029:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3321-0:3929:6081":{"id":"b:2:3321-0:3929:6081","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3319:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:3929:6081","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3323:1440"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:209:3217":{"id":"0:209:3217","crate_id":0,"name":"hide","span":{"filename":"src/builder/arg.rs","begin":[2267,4],"end":[2273,5]},"visibility":"public","docs":"Do not display the argument in help message.\n\n**NOTE:** This does **not** hide the argument from usage strings on error\n\n# Examples\n\nSetting `Hidden` will hide the argument when displaying help text\n\n ```\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .long(\"config\")\n        .hide(true)\n        .help(\"Some help text describing the --config arg\"))\n    .get_matches_from(vec![\n        \"prog\", \"--help\"\n    ]);\n```\n\nThe above example displays\n\n```text\nhelptest\n\nUsage: helptest [OPTIONS]\n\nOptions:\n-h, --help       Print help information\n-V, --version    Print version information\n```","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3705:238":{"id":"0:3705:238","crate_id":0,"name":"Unknown","span":{"filename":"src/builder/value_hint.rs","begin":[32,4],"end":[32,11]},"visibility":"default","docs":"Default value if hint is not specified. Follows shell default behavior, which is usually\nauto-completing filenames.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"0:3226:59":{"id":"0:3226:59","crate_id":0,"name":"default","span":{"filename":"src/builder/arg.rs","begin":[53,9],"end":[53,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3195:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7736:6523-0:4542:1657":{"id":"a:2:7736:6523-0:4542:1657","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7736:6523","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:4542:1657","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:754":{"id":"0:754","crate_id":0,"name":null,"span":{"filename":"src/builder/os_str.rs","begin":[223,0],"end":[228,1]},"visibility":{"restricted":{"parent":"0:707:2145","path":"::builder::os_str"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2285:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:6967:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:755:600"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2726:5340-0:3852:2166":{"id":"a:2:2726:5340-0:3852:2166","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2726:5340","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"NonEmptyStringValueParser","id":"0:3852:2166","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:48:2039":{"id":"0:48:2039","crate_id":0,"name":"try_update_from","span":{"filename":"src/derive.rs","begin":[147,4],"end":[156,5]},"visibility":"default","docs":"Update from iterator, return Err on error.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["itr",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48278:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:12:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7042:149","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsString","id":"1:2026:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1496":{"id":"0:1496","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[48,0],"end":[48,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"value_parser::PossibleValuesParser","name":"PossibleValuesParser","id":"0:3783:2169","glob":false}},"0:1137":{"id":"0:1137","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[816,0],"end":[844,1]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Fn","id":"2:2932:5247","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48278:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:2137","args":{"angle_bracketed":{"args":[{"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"std::error::Error","id":"2:2578:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["map","possible_values","parse","try_map"],"trait":{"name":"TypedValueParser","id":"0:1125:2173","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"generic","inner":"F"},"items":["0:1141:5472","0:1142:5682"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4026:6162":{"id":"0:4026:6162","crate_id":0,"name":"ArgumentConflict","span":{"filename":"src/error/kind.rs","begin":[174,4],"end":[174,20]},"visibility":"default","docs":"Occurs when the user provides two values which conflict with each other and can't be used\ntogether.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, error::ErrorKind, ArgAction};\nlet result = Command::new(\"prog\")\n    .arg(Arg::new(\"debug\")\n        .long(\"debug\")\n        .action(ArgAction::SetTrue)\n        .conflicts_with(\"color\"))\n    .arg(Arg::new(\"color\")\n        .long(\"color\")\n        .action(ArgAction::SetTrue))\n    .try_get_matches_from(vec![\"prog\", \"--debug\", \"--color\"]);\nassert!(result.is_err());\nassert_eq!(result.unwrap_err().kind(), ErrorKind::ArgumentConflict);\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"b:2:2528-0:3248:2155":{"id":"b:2:2528-0:3248:2155","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgPredicate","id":"0:3248:2155","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2531:127","2:2532:1426"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3752:412":{"id":"0:3752:412","crate_id":0,"name":"clone","span":{"filename":"src/builder/value_parser.rs","begin":[849,15],"end":[849,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"StringValueParser","id":"0:3749:2172","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:908:2452":{"id":"0:908:2452","crate_id":0,"name":"into_resettable","span":{"filename":"src/builder/resettable.rs","begin":[202,4],"end":[204,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Resettable","id":"0:3603:2158","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1211:5682":{"id":"0:1211:5682","crate_id":0,"name":"parse_ref","span":{"filename":"src/builder/value_parser.rs","begin":[1344,4],"end":[1393,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["cmd",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Command","id":"0:3505:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["arg",{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Arg","id":"0:3195:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}}}],["raw_value",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"std::ffi::OsStr","id":"1:2029:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48278:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Value","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:1125:2173","args":null}}}},{"type":{"kind":"resolved_path","inner":{"name":"crate::Error","id":"0:12:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3608:5474":{"id":"0:3608:5474","crate_id":0,"name":"Reset","span":{"filename":"src/builder/resettable.rs","begin":[36,4],"end":[36,9]},"visibility":"default","docs":"Reset builder value","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"0:288:3645":{"id":"0:288:3645","crate_id":0,"name":"is_ignore_case_set","span":{"filename":"src/builder/arg.rs","begin":[4055,4],"end":[4057,5]},"visibility":"public","docs":"Reports whether [`Arg::ignore_case`] is set","links":{"`Arg::ignore_case`":"0:184:2127"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11476:29190":{"id":"2:11476:29190","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"prim@char":"1:12300:408","self::pattern":"2:11116:8056","str::split_terminator":"2:11473:29189","str::split":"2:11464:6068"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:50178:8079","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11121:8050","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11121:8050","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11136:8051","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:329:3499":{"id":"0:329:3499","crate_id":0,"name":"conflicts_with_all","span":{"filename":"src/builder/arg_group.rs","begin":[489,4],"end":[494,5]},"visibility":"public","docs":"Specify arguments or groups that must **not** be present when this group is.\n\nExclusion rules function just like [argument exclusion rules], you can name other arguments\nor groups that must *not* be present when one of the arguments from this group are used.\n\n**NOTE:** The names provided may be an argument, or group name\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ArgGroup, error::ErrorKind, ArgAction};\nlet result = Command::new(\"myprog\")\n    .arg(Arg::new(\"flag\")\n        .short('f')\n        .action(ArgAction::SetTrue))\n    .arg(Arg::new(\"color\")\n        .short('c')\n        .action(ArgAction::SetTrue))\n    .arg(Arg::new(\"debug\")\n        .short('d')\n        .action(ArgAction::SetTrue))\n    .arg(Arg::new(\"verb\")\n        .short('v')\n        .action(ArgAction::SetTrue))\n    .group(ArgGroup::new(\"req_flags\")\n        .args([\"flag\", \"color\"])\n        .conflicts_with_all([\"debug\", \"verb\"]))\n    .try_get_matches_from(vec![\"myprog\", \"-c\", \"-v\"]);\n// because we used an arg from the group, and the group conflicts with either \"-v\" or \"-d\"\n// it's an error\nassert!(result.is_err());\nlet err = result.unwrap_err();\nassert_eq!(err.kind(), ErrorKind::ArgumentConflict);\n```\n\n[argument exclusion rules]: crate::Arg::conflicts_with_all()","links":{"crate::Arg::conflicts_with_all()":"0:235:3499"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["ns",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7042:149","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}}}}]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl Into<Id>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}},{"name":"impl IntoIterator<Item = impl Into<Id>>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7042:149","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:592:5166":{"id":"0:592:5166","crate_id":0,"name":"is_args_conflicts_with_subcommands_set","span":{"filename":"src/builder/command.rs","begin":[3709,4],"end":[3711,5]},"visibility":"public","docs":"Report whether [`Command::args_conflicts_with_subcommands`] is set","links":{"`Command::args_conflicts_with_subcommands`":"0:504:4888"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1597:1939":{"id":"0:1597:1939","crate_id":0,"name":"insert","span":{"filename":"src/error/mod.rs","begin":[193,4],"end":[195,5]},"visibility":"public","docs":"Insert a piece of context","links":{},"attrs":["#[inline(never)]","#[cfg(feature = \"error-context\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["kind",{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:3929:6081","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["value",{"kind":"resolved_path","inner":{"name":"ContextValue","id":"0:3978:6082","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ContextValue","id":"0:3978:6082","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:860:673":{"id":"0:860:673","crate_id":0,"name":"from","span":{"filename":"src/builder/resettable.rs","begin":[55,4],"end":[60,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["other",{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1635:673":{"id":"0:1635:673","crate_id":0,"name":"from","span":{"filename":"src/error/mod.rs","begin":[751,4],"end":[753,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["e",{"kind":"resolved_path","inner":{"name":"io::Error","id":"1:2905:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3633:419":{"id":"0:3633:419","crate_id":0,"name":"cmp","span":{"filename":"src/builder/resettable.rs","begin":[31,56],"end":[31,59]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Resettable","id":"0:3603:2158","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::cmp::Ordering","id":"2:38204:180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1321":{"id":"0:1321","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[2124,0],"end":[2131,1]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ValueParserFactory","id":"0:1306:2175","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"u8"},"items":["0:1322:1667","0:1323:2151"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:885":{"id":"0:885","crate_id":0,"name":null,"span":{"filename":"src/builder/resettable.rs","begin":[153,0],"end":[157,1]},"visibility":{"restricted":{"parent":"0:844:2148","path":"::builder::resettable"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}},"for":{"kind":"primitive","inner":"usize"},"items":["0:886:2452"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1171":{"id":"0:1171","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1036,0],"end":[1093,1]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"crate::ValueEnum","id":"0:67:1669","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["map","possible_values","parse","try_map"],"trait":{"name":"TypedValueParser","id":"0:1125:2173","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EnumValueParser","id":"0:3768:2163","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"items":["0:1173:5472","0:1174:5682","0:1180:3567"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:2736":{"id":"0:2736","crate_id":0,"name":null,"span":{"filename":"src/util/id.rs","begin":[80,0],"end":[84,1]},"visibility":{"restricted":{"parent":"0:2715:1860","path":"::util::id"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"5:6967:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2737:673"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2517-0:4009:3985":{"id":"b:2:2517-0:4009:3985","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4009:3985","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2519:673"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:2784:126":{"id":"0:2784:126","crate_id":0,"name":"Err","span":{"filename":"src/util/color.rs","begin":[77,4],"end":[77,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"String","id":"5:6967:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:249:3552":{"id":"0:249:3552","crate_id":0,"name":"get_short_and_visible_aliases","span":{"filename":"src/builder/arg.rs","begin":[3766,4],"end":[3775,5]},"visibility":"public","docs":"Get the short option name and its visible aliases, if any","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:6400:240","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"char"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7735:6524-0:3762:2168":{"id":"a:2:7735:6524-0:3762:2168","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7735:6524","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PathBufValueParser","id":"0:3762:2168","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:590:5163":{"id":"0:590:5163","crate_id":0,"name":"get_external_subcommand_value_parser","span":{"filename":"src/builder/command.rs","begin":[3699,4],"end":[3706,5]},"visibility":"public","docs":"Configured parser for values passed to an external subcommand\n\n# Example\n\n```rust\nlet cmd = clap::Command::new(\"raw\")\n    .external_subcommand_value_parser(clap::value_parser!(String));\nlet value_parser = cmd.get_external_subcommand_value_parser();\nprintln!(\"{:?}\", value_parser);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"super::ValueParser","id":"0:1054:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2517-0:4522:1658":{"id":"b:2:2517-0:4522:1658","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2519:673"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3550:59":{"id":"0:3550:59","crate_id":0,"name":"default","span":{"filename":"src/builder/os_str.rs","begin":[7,9],"end":[7,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3601:707":{"id":"0:3601:707","crate_id":0,"name":"hash","span":{"filename":"src/builder/range.rs","begin":[2,37],"end":[2,41]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["state",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"__H"}}}]],"output":{"kind":"tuple","inner":[]},"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:8833:144","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4260:412":{"id":"0:4260:412","crate_id":0,"name":"clone","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1828,9],"end":[1828,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:4254:6461","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4534:600":{"id":"0:4534:600","crate_id":0,"name":"eq","span":{"filename":"src/util/id.rs","begin":[8,29],"end":[8,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7735:6524-0:3749:2172":{"id":"a:2:7735:6524-0:3749:2172","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7735:6524","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StringValueParser","id":"0:3749:2172","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:7736:6523-0:3603:2158":{"id":"a:2:7736:6523-0:3603:2158","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:7736:6523","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7736:6523","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Resettable","id":"0:3603:2158","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:88:2036":{"id":"0:88:2036","crate_id":0,"name":"command_for_update","span":{"filename":"src/derive.rs","begin":[427,4],"end":[429,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Command","id":"0:3505:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'help","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:813:3573":{"id":"0:813:3573","crate_id":0,"name":"min_values","span":{"filename":"src/builder/range.rs","begin":[57,4],"end":[59,5]},"visibility":"public","docs":"Fewest number of values the argument accepts","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2528-0:4174:6458":{"id":"b:2:2528-0:4174:6458","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawValues","id":"0:4174:6458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2531:127","2:2532:1426"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:191:61":{"id":"0:191:61","crate_id":0,"name":"raw","span":{"filename":"src/builder/arg.rs","begin":[1583,4],"end":[1588,5]},"visibility":"public","docs":"Consume all following arguments.\n\nDo not be parse them individually, but rather pass them in entirety.\n\nIt is worth noting that setting this requires all values to come after a `--` to indicate\nthey should all be captured. For example:\n\n```text\n--foo something -- -v -v -v -b -b -b --baz -q -u -x\n```\n\nWill result in everything after `--` to be considered one raw argument. This behavior\nmay not be exactly what you are expecting and using [`crate::Command::trailing_var_arg`]\nmay be more appropriate.\n\n**NOTE:** Implicitly sets [`Arg::action(ArgAction::Set)`] [`Arg::num_args(1..)`],\n[`Arg::allow_hyphen_values(true)`], and [`Arg::last(true)`] when set to `true`.\n\n[`Arg::action(ArgAction::Set)`]: Arg::action()\n[`Arg::num_args(1..)`]: Arg::num_args()\n[`Arg::allow_hyphen_values(true)`]: Arg::allow_hyphen_values()\n[`Arg::last(true)`]: Arg::last()","links":{"Arg::allow_hyphen_values()":"0:185:2910","Arg::last()":"0:165:2624","`crate::Command::trailing_var_arg`":"0:480:2577","Arg::num_args()":"0:178:1872","Arg::action()":"0:176:1861"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2528-0:1581:127":{"id":"b:2:2528-0:1581:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1581:127","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["2:2531:127","2:2532:1426"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1072:366":{"id":"0:1072:366","crate_id":0,"name":"bool","span":{"filename":"src/builder/value_parser.rs","begin":[137,4],"end":[139,5]},"visibility":"public","docs":"[`bool`] parser for argument values\n\nSee also:\n- [`BoolishValueParser`] for different human readable bool representations\n- [`FalseyValueParser`] for assuming non-false is true\n\n# Example\n\n```rust\nlet mut cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"download\")\n            .value_parser(clap::value_parser!(bool))\n            .required(true)\n    );\n\nlet m = cmd.try_get_matches_from_mut([\"cmd\", \"true\"]).unwrap();\nlet port: bool = *m.get_one(\"download\")\n    .expect(\"required\");\nassert_eq!(port, true);\n\nassert!(cmd.try_get_matches_from_mut([\"cmd\", \"forever\"]).is_err());\n```","links":{"`FalseyValueParser`":"0:3835:2164","`BoolishValueParser`":"0:3842:2162","`bool`":"1:12298:366"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3751":{"id":"0:3751","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[849,15],"end":[849,20]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StringValueParser","id":"0:3749:2172","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3752:412"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1315":{"id":"0:1315","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[2112,0],"end":[2117,1]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ValueParserFactory","id":"0:1306:2175","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"std::path::PathBuf","id":"1:5394:188","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1316:1667","0:1317:2151"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:751:600":{"id":"0:751:600","crate_id":0,"name":"eq","span":{"filename":"src/builder/os_str.rs","begin":[212,4],"end":[214,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"std::ffi::OsStr","id":"1:2029:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:822:5447":{"id":"0:822:5447","crate_id":0,"name":"start_bound","span":{"filename":"src/builder/range.rs","begin":[104,4],"end":[106,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"std::ops::Bound","id":"2:46567:5448","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"usize"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3655:707":{"id":"0:3655:707","crate_id":0,"name":"hash","span":{"filename":"src/builder/str.rs","begin":[5,57],"end":[5,61]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["state",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"__H"}}}]],"output":{"kind":"tuple","inner":[]},"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:8833:144","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:572:5131":{"id":"0:572:5131","crate_id":0,"name":"is_disable_version_flag_set","span":{"filename":"src/builder/command.rs","begin":[3576,4],"end":[3579,5]},"visibility":"public","docs":"Report whether [`Command::disable_version_flag`] is set","links":{"`Command::disable_version_flag`":"0:442:4355"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1341:2151":{"id":"0:1341:2151","crate_id":0,"name":"value_parser","span":{"filename":"src/builder/value_parser.rs","begin":[2174,4],"end":[2176,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"qualified_path","inner":{"name":"Parser","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:1306:2175","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1783:6654":{"id":"0:1783:6654","crate_id":0,"name":"get_raw","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[298,4],"end":[300,5]},"visibility":"public","docs":"Iterate over the original argument values.\n\nAn `OsStr` on Unix-like systems is any series of bytes, regardless of whether or not they\ncontain valid UTF-8. Since [`String`]s in Rust are guaranteed to be valid UTF-8, a valid\nfilename on a Unix system as an argument value may contain invalid UTF-8.\n\nReturns `None` if the option wasn't present.\n\n# Panic\n\nIf the argument definition and access mismatch.  To handle this case programmatically, see\n[`ArgMatches::try_get_raw`].\n\n# Examples\n\n ```\n# use clap::{Command, arg, value_parser};\n# use std::ffi::{OsStr,OsString};\n# use std::os::unix::ffi::{OsStrExt,OsStringExt};\nuse std::path::PathBuf;\n\nlet m = Command::new(\"utf8\")\n    .arg(arg!(<arg> ... \"some arg\").value_parser(value_parser!(PathBuf)))\n    .get_matches_from(vec![OsString::from(\"myprog\"),\n                                // \"Hi\"\n                                OsString::from_vec(vec![b'H', b'i']),\n                                // \"{0xe9}!\"\n                                OsString::from_vec(vec![0xe9, b'!'])]);\n\nlet mut itr = m.get_raw(\"arg\")\n    .expect(\"`port`is required\")\n    .into_iter();\nassert_eq!(itr.next(), Some(OsStr::new(\"Hi\")));\nassert_eq!(itr.next(), Some(OsStr::from_bytes(&[0xe9, b'!'])));\nassert_eq!(itr.next(), None);\n```\n[`Iterator`]: std::iter::Iterator\n[`OsSt`]: std::ffi::OsStr\n[values]: OsValues\n[`String`]: std::string::String","links":{"`ArgMatches::try_get_raw`":"0:1817:6655","std::string::String":"5:6967:221"},"attrs":["#[track_caller]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"RawValues","id":"0:4174:6458","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:7046-0:4142:6457":{"id":"b:2:7046-0:4142:6457","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:7156:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:7042:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IdsRef","id":"0:4142:6457","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:7048:2029","2:7049:6930","2:7050:762"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"0:4051:600":{"id":"0:4051:600","crate_id":0,"name":"eq","span":{"filename":"src/error/kind.rs","begin":[2,29],"end":[2,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4009:3985","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:843:655":{"id":"0:843:655","crate_id":0,"name":"fmt","span":{"filename":"src/builder/range.rs","begin":[185,4],"end":[187,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"std::fmt::Formatter","id":"2:8556:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"std::fmt::Result","id":"2:8545:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1401:5904":{"id":"0:1401:5904","crate_id":0,"name":"_ValueParserViaFactorySealed","span":{"filename":"src/builder/value_parser.rs","begin":[2380,4],"end":[2380,45]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:5:681-0:2796:1649":{"id":"b:5:681-0:2796:1649","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:677:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgAction","id":"0:2796:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:683:5351","5:684:3662","5:685:8969"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3667:59":{"id":"0:3667:59","crate_id":0,"name":"default","span":{"filename":"src/builder/styled_str.rs","begin":[5,16],"end":[5,23]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1167:59":{"id":"0:1167:59","crate_id":0,"name":"default","span":{"filename":"src/builder/value_parser.rs","begin":[981,4],"end":[983,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:437:4321":{"id":"0:437:4321","crate_id":0,"name":"args_override_self","span":{"filename":"src/builder/command.rs","begin":[990,4],"end":[996,5]},"visibility":"public","docs":"Replace prior occurrences of arguments rather than error\n\nFor any argument that would conflict with itself by default (e.g.\n[`ArgAction::Set`][ArgAction::Set], it will now override itself.\n\nThis is the equivalent to saying the `foo` arg using [`Arg::overrides_with(\"foo\")`] for all\ndefined arguments.\n\n**NOTE:** This choice is propagated to all child subcommands.\n\n[`Arg::overrides_with(\"foo\")`]: crate::Arg::overrides_with()","links":{"ArgAction::Set":"0:2797:1871","crate::Arg::overrides_with()":"0:236:3518"},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:234:3488":{"id":"0:234:3488","crate_id":0,"name":"conflicts_with","span":{"filename":"src/builder/arg.rs","begin":[3558,4],"end":[3565,5]},"visibility":"public","docs":"This argument is mutually exclusive with the specified argument.\n\n**NOTE:** Conflicting rules take precedence over being required by default. Conflict rules\nonly need to be set for one of the two arguments, they do not need to be set for each.\n\n**NOTE:** Defining a conflict is two-way, but does *not* need to defined for both arguments\n(i.e. if A conflicts with B, defining A.conflicts_with(B) is sufficient. You do not\nneed to also do B.conflicts_with(A))\n\n**NOTE:** [`Arg::conflicts_with_all(names)`] allows specifying an argument which conflicts with more than one argument.\n\n**NOTE** [`Arg::exclusive(true)`] allows specifying an argument which conflicts with every other argument.\n\n**NOTE:** All arguments implicitly conflict with themselves.\n\n# Examples\n\n```rust\n# use clap::Arg;\nArg::new(\"config\")\n    .conflicts_with(\"debug\")\n# ;\n```\n\nSetting conflicting argument, and having both arguments present at runtime is an error.\n\n```rust\n# use clap::{Command, Arg, error::ErrorKind, ArgAction};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .action(ArgAction::Set)\n        .conflicts_with(\"debug\")\n        .long(\"config\"))\n    .arg(Arg::new(\"debug\")\n        .long(\"debug\")\n        .action(ArgAction::SetTrue))\n    .try_get_matches_from(vec![\n        \"prog\", \"--debug\", \"--config\", \"file.conf\"\n    ]);\n\nassert!(res.is_err());\nassert_eq!(res.unwrap_err().kind(), ErrorKind::ArgumentConflict);\n```\n\n[`Arg::conflicts_with_all(names)`]: Arg::conflicts_with_all()\n[`Arg::exclusive(true)`]: Arg::exclusive()","links":{"Arg::conflicts_with_all()":"0:235:3499","Arg::exclusive()":"0:168:2671"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["arg_id",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl IntoResettable<Id>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2676:225-0:3929:6081":{"id":"a:2:2676:225-0:3929:6081","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextKind","id":"0:3929:6081","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2523-0:4112:1655":{"id":"b:2:2523-0:4112:1655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2493:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4112:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2526:127","2:2527:1427"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2662:217-0:4161:6460":{"id":"a:2:2662:217-0:4161:6460","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValuesRef","id":"0:4161:6460","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:476:4585":{"id":"0:476:4585","crate_id":0,"name":"next_display_order","span":{"filename":"src/builder/command.rs","begin":[1866,4],"end":[1869,5]},"visibility":"public","docs":"Change the starting value for assigning future display orders for ags.\n\nThis will be used for any arg that hasn't had [`Arg::display_order`] called.","links":{"`Arg::display_order`":"0:206:3188"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["disp_ord",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl IntoResettable<usize>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2676:225-0:3756:2167":{"id":"a:2:2676:225-0:3756:2167","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsStringValueParser","id":"0:3756:2167","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1221":{"id":"0:1221","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1455,0],"end":[1533,1]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"std::convert::TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"RangedU64ValueParser","id":"0:3810:2171","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:1223:915","0:1224:2147"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1660:1654":{"id":"0:1660:1654","crate_id":0,"name":"parser","span":{"filename":"src/parser/mod.rs","begin":[1,0],"end":[27,28]},"visibility":"public","docs":"[`Command`][crate::Command] line argument parser","links":{"crate::Command":"0:3505:1650"},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:2304","0:2305","0:2306","0:2307","0:2309","0:2310","0:2311","0:2312"],"is_stripped":false}},"0:1320:2151":{"id":"0:1320:2151","crate_id":0,"name":"value_parser","span":{"filename":"src/builder/value_parser.rs","begin":[2120,4],"end":[2122,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"qualified_path","inner":{"name":"Parser","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:1306:2175","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7735:6524-0:3248:2155":{"id":"a:2:7735:6524-0:3248:2155","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7735:6524","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgPredicate","id":"0:3248:2155","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1278:59":{"id":"0:1278:59","crate_id":0,"name":"default","span":{"filename":"src/builder/value_parser.rs","begin":[1936,4],"end":[1938,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1308:2151":{"id":"0:1308:2151","crate_id":0,"name":"value_parser","span":{"filename":"src/builder/value_parser.rs","begin":[2098,4],"end":[2098,38]},"visibility":"default","docs":"Create the specified [`Self::Parser`]","links":{"`Self::Parser`":"0:1307:1667"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"qualified_path","inner":{"name":"Parser","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:1306:2175","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1894:6920":{"id":"0:1894:6920","crate_id":0,"name":"next_back","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1543,4],"end":[1545,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"1:2029:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:702":{"id":"0:702","crate_id":0,"name":null,"span":{"filename":"src/builder/command.rs","begin":[4681,0],"end":[4685,1]},"visibility":{"restricted":{"parent":"0:346:1834","path":"::builder::command"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:8601:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Command","id":"0:3505:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:703:655"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1269":{"id":"0:1269","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1859,0],"end":[1863,1]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2564:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BoolishValueParser","id":"0:3842:2162","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1270:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:176:1861":{"id":"0:176:1861","crate_id":0,"name":"action","span":{"filename":"src/builder/arg.rs","begin":[882,4],"end":[885,5]},"visibility":"public","docs":"Specify how to react to an argument when parsing it.\n\n[ArgAction][crate::ArgAction] controls things like\n- Overwriting previous values with new ones\n- Appending new values to all previous ones\n- Counting how many times a flag occurs\n\nThe default action is `ArgAction::Set`\n\n# Examples\n\n```rust\n# use clap::Command;\n# use clap::Arg;\nlet cmd = Command::new(\"mycmd\")\n    .arg(\n        Arg::new(\"flag\")\n            .long(\"flag\")\n            .action(clap::ArgAction::Append)\n    );\n\nlet matches = cmd.try_get_matches_from([\"mycmd\", \"--flag\", \"value\"]).unwrap();\nassert!(matches.contains_id(\"flag\"));\nassert_eq!(\n    matches.get_many::<String>(\"flag\").unwrap_or_default().map(|v| v.as_str()).collect::<Vec<_>>(),\n    vec![\"value\"]\n);\n```","links":{"crate::ArgAction":"0:2796:1649"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["action",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ArgAction","id":"0:2796:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl IntoResettable<ArgAction>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ArgAction","id":"0:2796:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7736:6523-0:3835:2164":{"id":"a:2:7736:6523-0:3835:2164","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7736:6523","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FalseyValueParser","id":"0:3835:2164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3244:600":{"id":"0:3244:600","crate_id":0,"name":"eq","span":{"filename":"src/builder/arg_group.rs","begin":[85,32],"end":[85,41]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3229:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2513-0:3810:2171":{"id":"b:2:2513-0:3810:2171","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangedU64ValueParser","id":"0:3810:2171","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2516:2263"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3321-0:3603:2158":{"id":"b:2:3321-0:3603:2158","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3319:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Resettable","id":"0:3603:2158","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:3323:1440"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2517-0:3571:1966":{"id":"b:2:2517-0:3571:1966","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:3571:1966","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2519:673"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:595:5171":{"id":"0:595:5171","crate_id":0,"name":"is_subcommand_negates_reqs_set","span":{"filename":"src/builder/command.rs","begin":[3724,4],"end":[3726,5]},"visibility":"public","docs":"Report whether [`Command::subcommand_negates_reqs`] is set","links":{"`Command::subcommand_negates_reqs`":"0:506:4931"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3227":{"id":"0:3227","crate_id":0,"name":null,"span":{"filename":"src/builder/arg.rs","begin":[53,18],"end":[53,23]},"visibility":{"restricted":{"parent":"0:124:1849","path":"::builder::arg"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3195:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3228:412"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:52:1834":{"id":"0:52:1834","crate_id":0,"name":"command","span":{"filename":"src/derive.rs","begin":[166,4],"end":[166,28]},"visibility":"default","docs":"Build a [`Command`] that can instantiate `Self`.\n\nSee [`FromArgMatches::from_arg_matches_mut`] for instantiating `Self`.","links":{"`Command`":"0:3505:1650","`FromArgMatches::from_arg_matches_mut`":"0:56:2018"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Command","id":"0:3505:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"a:2:2662:217-0:3505:1650":{"id":"a:2:2662:217-0:3505:1650","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Command","id":"0:3505:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3984:221":{"id":"0:3984:221","crate_id":0,"name":"String","span":{"filename":"src/error/context.rs","begin":[83,4],"end":[83,18]},"visibility":"default","docs":"A single value","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":{"tuple":["0:3986:1553"]},"discriminant":null}},"0:1251":{"id":"0:1251","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1715,0],"end":[1728,1]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"FalseyValueParser","id":"0:3835:2164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1252:915"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:2743:310":{"id":"0:2743:310","crate_id":0,"name":"as_ref","span":{"filename":"src/util/id.rs","begin":[102,4],"end":[104,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1157":{"id":"0:1157","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[930,0],"end":[934,1]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2564:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsStringValueParser","id":"0:3756:2167","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1158:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1288:5472":{"id":"0:1288:5472","crate_id":0,"name":"Value","span":{"filename":"src/builder/value_parser.rs","begin":[1969,4],"end":[1969,19]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"0:2724":{"id":"0:2724","crate_id":0,"name":null,"span":{"filename":"src/util/id.rs","begin":[30,0],"end":[34,1]},"visibility":{"restricted":{"parent":"0:2715:1860","path":"::util::id"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2725:673"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1153":{"id":"0:1153","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[908,0],"end":[928,1]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["map","possible_values","parse","try_map"],"trait":{"name":"TypedValueParser","id":"0:1125:2173","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsStringValueParser","id":"0:3756:2167","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1154:5472","0:1155:5682","0:1156:2015"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1789:6697":{"id":"0:1789:6697","crate_id":0,"name":"remove_occurrences","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[462,4],"end":[467,5]},"visibility":"public","docs":"Return values for each occurrence of an option.\n\nEach item is itself an iterator containing the arguments passed to a single occurrence of\nthe option.\n\nIf the option doesn't support multiple occurrences, or there was only a single occurrence,\nthe iterator will only contain a single item.\n\nReturns `None` if the option wasn't present.\n\n# Panic\n\nIf the argument definition and access mismatch.  To handle this case programmatically, see\n[`ArgMatches::try_remove_occurrences`].\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, value_parser, ArgAction};\nlet mut m = Command::new(\"myprog\")\n    .arg(Arg::new(\"x\")\n        .short('x')\n        .num_args(2)\n        .action(ArgAction::Append)\n        .value_parser(value_parser!(String)))\n    .get_matches_from(vec![\n        \"myprog\", \"-x\", \"a\", \"b\", \"-x\", \"c\", \"d\"]);\nlet vals: Vec<Vec<String>> = m.remove_occurrences(\"x\").unwrap().map(Iterator::collect).collect();\nassert_eq!(vals, [[\"a\", \"b\"], [\"c\", \"d\"]]);\n```","links":{"`ArgMatches::try_remove_occurrences`":"0:1824:6699"},"attrs":["#[track_caller]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Occurrences","id":"0:4194:6698","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Any","id":"2:3319:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3580":{"id":"0:3580","crate_id":0,"name":null,"span":{"filename":"src/builder/possible_value.rs","begin":[34,25],"end":[34,30]},"visibility":{"restricted":{"parent":"0:780:2146","path":"::builder::possible_value"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:3571:1966","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3581:412"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:718:673":{"id":"0:718:673","crate_id":0,"name":"from","span":{"filename":"src/builder/os_str.rs","begin":[78,4],"end":[80,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["id",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1568:311":{"id":"0:1568:311","crate_id":0,"name":"as_str","span":{"filename":"src/error/kind.rs","begin":[317,4],"end":[341,5]},"visibility":"public","docs":"End-user description of the error case, where relevant","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'static","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:275:3566":{"id":"0:275:3566","crate_id":0,"name":"get_value_parser","span":{"filename":"src/builder/arg.rs","begin":[3978,4],"end":[3985,5]},"visibility":"public","docs":"Configured parser for argument values\n\n# Example\n\n```rust\nlet cmd = clap::Command::new(\"raw\")\n    .arg(\n        clap::Arg::new(\"port\")\n            .value_parser(clap::value_parser!(usize))\n    );\nlet value_parser = cmd.get_arguments()\n    .find(|a| a.get_id() == \"port\").unwrap()\n    .get_value_parser();\nprintln!(\"{:?}\", value_parser);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"super::ValueParser","id":"0:1054:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:435:4298":{"id":"0:435:4298","crate_id":0,"name":"no_binary_name","span":{"filename":"src/builder/command.rs","begin":[939,4],"end":[945,5]},"visibility":"public","docs":"Specifies that the parser should not assume the first argument passed is the binary name.\n\nThis is normally the case when using a \"daemon\" style mode.  For shells / REPLs, see\n[`Command::multicall`][Command::multicall].\n\n# Examples\n\n```rust\n# use clap::{Command, arg};\nlet m = Command::new(\"myprog\")\n    .no_binary_name(true)\n    .arg(arg!(<cmd> ... \"commands to run\"))\n    .get_matches_from(vec![\"command\", \"set\"]);\n\nlet cmds: Vec<_> = m.get_many::<String>(\"cmd\").unwrap().collect();\nassert_eq!(cmds, [\"command\", \"set\"]);\n```\n[`try_get_matches_from_mut`]: crate::Command::try_get_matches_from_mut()","links":{"Command::multicall":"0:507:5016"},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:61:2088":{"id":"0:61:2088","crate_id":0,"name":"augment_args","span":{"filename":"src/derive.rs","begin":[292,4],"end":[292,45]},"visibility":"default","docs":"Append to [`Command`] so it can instantiate `Self`.\n\nSee also [`CommandFactory`].","links":{"`CommandFactory`":"0:51:1665","`Command`":"0:3505:1650"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["cmd",{"kind":"resolved_path","inner":{"name":"Command","id":"0:3505:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Command","id":"0:3505:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"a:2:2726:5340-0:4522:1658":{"id":"a:2:2726:5340-0:4522:1658","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2726:5340","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:7735:6524-0:3829:2161":{"id":"a:2:7735:6524-0:3829:2161","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7735:6524","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BoolValueParser","id":"0:3829:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1125:2173":{"id":"0:1125:2173","crate_id":0,"name":"TypedValueParser","span":{"filename":"src/builder/value_parser.rs","begin":[685,0],"end":[814,1]},"visibility":"public","docs":"Parse/validate argument values\n\nAs alternatives to implementing `TypedValueParser`,\n- Use `Fn(&str) -> Result<T, E>` which implements `TypedValueParser`\n- [`TypedValueParser::map`] or [`TypedValueParser::try_map`] to adapt an existing `TypedValueParser`\n\nSee `ValueParserFactory` to register `TypedValueParser::Value` with\n[`value_parser!`][crate::value_parser].\n\n# Example\n\n ```\n# use clap::error::ErrorKind;\n# use clap::error::ContextKind;\n# use clap::error::ContextValue;\n#[derive(Clone)]\nstruct Custom(u32);\n\n#[derive(Clone)]\nstruct CustomValueParser;\n\nimpl clap::builder::TypedValueParser for CustomValueParser {\n    type Value = Custom;\n\n    fn parse_ref(\n        &self,\n        cmd: &clap::Command,\n        arg: Option<&clap::Arg>,\n        value: &std::ffi::OsStr,\n    ) -> Result<Self::Value, clap::Error> {\n        let inner = clap::value_parser!(u32);\n        let val = inner.parse_ref(cmd, arg, value)?;\n\n        const INVALID_VALUE: u32 = 10;\n        if val == INVALID_VALUE {\n            let mut err = clap::Error::new(ErrorKind::ValueValidation)\n                .with_cmd(cmd);\n            if let Some(arg) = arg {\n                err.insert(ContextKind::InvalidArg, ContextValue::String(arg.to_string()));\n            }\n            err.insert(ContextKind::InvalidValue, ContextValue::String(INVALID_VALUE.to_string()));\n            return Err(err);\n        }\n\n        Ok(Custom(val))\n    }\n}\n```","links":{"`TypedValueParser::map`":"0:1130:837","crate::value_parser":"0:1395:2151","`TypedValueParser::try_map`":"0:1133:5769"},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:1126:5472","0:1127:5682","0:1128:2015","0:1129:3567","0:1130:837","0:1133:5769"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"implementations":["0:1137","0:1145","0:1153","0:1161","0:1171","0:1187","0:1208","0:1227","0:1243","0:1255","0:1265","0:1273","0:1284"]}},"0:1808":{"id":"0:1808","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1071,0],"end":[1218,1]},"visibility":{"restricted":{"parent":"0:1754:6526","path":"::parser::matches::arg_matches"}},"docs":"# Advanced","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4112:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1809:6588","0:1812:6611","0:1814:6628","0:1817:6655","0:1818:6673","0:1820:6683","0:1822:6691","0:1824:6699","0:1827:6707"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:5:681-0:3571:1966":{"id":"b:5:681-0:3571:1966","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:677:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:3571:1966","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:683:5351","5:684:3662","5:685:8969"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:735:540":{"id":"0:735:540","crate_id":0,"name":"deref","span":{"filename":"src/builder/os_str.rs","begin":[158,4],"end":[160,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"std::ffi::OsStr","id":"1:2029:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:826":{"id":"0:826","crate_id":0,"name":null,"span":{"filename":"src/builder/range.rs","begin":[119,0],"end":[123,1]},"visibility":{"restricted":{"parent":"0:807:2147","path":"::builder::range"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueRange","id":"0:3588:2156","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:827:673"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3620":{"id":"0:3620","crate_id":0,"name":null,"span":{"filename":"src/builder/resettable.rs","begin":[31,29],"end":[31,38]},"visibility":{"restricted":{"parent":"0:844:2148","path":"::builder::resettable"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::cmp::PartialEq","id":"2:2285:185","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2285:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Resettable","id":"0:3603:2158","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Resettable","id":"0:3603:2158","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:3622:600"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4536:1003":{"id":"0:4536:1003","crate_id":0,"name":"partial_cmp","span":{"filename":"src/util/id.rs","begin":[8,40],"end":[8,50]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::option::Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"$crate::cmp::Ordering","id":"2:38204:180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1230:5682":{"id":"0:1230:5682","crate_id":0,"name":"parse_ref","span":{"filename":"src/builder/value_parser.rs","begin":[1542,4],"end":[1591,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["cmd",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Command","id":"0:3505:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["arg",{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Arg","id":"0:3195:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}}}],["raw_value",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"std::ffi::OsStr","id":"1:2029:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48278:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Value","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:1125:2173","args":null}}}},{"type":{"kind":"resolved_path","inner":{"name":"crate::Error","id":"0:12:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2751:600":{"id":"0:2751:600","crate_id":0,"name":"eq","span":{"filename":"src/util/id.rs","begin":[129,4],"end":[131,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11436:29180":{"id":"2:11436:29180","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"crate::ops::IndexMut":"2:2991:7890","`str`":"1:12306:1352","str::slice_unchecked":"2:11435:29179"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:206:3188":{"id":"0:206:3188","crate_id":0,"name":"display_order","span":{"filename":"src/builder/arg.rs","begin":[2165,4],"end":[2168,5]},"visibility":"public","docs":"Allows custom ordering of args within the help message.\n\nArgs with a lower value will be displayed first in the help message. This is helpful when\none would like to emphasise frequently used args, or prioritize those towards the top of\nthe list. Args with duplicate display orders will be displayed in alphabetical order.\n\n**NOTE:** The default is 999 for all arguments.\n\n**NOTE:** This setting is ignored for [positional arguments] which are always displayed in\n[index] order.\n\n# Examples\n\n ```\n# use clap::{Command, Arg, ArgAction};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"a\") // Typically args are grouped alphabetically by name.\n                             // Args without a display_order have a value of 999 and are\n                             // displayed alphabetically with all other 999 valued args.\n        .long(\"long-option\")\n        .short('o')\n        .action(ArgAction::Set)\n        .help(\"Some help and text\"))\n    .arg(Arg::new(\"b\")\n        .long(\"other-option\")\n        .short('O')\n        .action(ArgAction::Set)\n        .display_order(1)   // In order to force this arg to appear *first*\n                            // all we have to do is give it a value lower than 999.\n                            // Any other args with a value of 1 will be displayed\n                            // alphabetically with this one...then 2 values, then 3, etc.\n        .help(\"I should be first!\"))\n    .get_matches_from(vec![\n        \"prog\", \"--help\"\n    ]);\n```\n\nThe above example displays the following help message\n\n```text\ncust-ord\n\nUsage: cust-ord [OPTIONS]\n\nOptions:\n    -h, --help                Print help information\n    -V, --version             Print version information\n    -O, --other-option <b>    I should be first!\n    -o, --long-option <a>     Some help and text\n```\n[positional arguments]: Arg::index()\n[index]: Arg::index()","links":{"Arg::index()":"0:163:747"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["ord",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl IntoResettable<usize>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:256:3564":{"id":"0:256:3564","crate_id":0,"name":"get_possible_values","span":{"filename":"src/builder/arg.rs","begin":[3823,4],"end":[3832,5]},"visibility":"public","docs":"Get the names of possible values for this argument. Only useful for user\nfacing applications, such as building help messages or man files","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:6400:240","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:3571:1966","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1794:6527":{"id":"0:1794:6527","crate_id":0,"name":"value_source","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[622,4],"end":[626,5]},"visibility":"public","docs":"Report where argument value came from\n\n# Panics\n\nIf `id` is not a valid argument or group id.\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, ArgAction};\n# use clap::parser::ValueSource;\nlet m = Command::new(\"myprog\")\n    .arg(Arg::new(\"debug\")\n        .short('d')\n        .action(ArgAction::SetTrue))\n    .get_matches_from(vec![\n        \"myprog\", \"-d\"\n    ]);\n\nassert_eq!(m.value_source(\"debug\"), Some(ValueSource::CommandLine));\n```\n\n[`default_value`]: crate::Arg::default_value()","links":{},"attrs":["#[track_caller]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ValueSource","id":"0:4275:6462","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:339:673":{"id":"0:339:673","crate_id":0,"name":"from","span":{"filename":"src/builder/arg_predicate.rs","begin":[16,4],"end":[18,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["other",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11424:29177":{"id":"2:11424:29177","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11445:29185":{"id":"2:11445:29185","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:50374:8071","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2785:2125":{"id":"0:2785:2125","crate_id":0,"name":"from_str","span":{"filename":"src/util/color.rs","begin":[79,4],"end":[86,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["s",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48278:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"2:11077:5547","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:876":{"id":"0:876","crate_id":0,"name":null,"span":{"filename":"src/builder/resettable.rs","begin":[123,0],"end":[130,1]},"visibility":{"restricted":{"parent":"0:844:2148","path":"::builder::resettable"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'static","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"items":["0:877:2452"],"negative":false,"synthetic":false,"blanket_impl":null}},"25:62:64563":{"id":"25:62:64563","crate_id":25,"name":"from_socketlike","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/io-lifetimes-1.0.3/src/portability.rs","begin":[484,4],"end":[484,54]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["owned",{"kind":"resolved_path","inner":{"name":"OwnedFd","id":"1:5064:9877","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1250:59":{"id":"0:1250:59","crate_id":0,"name":"default","span":{"filename":"src/builder/value_parser.rs","begin":[1668,4],"end":[1670,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2307":{"id":"0:2307","crate_id":0,"name":null,"span":{"filename":"src/parser/mod.rs","begin":[25,0],"end":[25,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::matches::ValuesRef","name":"ValuesRef","id":"0:4161:6460","glob":false}},"b:2:2238-0:4174:6458":{"id":"b:2:2238-0:4174:6458","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2232:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawValues","id":"0:4174:6458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2240:5354"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1872:6919":{"id":"0:1872:6919","crate_id":0,"name":"size_hint","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1476,4],"end":[1478,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3816":{"id":"0:3816","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1449,15],"end":[1449,20]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"std::convert::TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangedU64ValueParser","id":"0:3810:2171","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:3818:412"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:7048:2029":{"id":"2:7048:2029","crate_id":2,"name":"Item","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"Iterator","id":"2:7156:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:1093:673":{"id":"0:1093:673","crate_id":0,"name":"from","span":{"filename":"src/builder/value_parser.rs","begin":[411,4],"end":[414,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["value",{"kind":"resolved_path","inner":{"name":"std::ops::RangeTo","id":"2:46501:199","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i64"}}],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4040:6216":{"id":"0:4040:6216","crate_id":0,"name":"Io","span":{"filename":"src/error/kind.rs","begin":[305,4],"end":[305,6]},"visibility":"default","docs":"Represents an [I/O error].\nCan occur when writing to `stderr` or `stdout` or reading a configuration file.\n\n[I/O error]: std::io::Error","links":{"std::io::Error":"1:2905:127"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"0:230:3469":{"id":"0:230:3469","crate_id":0,"name":"requires_ifs","span":{"filename":"src/builder/arg.rs","begin":[3493,4],"end":[3500,5]},"visibility":"public","docs":"Allows multiple conditional requirements.\n\nThe requirement will only become valid if this arg's value matches the\n[`ArgPredicate`].\n\n# Examples\n\n```rust\n# use clap::Arg;\nArg::new(\"config\")\n    .requires_ifs([\n        (\"val\", \"arg\"),\n        (\"other_val\", \"arg2\"),\n    ])\n# ;\n```\n\nSetting `Arg::requires_ifs([\"val\", \"arg\"])` requires that the `arg` be used at runtime if the\ndefining argument's value is equal to `val`. If the defining argument's value is anything other\nthan `val`, `arg` isn't required.\n\n```rust\n# use clap::{Command, Arg, error::ErrorKind, ArgAction};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .action(ArgAction::Set)\n        .requires_ifs([\n            (\"special.conf\", \"opt\"),\n            (\"other.conf\", \"other\"),\n        ])\n        .long(\"config\"))\n    .arg(Arg::new(\"opt\")\n        .long(\"option\")\n        .action(ArgAction::Set))\n    .arg(Arg::new(\"other\"))\n    .try_get_matches_from(vec![\n        \"prog\", \"--config\", \"special.conf\"\n    ]);\n\nassert!(res.is_err()); // We  used --config=special.conf so --option <val> is required\nassert_eq!(res.unwrap_err().kind(), ErrorKind::MissingRequiredArgument);\n```\n\nSetting `Arg::requires_ifs` with [`ArgPredicate::IsPresent`] and *not* supplying all the\narguments is an error.\n\n```rust\n# use clap::{Command, Arg, error::ErrorKind, ArgAction, builder::ArgPredicate};\nlet res = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .action(ArgAction::Set)\n        .requires_ifs([\n            (ArgPredicate::IsPresent, \"input\"),\n            (ArgPredicate::IsPresent, \"output\"),\n        ])\n        .long(\"config\"))\n    .arg(Arg::new(\"input\"))\n    .arg(Arg::new(\"output\"))\n    .try_get_matches_from(vec![\n        \"prog\", \"--config\", \"file.conf\", \"in.txt\"\n    ]);\n\nassert!(res.is_err());\n// We didn't use output\nassert_eq!(res.unwrap_err().kind(), ErrorKind::MissingRequiredArgument);\n```\n\n[`Arg::requires(name)`]: Arg::requires()\n[Conflicting]: Arg::conflicts_with()\n[override]: Arg::overrides_with()","links":{"`ArgPredicate::IsPresent`":"0:3249:2660","`ArgPredicate`":"0:3248:2155"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["ifs",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7042:149","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"tuple","inner":[{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ArgPredicate","id":"0:3248:2155","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]},{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]}}}}]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl Into<ArgPredicate>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ArgPredicate","id":"0:3248:2155","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}},{"name":"impl Into<Id>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}},{"name":"impl IntoIterator<Item = (impl Into<ArgPredicate>, impl Into<Id>)>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7042:149","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"tuple","inner":[{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ArgPredicate","id":"0:3248:2155","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]},{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2517-0:4542:1657":{"id":"b:2:2517-0:4542:1657","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:4542:1657","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2519:673"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2241-0:3842:2162":{"id":"b:2:2241-0:3842:2162","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2235:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BoolishValueParser","id":"0:3842:2162","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2243:26835"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:453":{"id":"0:453","crate_id":0,"name":null,"span":{"filename":"src/builder/command.rs","begin":[1392,0],"end":[2168,1]},"visibility":{"restricted":{"parent":"0:346:1834","path":"::builder::command"}},"docs":"# Command-specific Settings\n\nThese apply only to the current command and are not inherited by subcommands.","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Command","id":"0:3505:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:454:894","0:455:4021","0:456:4020","0:457:1836","0:458:1838","0:459:4023","0:460:4026","0:461:4027","0:462:4024","0:463:4025","0:464:1515","0:465:4022","0:466:4514","0:467:4533","0:468:4574","0:475:4582","0:476:4585","0:477:4655","0:481:4703"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:322:3853":{"id":"0:322:3853","crate_id":0,"name":"get_args","span":{"filename":"src/builder/arg_group.rs","begin":[204,4],"end":[206,5]},"visibility":"public","docs":"Getters for all args. It will return a vector of `Id`\n\n# Example\n\n```rust\n# use clap::{ArgGroup};\nlet args: Vec<&str> = vec![\"a1\".into(), \"a4\".into()];\nlet grp = ArgGroup::new(\"program\").args(&args);\n\nfor (pos, arg) in grp.get_args().enumerate() {\n    assert_eq!(*arg, args[pos]);\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:7156:156","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}}]}}},"generic_params":[],"modifier":"none"}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2522:673":{"id":"2:2522:673","crate_id":2,"name":"from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["t",{"kind":"primitive","inner":"never"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3979:176":{"id":"0:3979:176","crate_id":0,"name":"None","span":{"filename":"src/error/context.rs","begin":[79,4],"end":[79,8]},"visibility":"default","docs":"[`ContextKind`] is self-sufficient, no additional information needed","links":{"`ContextKind`":"0:3929:6081"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"0:1029":{"id":"0:1029","crate_id":0,"name":null,"span":{"filename":"src/builder/styled_str.rs","begin":[282,0],"end":[286,1]},"visibility":{"restricted":{"parent":"0:986:2149","path":"::builder::styled_str"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["min","max","clamp"],"trait":{"name":"Ord","id":"2:2321:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1030:419"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1186:915":{"id":"0:1186:915","crate_id":0,"name":"new","span":{"filename":"src/builder/value_parser.rs","begin":[1143,4],"end":[1145,5]},"visibility":"public","docs":"Verify the value is from an enumerated set pf [`PossibleValue`][crate::builder::PossibleValue].","links":{"crate::builder::PossibleValue":"0:3571:1966"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["values",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"PossibleValuesParser","id":"0:3783:2169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl Into<PossibleValuesParser>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"PossibleValuesParser","id":"0:3783:2169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2523-0:4542:1657":{"id":"b:2:2523-0:4542:1657","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2493:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:4542:1657","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2526:127","2:2527:1427"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3321-0:3229:1653":{"id":"b:2:3321-0:3229:1653","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3319:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3229:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3323:1440"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4547:4336":{"id":"0:4547:4336","crate_id":0,"name":"Never","span":{"filename":"src/util/color.rs","begin":[58,4],"end":[58,9]},"visibility":"default","docs":"Disables colored output no matter if the output is going to a terminal/TTY, or not.\n\n# Platform Specific\n\nThis setting only applies to Unix, Linux, and macOS (i.e. non-Windows platforms)\n\n# Examples\n\n ```no_run\n# use clap::{Command, ColorChoice};\nCommand::new(\"myprog\")\n    .color(ColorChoice::Never)\n    .get_matches();\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"0:4006":{"id":"0:4006","crate_id":0,"name":null,"span":{"filename":"src/error/context.rs","begin":[74,34],"end":[74,36]},"visibility":{"restricted":{"parent":"0:1533:479","path":"::error::context"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2673:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ContextValue","id":"0:3978:6082","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:444:3212":{"id":"0:444:3212","crate_id":0,"name":"next_line_help","span":{"filename":"src/builder/command.rs","begin":[1175,4],"end":[1181,5]},"visibility":"public","docs":"Places the help string for all arguments and subcommands on the line after them.\n\n**NOTE:** This choice is propagated to all child subcommands.\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg};\nCommand::new(\"myprog\")\n    .next_line_help(true)\n    .get_matches();\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["yes",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:464:1515":{"id":"0:464:1515","crate_id":0,"name":"version","span":{"filename":"src/builder/command.rs","begin":[1625,4],"end":[1628,5]},"visibility":"public","docs":"Sets the version for the short version (`-V`) and help messages.\n\nIf [`Command::long_version`] is not specified, this message will be displayed for `--version`.\n\n**Pro-tip:** Use `clap`s convenience macro [`crate_version!`] to\nautomatically set your application's version to the same thing as your\ncrate at compile time.\n\n# Examples\n\n```no_run\n# use clap::Command;\nCommand::new(\"myprog\")\n    .version(\"v0.1.24\")\n# ;\n```","links":{"`Command::long_version`":"0:465:4022"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["ver",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl IntoResettable<Str>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2241-0:3505:1650":{"id":"b:2:2241-0:3505:1650","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2235:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Command","id":"0:3505:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2243:26835"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1494":{"id":"0:1494","crate_id":0,"name":null,"span":{"filename":"src/builder/mod.rs","begin":[46,0],"end":[46,42]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"value_parser::OsStringValueParser","name":"OsStringValueParser","id":"0:3756:2167","glob":false}},"0:2739:655":{"id":"0:2739:655","crate_id":0,"name":"fmt","span":{"filename":"src/util/id.rs","begin":[88,4],"end":[90,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"std::fmt::Formatter","id":"2:8556:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"std::fmt::Result","id":"2:8545:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1159":{"id":"0:1159","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[943,0],"end":[948,1]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"PathBufValueParser","id":"0:3762:2168","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1160:915"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3669:655":{"id":"0:3669:655","crate_id":0,"name":"fmt","span":{"filename":"src/builder/styled_str.rs","begin":[5,25],"end":[5,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:8556:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8545:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3761:655":{"id":"0:3761:655","crate_id":0,"name":"fmt","span":{"filename":"src/builder/value_parser.rs","begin":[897,22],"end":[897,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:8556:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8545:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2676:225-0:4254:6461":{"id":"a:2:2676:225-0:4254:6461","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:4254:6461","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:942":{"id":"0:942","crate_id":0,"name":null,"span":{"filename":"src/builder/str.rs","begin":[134,0],"end":[139,1]},"visibility":{"restricted":{"parent":"0:912:1352","path":"::builder::str"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"2:2481:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"1:2029:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:943:310"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2528-0:3852:2166":{"id":"b:2:2528-0:3852:2166","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"NonEmptyStringValueParser","id":"0:3852:2166","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2531:127","2:2532:1426"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2238-0:3852:2166":{"id":"b:2:2238-0:3852:2166","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2232:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"NonEmptyStringValueParser","id":"0:3852:2166","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2240:5354"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3777:655":{"id":"0:3777:655","crate_id":0,"name":"fmt","span":{"filename":"src/builder/value_parser.rs","begin":[1023,16],"end":[1023,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:8556:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8545:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1127:5682":{"id":"0:1127:5682","crate_id":0,"name":"parse_ref","span":{"filename":"src/builder/value_parser.rs","begin":[692,4],"end":[697,43]},"visibility":"default","docs":"Parse the argument value\n\nWhen `arg` is `None`, an external subcommand value is being parsed.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["cmd",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Command","id":"0:3505:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["arg",{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Arg","id":"0:3195:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}}}],["value",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"std::ffi::OsStr","id":"1:2029:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48278:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Value","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:1125:2173","args":null}}}},{"type":{"kind":"resolved_path","inner":{"name":"crate::Error","id":"0:12:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:3239:412":{"id":"0:3239:412","crate_id":0,"name":"clone","span":{"filename":"src/builder/arg_group.rs","begin":[85,18],"end":[85,23]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"ArgGroup","id":"0:3229:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:792":{"id":"0:792","crate_id":0,"name":null,"span":{"filename":"src/builder/possible_value.rs","begin":[146,0],"end":[228,1]},"visibility":{"restricted":{"parent":"0:780:2146","path":"::builder::possible_value"}},"docs":"Reflection","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"PossibleValue","id":"0:3571:1966","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:793:5044","0:794:3534","0:796:3623","0:799:5410","0:801:1855"],"negative":false,"synthetic":false,"blanket_impl":null}},"25:63:64564":{"id":"25:63:64564","crate_id":25,"name":"from_into_socketlike","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/io-lifetimes-1.0.3/src/portability.rs","begin":[489,4],"end":[489,72]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["owned",{"kind":"generic","inner":"Owned"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[{"name":"Owned","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Owned"},"bounds":[{"trait_bound":{"trait":{"name":"IntoSocketlike","id":"25:42:11395","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3992:1553":{"id":"0:3992:1553","crate_id":0,"name":"0","span":{"filename":"src/error/context.rs","begin":[87,14],"end":[87,39]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"crate::builder::StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"b:5:5352-0:4009:3985":{"id":"b:5:5352-0:4009:3985","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:8601:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5350:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4009:3985","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5354:1406"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:284:3637":{"id":"0:284:3637","crate_id":0,"name":"is_require_equals_set","span":{"filename":"src/builder/arg.rs","begin":[4035,4],"end":[4037,5]},"visibility":"public","docs":"Report whether [`Arg::require_equals`] is set","links":{"`Arg::require_equals`":"0:187:2928"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1407:5908":{"id":"0:1407:5908","crate_id":0,"name":"_ValueParserViaFromOsStringSealed","span":{"filename":"src/builder/value_parser.rs","begin":[2386,4],"end":[2386,50]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:561:5113":{"id":"0:561:5113","crate_id":0,"name":"get_arg_conflicts_with","span":{"filename":"src/builder/command.rs","begin":[3479,4],"end":[3500,5]},"visibility":"public","docs":"Get a list of all arguments the given argument conflicts with.\n\nIf the provided argument is declared as global, the conflicts will be determined\nbased on the propagation rules of global arguments.\n\n### Panics\n\nIf the given arg contains a conflict with an argument that is unknown to\nthis `Command`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["arg",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3195:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:6400:240","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3195:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2241-0:3749:2172":{"id":"b:2:2241-0:3749:2172","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2235:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StringValueParser","id":"0:3749:2172","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2243:26835"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:319:1860":{"id":"0:319:1860","crate_id":0,"name":"id","span":{"filename":"src/builder/arg_group.rs","begin":[123,4],"end":[126,5]},"visibility":"public","docs":"Sets the group name.\n\n# Examples\n\n```rust\n# use clap::{Command, ArgGroup};\nArgGroup::default().id(\"config\")\n# ;\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["id",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl Into<Id>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1205:2147":{"id":"0:1205:2147","crate_id":0,"name":"range","span":{"filename":"src/builder/value_parser.rs","begin":[1264,4],"end":[1312,5]},"visibility":"public","docs":"Narrow the supported range","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["range",{"kind":"generic","inner":"B"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"2:3084:5446","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i64"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3630:1003":{"id":"0:3630:1003","crate_id":0,"name":"partial_cmp","span":{"filename":"src/builder/resettable.rs","begin":[31,44],"end":[31,54]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Resettable","id":"0:3603:2158","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::option::Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"$crate::cmp::Ordering","id":"2:38204:180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2310":{"id":"0:2310","crate_id":0,"name":null,"span":{"filename":"src/parser/mod.rs","begin":[26,36],"end":[26,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::matches::Indices","name":"Indices","id":"0:4254:6461","glob":false}},"0:1273":{"id":"0:1273","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1908,0],"end":[1933,1]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["map","possible_values","parse","try_map"],"trait":{"name":"TypedValueParser","id":"0:1125:2173","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"NonEmptyStringValueParser","id":"0:3852:2166","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1274:5472","0:1275:5682"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2676:225-0:1054:2174":{"id":"a:2:2676:225-0:1054:2174","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1054:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3673":{"id":"0:3673","crate_id":0,"name":null,"span":{"filename":"src/builder/styled_str.rs","begin":[5,43],"end":[5,45]},"visibility":{"restricted":{"parent":"0:986:2149","path":"::builder::styled_str"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2673:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:5:681-0:4522:1658":{"id":"b:5:681-0:4522:1658","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:677:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:683:5351","5:684:3662","5:685:8969"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1187":{"id":"0:1187","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[1148,0],"end":[1199,1]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["map","possible_values","parse","try_map"],"trait":{"name":"TypedValueParser","id":"0:1125:2173","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValuesParser","id":"0:3783:2169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1188:5472","0:1189:5682","0:1190:2015","0:1196:3567"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2523-0:4254:6461":{"id":"b:2:2523-0:4254:6461","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2493:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:4254:6461","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2526:127","2:2527:1427"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2523-0:3783:2169":{"id":"b:2:2523-0:3783:2169","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2493:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PossibleValuesParser","id":"0:3783:2169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2526:127","2:2527:1427"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11416:1837":{"id":"2:11416:1837","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3261":{"id":"0:3261","crate_id":0,"name":null,"span":{"filename":"src/builder/arg_predicate.rs","begin":[6,34],"end":[6,36]},"visibility":{"restricted":{"parent":"0:335:2143","path":"::builder::arg_predicate"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2673:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgPredicate","id":"0:3248:2155","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:74":{"id":"0:74","crate_id":0,"name":null,"span":{"filename":"src/derive.rs","begin":[397,0],"end":[421,1]},"visibility":{"restricted":{"parent":"0:29:544","path":"::derive"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Parser","id":"0:36:1667","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["try_parse_from","parse_from","try_parse","parse","try_update_from","update_from"],"trait":{"name":"Parser","id":"0:36:1667","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:2137","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:76:2015","0:77:2023","0:78:2026","0:81:2032"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4022:6198":{"id":"0:4022:6198","crate_id":0,"name":"TooFewValues","span":{"filename":"src/error/kind.rs","begin":[131,4],"end":[131,16]},"visibility":"default","docs":"Occurs when the user provides fewer values for an argument than were defined by setting\n[`Arg::num_args`].\n\n# Examples\n\n```rust\n# use clap::{Command, Arg, error::ErrorKind};\nlet result = Command::new(\"prog\")\n    .arg(Arg::new(\"some_opt\")\n        .long(\"opt\")\n        .num_args(3..))\n    .try_get_matches_from(vec![\"prog\", \"--opt\", \"too\", \"few\"]);\nassert!(result.is_err());\nassert_eq!(result.unwrap_err().kind(), ErrorKind::TooFewValues);\n```\n[`Arg::num_args`]: crate::Arg::num_args()","links":{"crate::Arg::num_args()":"0:178:1872"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"0:1898:59":{"id":"0:1898:59","crate_id":0,"name":"default","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1552,4],"end":[1558,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1600:2021":{"id":"0:1600:2021","crate_id":0,"name":"exit","span":{"filename":"src/error/mod.rs","begin":[214,4],"end":[225,5]},"visibility":"public","docs":"Prints the error and exits.\n\nDepending on the error kind, this either prints to `stderr` and exits with a status of `2`\nor prints to `stdout` and exits with a status of `0`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"never"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:872":{"id":"0:872","crate_id":0,"name":null,"span":{"filename":"src/builder/resettable.rs","begin":[105,0],"end":[112,1]},"visibility":{"restricted":{"parent":"0:844:2148","path":"::builder::resettable"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1054:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ValueParser","id":"0:1054:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:873:2452"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:309":{"id":"0:309","crate_id":0,"name":null,"span":{"filename":"src/builder/arg.rs","begin":[4267,0],"end":[4267,18]},"visibility":{"restricted":{"parent":"0:124:1849","path":"::builder::arg"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2290:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3195:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3838:412":{"id":"0:3838:412","crate_id":0,"name":"clone","span":{"filename":"src/builder/value_parser.rs","begin":[1711,15],"end":[1711,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"FalseyValueParser","id":"0:3835:2164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1887":{"id":"0:1887","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1531,0],"end":[1540,1]},"visibility":{"restricted":{"parent":"0:1754:6526","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["flat_map","array_chunks","reduce","try_collect","take_while","any","step_by","advance_by","all","copied","find","size_hint","is_sorted_by_key","product","try_reduce","sum","collect_into","map_while","intersperse","min_by","flatten","le","find_map","__iterator_get_unchecked","zip","map","cmp_by","try_find","position","partition","fold","scan","intersperse_with","enumerate","max_by","eq","partial_cmp_by","last","rposition","gt","partition_in_place","fuse","for_each","partial_cmp","max_by_key","rev","take","eq_by","chain","unzip","is_partitioned","try_for_each","inspect","ge","count","skip","next_chunk","peekable","min","cmp","filter_map","cloned","filter","is_sorted","cycle","try_fold","min_by_key","by_ref","lt","skip_while","nth","collect","max","ne","is_sorted_by"],"trait":{"name":"Iterator","id":"2:7156:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawValues","id":"0:4174:6458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:1889:2029","0:1890:928","0:1891:6919"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:7736:6523-0:3505:1650":{"id":"a:2:7736:6523-0:3505:1650","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7736:6523","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Command","id":"0:3505:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"0:4121":{"id":"0:4121","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[65,23],"end":[65,30]},"visibility":{"restricted":{"parent":"0:1754:6526","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2564:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4112:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4122:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:832":{"id":"0:832","crate_id":0,"name":null,"span":{"filename":"src/builder/range.rs","begin":[141,0],"end":[147,1]},"visibility":{"restricted":{"parent":"0:807:2147","path":"::builder::range"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"RangeFrom","id":"2:46481:196","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueRange","id":"0:3588:2156","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:833:673"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1275:5682":{"id":"0:1275:5682","crate_id":0,"name":"parse_ref","span":{"filename":"src/builder/value_parser.rs","begin":[1911,4],"end":[1932,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["cmd",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Command","id":"0:3505:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["arg",{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Arg","id":"0:3195:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}}}],["value",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"std::ffi::OsStr","id":"1:2029:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48278:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Value","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:1125:2173","args":null}}}},{"type":{"kind":"resolved_path","inner":{"name":"crate::Error","id":"0:12:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2528-0:4009:3985":{"id":"b:2:2528-0:4009:3985","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ErrorKind","id":"0:4009:3985","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2531:127","2:2532:1426"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:204:1563":{"id":"0:204:1563","crate_id":0,"name":"help","span":{"filename":"src/builder/arg.rs","begin":[2043,4],"end":[2046,5]},"visibility":"public","docs":"Sets the description of the argument for short help (`-h`).\n\nTypically, this is a short (one line) description of the arg.\n\nIf [`Arg::long_help`] is not specified, this message will be displayed for `--help`.\n\n**NOTE:** Only `Arg::help` is used in completion script generation in order to be concise\n\n# Examples\n\nAny valid UTF-8 is allowed in the help text. The one exception is when one wishes to\ninclude a newline in the help text and have the following text be properly aligned with all\nthe other help text.\n\nSetting `help` displays a short message to the side of the argument when the user passes\n`-h` or `--help` (by default).\n\n ```\n# use clap::{Command, Arg};\nlet m = Command::new(\"prog\")\n    .arg(Arg::new(\"cfg\")\n        .long(\"config\")\n        .help(\"Some help text describing the --config arg\"))\n    .get_matches_from(vec![\n        \"prog\", \"--help\"\n    ]);\n```\n\nThe above example displays\n\n```notrust\nhelptest\n\nUsage: helptest [OPTIONS]\n\nOptions:\n    --config     Some help text describing the --config arg\n-h, --help       Print help information\n-V, --version    Print version information\n```\n[`Arg::long_help`]: Arg::long_help()","links":{"Arg::long_help()":"0:205:2393"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["h",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl IntoResettable<StyledStr>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11435:29179":{"id":"2:11435:29179","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12306:1352","str::slice_mut_unchecked":"2:11436:29180","crate::ops::Index":"2:2987:3984"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2513-0:3547:181":{"id":"b:2:2513-0:3547:181","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OsStr","id":"0:3547:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2516:2263"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:7736:6523-0:3195:1652":{"id":"a:2:7736:6523-0:3195:1652","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7736:6523","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3195:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"b:2:3321-0:3195:1652":{"id":"b:2:3321-0:3195:1652","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3319:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arg","id":"0:3195:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3323:1440"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3610":{"id":"0:3610","crate_id":0,"name":null,"span":{"filename":"src/builder/resettable.rs","begin":[31,9],"end":[31,13]},"visibility":{"restricted":{"parent":"0:844:2148","path":"::builder::resettable"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::marker::Copy","id":"2:2674:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2674:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Resettable","id":"0:3603:2158","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:7735:6524-0:4542:1657":{"id":"a:2:7735:6524-0:4542:1657","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7735:6524","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ColorChoice","id":"0:4542:1657","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1155:5682":{"id":"0:1155:5682","crate_id":0,"name":"parse_ref","span":{"filename":"src/builder/value_parser.rs","begin":[911,4],"end":[918,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["cmd",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Command","id":"0:3505:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["arg",{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"crate::Arg","id":"0:3195:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}}}],["value",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"std::ffi::OsStr","id":"1:2029:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48278:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Value","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:1125:2173","args":null}}}},{"type":{"kind":"resolved_path","inner":{"name":"crate::Error","id":"0:12:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1318":{"id":"0:1318","crate_id":0,"name":null,"span":{"filename":"src/builder/value_parser.rs","begin":[2118,0],"end":[2123,1]},"visibility":{"restricted":{"parent":"0:1049:2151","path":"::builder::value_parser"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ValueParserFactory","id":"0:1306:2175","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"bool"},"items":["0:1319:1667","0:1320:2151"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1571":{"id":"0:1571","crate_id":0,"name":null,"span":{"filename":"src/error/mod.rs","begin":[33,0],"end":[33,31]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"format::ErrorFormatter","name":"ErrorFormatter","id":"0:1547:6079","glob":false}},"0:520:5053":{"id":"0:520:5053","crate_id":0,"name":"get_short_flag","span":{"filename":"src/builder/command.rs","begin":[3266,4],"end":[3268,5]},"visibility":"public","docs":"Get the short flag of the subcommand.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"char"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:889":{"id":"0:889","crate_id":0,"name":null,"span":{"filename":"src/builder/resettable.rs","begin":[165,0],"end":[169,1]},"visibility":{"restricted":{"parent":"0:844:2148","path":"::builder::resettable"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:3704:1651","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValueHint","id":"0:3704:1651","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:890:2452"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:789:277":{"id":"0:789:277","crate_id":0,"name":"alias","span":{"filename":"src/builder/possible_value.rs","begin":[119,4],"end":[126,5]},"visibility":"public","docs":"Sets a *hidden* alias for this argument value.\n\n# Examples\n\n```rust\n# use clap::builder::PossibleValue;\nPossibleValue::new(\"slow\")\n    .alias(\"not-fast\")\n# ;\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["name",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl IntoResettable<Str>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Str","id":"0:3638:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4122:59":{"id":"0:4122:59","crate_id":0,"name":"default","span":{"filename":"src/parser/matches/arg_matches.rs","begin":[65,23],"end":[65,30]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"ArgMatches","id":"0:4112:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2238-0:1549:6080":{"id":"b:2:2238-0:1549:6080","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2232:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"KindFormatter","id":"0:1549:6080","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2240:5354"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:25:80-0:3603:2158":{"id":"b:25:80-0:3603:2158","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/io-lifetimes-1.0.3/src/lib.rs","begin":[94,0],"end":[94,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OwnedFd","id":"1:5064:9877","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["from_into_fd"],"trait":{"name":"FromFd","id":"25:69:61233","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Resettable","id":"0:3603:2158","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["25:82:64565"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:466:4514":{"id":"0:466:4514","crate_id":0,"name":"override_usage","span":{"filename":"src/builder/command.rs","begin":[1695,4],"end":[1698,5]},"visibility":"public","docs":"Overrides the `clap` generated usage string for help and error messages.\n\n**NOTE:** Using this setting disables `clap`s \"context-aware\" usage\nstrings. After this setting is set, this will be *the only* usage string\ndisplayed to the user!\n\n**NOTE:** Multiple usage lines may be present in the usage argument, but\nsome rules need to be followed to ensure the usage lines are formatted\ncorrectly by the default help formatter:\n\n- Do not indent the first usage line.\n- Indent all subsequent usage lines with seven spaces.\n- The last line must not end with a newline.\n\n# Examples\n\n```no_run\n# use clap::{Command, Arg};\nCommand::new(\"myprog\")\n    .override_usage(\"myapp [-clDas] <some_file>\")\n# ;\n```\n\nOr for multiple usage lines:\n\n```no_run\n# use clap::{Command, Arg};\nCommand::new(\"myprog\")\n    .override_usage(\n        \"myapp -X [-a] [-b] <file>\\n       \\\n         myapp -Y [-c] <file1> <file2>\\n       \\\n         myapp -Z [-d|-e]\"\n    )\n# ;\n```\n\n[`ArgMatches::usage`]: ArgMatches::usage()","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["usage",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl IntoResettable<StyledStr>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:430:4275":{"id":"0:430:4275","crate_id":0,"name":"render_version","span":{"filename":"src/builder/command.rs","begin":[864,4],"end":[866,5]},"visibility":"public","docs":"Version message rendered as if the user ran `-V`.\n\nSee also [`Command::render_long_version`].\n\n### Coloring\n\nThis function does not try to color the message nor it inserts any [ANSI escape codes].\n\n### Examples\n\n```rust\n# use clap::Command;\nuse std::io;\nlet cmd = Command::new(\"myprog\");\nprintln!(\"{}\", cmd.render_version());\n```\n[`io::Write`]: std::io::Write\n[`-V` (short)]: Command::version()\n[`--version` (long)]: Command::long_version()\n[ANSI escape codes]: https://en.wikipedia.org/wiki/ANSI_escape_code","links":{"`Command::render_long_version`":"0:431:4280"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6967:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2519:673":{"id":"2:2519:673","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2662:217-0:4522:1658":{"id":"a:2:2662:217-0:4522:1658","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4537":{"id":"0:4537","crate_id":0,"name":null,"span":{"filename":"src/util/id.rs","begin":[8,52],"end":[8,55]},"visibility":{"restricted":{"parent":"0:2715:1860","path":"::util::id"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["min","max","clamp"],"trait":{"name":"Ord","id":"2:2321:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Id","id":"0:4522:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4538:419"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3829:2161":{"id":"0:3829:2161","crate_id":0,"name":"BoolValueParser","span":{"filename":"src/builder/value_parser.rs","begin":[1614,0],"end":[1614,29]},"visibility":"public","docs":"Implementation for [`ValueParser::bool`]\n\nUseful for composing new [`TypedValueParser`]s","links":{"`ValueParser::bool`":"0:1072:366","`TypedValueParser`":"0:1125:2173"},"attrs":["#[non_exhaustive]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":false}},"generics":{"params":[],"where_predicates":[]},"impls":["0:1240","a:2:7735:6524-0:3829:2161","a:2:2676:225-0:3829:2161","a:2:2662:217-0:3829:2161","a:2:2726:5340-0:3829:2161","a:2:7736:6523-0:3829:2161","b:2:2523-0:3829:2161","b:2:2238-0:3829:2161","b:2:2517-0:3829:2161","b:2:2513-0:3829:2161","b:2:2241-0:3829:2161","b:2:2528-0:3829:2161","b:2:3321-0:3829:2161","b:5:681-0:3829:2161","0:3830","0:3831","0:3833","0:1243","0:1249"]}},"a:2:7735:6524-0:4161:6460":{"id":"a:2:7735:6524-0:4161:6460","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7735:6524","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValuesRef","id":"0:4161:6460","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"0:787:1563":{"id":"0:787:1563","crate_id":0,"name":"help","span":{"filename":"src/builder/possible_value.rs","begin":[82,4],"end":[85,5]},"visibility":"public","docs":"Sets the help description of the value.\n\nThis is typically displayed in completions (where supported) and should be a short, one-line\ndescription.\n\n# Examples\n\n```rust\n# use clap::builder::PossibleValue;\nPossibleValue::new(\"slow\")\n    .help(\"not fast\")\n# ;\n```","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["help",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl IntoResettable<StyledStr>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoResettable","id":"0:861:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"StyledStr","id":"0:3662:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3818:412":{"id":"0:3818:412","crate_id":0,"name":"clone","span":{"filename":"src/builder/value_parser.rs","begin":[1449,15],"end":[1449,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"RangedU64ValueParser","id":"0:3810:2171","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2001":{"id":"0:2001","crate_id":0,"name":null,"span":{"filename":"src/parser/matches/arg_matches.rs","begin":[1834,0],"end":[1843,1]},"visibility":{"restricted":{"parent":"0:1754:6526","path":"::parser::matches::arg_matches"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["flat_map","array_chunks","reduce","try_collect","take_while","any","step_by","advance_by","all","copied","find","size_hint","is_sorted_by_key","product","try_reduce","sum","collect_into","map_while","intersperse","min_by","flatten","le","find_map","__iterator_get_unchecked","zip","map","cmp_by","try_find","position","partition","fold","scan","intersperse_with","enumerate","max_by","eq","partial_cmp_by","last","rposition","gt","partition_in_place","fuse","for_each","partial_cmp","max_by_key","rev","take","eq_by","chain","unzip","is_partitioned","try_for_each","inspect","ge","count","skip","next_chunk","peekable","min","cmp","filter_map","cloned","filter","is_sorted","cycle","try_fold","min_by_key","by_ref","lt","skip_while","nth","collect","max","ne","is_sorted_by"],"trait":{"name":"Iterator","id":"2:7156:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Indices","id":"0:4254:6461","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:2003:2029","0:2004:928","0:2005:6919"],"negative":false,"synthetic":false,"blanket_impl":null}}},"paths":{"26:6783:13496":{"crate_id":26,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"28:5773:12411":{"crate_id":28,"path":["linux_raw_sys","general","__sifields__bindgen_ty_2"],"kind":"struct"},"2:2817:1944":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:47630:8006":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:54110:15175":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:11576:14066":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:11903:15293":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"25:28:11394":{"crate_id":25,"path":["io_lifetimes","portability","AsSocketlike"],"kind":"trait"},"17:13536:14581":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"28:6932:63059":{"crate_id":28,"path":["linux_raw_sys","general","_bindgen_ty_9"],"kind":"enum"},"26:6830:13512":{"crate_id":26,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:10608:11167":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:11436:14025":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"28:5712:12379":{"crate_id":28,"path":["linux_raw_sys","general","clone_args"],"kind":"struct"},"26:1987:12157":{"crate_id":26,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:12300:408":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:57099:242":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"12:1852:9845":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:49131:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"16:153:10805":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"26:728:12354":{"crate_id":26,"path":["libc","unix","itimerval"],"kind":"struct"},"5:5888:11923":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"6:1608:13094":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"5:3764:11914":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:20056:7906":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:2839:7883":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"6:6524:13741":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:600:13046":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"5:1370:6930":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"16:5839:10862":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"6:6277:12869":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:20503:17984":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"26:4905:13249":{"crate_id":26,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:10752:11162":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"16:0:7723":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:12325:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:46599:7893":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:46984:8067":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"23:106:7987":{"crate_id":23,"path":["os_str_bytes","iter","Split"],"kind":"struct"},"28:7174:63062":{"crate_id":28,"path":["linux_raw_sys","general","_bindgen_ty_12"],"kind":"enum"},"1:4312:9861":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:10283:8191":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"16:7970:10945":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"28:5269:12244":{"crate_id":28,"path":["linux_raw_sys","general","ip6_mtuinfo"],"kind":"struct"},"2:8605:7917":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"17:11909:14112":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"5:779:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:8705:10059":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:53160:10218":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"6:4698:13433":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"26:5536:13378":{"crate_id":26,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:46545:200":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:2281:419":{"crate_id":2,"path":["core","cmp"],"kind":"module"},"17:10546:54456":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"26:4846:13240":{"crate_id":26,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"6:7166:12633":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"26:5800:13425":{"crate_id":26,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"27:4868:13018":{"crate_id":27,"path":["rustix","process","prctl","SpeculationFeatureControl"],"kind":"struct"},"1:9370:9409":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"27:2839:11422":{"crate_id":27,"path":["rustix","backend","io","errno","Errno"],"kind":"struct"},"2:2928:7889":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:3319:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"17:11684:14082":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:13506:14573":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:1825:8219":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:50705:10124":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:12251:14185":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:51965:10247":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:21243:15021":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"17:10121:11225":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"21:89:8025":{"crate_id":21,"path":["termcolor","WriterInnerLock"],"kind":"enum"},"16:4749:14635":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:5880:203":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:10902:9979":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"1:3479:7980":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:21264:10175":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"28:7387:12897":{"crate_id":28,"path":["linux_raw_sys","general","mmsghdr"],"kind":"struct"},"26:2143:13151":{"crate_id":26,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"6:554:12643":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"28:5236:12223":{"crate_id":28,"path":["linux_raw_sys","general","sockaddr_in6"],"kind":"struct"},"2:47209:8142":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"26:9212:13773":{"crate_id":26,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"12:697:9935":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"16:2465:11121":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"6:567:12637":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:12299:912":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"27:3087:11438":{"crate_id":27,"path":["rustix","backend","io","types","ReadWriteFlags"],"kind":"struct"},"1:10445:29149":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"2:46901:9356":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"28:6965:12787":{"crate_id":28,"path":["linux_raw_sys","general","io_cqring_offsets"],"kind":"struct"},"28:4813:12090":{"crate_id":28,"path":["linux_raw_sys","general","robust_list_head"],"kind":"struct"},"1:11640:15287":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:8147:7998":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:2869:9953":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:9422:15414":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"25:189:11400":{"crate_id":25,"path":["io_lifetimes","views","SocketlikeView"],"kind":"struct"},"18:481:11348":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:13126:14454":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"16:3026:13805":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"26:6911:12626":{"crate_id":26,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"5:3363:7676":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"6:4449:13341":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"16:6463:10992":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"5:6788:10478":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:50718:8081":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"17:12087:14155":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"12:738:6459":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"17:12485:14208":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:46617:6533":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"28:6108:63053":{"crate_id":28,"path":["linux_raw_sys","general","tcp_ca_state"],"kind":"enum"},"16:5949:10866":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"16:2433:10807":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"28:7378:10067":{"crate_id":28,"path":["linux_raw_sys","general","ucred"],"kind":"struct"},"1:9831:10006":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"1:9442:15502":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:2327:186":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:3230:4237":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"21:43:8019":{"crate_id":21,"path":["termcolor","IoStandardStream"],"kind":"enum"},"2:9098:11933":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"18:652:13790":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"28:4674:63031":{"crate_id":28,"path":["linux_raw_sys","general","fsconfig_command"],"kind":"enum"},"6:7237:13777":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"5:2747:70677":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"26:5298:13332":{"crate_id":26,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"6:6293:12013":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"28:4742:12068":{"crate_id":28,"path":["linux_raw_sys","general","file_dedupe_range_info"],"kind":"struct"},"2:49113:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"1:11496:9928":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"2:54139:15178":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"16:4413:14625":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"28:6649:12691":{"crate_id":28,"path":["linux_raw_sys","general","uffdio_copy"],"kind":"struct"},"12:2053:6481":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"12:1085:10722":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"6:1722:13154":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"9:709:7944":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:12060:14151":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:52504:10221":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:21753:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"17:9183:15408":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:52106:15150":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:3271:8000":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"16:6877:10792":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:50857:10347":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:11927:106":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"23:41:11365":{"crate_id":23,"path":["os_str_bytes","OsStrBytes"],"kind":"trait"},"1:9331:9918":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:51032:192":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"28:4733:12066":{"crate_id":28,"path":["linux_raw_sys","general","fstrim_range"],"kind":"struct"},"12:1840:9169":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:8611:191":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:8749:15474":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"22:121:7126":{"crate_id":22,"path":["clap_lex","ShortFlags"],"kind":"struct"},"17:13393:14542":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"16:2320:10809":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:10921:5493":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:8796:11168":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:48599:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"16:6186:10932":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:7896:9979":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"26:5369:13353":{"crate_id":26,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:5506:187":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"28:5521:63043":{"crate_id":28,"path":["linux_raw_sys","general","socket_state"],"kind":"enum"},"2:50853:10346":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"5:5956:9169":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:10108:11224":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"27:3933:12978":{"crate_id":27,"path":["rustix","backend","time","types","TimerfdFlags"],"kind":"struct"},"2:4317:8213":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:359:9973":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"21:409:8030":{"crate_id":21,"path":["termcolor","ParseColorErrorKind"],"kind":"enum"},"1:10860:4237":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"1:11144:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:2991:7890":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"6:4206:13224":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:2856:7887":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"26:6893:12893":{"crate_id":26,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:4719:773":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:11853:14103":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"27:2990:11434":{"crate_id":27,"path":["rustix","backend","io","poll_fd","PollFd"],"kind":"struct"},"26:8458:13760":{"crate_id":26,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:12896:14394":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"28:5729:12388":{"crate_id":28,"path":["linux_raw_sys","general","sigaction"],"kind":"struct"},"12:2069:7673":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:11384:11961":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:51935:10259":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"16:6330:10989":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"9:592:10599":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"26:7425:13634":{"crate_id":26,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:7150:28864":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"26:7355:13623":{"crate_id":26,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:46998:9353":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"17:12797:14375":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:20069:70185":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"6:1532:12161":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:4505:10056":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"29:72:9427":{"crate_id":29,"path":["strsim","StrSimError"],"kind":"enum"},"17:8162:11230":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"26:6936:13514":{"crate_id":26,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"5:5613:7968":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:1864:9201":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"17:8055:11158":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:10420:11318":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"25:152:11388":{"crate_id":25,"path":["io_lifetimes","raw","FromRawSocketlike"],"kind":"trait"},"26:5945:13461":{"crate_id":26,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:11390:11962":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"16:4786:14636":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:2758:7872":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:4324:9863":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:11938:10358":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"17:10875:11227":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:1105:7673":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:53126:10236":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"28:5085:12177":{"crate_id":28,"path":["linux_raw_sys","general","ip_comp_hdr"],"kind":"struct"},"2:52890:10256":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:50427:8069":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"6:501:12352":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:10857:8001":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"17:10062:15422":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:9539:11179":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:9897:15421":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:11154:7979":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"6:1525:12844":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"12:751:9169":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:29663:10400":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"26:2027:13127":{"crate_id":26,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"16:6123:10930":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"28:4510:12008":{"crate_id":28,"path":["linux_raw_sys","general","__kernel_fd_set"],"kind":"struct"},"2:21471:10390":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:9347:9919":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"16:7469:10941":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"16:3263:14610":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:54214:15183":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"28:5580:15386":{"crate_id":28,"path":["linux_raw_sys","general","rand_pool_info"],"kind":"struct"},"17:12617:14314":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"6:1701:12023":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:1643:13119":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:10426:9201":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"2:11116:8056":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"17:9475:11182":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"6:4745:13453":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:3162:134":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:8393:11216":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:47191:6537":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"26:4945:13255":{"crate_id":26,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:49426:9122":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:1931:11178":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"16:6376:10991":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:9458:11157":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"23:430:11371":{"crate_id":23,"path":["os_str_bytes","EncodingError"],"kind":"struct"},"21:76:8022":{"crate_id":21,"path":["termcolor","StandardStreamLock"],"kind":"struct"},"1:12314:721":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"1:944:9169":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:9947:54644":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"16:5388:10835":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:7433:8130":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:20522:9844":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"12:725:9932":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:774:141":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:46426:7891":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"5:36:9142":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"14:165:52756":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"28:5610:12348":{"crate_id":28,"path":["linux_raw_sys","general","__kernel_old_timespec"],"kind":"struct"},"2:52236:10248":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"16:4144:14618":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:48751:2672":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"26:1929:13089":{"crate_id":26,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:353:9972":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:12874:14390":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"5:2948:6479":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:1811:597":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:1552:7968":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"16:4545:14628":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:12304:307":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:11187:10113":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"16:2341:11115":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:22050:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"7:79:52032":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"26:5914:13451":{"crate_id":26,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"6:4115:13166":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"26:5875:13433":{"crate_id":26,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:4300:13268":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"6:1707:10060":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:7156:156":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"26:5993:13488":{"crate_id":26,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"26:5194:13309":{"crate_id":26,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:20341:10290":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"1:6709:9417":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:8881:72036":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:9288:9844":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:3232:8003":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:47374:8139":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"27:549:11411":{"crate_id":27,"path":["rustix","backend","io","epoll","EventVec"],"kind":"struct"},"5:5541:10483":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"6:4665:12061":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:50278:8073":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"16:7543:10934":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:8488:9893":{"crate_id":1,"path":["std","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:12073:14152":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:9681:13841":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"28:5307:12256":{"crate_id":28,"path":["linux_raw_sys","general","ipv6_destopt_hao"],"kind":"struct"},"26:4731:13216":{"crate_id":26,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"5:2994:10475":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:954:9167":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"17:9488:11181":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:38204:180":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"12:1065:10721":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"6:6322:13669":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"16:6359:10990":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:9791:13893":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"0:1581:127":{"crate_id":0,"path":["clap","error","Error"],"kind":"struct"},"16:6059:11096":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"27:4686:72311":{"crate_id":27,"path":["rustix","process","prctl","EndianMode"],"kind":"enum"},"25:137:11386":{"crate_id":25,"path":["io_lifetimes","raw","IntoRawFilelike"],"kind":"trait"},"28:4528:12011":{"crate_id":28,"path":["linux_raw_sys","general","f_owner_ex"],"kind":"struct"},"26:5938:13458":{"crate_id":26,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:3594:9895":{"crate_id":1,"path":["std","net","display_buffer","DisplayBuffer"],"kind":"struct"},"17:11606:14069":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"6:1550:13057":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:4191:204":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:54267:15186":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"27:2854:11433":{"crate_id":27,"path":["rustix","backend","io","poll_fd","PollFlags"],"kind":"struct"},"1:545:9992":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:11732:70349":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:12926:14404":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:2401:10018":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:46925:9359":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:47364:8152":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:48219:8518":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:11995:139":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:9328:11298":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"5:1954:10477":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"5:1359:7676":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:21372:28658":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"5:6978:9332":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:12311:630":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"17:967:15400":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:11893:14107":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"14:215:14877":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:51903:10226":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:46937:8069":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:50374:8071":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:53096:10233":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"14:221:14879":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"28:4567:12023":{"crate_id":28,"path":["linux_raw_sys","general","epoll_event"],"kind":"struct"},"18:548:140":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"5:1227:7673":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:21:665":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"16:4385:14624":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:2232:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:3908:7968":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:13059:14435":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:48713:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:11763:9905":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:4117:10054":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"6:5861:13649":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:52088:10231":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:10:983":{"crate_id":1,"path":["std","panic"],"kind":"macro"},"26:5154:13298":{"crate_id":26,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"11:0:7719":{"crate_id":11,"path":["adler"],"kind":"module"},"6:4329:13284":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"5:3350:6479":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"28:4660:12044":{"crate_id":28,"path":["linux_raw_sys","general","fscrypt_get_key_status_arg"],"kind":"struct"},"17:10949:13964":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:13354:14531":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"28:4822:12093":{"crate_id":28,"path":["linux_raw_sys","general","__kernel_sockaddr_storage"],"kind":"struct"},"12:646:7676":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"6:1686:13145":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:4530:9337":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"28:7298:12882":{"crate_id":28,"path":["linux_raw_sys","general","statfs64"],"kind":"struct"},"2:7841:8050":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"28:5300:12254":{"crate_id":28,"path":["linux_raw_sys","general","rt2_hdr"],"kind":"struct"},"2:8324:10322":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:7038:133":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:29827:10402":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"16:7117:10798":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:12884:14391":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"6:4540:13373":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"28:5666:12355":{"crate_id":28,"path":["linux_raw_sys","general","timezone"],"kind":"struct"},"1:4316:9855":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:9450:10793":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"26:9252:13780":{"crate_id":26,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"28:6043:12510":{"crate_id":28,"path":["linux_raw_sys","general","tcp_repair_window"],"kind":"struct"},"2:2326:179":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"proc_derive"},"1:6233:203":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"16:7309:11004":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"16:4327:14622":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"16:7825:11008":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"17:11106:13973":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:49465:15142":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:7735:6524":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"12:632:6479":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:29721:10401":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"5:2919:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"5:630:15462":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:9253:9498":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:11711:19098":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:8160:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:9155:15407":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:1892:4181":{"crate_id":1,"path":["std","env","args_os"],"kind":"function"},"6:4224:13236":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"6:5727:13608":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:46567:5448":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"6:4461:13342":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:8526:11263":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:12320:1447":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"1:7982:10520":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"1:9269:9912":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"26:5893:13444":{"crate_id":26,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:49447:7944":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"28:4558:12020":{"crate_id":28,"path":["linux_raw_sys","general","open_how"],"kind":"struct"},"2:47323:8149":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:12768:14367":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:54165:15180":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"16:4635:14631":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"28:7148:15389":{"crate_id":28,"path":["linux_raw_sys","general","io_uring_probe"],"kind":"struct"},"17:11734:13900":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"6:5625:13555":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"26:5077:13284":{"crate_id":26,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"5:5350:229":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:9108:15406":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"9:33:10649":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"2:50880:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"16:7956:10944":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:12176:14170":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:49965:8134":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:965:9934":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:54176:15181":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:48523:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:50384:8060":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:8904:7946":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"16:4689:14633":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"6:7220:13772":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:9274:15411":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:47649:8126":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:53846:10234":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:21720:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"5:4627:7968":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:21280:15023":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"16:7659:10929":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:11533:9922":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"2:49978:8176":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:11054:13970":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:46481:196":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:12313:720":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"26:4884:13244":{"crate_id":26,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"0:1509:1662":{"crate_id":0,"path":["clap","error"],"kind":"module"},"5:6815:6930":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:10721:13960":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"17:12046:14150":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:12323:1501":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"28:0:8224":{"crate_id":28,"path":["linux_raw_sys"],"kind":"module"},"1:4254:9857":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:50841:10353":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"6:4575:13390":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"6:586:12354":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"28:5626:12350":{"crate_id":28,"path":["linux_raw_sys","general","__kernel_sock_timeval"],"kind":"struct"},"2:8833:144":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:51987:10251":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:21951:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"16:7372:11139":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"27:3909:72325":{"crate_id":27,"path":["rustix","backend","time","types","DynamicClockId"],"kind":"enum"},"6:7226:13773":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"21:0:1690":{"crate_id":21,"path":["termcolor"],"kind":"module"},"5:2050:10513":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"6:1518:12136":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"6:1695:12897":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:50402:8057":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:681:15485":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:50684:10122":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:13007:14419":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"6:4185:13216":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"26:8402:13750":{"crate_id":26,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"17:13203:14473":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"16:5447:10838":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"6:5523:12888":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:7736:6523":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"28:6035:12507":{"crate_id":28,"path":["linux_raw_sys","general","tcp_repair_opt"],"kind":"struct"},"12:1832:6479":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"12:320:10726":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"5:3805:7676":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:8871:15402":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:1903:54539":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"28:5964:12490":{"crate_id":28,"path":["linux_raw_sys","general","tcphdr"],"kind":"struct"},"2:49908:8188":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"5:6780:195":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"27:534:6479":{"crate_id":27,"path":["rustix","backend","io","epoll","Iter"],"kind":"struct"},"5:4748:9405":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:10360:11317":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"2:11836:70347":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"17:11974:14142":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:47169:8135":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"6:4354:13296":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"26:712:12397":{"crate_id":26,"path":["libc","unix","sigval"],"kind":"struct"},"2:52288:10255":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:11617:14070":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"16:7872:10948":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"28:6785:63058":{"crate_id":28,"path":["linux_raw_sys","general","_bindgen_ty_8"],"kind":"enum"},"2:2497:233":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"28:4988:15374":{"crate_id":28,"path":["linux_raw_sys","general","ip_msfilter__bindgen_ty_1__bindgen_ty_2"],"kind":"struct"},"16:7435:10972":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:13141:14458":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:53658:10230":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:3184:10205":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"6:5672:13582":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"5:7061:9168":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:12860:14389":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:6921:15492":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"17:12980:14416":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"26:4805:13227":{"crate_id":26,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:0:7724":{"crate_id":17,"path":["object"],"kind":"module"},"6:4621:13412":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"18:491:13789":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"16:6903:10793":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:47270:8147":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"16:3716:14616":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:7001:8132":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:4585:10065":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:10940:8059":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:22083:10377":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"17:8941:15403":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:8590:9843":{"crate_id":1,"path":["std","net","socket_addr","SocketAddr"],"kind":"enum"},"17:9738:11250":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:10250:8190":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:11373:5474":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:50738:8082":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"28:6737:12726":{"crate_id":28,"path":["linux_raw_sys","general","io_uring_sqe__bindgen_ty_4"],"kind":"union"},"26:5496:12241":{"crate_id":26,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"27:4213:12984":{"crate_id":27,"path":["rustix","process","membarrier","MembarrierQuery"],"kind":"struct"},"26:7925:12869":{"crate_id":26,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"0:1578:207":{"crate_id":0,"path":["clap","error","Result"],"kind":"typedef"},"26:2151:13154":{"crate_id":26,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"6:6415:13678":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:1562:13066":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:5574:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"26:806:46923":{"crate_id":26,"path":["libc","unix","FILE"],"kind":"enum"},"27:3846:52157":{"crate_id":27,"path":["rustix","backend","termios","types","Action"],"kind":"enum"},"6:4644:13418":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:9430:5214":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"26:5054:13278":{"crate_id":26,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:4908:12865":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"1:8363:8005":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"26:658:12324":{"crate_id":26,"path":["libc","unix","pollfd"],"kind":"struct"},"17:10332:11324":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"2:49250:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"17:11761:14091":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"16:5163:10873":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:39418:9804":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"17:12739:14360":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:8822:72037":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"26:5594:13390":{"crate_id":26,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"26:1948:13094":{"crate_id":26,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:11639:14077":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:2029:181":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"26:4627:13174":{"crate_id":26,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:50068:8066":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"16:7567:10960":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:29649:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"17:11199:13985":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:2248:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"1:1826:9190":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"26:4962:13257":{"crate_id":26,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:52555:15152":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"5:6937:7834":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"26:5903:13445":{"crate_id":26,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"28:7167:12830":{"crate_id":28,"path":["linux_raw_sys","general","io_uring_restriction__bindgen_ty_1"],"kind":"union"},"26:8351:13735":{"crate_id":26,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:11356:14020":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"5:2477:10516":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:9371:15406":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"16:6496:10993":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:8554:10085":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"28:4762:12072":{"crate_id":28,"path":["linux_raw_sys","general","files_stat_struct"],"kind":"struct"},"26:7021:13532":{"crate_id":26,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"16:2411:11116":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"5:1944:9992":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"6:7249:13779":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"27:4725:72317":{"crate_id":27,"path":["rustix","process","prctl","MachineCheckMemoryCorruptionKillPolicy"],"kind":"enum"},"1:8864:7944":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"1:12316:718":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:9061:11194":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"28:5560:12325":{"crate_id":28,"path":["linux_raw_sys","general","prctl_mm_map"],"kind":"struct"},"21:358:5535":{"crate_id":21,"path":["termcolor","Color"],"kind":"enum"},"2:48134:178":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"25:42:11395":{"crate_id":25,"path":["io_lifetimes","portability","IntoSocketlike"],"kind":"trait"},"17:8981:15404":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:11784:15475":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:2426:3983":{"crate_id":1,"path":["std","io"],"kind":"module"},"26:1845:13066":{"crate_id":26,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"6:4475:13353":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:8510:13877":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"16:6816:11132":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"26:604:12229":{"crate_id":26,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:5695:9493":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"5:3542:9167":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"12:1628:11912":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"16:7483:10942":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:719:17164":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"2:5380:3992":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"26:522:12352":{"crate_id":26,"path":["libc","unix","timeval"],"kind":"struct"},"16:2300:11122":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:9844:11308":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:9302:9916":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:6604:163":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"28:5049:12166":{"crate_id":28,"path":["linux_raw_sys","general","iphdr"],"kind":"struct"},"2:48873:7917":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"16:2868:10871":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"6:4317:13278":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:8577:10086":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"17:11813:14098":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"26:5650:13404":{"crate_id":26,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:11594:14067":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:9571:8189":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:1962:11245":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:3347:8006":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:52036:10239":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"16:2487:11098":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"16:2389:10806":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:11315:14009":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:46379:7898":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"28:6669:12694":{"crate_id":28,"path":["linux_raw_sys","general","uffdio_writeprotect"],"kind":"struct"},"28:5913:12466":{"crate_id":28,"path":["linux_raw_sys","general","statx"],"kind":"struct"},"5:7044:9167":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"17:8418:11229":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:13176:14466":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:21320:10170":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"16:4262:14620":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"28:5788:12417":{"crate_id":28,"path":["linux_raw_sys","general","__sifields__bindgen_ty_4"],"kind":"struct"},"6:5772:13621":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:53908:10254":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"16:6298:10958":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:54306:15187":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:2917:7888":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"16:3632:14614":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"4:0:7715":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:4346:8215":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:20378:9968":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:12050:8175":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:48346:180":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:47200:8136":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:7870:9977":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:11300:14003":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:21819:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:686:17163":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"16:6719:11128":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:58387:15194":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"1:960:9933":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"16:2825:11106":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"6:5504:13512":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:9637:1664":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"5:3339:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:2673:222":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"6:1505:12130":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"6:6424:13682":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:51857:10246":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:9263:15410":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"5:2030:70761":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:48887:7926":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"28:6357:12633":{"crate_id":28,"path":["linux_raw_sys","general","termios2"],"kind":"struct"},"18:599:72045":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:8545:207":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"26:1913:13087":{"crate_id":26,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"6:4152:13194":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"9:800:14984":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"16:2657:11111":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"5:4904:11914":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"6:6998:13769":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:52972:10241":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:51067:10356":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:9118:72041":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"5:6302:9174":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"28:4645:15370":{"crate_id":28,"path":["linux_raw_sys","general","fscrypt_provisioning_key_payload"],"kind":"struct"},"5:1426:9935":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"16:3457:13809":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"28:6980:12790":{"crate_id":28,"path":["linux_raw_sys","general","io_uring_params"],"kind":"struct"},"28:4782:12080":{"crate_id":28,"path":["linux_raw_sys","general","fsxattr"],"kind":"struct"},"2:2445:8092":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:4086:8221":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:0:1344":{"crate_id":1,"path":["std"],"kind":"module"},"17:11330:14015":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"28:6705:12706":{"crate_id":28,"path":["linux_raw_sys","general","io_uring_sqe__bindgen_ty_1"],"kind":"union"},"28:7138:12828":{"crate_id":28,"path":["linux_raw_sys","general","io_uring_probe_op"],"kind":"struct"},"26:7953:12013":{"crate_id":26,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:9831:11307":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:12022:14147":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"16:2631:11112":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"26:573:12358":{"crate_id":26,"path":["libc","unix","rusage"],"kind":"struct"},"6:4139:13184":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:1608:6930":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:6043:9408":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:487:15399":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:48880:7918":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:8962:7949":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"1:2253:10009":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"28:6431:12648":{"crate_id":28,"path":["linux_raw_sys","general","oldold_utsname"],"kind":"struct"},"5:1446:10509":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:11997:14143":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:8329:10323":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:8222:6240":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"15:0:7722":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:8422:7984":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:47624:8122":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:11841:14102":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"18:590:13791":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"16:6472:10739":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"5:2955:9846":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:13327:14519":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"12:2184:14929":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:10845:11284":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"6:4605:13406":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:996:9939":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"26:4581:13157":{"crate_id":26,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:56677:10363":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:2652:7997":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"5:271:11914":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"17:8212:11282":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:9165:72038":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:10625:11169":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"6:135:46924":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"21:292:8031":{"crate_id":21,"path":["termcolor","LossyStandardStream"],"kind":"struct"},"2:2669:2013":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"28:5781:12416":{"crate_id":28,"path":["linux_raw_sys","general","__sifields__bindgen_ty_3"],"kind":"struct"},"2:11136:8051":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:1476:143":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:4657:10066":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:50633:10120":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:9751:11248":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:1114:7675":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:12948:14409":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"28:4966:12136":{"crate_id":28,"path":["linux_raw_sys","general","ip_mreq_source"],"kind":"struct"},"17:9805:11304":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:3157:230":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"16:7329:11006":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:49176:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1:931:6459":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"6:1714:13151":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"6:6479:13719":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"28:7106:12824":{"crate_id":28,"path":["linux_raw_sys","general","io_uring_rsrc_register"],"kind":"struct"},"6:539:12229":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:52143:15151":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"16:2842:10870":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:678:15483":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:1919:9138":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:6819:5309":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"5:1415:9934":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:8694:10090":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:3980:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"28:5860:12446":{"crate_id":28,"path":["linux_raw_sys","general","siginfo"],"kind":"struct"},"2:47615:8120":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"27:4746:72318":{"crate_id":27,"path":["rustix","process","prctl","VirtualMemoryMapAddress"],"kind":"enum"},"2:50000:8195":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:11826:10047":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"26:8890:13767":{"crate_id":26,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:9071:72034":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:12211:14182":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:8741:12849":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"25:142:11381":{"crate_id":25,"path":["io_lifetimes","raw","IntoRawSocketlike"],"kind":"trait"},"12:353:10725":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:49137:130":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"17:13214:14474":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:5680:9492":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"11:44:10710":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"2:20781:10211":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"9:649:10601":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"26:556:12375":{"crate_id":26,"path":["libc","unix","rlimit"],"kind":"struct"},"28:6660:12692":{"crate_id":28,"path":["linux_raw_sys","general","uffdio_zeropage"],"kind":"struct"},"2:46915:9358":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"16:4297:14621":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"27:3822:61692":{"crate_id":27,"path":["rustix","backend","termios","types","QueueSelector"],"kind":"enum"},"28:6677:12695":{"crate_id":28,"path":["linux_raw_sys","general","uffdio_continue"],"kind":"struct"},"26:5412:13354":{"crate_id":26,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:9671:11217":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:7748:15514":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:8165:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"6:6500:13732":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"28:6711:12708":{"crate_id":28,"path":["linux_raw_sys","general","io_uring_sqe__bindgen_ty_2"],"kind":"union"},"5:2743:70678":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"26:5857:12247":{"crate_id":26,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:47332:8150":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"5:6727:6930":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"6:4361:13298":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:1626:9846":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"28:7219:12846":{"crate_id":28,"path":["linux_raw_sys","general","linger"],"kind":"struct"},"2:49435:144":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"5:1312:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:11137:13977":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:4969:9881":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"26:5321:13341":{"crate_id":26,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"5:0:282":{"crate_id":5,"path":["alloc"],"kind":"module"},"28:6473:12654":{"crate_id":28,"path":["linux_raw_sys","general","new_utsname"],"kind":"struct"},"27:3611:72322":{"crate_id":27,"path":["rustix","backend","process","types","Resource"],"kind":"enum"},"12:1029:7675":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:4744:9883":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"5:853:10502":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:2672:223":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"27:3572:72323":{"crate_id":27,"path":["rustix","backend","process","types","MembarrierCommand"],"kind":"enum"},"28:4628:12037":{"crate_id":28,"path":["linux_raw_sys","general","fscrypt_key_specifier"],"kind":"struct"},"2:2768:7868":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:52860:10253":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"16:7426:10956":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"6:6392:13671":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"26:7002:13527":{"crate_id":26,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"26:5817:12061":{"crate_id":26,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:3422:7978":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:12638:14321":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:51088:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"9:827:10555":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:52336:10240":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:1615:9167":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"0:1660:1654":{"crate_id":0,"path":["clap","parser"],"kind":"module"},"18:507:13790":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:3968:10272":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:6610:8116":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"6:4551:13378":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:13594:14591":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:2903:207":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"1:11847:10054":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:9751:8198":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:50861:10412":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:46968:9351":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"17:11125:13974":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"16:6200:10985":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:5169:9840":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"6:507:12351":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"16:3689:14615":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:50825:10345":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"2:49410:9123":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"6:4200:13223":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:11873:14106":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:6409:11952":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"1:11268:9947":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"2:11121:8050":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"6:6554:13757":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"26:9234:13777":{"crate_id":26,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:8819:140":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"1:9261:6479":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"21:81:8024":{"crate_id":21,"path":["termcolor","WriterInner"],"kind":"enum"},"18:531:11351":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"28:6632:12689":{"crate_id":28,"path":["linux_raw_sys","general","uffdio_range"],"kind":"struct"},"28:4547:12019":{"crate_id":28,"path":["linux_raw_sys","general","flock64"],"kind":"struct"},"1:11477:10412":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"2:11698:135":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:46885:10182":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"26:783:13051":{"crate_id":26,"path":["libc","unix","protoent"],"kind":"struct"},"27:4162:12981":{"crate_id":27,"path":["rustix","process","id","Gid"],"kind":"struct"},"2:48270:190":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:4195:8205":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:4433:10092":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"26:7074:13555":{"crate_id":26,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:8241:11286":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:29621:9166":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"16:5815:10861":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"6:6509:13735":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"16:7557:10935":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:25292:10160":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"26:1822:13057":{"crate_id":26,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"6:487:3282":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:13039:14428":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"28:5835:12436":{"crate_id":28,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3"],"kind":"struct"},"0:1395:2151":{"crate_id":0,"path":["clap","value_parser"],"kind":"macro"},"28:5020:12157":{"crate_id":28,"path":["linux_raw_sys","general","in_pktinfo"],"kind":"struct"},"16:5433:10837":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"5:2960:10474":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:9440:6479":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"25:19:8225":{"crate_id":25,"path":["io_lifetimes","portability","AsFilelike"],"kind":"trait"},"5:5525:9405":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:13148:14459":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"23:63:72102":{"crate_id":23,"path":["os_str_bytes","OsStringBytes","assert_from_raw_vec"],"kind":"foreign_type"},"12:985:6481":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"26:5094:13287":{"crate_id":26,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:50512:10111":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:11514:15284":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:1931:1662":{"crate_id":1,"path":["std","error"],"kind":"module"},"2:7051:7682":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:10866:10338":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"28:5946:13635":{"crate_id":28,"path":["linux_raw_sys","general","sysinfo"],"kind":"struct"},"2:46858:8068":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:21885:9999":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:2713:8920":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"1:3470:68919":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"6:5660:13577":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"26:9276:12020":{"crate_id":26,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:9293:11301":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"21:339:5531":{"crate_id":21,"path":["termcolor","ColorSpec"],"kind":"struct"},"17:12748:14361":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"16:5981:10868":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:6393:10358":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:2564:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"26:8896:12379":{"crate_id":26,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"16:7929:11010":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"22:75:5189":{"crate_id":22,"path":["clap_lex","ArgCursor"],"kind":"struct"},"6:7255:13780":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:57112:242":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:10684:5546":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:4272:8212":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"1:8956:6479":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:4262:8211":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:8609:7927":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"26:5555:13382":{"crate_id":26,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:9225:9496":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:8873:9121":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:13580:14588":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:49198:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"18:96:29135":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:52480:10220":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"27:4145:12980":{"crate_id":27,"path":["rustix","process","id","Uid"],"kind":"struct"},"6:6953:13766":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"16:5184:52829":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:10670:10468":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:48202:7676":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"1:11682:15290":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"28:4713:12056":{"crate_id":28,"path":["linux_raw_sys","general","mount_attr"],"kind":"struct"},"2:8596:111":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:54130:15177":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:1889:9208":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"17:10796:11281":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:1672:1055":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"27:3476:11442":{"crate_id":27,"path":["rustix","backend","io","types","EventfdFlags"],"kind":"struct"},"1:8719:10068":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"6:6975:13767":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"16:7637:10946":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"26:1709:12130":{"crate_id":26,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:2788:7877":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:46945:9350":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"1:1828:9191":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"26:809:46924":{"crate_id":26,"path":["libc","unix","fpos_t"],"kind":"enum"},"7:32:52025":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"26:2052:13138":{"crate_id":26,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:8475:11171":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:4059:8220":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:47178:7983":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:46962:8068":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:10528:11280":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:46991:9352":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"1:12318:1445":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"18:564:11353":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"26:4558:48204":{"crate_id":26,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"28:5825:12433":{"crate_id":28,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2"],"kind":"struct"},"17:10207:15424":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"6:1668:13138":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"26:8377:13741":{"crate_id":26,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"16:4817:14637":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:9021:15405":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"26:7345:13621":{"crate_id":26,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"5:686:110":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:8370:8007":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"28:7278:12869":{"crate_id":28,"path":["linux_raw_sys","general","statfs"],"kind":"struct"},"6:4506:13361":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"18:80:29134":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"28:6202:63054":{"crate_id":28,"path":["linux_raw_sys","general","_bindgen_ty_6"],"kind":"enum"},"28:4942:12128":{"crate_id":28,"path":["linux_raw_sys","general","in_addr"],"kind":"struct"},"26:1869:13074":{"crate_id":26,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:2739:8922":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:52266:10252":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"12:1138:9941":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:20253:10289":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"2:2662:217":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"12:762:9167":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"26:9263:13784":{"crate_id":26,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"27:3193:11439":{"crate_id":27,"path":["rustix","backend","io","types","SpliceFlags"],"kind":"struct"},"2:52066:10227":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:12322:767":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"24:0:1688":{"crate_id":24,"path":["is_terminal"],"kind":"module"},"5:6750:10504":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:12315:722":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"12:1836:6930":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:5709:1650":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"23:303:11379":{"crate_id":23,"path":["os_str_bytes","raw_str","DebugBuffer"],"kind":"struct"},"16:5664:10852":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"6:6269:12388":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"16:2683:11101":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:58408:15195":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"2:52602:15153":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"6:1541:12223":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"27:5194:13023":{"crate_id":27,"path":["rustix","process","sched","CpuSet"],"kind":"struct"},"1:5894:9914":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"9:505:10548":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:11089:15272":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"2:51881:10238":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:12303:1017":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"26:5277:13331":{"crate_id":26,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"6:4673:13428":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:524:11943":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:9631:11177":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:11112:15279":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:2681:5802":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"27:4791:13011":{"crate_id":27,"path":["rustix","process","prctl","PrctlMmMap"],"kind":"struct"},"2:1751:15016":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:9765:8197":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"25:37:11389":{"crate_id":25,"path":["io_lifetimes","portability","IntoFilelike"],"kind":"trait"},"6:5480:13496":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"16:2771:11105":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"5:6862:7954":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"9:19:10648":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"2:53970:10219":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"28:5275:12247":{"crate_id":28,"path":["linux_raw_sys","general","in6_ifreq"],"kind":"struct"},"17:9873:15419":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"6:4280:13257":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:13024:14426":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:46640:8212":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"1:8973:7950":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"26:2005:13119":{"crate_id":26,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:9555:9928":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"5:1212:7675":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"16:5793:10860":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:10581:9501":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:22017:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"2:54150:15179":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:49890:8185":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:49665:10470":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:12148:14164":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"26:7042:13539":{"crate_id":26,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:49650:15143":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"2:7079:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:8448:152":{"crate_id":1,"path":["std","net","ip_addr","IpAddr"],"kind":"enum"},"2:2833:7882":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:8110:54449":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"27:4969:13019":{"crate_id":27,"path":["rustix","process","prctl","SpeculationFeatureState"],"kind":"struct"},"1:4403:10089":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"27:5306:13026":{"crate_id":27,"path":["rustix","process","wait","WaitStatus"],"kind":"struct"},"2:3174:7896":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:3086:8008":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"18:0:7725":{"crate_id":18,"path":["memchr"],"kind":"module"},"17:1771:11184":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"16:534:10858":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:8330:8009":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"28:4588:12028":{"crate_id":28,"path":["linux_raw_sys","general","fscrypt_key"],"kind":"struct"},"1:1002:9940":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"26:745:13041":{"crate_id":26,"path":["libc","unix","tms"],"kind":"struct"},"1:11307:9498":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"17:10321:11316":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"16:5374:10931":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"6:5472:12465":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"26:6763:12465":{"crate_id":26,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"26:6813:13509":{"crate_id":26,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"25:127:11384":{"crate_id":25,"path":["io_lifetimes","raw","AsRawFilelike"],"kind":"trait"},"2:50409:8067":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"5:4994:1352":{"crate_id":5,"path":["alloc","str"],"kind":"module"},"1:598:9962":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"28:6560:12667":{"crate_id":28,"path":["linux_raw_sys","general","uffd_msg"],"kind":"struct"},"28:6749:63057":{"crate_id":28,"path":["linux_raw_sys","general","_bindgen_ty_7"],"kind":"enum"},"2:50695:10123":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"26:1687:12355":{"crate_id":26,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:50178:8079":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"28:7126:12827":{"crate_id":28,"path":["linux_raw_sys","general","io_uring_rsrc_update2"],"kind":"struct"},"2:3382:8109":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"28:6138:12529":{"crate_id":28,"path":["linux_raw_sys","general","tcp_info"],"kind":"struct"},"1:9515:164":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"16:2579:11151":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"28:6081:63052":{"crate_id":28,"path":["linux_raw_sys","general","tcp_fastopen_client_fail"],"kind":"enum"},"2:46864:15116":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"26:9104:12633":{"crate_id":26,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:52005:15149":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:8752:7985":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"6:5605:13539":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:10854:11244":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:51117:9141":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"26:5922:13453":{"crate_id":26,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"15:175:10741":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:12361:14206":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"25:132:11385":{"crate_id":25,"path":["io_lifetimes","raw","AsRawSocketlike"],"kind":"trait"},"12:659:6930":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"18:699:11341":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:12310:629":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"17:13436:14558":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"13:0:7714":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:8607:7926":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:50160:8080":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:54229:15184":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"27:4707:72320":{"crate_id":27,"path":["rustix","process","prctl","TimeStampCounterReadability"],"kind":"enum"},"2:7005:8131":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"21:13:5530":{"crate_id":21,"path":["termcolor","WriteColor"],"kind":"trait"},"16:6070:10874":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"26:0:794":{"crate_id":26,"path":["libc"],"kind":"module"},"2:49899:8184":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"28:5843:12439":{"crate_id":28,"path":["linux_raw_sys","general","__sifields__bindgen_ty_6"],"kind":"struct"},"2:50260:8072":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"16:3402:14611":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"28:7356:12888":{"crate_id":28,"path":["linux_raw_sys","general","msghdr"],"kind":"struct"},"1:6681:9410":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"22:0:1687":{"crate_id":22,"path":["clap_lex"],"kind":"module"},"2:6516:8141":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"16:7288:11002":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"5:782:10501":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:3157:10037":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:48675:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:9526:215":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:50364:7988":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"6:4496:13354":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:11445:9496":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"6:4629:13415":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:887:6479":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"5:4042:11917":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"26:6871:12888":{"crate_id":26,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"27:2530:15393":{"crate_id":27,"path":["rustix","process","uname","Uname"],"kind":"struct"},"6:4726:13445":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:1091:6481":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"27:3873:72319":{"crate_id":27,"path":["rustix","backend","time","types","ClockId"],"kind":"enum"},"2:48447:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"16:7357:10953":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"27:356:16333":{"crate_id":27,"path":["rustix","backend","reg","ArgReg"],"kind":"struct"},"21:311:1657":{"crate_id":21,"path":["termcolor","ColorChoice"],"kind":"enum"},"2:2235:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:50080:8063":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"21:62:8020":{"crate_id":21,"path":["termcolor","IoStandardStreamLock"],"kind":"enum"},"16:7166:10800":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"6:5692:13594":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"6:519:12358":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:8796:8581":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"16:6146:10976":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:12695:14356":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:3236:7559":{"crate_id":1,"path":["std","io","stdio","stdout"],"kind":"function"},"28:5814:12429":{"crate_id":28,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"22:91:7084":{"crate_id":22,"path":["clap_lex","ParsedArg"],"kind":"struct"},"1:4766:9889":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"0:22:1834":{"crate_id":0,"path":["clap","command"],"kind":"macro"},"2:7429:8103":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"25:69:61233":{"crate_id":25,"path":["io_lifetimes","traits","FromFd"],"kind":"trait"},"28:7369:12893":{"crate_id":28,"path":["linux_raw_sys","general","cmsghdr"],"kind":"struct"},"1:2257:7977":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"16:7211:10801":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:10296:15434":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:1021:11302":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:9433:15415":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"16:5703:10853":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:8814:7934":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"28:7204:12839":{"crate_id":28,"path":["linux_raw_sys","general","io_uring_getevents_arg"],"kind":"struct"},"2:47601:8119":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"16:6284:10943":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"28:5002:12147":{"crate_id":28,"path":["linux_raw_sys","general","group_source_req"],"kind":"struct"},"5:6150:11914":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"28:6640:12690":{"crate_id":28,"path":["linux_raw_sys","general","uffdio_register"],"kind":"struct"},"2:47118:7853":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:11939:14131":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:50606:10119":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"14:187:52762":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"6:560:12324":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"26:5117:13291":{"crate_id":26,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"26:1762:12844":{"crate_id":26,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"26:8070:13670":{"crate_id":26,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:5887:9913":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"26:7502:13660":{"crate_id":26,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:48194:6479":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"6:1738:12454":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:10668:66555":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"12:669:9934":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"26:2130:12023":{"crate_id":26,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:10270:15432":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"27:4339:72316":{"crate_id":27,"path":["rustix","process","prctl","DumpableBehavior"],"kind":"enum"},"17:10139:11194":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"16:5235:14642":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:10350:11160":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"17:10506:13943":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:1887:1664":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"28:5658:12354":{"crate_id":28,"path":["linux_raw_sys","general","itimerval"],"kind":"struct"},"12:2190:72031":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:12301:1464":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"6:5720:13607":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"5:6075:6930":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"6:4527:13372":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"26:8329:13732":{"crate_id":26,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"5:2255:10517":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:2987:3984":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"17:11149:13978":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:9601:11183":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:5009:9871":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:12730:14357":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"5:1396:6459":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:7860:66719":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"2:9066:11931":{"crate_id":2,"path":["core","slice","sort","insert_head","InsertionHole"],"kind":"struct"},"2:2935:7680":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"28:6399:12642":{"crate_id":28,"path":["linux_raw_sys","general","termio"],"kind":"struct"},"2:49918:8186":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:8596:13878":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"5:6907:7836":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"16:6017:10981":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:2411:10023":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:10889:10339":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:12142:11965":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:9627:11190":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:4017:10047":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:4003:9137":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:6563:10157":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:11087:13972":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"28:6569:12672":{"crate_id":28,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1"],"kind":"union"},"2:47024:9355":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"16:4519:14627":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"28:6497:63055":{"crate_id":28,"path":["linux_raw_sys","general","membarrier_cmd"],"kind":"enum"},"2:9609:8199":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:3370:8105":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"26:8134:13671":{"crate_id":26,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:7192:11954":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:10159:13929":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:12909:14399":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:8217:9951":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"28:4957:12133":{"crate_id":28,"path":["linux_raw_sys","general","ip_mreqn"],"kind":"struct"},"18:644:13790":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"5:3015:9848":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"28:7338:12884":{"crate_id":28,"path":["linux_raw_sys","general","user_desc"],"kind":"struct"},"1:6852:9419":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"6:6311:13667":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:21459:10391":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"16:6171:10977":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"28:7318:12883":{"crate_id":28,"path":["linux_raw_sys","general","compat_statfs64"],"kind":"struct"},"27:4542:12990":{"crate_id":27,"path":["rustix","process","prctl","FloatingPointExceptionMode"],"kind":"struct"},"26:5015:13268":{"crate_id":26,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"12:274:14925":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:1737:10435":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:4906:12863":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"1:6838:9418":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"26:9246:13779":{"crate_id":26,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"26:5706:13412":{"crate_id":26,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"16:7847:11009":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:12266:15787":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:8991:72039":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"28:6923:12779":{"crate_id":28,"path":["linux_raw_sys","general","io_uring_cqe"],"kind":"struct"},"17:12291:14190":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"5:3734:9169":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:8774:11159":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:8379:7979":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"26:480:46862":{"crate_id":26,"path":["libc","unix","DIR"],"kind":"enum"},"2:20786:18002":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"28:6743:12729":{"crate_id":28,"path":["linux_raw_sys","general","io_uring_sqe__bindgen_ty_5"],"kind":"union"},"6:1636:12157":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:11515:14055":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"17:10670:11287":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:49939:8177":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:51075:10357":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"16:5203:13876":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:12850:14388":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:46633:15480":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"16:4849:14638":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:2916:11221":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:2812:7878":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"12:853:9939":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"6:5749:13615":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"28:7097:12822":{"crate_id":28,"path":["linux_raw_sys","general","io_uring_files_update"],"kind":"struct"},"6:5841:13635":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:8066:9970":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"5:1982:10514":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:7539:66843":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"23:266:11375":{"crate_id":23,"path":["os_str_bytes","raw_str","RawOsStrCow"],"kind":"trait"},"28:5079:15384":{"crate_id":28,"path":["linux_raw_sys","general","ip_esp_hdr"],"kind":"struct"},"28:6452:12653":{"crate_id":28,"path":["linux_raw_sys","general","old_utsname"],"kind":"struct"},"6:5582:13526":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"26:5033:13271":{"crate_id":26,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"6:7279:12020":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"28:6717:12710":{"crate_id":28,"path":["linux_raw_sys","general","io_uring_sqe__bindgen_ty_3"],"kind":"union"},"3:223:207":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"0:0:1685":{"crate_id":0,"path":["clap"],"kind":"module"},"1:7849:9986":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"28:4796:12087":{"crate_id":28,"path":["linux_raw_sys","general","futex_waitv"],"kind":"struct"},"1:4246:9856":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"18:660:11337":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"6:4611:13409":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:2904:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:5646:7683":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"26:1726:12133":{"crate_id":26,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:628:9837":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"5:4952:8055":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:3199:7899":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"25:183:11398":{"crate_id":25,"path":["io_lifetimes","views","FilelikeView"],"kind":"struct"},"17:13192:14469":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"26:5171:13300":{"crate_id":26,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:50829:10348":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:11457:9497":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:2851:7886":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"28:4806:12089":{"crate_id":28,"path":["linux_raw_sys","general","robust_list"],"kind":"struct"},"2:50096:7985":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:2578:7995":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:10829:10337":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:11077:5547":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:13071:14436":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"12:1555:10734":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"6:4239:13241":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:48185:2029":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"1:7057:9965":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:11655:15288":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"28:6597:12682":{"crate_id":28,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_3"],"kind":"struct"},"16:3566:14612":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"18:736:11344":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"16:5510:10844":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:9885:15420":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:5763:9495":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"26:9176:13771":{"crate_id":26,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"23:136:11376":{"crate_id":23,"path":["os_str_bytes","pattern","Encoded"],"kind":"trait"},"17:12307:14192":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"6:4761:13458":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:2250:10007":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"5:4072:7968":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:6886:214":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:5457:6538":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:8471:9892":{"crate_id":1,"path":["std","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:6640:15492":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"17:12265:14188":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:9712:13891":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"26:9194:13772":{"crate_id":26,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:20372:9966":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:51811:15148":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"6:4231:13240":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:50849:10352":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:1643:9272":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"16:6137:10928":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:50128:8076":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:900:7676":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:11921:15294":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"18:755:11345":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"16:7452:195":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"5:6989:9333":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:8412:7983":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:2843:7884":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"27:438:8212":{"crate_id":27,"path":["rustix","backend","io","epoll","Ref"],"kind":"struct"},"16:5525:10845":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"26:7322:13615":{"crate_id":26,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:13047:14429":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:10283:15433":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"16:6654:10997":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"26:4605:13166":{"crate_id":26,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:8601:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"17:10466:13940":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"16:8014:5472":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"16:6252:10988":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"27:5181:13021":{"crate_id":27,"path":["rustix","process","rlimit","Rlimit"],"kind":"struct"},"2:52814:10249":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:9350:11300":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"5:5416:9169":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:7102:6921":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"25:67:61234":{"crate_id":25,"path":["io_lifetimes","traits","IntoFd"],"kind":"trait"},"16:7278:11001":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"26:5344:13342":{"crate_id":26,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"16:6781:10951":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:2932:5247":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"5:6890:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"16:6210:10986":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:9283:15412":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"16:7135:10799":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"16:5558:10847":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"28:4771:12076":{"crate_id":28,"path":["linux_raw_sys","general","inodes_stat_t"],"kind":"struct"},"1:918:9932":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:10583:11164":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"1:7939:17162":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:21296:6200":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"16:4574:14629":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"26:5668:13406":{"crate_id":26,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:47608:15131":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"16:5494:10841":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"6:4191:13218":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:8272:11289":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1:11289:64962":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"17:13572:14585":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:11130:8052":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"6:5684:13589":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"28:5618:12349":{"crate_id":28,"path":["linux_raw_sys","general","__kernel_old_itimerval"],"kind":"struct"},"23:62:11374":{"crate_id":23,"path":["os_str_bytes","OsStringBytes"],"kind":"trait"},"2:50913:10414":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"17:9303:11192":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:52382:10228":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"16:7388:10955":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:57047:242":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:9658:15417":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"9:0:7717":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:10756:9494":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"16:5614:10850":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:8951:72043":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:11124:10008":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"2:50490:10110":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"27:3380:11441":{"crate_id":27,"path":["rustix","backend","io","types","PipeFlags"],"kind":"struct"},"28:4975:12138":{"crate_id":28,"path":["linux_raw_sys","general","ip_msfilter__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"28:6373:12636":{"crate_id":28,"path":["linux_raw_sys","general","ktermios"],"kind":"struct"},"17:9930:13896":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:7786:11955":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"26:5955:13466":{"crate_id":26,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"26:5742:13416":{"crate_id":26,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"16:6593:10995":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:50010:8193":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:11070:9885":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"16:6528:10994":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:10233:15429":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:8534:15248":{"crate_id":1,"path":["std","net","ip_addr","fmt","Span"],"kind":"struct"},"1:12319:1446":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:51014:202":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:52412:10232":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:62:46862":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"21:173:5529":{"crate_id":21,"path":["termcolor","Buffer"],"kind":"struct"},"16:6743:10998":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:5348:15490":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:4257:13249":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:50837:10349":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:9485:15271":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"12:810:9933":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:4672:7851":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:46457:195":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"17:12164:14168":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:8071:10006":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:57073:242":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:4126:6994":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"28:5292:12253":{"crate_id":28,"path":["linux_raw_sys","general","ipv6_opt_hdr"],"kind":"struct"},"2:2578:127":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:46626:5472":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"28:4723:12061":{"crate_id":28,"path":["linux_raw_sys","general","file_clone_range"],"kind":"struct"},"17:12103:14157":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"26:4651:13184":{"crate_id":26,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:4804:13483":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:10403:11162":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"26:4788:13224":{"crate_id":26,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:4441:10094":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:50214:8078":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"27:4847:72321":{"crate_id":27,"path":["rustix","process","prctl","SpeculationFeature"],"kind":"enum"},"13:108:72032":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"6:4379:13309":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"26:5136:13296":{"crate_id":26,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"5:286:2137":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"6:131:46923":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"1:9213:183":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"9:188:10624":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"2:47639:8124":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"21:201:8027":{"crate_id":21,"path":["termcolor","NoColor"],"kind":"struct"},"2:8603:7918":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:21852:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"2:48637:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"6:6538:13750":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"16:7267:11000":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"5:1078:10512":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"27:4829:72312":{"crate_id":27,"path":["rustix","process","prctl","FloatingPointMode"],"kind":"enum"},"6:6448:13694":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:9532:8059":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"28:5805:12423":{"crate_id":28,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5__bindgen_ty_1"],"kind":"union"},"2:9298:219":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"12:119:10728":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:8814:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"17:12836:14384":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:1967:9378":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:52633:15154":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:47071:10404":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"5:1691:9167":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"6:4683:12247":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:9836:11959":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"28:5594:12343":{"crate_id":28,"path":["linux_raw_sys","general","__kernel_itimerspec"],"kind":"struct"},"6:1887:48204":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"26:4675:13194":{"crate_id":26,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"28:4536:12013":{"crate_id":28,"path":["linux_raw_sys","general","flock"],"kind":"struct"},"17:10385:11260":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"16:6345:10936":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"18:515:11350":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:8429:7985":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"17:11559:14063":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:11342:111":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"26:7120:13577":{"crate_id":26,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:7955:9942":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"28:5041:13378":{"crate_id":28,"path":["linux_raw_sys","general","inotify_event"],"kind":"struct"},"17:13557:14584":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:8093:9869":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:8435:7987":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"16:3010:11108":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:9574:9929":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"28:6389:12637":{"crate_id":28,"path":["linux_raw_sys","general","winsize"],"kind":"struct"},"16:6790:10999":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"16:5963:191":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"16:6241:10987":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:5845:8156":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:10434:13937":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:48485:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"12:444:141":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:2255:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:6430:8133":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"5:2738:70685":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"6:592:13041":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"5:2981:9847":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"16:5122:14641":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"5:217:9143":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"6:4635:13416":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"5:6400:240":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:51105:9880":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:50845:10351":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"18:727:11343":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:52125:10216":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:14:4260":{"crate_id":2,"path":["core","write"],"kind":"macro"},"16:4721:14634":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:20103:70224":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:48252:8519":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:2484:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"17:11034:13969":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"18:624:72044":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:12198:14181":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:7300:29147":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:1611:9169":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:7805:11957":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"6:4346:13291":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"0:24:1849":{"crate_id":0,"path":["clap","arg"],"kind":"macro"},"26:1802:12223":{"crate_id":26,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:3168:7894":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"26:8017:13669":{"crate_id":26,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:2481:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"5:4105:11917":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"12:387:29141":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:4838:9959":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:2792:7875":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"28:5221:12217":{"crate_id":28,"path":["linux_raw_sys","general","in6_addr"],"kind":"struct"},"2:3236:7900":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"26:2113:12897":{"crate_id":26,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"28:5314:12257":{"crate_id":28,"path":["linux_raw_sys","general","ipv6hdr"],"kind":"struct"},"5:677:228":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"6:608:13051":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:8650:10050":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"5:1387:9932":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"9:956:10556":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"16:7343:10940":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"25:0:8222":{"crate_id":25,"path":["io_lifetimes"],"kind":"module"},"17:13091:14443":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"16:7511:10814":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:10257:15431":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:11688:15291":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"28:7117:12826":{"crate_id":28,"path":["linux_raw_sys","general","io_uring_rsrc_update"],"kind":"struct"},"2:46501:199":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"16:5460:10839":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:10182:13930":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"11:36:14934":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"1:7978:9203":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"18:113:29138":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"6:4659:13425":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"27:4179:12982":{"crate_id":27,"path":["rustix","process","id","Pid"],"kind":"struct"},"1:5823:2021":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"5:6469:11926":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"28:5586:12340":{"crate_id":28,"path":["linux_raw_sys","general","__kernel_timespec"],"kind":"struct"},"1:3269:1957":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"6:5733:13611":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:11264:9203":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"1:10651:1650":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"1:12271:17165":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:21445:10432":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:4:983":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"25:182:11401":{"crate_id":25,"path":["io_lifetimes","views","SocketlikeViewType"],"kind":"trait"},"12:60:29140":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:12306:1352":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"6:4286:13260":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:2670:8218":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:47219:8143":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"26:5836:13428":{"crate_id":26,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:12008:14145":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:11547:14062":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"5:3430:11914":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:9339:11299":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:2385:10013":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:13134:14457":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"6:7214:13771":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:6759:8005":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"12:777:10712":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"17:9857:11232":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"27:4196:12983":{"crate_id":27,"path":["rustix","process","id","Cpuid"],"kind":"struct"},"6:4592:13401":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:1123:9941":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"18:671:11338":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:11954:10750":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:13459:14559":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:49457:15141":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:9223:54501":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"5:5505:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:2796:7874":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:12298:366":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"1:2399:10017":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"26:5572:13384":{"crate_id":26,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:11014:13968":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:38221:7906":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"1:4425:10091":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:5011:9874":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"28:4833:12097":{"crate_id":28,"path":["linux_raw_sys","general","__kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"26:8253:13694":{"crate_id":26,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:52656:15155":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"21:396:8029":{"crate_id":21,"path":["termcolor","ParseColorError"],"kind":"struct"},"27:466:11407":{"crate_id":27,"path":["rustix","backend","io","epoll","Borrowing"],"kind":"struct"},"1:9536:9922":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"1:1604:6479":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"28:6686:12697":{"crate_id":28,"path":["linux_raw_sys","general","io_uring_sqe"],"kind":"struct"},"17:11774:14093":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:48337:6930":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"5:6742:9169":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"26:1693:12128":{"crate_id":26,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"26:8924:13769":{"crate_id":26,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"27:4451:12989":{"crate_id":27,"path":["rustix","process","prctl","FloatingPointEmulationControl"],"kind":"struct"},"2:2493:234":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"17:8701:13881":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:3956:10271":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:12756:14362":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"28:5896:12462":{"crate_id":28,"path":["linux_raw_sys","general","sigevent__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"27:3294:11440":{"crate_id":27,"path":["rustix","backend","io","types","DupFlags"],"kind":"struct"},"17:12225:14183":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:2784:7873":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"6:1574:13074":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:6677:8120":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"26:9240:13778":{"crate_id":26,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"28:5904:12465":{"crate_id":28,"path":["linux_raw_sys","general","statx_timestamp"],"kind":"struct"},"17:3249:11233":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:8227:3985":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:50314:8074":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"6:4102:13157":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:9820:11305":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"16:8069:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"16:5878:10863":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"18:681:11339":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"9:977:10561":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:46685:10186":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:39414:10520":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"5:3473:7998":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:76:1501":{"crate_id":2,"path":["core","usize"],"kind":"module"},"1:12305:1322":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:11099:9868":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"12:2178:14928":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:12312:723":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"6:5534:12893":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"26:5974:13480":{"crate_id":26,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:2588:11933":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"9:111:10616":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"1:12307:1430":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:49669:8178":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"28:5865:12447":{"crate_id":28,"path":["linux_raw_sys","general","siginfo__bindgen_ty_1"],"kind":"union"},"5:1196:6481":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:11704:7298":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"17:10532:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"5:6874:9945":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:57034:242":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"26:8181:13678":{"crate_id":26,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:10445:11284":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:13031:14427":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:11161:13981":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:8639:10048":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"6:0:794":{"crate_id":6,"path":["libc"],"kind":"module"},"1:3953:9900":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:21190:10374":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"5:2737:5351":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:48321:6479":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:5178:9898":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:9446:15416":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:9315:9917":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:1636:576":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"27:0:8223":{"crate_id":27,"path":["rustix"],"kind":"module"},"12:815:9936":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"16:2894:11113":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"16:6735:10954":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:10997:13966":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"28:5754:12400":{"crate_id":28,"path":["linux_raw_sys","general","__sifields"],"kind":"union"},"12:0:7720":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"27:4115:72314":{"crate_id":27,"path":["rustix","backend","time","types","TimerfdClockId"],"kind":"enum"},"16:6690:10939":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:8946:7947":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:8556:131":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"1:8887:7945":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:420:10875":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:48894:7927":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"5:2989:9845":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:12972:14414":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:21393:28650":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"26:7203:13595":{"crate_id":26,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"26:676:12637":{"crate_id":26,"path":["libc","unix","winsize"],"kind":"struct"},"26:2167:12454":{"crate_id":26,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"5:1349:6479":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:8699:10093":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:2726:5340":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:53310:10242":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:29627:9274":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:8546:4259":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1:6441:15491":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"26:4564:12378":{"crate_id":26,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:2674:108":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"18:766:11346":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"26:641:12643":{"crate_id":26,"path":["libc","unix","iovec"],"kind":"struct"},"1:2026:182":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"26:505:13031":{"crate_id":26,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:11343:14019":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:12934:14407":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:2154:577":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:8687:9843":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"6:4179:12353":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:8737:9882":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:51835:10258":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"6:4307:13271":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"27:3798:61691":{"crate_id":27,"path":["rustix","backend","termios","types","OptionalActions"],"kind":"enum"},"2:2969:7897":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"17:12550:14259":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:4693:69585":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:7737:8520":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:3404:7976":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"23:42:72067":{"crate_id":23,"path":["os_str_bytes","OsStrBytes","assert_from_raw_bytes"],"kind":"foreign_type"},"2:2290:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"16:6034:10982":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:57060:242":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:7890:10947":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"28:7261:12868":{"crate_id":28,"path":["linux_raw_sys","general","__old_kernel_stat"],"kind":"struct"},"26:7476:13649":{"crate_id":26,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:8131:10030":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:11186:13984":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:8625:9903":{"crate_id":1,"path":["std","net","socket_addr","SocketAddrV6"],"kind":"struct"},"26:486:3282":{"crate_id":26,"path":["libc","unix","group"],"kind":"struct"},"17:12337:11284":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:4210:9958":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:4904:12861":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:661:6093":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:12955:14411":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:10455:11319":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"17:10310:15435":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"16:2930:10872":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:9401:13890":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"16:2261:6217":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"26:9297:12217":{"crate_id":26,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"23:321:5949":{"crate_id":23,"path":["os_str_bytes","raw_str","RawOsStr"],"kind":"struct"},"17:13231:14481":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:7962:9196":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:11759:189":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:9080:11932":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"6:4816:13488":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:11969:202":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"1:5317:15490":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:21332:10171":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:9909:13894":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:2321:179":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"28:6950:12781":{"crate_id":28,"path":["linux_raw_sys","general","io_sqring_offsets"],"kind":"struct"},"2:46340:7901":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:9395:2177":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"25:56:11397":{"crate_id":25,"path":["io_lifetimes","portability","FromSocketlike"],"kind":"trait"},"6:4294:13265":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:12134:14162":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"28:4615:12032":{"crate_id":28,"path":["linux_raw_sys","general","fscrypt_get_policy_ex_arg"],"kind":"struct"},"16:6567:10950":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"28:6325:12618":{"crate_id":28,"path":["linux_raw_sys","general","tcp_zerocopy_receive"],"kind":"struct"},"1:4454:10095":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:47313:8148":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"26:5981:13483":{"crate_id":26,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"16:2705:11102":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:53050:10229":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:8615:7925":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:11670:15494":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:12092:7911":{"crate_id":2,"path":["core","const_closure","ConstFnMutClosure"],"kind":"struct"},"9:863:10558":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:39378:7093":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:9464:7676":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:20101:70226":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"26:5883:13438":{"crate_id":26,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:6785:9414":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:47657:8128":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:8106:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"1:10799:11960":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"26:5725:13415":{"crate_id":26,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:9362:11194":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"9:920:10557":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:8561:11243":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:10708:11283":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"6:4598:13404":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:9700:11246":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:9437:15501":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:9526:11180":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:8613:9902":{"crate_id":1,"path":["std","net","socket_addr","SocketAddrV4"],"kind":"struct"},"12:1859:9846":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:11247:13990":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:8139:7996":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:5064:9877":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"28:5251:12232":{"crate_id":28,"path":["linux_raw_sys","general","in6_flowlabel_req"],"kind":"struct"},"1:7924:17160":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:11134:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"12:1534:10733":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:6079:9416":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"14:31:15459":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:411:162":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"18:614:72047":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"5:4948:8054":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"28:4621:12035":{"crate_id":28,"path":["linux_raw_sys","general","fscrypt_get_policy_ex_arg__bindgen_ty_1"],"kind":"union"},"26:4828:13236":{"crate_id":26,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"12:1845:9167":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"17:11528:14057":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:3125:15401":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:11288:14000":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:12118:14161":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:11277:9495":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"18:719:11342":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"16:7093:10795":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"5:6921:10403":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"14:202:9335":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:10394:11261":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"6:5498:13509":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"28:5602:12346":{"crate_id":28,"path":["linux_raw_sys","general","__kernel_old_timeval"],"kind":"struct"},"16:6704:10952":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"28:6542:63056":{"crate_id":28,"path":["linux_raw_sys","general","membarrier_cmd_flag"],"kind":"enum"},"2:49991:8192":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:49418:15138":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:9553:11194":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"6:7208:13770":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"6:495:13031":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"6:4797:13480":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"6:5568:13525":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:13492:14566":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:54119:15176":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"26:8856:13766":{"crate_id":26,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"28:5888:12459":{"crate_id":28,"path":["linux_raw_sys","general","sigevent__bindgen_ty_1"],"kind":"union"},"17:10520:13946":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"28:5634:12351":{"crate_id":28,"path":["linux_raw_sys","general","timespec"],"kind":"struct"},"2:9682:8196":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"28:6590:12680":{"crate_id":28,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_2"],"kind":"struct"},"26:7443:13635":{"crate_id":26,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"6:4489:10067":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:3160:10038":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"28:4843:63034":{"crate_id":28,"path":["linux_raw_sys","general","_bindgen_ty_1"],"kind":"enum"},"5:6444:11923":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:49839:10335":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:12033:14148":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"16:7298:11003":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"16:7059:8518":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:51791:15147":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:50020:8194":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"28:6310:12616":{"crate_id":28,"path":["linux_raw_sys","general","tcp_diag_md5sig"],"kind":"struct"},"2:20531:10209":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:9501:11192":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:2780:7870":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:50558:10118":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:52190:10260":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:51024:208":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:50110:7987":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"5:1405:9933":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"28:4635:12038":{"crate_id":28,"path":["linux_raw_sys","general","fscrypt_key_specifier__bindgen_ty_1"],"kind":"union"},"1:2612:7989":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"17:10374:11259":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:47055:10403":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:2383:10012":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"6:646:12355":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"28:7157:12829":{"crate_id":28,"path":["linux_raw_sys","general","io_uring_restriction"],"kind":"struct"},"9:896:10560":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"6:6430:13683":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:247:15397":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"5:4439:655":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"27:5075:13020":{"crate_id":27,"path":["rustix","process","prctl","PointerAuthenticationKeys"],"kind":"struct"},"16:6316:10959":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"28:5674:12358":{"crate_id":28,"path":["linux_raw_sys","general","rusage"],"kind":"struct"},"16:5996:10980":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:484:7298":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"17:13279:14518":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"18:574:13790":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"14:40:13966":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"16:3599:14613":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"5:6733:10503":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:12674:14351":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"26:5513:13373":{"crate_id":26,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"16:2993:11109":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"28:7214:12844":{"crate_id":28,"path":["linux_raw_sys","general","sockaddr"],"kind":"struct"},"12:1003:7673":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"6:4274:13255":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:6544:203":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:3486:7982":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"28:6998:63060":{"crate_id":28,"path":["linux_raw_sys","general","_bindgen_ty_10"],"kind":"enum"},"2:29408:10427":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"16:5761:10857":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:10245:15430":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:7945:9851":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"27:3001:11437":{"crate_id":27,"path":["rustix","backend","io","types","FdFlags"],"kind":"struct"},"28:4599:12029":{"crate_id":28,"path":["linux_raw_sys","general","fscrypt_policy_v2"],"kind":"struct"},"5:6967:221":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"16:6668:11130":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:47238:8145":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"25:181:11399":{"crate_id":25,"path":["io_lifetimes","views","FilelikeViewType"],"kind":"trait"},"1:12324:1091":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"12:2080:7675":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"16:6842:14713":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"26:621:13035":{"crate_id":26,"path":["libc","unix","hostent"],"kind":"struct"},"2:50541:10117":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"12:2198:14931":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"6:6545:13753":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"3:0:432":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"16:5411:10836":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:6217:9913":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:2905:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:13366:14534":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:20084:70185":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"18:609:15394":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:5826:9499":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"26:764:13046":{"crate_id":26,"path":["libc","unix","servent"],"kind":"struct"},"26:5633:13401":{"crate_id":26,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"16:7237:10802":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:5087:9870":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"22:61:4219":{"crate_id":22,"path":["clap_lex","RawArgs"],"kind":"struct"},"27:2713:11406":{"crate_id":27,"path":["rustix","backend","io","epoll","EventFlags"],"kind":"struct"},"1:6496:9913":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"16:4921:14640":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"28:6054:63051":{"crate_id":28,"path":["linux_raw_sys","general","_bindgen_ty_5"],"kind":"enum"},"2:20498:9844":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"17:9193:72042":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:12321:1444":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:50833:10350":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:7042:149":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"26:4770:13223":{"crate_id":26,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"28:6606:12684":{"crate_id":28,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_4"],"kind":"struct"},"17:11174:13983":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:13527:14579":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"27:3671:72310":{"crate_id":27,"path":["rustix","backend","process","types","Signal"],"kind":"enum"},"5:6809:6930":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:1938:9377":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"28:5094:12180":{"crate_id":28,"path":["linux_raw_sys","general","ip_beet_phdr"],"kind":"struct"},"1:8076:9868":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:2800:7876":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"28:4501:15369":{"crate_id":28,"path":["linux_raw_sys","general","__IncompleteArrayField"],"kind":"struct"},"2:46441:197":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"12:1872:9848":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"17:13221:14476":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:10075:15423":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:2763:7869":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"28:7235:12849":{"crate_id":28,"path":["linux_raw_sys","general","stat"],"kind":"struct"},"17:8441:11285":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"27:4024:12979":{"crate_id":27,"path":["rustix","backend","time","types","TimerfdTimerFlags"],"kind":"struct"},"1:9824:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"2:21046:10210":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"27:3779:12955":{"crate_id":27,"path":["rustix","backend","process","types","RawCpuSet"],"kind":"struct"},"2:48561:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:13114:14451":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"6:4653:13424":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:9384:15498":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"6:4565:13384":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"25:147:11387":{"crate_id":25,"path":["io_lifetimes","raw","FromRawFilelike"],"kind":"trait"},"18:690:11340":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"28:5226:12219":{"crate_id":28,"path":["linux_raw_sys","general","in6_addr__bindgen_ty_1"],"kind":"union"},"14:0:7721":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:7737:13961":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"6:5595:13532":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"6:7266:13784":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"6:6302:12019":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:47290:6539":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:574:9996":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"16:5596:10849":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:10497:54717":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:8368:11161":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:8613:7924":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:11787:14094":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:20938:9967":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"16:5737:10856":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"26:5225:13324":{"crate_id":26,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"15:193:10742":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:11500:14051":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"5:6002:11914":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"28:6298:12609":{"crate_id":28,"path":["linux_raw_sys","general","tcp_md5sig"],"kind":"struct"},"2:48409:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"26:8163:13676":{"crate_id":26,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"27:457:106":{"crate_id":27,"path":["rustix","backend","io","epoll","Context"],"kind":"trait"},"28:4467:12006":{"crate_id":28,"path":["linux_raw_sys","general","__BindgenBitfieldUnit"],"kind":"struct"},"26:2093:13145":{"crate_id":26,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"5:1044:29146":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:47005:9354":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"9:622:10600":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"16:6052:10983":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"5:3911:6479":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"12:1681:143":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:10221:15428":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"16:3854:14617":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:990:9938":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:3192:8001":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:3314:7561":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"28:7076:63061":{"crate_id":28,"path":["linux_raw_sys","general","_bindgen_ty_11"],"kind":"enum"},"27:4360:12988":{"crate_id":27,"path":["rustix","process","prctl","UnalignedAccessControl"],"kind":"struct"},"2:2938:4086":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"18:582:7906":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"6:545:13035":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:4262:9858":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"6:6375:12882":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:11748:14090":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"26:5685:13409":{"crate_id":26,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"6:4367:13300":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:48210:6930":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"5:2739:15011":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:2487:147":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"1:910:6930":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:5013:9876":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:13413:14545":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"12:2205:7954":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:5660:9491":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"26:1744:12136":{"crate_id":26,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:9489:7987":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"6:4706:13438":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:4398:13324":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"6:6329:12849":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"6:5554:13514":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:11828:14101":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"28:5696:12375":{"crate_id":28,"path":["linux_raw_sys","general","rlimit"],"kind":"struct"},"6:5782:13623":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"6:5510:13513":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"16:4357:14623":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:10822:54457":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"12:1866:9847":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:9283:9915":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:21984:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"26:4979:13260":{"crate_id":26,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:20122:70223":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"6:6409:13676":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"26:5433:13361":{"crate_id":26,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:11485:14047":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:11607:9503":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:9250:15409":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"5:4027:241":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:13404:14543":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:13374:14537":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:9644:11176":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"12:393:29142":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:20950:70188":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:10973:13965":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"16:4441:14626":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:1474:5257":{"crate_id":2,"path":["core","mem"],"kind":"module"},"17:12237:14184":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"0:12:127":{"crate_id":0,"path":["clap","Error"],"kind":"typedef"},"2:2444:9844":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"16:2557:11100":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:52458:10217":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:5394:188":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:2822:7879":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:20370:9844":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"16:2282:10808":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"28:5009:12151":{"crate_id":28,"path":["linux_raw_sys","general","group_filter__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"6:4690:973":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"28:5983:12495":{"crate_id":28,"path":["linux_raw_sys","general","tcp_word_hdr"],"kind":"union"},"28:5245:12229":{"crate_id":28,"path":["linux_raw_sys","general","ipv6_mreq"],"kind":"struct"},"2:54191:15182":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"16:5541:10846":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"6:4737:13451":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"26:7143:13582":{"crate_id":26,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"6:5741:13613":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:46523:198":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"26:7302:13613":{"crate_id":26,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"26:8420:13753":{"crate_id":26,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"28:5029:12161":{"crate_id":28,"path":["linux_raw_sys","general","sockaddr_in"],"kind":"struct"},"9:586:10597":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"6:5541:12626":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:50054:8070":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:10774:11160":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"26:5454:13365":{"crate_id":26,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:29587:9165":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:50332:8075":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:9389:106":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"6:1600:13089":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"20:5:1686":{"crate_id":20,"path":["bitflags","bitflags"],"kind":"macro"},"16:2727:11103":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:11469:67105":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:54054:10257":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:11217:13986":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:46873:9357":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:24:597":{"crate_id":2,"path":["core","env"],"kind":"macro"},"2:2827:7881":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:47299:8137":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"28:6421:10060":{"crate_id":28,"path":["linux_raw_sys","general","sockaddr_un"],"kind":"struct"},"2:10654:10466":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:8666:13880":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"27:4668:72313":{"crate_id":27,"path":["rustix","process","prctl","TimingMethod"],"kind":"enum"},"2:50901:9931":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"17:11708:14083":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"16:4606:14630":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:4326:8214":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"6:4768:13461":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"27:498:11409":{"crate_id":27,"path":["rustix","backend","io","epoll","Epoll"],"kind":"struct"},"5:6312:9175":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"1:4216:9957":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"16:7319:11005":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"6:513:12375":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:4268:9859":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"26:6986:13526":{"crate_id":26,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:12630:14320":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"18:538:11352":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"5:6772:6930":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"26:9158:13770":{"crate_id":26,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"5:3485:10535":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"6:4427:13331":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"28:5104:63040":{"crate_id":28,"path":["linux_raw_sys","general","_bindgen_ty_2"],"kind":"enum"},"15:214:10746":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"28:5070:15380":{"crate_id":28,"path":["linux_raw_sys","general","ip_auth_hdr"],"kind":"struct"},"12:300:10727":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"6:581:12397":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"10:0:7718":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"16:4662:14632":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"28:4651:12041":{"crate_id":28,"path":["linux_raw_sys","general","fscrypt_remove_key_arg"],"kind":"struct"},"16:5219:13877":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"21:74:8021":{"crate_id":21,"path":["termcolor","StandardStream"],"kind":"struct"},"2:21347:15030":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:9464:64985":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:20316:10270":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"6:5876:13660":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"6:6572:13760":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:48371:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"5:3107:9167":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"2:2285:185":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:21137:10373":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:9407:64959":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"9:382:10553":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"12:1120:10723":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"16:2605:11152":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:49234:8985":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"5:4532:201":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:22482:10148":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:8713:10048":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:12349:14199":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"12:1044:10720":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:21438:6221":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"6:4096:12378":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"23:0:8093":{"crate_id":23,"path":["os_str_bytes"],"kind":"module"},"6:4515:13365":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:13082:14440":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:49928:8187":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:10905:10340":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:9207:9494":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"16:2509:11110":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:47279:8155":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"6:4437:13332":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"28:5551:12324":{"crate_id":28,"path":["linux_raw_sys","general","pollfd"],"kind":"struct"},"23:448:11377":{"crate_id":23,"path":["os_str_bytes","pattern","EncodedChar"],"kind":"struct"},"17:9764:13892":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"6:4534:12241":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:2847:7885":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:8123:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"29:32:9432":{"crate_id":29,"path":["strsim","StringWrapper"],"kind":"struct"},"26:5256:13325":{"crate_id":26,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"26:8221:13683":{"crate_id":26,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:8442:7988":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"1:7848:9844":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"5:1241:9941":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:48261:8676":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:6137:11945":{"crate_id":1,"path":["std","sync","mpmc","array","Channel"],"kind":"struct"},"27:4810:72309":{"crate_id":27,"path":["rustix","process","prctl","PTracer"],"kind":"enum"},"26:8035:12849":{"crate_id":26,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:10088:13927":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:11094:15274":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"16:6109:10830":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:4369:8216":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"16:7942:11011":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:4014:10046":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:48278:207":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"17:8631:13879":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"26:7185:13594":{"crate_id":26,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"26:5394:10067":{"crate_id":26,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:11947:10750":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:13184:14468":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:20419:10209":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:5227:8580":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"5:1437:195":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"27:479:11408":{"crate_id":27,"path":["rustix","backend","io","epoll","Owning"],"kind":"struct"},"17:9691:11247":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:11259:13991":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:13100:14444":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:12609:14311":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:47128:7852":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"26:4998:13265":{"crate_id":26,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:9277:6930":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"28:7227:15392":{"crate_id":28,"path":["linux_raw_sys","general","linux_dirent64"],"kind":"struct"},"2:8599:111":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"2:7426:7955":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:50527:10114":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"28:5642:12352":{"crate_id":28,"path":["linux_raw_sys","general","timeval"],"kind":"struct"},"28:176:12005":{"crate_id":28,"path":["linux_raw_sys","general","__BindgenUnionField"],"kind":"struct"},"2:47038:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:562:13961":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"6:5699:13595":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"23:78:9844":{"crate_id":23,"path":["os_str_bytes","private","Sealed"],"kind":"trait"},"2:47148:8134":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"26:5611:13393":{"crate_id":26,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:10476:54716":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"16:6517:10738":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:8868:9120":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:39427:8921":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:54092:10222":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:13168:14465":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"5:5191:9173":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"16:2367:11097":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:21409:28659":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:50086:8062":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:969:9935":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:3147:7892":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"28:5748:12397":{"crate_id":28,"path":["linux_raw_sys","general","sigval"],"kind":"union"},"26:6847:13513":{"crate_id":26,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:5624:70594":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"12:98:10724":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"16:6161:10984":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"26:7246:13607":{"crate_id":26,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"6:1595:13087":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"16:6676:10938":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:3461:4259":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:47229:8144":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"28:4753:15371":{"crate_id":28,"path":["linux_raw_sys","general","file_dedupe_range"],"kind":"struct"},"2:21918:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:47385:7984":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"26:6961:13525":{"crate_id":26,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"12:1518:10732":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:10495:9948":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"1:7875:9995":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"16:6865:11135":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"16:2535:11099":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:49164:109":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"2:47261:8146":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"6:4267:13252":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:47400:8153":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"28:6614:12685":{"crate_id":28,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_5"],"kind":"struct"},"17:11235:13987":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"13:220:14924":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"26:539:12351":{"crate_id":26,"path":["libc","unix","timespec"],"kind":"struct"},"26:1887:13075":{"crate_id":26,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"26:7282:13611":{"crate_id":26,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:12278:14189":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:13382:14538":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"28:5739:12393":{"crate_id":28,"path":["linux_raw_sys","general","sigaltstack"],"kind":"struct"},"29:0:1689":{"crate_id":29,"path":["strsim"],"kind":"module"},"2:21786:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"17:10490:13942":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:8645:10049":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"28:5282:12251":{"crate_id":28,"path":["linux_raw_sys","general","ipv6_rt_hdr"],"kind":"struct"},"2:9723:8078":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:9737:8077":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"16:7909:10949":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"16:4888:14639":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"26:7166:13589":{"crate_id":26,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"14:7:15459":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:8505:9894":{"crate_id":1,"path":["std","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:2676:225":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"6:6352:13670":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:9531:216":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"26:4865:13241":{"crate_id":26,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:6017:9407":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:2515:7994":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:50670:10121":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"0:107:1648":{"crate_id":0,"path":["clap","builder"],"kind":"module"},"2:11141:8049":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:12317:1448":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"5:1595:11914":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"27:5210:13025":{"crate_id":27,"path":["rustix","process","wait","WaitOptions"],"kind":"struct"},"2:48329:7676":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"28:6623:12686":{"crate_id":28,"path":["linux_raw_sys","general","uffdio_api"],"kind":"struct"},"8:0:7716":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"26:1781:12161":{"crate_id":26,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"26:4927:13252":{"crate_id":26,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:973:9936":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:20124:70221":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"14:160:15459":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"26:8295:13719":{"crate_id":26,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"26:5763:13418":{"crate_id":26,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"6:4212:13227":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"16:6270:10933":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:8339:54455":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:9722:1874":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:47043:7837":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"6:5587:13527":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"28:6578:12676":{"crate_id":28,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"6:4559:13382":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:1637:9848":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:13478:14564":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"6:5713:13606":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:11536:14059":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:2490:132":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"17:12514:14228":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"6:7243:13778":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:1632:9847":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:11661:14078":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:2753:7867":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"6:5443:12466":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:8295:54454":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"5:870:6479":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"26:5478:13372":{"crate_id":26,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:12816:14376":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"6:575:12846":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"28:4827:12095":{"crate_id":28,"path":["linux_raw_sys","general","__kernel_sockaddr_storage__bindgen_ty_1"],"kind":"union"},"1:3377:7968":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"26:8440:13757":{"crate_id":26,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:242:15396":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"9:676:10646":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"17:11951:14133":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"28:4949:12130":{"crate_id":28,"path":["linux_raw_sys","general","ip_mreq"],"kind":"struct"},"16:7396:11007":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"16:5780:10859":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"6:4581:13393":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"12:822:9937":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:3084:5446":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"26:2136:10060":{"crate_id":26,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:52736:10261":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:11601:15285":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:9778:11249":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:1620:9845":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"12:861:9940":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:52434:10235":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"6:1511:12133":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"16:7044:10794":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"6:1500:12128":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"28:5704:12378":{"crate_id":28,"path":["linux_raw_sys","general","rlimit64"],"kind":"struct"},"18:636:13799":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"6:4335:13287":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"28:5765:12408":{"crate_id":28,"path":["linux_raw_sys","general","__sifields__bindgen_ty_1"],"kind":"struct"},"1:8391:7056":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"17:11368:14023":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:10863:1957":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"16:5628:10851":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"28:6585:12678":{"crate_id":28,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"],"kind":"union"},"16:6619:10996":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"17:10682:11288":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:21044:9844":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"6:5835:13634":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:8137:54453":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:9317:11297":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"26:8203:13682":{"crate_id":26,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:3616:6930":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:54244:15185":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:54016:10237":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"6:4716:13444":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:1760:10434":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:9031:72035":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"16:3188:14609":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"26:7228:13606":{"crate_id":26,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:2805:7880":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"17:10894:11226":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:9113:11938":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"17:13158:14462":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:20529:10214":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:3194:8002":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"16:8056:10813":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:6316:11945":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"6:4810:13485":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:20290:10206":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:11164:67107":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:50418:8068":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"26:5987:13485":{"crate_id":26,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:47247:15127":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"21:79:8023":{"crate_id":21,"path":["termcolor","BufferedStandardStream"],"kind":"struct"},"26:4714:12353":{"crate_id":26,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:386:15398":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:8494:13876":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"24:5:7561":{"crate_id":24,"path":["is_terminal","IsTerminal"],"kind":"trait"},"6:4247:13244":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"23:142:8050":{"crate_id":23,"path":["os_str_bytes","pattern","Pattern"],"kind":"trait"},"18:707:8052":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"5:6718:2692":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:3154:10036":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:9644:8076":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:11800:14096":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"28:5990:63050":{"crate_id":28,"path":["linux_raw_sys","general","_bindgen_ty_4"],"kind":"enum"},"2:4200:8206":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"5:6758:70670":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"5:5802:18007":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"5:6950:7835":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:12781:14372":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"16:5472:10840":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"26:695:12846":{"crate_id":26,"path":["libc","unix","linger"],"kind":"struct"},"6:4126:13174":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"5:950:11914":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:47415:8154":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:57086:242":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:1678:13144":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:11721:14086":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"28:5650:12353":{"crate_id":28,"path":["linux_raw_sys","general","itimerspec"],"kind":"struct"},"6:1654:13127":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"6:1580:13075":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"12:834:9938":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"5:3561:11914":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"18:521:11347":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:13340:14525":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:53768:10250":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"26:7906:12388":{"crate_id":26,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"6:6981:12379":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:9577:11185":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:49146:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"17:12322:14196":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:4972:9883":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"16:7980:10815":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:11786:10046":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"28:5851:12442":{"crate_id":28,"path":["linux_raw_sys","general","__sifields__bindgen_ty_7"],"kind":"struct"},"28:5799:12421":{"crate_id":28,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5"],"kind":"struct"},"28:5263:12241":{"crate_id":28,"path":["linux_raw_sys","general","in6_pktinfo"],"kind":"struct"},"16:2793:11107":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"20:0:1686":{"crate_id":20,"path":["bitflags"],"kind":"module"},"28:5332:63042":{"crate_id":28,"path":["linux_raw_sys","general","_bindgen_ty_3"],"kind":"enum"},"5:6283:9173":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"28:6343:12626":{"crate_id":28,"path":["linux_raw_sys","general","termios"],"kind":"struct"},"1:8763:9884":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"25:47:11396":{"crate_id":25,"path":["io_lifetimes","portability","FromFilelike"],"kind":"trait"},"6:4778:13466":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:979:9937":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"28:5872:12449":{"crate_id":28,"path":["linux_raw_sys","general","siginfo__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"2:21355:15031":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"7:0:1491":{"crate_id":7,"path":["unwind"],"kind":"module"},"28:6413:12643":{"crate_id":28,"path":["linux_raw_sys","general","iovec"],"kind":"struct"},"27:2625:11405":{"crate_id":27,"path":["rustix","backend","io","epoll","CreateFlags"],"kind":"struct"},"26:2074:13144":{"crate_id":26,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"26:5783:13424":{"crate_id":26,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:11271:13992":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"6:7289:12217":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:9382:13888":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"26:4749:13218":{"crate_id":26,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:47349:8151":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:11585:11963":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"1:6782:9413":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:4302:9860":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"28:4575:12024":{"crate_id":28,"path":["linux_raw_sys","general","fscrypt_policy_v1"],"kind":"struct"},"16:7249:10803":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"16:4217:14619":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"16:2749:11104":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"28:4996:12144":{"crate_id":28,"path":["linux_raw_sys","general","group_req"],"kind":"struct"},"6:4417:13325":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"26:8105:12882":{"crate_id":26,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:10322:10061":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"28:5880:12454":{"crate_id":28,"path":["linux_raw_sys","general","sigevent"],"kind":"struct"},"19:0:999":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:20329:9844":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:9239:9497":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:13518:14575":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:12964:14412":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:8990:11928":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"2:50393:8058":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:2774:7871":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"16:7603:10957":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:8083:10008":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"21:221:8028":{"crate_id":21,"path":["termcolor","Ansi"],"kind":"struct"},"1:6010:9406":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:8911:72040":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"16:7497:10937":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"5:1060:10511":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:0:485":{"crate_id":2,"path":["core"],"kind":"module"},"1:12282:66556":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:4894:9859":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:10642:11290":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"26:7265:13608":{"crate_id":26,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"26:6721:12466":{"crate_id":26,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"16:6829:11133":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"28:4519:12010":{"crate_id":28,"path":["linux_raw_sys","general","__kernel_fsid_t"],"kind":"struct"},"26:7993:13667":{"crate_id":26,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:50232:8077":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:11070:13971":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"26:7973:12019":{"crate_id":26,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:53516:10262":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"23:338:6995":{"crate_id":23,"path":["os_str_bytes","raw_str","RawOsString"],"kind":"struct"}},"external_crates":{"23":{"name":"os_str_bytes","html_root_url":null},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"29":{"name":"strsim","html_root_url":null},"24":{"name":"is_terminal","html_root_url":null},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"20":{"name":"bitflags","html_root_url":"https://docs.rs/bitflags/1.3.2/"},"25":{"name":"io_lifetimes","html_root_url":null},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"clap_lex","html_root_url":null},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"28":{"name":"linux_raw_sys","html_root_url":null},"26":{"name":"libc","html_root_url":null},"27":{"name":"rustix","html_root_url":null},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"termcolor","html_root_url":null},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}