{"root":"0:0:1760","crate_version":"4.4.0","includes_private":false,"index":{"2:12326:28114":{"id":"2:12326:28114","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12300:22677":{"id":"2:12300:22677","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12035:427","self::pattern":"2:11937:7934","str::rsplitn":"2:12303:22679"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43820:7923","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:7930","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12266:28105":{"id":"2:12266:28105","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43980:7948","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12244:22077":{"id":"2:12244:22077","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11497:7938"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12358:20326":{"id":"2:12358:20326","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12260:26000":{"id":"2:12260:26000","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12035:427"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43686:7941","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12246:320":{"id":"2:12246:320","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12247:319","`u8`":"1:12052:1544"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12262:20045":{"id":"2:12262:20045","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43702:2397","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12291:22675":{"id":"2:12291:22675","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11937:7934","`DoubleEndedIterator`":"2:7388:121","prim@char":"1:12035:427","str::split":"2:12285:22671"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43734:7919","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:7930","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11942:7930","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11957:7931","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12250:22639":{"id":"2:12250:22639","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41757:181"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10031:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10031:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12247:319":{"id":"2:12247:319","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12052:1544"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12258:22663":{"id":"2:12258:22663","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12259:22664"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12347:28121":{"id":"2:12347:28121","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12035:427","self::pattern":"2:11937:7934"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:7930","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12330:28116":{"id":"2:12330:28116","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12271:22682":{"id":"2:12271:22682","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12035:427","self::pattern":"2:11937:7934"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:7930","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12363:28125":{"id":"2:12363:28125","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4521:28125"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44033:7946","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5527:2422":{"id":"5:5527:2422","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12261:26519":{"id":"2:12261:26519","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12035:427"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43692:7940","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12332:28118":{"id":"2:12332:28118","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12035:427","self::pattern":"2:11937:7934"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:7930","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11942:7930","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11962:7929","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1760":{"id":"0:0:1760","crate_id":0,"name":"clap","span":{"filename":"src/lib.rs","begin":[6,0],"end":[120,1]},"visibility":"public","docs":"> **Command Line Argument Parser for Rust**\n\nQuick Links:\n- Derive [tutorial][_derive::_tutorial] and [reference][_derive]\n- Builder [tutorial][_tutorial] and [reference](index.html)\n- [Cookbook][_cookbook]\n- [FAQ][_faq]\n- [Discussions](https://github.com/clap-rs/clap/discussions)\n\n## Aspirations\n\n- Out of the box, users get a polished CLI experience\n  - Including common argument behavior, help generation, suggested fixes for users, colored output, [shell completions](https://github.com/clap-rs/clap/tree/master/clap_complete), etc\n- Flexible enough to port your existing CLI interface\n  - However, we won't necessarily streamline support for each use case\n- Reasonable parse performance\n- Resilient maintainership, including\n  - Willing to break compatibility rather than batching up breaking changes in large releases\n  - Leverage feature flags to keep to one active branch\n  - Being under [WG-CLI](https://github.com/rust-cli/team/) to increase the bus factor\n- We follow semver and will wait about 6-9 months between major breaking changes\n- We will support the last two minor Rust releases (MSRV, currently 1.70.0)\n\nWhile these aspirations can be at odds with fast build times and low binary\nsize, we will still strive to keep these reasonable for the flexibility you\nget.  Check out the\n[argparse-benchmarks](https://github.com/rust-cli/argparse-benchmarks-rs) for\nCLI parsers optimized for other use cases.\n\n## Example\n\nRun\n```console\n$ cargo add clap --features derive\n```\n*(See also [feature flag reference][_features])*\n\nThen define your CLI in `main.rs`:\n```rust\n# #[cfg(feature = \"derive\")] {\nuse clap::Parser;\n\n/// Simple program to greet a person\n#[derive(Parser, Debug)]\n#[command(author, version, about, long_about = None)]\nstruct Args {\n    /// Name of the person to greet\n    #[arg(short, long)]\n    name: String,\n\n    /// Number of times to greet\n    #[arg(short, long, default_value_t = 1)]\n    count: u8,\n}\n\nfn main() {\n    let args = Args::parse();\n\n    for _ in 0..args.count {\n        println!(\"Hello {}!\", args.name)\n    }\n}\n# }\n```\n\nAnd try it out:\n```console\n$ demo --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: demo[EXE] [OPTIONS] --name <NAME>\n\nOptions:\n  -n, --name <NAME>    Name of the person to greet\n  -c, --count <COUNT>  Number of times to greet [default: 1]\n  -h, --help           Print help\n  -V, --version        Print version\n\n$ demo --name Me\nHello Me!\n\n```\n*(version number and `.exe` extension on windows replaced by placeholders)*\n\nSee also the derive [tutorial][_derive::_tutorial] and [reference][_derive]\n\n### Related Projects\n\nAugment clap:\n- [wild](https://crates.io/crates/wild) for supporting wildcards (`*`) on Windows like you do Linux\n- [argfile](https://crates.io/crates/argfile) for loading additional arguments from a file (aka response files)\n- [shadow-rs](https://crates.io/crates/shadow-rs) for generating `Command::long_version`\n- [clap_mangen](https://crates.io/crates/clap_mangen) for generating man page source (roff)\n- [clap_complete](https://crates.io/crates/clap_complete) for shell completion support\n\nCLI Helpers\n- [cio](https://crates.io/crates/clio) for reading/writing to files specified as arguments\n- [clap-verbosity-flag](https://crates.io/crates/clap-verbosity-flag)\n- [clap-cargo](https://crates.io/crates/clap-cargo)\n- [concolor-clap](https://crates.io/crates/concolor-clap)\n\nTesting\n- [`trycmd`](https://crates.io/crates/trycmd):  Bulk snapshot testing\n- [`snapbox`](https://crates.io/crates/snapbox):  Specialized snapshot testing\n- [`assert_cmd`](https://crates.io/crates/assert_cmd) and [`assert_fs`](https://crates.io/crates/assert_fs): Customized testing\n\nDocumentation:\n- [Command-line Apps for Rust](https://rust-cli.github.io/book/index.html) book\n","links":{},"attrs":["#![doc(html_logo_url =\n\"https://raw.githubusercontent.com/clap-rs/clap/master/assets/clap.png\")]","#![warn(missing_docs, missing_debug_implementations,\nmissing_copy_implementations, trivial_casts, unused_allocation,\ntrivial_numeric_casts, clippy :: single_char_pattern)]","#![forbid(unsafe_code)]","#![allow(clippy :: single_component_path_imports)]","#![allow(clippy :: branches_sharing_code)]","#![allow(clippy :: if_same_then_else)]","#![allow(clippy :: collapsible_else_if)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:3-20:0:1750"],"is_stripped":false}}},"2:12356:22578":{"id":"2:12356:22578","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39786:22562","Self::is_ascii":"2:12355:20321"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39786:22562","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5510:28782":{"id":"5:5510:28782","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2076","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:2260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2076","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:2260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12256:28103":{"id":"2:12256:28103","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12041:1441","str::slice_mut_unchecked":"2:12257:28104","crate::ops::Index":"2:3052:2277"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5511:8271":{"id":"5:5511:8271","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:7930","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12328:28115":{"id":"2:12328:28115","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12236:832":{"id":"2:12236:832","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12035:427"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12235":{"id":"2:12235","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12236:832","2:12237:22623","2:12238:28099","2:12239:28100","2:12241:28101","2:12244:22077","2:12245:28102","2:12246:320","2:12247:319","2:12248:22638","2:12250:22639","2:12252:22640","2:12254:22641","2:12256:28103","2:12257:28104","2:12258:22663","2:12259:22664","2:12260:26000","2:12261:26519","2:12262:20045","2:12263:26011","2:12264:26017","2:12265:25856","2:12266:28105","2:12267:26001","2:12268:22681","2:12271:22682","2:12274:22683","2:12277:19840","2:12281:19841","2:12285:22671","2:12288:22673","2:12291:22675","2:12294:28106","2:12297:28107","2:12300:22677","2:12303:22679","2:12306:28108","2:12309:28109","2:12312:1987","2:12315:28110","2:12318:28111","2:12321:28112","2:12324:28113","2:12326:28114","2:12328:28115","2:12330:28116","2:12331:28117","2:12332:28118","2:12335:28119","2:12338:20070","2:12341:22684","2:12344:28120","2:12347:28121","2:12350:28122","2:12353:28123","2:12355:20321","2:12356:22578","2:12357:20325","2:12358:20326","2:12359:20327","2:12360:28124","2:12362:2195","2:12363:28125"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12331:28117":{"id":"2:12331:28117","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12338:20070":{"id":"2:12338:20070","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12035:427","self::pattern":"2:11937:7934"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:7930","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12321:28112":{"id":"2:12321:28112","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11937:7934","`DoubleEndedIterator`":"2:7388:121","prim@char":"1:12035:427","str::match_indices":"2:12318:28111"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43884:7950","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:7930","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11942:7930","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11957:7931","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12344:28120":{"id":"2:12344:28120","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12035:427","self::pattern":"2:11937:7934"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:7930","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11942:7930","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11957:7931","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12350:28122":{"id":"2:12350:28122","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12035:427","self::pattern":"2:11937:7934"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:7930","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11942:7930","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11957:7931","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12359:20327":{"id":"2:12359:20327","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5529:20324":{"id":"5:5529:20324","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12359:20327"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12360:28124":{"id":"2:12360:28124","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4523:28124"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44015:7945","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5509":{"id":"5:5509","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5510:28782","5:5511:8271","5:5514:28783","5:5517:28784","5:5525:28785","5:5526:28786","5:5527:2422","5:5528:20323","5:5529:20324"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12277:19840":{"id":"2:12277:19840","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41757:181","prim@char":"1:12035:427","self::pattern":"2:11937:7934"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:7930","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12248:22638":{"id":"2:12248:22638","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41757:181"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10031:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10031:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12237:22623":{"id":"2:12237:22623","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12239:28100":{"id":"2:12239:28100","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5526:28786":{"id":"5:5526:28786","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2076","`String`":"5:7449:227"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2076","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:2260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12241:28101":{"id":"2:12241:28101","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12239:28100"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12341:22684":{"id":"2:12341:22684","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12035:427","self::pattern":"2:11937:7934"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:7930","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11942:7930","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11957:7931","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12315:28110":{"id":"2:12315:28110","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11937:7934","`DoubleEndedIterator`":"2:7388:121","prim@char":"1:12035:427","str::matches":"2:12312:1987"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43938:7952","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:7930","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11942:7930","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11957:7931","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12353:28123":{"id":"2:12353:28123","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11898:127","`FromStr`":"2:11897:2562"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41899:212","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:11897:2562","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11897:2562","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12312:1987":{"id":"2:12312:1987","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11937:7934","`DoubleEndedIterator`":"2:7388:121","prim@char":"1:12035:427","str::rmatches":"2:12315:28110"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43920:7951","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:7930","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12263:26011":{"id":"2:12263:26011","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12264:26017"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43990:7937","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12252:22640":{"id":"2:12252:22640","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10031:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10031:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12259:22664":{"id":"2:12259:22664","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12258:22663"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12324:28113":{"id":"2:12324:28113","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12257:28104":{"id":"2:12257:28104","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12041:1441","crate::ops::IndexMut":"2:3056:2278","str::slice_unchecked":"2:12256:28103"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:3-20:0:1750":{"id":"0:3-20:0:1750","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[99,0],"end":[99,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"clap_builder","name":"clap_builder","id":"20:0:1750","glob":true}}},"2:12245:28102":{"id":"2:12245:28102","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5514:28783":{"id":"5:5514:28783","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:7930","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12288:22673":{"id":"2:12288:22673","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12035:427","self::pattern":"2:11937:7934"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11753:7925","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:7930","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5517:28784":{"id":"5:5517:28784","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12362:2195":{"id":"2:12362:2195","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4524:2195"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44024:2196","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12265:25856":{"id":"2:12265:25856","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43970:2394","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12281:19841":{"id":"2:12281:19841","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41757:181","prim@char":"1:12035:427","self::pattern":"2:11937:7934"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:7930","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11942:7930","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11957:7931","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12267:26001":{"id":"2:12267:26001","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44008:7935","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12306:28108":{"id":"2:12306:28108","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:7930","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12355:20321":{"id":"2:12355:20321","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12264:26017":{"id":"2:12264:26017","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12263:26011"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43999:7936","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12297:28107":{"id":"2:12297:28107","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11937:7934","str::split":"2:12285:22671","prim@char":"1:12035:427","str::split_terminator":"2:12294:28106"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43784:7953","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:7930","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11942:7930","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11957:7931","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12238:28099":{"id":"2:12238:28099","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12357:20325":{"id":"2:12357:20325","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12285:22671":{"id":"2:12285:22671","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11937:7934","`DoubleEndedIterator`":"2:7388:121","prim@char":"1:12035:427","str::split_whitespace":"2:12263:26011","str::rsplit":"2:12291:22675"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43716:2398","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:7930","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12335:28119":{"id":"2:12335:28119","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12035:427","self::pattern":"2:11937:7934"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:7930","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12318:28111":{"id":"2:12318:28111","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11937:7934","`DoubleEndedIterator`":"2:7388:121","prim@char":"1:12035:427","str::rmatch_indices":"2:12321:28112"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43866:7949","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:7930","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12274:22683":{"id":"2:12274:22683","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12035:427","self::pattern":"2:11937:7934"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:7930","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11942:7930","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11957:7931","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12268:22681":{"id":"2:12268:22681","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12035:427","self::pattern":"2:11937:7934"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:7930","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12294:28106":{"id":"2:12294:28106","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11937:7934","str::split":"2:12285:22671","prim@char":"1:12035:427","`DoubleEndedIterator`":"2:7388:121","str::rsplit_terminator":"2:12297:28107"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43766:7954","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:7930","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12309:28109":{"id":"2:12309:28109","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41755:183","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:7930","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11942:7930","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11957:7931","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5528:20323":{"id":"5:5528:20323","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12358:20326"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12303:22679":{"id":"2:12303:22679","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12035:427","str::splitn":"2:12300:22677","self::pattern":"2:11937:7934"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43838:7921","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11942:7930","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11942:7930","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11957:7931","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5525:28785":{"id":"5:5525:28785","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12254:22641":{"id":"2:12254:22641","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10031:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10031:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"11:97:30532":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"20:3508:19883":{"crate_id":20,"path":["clap_builder","builder","value_parser","BoolValueParser"],"kind":"struct"},"2:43569:7898":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"20:3581:19900":{"crate_id":20,"path":["clap_builder","builder","value_parser","_AnonymousValueParser"],"kind":"struct"},"2:43884:7950":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:3975:2459":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"6:4535:12525":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:10097:15624":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:11316:15820":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"6:1506:9948":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:8713:15569":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:43027:8081":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"20:3790:19937":{"crate_id":20,"path":["clap_builder","parser","error","MatchesError"],"kind":"enum"},"2:46105:2654":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:10561:15688":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"17:8659:15548":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:43624:7917":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:22546:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"17:12452:18984":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"20:4207:2567":{"crate_id":20,"path":["clap_builder","util","graph","Child"],"kind":"struct"},"17:13739:19755":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:8895:15574":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:1570:2243":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:43058:26667":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"16:6352:15431":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"20:3428:19894":{"crate_id":20,"path":["clap_builder","builder","value_parser","StringValueParser"],"kind":"struct"},"22:5:2457":{"crate_id":22,"path":["clap_lex","ext","OsStrExt"],"kind":"trait"},"17:12062:18482":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"20:4214:32135":{"crate_id":20,"path":["clap_builder","util","graph","ChildGraph"],"kind":"struct"},"20:1364:19899":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParserFactory"],"kind":"trait"},"6:1603:9959":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"18:671:19846":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:3348:2404":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"24:96:19983":{"crate_id":24,"path":["anstyle_parse","VtUtf8Receiver"],"kind":"struct"},"5:7412:2322":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"5:5975:8653":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"6:5829:13224":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:40502:8231":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:11897:2562":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:44216:7969":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:11327:15830":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:6154:8235":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"2:45902:2723":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"6:1590:9957":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:12970:19014":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:2772:231":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"16:7677:200":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"16:6156:15422":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:3228:135":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:41030:26568":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"2:43503:7907":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:21012:26275":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"23:446:32244":{"crate_id":23,"path":["anstream","auto","StreamInner"],"kind":"enum"},"1:8984:24596":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"16:5905:15415":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:45796:2676":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:44122:7965":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:46887:2679":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"16:2321:14474":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"11:311:30521":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"11:2186:30537":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:14460:19808":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"6:1649:9962":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"16:8195:15500":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"16:6792:15451":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:7846:28024":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"6:587:9065":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:4918:2524":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:400:15565":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:40355:2326":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"5:2141:29253":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:12473:15782":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:12041:1441":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"6:7529:12744":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:1426:144":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:13676:19751":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:9207:24717":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"5:1411:2222":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"6:0:837":{"crate_id":6,"path":["libc"],"kind":"module"},"1:12059:1159":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"17:10447:15691":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:2876:8291":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"9:507:14270":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"5:2035:2263":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"17:13851:19761":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:2209:15689":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:39419:8299":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"17:12043:18481":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:6901:24510":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"1:8224:2398":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:2353:184":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"1:10344:20606":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"6:4818:12553":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"5:4348:248":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:7581:24519":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"20:3848:19934":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","ValuesRef"],"kind":"struct"},"20:3078:2028":{"crate_id":20,"path":["clap_builder","builder","arg_group","ArgGroup"],"kind":"struct"},"6:4524:12524":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:2859:2649":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:4171:7887":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"1:11181:8450":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"17:14401:19804":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:4909:2523":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"14:215:14407":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:3264:2419":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:46040:2744":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"16:6893:30926":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:4770:26262":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"5:1138:28096":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"5:1776:2228":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:3529:2392":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:11497:7938":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"20:3941:19935":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Indices"],"kind":"struct"},"5:6439:2227":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"11:365:30515":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:7871:2365":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"17:14316:19798":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"6:7575:12750":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"16:6545:15444":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:3447:2369":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"16:3232:14505":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:7864:2361":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:14:1990":{"crate_id":2,"path":["core","write"],"kind":"macro"},"16:3655:14509":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:10949:15737":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:40310:8052":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"5:878:2249":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:5629:2610":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:555:2175":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"11:817:2234":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:30539:26737":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"16:8205:15501":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"16:2722:14491":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:2815:7854":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"17:12983:19015":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"11:447:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:10575:15724":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"2:20964:2662":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"17:14221:19793":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"6:6067:13241":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"14:7:14398":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"17:10771:15756":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:1064:2239":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:41942:2222":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"16:7554:15475":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"5:7545:7995":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"6:1696:9967":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:43019:26545":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:11609:25638":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"2:12775:140":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:13286:19035":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:7911:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"16:6968:15459":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:2478:8073":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:12293:18499":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"16:6401:15435":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:23323:222":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:9564:15586":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:9933:15638":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:8848:15573":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"16:2596:14486":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:11235:15827":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:3224:2417":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:10637:15729":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"20:3829:19932":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","IdsRef"],"kind":"struct"},"17:13989:19773":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:5568:2574":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:8989:107":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:40610:8234":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:4138:22074":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:10929:15741":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"17:12237:18495":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"6:4650:12535":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:42746:27302":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:2520:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"1:5449:2025":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:3188:25804":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:9373:7865":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:9381:196":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"17:12934:19011":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"5:5128:2594":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:10747:2527":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:40826:8252":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:12252:18496":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:13575:19747":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"20:1097:19898":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParser"],"kind":"struct"},"6:4483:12519":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:14076:19781":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:45726:2675":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"5:6798:8000":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"2:3223:237":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:11991:18478":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:4642:22245":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:44632:207":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:7541:20064":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:46003:2689":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:11111:15795":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"5:7365:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"16:4889:15138":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:10165:15655":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"2:10421:7920":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"20:3044:2027":{"crate_id":20,"path":["clap_builder","builder","arg","Arg"],"kind":"struct"},"16:7782:15487":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:46775:2725":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:14522:19813":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:40530:8240":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:9921:15644":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"11:2168:30535":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:8363:2475":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:3185:25102":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"5:1011:29104":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:43999:7936":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"16:2284:14445":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:3679:2442":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:13554:19745":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:8825:2576":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"20:4221:2031":{"crate_id":20,"path":["clap_builder","util","id","Id"],"kind":"struct"},"17:13148:19026":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:10106:20609":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"1:5786:2598":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:12033:378":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"17:14068:19780":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:4638:22241":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"5:1288:2238":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"16:2526:14483":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"5:4002:2227":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"20:62:2036":{"crate_id":20,"path":["clap_builder","derive","Subcommand"],"kind":"trait"},"16:3065:14504":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"6:1595:9958":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"20:3756:19907":{"crate_id":20,"path":["clap_builder","error","ErrorInner"],"kind":"struct"},"23:0:2011":{"crate_id":23,"path":["anstream"],"kind":"module"},"6:482:9051":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"6:4291:12500":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"6:6805:13658":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"11:1663:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:11098:15796":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"5:6558:2224":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"16:4921:15146":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"16:6569:15445":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:30525:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"17:12305:18500":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:2767:109":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:40440:2340":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"6:4949:12568":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:8947:2618":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:40480:2275":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"5:5839:2227":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:14499:19811":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"20:3984:19929":{"crate_id":20,"path":["clap_builder","parser","parser","ParseState"],"kind":"enum"},"11:1818:2222":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:9746:8406":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"16:4641:15058":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"6:6044:30038":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"20:2752:2222":{"crate_id":20,"path":["clap_builder","util","flat_map","Iter"],"kind":"struct"},"16:6467:15439":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:21832:2372":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:44435:8430":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"16:3764:14517":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:7663:2179":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"6:4695:12538":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:47225:2680":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"6:4716:12540":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:14469:19809":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:40303:8051":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"17:8825:15572":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"6:5836:13225":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"20:3435:19889":{"crate_id":20,"path":["clap_builder","builder","value_parser","OsStringValueParser"],"kind":"struct"},"5:3568:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"11:667:2230":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:10962:2571":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"2:7388:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:1681:9965":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"6:4315:12502":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:2927:8298":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:44451:8438":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"16:3915:14572":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:22645:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"16:5403:15398":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:11191:15603":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:11951:7932":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:9197:24725":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"6:6077:13242":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"6:6136:12417":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"26:0:2014":{"crate_id":26,"path":["colorchoice"],"kind":"module"},"1:4047:2464":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:43716:2398":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:46395:2751":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:4168:2490":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:39786:22562":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"16:7768:15486":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:4176:2491":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:11815:15840":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"2:10179:2222":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"11:1826:2227":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:8414:2555":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"6:7540:12745":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:41882:8379":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"20:4140:19910":{"crate_id":20,"path":["clap_builder","output","fmt","Colorizer"],"kind":"struct"},"2:22264:2453":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"20:0:1750":{"crate_id":20,"path":["clap_builder"],"kind":"module"},"2:12830:2252":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:21722:27804":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:3498:2227":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"1:1055:2238":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:4703:2525":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:4640:22243":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:40256:8057":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:9711:31237":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"6:4626:12533":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:1776:2284":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"20:1365:2035":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParserFactory","Parser"],"kind":"foreign_type"},"1:9002:20125":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:44305:7973":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"6:4685:12537":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:13802:19757":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"18:727:19850":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"5:3720:2263":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"16:2864:14497":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:946:2235":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:22238:2452":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"18:113:19829":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"17:9752:15590":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"20:3447:19885":{"crate_id":20,"path":["clap_builder","builder","value_parser","EnumValueParser"],"kind":"struct"},"6:6841:13661":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"20:3799:2029":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","ArgMatches"],"kind":"struct"},"1:11056:24528":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"5:2962:28079":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:3846:2447":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"11:2201:2220":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:8201:2395":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:2863:8286":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:10031:225":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"18:521:19852":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:11910:18474":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"9:0:1872":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:8765:15570":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:11367:15797":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"20:3303:19879":{"crate_id":20,"path":["clap_builder","builder","resettable","Resettable"],"kind":"enum"},"2:41071:8224":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:44168:7968":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:43674:7944":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"28:72:20026":{"crate_id":28,"path":["strsim","StrSimError"],"kind":"enum"},"1:7935:2263":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:2365:2348":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:3052:2277":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"17:13071:19021":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:6255:2610":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:11984:20554":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"2:44294:7972":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:44447:8434":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"6:6720:13653":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:562:9061":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"5:3800:2228":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"2:42506:7864":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"5:3735:2264":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"16:8167:15498":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:43784:7953":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:9158:2645":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:43970:2394":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"20:925:19878":{"crate_id":20,"path":["clap_builder","builder","resettable","IntoResettable"],"kind":"trait"},"17:12698:18997":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:48091:7828":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"16:3888:14569":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:2755:223":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"1:9115:221":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"22:128:19955":{"crate_id":22,"path":["clap_lex","ParsedArg"],"kind":"struct"},"18:609:31751":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:14090:19783":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:22843:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"17:582:15567":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"16:7708:15483":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:14110:19785":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:11151:15824":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:9277:15582":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"5:276:2076":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:8839:2577":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:3632:2224":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"11:644:2223":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:11535:15598":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"18:660:19845":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:3303:2415":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"5:1374:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:8562:2560":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"1:1928:670":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"5:3581:2222":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:6985:20139":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"6:4395:12351":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:44471:8450":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:1821:2267":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"5:4393:2383":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"6:4475:12518":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"20:4086:31804":{"crate_id":20,"path":["clap_builder","mkeymap","MKeyMap"],"kind":"struct"},"2:41899:212":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"1:10166:20073":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"1:4037:2463":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:4239:209":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"17:14324:19799":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:12001:24585":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"16:6361:15432":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:952:2236":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"5:3171:2222":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"5:1464:2225":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"16:3830:14535":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"16:6960:15458":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:5384:2567":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"17:11295:15829":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:1980:187":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:8010:24594":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"6:5877:13226":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"5:7253:200":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"5:2959:7848":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:46021:2695":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:47041:2697":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:11473:15595":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:5622:208":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"18:507:31736":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"5:7245:2224":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"16:7828:15489":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"5:7337:2220":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:9852:15615":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"2:44723:7846":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:46651:2713":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:13546:19744":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:41729:2440":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:21263:2372":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:9867:15616":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:2914:8295":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"16:6456:15438":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"23:371:19977":{"crate_id":23,"path":["anstream","adapter","wincon","WinconBytesIter"],"kind":"struct"},"6:4568:12529":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:7854:2363":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:40216:26583":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"16:5995:15419":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:46349:2696":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:22202:26590":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:43443:26549":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:14478:19810":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:22513:179":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"2:2817:106":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"17:13174:19028":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"11:793:2229":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:10265:15666":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:2888:8289":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:11573:15600":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"16:7284:2541":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"14:0:1876":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:21203:2372":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"22:0:2010":{"crate_id":22,"path":["clap_lex"],"kind":"module"},"18:96:19828":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:41815:2222":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:42851:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"17:13792:19756":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:10628:15728":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"6:5994:13235":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:11971:18477":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:41831:2224":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"20:3237:32063":{"crate_id":20,"path":["clap_builder","builder","ext","BoxedExtension"],"kind":"struct"},"17:13259:19034":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"16:7736:15485":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:12098:18485":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"18:590:26536":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"16:8134:15496":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:7350:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:13890:19764":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"16:5121:15202":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"16:8154:15497":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:8120:2366":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"20:66:2037":{"crate_id":20,"path":["clap_builder","derive","ValueEnum"],"kind":"trait"},"11:630:2222":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:21000:2664":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"17:13973:19771":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:11281:15819":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:22073:27350":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:10540:2415":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"1:12050:762":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"6:6671:10076":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"6:1557:9954":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:6152:2793":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:48159:7832":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:12196:18492":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"21:113:32187":{"crate_id":21,"path":["anstyle","effect","EffectsDisplay"],"kind":"struct"},"2:21364:2372":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"2:43270:7901":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:40204:8055":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"6:5775:13219":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"5:7396:26657":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:4007:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"1:3522:2370":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:4248:8022":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"21:210:19944":{"crate_id":21,"path":["anstyle","color","AnsiColor"],"kind":"enum"},"1:7644:2193":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"6:526:9056":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"11:1048:30538":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:8180:2371":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:11753:7925":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"6:6171:13271":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:40642:8249":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"5:4074:2223":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:2923:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"16:4613:15054":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:12750:19001":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:7125:2589":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:43702:2397":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"28:0:2016":{"crate_id":28,"path":["strsim"],"kind":"module"},"17:12172:18490":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"6:488:9052":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:13632:19749":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"6:6705:13651":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:2477:2372":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"16:7597:30613":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"16:7067:30661":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"6:4992:12573":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"16:7621:15479":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"20:3521:19884":{"crate_id":20,"path":["clap_builder","builder","value_parser","BoolishValueParser"],"kind":"struct"},"1:635:2200":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:8883:2616":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:2883:8288":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:923:2232":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"6:6726:13654":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"6:4638:12534":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"6:5955:13231":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:20809:27997":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:8168:2367":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"5:2970:28080":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"6:5863:13185":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:10214:15668":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:40367:26657":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"24:192:14306":{"crate_id":24,"path":["anstyle_parse","state","definitions","Action"],"kind":"enum"},"17:10738:15780":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:10811:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:1837:2032":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"11:1822:2224":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:47431:2714":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"16:6243:15425":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:2867:8285":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:46965:2685":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"6:1495:9946":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:481:24514":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"6:4506:12522":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"23:324:19971":{"crate_id":23,"path":["anstream","adapter","strip","StripBytesIter"],"kind":"struct"},"20:3871:32008":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","GroupedValues"],"kind":"struct"},"6:7586:12751":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"2:44024:2196":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"14:165:14399":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"6:5793:13220":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:46327:2690":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:11391:20307":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:14335:19800":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"16:5743:15410":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:0:1879":{"crate_id":17,"path":["object"],"kind":"module"},"1:12056:1540":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"1:8337:2526":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"22:28:2372":{"crate_id":22,"path":["clap_lex","ext","private","Sealed"],"kind":"trait"},"6:4770:12547":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:10139:15654":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"2:45750:2711":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"5:1257:2237":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"6:4787:12549":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:9488:31618":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"16:7694:15482":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"16:7436:15466":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"16:4417:15002":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"16:7342:30979":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"21:313:19947":{"crate_id":21,"path":["anstyle","effect","Effects"],"kind":"struct"},"17:9701:15589":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"18:564:19858":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:45920:2729":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:13055:19020":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:30703:26736":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"2:41604:2437":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:2381:2353":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:41891:195":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"5:7211:2227":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"5:7182:2260":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"6:5967:13232":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:13040:19019":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:2526:241":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"1:3504:2317":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"1:11385:22070":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:2845:8284":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"11:760:2228":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"16:5963:15417":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:10348:7926":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:2220:2344":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"11:2049:2238":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:48034:7823":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:2910:8294":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:10340:15669":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:11048:15809":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:9492:20605":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"17:13897:19765":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"23:158:2404":{"crate_id":23,"path":["anstream","is_terminal","IsTerminal"],"kind":"trait"},"2:44706:161":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:12997:19016":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:12711:18998":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:10432:2575":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:356:2191":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"20:2973:31830":{"crate_id":20,"path":["clap_builder","builder","app_settings","AppSettings"],"kind":"enum"},"17:3232:15739":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:12513:18986":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"6:5058:12579":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"23:389:32233":{"crate_id":23,"path":["anstream","adapter","wincon","WinconCapture"],"kind":"struct"},"1:904:2228":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:8471:2208":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:10534:15693":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"6:4748:12544":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"6:7558:12748":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"6:5799:13221":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:42384:2595":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"10:36:30511":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"16:2618:14487":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:2904:8293":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"20:3129:19904":{"crate_id":20,"path":["clap_builder","builder","arg_settings","ArgSettings"],"kind":"enum"},"2:9625:8079":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"23:457:19965":{"crate_id":23,"path":["anstream","strip","StripStream"],"kind":"struct"},"22:32:2398":{"crate_id":22,"path":["clap_lex","ext","Split"],"kind":"struct"},"2:40658:8250":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:11039:19950":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:414:165":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"10:0:1873":{"crate_id":10,"path":["adler"],"kind":"module"},"2:40195:8019":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:3389:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:40489:2395":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:8243:2443":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"6:4862:12559":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"5:1273:2239":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:7881:2362":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:8931:2615":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:12184:18491":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"25:23:14306":{"crate_id":25,"path":["utf8parse","types","Action"],"kind":"enum"},"6:4781:12548":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:42226:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:41755:183":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"6:4984:12572":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:10370:15663":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:5565:2572":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"5:2049:2264":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"16:5363:15396":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:9003:15578":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"11:2180:30526":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:11520:2445":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:4320:8028":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:20828:28002":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"16:149:14450":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"6:5051:12578":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"17:504:15566":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"20:3768:19908":{"crate_id":20,"path":["clap_builder","error","Message"],"kind":"enum"},"23:171:19963":{"crate_id":23,"path":["anstream","lockable","Lockable"],"kind":"trait"},"1:1761:624":{"crate_id":1,"path":["std","env"],"kind":"module"},"6:5882:13227":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"5:5954:2594":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:8248:2435":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"20:4031:19928":{"crate_id":20,"path":["clap_builder","parser","parser","PendingArg"],"kind":"struct"},"1:3513:25153":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:5398:2568":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"17:13693:19740":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"6:7546:12746":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:9790:31390":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:2834:8282":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"16:6687:15448":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:9812:26115":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"17:10292:15588":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"16:8294:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:12049:761":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"20:3219:31877":{"crate_id":20,"path":["clap_builder","builder","command","MaxTermWidth"],"kind":"struct"},"2:1756:8324":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:48007:2753":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:2168:8314":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"20:3489:19893":{"crate_id":20,"path":["clap_builder","builder","value_parser","RangedU64ValueParser"],"kind":"struct"},"1:0:1433":{"crate_id":1,"path":["std"],"kind":"module"},"17:9521:15585":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"16:5760:15411":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"16:2696:14490":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:44100:7964":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"16:8181:15499":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:43522:7909":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:10410:15683":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:44693:2792":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:2269:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:43686:7941":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"20:3470:19892":{"crate_id":20,"path":["clap_builder","builder","value_parser","RangedI64ValueParser"],"kind":"struct"},"2:2649:2320":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"1:12048:760":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"17:9445:15584":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:4421:8031":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:8473:2543":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"16:2832:14496":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"6:4489:12520":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"6:5890:13228":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:10646:15775":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:22810:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"2:48065:7826":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"18:80:19827":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:43990:7937":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"16:6318:15428":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"20:3266:2172":{"crate_id":20,"path":["clap_builder","builder","os_str","inner","Inner"],"kind":"struct"},"6:541:9058":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:44642:213":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"17:11507:15597":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:43494:7908":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:12280:18498":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:41046:8222":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"20:3288:19877":{"crate_id":20,"path":["clap_builder","builder","range","ValueRange"],"kind":"struct"},"16:6017:15420":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"5:7349:2221":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:43660:7947":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"5:3142:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"16:6531:15443":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:9844:26096":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:46297:2684":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:32293:22127":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:21133:2665":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"6:6565:9101":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:4801:2478":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"16:6560:30923":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"2:47931:2698":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"11:836:2235":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:2530:240":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"17:10240:15634":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:4003:2462":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:3983:26601":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:44008:7935":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:39333:8015":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"16:5088:15193":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:13010:19017":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"20:50:2033":{"crate_id":20,"path":["clap_builder","derive","CommandFactory"],"kind":"trait"},"20:3462:19891":{"crate_id":20,"path":["clap_builder","builder","value_parser","PossibleValuesParser"],"kind":"struct"},"17:14514:19812":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"5:5612:7998":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:21219:2655":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"6:5015:12575":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:39450:200":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"20:1679:22461":{"crate_id":20,"path":["clap_builder","error","format","Escape"],"kind":"struct"},"17:9607:15587":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"24:0:2012":{"crate_id":24,"path":["anstyle_parse"],"kind":"module"},"6:6036:13240":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"6:5025:12576":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:12024:18480":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:7441:2074":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:42187:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:43938:7952":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:12036:1560":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"1:2573:24516":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:41958:2224":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"20:3168:2025":{"crate_id":20,"path":["clap_builder","builder","command","Command"],"kind":"struct"},"2:8472:2544":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:11616:14431":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"6:4794:12550":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"20:4001:31874":{"crate_id":20,"path":["clap_builder","parser","parser","ParseResult"],"kind":"enum"},"1:9175:25641":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"2:2322:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"17:13685:19752":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:8341:2528":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"16:8072:15493":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:5131:193":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"17:11137:15793":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:6548:2605":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"20:4073:25641":{"crate_id":20,"path":["clap_builder","mkeymap","Key"],"kind":"struct"},"20:3962:19936":{"crate_id":20,"path":["clap_builder","parser","matches","value_source","ValueSource"],"kind":"enum"},"16:8050:15492":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"6:5080:12582":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:12621:18992":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"6:6688:10074":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:3253:26529":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"20:3514:19886":{"crate_id":20,"path":["clap_builder","builder","value_parser","FalseyValueParser"],"kind":"struct"},"2:41670:26613":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"2:3919:2383":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:13906:19766":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:7346:134":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:10603:15726":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"6:6820:13659":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:30509:8274":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"6:4664:12536":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"8:0:1871":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:7530:15567":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:1747:27303":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"17:13949:19769":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"6:5818:13223":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:10588:15725":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"1:1839:2301":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:586:2194":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"17:13723:19754":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:11062:15821":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:7065:2424":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"16:7544:15474":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"5:1118:28082":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"20:3381:2026":{"crate_id":20,"path":["clap_builder","builder","value_hint","ValueHint"],"kind":"enum"},"1:8319:2497":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:9829:24516":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:4500:2499":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"11:1538:14392":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:12054:1542":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"6:4678:2456":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:3268:7856":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:11381:15834":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:10537:2419":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"17:9912:15619":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:11337:15831":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"6:5074:12581":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:41967:185":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:48144:7831":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"21:282:19946":{"crate_id":21,"path":["anstyle","color","RgbColor"],"kind":"struct"},"2:48106:7829":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"21:305:28024":{"crate_id":21,"path":["anstyle","color","DisplayBuffer"],"kind":"struct"},"2:46548:26567":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:4743:2473":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:12052:1544":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"6:5068:12580":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:32405:8262":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:10278:15665":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:4392:2488":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:10475:24529":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:40590:8254":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"16:5648:15404":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"2:41564:155":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"2:43036:145":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:10849:24462":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:12039:317":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"17:11086:15823":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"20:3247:186":{"crate_id":20,"path":["clap_builder","builder","os_str","OsStr"],"kind":"struct"},"2:43734:7919":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:8995:2172":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"17:12484:15783":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"5:1672:29104":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"5:1523:2262":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:44523:8451":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"5:1426:2223":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:32257:2579":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"16:6915:15456":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:2777:2183":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"16:3797:14526":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"5:7382:2324":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:44137:7966":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"15:288:14422":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:5636:2611":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"27:0:2015":{"crate_id":27,"path":["anstyle_query"],"kind":"module"},"2:45850:2712":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:47075:2746":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"5:6930:29100":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:5418:2569":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:4374:8030":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"17:10397:15717":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"5:6788:7999":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"16:2810:14495":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:13778:15633":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:12533:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:9998:15626":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:11393:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"6:7609:14222":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:39538:205":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:9945:15634":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:6649:219":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:7600:24512":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:22231:27742":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:2993:2070":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"20:3589:27301":{"crate_id":20,"path":["clap_builder","builder","debug_asserts","Flag"],"kind":"enum"},"18:681:19847":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:9379:7874":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:3419:2383":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:22165:26572":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"6:6589:8935":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:11351:15832":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"17:12911:19010":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"6:5920:13230":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:4:1035":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"1:10789:20570":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"16:7884:15491":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:42774:110":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"17:9372:15583":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"20:3338:19874":{"crate_id":20,"path":["clap_builder","builder","str","Str"],"kind":"struct"},"16:7503:15470":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:4240:2493":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:47011:2691":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"16:2359:14476":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:11316:2582":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:44490:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"18:582:8069":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"0:0:1760":{"crate_id":0,"path":["clap"],"kind":"module"},"2:48080:7827":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"6:5979:13233":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:13876:19763":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"11:736:2226":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1:7135:22067":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"16:2450:14480":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:9287:2032":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"1:2921:212":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"2:9067:27348":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:11456:20596":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:11934:18475":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"20:3881:32009":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Occurrences"],"kind":"struct"},"1:894:2227":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:6436:2601":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:8794:15571":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:11819:24057":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:21951:26085":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"14:40:18475":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"16:6929:15457":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:8005:25661":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:12778:19003":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:11702:8441":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:21834:2658":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"6:6008:13236":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"5:6637:29104":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:10801:2365":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"16:5696:15407":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"6:1520:9950":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:4051:2465":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"21:0:2009":{"crate_id":21,"path":["anstyle"],"kind":"module"},"2:2765:229":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"5:3178:2244":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"6:4463:12516":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:10714:15778":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:43532:7910":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"5:1482:2229":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"9:330:14323":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:11719:15606":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:9660:31600":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"6:6744:13655":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:6545:2604":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:3034:7858":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:10256:2581":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"5:2223:29231":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:47969:2732":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:42520:7873":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:11358:15833":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"16:7041:30916":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:13868:19762":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:13826:19759":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:11642:8442":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:50027:2673":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"14:31:14398":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:502:2168":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"17:12007:18479":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:2211:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:9375:7864":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:43920:7951":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:2982:2259":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"6:4872:12560":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:9886:15617":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"6:6022:13238":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:8015:2411":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"5:4164:2383":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"17:13922:19768":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:1565:2228":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"16:6261:15426":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:5503:2571":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"17:11742:15607":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:3441:15744":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"5:6485:29104":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:12437:18983":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:14056:19779":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"6:4436:12513":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:42802:71":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"2:22579:177":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:8546:2559":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"9:486:14266":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:13422:19741":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"11:723:2225":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:5752:2596":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:2391:2358":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"16:7568:15476":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:7919:25644":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:11244:15602":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"16:6901:15455":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"5:3669:29104":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"5:782:2247":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:3305:7857":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:10980:15588":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:21265:2657":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:10112:15652":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:30279:2449":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:10036:15632":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:6303:208":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:7927:2409":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:11310:24590":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:11389:15592":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"20:1655:19916":{"crate_id":20,"path":["clap_builder","error","format","KindFormatter"],"kind":"struct"},"6:6598:13648":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:43543:7900":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:21397:2660":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:41052:2425":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"6:1663:9963":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:42513:7865":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"6:532:9057":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:40246:8056":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:13085:19022":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:940:2234":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"17:13667:19750":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"9:177:14372":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:643:2202":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:43251:8423":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"20:1172:19896":{"crate_id":20,"path":["clap_builder","builder","value_parser","TypedValueParser"],"kind":"trait"},"16:2472:14481":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:6432:2600":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:13202:19030":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"20:4188:31753":{"crate_id":20,"path":["clap_builder","util","flat_set","FlatSet"],"kind":"struct"},"1:3305:2416":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:5517:8243":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:11479:2446":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:10776:2361":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"17:12154:18489":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"5:4363:29110":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:46151:2718":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:11161:2577":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:40317:8053":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:2635:2410":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:9531:31608":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"16:3049:14503":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:43595:7915":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:42527:7874":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:10023:15589":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:7309:8229":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:12123:18487":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:1041:2237":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:43604:7918":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:46729:2719":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:39372:7859":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"17:10672:15777":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"5:7231:29250":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:881:2226":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"6:4606:12531":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:919:2231":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:12040:1411":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"11:1103:14389":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:8297:2496":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"23:63:19983":{"crate_id":23,"path":["anstream","adapter","strip","VtUtf8Receiver"],"kind":"struct"},"1:11373:20044":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"5:5362:7891":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"6:4518:12523":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:5085:25662":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"20:3271:19876":{"crate_id":20,"path":["clap_builder","builder","possible_value","PossibleValue"],"kind":"struct"},"11:0:1874":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"2:11942:7930":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"5:1302:2240":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:22125:26653":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"18:624:31740":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"16:2548:14484":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:13228:19032":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:261:31606":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"6:1536:9952":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:2250:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"20:3357:2172":{"crate_id":20,"path":["clap_builder","builder","str","inner","Inner"],"kind":"struct"},"24:113:19988":{"crate_id":24,"path":["anstyle_parse","params","Params"],"kind":"struct"},"2:39474:201":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:12047:763":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"1:7859:2364":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:46251:2678":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:3191:25813":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:9480:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"16:7722:15484":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:3150:2279":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"16:6332:15429":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"5:676:234":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"16:5634:15403":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:14378:19803":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:6821:8238":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"24:304:19986":{"crate_id":24,"path":["anstyle_parse","Utf8Parser"],"kind":"struct"},"21:334:19948":{"crate_id":21,"path":["anstyle","effect","EffectIter"],"kind":"struct"},"6:4917:12564":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:11218:20426":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"2:3995:26538":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:12038:1073":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:4243:8021":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"13:226:30585":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"6:4428:12512":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"16:7360:30970":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:12006:2207":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:11407:15593":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"16:2644:14488":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:47761:2692":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"16:2907:14499":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:12576:18990":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"6:6648:10091":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:12465:15784":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"16:5866:15414":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:2922:8297":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:5575:8233":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"6:4754:12545":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"6:7564:12749":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:11343:20449":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:9780:15591":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"6:1709:9968":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"6:6868:13663":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"16:7660:15481":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:40572:8244":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:41693:2448":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"5:7191:2224":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"16:4557:15046":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"16:8097:15494":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"20:2957:31781":{"crate_id":20,"path":["clap_builder","builder","app_settings","AppFlags"],"kind":"struct"},"1:4478:2498":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"17:14355:19802":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:5976:8255":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:2317:190":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:8303:2487":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:2829:2648":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"20:4154:31941":{"crate_id":20,"path":["clap_builder","util","any_value","AnyValueId"],"kind":"struct"},"6:500:9054":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"16:5588:15401":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"6:7599:14221":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"5:0:291":{"crate_id":5,"path":["alloc"],"kind":"module"},"6:4740:12543":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"5:6079:2383":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:31073:185":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:2156:601":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"11:1501:14390":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:5369:2383":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"17:14024:19776":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:2216:2343":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1:10992:2578":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"6:1631:9960":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"18:599:31735":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"5:4234:2222":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:8292:2495":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:6160:27744":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"2:2517:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"5:2461:28072":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"23:342:19986":{"crate_id":23,"path":["anstream","adapter","strip","Utf8Parser"],"kind":"struct"},"17:13838:19760":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:40460:7898":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:8573:2561":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"16:2504:14482":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"6:4908:12563":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:40268:7946":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"6:7517:12742":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"20:3538:19887":{"crate_id":20,"path":["clap_builder","builder","value_parser","MapValueParser"],"kind":"struct"},"16:7862:15490":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:22777:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"17:10520:15722":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"6:4341:12504":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"6:7552:12747":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"9:393:14268":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:12267:18497":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:9350:15550":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:12554:18989":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:10916:15740":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"20:1701:128":{"crate_id":20,"path":["clap_builder","error","Error"],"kind":"struct"},"1:7766:2304":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:9385:7872":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:21186:2661":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"16:7318:15464":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:7359:2075":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"23:405:2556":{"crate_id":23,"path":["anstream","adapter","wincon","State"],"kind":"enum"},"17:12737:19000":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:5977:2610":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:20781:27801":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"2:22678:180":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:8894:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"20:58:2032":{"crate_id":20,"path":["clap_builder","derive","Args"],"kind":"trait"},"24:255:2035":{"crate_id":24,"path":["anstyle_parse","Parser"],"kind":"struct"},"16:4774:15119":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"5:685:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"11:695:2231":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:10766:22222":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"17:14173:19792":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"6:4616:12532":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"23:254:19972":{"crate_id":23,"path":["anstream","adapter","strip","StripStr"],"kind":"struct"},"17:11710:15605":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:9051:15549":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:10831:2367":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"16:7523:15472":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"20:35:2035":{"crate_id":20,"path":["clap_builder","derive","Parser"],"kind":"trait"},"20:3899:32006":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrencesRef"],"kind":"struct"},"1:8211:2396":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"11:1838:2243":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"6:6618:13650":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:12422:18982":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"16:8115:15495":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"20:3113:19903":{"crate_id":20,"path":["clap_builder","builder","arg_settings","ArgFlags"],"kind":"struct"},"5:2960:28076":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"6:4955:12569":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:44015:7945":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:9070:15398":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"5:3238:2246":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:5993:208":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:7379:24595":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"16:6696:14417":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:2178:15664":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"21:382:19951":{"crate_id":21,"path":["anstyle","style","Style"],"kind":"struct"},"16:5798:15412":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"20:4064:32067":{"crate_id":20,"path":["clap_builder","parser","validator","Conflicts"],"kind":"struct"},"1:10327:2025":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"25:0:2013":{"crate_id":25,"path":["utf8parse"],"kind":"module"},"2:1630:600":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"6:5900:13229":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:26133:250":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:3003:2073":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"5:2131:2168":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:12658:18994":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"5:5318:29104":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:9032:24599":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:6076:24534":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"21:347:19949":{"crate_id":21,"path":["anstyle","effect","EffectIndexIter"],"kind":"struct"},"2:42811:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:21100:2670":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"18:755:19851":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"5:207:7863":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:11000:15745":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"6:4963:12570":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:4895:12562":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:9341:132":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"20:1660:19919":{"crate_id":20,"path":["clap_builder","error","format","RichFormatter"],"kind":"struct"},"6:4704:12539":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:40430:2341":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:43048:2556":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"20:3531:19888":{"crate_id":20,"path":["clap_builder","builder","value_parser","NonEmptyStringValueParser"],"kind":"struct"},"16:5661:15405":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:4796:814":{"crate_id":2,"path":["core","iter"],"kind":"module"},"1:2559:2408":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"6:1500:9947":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:40511:8232":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:14083:19782":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"18:652:31736":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"16:4745:15114":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:40623:8247":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:48129:7830":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:10476:7921":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:42756:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"7:0:1589":{"crate_id":7,"path":["unwind"],"kind":"module"},"11:1121:2240":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:32297:15502":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"17:9650:15588":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:44467:8432":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:40291:8050":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:8807:2575":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:4098:8033":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:11237:2620":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"2:40581:8245":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"6:4842:12556":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:21388:2372":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:10962:15738":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:9823:15614":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"6:4810:12552":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:12945:19012":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"14:187:14406":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"6:6607:13649":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:11597:7840":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"21:127:32188":{"crate_id":21,"path":["anstyle","reset","ResetDisplay"],"kind":"struct"},"17:10494:15694":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"6:6028:13239":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"16:7513:15471":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"5:4985:2383":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"20:3676:19918":{"crate_id":20,"path":["clap_builder","error","context","ContextValue"],"kind":"enum"},"6:4389:12508":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:8396:2537":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:11623:14431":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"5:2170:29212":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"16:7269:30972":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"6:6625:2528":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"18:644:31736":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:3000:2072":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"6:6015:13237":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:44328:7955":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:4129:8034":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"5:35:2280":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"11:285:30512":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"5:5923:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"20:3574:19881":{"crate_id":20,"path":["clap_builder","builder","value_parser","_AutoValueParser"],"kind":"struct"},"1:8148:2424":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:4059:2467":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:2766:228":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"6:4328:12503":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:40232:8054":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"5:5769:235":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:2595:2400":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"16:2406:14478":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:2247:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"1:6200:24612":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"17:12543:18988":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:9137:15554":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:8869:2619":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:2213:2342":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:45981:2683":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:11022:7914":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"17:9896:15618":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"23:285:19974":{"crate_id":23,"path":["anstream","adapter","strip","StrippedBytes"],"kind":"struct"},"2:11962:7929":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"6:6850:13662":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:14118:19786":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"16:6083:14444":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:11162:15789":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"17:9390:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"2:22186:26541":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"11:1611:30523":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:11687:15604":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:39592:8301":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"5:778:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:40383:2325":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:8311:2444":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:20826:28000":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"15:306:14423":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:14434:19806":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"20:3951:19925":{"crate_id":20,"path":["clap_builder","parser","matches","matched_arg","MatchedArg"],"kind":"struct"},"2:46470:26669":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:48182:7833":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:8902:2614":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:7809:8227":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"9:357:14283":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:9331:2317":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"20:4046:19927":{"crate_id":20,"path":["clap_builder","parser","parser","Identifier"],"kind":"enum"},"18:0:1880":{"crate_id":18,"path":["memchr"],"kind":"module"},"18:515:19855":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"16:5017:15170":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"6:5008:12574":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"20:4148:32070":{"crate_id":20,"path":["clap_builder","util","any_value","AnyValue"],"kind":"struct"},"16:4527:15040":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:362:2192":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"9:426:14269":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"5:7221:2251":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:10420:15718":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"17:13101:19023":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:30597:26738":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"2:2855:2647":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:13188:19029":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:7894:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"20:53:2034":{"crate_id":20,"path":["clap_builder","derive","FromArgMatches"],"kind":"trait"},"2:1733:8325":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:3741:2446":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:12046:659":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"17:9086:15399":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:9242:15581":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:724:142":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:12058:1599":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"1:9080:20442":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:2839:8281":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"17:10383:15662":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"16:6279:15427":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"16:7090:30953":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"6:4543:12526":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:10430:15719":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"17:13215:19031":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"6:1702:2484":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:43512:7911":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"11:986:2238":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:21014:8313":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"20:3551:19895":{"crate_id":20,"path":["clap_builder","builder","value_parser","TryMapValueParser"],"kind":"struct"},"5:4194:2383":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"2:30503:7994":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"18:766:19844":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:2918:8296":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:42031:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:11490:15596":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:10661:15776":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:40276:2196":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"6:4973:12571":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"16:7102:15462":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"16:6226:15424":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:1582:2245":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:10087:2295":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"2:43066:26591":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:11679:8444":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"16:5712:15408":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"6:1545:9953":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:8487:2557":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"16:2574:14485":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:8813:188":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"20:3779:2198":{"crate_id":20,"path":["clap_builder","error","Backtrace"],"kind":"struct"},"16:6499:15441":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"6:653:9113":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:2898:8292":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"6:6796:13657":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"22:112:19954":{"crate_id":22,"path":["clap_lex","ArgCursor"],"kind":"struct"},"1:12035:427":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:44280:7971":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:8157:2426":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"17:10456:15690":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:11541:2447":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:9105:167":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"16:5673:15406":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:11063:7906":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"20:3932:32007":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawOccurrenceValues"],"kind":"struct"},"2:21147:8313":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"2:22089:26574":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:13966:19770":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:12582:194":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:20796:27801":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"2:43766:7954":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:3945:2457":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:47573:2686":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:14001:19774":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:21369:2656":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"5:1514:200":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:44348:7956":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"20:3627:19917":{"crate_id":20,"path":["clap_builder","error","context","ContextKind"],"kind":"enum"},"3:234:212":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:4394:2182":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"20:3890:32004":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrenceValues"],"kind":"struct"},"1:8237:2444":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:43266:26336":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:10021:2372":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"11:657:2224":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:11937:7934":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:12045:657":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:46181:2724":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"6:4800:12551":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"16:3461:14507":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:8231:2394":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:40672:8251":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:20962:2372":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"5:261:29104":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:6168:24525":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"5:6886:247":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"20:3097:19875":{"crate_id":20,"path":["clap_builder","builder","arg_predicate","ArgPredicate"],"kind":"enum"},"2:40682:8236":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"22:157:19956":{"crate_id":22,"path":["clap_lex","ShortFlags"],"kind":"struct"},"16:5830:15413":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:9172:15579":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:11617:15602":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"16:6844:15453":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"7:79:14245":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:9972:15628":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:1576:2244":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"6:4446:12514":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"20:3229:32061":{"crate_id":20,"path":["clap_builder","builder","ext","Extensions"],"kind":"struct"},"2:22113:2450":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"11:844:2236":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"16:2305:14473":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"2:41621:2438":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"6:7278:14033":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"11:1858:2246":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"16:7015:15461":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:7770:22127":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"17:8953:15576":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"6:4380:12507":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:40812:2396":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:21271:2659":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:48054:7825":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"6:4944:12567":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:1561:2227":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:44455:8436":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"22:98:19953":{"crate_id":22,"path":["clap_lex","RawArgs"],"kind":"struct"},"2:6916:8218":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"18:719:19842":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"5:895:2222":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"6:547:9059":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:21285:2660":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:14013:19775":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"20:4241:2030":{"crate_id":20,"path":["clap_builder","util","color","ColorChoice"],"kind":"enum"},"2:22140:26603":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"16:6753:15450":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"6:5767:13218":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"20:4160:8243":{"crate_id":20,"path":["clap_builder","util","flat_map","FlatMap"],"kind":"struct"},"6:6711:13652":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:12830:19006":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"16:7534:15473":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:13162:19027":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"6:123:8734":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"25:89:2035":{"crate_id":25,"path":["utf8parse","Parser"],"kind":"struct"},"9:52:14286":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:48025:7822":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:2406:1887":{"crate_id":1,"path":["std","io"],"kind":"module"},"16:6742:14416":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:9630:8080":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:22744:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:39494:204":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"11:1845:2244":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:8926:15575":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"16:5816:30609":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:2608:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"1:10580:2178":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"1:9059:20579":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"5:3217:29631":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"5:7199:2250":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"20:3441:19890":{"crate_id":20,"path":["clap_builder","builder","value_parser","PathBufValueParser"],"kind":"struct"},"16:5574:15400":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"24:89:19981":{"crate_id":24,"path":["anstyle_parse","CharAccumulator"],"kind":"trait"},"17:13451:19742":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:10771:24709":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"16:6041:15421":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:10949:2304":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"16:4949:15150":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:12111:18486":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"16:2380:14477":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"16:7391:15465":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:8504:2558":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"16:0:1878":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:1554:2222":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"10:44:14377":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"6:4848:12557":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:4824:2472":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"6:1911:10133":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"16:3600:14508":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:39599:8003":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"17:14033:19777":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:4572:2516":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:10974:20552":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:4590:8043":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"6:6130:13269":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:7689:2178":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:9383:7871":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:1892:2315":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:12607:8077":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:12520:136":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:3744:2445":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:12724:18999":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:46419:2752":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:9045:15463":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"17:11951:18476":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:915:2230":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:47885:2747":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:8915:2617":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:41806:8304":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"17:14126:19787":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"6:4413:12510":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:8464:2556":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"16:6189:31017":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:5434:2570":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"11:1831:2228":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"2:42306:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:31101:8069":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"11:2033:2237":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:46203:2730":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:41079:8226":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"18:707:7932":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"20:3816:19926":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","SubCommand"],"kind":"struct"},"6:7463:14193":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"23:440:19962":{"crate_id":23,"path":["anstream","auto","AutoStream"],"kind":"struct"},"18:690:19848":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"23:425:19966":{"crate_id":23,"path":["anstream","buffer","Buffer"],"kind":"struct"},"19:0:1053":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"17:12373:18981":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"20:744:32069":{"crate_id":20,"path":["clap_builder","builder","ext","Extension"],"kind":"trait"},"6:4854:12558":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"16:7054:31007":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:6816:2651":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"6:7272:14032":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"11:968:2237":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"9:450:14267":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"16:6415:15436":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:12888:19009":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:3565:15762":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"17:13611:19748":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:5054:25662":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:42109:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:21710:2652":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:7668:2181":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"17:10126:15653":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"16:4719:15112":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"6:4456:12515":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"5:1492:2230":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:44315:7974":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"24:132:2556":{"crate_id":24,"path":["anstyle_parse","state","definitions","State"],"kind":"enum"},"16:4986:15163":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:41587:2436":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:6732:8230":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:11124:15794":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"6:573:9063":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:7738:2241":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"5:2243:29203":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:22612:178":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:8877:2224":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:929:2233":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"17:11586:15601":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"18:491:31743":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:14163:19791":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:1587:2246":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:10203:2223":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"6:4723:12541":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"16:7474:15468":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:8579:7930":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:48221:7834":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"6:5849:13184":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:32318:8351":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"16:6386:15434":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:837:2222":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:14308:19797":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:2150:15705":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:9762:31552":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:7743:2242":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"17:14156:19790":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:43866:7949":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"18:481:19853":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"20:3861:19933":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawValues"],"kind":"struct"},"2:22004:26053":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"6:7250:9011":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"12:0:1875":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:22711:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"17:13487:19743":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:9574:31664":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"21:173:32186":{"crate_id":21,"path":["anstyle","style","StyleDisplay"],"kind":"struct"},"2:48045:7824":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"5:1102:28090":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"20:3707:2411":{"crate_id":20,"path":["clap_builder","error","kind","ErrorKind"],"kind":"enum"},"6:579:9064":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:2820:8261":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"17:14100:19784":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:40601:8246":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"16:5322:15379":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"6:4929:12565":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:2363:2347":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:5311:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:10821:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"16:5982:15418":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"6:1690:9966":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"6:5987:13234":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"16:6944:30828":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:12163:112":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"23:231:19975":{"crate_id":23,"path":["anstream","adapter","strip","StrippedStr"],"kind":"struct"},"2:10490:7924":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:10989:7913":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"11:1517:14391":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:12671:18995":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"16:5612:15402":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:11261:15818":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:2359:191":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:3240:8016":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:20811:27999":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:5457:2383":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"2:40189:2196":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:32304:26558":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"2:2893:8290":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"16:5939:15416":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:12790:19004":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"26:41:19998":{"crate_id":26,"path":["colorchoice","AtomicChoice"],"kind":"struct"},"16:4497:15034":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:12055:1543":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"17:8978:15577":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:619:2198":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:11448:15594":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"6:4374:12506":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:43692:7940":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:10903:15742":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:1184:15639":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"6:4879:1022":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:12053:1541":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:3213:8300":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:11718:8443":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:14346:19801":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"6:4938:12566":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"23:268:19973":{"crate_id":23,"path":["anstream","adapter","strip","StripStrIter"],"kind":"struct"},"2:40350:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"11:2060:2239":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:11845:15841":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"20:4101:31757":{"crate_id":20,"path":["clap_builder","mkeymap","KeyType"],"kind":"enum"},"17:12846:19007":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:11886:18473":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:11074:15822":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"16:7582:15477":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"6:1569:9955":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:10788:15781":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:9983:20393":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"2:11467:8393":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:43011:8082":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"16:7792:15488":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"3:0:452":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:39560:2214":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"17:9617:31483":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:44735:7844":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:40633:8248":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:43838:7921":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:40840:8253":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:32311:8028":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"18:614:31731":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"16:4053:14686":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"16:7613:15478":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"21:261:19945":{"crate_id":21,"path":["anstyle","color","Ansi256Color"],"kind":"struct"},"1:531:2173":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:42070:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"13:0:1869":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:44748:26618":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"14:221:14408":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:9328:2397":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:6615:2609":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"21:182:19943":{"crate_id":21,"path":["anstyle","color","Color"],"kind":"enum"},"2:1918:7860":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"6:4587:12530":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:4310:8027":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"11:1068:14388":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"20:3838:2226":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Values"],"kind":"struct"},"13:110:30584":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"6:4764:12546":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"16:6485:15440":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"5:7529:2228":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"6:595:9066":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:12017:20567":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:40558:26247":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"16:6879:15454":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:13567:19746":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:14134:19788":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:41037:2600":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:8594:15551":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:45880:2717":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"20:3783:19924":{"crate_id":20,"path":["clap_builder","parser","arg_matcher","ArgMatcher"],"kind":"struct"},"1:4628:2462":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:40284:7945":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:12208:18493":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:12057:808":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"17:14269:19794":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:3939:2458":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:42265:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:12738:2793":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"6:7505:12740":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:4160:2489":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:41840:2541":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"16:7651:15480":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:7497:159":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:21395:2666":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"16:4585:15050":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"20:3911:32005":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrenceValuesRef"],"kind":"struct"},"1:7732:2206":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"16:2428:14479":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:22057:26614":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"21:360:19950":{"crate_id":21,"path":["anstyle","reset","Reset"],"kind":"struct"},"6:5805:13222":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:41992:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:9139:2376":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"1:11173:24466":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"20:1653:19915":{"crate_id":20,"path":["clap_builder","error","format","ErrorFormatter"],"kind":"trait"},"6:1717:9969":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"6:4550:12527":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"16:3032:14502":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:10108:25663":{"crate_id":1,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"17:12810:19005":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"23:309:19970":{"crate_id":23,"path":["anstream","adapter","strip","StripBytes"],"kind":"struct"},"1:8556:2222":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:9371:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:4365:8029":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"6:1527:9951":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"16:2766:14493":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:11957:7931":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:6869:26406":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"7:32:14238":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:10616:15727":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"5:4846:206":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"16:2670:14489":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:47823:2726":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:9487:2364":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"2:7805:2256":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:868:2225":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:40397:2327":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"18:736:19843":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"5:7282:2224":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"6:4556:12528":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"5:2966:28081":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:44463:8431":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"6:4368:12505":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:13298:19036":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"11:1852:2245":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:2886:20607":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:1544:2383":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"6:5737:13156":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"6:568:9062":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:9110:220":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"15:327:14427":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"16:6268:30977":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"5:7463:7976":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:12876:19008":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"20:3362:19880":{"crate_id":20,"path":["clap_builder","builder","styled_str","StyledStr"],"kind":"struct"},"1:11293:24531":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"18:574:31736":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:44650:197":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"1:5243:192":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"23:190:2372":{"crate_id":23,"path":["anstream","raw","private","Sealed"],"kind":"trait"},"5:1503:2231":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:12555:26220":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:42786:27301":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:11050:24527":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"16:6513:15442":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:43582:7899":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"16:8281:15503":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:0:507":{"crate_id":2,"path":["core"],"kind":"module"},"17:10698:15757":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"5:3330:2228":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"17:12598:18991":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:44685:2791":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:7750:2303":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"17:14420:19805":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"16:2788:14494":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"5:4032:29104":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"23:182:19964":{"crate_id":23,"path":["anstream","raw","RawStream"],"kind":"trait"},"2:10310:7912":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:1814:2295":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:4967:2533":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"17:12225:18494":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:10197:15682":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"11:749:2227":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"16:4835:15132":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"5:7474:7977":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:6472:2607":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:10478:15716":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:9037:24588":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"5:3594:2223":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:8285:2439":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"6:554:9060":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"16:6721:15449":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:21618:2671":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"2:2523:133":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"17:2012:15670":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:22252:2451":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:10953:20138":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"11:2194:30533":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:7313:8228":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:3226:2418":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"14:202:7975":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:2379:2352":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"17:10186:15656":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"1:5831:2209":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:20768:8069":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:10059:15630":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"20:2933:2024":{"crate_id":20,"path":["clap_builder","builder","action","ArgAction"],"kind":"enum"},"2:41873:2542":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:1983:186":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"16:7128:15463":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:43820:7923":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"16:2933:14500":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"6:1673:9964":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"6:506:9055":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"26:21:2030":{"crate_id":26,"path":["colorchoice","ColorChoice"],"kind":"enum"},"5:5366:7892":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:11200:2376":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:12034:957":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"17:13710:19753":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:2969:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:42148:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:10440:15720":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"16:6600:15447":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"16:6376:15433":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"16:2339:14475":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"9:237:2556":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:1075:15631":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:6601:2608":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"17:14145:19789":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:21613:2663":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"17:12645:18993":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"6:1733:9970":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:11761:15608":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"23:356:19976":{"crate_id":23,"path":["anstream","adapter","wincon","WinconBytes"],"kind":"struct"},"6:6775:13656":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:41823:2223":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"5:2690:29076":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:4030:7853":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"28:32:20012":{"crate_id":28,"path":["strsim","StringWrapper"],"kind":"struct"},"17:11788:15839":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"6:4469:12517":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:3391:2425":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:22148:26560":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:638:2201":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:13274:15605":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:12074:18483":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"5:6306:2795":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:6363:166":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"11:2174:26946":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:11358:20440":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:41950:2223":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"17:11639:15603":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:2812:2069":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"17:10726:15779":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:2851:8283":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:13113:19024":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:10012:15588":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:2496:2407":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"6:6573:9906":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:12765:19002":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:39516:203":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:850:2223":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:4747:2477":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:1778:2285":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"6:7511:12741":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:9207:15580":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:13981:19772":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:39613:8012":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"5:1442:2224":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:10685:15735":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"6:5044:12577":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"15:394:14434":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"17:10750:15736":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:9366:112":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"6:4401:12509":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:13244:19033":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:2166:8313":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"2:10462:7923":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"16:7462:15467":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"6:4824:12554":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:42829:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:30469:2258":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"6:119:8733":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"17:11547:15599":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:45951:2677":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:4189:2492":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:10468:15721":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"6:4420:12511":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:2997:2071":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:10383:7919":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"20:2774:2223":{"crate_id":20,"path":["clap_builder","util","flat_map","IterMut"],"kind":"struct"},"5:6769:7998":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"5:3183:29637":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"5:7449:227":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"16:5435:30982":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:256:31414":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:2763:7855":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"1:10534:2417":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"6:1575:9956":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"16:6425:15437":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"18:636:31741":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:45706:2710":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:46373:2745":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:12042:1525":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:41023:8220":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"18:531:19856":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:40549:8242":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"6:7523:12743":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"6:4833:12555":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:9959:15629":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:12008:7958":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:46517:26559":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:8861:2222":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:39434:202":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:2762:2068":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"1:4745:2476":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:11272:15828":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"6:4304:12501":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:10547:15723":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:40540:8241":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:43614:7916":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"5:7438:7886":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"17:14448:19807":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"6:4729:12542":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:8218:2397":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"1:12060:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:7643:2372":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"15:0:1877":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:860:2224":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:13024:19018":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:9025:25635":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:12685:18996":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:8686:15568":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"5:1473:2226":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:14296:19796":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:44151:7967":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"11:403:30527":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"25:53:2556":{"crate_id":25,"path":["utf8parse","types","State"],"kind":"enum"},"17:12959:19013":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:4749:396":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"20:4124:19911":{"crate_id":20,"path":["clap_builder","output","fmt","Stream"],"kind":"enum"},"16:2881:14498":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:2824:2646":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"18:699:19849":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:10228:2398":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"1:4706:2498":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:5759:2597":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"16:2969:14501":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:7802:2253":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:10507:15692":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:1667:1111":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"5:822:2248":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"17:12496:18985":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"11:119:30517":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:41061:8223":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"18:538:19857":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"16:3315:14506":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"1:3115:2427":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"2:2871:8287":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"16:5419:15399":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"20:3209:31875":{"crate_id":20,"path":["clap_builder","builder","command","TermWidth"],"kind":"struct"},"5:7261:28062":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:11147:2576":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:21:698":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"16:8239:15502":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"16:6204:15423":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"20:3923:32003":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawOccurrences"],"kind":"struct"},"16:6346:15430":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"14:160:14398":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:9377:7873":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:1073:2240":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:13914:19767":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:46058:2750":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:12136:18488":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:11226:15826":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:11023:15743":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:46571:26654":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"6:7295:14034":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"11:332:30518":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"20:3615:19906":{"crate_id":20,"path":["clap_builder","builder","styling","Styles"],"kind":"struct"},"2:44243:7970":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:12727:107":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:42345:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"6:4887:12561":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"2:3056:2278":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:41650:27305":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:3465:2368":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:10840:24468":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"11:798:2232":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:9102:15553":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:40336:8049":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"16:7492:15469":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:11483:8395":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:4320:2494":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"16:6583:15446":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"16:4806:15127":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"16:2744:14492":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:434:14447":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:13758:19739":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"16:5049:15178":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"6:62:8679":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:2597:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"16:7006:15460":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:3266:2420":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:3997:2461":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:21056:2669":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"1:1558:2224":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"16:4862:15135":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"4:0:1870":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"16:5727:15409":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"5:7290:2224":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"5:3212:2243":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:45818:2682":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"5:4426:29110":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:10084:15625":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"6:4496:12521":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"16:6171:196":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"24:290:19985":{"crate_id":24,"path":["anstyle_parse","AsciiParser"],"kind":"struct"},"17:11173:15825":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"16:6818:15452":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:6165:19966":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"2:9590:145":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:46805:2731":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:12531:18987":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"6:6834:13660":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"5:6955:29106":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"6:474:9050":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:11215:15792":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"16:536:30618":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"11:1027:14387":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:44511:2650":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:44443:8435":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:9985:15627":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"11:399:30525":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:9062:28026":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:22876:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:44459:8437":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:7717:2205":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:9120:2620":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"1:910:2229":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:14042:19778":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:13135:19025":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:12086:18484":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:11306:15605":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"2:9582:141":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:44033:7946":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:11872:15842":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:8970:2599":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"5:3204:2245":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:10504:7922":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"6:1638:9961":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"20:3242:32047":{"crate_id":20,"path":["clap_builder","builder","ext","BoxedEntry"],"kind":"struct"},"11:805:2233":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:10366:15676":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"16:4344:14953":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:11661:15552":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:41741:2441":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"17:10316:15671":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:1921:2316":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"6:1513:9949":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:43980:7948":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:8899:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"5:7425:2323":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:10271:7925":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"24:26:19989":{"crate_id":24,"path":["anstyle_parse","params","ParamsIter"],"kind":"struct"},"16:4462:15023":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:3234:8017":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:44439:8433":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:41706:2439":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"17:9455:31623":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:45772:2716":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:2514:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"1:12051:758":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:7027:22433":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:47683:2720":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"6:6156:13270":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"16:5384:15397":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"20:3567:19897":{"crate_id":20,"path":["clap_builder","builder","value_parser","UnknownArgumentValueParser"],"kind":"struct"},"17:10227:15667":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:14536:19814":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:3989:2460":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:8853:2578":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"17:14282:19795":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"6:494:9053":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"5:629:28039":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:13816:19758":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"11:1012:2239":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:40520:8239":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:11201:15790":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"2:1637:8209":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"}},"external_crates":{"26":{"name":"colorchoice","html_root_url":null},"23":{"name":"anstream","html_root_url":null},"20":{"name":"clap_builder","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"28":{"name":"strsim","html_root_url":null},"25":{"name":"utf8parse","html_root_url":null},"22":{"name":"clap_lex","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"27":{"name":"anstyle_query","html_root_url":null},"24":{"name":"anstyle_parse","html_root_url":null},"21":{"name":"anstyle","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}