{"root":"0:0:2394","crate_version":"4.5.4","includes_private":false,"index":{"2:13289:30138":{"id":"2:13289:30138","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13226:27832":{"id":"2:13226:27832","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13227:27843"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44169:8626","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13234:24604":{"id":"2:13234:24604","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12341:471","self::pattern":"2:12885:8623"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12891:8619","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13210:24561":{"id":"2:13210:24561","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42005:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42003:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10975:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10975:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13323:24321":{"id":"2:13323:24321","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:991:37323"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13208:24560":{"id":"2:13208:24560","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42005:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42003:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10975:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10975:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13201:30127":{"id":"2:13201:30127","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:13199:30126"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13248:23894":{"id":"2:13248:23894","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12885:8623","`DoubleEndedIterator`":"2:8263:129","prim@char":"1:12341:471","str::split_whitespace":"2:13226:27832","str::rsplit":"2:13254:24595"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43895:3065","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12891:8619","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13281:30135":{"id":"2:13281:30135","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12885:8623","`DoubleEndedIterator`":"2:8263:129","prim@char":"1:12341:471","str::rmatch_indices":"2:13284:30136"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44045:8638","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12891:8619","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13218:24586":{"id":"2:13218:24586","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_checked":"2:13220:24590","str::split_at_mut":"2:13219:24587"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13196:997":{"id":"2:13196:997","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12341:471"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13320:23765":{"id":"2:13320:23765","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13237:24605":{"id":"2:13237:24605","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12341:471","self::pattern":"2:12885:8623"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12891:8619","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12891:8619","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12906:8620","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13301:21805":{"id":"2:13301:21805","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12341:471","self::pattern":"2:12885:8623"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42003:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12891:8619","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13205:30128":{"id":"2:13205:30128","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13195":{"id":"2:13195","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13196:997","2:13197:23647","2:13198:30125","2:13199:30126","2:13201:30127","2:13204:23631","2:13205:30128","2:13206:336","2:13207:24564","2:13208:24560","2:13210:24561","2:13212:24562","2:13214:24563","2:13216:30129","2:13217:30130","2:13218:24586","2:13219:24587","2:13220:24590","2:13221:24591","2:13223:27827","2:13224:28019","2:13225:21600","2:13226:27832","2:13227:27843","2:13228:23895","2:13229:30131","2:13230:27828","2:13231:24603","2:13234:24604","2:13237:24605","2:13240:21382","2:13244:21383","2:13248:23894","2:13251:24593","2:13254:24595","2:13257:30132","2:13260:30133","2:13263:24597","2:13266:24599","2:13269:24601","2:13272:24602","2:13275:2626","2:13278:30134","2:13281:30135","2:13284:30136","2:13287:30137","2:13289:30138","2:13291:30139","2:13293:30140","2:13294:30141","2:13295:30142","2:13298:30143","2:13301:21805","2:13304:24606","2:13307:30144","2:13310:30145","2:13313:30146","2:13316:30147","2:13318:23761","2:13319:24318","2:13320:23765","2:13321:23766","2:13322:23767","2:13323:24321","2:13324:24322","2:13325:24323","2:13326:30148","2:13328:2850","2:13329:30149"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5618:8972":{"id":"5:5618:8972","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7645:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12891:8619","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13324:24322":{"id":"2:13324:24322","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:991:37323"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13224:28019":{"id":"2:13224:28019","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12341:471"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43871:8629","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13221:24591":{"id":"2:13221:24591","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13220:24590"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42003:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13266:24599":{"id":"2:13266:24599","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12341:471","str::splitn":"2:13263:24597","self::pattern":"2:12885:8623"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44017:8610","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12891:8619","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12891:8619","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12906:8620","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13257:30132":{"id":"2:13257:30132","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12885:8623","str::split":"2:13248:23894","prim@char":"1:12341:471","`DoubleEndedIterator`":"2:8263:129","str::rsplit_terminator":"2:13260:30133"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43945:8643","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12891:8619","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13310:30145":{"id":"2:13310:30145","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12341:471","self::pattern":"2:12885:8623"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12891:8619","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13291:30139":{"id":"2:13291:30139","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13284:30136":{"id":"2:13284:30136","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12885:8623","`DoubleEndedIterator`":"2:8263:129","prim@char":"1:12341:471","str::match_indices":"2:13281:30135"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44063:8639","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12891:8619","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12891:8619","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12906:8620","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13328:2850":{"id":"2:13328:2850","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4952:2850"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44203:2851","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13275:2626":{"id":"2:13275:2626","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12885:8623","`DoubleEndedIterator`":"2:8263:129","prim@char":"1:12341:471","str::rmatches":"2:13278:30134"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44099:8640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12891:8619","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13219:24587":{"id":"2:13219:24587","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:13218:24586","str::split_at_mut_checked":"2:13221:24591"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13319:24318":{"id":"2:13319:24318","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39904:8769","Self::is_ascii":"2:13318:23761"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42003:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39904:8769","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13244:21383":{"id":"2:13244:21383","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42005:191","prim@char":"1:12341:471","self::pattern":"2:12885:8623"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42003:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12891:8619","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12891:8619","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12906:8620","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13287:30137":{"id":"2:13287:30137","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13295:30142":{"id":"2:13295:30142","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12341:471","self::pattern":"2:12885:8623"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12891:8619","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12891:8619","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12911:8618","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13304:24606":{"id":"2:13304:24606","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12341:471","self::pattern":"2:12885:8623"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42003:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12891:8619","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12891:8619","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12906:8620","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13223:27827":{"id":"2:13223:27827","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12341:471"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43865:8630","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5635:23763":{"id":"5:5635:23763","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13321:23766"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13230:27828":{"id":"2:13230:27828","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44187:8624","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13272:24602":{"id":"2:13272:24602","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42003:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12891:8619","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12891:8619","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12906:8620","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13229:30131":{"id":"2:13229:30131","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44159:8637","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13198:30125":{"id":"2:13198:30125","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13217:30130":{"id":"2:13217:30130","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12347:1721","crate::ops::IndexMut":"2:3417:2935","str::slice_unchecked":"2:13216:30129"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13325:24323":{"id":"2:13325:24323","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:991:37323"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13313:30146":{"id":"2:13313:30146","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12341:471","self::pattern":"2:12885:8623"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12891:8619","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12891:8619","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12906:8620","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13220:24590":{"id":"2:13220:24590","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13221:24591"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42003:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13329:30149":{"id":"2:13329:30149","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4949:30149"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44212:8635","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5617:30845":{"id":"5:5617:30845","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:304:2714","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:304:2714","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13207:24564":{"id":"2:13207:24564","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12360:1851"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5621:30846":{"id":"5:5621:30846","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7645:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12891:8619","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5633:30849":{"id":"5:5633:30849","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:304:2714","`String`":"5:7645:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:304:2714","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13214:24563":{"id":"2:13214:24563","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10975:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10975:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13231:24603":{"id":"2:13231:24603","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12341:471","self::pattern":"2:12885:8623"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12891:8619","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13251:24593":{"id":"2:13251:24593","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12341:471","self::pattern":"2:12885:8623"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12700:8614","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12891:8619","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5636:23764":{"id":"5:5636:23764","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13322:23767"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13260:30133":{"id":"2:13260:30133","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12885:8623","str::split":"2:13248:23894","prim@char":"1:12341:471","str::split_terminator":"2:13257:30132"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43963:8642","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12891:8619","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12891:8619","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12906:8620","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13263:24597":{"id":"2:13263:24597","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12341:471","self::pattern":"2:12885:8623","str::rsplitn":"2:13266:24599"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43999:8612","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12891:8619","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13212:24562":{"id":"2:13212:24562","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10975:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10975:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13228:23895":{"id":"2:13228:23895","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44149:3061","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13326:30148":{"id":"2:13326:30148","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4951:30148"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44194:8634","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2394":{"id":"0:0:2394","crate_id":0,"name":"clap","span":{"filename":"src/lib.rs","begin":[6,0],"end":[115,18]},"visibility":"public","docs":"> **Command Line Argument Parser for Rust**\n\nQuick Links:\n- Derive [tutorial][_derive::_tutorial::chapter_0] and [reference][_derive]\n- Builder [tutorial][_tutorial::chapter_0] and [reference](index.html)\n- [Cookbook][_cookbook]\n- [FAQ][_faq]\n- [Discussions](https://github.com/clap-rs/clap/discussions)\n- [CHANGELOG](https://github.com/clap-rs/clap/blob/v4.5.4/CHANGELOG.md) (includes major version migration\n  guides)\n\n## Aspirations\n\n- Out of the box, users get a polished CLI experience\n  - Including common argument behavior, help generation, suggested fixes for users, colored output, [shell completions](https://github.com/clap-rs/clap/tree/master/clap_complete), etc\n- Flexible enough to port your existing CLI interface\n  - However, we won't necessarily streamline support for each use case\n- Reasonable parse performance\n- Resilient maintainership, including\n  - Willing to break compatibility rather than batching up breaking changes in large releases\n  - Leverage feature flags to keep to one active branch\n  - Being under [WG-CLI](https://github.com/rust-cli/team/) to increase the bus factor\n- We follow semver and will wait about 6-9 months between major breaking changes\n- We will support the last two minor Rust releases (MSRV, currently 1.74)\n\nWhile these aspirations can be at odds with fast build times and low binary\nsize, we will still strive to keep these reasonable for the flexibility you\nget.  Check out the\n[argparse-benchmarks](https://github.com/rust-cli/argparse-benchmarks-rs) for\nCLI parsers optimized for other use cases.\n\n## Example\n\nRun\n```console\n$ cargo add clap --features derive\n```\n*(See also [feature flag reference][_features])*\n\nThen define your CLI in `main.rs`:\n```rust\n# #[cfg(feature = \"derive\")] {\nuse clap::Parser;\n\n/// Simple program to greet a person\n#[derive(Parser, Debug)]\n#[command(version, about, long_about = None)]\nstruct Args {\n    /// Name of the person to greet\n    #[arg(short, long)]\n    name: String,\n\n    /// Number of times to greet\n    #[arg(short, long, default_value_t = 1)]\n    count: u8,\n}\n\nfn main() {\n    let args = Args::parse();\n\n    for _ in 0..args.count {\n        println!(\"Hello {}!\", args.name)\n    }\n}\n# }\n```\n\nAnd try it out:\n```console\n$ demo --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: demo[EXE] [OPTIONS] --name <NAME>\n\nOptions:\n  -n, --name <NAME>    Name of the person to greet\n  -c, --count <COUNT>  Number of times to greet [default: 1]\n  -h, --help           Print help\n  -V, --version        Print version\n\n$ demo --name Me\nHello Me!\n\n```\n*(version number and `.exe` extension on windows replaced by placeholders)*\n\nSee also the derive [tutorial][_derive::_tutorial] and [reference][_derive]\n\n### Related Projects\n\nAugment clap:\n- [wild](https://crates.io/crates/wild) for supporting wildcards (`*`) on Windows like you do Linux\n- [argfile](https://crates.io/crates/argfile) for loading additional arguments from a file (aka response files)\n- [shadow-rs](https://crates.io/crates/shadow-rs) for generating `Command::long_version`\n- [clap_mangen](https://crates.io/crates/clap_mangen) for generating man page source (roff)\n- [clap_complete](https://crates.io/crates/clap_complete) for shell completion support\n\nCLI Helpers\n- [cio](https://crates.io/crates/clio) for reading/writing to files specified as arguments\n- [clap-verbosity-flag](https://crates.io/crates/clap-verbosity-flag)\n- [clap-cargo](https://crates.io/crates/clap-cargo)\n- [concolor-clap](https://crates.io/crates/concolor-clap)\n\nTesting\n- [`trycmd`](https://crates.io/crates/trycmd):  Bulk snapshot testing\n- [`snapbox`](https://crates.io/crates/snapbox):  Specialized snapshot testing\n- [`assert_cmd`](https://crates.io/crates/assert_cmd) and [`assert_fs`](https://crates.io/crates/assert_fs): Customized testing\n\nDocumentation:\n- [Command-line Apps for Rust](https://rust-cli.github.io/book/index.html) book\n","links":{},"attrs":["#![doc(html_logo_url =\n\"https://raw.githubusercontent.com/clap-rs/clap/master/assets/clap.png\")]","#![warn(missing_docs, missing_debug_implementations,\nmissing_copy_implementations, trivial_casts, unused_allocation,\ntrivial_numeric_casts, clippy::single_char_pattern)]","#![forbid(unsafe_code)]","#![allow(clippy::single_component_path_imports)]","#![allow(clippy::branches_sharing_code)]","#![allow(clippy::if_same_then_else)]","#![allow(clippy::collapsible_else_if)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:3-20:0:2387"],"is_stripped":false}}},"5:5624:30847":{"id":"5:5624:30847","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7645:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13197:23647":{"id":"2:13197:23647","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13322:23767":{"id":"2:13322:23767","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5632:30848":{"id":"5:5632:30848","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7645:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13293:30140":{"id":"2:13293:30140","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5616":{"id":"5:5616","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5617:30845","5:5618:8972","5:5621:30846","5:5624:30847","5:5632:30848","5:5633:30849","5:5634:3090","5:5635:23763","5:5636:23764"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13298:30143":{"id":"2:13298:30143","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12341:471","self::pattern":"2:12885:8623"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12891:8619","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13307:30144":{"id":"2:13307:30144","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12341:471","self::pattern":"2:12885:8623"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12891:8619","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12891:8619","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12906:8620","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13254:24595":{"id":"2:13254:24595","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12885:8623","`DoubleEndedIterator`":"2:8263:129","prim@char":"1:12341:471","str::split":"2:13248:23894"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43913:8608","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12891:8619","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12891:8619","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12906:8620","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13294:30141":{"id":"2:13294:30141","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13318:23761":{"id":"2:13318:23761","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13199:30126":{"id":"2:13199:30126","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13321:23766":{"id":"2:13321:23766","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13206:336":{"id":"2:13206:336","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13207:24564","`u8`":"1:12360:1851"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3-20:0:2387":{"id":"0:3-20:0:2387","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[101,0],"end":[101,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"clap_builder","name":"clap_builder","id":"20:0:2387","glob":true}}},"2:13316:30147":{"id":"2:13316:30147","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12846:136","`FromStr`":"2:12845:2997"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42136:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12845:2997","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12845:2997","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13216:30129":{"id":"2:13216:30129","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12347:1721","str::slice_mut_unchecked":"2:13217:30130","crate::ops::Index":"2:39549:2934"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13227:27843":{"id":"2:13227:27843","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13226:27832"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44178:8625","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13225:21600":{"id":"2:13225:21600","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43881:3064","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5634:3090":{"id":"5:5634:3090","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7645:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13240:21382":{"id":"2:13240:21382","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42005:191","prim@char":"1:12341:471","self::pattern":"2:12885:8623"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42003:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12891:8619","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13278:30134":{"id":"2:13278:30134","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12885:8623","`DoubleEndedIterator`":"2:8263:129","prim@char":"1:12341:471","str::matches":"2:13275:2626"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44117:8641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12891:8619","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12891:8619","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12906:8620","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13204:23631":{"id":"2:13204:23631","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12432:8627"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13269:24601":{"id":"2:13269:24601","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42003:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12891:8619","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"17:15197:21137":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"16:6758:15711":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:45962:3396":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:12724:16894":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:46441:3392":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:22546:3470":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"21:113:34294":{"crate_id":21,"path":["anstyle","effect","EffectsDisplay"],"kind":"struct"},"17:11493:16971":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"7:79:15535":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"16:6466:16728":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:10333:8560":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:10530:153":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"16:5742:16696":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:9265:3274":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"6:570:9769":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:11674:17017":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:42176:2880":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:44522:8645":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"20:4101:34044":{"crate_id":20,"path":["clap_builder","mkeymap","KeyType"],"kind":"enum"},"2:22121:3031":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"17:13959:20365":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"25:0:2656":{"crate_id":25,"path":["utf8parse"],"kind":"module"},"5:2116:2920":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:8518:3062":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:39681:2870":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:5296:977":{"crate_id":2,"path":["core","iter"],"kind":"module"},"1:4815:21797":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"17:10612:16886":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"6:1535:10660":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:12341:471":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"16:2902:15793":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:45997:3350":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:42715:8553":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:13412:19857":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:40378:8744":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"22:5:3137":{"crate_id":22,"path":["clap_lex","ext","OsStrExt"],"kind":"trait"},"17:15116:21130":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"20:4049:21478":{"crate_id":20,"path":["clap_builder","parser","parser","Identifier"],"kind":"enum"},"5:7415:2907":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"11:1051:2897":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:10321:8554":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:40552:9068":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:11242:16947":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:15769:21181":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:4780:8720":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"6:5376:13777":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:44629:9138":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"6:4942:13730":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"6:6746:14520":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"2:7540:8936":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"16:2998:15795":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:2637:102":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:10323:8553":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:44313:8655":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:34221:8991":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"5:6934:8687":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"20:3968:21487":{"crate_id":20,"path":["clap_builder","parser","matches","value_source","ValueSource"],"kind":"enum"},"17:13538:19866":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:14372:20392":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:13455:19860":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:11634:16986":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"5:6566:2885":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"23:114:3070":{"crate_id":23,"path":["anstream","stream","IsTerminal"],"kind":"trait"},"1:1997:2971":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"1:12313:2862":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"5:7425:2922":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"2:2698:134":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"1:909:2884":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:3430:3083":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:4400:3176":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:47254:8515":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"16:7741:16777":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:8565:3103":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"9:482:15556":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:13187:19844":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:39505:8544":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"6:6821:14526":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"16:4718:16405":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:12586:9144":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:44017:8610":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"20:3354:21416":{"crate_id":20,"path":["clap_builder","builder","str","Str"],"kind":"struct"},"16:6991:32734":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:11547:17012":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:26051:267":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:1614:2886":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"17:15635:21172":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:11574:15675":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"11:800:2885":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"6:1565:10663":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"5:7582:2979":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:14325:20389":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:4917:3153":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:40664:2932":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"16:6927:16748":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"28:112:21570":{"crate_id":28,"path":["strsim","StrSimError"],"kind":"enum"},"17:13064:16855":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:21742:3333":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:40857:8954":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:15445:21161":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"16:3029:15797":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"16:4913:16439":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"16:2355:15768":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:11013:3247":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"17:13774:17076":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:4367:28007":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:3671:3056":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"18:80:21370":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:8709:3213":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"6:6629:14506":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"16:6335:16719":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"23:497:21505":{"crate_id":23,"path":["anstream","strip","StripStream"],"kind":"struct"},"17:12043:17034":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"5:4162:2881":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"11:1142:15681":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"20:3686:21469":{"crate_id":20,"path":["clap_builder","error","context","ContextValue"],"kind":"enum"},"11:2326:2896":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"2:44645:9156":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"14:187:15700":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:15678:21175":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"22:125:21499":{"crate_id":22,"path":["clap_lex","ParsedArg"],"kind":"struct"},"18:608:33850":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:12251:17088":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:11787:3114":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"6:5636:13804":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"16:6300:16717":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"17:14529:20403":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:650:2853":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"13:0:2508":{"crate_id":13,"path":["std_detect"],"kind":"module"},"17:12089:17032":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"16:5107:16495":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:0:2518":{"crate_id":17,"path":["object"],"kind":"module"},"16:8188:16792":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:2062:9026":{"crate_id":2,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"17:15313:21147":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:9461:8619":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"5:2127:2921":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"20:4138:21461":{"crate_id":20,"path":["clap_builder","output","fmt","Colorizer"],"kind":"struct"},"16:8216:16794":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"16:2728:15785":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"5:7449:2882":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:22903:27955":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:10604:3251":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"6:8247:13967":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:1092:2897":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"6:8351:15512":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"18:481:21395":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:11916:27241":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"17:11467:16964":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"5:2249:30026":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"14:160:15692":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:10787:29144":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"17:10997:16911":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:13926:2908":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"16:6634:16739":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"20:3460:21428":{"crate_id":20,"path":["clap_builder","builder","value_parser","EnumValueParser"],"kind":"struct"},"17:11293:16950":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"1:8257:3077":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:10534:33821":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"6:6880:13631":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"23:466:21506":{"crate_id":23,"path":["anstream","buffer","Buffer"],"kind":"struct"},"2:7710:28477":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:10421:3257":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"5:3410:2886":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"5:3318:2902":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"16:4531:16333":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:15608:21169":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:44815:164":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:5959:3273":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"6:6768:14523":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"6:6657:14509":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"16:6606:16737":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"16:6066:16711":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:22373:3464":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"6:7984:9715":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"16:3614:15801":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"16:6385:16721":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"6:1653:10670":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:12127:23884":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:46479:3346":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:10828:33811":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"26:40:21539":{"crate_id":26,"path":["colorchoice","AtomicChoice"],"kind":"struct"},"2:22855:28223":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"6:532:9763":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:13146:17174":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"1:3297:27118":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:3553:3045":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"16:2854:15791":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:11755:17022":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"16:2338:15767":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:42031:2880":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"9:424:15559":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:3666:8545":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"11:351:32578":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"11:2383:2880":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"6:1621:10667":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:8214:145":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:42047:2882":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"11:2403:2881":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"23:402:21516":{"crate_id":23,"path":["anstream","adapter","wincon","WinconBytes"],"kind":"struct"},"17:10419:16845":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:1958:671":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"1:8862:2880":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:23122:28192":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"17:15092:21128":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"5:5077:3045":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:3200:8984":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"16:4940:16443":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:8236:2879":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"6:0:1002":{"crate_id":6,"path":["libc"],"kind":"module"},"2:8181:8934":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:44212:8635":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:45830:3342":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"6:6664:14510":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:7988:3031":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"14:31:15692":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"6:7359:14931":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:4161:3142":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:43730:8601":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:22281:3335":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:8852:3236":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"17:11128:16921":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:4723:8718":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:21593:27799":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"17:12353:17120":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"20:755:34127":{"crate_id":20,"path":["clap_builder","builder","ext","Extension"],"kind":"trait"},"2:23133:28142":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"2:22560:9014":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"16:8259:16796":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"17:4986:17144":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"6:8197:15475":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:11443:16966":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"23:61:21525":{"crate_id":23,"path":["anstream","adapter","strip","VtUtf8Receiver"],"kind":"struct"},"17:11524:17011":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:23155:28190":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"20:3929:33962":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawOccurrences"],"kind":"struct"},"17:12824:16895":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:40412:8635":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"16:2808:15789":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:3026:23805":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"11:710:2888":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"6:4924:13728":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"6:6811:14525":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:10399:3064":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"9:178:15662":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"16:4424:16295":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:43237:28191":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:14414:20395":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"6:5039:13742":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:30650:28311":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"6:538:9764":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"11:2140:2896":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"17:11324:16977":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:10718:3085":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"2:39711:9002":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:44481:8662":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"6:578:9770":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:11144:2881":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"11:2469:2886":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"17:597:16871":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:4155:3141":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:11289:8615":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:3432:3084":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"5:1570:2889":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:12454:17124":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:38201:8996":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:14855:21117":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"5:7551:2877":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"20:3068:2668":{"crate_id":20,"path":["clap_builder","builder","arg","Arg"],"kind":"struct"},"1:9743:127":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"17:11313:16951":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"2:21850:3333":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:22839:28895":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:9112:3251":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"20:3764:21458":{"crate_id":20,"path":["clap_builder","error","ErrorInner"],"kind":"struct"},"22:152:21500":{"crate_id":22,"path":["clap_lex","ShortFlags"],"kind":"struct"},"2:43229:3037":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"6:4971:13734":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:8541:3065":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:4433:8707":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"18:718:21384":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:1603:2880":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:43720:8600":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:14051:20372":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:41016:8956":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:42039:2881":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"9:0:2511":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:13485:19862":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"5:4322:2880":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:6276:23834":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:41943:3107":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"16:6456:16727":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:9671:16846":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:43999:8612":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"6:5314:13769":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:10982:16910":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"6:7584:14942":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"5:7743:8684":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:15473:21164":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"18:589:28112":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"6:6698:14514":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"10:44:15667":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"27:0:2658":{"crate_id":27,"path":["anstyle_query"],"kind":"module"},"2:46101:3385":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:14177:20379":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"6:5122:13749":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:3132:8538":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"1:3291:24301":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:4335:3174":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:10068:16857":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"20:3776:21459":{"crate_id":20,"path":["clap_builder","error","Message"],"kind":"enum"},"2:46707:3347":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:674:2857":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:11923:15725":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:32766:8983":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:22638:3459":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"16:4830:16425":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:12516:17143":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"18:573:33825":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:8204:3021":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:4975:3158":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"6:5671:13808":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:46285:28044":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:16050:19848":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"17:13606:19871":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:4921:3157":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"20:3521:21426":{"crate_id":20,"path":["clap_builder","builder","value_parser","BoolValueParser"],"kind":"struct"},"6:564:9768":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:10622:33819":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:10905:16892":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:44878:3474":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:15463:21163":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"5:3292:2899":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:3360:2915":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:11865:17074":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"15:306:15717":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:943:2888":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:12352:738":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"17:13832:20358":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"5:7634:8574":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"2:2640:103":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:44641:9134":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:3329:8543":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"2:3417:2935":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:5770:3248":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:4133:3139":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:47106:8505":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:4501:8724":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:15324:21148":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"16:7755:16778":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:9370:21770":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:11251:3034":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"17:15944:19845":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"2:44187:8624":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:14986:21124":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:562:2825":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"17:11367:16929":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:42459:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:22927:27953":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"6:1628:10668":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"20:2775:2880":{"crate_id":20,"path":["clap_builder","util","flat_map","Iter"],"kind":"struct"},"6:5624:13802":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"17:15368:21152":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"16:5817:16701":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:12808:16854":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:9179:2882":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"20:3867:21484":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawValues"],"kind":"struct"},"16:6872:16746":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:1968:2970":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"18:680:21389":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:43023:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"5:5230:3270":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:44099:8640":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"16:6948:16749":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:13497:19863":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"25:53:3233":{"crate_id":25,"path":["utf8parse","types","State"],"kind":"enum"},"2:44149:3061":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"5:7435:31208":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"16:6278:16716":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:41965:3108":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:44327:8656":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:40756:8947":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"16:6120:16714":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:15168:21134":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:11654:21828":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"6:7306:9808":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:12347:1721":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"5:1340:2897":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"6:8288:13973":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"11:2423:2882":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"16:860:33023":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"17:11075:16929":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:42982:28313":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"16:3778:15810":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:4348:3175":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:14066:20373":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"6:5266:13763":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"11:1910:2900":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:12422:17123":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"16:6231:16715":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"16:5400:16692":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:3523:3093":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"1:10764:2830":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"20:1375:2676":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParserFactory","Parser"],"kind":"assoc_type"},"2:12906:8620":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"6:4837:13720":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"11:1887:2882":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"14:7:15692":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:10721:3087":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"16:4062:15979":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:2523:672":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:10818:16890":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"20:1663:21466":{"crate_id":20,"path":["clap_builder","error","format","ErrorFormatter"],"kind":"trait"},"20:3240:33941":{"crate_id":20,"path":["clap_builder","builder","command","MaxTermWidth"],"kind":"struct"},"16:5385:16691":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"24:298:21528":{"crate_id":24,"path":["anstyle_parse","Utf8Parser"],"kind":"struct"},"16:8155:16790":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:15582:21167":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:40589:2982":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"17:14847:21116":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:47126:8507":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:8611:3179":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:2539:9015":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"5:843:2903":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:2735:202":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:40686:8937":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:13553:19867":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"14:165:15693":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"6:7467:14935":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:43069:8552":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"18:635:33838":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:44063:8639":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:11362:8609":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"6:1547:10661":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:13814:3475":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"16:8202:16793":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:13723:20353":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"10:0:2512":{"crate_id":10,"path":["adler"],"kind":"module"},"16:2660:15782":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:13252:19847":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"16:6849:16745":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"5:4451:30076":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:10877:16891":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:22911:28167":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"5:6958:8688":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:922:2885":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:43793:8604":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:4391:109":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:3756:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"17:13473:19861":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"16:6588:16736":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:10331:8559":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"6:1485:10653":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:42264:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:13344:19852":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:3643:2972":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"6:6609:14504":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:46183:3351":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:40637:3025":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"5:3885:2886":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"5:1549:2887":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:4688:3181":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:6566:186":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:13999:20368":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"16:3014:15796":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:11825:17051":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:9886:16874":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"23:181:3031":{"crate_id":23,"path":["anstream","stream","private","Sealed"],"kind":"trait"},"17:11142:16889":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:32978:8982":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:44819:219":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"6:6650:14508":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:8528:3063":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:47152:8509":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:12597:17139":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"17:13116:17173":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"2:22455:3466":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"1:1083:2896":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:16079:21345":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"2:4789:8721":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"17:12485:17127":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:5509:128":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:4555:3169":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:14587:20406":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:32201:26507":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:42342:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"16:2303:15738":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:3336:3086":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"16:6620:16738":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"17:12225:17090":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:8177:3022":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"17:16151:21350":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"17:14341:20390":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:45909:3379":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"20:4066:33971":{"crate_id":20,"path":["clap_builder","parser","validator","Conflicts"],"kind":"struct"},"23:480:21504":{"crate_id":23,"path":["anstream","auto","AutoStream"],"kind":"struct"},"16:7006:16752":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:11028:21755":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"5:2210:2819":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"20:4207:34249":{"crate_id":20,"path":["clap_builder","util","graph","ChildGraph"],"kind":"struct"},"2:42225:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:10018:16850":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:46574:3364":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:5845:3289":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:11642:21802":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"6:6409:14490":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"6:6670:14511":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"16:6749:16742":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:9406:3045":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"2:44504:8644":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:5911:3045":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"17:12508:17128":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"28:120:21571":{"crate_id":28,"path":["strsim","RowId"],"kind":"struct"},"2:46686:28131":{"crate_id":2,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"2:23089:28132":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"2:44344:8657":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:12175:17103":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:44902:3471":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"18:754:21393":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:2629:3075":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"6:7389:10798":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"21:341:21494":{"crate_id":21,"path":["anstyle","effect","EffectIndexIter"],"kind":"struct"},"1:10353:23563":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"17:11715:17019":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"16:7888:16784":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"16:7379:33055":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"16:6532:16732":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:8339:27221":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:22605:3460":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"16:6940:32803":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"6:5219:13757":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"6:7485:14936":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"6:8300:13975":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"20:3887:33961":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Occurrences"],"kind":"struct"},"1:8241:2878":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"18:491:33852":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:21838:3031":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:45815:3377":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:12289:17083":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"17:15434:21160":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"23:288:21515":{"crate_id":23,"path":["anstream","adapter","strip","StrippedStr"],"kind":"struct"},"6:5320:13770":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"16:5927:16706":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:42201:196":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"21:0:2652":{"crate_id":21,"path":["anstyle"],"kind":"module"},"17:12388:17112":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:22591:3031":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"1:8498:3030":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"6:6756:14521":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"23:244:26724":{"crate_id":23,"path":["anstream","fmt","Adapter"],"kind":"struct"},"2:46029:3362":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:3480:3070":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"17:9858:16873":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"16:5863:16704":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"16:7590:16769":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:12362:17121":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"16:8226:16795":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"20:3135:21446":{"crate_id":20,"path":["clap_builder","builder","arg_settings","ArgFlags"],"kind":"struct"},"6:6763:14522":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"5:7107:30080":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"14:40:19846":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"17:11510:16957":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:11648:3258":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:12494:17091":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"9:357:15573":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:11026:16913":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"2:7933:3092":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:43710:8602":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"6:4864:13721":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"16:6026:16709":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"6:5489:13790":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"23:337:21514":{"crate_id":23,"path":["anstream","adapter","strip","StrippedBytes"],"kind":"struct"},"3:0:505":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"6:5244:13760":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:5216:27913":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:22160:27801":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"5:6612:30073":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:7875:16871":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"6:5212:13756":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:5477:13788":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:11256:16948":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"6:7561:14940":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:39469:8703":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:11898:17050":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"13:110:32597":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:10947:3024":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"1:3059:226":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"18:96:21371":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"20:3454:21433":{"crate_id":20,"path":["clap_builder","builder","value_parser","PathBufValueParser"],"kind":"struct"},"5:4117:30073":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:749:190":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"16:0:2517":{"crate_id":16,"path":["gimli"],"kind":"module"},"17:14284:20386":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:13387:19855":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:11423:2998":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"17:13877:20361":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:9807:16858":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:21620:27804":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:11827:3113":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"20:3544:21431":{"crate_id":20,"path":["clap_builder","builder","value_parser","NonEmptyStringValueParser"],"kind":"struct"},"11:1160:2898":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:41231:3093":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"6:7452:14933":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:878:2881":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"16:4802:16420":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:11089:16924":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:10538:157":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"16:2323:15766":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"2:6007:3045":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"6:5225:13758":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:2461:3006":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"17:10092:16879":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"6:5466:13786":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"16:2458:15773":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"11:742:2889":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:13526:19865":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"6:8253:13968":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"6:7575:14941":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"7:32:15528":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:11417:8610":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:36270:8994":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"28:87:21564":{"crate_id":28,"path":["strsim","HybridGrowingHashmapChar"],"kind":"struct"},"2:43484:28615":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:15289:21145":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:15023:21126":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:8797:3234":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"11:2151:2897":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:2312:3002":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1:5283:27233":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:40541:2977":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:4097:3138":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:3387:3087":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"16:3899:15862":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:8676:3155":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:23651:236":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:11042:16914":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"6:5083:13746":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"14:214:15701":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:12700:8614":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:15:2629":{"crate_id":2,"path":["core","write"],"kind":"macro"},"17:16223:21356":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"17:16093:21346":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"2:33529:3326":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"11:883:2894":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"17:10155:16691":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:43812:8605":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"16:8118:16788":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"5:4282:3045":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"18:613:33832":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:7331:23888":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"1:9398:3275":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"16:7604:16770":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:47080:3420":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"23:389:21528":{"crate_id":23,"path":["anstream","adapter","strip","Utf8Parser"],"kind":"struct"},"1:2004:785":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"2:3376:2709":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:3181:8963":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"2:32324:8537":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"1:11848:3115":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"23:447:3233":{"crate_id":23,"path":["anstream","adapter","wincon","State"],"kind":"enum"},"1:1101:2898":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:8344:23711":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"23:144:21519":{"crate_id":23,"path":["anstream","stream","AsLockedWrite"],"kind":"trait"},"2:40401:8747":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:10573:33813":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"6:5160:13752":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"11:430:32589":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:14131:20377":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:14516:20402":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"5:2102:2919":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"16:2374:15769":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:12150:17037":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:45894:3349":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:34394:8993":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"16:2592:15779":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"24:89:21523":{"crate_id":24,"path":["anstyle_parse","CharAccumulator"],"kind":"trait"},"2:39621:215":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:4580:8575":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"20:3189:113":{"crate_id":20,"path":["clap_builder","builder","command","Command"],"kind":"struct"},"2:4654:8710":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:43802:8607":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:3134:117":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"17:9916:16875":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"16:8175:16791":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:14091:20375":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"16:6160:15737":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:14147:20378":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"6:8271:13971":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:44928:8528":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"16:5769:16698":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"16:7769:16779":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:1098:16926":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:11915:17075":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:3614:28845":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:3215:8540":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"2:38311:8998":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"16:6480:16729":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"5:839:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:46612:28181":{"crate_id":2,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"17:12621:17137":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"5:1355:2896":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:10720:33803":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:9317:27235":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:261:33032":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"16:7306:33057":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:521:2819":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:40316:2851":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:42736:8562":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:14235:20382":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:11225:26876":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"16:7618:16771":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:22417:3465":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"16:7061:16755":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:12355:909":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"1:12340:1174":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"5:7645:243":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:11269:16949":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"6:1686:10674":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:553:9766":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:4801:3142":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:14489:20400":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"20:1689:24352":{"crate_id":20,"path":["clap_builder","error","format","Escape"],"kind":"struct"},"20:3587:21424":{"crate_id":20,"path":["clap_builder","builder","value_parser","_AutoValueParser"],"kind":"struct"},"17:13814:20357":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:10957:139":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"2:4842:8722":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:12363:1845":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"1:7944:23864":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"8:0:2510":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"6:5528:13793":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:12662:9145":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"6:5423:13782":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:46462:3398":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"6:4985:13736":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"6:6505:14454":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:3661:3029":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:40714:133":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:12646:9143":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:12318:16901":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"6:5502:13791":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"5:1369:2898":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:10689:9108":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:9129:3252":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"21:301:28871":{"crate_id":21,"path":["anstyle","color","DisplayBuffer"],"kind":"struct"},"2:4379:28140":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"20:3263:34101":{"crate_id":20,"path":["clap_builder","builder","ext","BoxedEntry"],"kind":"struct"},"6:4992:13737":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"18:113:21372":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"20:4233:2671":{"crate_id":20,"path":["clap_builder","util","color","ColorChoice"],"kind":"enum"},"1:9329:23749":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:40774:8957":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"16:5415:32801":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"20:3527:21429":{"crate_id":20,"path":["clap_builder","builder","value_parser","FalseyValueParser"],"kind":"struct"},"2:39603:212":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:12324:21715":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:8554:3112":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:9229:3293":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"20:4123:21462":{"crate_id":20,"path":["clap_builder","output","fmt","Stream"],"kind":"enum"},"2:46335:28182":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:403:16869":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:9296:21736":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:46367:3380":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"5:4252:3045":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"2:4733:8719":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"1:5831:220":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:42184:2881":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:10724:3083":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"2:40704:8943":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"20:3896:34066":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrenceValues"],"kind":"struct"},"6:479:9757":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"11:2562:32572":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"11:1007:2895":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"17:12572:16889":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"2:11324:8608":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"16:5831:16702":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:6907:21506":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"2:13636:205":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:42128:2839":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:47201:8512":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"5:7132:30097":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"16:5006:16463":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:11743:17021":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"6:1559:10662":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"16:7428:16759":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"6:6915:14555":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:5582:3243":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"16:6246:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:13785:17077":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:7925:23878":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:38146:8995":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:6031:2864":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:12189:17115":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:2890:163":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:11403:8612":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"5:1478:2880":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"16:4560:16339":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"16:7528:16763":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"18:659:21387":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"16:3475:15800":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:3511:211":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"6:5296:13767":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"5:3754:30073":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:11214:3253":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"11:2369:15685":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"16:2508:15775":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:9451:3034":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"1:8726:3232":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"24:131:3233":{"crate_id":24,"path":["anstyle_parse","state","definitions","State"],"kind":"enum"},"2:33190:8985":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"5:4481:3045":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:44609:9132":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"1:968:2892":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"6:5329:13771":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"6:6460:14495":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"20:3602:28242":{"crate_id":20,"path":["clap_builder","builder","debug_asserts","Flag"],"kind":"enum"},"6:7429:10781":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"6:5382:13778":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:14449:20397":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"20:3483:21435":{"crate_id":20,"path":["clap_builder","builder","value_parser","RangedI64ValueParser"],"kind":"struct"},"2:5195:435":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"1:2316:3003":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"1:5648:113":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"17:14212:20381":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"11:123:32568":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:2060:9025":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"6:485:9758":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:40420:2851":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:15410:21157":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:14599:20407":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"18:598:33824":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"17:16121:21348":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"16:867:33024":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"11:2304:2895":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"6:6706:14515":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"2:2537:9014":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"2:40523:8739":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:10975:239":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:9726:23803":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"2:2270:8546":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:8879:3238":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:13089:17172":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:12356:891":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"16:5307:16672":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:44625:9140":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"16:6665:16741":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"6:6636:14507":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:9433:162":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:41225:8928":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:4481:3177":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:23041:3031":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"5:7540:2876":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:8216:139":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:40724:8944":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"5:3046:29925":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:44419:8659":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:367:2846":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:42498:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"5:289:30073":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:40536:106":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:46352:28015":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:13972:20366":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:42729:8561":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:12623:9146":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"16:6079:16712":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:44117:8641":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:6916:233":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"11:673:2880":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:2863:3031":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"18:515:21397":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:12683:17136":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"1:4103:3137":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:10251:16880":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"16:7686:16774":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:11799:17071":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:39553:9000":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:1916:2957":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:5952:3272":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"11:1066:15679":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"11:1883:2880":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:14994:21112":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"5:4087:2885":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:6597:14503":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:15376:21153":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"5:1531:2883":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"20:3791:21475":{"crate_id":20,"path":["clap_builder","parser","arg_matcher","ArgMatcher"],"kind":"struct"},"5:1324:2895":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:12365:966":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"20:3307:21419":{"crate_id":20,"path":["clap_builder","builder","range","ValueRange"],"kind":"struct"},"17:13424:19858":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"20:3823:21477":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","SubCommand"],"kind":"struct"},"6:545:9765":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:11120:2880":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"16:6802:15710":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"6:497:9760":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"11:2569:2876":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:10661:16887":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:8812:3235":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"17:12478:17126":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"6:1510:10657":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"20:3377:21422":{"crate_id":20,"path":["clap_builder","builder","styled_str","StyledStr"],"kind":"struct"},"1:9551:2673":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"17:12659:17131":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"17:11419:16889":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"20:1107:21441":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParser"],"kind":"struct"},"5:7622:2981":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:16249:21358":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"23:373:21511":{"crate_id":23,"path":["anstream","adapter","strip","StripBytesIter"],"kind":"struct"},"2:45976:3344":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:12900:16899":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:12368:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"28:130:21572":{"crate_id":28,"path":["strsim","GrowingHashmapMapElemChar"],"kind":"struct"},"2:10965:3031":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:5986:3214":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"6:5617:13801":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"11:1107:15680":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:15126:21131":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"6:6775:14524":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"5:2539:30047":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:3835:3110":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:12107:16889":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:15010:21125":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:43031:8550":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:44298:8654":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:8479:3094":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"0:0:2394":{"crate_id":0,"path":["clap"],"kind":"module"},"17:16176:21352":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"2:46221:3363":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:1853:2940":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:39731:8700":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"6:6621:14505":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"20:3580:21440":{"crate_id":20,"path":["clap_builder","builder","value_parser","UnknownArgumentValueParser"],"kind":"struct"},"15:288:15716":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"16:6560:16734":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:12433:16859":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"6:7348:14930":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:12887:16898":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:5632:3246":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"17:15720:21177":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:40363:28210":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:11286:162":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"18:765:21386":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"22:30:3065":{"crate_id":22,"path":["clap_lex","ext","Split"],"kind":"struct"},"2:39581:210":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:32226:9058":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:40508:8742":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:9969:28867":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"6:8341:15511":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"16:7144:16756":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"11:2542:29014":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"6:491:9759":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:44045:8638":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:42056:3218":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:2729:195":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"17:11341:16963":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"16:6543:16733":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:4297:23561":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:41743:170":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:2477:3011":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"17:15400:21156":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:15655:21174":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:10227:21945":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"2:43767:8585":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:8606:3178":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:43963:8642":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:11688:16983":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"1:10927:3020":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"17:13292:19849":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"16:2878:15792":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:44470:8661":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"5:7658:8665":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"11:2443:2885":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"1:6793:3281":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:47137:8508":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:44687:3327":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"17:16269:19857":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"2:21622:27796":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:16105:21347":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"17:15058:21111":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:40786:8949":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:4414:8536":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"6:6524:14499":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:8316:2710":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"6:5102:13747":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:8680:149":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:12362:1839":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"16:6648:16740":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:42097:2863":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:10772:23870":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"16:4468:16316":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:46980:3393":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:12358:903":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"1:12366:1911":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"20:4158:8946":{"crate_id":20,"path":["clap_builder","util","flat_map","FlatMap"],"kind":"struct"},"1:11316:21822":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:12647:17132":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"1:12348:1811":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:40733:8945":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"21:173:34295":{"crate_id":21,"path":["anstyle","style","StyleDisplay"],"kind":"struct"},"2:45845:3378":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"5:6968:8689":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"6:5344:13773":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"5:1581:210":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:13375:19854":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"6:6441:14493":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"6:1723:10677":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:8177:8935":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:43488:8588":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"6:5653:13806":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"17:14298:20387":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:41983:3109":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:2083:9024":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:33875:8989":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:5702:3247":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"1:4327:3173":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:43284:28172":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:6847:3286":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"2:23188:28109":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"17:14503:20401":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"16:7559:16766":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:752:154":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"16:7509:16762":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:15214:21139":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:13568:19868":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"6:473:9756":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"16:4976:16456":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:44829:227":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"6:6562:14502":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"14:202:8664":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"14:220:15702":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"6:5112:13748":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:40818:8951":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:22989:29111":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"6:5290:13766":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:13674:20352":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:46906:3387":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:23020:3134":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"6:6689:14513":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"2:11930:8596":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"16:4502:16327":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:39718:8692":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:8234:2711":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:46122:3391":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"16:5897:16705":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:14912:21120":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:41797:3106":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"16:6813:16744":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:1207:16934":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:12400:9096":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"14:0:2515":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:22148:3329":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:15748:21179":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:3185:3323":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"1:4877:3202":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"5:680:31132":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"2:41825:28243":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:10495:113":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"16:4614:16347":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"6:1517:10658":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:3388:142":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:14575:16859":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"16:6574:16735":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:40644:8585":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:12278:17118":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"16:7085:32649":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"11:1603:15684":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"6:5643:13805":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:2535:2526":{"crate_id":1,"path":["std","io"],"kind":"module"},"1:11108:23832":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"5:1509:2882":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:21669:3031":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"20:3594:21443":{"crate_id":20,"path":["clap_builder","builder","value_parser","_AnonymousValueParser"],"kind":"struct"},"1:12367:1419":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:9337:16757":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"17:12213:17117":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:43913:8608":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:46043:3411":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"6:1585:10665":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:9214:3295":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:5773:3250":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"6:6714:14516":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"1:12360:1851":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"1:8182:3023":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:13046:16856":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"6:1707:10676":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:11557:17013":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"2:23144:28162":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"6:8259:13969":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:13211:19845":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:13791:115":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:3020:2975":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"2:32205:16796":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"24:252:2676":{"crate_id":24,"path":["anstyle_parse","Parser"],"kind":"struct"},"17:12584:16890":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"1:4195:3143":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:40391:8746":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:12127:17039":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:9289:2824":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"22:97:21497":{"crate_id":22,"path":["clap_lex","RawArgs"],"kind":"struct"},"5:219:8549":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"5:5470:8580":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:33663:8986":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"16:2612:15780":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"18:563:21400":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"11:1582:15683":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:47178:8511":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:9142:3253":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"16:6398:16722":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"21:279:21452":{"crate_id":21,"path":["anstyle","color","RgbColor"],"kind":"struct"},"17:14752:21114":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:12238:17089":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:4290:3045":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:13738:20354":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:10898:3204":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"6:7446:14932":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:11233:9156":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"16:6433:16725":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"16:7321:3218":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:1855:2941":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:3589:146":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:43276:28161":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:13363:19853":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"16:5756:16697":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:3334:3085":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"5:3805:2919":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:15646:21173":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:21605:27799":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"2:42136:226":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:13834:3472":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"2:42578:97":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"6:5181:13753":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"28:69:21563":{"crate_id":28,"path":["strsim","GrowingHashmapChar"],"kind":"struct"},"16:6317:16718":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:3473:17038":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"6:7366:3205":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:9278:23752":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:42994:28242":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"17:14977:21123":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:21724:3332":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"6:5390:13779":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"23:0:2654":{"crate_id":23,"path":["anstream"],"kind":"module"},"16:5367:16690":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"5:1077:30073":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:4217:3147":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"6:7516:14937":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:15778:21182":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:865:2880":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:40428:8634":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"6:8265:13970":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:3996:2882":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:15521:21165":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:8689:8933":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"5:1168:29952":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:15957:21342":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"17:13509:19864":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:32236:2712":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"20:0:2387":{"crate_id":20,"path":["clap_builder"],"kind":"module"},"2:10573:3036":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:44277:8653":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:5254:3095":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"1:2309:3001":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:14463:20398":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"20:3102:2669":{"crate_id":20,"path":["clap_builder","builder","arg_group","ArgGroup"],"kind":"struct"},"2:9787:91":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:16138:21349":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"17:16235:21357":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"2:46072:3331":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:13986:20367":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"18:735:21385":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"18:726:21392":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:46657:28056":{"crate_id":2,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"16:7711:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"28:34:21553":{"crate_id":28,"path":["strsim","StringWrapper"],"kind":"struct"},"17:15734:21178":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:10887:33817":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:8072:2861":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"16:7570:16767":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"20:3551:21430":{"crate_id":20,"path":["clap_builder","builder","value_parser","MapValueParser"],"kind":"struct"},"1:7144:3328":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:15799:21183":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"6:5046:13743":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"20:52:2675":{"crate_id":20,"path":["clap_builder","derive","FromArgMatches"],"kind":"trait"},"6:5677:13809":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:6861:3287":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"16:6412:16723":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"17:12342:17086":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"20:4035:21479":{"crate_id":20,"path":["clap_builder","parser","parser","PendingArg"],"kind":"struct"},"15:0:2516":{"crate_id":15,"path":["addr2line"],"kind":"module"},"21:127:34293":{"crate_id":21,"path":["anstyle","reset","ResetDisplay"],"kind":"struct"},"2:46154:3345":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:22824:28137":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:46236:3412":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"5:1540:2884":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:13547:8947":{"crate_id":2,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"6:5588:13799":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:44637:9133":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:40827:8952":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"16:2418:15771":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:15249:21141":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:12364:1827":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:2693:201":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"16:3196:15798":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"17:15138:21132":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:10964:21768":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"1:3652:26724":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"6:8012:15313":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"20:3638:21468":{"crate_id":20,"path":["clap_builder","error","context","ContextKind"],"kind":"enum"},"2:3190:3325":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:9118:199":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:8727:28871":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:12885:8623":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"20:3905:33970":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrencesRef"],"kind":"struct"},"5:7465:29937":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:14260:20384":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:47163:8510":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:40515:8743":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"1:5162:3209":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"16:5802:16700":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"21:209:21450":{"crate_id":21,"path":["anstyle","color","AnsiColor"],"kind":"enum"},"5:5729:8687":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:22493:3469":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"2:21651:27791":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"1:1636:2902":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:13594:19870":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"6:465:9755":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:42003:194":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"16:3810:15819":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:44491:8663":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:14402:20394":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:4002:3115":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:11354:16962":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:13899:20362":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"11:1728:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"11:490:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:947:2889":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:586:2827":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"6:586:9771":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"6:1699:10675":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:1607:2882":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"6:4979:13735":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"4:0:2509":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"19:0:1291":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"17:9984:16877":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:14079:20374":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"6:4870:13722":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:22962:27965":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1:1891:2951":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"17:13855:20360":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:10317:16882":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:7885:26746":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:12959:8647":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:10218:16849":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:11773:17069":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:10755:29819":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"17:12443:17114":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:1475:156":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"16:7549:16765":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:10647:23873":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"6:7546:14939":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:22479:3031":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"20:3286:2824":{"crate_id":20,"path":["clap_builder","builder","os_str","inner","Inner"],"kind":"struct"},"1:9420:3283":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"6:7461:14934":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:43701:8598":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:30618:8683":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:13661:8773":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"20:3475:21434":{"crate_id":20,"path":["clap_builder","builder","value_parser","PossibleValuesParser"],"kind":"struct"},"2:8683:2912":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:6400:23728":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:12354:733":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"2:13507:28185":{"crate_id":2,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"2:40352:8745":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"17:10759:16889":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:40992:3063":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"11:2231:15675":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"5:939:2905":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"16:6895:16747":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"16:8093:16787":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:12359:884":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:2968:123":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:10270:2972":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"16:7539:16764":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:3574:9001":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:8617:3168":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:6177:3288":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"5:956:2880":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"6:7339:14929":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:1755:8881":{"crate_id":2,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"17:10671:33812":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:39661:216":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:15039:21127":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"5:3042:29924":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"5:4938:217":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:9410:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"6:4800:13717":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:7761:8924":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"5:0:309":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:9393:187":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:11537:16978":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:15616:21170":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:8012:2833":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"6:4824:13719":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:8006:15312":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"20:34:2676":{"crate_id":20,"path":["clap_builder","derive","Parser"],"kind":"trait"},"2:1965:8912":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"18:0:2519":{"crate_id":18,"path":["memchr"],"kind":"module"},"20:3230:33965":{"crate_id":20,"path":["clap_builder","builder","command","TermWidth"],"kind":"struct"},"5:883:2904":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"22:0:2653":{"crate_id":22,"path":["clap_lex"],"kind":"module"},"1:8249:27121":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"6:5174:3164":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"5:7727:2886":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"6:4885:13724":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:11764:17023":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"11:1025:2896":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:7989:2848":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"5:3297:31219":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:41216:3276":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:3270:8992":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"17:11595:17015":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:11268:21844":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"2:39549:2934":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"16:7014:16753":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:5838:3288":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"20:2995:34177":{"crate_id":20,"path":["clap_builder","builder","app_settings","AppSettings"],"kind":"enum"},"2:22:817":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:10288:143":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"20:4200:3243":{"crate_id":20,"path":["clap_builder","util","graph","Child"],"kind":"struct"},"6:5002:13738":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:12432:8627":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"20:3150:21447":{"crate_id":20,"path":["clap_builder","builder","arg_settings","ArgSettings"],"kind":"enum"},"6:6788:32489":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:16198:21354":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"17:16187:21353":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"25:88:2676":{"crate_id":25,"path":["utf8parse","Parser"],"kind":"struct"},"2:23009:3119":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:9781:16872":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:15078:16928":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"11:837:2890":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"5:4436:265":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:23177:28143":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"16:4771:16412":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:41909:28216":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:12408:17113":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"5:6019:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:47059:3399":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"6:5052:13744":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"5:6176:3045":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:11631:21719":{"crate_id":1,"path":["std","sys","thread_local","fast_local","DtorState"],"kind":"enum"},"2:8263:129":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"20:3441:21437":{"crate_id":20,"path":["clap_builder","builder","value_parser","StringValueParser"],"kind":"struct"},"17:15333:21149":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:12530:17134":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"2:3365:8529":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"20:4075:27243":{"crate_id":20,"path":["clap_builder","mkeymap","Key"],"kind":"struct"},"2:41258:8932":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:3595:8705":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"6:5436:13783":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"5:3258:2900":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"5:7595:9068":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:7602:14943":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:1610:2885":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"11:1676:32574":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:23111:28160":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"11:832:2887":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"20:3835:21483":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","IdsRef"],"kind":"struct"},"17:10915:33820":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"5:304:2714":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"6:5557:13796":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"20:65:2678":{"crate_id":20,"path":["clap_builder","derive","ValueEnum"],"kind":"trait"},"11:2548:32559":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:8078:2959":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"17:15266:21142":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:43692:8599":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:47097:8504":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"16:3669:15802":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"16:5846:16703":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:41002:8955":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:13121:119":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"20:2956:2666":{"crate_id":20,"path":["clap_builder","builder","action","ArgAction"],"kind":"enum"},"11:2352:2897":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"6:5283:13765":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:746:3121":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"17:14968:21122":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"11:0:2513":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"5:3263:31215":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:13437:19859":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:15281:21144":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"16:5995:16708":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:8230:127":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:32294:2713":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1:494:23868":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:10137:16843":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:46553:3358":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"6:4916:13727":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:12416:9098":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"16:2768:15787":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:12707:16893":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"5:1441:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:12911:8618":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:11661:16987":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:14723:21113":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:16069:21344":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"16:6976:16751":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"16:7857:16783":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:40322:8708":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"6:1680:10673":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:22507:9014":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"2:2979:137":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:44392:8658":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"20:3448:21432":{"crate_id":20,"path":["clap_builder","builder","value_parser","OsStringValueParser"],"kind":"struct"},"16:150:15743":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"11:102:32565":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:14311:20388":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"5:7376:2916":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"16:7580:16768":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"16:8301:16797":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"16:5960:16707":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:22279:3031":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:43048:137":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"10:36:32558":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"5:1493:2881":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:0:563":{"crate_id":2,"path":["core"],"kind":"module"},"2:32237:244":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:32235:237":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"6:8294:13974":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:4209:3145":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:10329:206":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"16:6427:16724":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"20:4087:33988":{"crate_id":20,"path":["clap_builder","mkeymap","MKeyMap"],"kind":"struct"},"2:45862:3383":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:11567:17014":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"6:4891:13556":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:15342:21150":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:12671:17167":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"1:8470:3092":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"5:7566:2837":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:21639:27794":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:11102:16923":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:11877:17030":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"20:49:2674":{"crate_id":20,"path":["clap_builder","derive","CommandFactory"],"kind":"trait"},"2:44698:9157":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"16:6263:32775":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"21:329:21454":{"crate_id":21,"path":["anstyle","effect","EffectIter"],"kind":"struct"},"2:43641:28036":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:11115:16922":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:6455:3288":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"17:16165:21351":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"17:13235:19846":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"24:113:21530":{"crate_id":24,"path":["anstyle_parse","params","Params"],"kind":"struct"},"6:8029:15314":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"22:110:21498":{"crate_id":22,"path":["clap_lex","ArgCursor"],"kind":"struct"},"2:30639:8550":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:47038:3365":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:33596:8987":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"20:936:21420":{"crate_id":20,"path":["clap_builder","builder","resettable","IntoResettable"],"kind":"trait"},"21:182:21449":{"crate_id":21,"path":["anstyle","color","Color"],"kind":"enum"},"6:6471:14496":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:2489:3017":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:42192:2882":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:41931:3116":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"5:1843:2886":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"11:700:2882":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:40617:2995":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:46591:3413":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:10325:8561":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"16:7823:16782":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"6:4959:13732":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:2774:3078":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"11:687:2881":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:3144:2838":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:2074:28244":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:5092:3200":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"17:13753:20355":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"17:11189:16925":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"28:0:2659":{"crate_id":28,"path":["strsim"],"kind":"module"},"6:4787:13716":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"5:6775:30073":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:22126:3339":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"1:10976:3026":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"16:4882:16431":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:41765:3104":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:14436:20396":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:16212:21355":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"2:10314:119":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:6902:29108":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:7723:23712":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"17:12993:16902":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:15701:21176":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:23199:28183":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"2:44837:207":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"17:15222:21140":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"6:5134:13750":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:38256:8997":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:44617:9137":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:44203:2851":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:41781:3105":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:9350:3220":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:46253:3418":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:5106:3201":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:9171:3297":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"6:6417:14491":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"24:190:15596":{"crate_id":24,"path":["anstyle_parse","state","definitions","Action"],"kind":"enum"},"20:3807:2670":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","ArgMatches"],"kind":"struct"},"16:6494:16730":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:11904:8522":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:40673:3062":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:43881:3064":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:2713:23870":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:44178:8625":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:10512:23807":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"6:6478:14497":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"5:3251:2880":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"6:1593:10666":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:13922:20363":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"6:1580:10664":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:10350:16883":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:32295:8964":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:44194:8634":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:46139:3397":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:15102:21129":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"6:5598:13800":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:3900:3113":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"5:40:2936":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:3347:124":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:14189:20380":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:44912:180":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:40742:28041":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"23:416:21517":{"crate_id":23,"path":["anstream","adapter","wincon","WinconBytesIter"],"kind":"struct"},"2:11212:8614":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:9974:28886":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:47009:3414":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"16:5700:16694":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:957:2891":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:22633:3461":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"6:6435:14492":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:1496:10655":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"5:1559:2888":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:11583:16985":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"16:3925:15865":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"6:5236:13759":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:1625:2900":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:8194:3024":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"1:9324:23755":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"16:7168:16757":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:10994:26871":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:938:2887":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"16:7397:33049":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:2203:16959":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:21583:8764":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:8560:3111":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:437:15740":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"11:1923:2902":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"5:3050:29923":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:23100:28106":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"17:14246:20383":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:12695:17135":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"1:5441:203":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"16:2438:15772":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:5596:3244":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1:4811:21793":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"17:11730:17020":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"1:932:2886":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"6:8328:13978":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"17:16259:19855":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"16:6047:16710":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:9938:16876":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:3597:17056":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:6503:220":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:22996:3120":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:10578:3038":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"16:6504:16731":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:12361:1833":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"17:14111:20376":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:44621:9136":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:11853:17073":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:2149:189":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:3601:8704":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:39641:214":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:2070:197":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"20:3250:33989":{"crate_id":20,"path":["clap_builder","builder","ext","Extensions"],"kind":"struct"},"9:238:3233":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:40567:2978":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:5329:204":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"17:3264:17033":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"5:3820:2920":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:10327:8562":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:15206:21138":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:4:1256":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"1:9425:3284":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"26:0:2657":{"crate_id":26,"path":["colorchoice"],"kind":"module"},"1:9415:235":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"16:2528:15776":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:10185:16848":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"5:7485:2882":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"9:330:15613":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:10710:16888":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:7403:23882":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:513:16870":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:669:2856":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:8774:3233":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"1:2307:138":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"1:3897:3114":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:12345:335":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:42119:9081":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:11788:17070":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:12056:17035":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"17:10954:16909":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"24:0:2655":{"crate_id":24,"path":["anstyle_parse"],"kind":"module"},"17:13797:20356":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:2735:3067":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"16:4856:16428":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"16:7473:16760":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:2226:128":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"17:14876:21119":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"6:5191:13754":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:15569:21166":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"11:2536:32561":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"5:5934:2885":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:43865:8630":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"5:7493:2882":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:46784:3381":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"21:259:21451":{"crate_id":21,"path":["anstyle","color","Ansi256Color"],"kind":"struct"},"2:46951:3359":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:8058:2860":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"5:7059:264":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:44663:130":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"16:6342:33035":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:44159:8637":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:11063:16933":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"11:1896:2886":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"17:15814:21184":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:3584:254":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"20:3716:3079":{"crate_id":20,"path":["clap_builder","error","kind","ErrorKind"],"kind":"enum"},"2:46058:3417":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:3174:8961":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:2896:258":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"5:743:118":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"16:5075:16486":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"16:2936:15794":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:8548:3061":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"6:5407:1243":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:2067:198":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:43780:8586":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:4998:3152":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:13272:19848":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:7646:8752":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:14025:20370":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"20:3395:2667":{"crate_id":20,"path":["clap_builder","builder","value_hint","ValueHint"],"kind":"enum"},"1:974:2893":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:44456:8660":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:23078:27946":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"15:327:15721":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"6:6738:14519":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"2:46014:3356":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"6:6447:14494":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:6198:8939":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:12557:16929":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"24:285:21527":{"crate_id":24,"path":["anstyle_parse","AsciiParser"],"kind":"struct"},"26:21:2671":{"crate_id":26,"path":["colorchoice","ColorChoice"],"kind":"enum"},"1:8650:3203":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:11392:16961":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"18:507:33825":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"6:7537:14938":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"16:2636:15781":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"9:502:15560":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"6:5031:13741":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:11051:16939":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"6:5277:13764":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"6:5064:13745":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:12949:16901":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"21:353:21455":{"crate_id":21,"path":["anstyle","reset","Reset"],"kind":"struct"},"2:40867:8942":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:8187:3020":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"6:7412:10783":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:41209:8926":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"16:7355:16758":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:12308:23739":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"6:5260:13762":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:22947:28005":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:4919:3156":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:38890:8999":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:11605:17010":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"16:7910:16785":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:42381:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:5616:3245":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"16:3329:15799":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"2:3629:8542":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:43245:3039":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:11647:17016":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:42022:173":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"1:1838:696":{"crate_id":1,"path":["std","env"],"kind":"module"},"17:10044:16878":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:43469:9125":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"17:12328:17084":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"23:432:34341":{"crate_id":23,"path":["anstream","adapter","wincon","WinconCapture"],"kind":"struct"},"2:3382:140":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:1619:2899":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:6368:23866":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:44870:3473":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"11:328:32563":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"6:4952:13731":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"6:5014:13739":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"20:3258:34178":{"crate_id":20,"path":["clap_builder","builder","ext","BoxedExtension"],"kind":"struct"},"16:5781:16699":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:15176:21135":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"20:4005:34135":{"crate_id":20,"path":["clap_builder","parser","parser","ParseResult"],"kind":"enum"},"17:14386:20393":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:10457:138":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"20:3877:33986":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","GroupedValues"],"kind":"struct"},"5:7457:210":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:8093:2960":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:39566:213":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:10355:27247":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"1:9714:138":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"6:5630:13803":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"5:1590:2918":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:42098:3221":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:9782:84":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"16:6442:16726":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:4532:2835":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:8265:2919":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"5:3661:2880":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:42722:8554":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:2887:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"16:6782:16743":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"5:1739:30073":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:4813:21795":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"17:2037:16965":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:21671:3337":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"2:46412:3386":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"6:7330:9637":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:896:2883":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"6:5515:13792":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"5:7405:2885":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:3139:247":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"17:13024:16903":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:32219:8719":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"2:32159:3255":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"16:7799:16780":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:34048:8990":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"16:7052:16754":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"16:6962:16750":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:45930:3384":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:13609:29913":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:14933:21121":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:44891:28107":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"17:256:33024":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"16:542:32786":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"15:394:15728":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"1:7478:23554":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"6:4876:13723":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:14012:20369":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:11045:3254":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"1:11102:23877":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:11682:23831":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:4811:2836":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"23:309:21512":{"crate_id":23,"path":["anstream","adapter","strip","StripStr"],"kind":"struct"},"17:15273:21143":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"11:844:2891":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:12969:16847":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:11963:8597":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"17:15931:19844":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"2:47231:8514":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"22:28:3031":{"crate_id":22,"path":["clap_lex","ext","private","Sealed"],"kind":"trait"},"17:12851:16896":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:11497:16958":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"5:6433:3478":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"16:7132:32785":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:11621:16988":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"6:8306:13976":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"5:5466:8579":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:4821:17138":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"20:3917:34067":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrenceValuesRef"],"kind":"struct"},"6:4909:13726":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:8535:3064":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"17:13766:17078":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:9721:3023":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"21:374:21456":{"crate_id":21,"path":["anstyle","style","Style"],"kind":"struct"},"1:4666:3180":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:40607:2996":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:40765:8948":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"20:1374:21442":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParserFactory"],"kind":"trait"},"18:706:8621":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:12344:1314":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"17:2234:16984":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:10917:21695":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"11:875:2893":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:43254:157":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:7993:3265":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"17:11702:17018":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"2:13524:8775":{"crate_id":2,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"2:22505:28947":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"11:1917:2901":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:11931:15725":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:15151:21133":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:8868:3237":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"1:7360:26741":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:13015:16859":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"5:5864:251":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"6:7314:10612":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:10334:2951":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"20:3787:2853":{"crate_id":20,"path":["clap_builder","error","Backtrace"],"kind":"struct"},"1:6672:3276":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:15596:21168":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"16:7648:16772":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:9469:3322":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"9:447:15557":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:12076:17031":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:12351:735":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"2:8371:178":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:12201:17116":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:15418:21158":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:4319:3172":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"6:5370:13776":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:44939:8526":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:8225:165":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:12339:417":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"1:2463:3007":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:14788:21115":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:44951:28049":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:980:2894":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:32326:114":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"6:6542:14501":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:45877:3343":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"5:3040:31180":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"11:1903:2899":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"16:4352:16246":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:46524:3352":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"20:3626:21423":{"crate_id":20,"path":["clap_builder","builder","styling","Styles"],"kind":"struct"},"1:3604:3027":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:9244:3296":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"5:3039:8531":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"5:2220:31206":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:40695:8938":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:1069:2895":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"5:5422:30073":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:8007:2831":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:43741:8587":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:21637:27803":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:2864:8768":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:15383:21154":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:11693:21689":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:43010:28314":{"crate_id":2,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"5:2302:31663":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"6:6721:14517":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"20:4183:33984":{"crate_id":20,"path":["clap_builder","util","flat_set","FlatSet"],"kind":"struct"},"2:12900:8621":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:33462:3324":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"11:774:2883":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:15624:21171":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"20:3947:21486":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Indices"],"kind":"struct"},"2:12891:8619":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:30586:2914":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:3863:2885":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"1:3389:3088":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:11513:23885":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"16:2788:15788":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:43266:3233":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"1:8349:3079":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"20:4152:34039":{"crate_id":20,"path":["clap_builder","util","any_value","AnyValueId"],"kind":"struct"},"20:3321:21421":{"crate_id":20,"path":["clap_builder","builder","resettable","Resettable"],"kind":"enum"},"5:2770:30120":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"16:6353:16720":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:6193:220":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:1882:3045":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"20:1665:21467":{"crate_id":20,"path":["clap_builder","error","format","KindFormatter"],"kind":"struct"},"5:7385:2882":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"20:57:2673":{"crate_id":20,"path":["clap_builder","derive","Args"],"kind":"trait"},"2:21848:3334":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"5:3222:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"7:0:1901":{"crate_id":7,"path":["unwind"],"kind":"module"},"12:0:2514":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:2893:144":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"23:359:21510":{"crate_id":23,"path":["anstream","adapter","strip","StripBytes"],"kind":"struct"},"20:3938:34065":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawOccurrenceValues"],"kind":"struct"},"16:8313:137":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:10922:21775":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"20:3502:21436":{"crate_id":20,"path":["clap_builder","builder","value_parser","RangedU64ValueParser"],"kind":"struct"},"2:46314:28119":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:33730:8988":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:12863:16897":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"16:5347:16689":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:11764:23564":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:41202:27956":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"6:8317:13977":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:15992:21343":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"1:9185:3294":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"13:229:32591":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"16:7111:32909":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"6:6678:14512":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"6:5415:13781":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:9350:21850":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:2900:257":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"5:7610:2980":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"5:7668:8666":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"20:4146:34136":{"crate_id":20,"path":["clap_builder","util","any_value","AnyValue"],"kind":"struct"},"6:5536:13794":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:12768:16851":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"20:2797:2881":{"crate_id":20,"path":["clap_builder","util","flat_map","IterMut"],"kind":"struct"},"6:4932:13729":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:0:1713":{"crate_id":1,"path":["std"],"kind":"module"},"16:5686:16693":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:3212:8539":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"2:40435:8740":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:43895:3065":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:43841:8636":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:5083:3199":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"17:13173:17175":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"17:14271:20385":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:12792:16853":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"16:4641:16351":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:15822:21185":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"16:7098:32809":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:10284:16881":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:3294:27119":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:40843:8953":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"5:4515:30076":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"18:689:21390":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"6:559:9767":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"20:3120:21417":{"crate_id":20,"path":["clap_builder","builder","arg_predicate","ArgPredicate"],"kind":"enum"},"6:6874:14553":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"16:6098:16713":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:11699:21709":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"6:4897:13725":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"23:99:21518":{"crate_id":23,"path":["anstream","stream","RawStream"],"kind":"trait"},"2:47293:8516":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:6790:3280":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:4880:3180":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:43871:8629":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:30363:3117":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:21722:3031":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:44812:150":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"17:14475:20399":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"6:5020:13740":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"16:7813:16781":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:39904:8769":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"17:13844:20359":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"6:5457:13785":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:45947:3390":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"5:1184:30052":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:3586:3028":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:12399:17122":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"2:22889:28118":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"3:234:226":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"17:12030:17036":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:31024:8764":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:22878:3118":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:4766:3198":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:12346:1687":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"18:651:33825":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:44613:9135":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:13871:152":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"20:3854:21485":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","ValuesRef"],"kind":"struct"},"6:6532:14500":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"20:61:2677":{"crate_id":20,"path":["clap_builder","derive","Subcommand"],"kind":"trait"},"17:11016:16912":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:12353:754":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"17:15356:21151":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"21:309:21453":{"crate_id":21,"path":["anstyle","effect","Effects"],"kind":"struct"},"5:7393:2906":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:9202:3292":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"16:8073:16786":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:11360:2999":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"6:5146:13751":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:47216:8513":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:41250:8930":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:42955:28246":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:11214:16920":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:43822:8606":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"18:698:21391":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:426:185":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:43854:8633":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"11:787:2884":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"2:22771:28122":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"6:1671:10672":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:44807:28312":{"crate_id":2,"path":["core","future","async_drop","Noop"],"kind":"struct"},"2:10319:128":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"1:11201:3252":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"16:2838:15790":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"16:7633:32911":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:40795:8940":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:6712:3285":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"11:434:32585":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"11:1891:2885":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:13325:19851":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:12464:17125":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:40808:8950":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"18:538:21399":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:46268:3419":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:12543:17133":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"17:14356:20391":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:16032:19847":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"2:4659:8711":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:1995:1358":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"6:6900:14554":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:12711:137":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:951:2890":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:4650:221":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"1:8631:3171":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"24:26:21531":{"crate_id":24,"path":["anstyle_parse","params","ParamsIter"],"kind":"struct"},"17:11227:16919":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:12264:17087":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:13581:19869":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:4205:3144":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"6:6729:14518":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"20:3291:21418":{"crate_id":20,"path":["clap_builder","builder","possible_value","PossibleValue"],"kind":"struct"},"9:53:15576":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:42965:8550":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:6896:8941":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"2:42087:3219":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:8625:3112":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"5:2322:30039":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"5:6051:3270":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:7645:8751":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"5:3648:182":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"18:623:33835":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"20:3989:21480":{"crate_id":20,"path":["clap_builder","parser","parser","ParseState"],"kind":"enum"},"17:14545:20404":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"6:5361:13775":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:2699:3076":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:617:2849":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"6:1663:10671":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"16:2708:15784":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"18:531:21398":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"6:517:9761":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:11153:16890":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"6:4965:13733":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"16:5914:32791":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"5:6693:2882":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"6:5445:13784":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:46861:3353":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"6:5336:13772":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"16:3842:15828":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"20:3268:197":{"crate_id":20,"path":["clap_builder","builder","os_str","OsStr"],"kind":"struct"},"2:42420:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:11005:2960":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"2:2884:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"17:15456:21162":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"18:521:21394":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:11166:16927":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:6084:8946":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:14868:21118":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:15426:21159":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"5:734:250":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:5022:8733":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"23:322:21513":{"crate_id":23,"path":["anstream","adapter","strip","StripStrIter"],"kind":"struct"},"6:5400:13780":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"20:3372:2824":{"crate_id":20,"path":["clap_builder","builder","str","inner","Inner"],"kind":"struct"},"23:486:34351":{"crate_id":23,"path":["anstream","auto","StreamInner"],"kind":"enum"},"17:11841:17072":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"20:3957:21476":{"crate_id":20,"path":["clap_builder","parser","matches","matched_arg","MatchedArg"],"kind":"struct"},"20:1670:21470":{"crate_id":20,"path":["clap_builder","error","format","RichFormatter"],"kind":"struct"},"6:1639:10669":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"16:7727:16776":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:6352:3475":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:15190:21136":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:10769:33816":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:21730:3336":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"16:8136:16789":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:9163:2880":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"6:5546:13795":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"18:643:33825":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"6:1526:10659":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:2659:112":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:43945:8643":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:30997:196":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"1:11609:27243":{"crate_id":1,"path":["std","sys","thread_local","fast_local","Key"],"kind":"struct"},"17:12929:16900":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:12371:16900":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"17:15301:21146":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:15760:21180":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:12004:8593":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"17:14038:20371":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"18:670:21388":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:8654:3205":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:8030:2830":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"16:2478:15774":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"6:5581:13798":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:46204:3357":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:11169:3065":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"1:666:2855":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"20:2980:33942":{"crate_id":20,"path":["clap_builder","builder","app_settings","AppFlags"],"kind":"struct"},"1:11090:21455":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:11251:8603":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:11405:16960":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"9:392:15558":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:6676:3277":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"5:1204:29964":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"6:8282:13972":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"16:4587:16343":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"16:2684:15783":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:3061:137":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"6:5665:13807":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:9755:16842":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"11:1087:32583":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"6:6519:14498":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"5:3284:2901":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:9155:3254":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"1:10938:21767":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"6:4811:13718":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"16:2748:15786":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"25:23:15596":{"crate_id":25,"path":["utf8parse","types","Action"],"kind":"enum"},"2:22718:28035":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"18:581:8764":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:44633:9139":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:12357:897":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"17:9737:16844":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"16:872:33032":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"5:6072:9357":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:12845:2997":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"20:3844:2884":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Values"],"kind":"struct"},"17:11812:17029":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"16:2548:15777":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:12342:1873":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"17:13399:19856":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"6:523:9762":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:42617:3271":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"20:3534:21427":{"crate_id":20,"path":["clap_builder","builder","value_parser","BoolishValueParser"],"kind":"struct"},"1:373:2847":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:4147:3140":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"6:6491:14453":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:15836:21186":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"5:6414:3477":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"11:2554:32567":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:8599:3107":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"11:811:2886":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"17:10439:16884":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"11:856:2892":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"16:5722:16695":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"6:1490:10654":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:6707:8958":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:888:2882":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:12300:17119":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:15390:21155":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"11:396:32576":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"16:4743:16407":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"16:2572:15778":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:8488:3026":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"11:2124:2895":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"6:5200:13755":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:3385:141":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:1631:2901":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:11431:8613":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:32212:28184":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"6:6379:14425":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"6:5306:13768":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"16:7656:16773":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:42539:90":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"6:5565:13797":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"6:5352:13774":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"2:40579:3064":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"6:1503:10656":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:13946:20364":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:12292:23704":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"2:10114:8551":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"17:10170:16692":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"16:5037:16471":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"11:299:32569":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"6:5250:13761":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:13308:19850":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:2175:16999":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:3220:8541":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"11:364:32581":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"6:5483:13789":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"17:10524:16885":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:5252:27233":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:7695:16775":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:40474:8741":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"1:11668:21839":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"24:96:21525":{"crate_id":24,"path":["anstyle_parse","VtUtf8Receiver"],"kind":"struct"},"11:1566:15682":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"20:4214:2672":{"crate_id":20,"path":["clap_builder","util","id","Id"],"kind":"struct"},"6:1692:3165":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:11445:8611":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:30624:8903":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:47117:8506":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:2479:3012":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"17:14560:20405":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"5:3674:2881":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"20:1711:137":{"crate_id":20,"path":["clap_builder","error","Error"],"kind":"struct"},"2:44169:8626":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"20:3564:21438":{"crate_id":20,"path":["clap_builder","builder","value_parser","TryMapValueParser"],"kind":"struct"},"6:5472:13787":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:41240:8929":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:10985:26873":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"16:2394:15770":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"16:7497:16761":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:23166:28163":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"1:9283:115":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:42303:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"20:1182:21439":{"crate_id":20,"path":["clap_builder","builder","value_parser","TypedValueParser"],"kind":"trait"},"1:1914:2673":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"20:3798:21488":{"crate_id":20,"path":["clap_builder","parser","error","MatchesError"],"kind":"enum"}},"external_crates":{"26":{"name":"colorchoice","html_root_url":null},"23":{"name":"anstream","html_root_url":null},"20":{"name":"clap_builder","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"28":{"name":"strsim","html_root_url":null},"25":{"name":"utf8parse","html_root_url":null},"22":{"name":"clap_lex","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"27":{"name":"anstyle_query","html_root_url":null},"24":{"name":"anstyle_parse","html_root_url":null},"21":{"name":"anstyle","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":29}